XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b3.asm
0001               ***************************************************************
0002               *                          Stevie
0003               *
0004               *       A 21th century Programming Editor for the 1981
0005               *         Texas Instruments TI-99/4a Home Computer.
0006               *
0007               *              (c)2018-2022 // Filip van Vooren
0008               ***************************************************************
0009               * File: stevie_b3.asm
0010               *
0011               * Bank 3 "John"
0012               * Dialogs & Command Buffer pane
0013               ***************************************************************
0014                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 220716-1855230
0003               ***************************************************************
                   < stevie_b3.asm
0015                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037               
0038               
0039               
0040               *--------------------------------------------------------------
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0070      0000     device.f18a               equ  0       ; F18a GPU
0071      0001     device.9938               equ  1       ; 9938 GPU
0072      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0073      0001     skip_vdp_f18a_support     equ  1       ; Turn off f18a GPU check
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
                   < stevie_b3.asm
0016                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b3.asm
0017                       copy  "equates.asm"         ; Equates Stevie configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0072               
0073      0017     pane.botrow               equ  23      ; Bottom row on screen
0074               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard device"
0092               ;-----------------------------------------------------------------
0093               ;   Dialog ID's >= 100 indicate that command prompt should be
0094               ;   hidden and no characters added to CMDB keyboard buffer.
0095               ;-----------------------------------------------------------------
0096      0064     id.dialog.menu            equ  100     ; "Main Menu"
0097      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0098      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0099      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0100      0068     id.dialog.help            equ  104     ; "About"
0101      0069     id.dialog.file            equ  105     ; "File"
0102      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0103      006B     id.dialog.basic           equ  107     ; "TI Basic"
0104      006C     id.dialog.config          equ  108     ; "Configure"
0105               *--------------------------------------------------------------
0106               * Suffix characters for clipboards
0107               *--------------------------------------------------------------
0108      3100     clip1                     equ  >3100   ; '1'
0109      3200     clip2                     equ  >3200   ; '2'
0110      3300     clip3                     equ  >3300   ; '3'
0111      3400     clip4                     equ  >3400   ; '4'
0112      3500     clip5                     equ  >3500   ; '5'
0113               *--------------------------------------------------------------
0114               * Keyboard flags in Stevie
0115               *--------------------------------------------------------------
0116      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0117               
0118               *--------------------------------------------------------------
0119               * File work mode
0120               *--------------------------------------------------------------
0121      0001     id.file.loadfile          equ  1       ; Load file
0122      0002     id.file.insertfile        equ  2       ; Insert file
0123      0003     id.file.appendfile        equ  3       ; Append file
0124      0004     id.file.savefile          equ  4       ; Save file
0125      0005     id.file.saveblock         equ  5       ; Save block to file
0126      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0127      0007     id.file.printfile         equ  7       ; Print file
0128      0008     id.file.printblock        equ  8       ; Print block
0129               *--------------------------------------------------------------
0130               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0131               *--------------------------------------------------------------
0132      A000     core1.top         equ  >a000           ; Structure begin
0133      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0134      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0135      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0136      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0137      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0138      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0139      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0140      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0141      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0142      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0143      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0144      A016     outparm1          equ  core1.top + 22  ; Function output parameter 1
0145      A018     outparm2          equ  core1.top + 24  ; Function output parameter 2
0146      A01A     outparm3          equ  core1.top + 26  ; Function output parameter 3
0147      A01C     outparm4          equ  core1.top + 28  ; Function output parameter 4
0148      A01E     outparm5          equ  core1.top + 30  ; Function output parameter 5
0149      A020     outparm6          equ  core1.top + 32  ; Function output parameter 6
0150      A022     outparm7          equ  core1.top + 34  ; Function output parameter 7
0151      A024     outparm8          equ  core1.top + 36  ; Function output parameter 8
0152      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0153      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0154      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0155      A02C     unpacked.string   equ  core1.top + 44  ; 6 char string with unpacked uin16
0156      A032     trmpvector        equ  core1.top + 50  ; Vector trampoline (if p1|tmp1 = >ffff)
0157      A034     core1.free1       equ  core1.top + 52  ; 52-85 **free**
0158      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0159      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0160                                 ;--------------------------------------------
0161                                 ; TI Basic related
0162                                 ;--------------------------------------------
0163      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0164      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0165      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0166      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0167      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0168      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0169      A0C0     tib.automode      equ  core1.top + 192 ; TI-Basic AutoMode (crunch/uncrunch)
0170      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0171      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0172      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0173      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0174      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0175      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0176      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0177      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0178      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0179      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0180      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0181      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0182      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0183      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0184      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0185      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0186      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0187      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0188      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0189      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0190      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0191      A100     core1.free        equ  core1.top + 256 ; End of structure
0192               *--------------------------------------------------------------
0193               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0194               *--------------------------------------------------------------
0195      A100     core2.top         equ  >a100           ; Structure begin
0196      A100     rambuf            equ  core2.top       ; RAM workbuffer
0197      A200     core2.free        equ  core2.top + 256 ; End of structure
0198               *--------------------------------------------------------------
0199               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0200               *--------------------------------------------------------------
0201      A200     tv.top            equ  >a200           ; Structure begin
0202      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0203      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0204      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0205      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0206      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0207      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0208      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0209      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0210      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0211      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0212      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0213      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0214      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0215      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0216      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0217      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0218      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0219      A222     tv.pane.focus     equ  tv.top + 34     ; Identify pane that has focus
0220      A224     tv.task.oneshot   equ  tv.top + 36     ; Pointer to one-shot routine
0221      A226     tv.fj.stackpnt    equ  tv.top + 38     ; Pointer to farjump return stack
0222      A228     tv.error.visible  equ  tv.top + 40     ; Error pane visible
0223      A22A     tv.error.rows     equ  tv.top + 42     ; Number of rows in error pane
0224      A22C     tv.sp2.conf       equ  tv.top + 44     ; Backup of SP2 config register
0225      A22C     tv.sp2.stack      equ  tv.top + 44     ; Backup of SP2 stack register
0226      A230     tv.error.msg      equ  tv.top + 48     ; Error message (max. 160 characters)
0227      A2D0     tv.free           equ  tv.top + 208    ; End of structure
0228               *--------------------------------------------------------------
0229               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0230               *--------------------------------------------------------------
0231      A300     fb.struct         equ  >a300           ; Structure begin
0232      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0233      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0234      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0235                                                      ; line X in editor buffer).
0236      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0237                                                      ; (offset 0 .. @fb.scrrows)
0238      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0239      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0240      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0241      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0242      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0243      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0244      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0245      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0246      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0247      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0248      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0249      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0250      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0251      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0252      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0253               *--------------------------------------------------------------
0254               * File handle structure               @>a400-a4ff   (256 bytes)
0255               *--------------------------------------------------------------
0256      A400     fh.struct         equ  >a400           ; stevie file handling structures
0257               ;***********************************************************************
0258               ; ATTENTION
0259               ; The dsrlnk variables must form a continuous memory block and keep
0260               ; their order!
0261               ;***********************************************************************
0262      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0263      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0264      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0265      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0266      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0267      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0268      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0269      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0270      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0271      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0272      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0273      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0274      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0275      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0276      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0277      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0278      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0279      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0280      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0281      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0282      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0283      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0284      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0285      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0286      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0287      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0288      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0289      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0290      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0291      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0292      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0293      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0294      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0295      A466     fh.membuffer      equ  fh.struct +102  ; 80 bytes file memory buffer
0296      A4B6     fh.free           equ  fh.struct +182  ; End of structure
0297      0960     fh.vrecbuf        equ  >0960           ; VDP address record buffer
0298      0A60     fh.vpab           equ  >0a60           ; VDP address PAB
0299               *--------------------------------------------------------------
0300               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0301               *--------------------------------------------------------------
0302      A500     edb.struct        equ  >a500           ; Begin structure
0303      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0304      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0305      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0306      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0307      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0308      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0309      A50C     edb.block.m1      equ  edb.struct + 12 ; Block start line marker (>ffff = unset)
0310      A50E     edb.block.m2      equ  edb.struct + 14 ; Block end line marker   (>ffff = unset)
0311      A510     edb.block.var     equ  edb.struct + 16 ; Local var used in block operation
0312      A512     edb.filename.ptr  equ  edb.struct + 18 ; Pointer to length-prefixed string
0313                                                      ; with current filename.
0314      A514     edb.filetype.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0315                                                      ; with current file type.
0316      A516     edb.sams.page     equ  edb.struct + 22 ; Current SAMS page
0317      A518     edb.sams.hipage   equ  edb.struct + 24 ; Highest SAMS page in use
0318      A51A     edb.filename      equ  edb.struct + 26 ; 80 characters inline buffer reserved
0319                                                      ; for filename, but not always used.
0320      A56A     edb.free          equ  edb.struct + 106; End of structure
0321               *--------------------------------------------------------------
0322               * Index structure                     @>a600-a6ff   (256 bytes)
0323               *--------------------------------------------------------------
0324      A600     idx.struct        equ  >a600           ; stevie index structure
0325      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0326      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0327      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0328      A606     idx.free          equ  idx.struct + 6  ; End of structure
0329               *--------------------------------------------------------------
0330               * Command buffer structure            @>a700-a7ff   (256 bytes)
0331               *--------------------------------------------------------------
0332      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0333      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0334      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0335      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0336      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0337      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0338      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0339      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0340      A70E     cmdb.yxtop        equ  cmdb.struct + 14; YX position of CMDB pane header line
0341      A710     cmdb.yxprompt     equ  cmdb.struct + 16; YX position of command buffer prompt
0342      A712     cmdb.column       equ  cmdb.struct + 18; Current column in command buffer pane
0343      A714     cmdb.length       equ  cmdb.struct + 20; Length of current row in CMDB
0344      A716     cmdb.lines        equ  cmdb.struct + 22; Total lines in CMDB
0345      A718     cmdb.dirty        equ  cmdb.struct + 24; Command buffer dirty (Text changed!)
0346      A71A     cmdb.dialog       equ  cmdb.struct + 26; Dialog identifier
0347      A71C     cmdb.dialog.var   equ  cmdb.struct + 28; Dialog private variable or pointer
0348      A71E     cmdb.panhead      equ  cmdb.struct + 30; Pointer to string pane header
0349      A720     cmdb.paninfo      equ  cmdb.struct + 32; Pointer to string pane info (1st line)
0350      A722     cmdb.panhint      equ  cmdb.struct + 34; Pointer to string pane hint (2nd line)
0351      A724     cmdb.panmarkers   equ  cmdb.struct + 36; Pointer to key marker list  (3rd line)
0352      A726     cmdb.pankeys      equ  cmdb.struct + 38; Pointer to string pane keys (stat line)
0353      A728     cmdb.action.ptr   equ  cmdb.struct + 40; Pointer to function to execute
0354      A72A     cmdb.cmdall       equ  cmdb.struct + 42; Current command including length-byte
0355      A72A     cmdb.cmdlen       equ  cmdb.struct + 42; Length of current command (MSB byte!)
0356      A72B     cmdb.cmd          equ  cmdb.struct + 43; Current command (80 bytes max.)
0357      A77C     cmdb.panhead.buf  equ  cmdb.struct +124; String buffer for pane header
0358      A7AE     cmdb.dflt.fname   equ  cmdb.struct +174; Default for filename
0359      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0360               *--------------------------------------------------------------
0361               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0362               *--------------------------------------------------------------
0363      A900     sp2.stktop        equ  >a900           ; \
0364                                                      ; | The stack grows from high memory
0365                                                      ; | towards low memory.
0366                                                      ; |
0367                                                      ; | Stack leaking is checked in SP2
0368                                                      ; | user hook "edkey.keyscan.hook"
0369                                                      ; /
0370               *--------------------------------------------------------------
0371               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0372               *--------------------------------------------------------------
0373      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0374                                                      ; / stored in cartridge ROM bank7.asm
0375               
0376      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0377                                                      ; | scratchpad backup/restore routines.
0378                                                      ; /
0379               
0380      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0381               
0382      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0383                                                      ; calling TI Basic/External programs
0384               *--------------------------------------------------------------
0385               * Farjump return stack                @>af00-afff   (256 bytes)
0386               *--------------------------------------------------------------
0387      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0388                                                      ; Grows downwards from high to low.
0389               *--------------------------------------------------------------
0390               * Index                               @>b000-bfff  (4096 bytes)
0391               *--------------------------------------------------------------
0392      B000     idx.top           equ  >b000           ; Top of index
0393      1000     idx.size          equ  4096            ; Index size
0394               *--------------------------------------------------------------
0395               * Editor buffer                       @>c000-cfff  (4096 bytes)
0396               *--------------------------------------------------------------
0397      C000     edb.top           equ  >c000           ; Editor buffer high memory
0398      1000     edb.size          equ  4096            ; Editor buffer size
0399               *--------------------------------------------------------------
0400               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0401               *--------------------------------------------------------------
0402      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0403      0960     fb.size           equ  80*30           ; Frame buffer size
0404      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0405                                                      ; / >d960->dcff
0406               *--------------------------------------------------------------
0407               * Defaults area                       @>de00-dfff  (3584 bytes)
0408               *--------------------------------------------------------------
0409      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0410      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0411               *--------------------------------------------------------------
0412               * Command buffer history              @>e000-efff  (4096 bytes)
0413               *--------------------------------------------------------------
0414      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0415      1000     cmdb.size         equ  4096            ; Command buffer size
0416               *--------------------------------------------------------------
0417               * Heap                                @>f000-ffff  (4096 bytes)
0418               *--------------------------------------------------------------
0419      F000     heap.top          equ  >f000           ; Top of heap
0420               
0421               
0422               *--------------------------------------------------------------
0423               * Stevie specific equates
0424               *--------------------------------------------------------------
0425      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0426      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0427      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0428      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0429               
0430      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0431      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0432      1DF0     vdp.cmdb.toprow.tat       equ  >1800 + ((pane.botrow - 4) * 80)
0433                                                      ; VDP TAT address of 1st CMDB row
0434      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0435      0780     vdp.sit.size              equ  (pane.botrow + 1) * 80
0436                                                      ; VDP SIT size 80 columns, 24/30 rows
0437      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0438      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0439      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b3.asm
0018                       copy  "equates.c99.asm"     ; Equates related to classic99 emulator
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b3.asm
0019                       copy  "equates.tib.asm"     ; Equates related to TI Basic session
     **** ****     > equates.tib.asm
0001               * FILE......: equates.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b3.asm
0020                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0042     key.uc.b      equ >42               ; B
0022      0043     key.uc.c      equ >43               ; C
0023      0045     key.uc.e      equ >45               ; E
0024      0046     key.uc.f      equ >46               ; F
0025      0048     key.uc.h      equ >48               ; H
0026      0049     key.uc.i      equ >49               ; I
0027      004E     key.uc.n      equ >4e               ; N
0028      0053     key.uc.s      equ >53               ; S
0029      004F     key.uc.o      equ >4f               ; O
0030      0050     key.uc.p      equ >50               ; P
0031      0051     key.uc.q      equ >51               ; Q
0032      00A2     key.lc.b      equ >a2               ; b
0033      00A5     key.lc.e      equ >a5               ; e
0034      00A6     key.lc.f      equ >a6               ; f
0035      00A8     key.lc.h      equ >a8               ; h
0036      006E     key.lc.n      equ >6e               ; n
0037      0073     key.lc.s      equ >73               ; s
0038      006F     key.lc.o      equ >6f               ; o
0039      0070     key.lc.p      equ >70               ; p
0040      0071     key.lc.q      equ >71               ; q
0041               *---------------------------------------------------------------
0042               * Keyboard scancodes - Function keys
0043               *-------------|---------------------|---------------------------
0044      00BC     key.fctn.0    equ >bc               ; fctn + 0
0045      0003     key.fctn.1    equ >03               ; fctn + 1
0046      0004     key.fctn.2    equ >04               ; fctn + 2
0047      0007     key.fctn.3    equ >07               ; fctn + 3
0048      0002     key.fctn.4    equ >02               ; fctn + 4
0049      000E     key.fctn.5    equ >0e               ; fctn + 5
0050      000C     key.fctn.6    equ >0c               ; fctn + 6
0051      0001     key.fctn.7    equ >01               ; fctn + 7
0052      0006     key.fctn.8    equ >06               ; fctn + 8
0053      000F     key.fctn.9    equ >0f               ; fctn + 9
0054      0000     key.fctn.a    equ >00               ; fctn + a
0055      00BE     key.fctn.b    equ >be               ; fctn + b
0056      0000     key.fctn.c    equ >00               ; fctn + c
0057      0009     key.fctn.d    equ >09               ; fctn + d
0058      000B     key.fctn.e    equ >0b               ; fctn + e
0059      0000     key.fctn.f    equ >00               ; fctn + f
0060      0000     key.fctn.g    equ >00               ; fctn + g
0061      00BF     key.fctn.h    equ >bf               ; fctn + h
0062      0000     key.fctn.i    equ >00               ; fctn + i
0063      00C0     key.fctn.j    equ >c0               ; fctn + j
0064      00C1     key.fctn.k    equ >c1               ; fctn + k
0065      00C2     key.fctn.l    equ >c2               ; fctn + l
0066      00C3     key.fctn.m    equ >c3               ; fctn + m
0067      00C4     key.fctn.n    equ >c4               ; fctn + n
0068      0000     key.fctn.o    equ >00               ; fctn + o
0069      0000     key.fctn.p    equ >00               ; fctn + p
0070      00C5     key.fctn.q    equ >c5               ; fctn + q
0071      0000     key.fctn.r    equ >00               ; fctn + r
0072      0008     key.fctn.s    equ >08               ; fctn + s
0073      0000     key.fctn.t    equ >00               ; fctn + t
0074      0000     key.fctn.u    equ >00               ; fctn + u
0075      007F     key.fctn.v    equ >7f               ; fctn + v
0076      007E     key.fctn.w    equ >7e               ; fctn + w
0077      000A     key.fctn.x    equ >0a               ; fctn + x
0078      00C6     key.fctn.y    equ >c6               ; fctn + y
0079      0000     key.fctn.z    equ >00               ; fctn + z
0080               *---------------------------------------------------------------
0081               * Keyboard scancodes - Function keys extra
0082               *---------------------------------------------------------------
0083      00B9     key.fctn.dot    equ >b9             ; fctn + .
0084      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0085      0005     key.fctn.plus   equ >05             ; fctn + +
0086               *---------------------------------------------------------------
0087               * Keyboard scancodes - control keys
0088               *-------------|---------------------|---------------------------
0089      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0090      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0091      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0092      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0093      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0094      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0095      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0096      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0097      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0098      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0099      0081     key.ctrl.a    equ >81               ; ctrl + a
0100      0082     key.ctrl.b    equ >82               ; ctrl + b
0101      0083     key.ctrl.c    equ >83               ; ctrl + c
0102      0084     key.ctrl.d    equ >84               ; ctrl + d
0103      0085     key.ctrl.e    equ >85               ; ctrl + e
0104      0086     key.ctrl.f    equ >86               ; ctrl + f
0105      0087     key.ctrl.g    equ >87               ; ctrl + g
0106      0088     key.ctrl.h    equ >88               ; ctrl + h
0107      0089     key.ctrl.i    equ >89               ; ctrl + i
0108      008A     key.ctrl.j    equ >8a               ; ctrl + j
0109      008B     key.ctrl.k    equ >8b               ; ctrl + k
0110      008C     key.ctrl.l    equ >8c               ; ctrl + l
0111      008D     key.ctrl.m    equ >8d               ; ctrl + m
0112      008E     key.ctrl.n    equ >8e               ; ctrl + n
0113      008F     key.ctrl.o    equ >8f               ; ctrl + o
0114      0090     key.ctrl.p    equ >90               ; ctrl + p
0115      0091     key.ctrl.q    equ >91               ; ctrl + q
0116      0092     key.ctrl.r    equ >92               ; ctrl + r
0117      0093     key.ctrl.s    equ >93               ; ctrl + s
0118      0094     key.ctrl.t    equ >94               ; ctrl + t
0119      0095     key.ctrl.u    equ >95               ; ctrl + u
0120      0096     key.ctrl.v    equ >96               ; ctrl + v
0121      0097     key.ctrl.w    equ >97               ; ctrl + w
0122      0098     key.ctrl.x    equ >98               ; ctrl + x
0123      0099     key.ctrl.y    equ >99               ; ctrl + y
0124      009A     key.ctrl.z    equ >9a               ; ctrl + z
0125               *---------------------------------------------------------------
0126               * Keyboard scancodes - control keys extra
0127               *---------------------------------------------------------------
0128      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0129      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0130      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0131      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0132      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0133               *---------------------------------------------------------------
0134               * Special keys
0135               *---------------------------------------------------------------
0136      000D     key.enter     equ >0d               ; enter
0137      0020     key.space     equ >20               ; space
                   < stevie_b3.asm
0021               
0022               ****************************************************s***********
0023               * BANK 3
0024               ********|*****|*********************|**************************
0025      6006     bankid  equ   bank3.rom             ; Set bank identifier to current bank
0026                       aorg  >6000
0027                       save  >6000,>8000           ; Save bank
0028                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0016                                                   ; 7  /
0017               
0018 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0019                                                   ; 9  /
0020               
0021 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0022                                                   ; 11 /
0023               
0024                       ;-----------------------------------------------------------------------
0025                       ; Program list entry
0026                       ;-----------------------------------------------------------------------
0027               rom.program1:
0028 600C 601E             data  rom.program2          ; 12 \ Next program list entry         >600c
0029                                                   ; 13 / (no more items following)
0030               
0031 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0032                                                   ; 15 /
0033               
0034 6010 0C53             stri 'STEVIE TOOLS'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 544F     
     601A 4F4C     
     601C 53       
0035               
0036                       ;-----------------------------------------------------------------------
0037                       ; Program list entry
0038                       ;-----------------------------------------------------------------------
0039               rom.program2:
0040 601E 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0041                                                   ; 13 / (no more items following)
0042               
0043 6020 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0044                                                   ; 15 /
0045               
0049 6022 0E53                 stri 'STEVIE 1.3G-24'
     6024 5445     
     6026 5649     
     6028 4520     
     602A 312E     
     602C 3347     
     602E 2D32     
     6030 34       
                   < stevie_b3.asm
0029               
0030               ***************************************************************
0031               * Step 1: Switch to bank 0 (uniform code accross all banks)
0032               ********|*****|*********************|**************************
0033                       aorg  kickstart.code1       ; >6040
0034 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0035               ***************************************************************
0036               * Step 2: Satisfy assembler, must know relocated code
0037               ********|*****|*********************|**************************
0038                       aorg  >2000                 ; Relocate to >2000
0039                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               *
0070               * == Startup behaviour
0071               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0072               *                                   ; to pre-defined backup address
0073               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0074               *******************************************************************************
0075               
0076               *//////////////////////////////////////////////////////////////
0077               *                       RUNLIB SETUP
0078               *//////////////////////////////////////////////////////////////
0079               
0080                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0081                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0082                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0083                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0084                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0085               
0089               
0090                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0091                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0092                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2EDE     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 2306     
0078 208A 21FF                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 236E     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 229C     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 229C     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2450     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2192     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 29AA     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2450     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 21A8     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 29AA     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2450     
0117 20D4 0300                   byte 3,0
0118 20D6 21C4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2450     
0120 20DC 0400                   byte 4,0
0121 20DE 21C9                   data cpu.crash.msg.st
0122 20E0 06A0  32         bl    @putat
     20E2 2450     
0123 20E4 1600                   byte 22,0
0124 20E6 21CE                   data cpu.crash.msg.source
0125 20E8 06A0  32         bl    @putat
     20EA 2450     
0126 20EC 1700                   byte 23,0
0127 20EE 21E6                   data cpu.crash.msg.id
0128                       ;------------------------------------------------------
0129                       ; Show crash registers WP, ST, R0 - R15
0130                       ;------------------------------------------------------
0131 20F0 06A0  32         bl    @at                   ; Put cursor at YX
     20F2 26D4     
0132 20F4 0304                   byte 3,4              ; \ i p0 = YX position
0133                                                   ; /
0134               
0135 20F6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20F8 FFDC     
0136 20FA 04C6  14         clr   tmp2                  ; Loop counter
0137               
0138               cpu.crash.showreg:
0139 20FC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0140               
0141 20FE 0649  14         dect  stack
0142 2100 C644  30         mov   tmp0,*stack           ; Push tmp0
0143 2102 0649  14         dect  stack
0144 2104 C645  30         mov   tmp1,*stack           ; Push tmp1
0145 2106 0649  14         dect  stack
0146 2108 C646  30         mov   tmp2,*stack           ; Push tmp2
0147                       ;------------------------------------------------------
0148                       ; Display crash register number
0149                       ;------------------------------------------------------
0150               cpu.crash.showreg.label:
0151 210A C046  18         mov   tmp2,r1               ; Save register number
0152 210C 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     210E 0001     
0153 2110 1220  14         jle   cpu.crash.showreg.content
0154                                                   ; Yes, skip
0155               
0156 2112 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0157 2114 06A0  32         bl    @mknum
     2116 29B4     
0158 2118 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0159 211A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0160 211C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0161                                                   ; /         LSB offset for ASCII digit 0-9
0162               
0163 211E 06A0  32         bl    @setx                 ; Set cursor X position
     2120 26EA     
0164 2122 0000                   data 0                ; \ i  p0 =  Cursor Y position
0165                                                   ; /
0166               
0167 2124 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2126 0400     
0168 2128 D804  38         movb  tmp0,@rambuf          ;
     212A A100     
0169               
0170 212C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     212E 242C     
0171 2130 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0172                                                   ; /
0173               
0174 2132 06A0  32         bl    @setx                 ; Set cursor X position
     2134 26EA     
0175 2136 0002                   data 2                ; \ i  p0 =  Cursor Y position
0176                                                   ; /
0177               
0178 2138 0281  22         ci    r1,10
     213A 000A     
0179 213C 1102  14         jlt   !
0180 213E 0620  26         dec   @wyx                  ; x=x-1
     2140 832A     
0181               
0182 2142 06A0  32 !       bl    @putstr
     2144 242C     
0183 2146 21BE                   data cpu.crash.msg.r
0184               
0185 2148 06A0  32         bl    @mknum
     214A 29B4     
0186 214C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0187 214E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0188 2150 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0189                                                   ; /         LSB offset for ASCII digit 0-9
0190                       ;------------------------------------------------------
0191                       ; Display crash register content
0192                       ;------------------------------------------------------
0193               cpu.crash.showreg.content:
0194 2152 06A0  32         bl    @mkhex                ; Convert hex word to string
     2154 2926     
0195 2156 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0196 2158 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0197 215A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0198                                                   ; /         LSB offset for ASCII digit 0-9
0199               
0200 215C 06A0  32         bl    @setx                 ; Set cursor X position
     215E 26EA     
0201 2160 0004                   data 4                ; \ i  p0 =  Cursor Y position
0202                                                   ; /
0203               
0204 2162 06A0  32         bl    @putstr               ; Put '  >'
     2164 242C     
0205 2166 21C0                   data cpu.crash.msg.marker
0206               
0207 2168 06A0  32         bl    @setx                 ; Set cursor X position
     216A 26EA     
0208 216C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0209                                                   ; /
0210               
0211 216E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2170 0400     
0212 2172 D804  38         movb  tmp0,@rambuf          ;
     2174 A100     
0213               
0214 2176 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2178 242C     
0215 217A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0216                                                   ; /
0217               
0218 217C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0219 217E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0220 2180 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0221               
0222 2182 06A0  32         bl    @down                 ; y=y+1
     2184 26DA     
0223               
0224 2186 0586  14         inc   tmp2
0225 2188 0286  22         ci    tmp2,17
     218A 0011     
0226 218C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0227                       ;------------------------------------------------------
0228                       ; Kernel takes over
0229                       ;------------------------------------------------------
0230 218E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2190 7F00     
0231               
0232               
0233 2192 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2194 7973     
     2196 7465     
     2198 6D20     
     219A 6372     
     219C 6173     
     219E 6865     
     21A0 6420     
     21A2 6E65     
     21A4 6172     
     21A6 203E     
0234 21A8 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     21AA 616C     
     21AC 6C65     
     21AE 7220     
     21B0 6164     
     21B2 6472     
     21B4 6573     
     21B6 7320     
     21B8 6E65     
     21BA 6172     
     21BC 203E     
0235 21BE 0152     cpu.crash.msg.r            stri 'R'
0236 21C0 0320     cpu.crash.msg.marker       stri '  >'
     21C2 203E     
0237 21C4 042A     cpu.crash.msg.wp           stri '**WP'
     21C6 2A57     
     21C8 50       
0238 21C9   04     cpu.crash.msg.st           stri '**ST'
     21CA 2A2A     
     21CC 5354     
0239 21CE 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21D0 6F75     
     21D2 7263     
     21D4 6520     
     21D6 2020     
     21D8 2025     
     21DA 2562     
     21DC 7569     
     21DE 6C64     
     21E0 5F73     
     21E2 7263     
     21E4 2525     
0240 21E6 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21E8 7569     
     21EA 6C64     
     21EC 2D49     
     21EE 4420     
     21F0 2025     
     21F2 2562     
     21F4 7569     
     21F6 6C64     
     21F8 5F64     
     21FA 6174     
     21FC 6525     
     21FE 25       
                   < runlib.asm
0093                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21FF   00     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     2200 E200     
     2202 0E01     
     2204 0602     
     2206 0400     
     2208 20       
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 2209   00     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     220A F200     
     220C 0E01     
     220E 0600     
     2210 F400     
     2212 28       
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2213   04     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2214 F000     
     2216 3F02     
     2218 4003     
     221A F400     
     221C 50       
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0094                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 221E 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2220 16FD             data  >16fd                 ; |         jne   mcloop
0015 2222 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2224 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2226 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 2228 0201  20         li    r1,mccode             ; Machinecode to patch
     222A 221E     
0037 222C 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     222E 8322     
0038 2230 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2232 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2234 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2236 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 2238 C0F9  30 popr3   mov   *stack+,r3
0057 223A C0B9  30 popr2   mov   *stack+,r2
0058 223C C079  30 popr1   mov   *stack+,r1
0059 223E C039  30 popr0   mov   *stack+,r0
0060 2240 C2F9  30 poprt   mov   *stack+,r11
0061 2242 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2244 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2246 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 2248 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 224A C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 224C 1604  14         jne   filchk                ; No, continue checking
0093               
0094 224E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2250 FFCE     
0095 2252 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2254 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2256 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     2258 830B     
     225A 830A     
0100               
0101 225C 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     225E 0001     
0102 2260 1602  14         jne   filchk2
0103 2262 DD05  32         movb  tmp1,*tmp0+
0104 2264 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2266 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     2268 0002     
0109 226A 1603  14         jne   filchk3
0110 226C DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 226E DD05  32         movb  tmp1,*tmp0+
0112 2270 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2272 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2274 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2276 0001     
0118 2278 1305  14         jeq   fil16b
0119 227A DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 227C 0606  14         dec   tmp2
0121 227E 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2280 0002     
0122 2282 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2284 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2286 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2288 0001     
0128 228A 1301  14         jeq   dofill
0129 228C 0606  14         dec   tmp2                  ; Make TMP2 even
0130 228E CD05  34 dofill  mov   tmp1,*tmp0+
0131 2290 0646  14         dect  tmp2
0132 2292 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2294 C1C7  18         mov   tmp3,tmp3
0137 2296 1301  14         jeq   fil.exit
0138 2298 DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 229A 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 229C C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 229E C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 22A0 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 22A2 0264  22 xfilv   ori   tmp0,>4000
     22A4 4000     
0166 22A6 06C4  14         swpb  tmp0
0167 22A8 D804  30         movb  tmp0,@vdpa
     22AA 8C02     
0168 22AC 06C4  14         swpb  tmp0
0169 22AE D804  30         movb  tmp0,@vdpa
     22B0 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22B2 020F  20         li    r15,vdpw              ; Set VDP write address
     22B4 8C00     
0174 22B6 06C5  14         swpb  tmp1
0175 22B8 C820  46         mov   @filzz,@mcloop        ; Setup move command
     22BA 22C2     
     22BC 8320     
0176 22BE 0460  24         b     @mcloop               ; Write data to VDP
     22C0 8320     
0177               *--------------------------------------------------------------
0181 22C2 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22C4 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22C6 4000     
0202 22C8 06C4  14 vdra    swpb  tmp0
0203 22CA D804  30         movb  tmp0,@vdpa
     22CC 8C02     
0204 22CE 06C4  14         swpb  tmp0
0205 22D0 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22D2 8C02     
0206 22D4 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22D6 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22D8 C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22DA 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22DC 4000     
0223 22DE 06C4  14         swpb  tmp0                  ; \
0224 22E0 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22E2 8C02     
0225 22E4 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22E6 D804  30         movb  tmp0,@vdpa            ; /
     22E8 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22EA 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22EC D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22EE 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22F0 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22F2 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22F4 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22F6 8C02     
0257 22F8 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22FA D804  30         movb  tmp0,@vdpa            ; /
     22FC 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22FE D120  30         movb  @vdpr,tmp0            ; Read byte
     2300 8800     
0263 2302 0984  32         srl   tmp0,8                ; Right align
0264 2304 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 2306 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 2308 C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 230A C144  18         mov   tmp0,tmp1
0289 230C 05C5  14         inct  tmp1
0290 230E D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2310 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2312 FF00     
0292 2314 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2316 C805  30         mov   tmp1,@wbase           ; Store calculated base
     2318 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 231A 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     231C 8000     
0298 231E 0206  20         li    tmp2,8
     2320 0008     
0299 2322 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2324 830B     
0300 2326 06C5  14         swpb  tmp1
0301 2328 D805  30         movb  tmp1,@vdpa
     232A 8C02     
0302 232C 06C5  14         swpb  tmp1
0303 232E D805  30         movb  tmp1,@vdpa
     2330 8C02     
0304 2332 0225  22         ai    tmp1,>0100
     2334 0100     
0305 2336 0606  14         dec   tmp2
0306 2338 16F4  14         jne   vidta1                ; Next register
0307 233A C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     233C 833A     
0308 233E 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2340 C13B  30 putvr   mov   *r11+,tmp0
0326 2342 0264  22 putvrx  ori   tmp0,>8000
     2344 8000     
0327 2346 06C4  14         swpb  tmp0
0328 2348 D804  30         movb  tmp0,@vdpa
     234A 8C02     
0329 234C 06C4  14         swpb  tmp0
0330 234E D804  30         movb  tmp0,@vdpa
     2350 8C02     
0331 2352 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2354 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2356 C10E  18         mov   r14,tmp0
0341 2358 0984  32         srl   tmp0,8
0342 235A 06A0  32         bl    @putvrx               ; Write VR#0
     235C 2342     
0343 235E 0204  20         li    tmp0,>0100
     2360 0100     
0344 2362 D820  42         movb  @r14lb,@tmp0lb
     2364 831D     
     2366 8309     
0345 2368 06A0  32         bl    @putvrx               ; Write VR#1
     236A 2342     
0346 236C 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 236E C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2370 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2372 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2374 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2376 7FFF     
0364 2378 2120  32         coc   @wbit0,tmp0
     237A 2020     
0365 237C 1604  14         jne   ldfnt1
0366 237E 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2380 8000     
0367 2382 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2384 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2386 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     2388 23F0     
0372 238A D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     238C 9C02     
0373 238E 06C4  14         swpb  tmp0
0374 2390 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2392 9C02     
0375 2394 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2396 9800     
0376 2398 06C5  14         swpb  tmp1
0377 239A D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     239C 9800     
0378 239E 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 23A0 D805  38         movb  tmp1,@grmwa
     23A2 9C02     
0383 23A4 06C5  14         swpb  tmp1
0384 23A6 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     23A8 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 23AA C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 23AC 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23AE 22C4     
0390 23B0 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23B2 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23B4 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23B6 7FFF     
0393 23B8 C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23BA 23F2     
0394 23BC C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23BE 23F4     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23C0 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23C2 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23C4 D120  34         movb  @grmrd,tmp0
     23C6 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23C8 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23CA 2020     
0405 23CC 1603  14         jne   ldfnt3                ; No, so skip
0406 23CE D1C4  18         movb  tmp0,tmp3
0407 23D0 0917  18         srl   tmp3,1
0408 23D2 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23D4 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23D6 8C00     
0413 23D8 0606  14         dec   tmp2
0414 23DA 16F2  14         jne   ldfnt2
0415 23DC 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23DE 020F  20         li    r15,vdpw              ; Set VDP write address
     23E0 8C00     
0417 23E2 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23E4 7FFF     
0418 23E6 0458  20         b     *tmp4                 ; Exit
0419 23E8 D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23EA 2000     
     23EC 8C00     
0420 23EE 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23F0 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23F2 0200     
     23F4 0000     
0425 23F6 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23F8 01C0     
     23FA 0101     
0426 23FC 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23FE 02A0     
     2400 0101     
0427 2402 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     2404 00E0     
     2406 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 2408 C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 240A C3A0  30         mov   @wyx,r14              ; Get YX
     240C 832A     
0447 240E 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2410 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2412 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2414 C3A0  30         mov   @wyx,r14              ; Get YX
     2416 832A     
0454 2418 024E  22         andi  r14,>00ff             ; Remove Y
     241A 00FF     
0455 241C A3CE  18         a     r14,r15               ; pos = pos + X
0456 241E A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2420 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2422 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2424 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2426 020F  20         li    r15,vdpw              ; VDP write address
     2428 8C00     
0463 242A 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 242C C17B  30 putstr  mov   *r11+,tmp1
0482 242E D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2430 C1CB  18 xutstr  mov   r11,tmp3
0484 2432 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2434 2408     
0485 2436 C2C7  18         mov   tmp3,r11
0486 2438 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 243A C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 243C 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 243E 0286  22         ci    tmp2,255              ; Length > 255 ?
     2440 00FF     
0494 2442 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2444 0460  28         b     @xpym2v               ; Display string
     2446 249A     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 2448 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     244A FFCE     
0501 244C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     244E 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2450 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2452 832A     
0518 2454 0460  28         b     @putstr
     2456 242C     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 2458 0649  14         dect  stack
0540 245A C64B  30         mov   r11,*stack            ; Save return address
0541 245C 0649  14         dect  stack
0542 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2460 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2462 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2464 0649  14         dect  stack
0551 2466 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 2468 0649  14         dect  stack
0553 246A C646  30         mov   tmp2,*stack           ; Push tmp2
0554 246C 0649  14         dect  stack
0555 246E C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2470 06A0  32         bl    @xutst0               ; Display string
     2472 242E     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2474 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2476 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 2478 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 247A 06A0  32         bl    @down                 ; Move cursor down
     247C 26DA     
0566               
0567 247E A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2480 0585  14         inc   tmp1                  ; Consider length byte
0569 2482 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2484 2002     
0570 2486 1301  14         jeq   !                     ; Yes, skip adjustment
0571 2488 0585  14         inc   tmp1                  ; Make address even
0572 248A 0606  14 !       dec   tmp2
0573 248C 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 248E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2490 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2492 045B  20         b     *r11                  ; Return
                   < runlib.asm
0095               
0097                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2494 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2496 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 2498 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 249A C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 249C 1604  14         jne   !                     ; No, continue
0028               
0029 249E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24A0 FFCE     
0030 24A2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24A4 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24A6 0264  22 !       ori   tmp0,>4000
     24A8 4000     
0035 24AA 06C4  14         swpb  tmp0
0036 24AC D804  30         movb  tmp0,@vdpa
     24AE 8C02     
0037 24B0 06C4  14         swpb  tmp0
0038 24B2 D804  30         movb  tmp0,@vdpa
     24B4 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24B6 020F  20         li    r15,vdpw              ; Set VDP write address
     24B8 8C00     
0043 24BA C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24BC 24C4     
     24BE 8320     
0044 24C0 0460  24         b     @mcloop               ; Write data to VDP and return
     24C2 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24C4 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0099               
0101                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24C6 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24C8 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24CA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24CC 06C4  14 xpyv2m  swpb  tmp0
0027 24CE D804  30         movb  tmp0,@vdpa
     24D0 8C02     
0028 24D2 06C4  14         swpb  tmp0
0029 24D4 D804  30         movb  tmp0,@vdpa
     24D6 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24D8 020F  20         li    r15,vdpr              ; Set VDP read address
     24DA 8800     
0034 24DC C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24DE 24E6     
     24E0 8320     
0035 24E2 0460  24         b     @mcloop               ; Read data from VDP
     24E4 8320     
0036 24E6 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0103               
0105                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24E8 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24EA C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24EC C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24EE C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24F0 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F4 FFCE     
0034 24F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F8 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24FA 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24FC 0001     
0039 24FE 1603  14         jne   cpym0                 ; No, continue checking
0040 2500 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2502 04C6  14         clr   tmp2                  ; Reset counter
0042 2504 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2506 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     2508 7FFF     
0047 250A C1C4  18         mov   tmp0,tmp3
0048 250C 0247  22         andi  tmp3,1
     250E 0001     
0049 2510 1618  14         jne   cpyodd                ; Odd source address handling
0050 2512 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2514 0247  22         andi  tmp3,1
     2516 0001     
0052 2518 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 251A 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     251C 2020     
0057 251E 1605  14         jne   cpym3
0058 2520 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2522 2548     
     2524 8320     
0059 2526 0460  24         b     @mcloop               ; Copy memory and exit
     2528 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 252A C1C6  18 cpym3   mov   tmp2,tmp3
0064 252C 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     252E 0001     
0065 2530 1301  14         jeq   cpym4
0066 2532 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2534 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2536 0646  14         dect  tmp2
0069 2538 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 253A C1C7  18         mov   tmp3,tmp3
0074 253C 1301  14         jeq   cpymz
0075 253E D554  38         movb  *tmp0,*tmp1
0076 2540 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2542 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2544 8000     
0081 2546 10E9  14         jmp   cpym2
0082 2548 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0107               
0111               
0115               
0117                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 254A C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 254C 0649  14         dect  stack
0065 254E C64B  30         mov   r11,*stack            ; Push return address
0066 2550 0649  14         dect  stack
0067 2552 C640  30         mov   r0,*stack             ; Push r0
0068 2554 0649  14         dect  stack
0069 2556 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2558 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 255A 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 255C 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     255E 4000     
0077 2560 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2562 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2564 020C  20         li    r12,>1e00             ; SAMS CRU address
     2566 1E00     
0082 2568 04C0  14         clr   r0
0083 256A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 256C D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 256E D100  18         movb  r0,tmp0
0086 2570 0984  32         srl   tmp0,8                ; Right align
0087 2572 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2574 833C     
0088 2576 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2578 C339  30         mov   *stack+,r12           ; Pop r12
0094 257A C039  30         mov   *stack+,r0            ; Pop r0
0095 257C C2F9  30         mov   *stack+,r11           ; Pop return address
0096 257E 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2580 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2582 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2584 0649  14         dect  stack
0135 2586 C64B  30         mov   r11,*stack            ; Push return address
0136 2588 0649  14         dect  stack
0137 258A C640  30         mov   r0,*stack             ; Push r0
0138 258C 0649  14         dect  stack
0139 258E C64C  30         mov   r12,*stack            ; Push r12
0140 2590 0649  14         dect  stack
0141 2592 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2594 0649  14         dect  stack
0143 2596 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 2598 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 259A 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 259C 0284  22         ci    tmp0,255              ; Crash if page > 255
     259E 00FF     
0153 25A0 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25A2 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25A4 001E     
0158 25A6 150A  14         jgt   !
0159 25A8 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25AA 0004     
0160 25AC 1107  14         jlt   !
0161 25AE 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25B0 0012     
0162 25B2 1508  14         jgt   sams.page.set.switch_page
0163 25B4 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25B6 0006     
0164 25B8 1501  14         jgt   !
0165 25BA 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25BC C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25BE FFCE     
0170 25C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25C2 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25C4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25C6 1E00     
0176 25C8 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25CA 06C0  14         swpb  r0                    ; LSB to MSB
0178 25CC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25CE D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25D0 4000     
0180 25D2 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25D8 C339  30         mov   *stack+,r12           ; Pop r12
0188 25DA C039  30         mov   *stack+,r0            ; Pop r0
0189 25DC C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25DE 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25E0 0649  14         dect  stack
0205 25E2 C64C  30         mov   r12,*stack            ; Push r12
0206 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0207 25E8 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25EA C339  30         mov   *stack+,r12           ; Pop r12
0213 25EC 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25EE 0649  14         dect  stack
0231 25F0 C64C  30         mov   r12,*stack            ; Push r12
0232 25F2 020C  20         li    r12,>1e00             ; SAMS CRU address
     25F4 1E00     
0233 25F6 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25F8 C339  30         mov   *stack+,r12           ; Pop r12
0239 25FA 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25FC C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25FE 0649  14         dect  stack
0271 2600 C64B  30         mov   r11,*stack            ; Save return address
0272 2602 0649  14         dect  stack
0273 2604 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 2606 0649  14         dect  stack
0275 2608 C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 260A 020C  20         li    r12,>1e00             ; SAMS CRU address
     260C 1E00     
0280 260E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2610 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2612 4004     
0283 2614 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2616 4006     
0284 2618 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     261A 4014     
0285 261C C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     261E 4016     
0286 2620 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2622 4018     
0287 2624 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2626 401A     
0288 2628 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     262A 401C     
0289 262C C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     262E 401E     
0290               
0291 2630 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2632 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2634 C339  30         mov   *stack+,r12           ; Pop r12
0298 2636 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 2638 C2F9  30         mov   *stack+,r11           ; Pop r11
0300 263A 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 263C 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 263E 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2640 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2642 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2644 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2646 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 2648 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 264A 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 264C C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 264E 0649  14         dect  stack
0335 2650 C64B  30         mov   r11,*stack            ; Push return address
0336 2652 0649  14         dect  stack
0337 2654 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2656 0649  14         dect  stack
0339 2658 C645  30         mov   tmp1,*stack           ; Push tmp1
0340 265A 0649  14         dect  stack
0341 265C C646  30         mov   tmp2,*stack           ; Push tmp2
0342 265E 0649  14         dect  stack
0343 2660 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2662 0205  20         li    tmp1,sams.layout.copy.data
     2664 2684     
0348 2666 0206  20         li    tmp2,8                ; Set loop counter
     2668 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 266A C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 266C 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     266E 254C     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2670 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2672 833C     
0359               
0360 2674 0606  14         dec   tmp2                  ; Next iteration
0361 2676 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 2678 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 267A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 267C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 267E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2680 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2682 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2684 2000             data  >2000                 ; >2000-2fff
0377 2686 3000             data  >3000                 ; >3000-3fff
0378 2688 A000             data  >a000                 ; >a000-afff
0379 268A B000             data  >b000                 ; >b000-bfff
0380 268C C000             data  >c000                 ; >c000-cfff
0381 268E D000             data  >d000                 ; >d000-dfff
0382 2690 E000             data  >e000                 ; >e000-efff
0383 2692 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0119               
0123               
0125                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2694 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2696 FFBF     
0010 2698 0460  28         b     @putv01
     269A 2354     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 269C 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     269E 0040     
0018 26A0 0460  28         b     @putv01
     26A2 2354     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26A4 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26A6 FFDF     
0026 26A8 0460  28         b     @putv01
     26AA 2354     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26AC 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26AE 0020     
0034 26B0 0460  28         b     @putv01
     26B2 2354     
                   < runlib.asm
0127               
0129                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26B4 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26B6 FFFE     
0011 26B8 0460  28         b     @putv01
     26BA 2354     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26BC 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26BE 0001     
0019 26C0 0460  28         b     @putv01
     26C2 2354     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26C4 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26C6 FFFD     
0027 26C8 0460  28         b     @putv01
     26CA 2354     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26CC 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26CE 0002     
0035 26D0 0460  28         b     @putv01
     26D2 2354     
                   < runlib.asm
0131               
0133                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26D4 C83B  42 at      mov   *r11+,@wyx
     26D6 832A     
0019 26D8 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26DA B820  46 down    ab    @hb$01,@wyx
     26DC 2012     
     26DE 832A     
0028 26E0 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26E2 7820  46 up      sb    @hb$01,@wyx
     26E4 2012     
     26E6 832A     
0037 26E8 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26EA C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26EC D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26EE 832A     
0051 26F0 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26F2 832A     
0052 26F4 045B  20         b     *r11
                   < runlib.asm
0135               
0137                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26F6 C120  30 yx2px   mov   @wyx,tmp0
     26F8 832A     
0022 26FA C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26FC 06C4  14         swpb  tmp0                  ; Y<->X
0024 26FE 04C5  14         clr   tmp1                  ; Clear before copy
0025 2700 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2702 20A0  32         coc   @wbit1,config         ; f18a present ?
     2704 201E     
0030 2706 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 2708 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     270A 833A     
     270C 2736     
0032 270E 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2710 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2712 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2714 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2716 0500     
0037 2718 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 271A D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 271C 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 271E 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2720 D105  18         movb  tmp1,tmp0
0051 2722 06C4  14         swpb  tmp0                  ; X<->Y
0052 2724 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2726 2020     
0053 2728 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 272A 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     272C 2012     
0059 272E 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2730 2024     
0060 2732 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2734 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2736 0050            data   80
0067               
0068               
                   < runlib.asm
0139               
0143               
0147               
0149                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 2738 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 273A 06A0  32         bl    @putvr                ; Write once
     273C 2340     
0015 273E 391C             data  >391c                 ; VR1/57, value 00011100
0016 2740 06A0  32         bl    @putvr                ; Write twice
     2742 2340     
0017 2744 391C             data  >391c                 ; VR1/57, value 00011100
0018 2746 06A0  32         bl    @putvr
     2748 2340     
0019 274A 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 274C 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 274E C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2750 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2752 2340     
0030 2754 3900             data  >3900
0031 2756 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2758 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 275A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     275C 2340     
0044 275E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2760 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2762 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2764 06A0  32         bl    @cpym2v
     2766 2494     
0060 2768 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     276A 27AC     
     276C 0008     
0061 276E 06A0  32         bl    @putvr
     2770 2340     
0062 2772 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2774 06A0  32         bl    @putvr
     2776 2340     
0064 2778 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 277A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     277C 2340     
0068 277E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2780 0204  20         li    tmp0,>3f00
     2782 3F00     
0073 2784 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2786 22C8     
0074 2788 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     278A 8800     
0075 278C 0984  32         srl   tmp0,8
0076 278E D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2790 8800     
0077 2792 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2794 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2796 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     2798 BFFF     
0081 279A 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 279C 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     279E 4000     
0084               
0085               f18chk_exit:
0086 27A0 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27A2 229C     
0087 27A4 3F00             data  >3f00,>00,6
     27A6 0000     
     27A8 0006     
0088 27AA 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27AC 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27AE 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27B0 0340             data  >0340                 ; 3f04   0340  idle
0096 27B2 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27B4 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27B6 06A0  32         bl    @putvr
     27B8 2340     
0124 27BA 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27BC 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27BE 2340     
0127 27C0 3900             data  >3900                 ; Lock the F18a
0128 27C2 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27C4 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27C6 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27C8 201E     
0149 27CA 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27CC C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27CE 8802     
0154 27D0 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27D2 2340     
0155 27D4 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27D6 04C4  14         clr   tmp0
0157 27D8 D120  30         movb  @vdps,tmp0
     27DA 8802     
0158 27DC 0984  32         srl   tmp0,8
0159 27DE 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0151               
0153                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27E0 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27E2 832A     
0018 27E4 D17B  28         movb  *r11+,tmp1
0019 27E6 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27E8 D1BB  28         movb  *r11+,tmp2
0021 27EA 0986  32         srl   tmp2,8                ; Repeat count
0022 27EC C1CB  18         mov   r11,tmp3
0023 27EE 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27F0 2408     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27F2 020B  20         li    r11,hchar1
     27F4 27FA     
0028 27F6 0460  28         b     @xfilv                ; Draw
     27F8 22A2     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27FA 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27FC 2022     
0033 27FE 1302  14         jeq   hchar2                ; Yes, exit
0034 2800 C2C7  18         mov   tmp3,r11
0035 2802 10EE  14         jmp   hchar                 ; Next one
0036 2804 05C7  14 hchar2  inct  tmp3
0037 2806 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0155               
0159               
0163               
0167               
0169                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 2808 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     280A 8334     
0015 280C 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     280E 2006     
0016 2810 0204  20         li    tmp0,muttab
     2812 2822     
0017 2814 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2816 8400     
0018 2818 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 281A D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 281C D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 281E D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2820 045B  20         b     *r11
0023 2822 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2824 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2826 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     2828 8334     
0044 282A C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     282C 8336     
0045 282E 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2830 FFF8     
0046 2832 E0BB  30         soc   *r11+,config          ; Set options
0047 2834 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2836 2012     
     2838 831B     
0048 283A 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 283C 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     283E 2006     
0060 2840 1301  14         jeq   sdpla1                ; Yes, play
0061 2842 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2844 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2846 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     2848 831B     
     284A 2000     
0067 284C 1301  14         jeq   sdpla3                ; Play next note
0068 284E 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2850 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2852 2002     
0070 2854 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2856 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     2858 8336     
0075 285A 06C4  14         swpb  tmp0
0076 285C D804  30         movb  tmp0,@vdpa
     285E 8C02     
0077 2860 06C4  14         swpb  tmp0
0078 2862 D804  30         movb  tmp0,@vdpa
     2864 8C02     
0079 2866 04C4  14         clr   tmp0
0080 2868 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     286A 8800     
0081 286C 131E  14         jeq   sdexit                ; Yes. exit
0082 286E 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2870 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2872 8336     
0084 2874 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2876 8800     
     2878 8400     
0085 287A 0604  14         dec   tmp0
0086 287C 16FB  14         jne   vdpla2
0087 287E D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2880 8800     
     2882 831B     
0088 2884 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2886 8336     
0089 2888 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 288A C120  30 mmplay  mov   @wsdtmp,tmp0
     288C 8336     
0094 288E D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2890 130C  14         jeq   sdexit                ; Yes, exit
0096 2892 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2894 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2896 8336     
0098 2898 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     289A 8400     
0099 289C 0605  14         dec   tmp1
0100 289E 16FC  14         jne   mmpla2
0101 28A0 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     28A2 831B     
0102 28A4 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     28A6 8336     
0103 28A8 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 28AA 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     28AC 2004     
0108 28AE 1607  14         jne   sdexi2                ; No, exit
0109 28B0 C820  42         mov   @wsdlst,@wsdtmp
     28B2 8334     
     28B4 8336     
0110 28B6 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28B8 2012     
     28BA 831B     
0111 28BC 045B  20 sdexi1  b     *r11                  ; Exit
0112 28BE 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28C0 FFF8     
0113 28C2 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0171               
0175               
0179               
0183               
0186                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28C4 0649  14         dect  stack
0038 28C6 C64B  30         mov   r11,*stack            ; Push return address
0039 28C8 0649  14         dect  stack
0040 28CA C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28CC 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28CE 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28D0 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28D2 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28D4 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28D6 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28D8 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28DA E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28DC 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28DE 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28E0 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28E2 2920     
     28E4 83C6     
0074 28E6 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28E8 2922     
     28EA 83FA     
0075 28EC C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28EE 2924     
     28F0 83FE     
0076               
0077 28F2 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28F4 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28F6 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28F8 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28FA 83E0     
0084               
0085 28FC 06A0  28         bl    @kscan                ; Call KSCAN
     28FE 000E     
0086 2900 02E0  18         lwpi  ws1                   ; Activate user workspace
     2902 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 2904 D120  30         movb  @>837c,tmp0           ; Get flag
     2906 837C     
0091 2908 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 290A 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 290C D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     290E 8375     
0097 2910 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2912 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2914 A028     
0103 2916 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     2918 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 291A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 291C C2F9  30         mov   *stack+,r11           ; Pop r11
0110 291E 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2920 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2922 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2924 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0191               
0193                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2926 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 2928 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     292A 8340     
0025 292C 04E0  26         clr   @waux1
     292E 833C     
0026 2930 04E0  26         clr   @waux2
     2932 833E     
0027 2934 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2936 833C     
0028 2938 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 293A 0205  20         li    tmp1,4                ; 4 nibbles
     293C 0004     
0033 293E C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2940 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2942 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2944 0286  22         ci    tmp2,>000a
     2946 000A     
0039 2948 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 294A C21B  26         mov   *r11,tmp4
0045 294C 0988  32         srl   tmp4,8                ; Right justify
0046 294E 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2950 FFF6     
0047 2952 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2954 C21B  26         mov   *r11,tmp4
0054 2956 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     2958 00FF     
0055               
0056 295A A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 295C 06C6  14         swpb  tmp2
0058 295E DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2960 0944  24         srl   tmp0,4                ; Next nibble
0060 2962 0605  14         dec   tmp1
0061 2964 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2966 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2968 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 296A C160  30         mov   @waux3,tmp1           ; Get pointer
     296C 8340     
0067 296E 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2970 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2972 C120  30         mov   @waux2,tmp0
     2974 833E     
0070 2976 06C4  14         swpb  tmp0
0071 2978 DD44  32         movb  tmp0,*tmp1+
0072 297A 06C4  14         swpb  tmp0
0073 297C DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 297E C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2980 8340     
0078 2982 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2984 2016     
0079 2986 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2988 C120  30         mov   @waux1,tmp0
     298A 833C     
0084 298C 06C4  14         swpb  tmp0
0085 298E DD44  32         movb  tmp0,*tmp1+
0086 2990 06C4  14         swpb  tmp0
0087 2992 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2994 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2996 2020     
0092 2998 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 299A 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 299C 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     299E 7FFF     
0098 29A0 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     29A2 8340     
0099 29A4 0460  28         b     @xutst0               ; Display string
     29A6 242E     
0100 29A8 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 29AA C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     29AC 832A     
0122 29AE 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29B0 8000     
0123 29B2 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0195               
0197                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29B4 0207  20 mknum   li    tmp3,5                ; Digit counter
     29B6 0005     
0020 29B8 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29BA C155  26         mov   *tmp1,tmp1            ; /
0022 29BC C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29BE 0228  22         ai    tmp4,4                ; Get end of buffer
     29C0 0004     
0024 29C2 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29C4 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29C6 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29C8 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29CA 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29CC B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29CE D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29D0 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29D2 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29D4 0607  14         dec   tmp3                  ; Decrease counter
0036 29D6 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29D8 0207  20         li    tmp3,4                ; Check first 4 digits
     29DA 0004     
0041 29DC 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29DE C11B  26         mov   *r11,tmp0
0043 29E0 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29E2 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29E4 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29E6 05CB  14 mknum3  inct  r11
0047 29E8 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29EA 2020     
0048 29EC 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29EE 045B  20         b     *r11                  ; Exit
0050 29F0 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29F2 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29F4 13F8  14         jeq   mknum3                ; Yes, exit
0053 29F6 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29F8 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29FA 7FFF     
0058 29FC C10B  18         mov   r11,tmp0
0059 29FE 0224  22         ai    tmp0,-4
     2A00 FFFC     
0060 2A02 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2A04 0206  20         li    tmp2,>0500            ; String length = 5
     2A06 0500     
0062 2A08 0460  28         b     @xutstr               ; Display string
     2A0A 2430     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2A0C C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A0E C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A10 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A12 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A14 0207  20         li    tmp3,5                ; Set counter
     2A16 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A18 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A1A 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A1C 0584  14         inc   tmp0                  ; Next character
0106 2A1E 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A20 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A22 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A24 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A26 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A28 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A2A DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A2C 0607  14         dec   tmp3                  ; Last character ?
0122 2A2E 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A30 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A32 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A34 832A     
0141 2A36 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A38 8000     
0142 2A3A 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0199               
0203               
0207               
0211               
0215               
0217                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A3C 0649  14         dect  stack
0023 2A3E C64B  30         mov   r11,*stack            ; Save return address
0024 2A40 0649  14         dect  stack
0025 2A42 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A44 0649  14         dect  stack
0027 2A46 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A48 0649  14         dect  stack
0029 2A4A C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A4C 0649  14         dect  stack
0031 2A4E C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A50 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A52 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A54 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A56 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A58 0649  14         dect  stack
0044 2A5A C64B  30         mov   r11,*stack            ; Save return address
0045 2A5C 0649  14         dect  stack
0046 2A5E C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A60 0649  14         dect  stack
0048 2A62 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A64 0649  14         dect  stack
0050 2A66 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A68 0649  14         dect  stack
0052 2A6A C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A6C C1D4  26 !       mov   *tmp0,tmp3
0057 2A6E 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A70 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A72 00FF     
0059 2A74 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A76 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A78 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A7A 0584  14         inc   tmp0                  ; Next byte
0067 2A7C 0607  14         dec   tmp3                  ; Shorten string length
0068 2A7E 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A80 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A82 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A84 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A86 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A88 C187  18         mov   tmp3,tmp2
0078 2A8A 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A8C DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A8E 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A90 24EE     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A92 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A94 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A96 FFCE     
0090 2A98 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A9A 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A9C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A9E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2AA0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2AA2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2AA4 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2AA6 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2AA8 0649  14         dect  stack
0124 2AAA C64B  30         mov   r11,*stack            ; Save return address
0125 2AAC 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AAE 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AB0 0649  14         dect  stack
0128 2AB2 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AB4 0649  14         dect  stack
0130 2AB6 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AB8 0649  14         dect  stack
0132 2ABA C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2ABC C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2ABE C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AC0 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AC2 0649  14         dect  stack
0144 2AC4 C64B  30         mov   r11,*stack            ; Save return address
0145 2AC6 0649  14         dect  stack
0146 2AC8 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ACA 0649  14         dect  stack
0148 2ACC C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2ACE 0649  14         dect  stack
0150 2AD0 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AD2 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AD4 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AD6 0586  14         inc   tmp2
0161 2AD8 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ADA 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ADC 0286  22         ci    tmp2,255
     2ADE 00FF     
0167 2AE0 1505  14         jgt   string.getlenc.panic
0168 2AE2 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AE4 0606  14         dec   tmp2                  ; One time adjustment
0174 2AE6 C806  30         mov   tmp2,@waux1           ; Store length
     2AE8 833C     
0175 2AEA 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2AEC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AEE FFCE     
0181 2AF0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AF2 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AF4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AF6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AF8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AFA C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AFC 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0219               
0223               
0225                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AFE C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2B00 F000     
0024 2B02 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2B04 F002     
0025 2B06 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2B08 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2B0A 0200  20         li    r0,>8306              ; Scratchpad source address
     2B0C 8306     
0030 2B0E 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B10 F006     
0031 2B12 0202  20         li    r2,62                 ; Loop counter
     2B14 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B16 CC70  46         mov   *r0+,*r1+
0037 2B18 CC70  46         mov   *r0+,*r1+
0038 2B1A 0642  14         dect  r2
0039 2B1C 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B1E C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B20 83FE     
     2B22 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B24 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B26 F000     
0046 2B28 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B2A F002     
0047 2B2C C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B2E F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B30 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B32 0200  20         li    r0,cpu.scrpad.tgt
     2B34 F000     
0075 2B36 0201  20         li    r1,>8300
     2B38 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B3A CC70  46         mov   *r0+,*r1+
0081 2B3C CC70  46         mov   *r0+,*r1+
0082 2B3E 0281  22         ci    r1,>8400
     2B40 8400     
0083 2B42 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B44 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0226                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B46 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B48 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B4A CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B4C CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B4E CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B50 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B52 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B54 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B56 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B58 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B5A 8310     
0055                                                   ;        as of register r8
0056 2B5C 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B5E 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B60 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B62 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B64 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B66 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B68 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B6A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B6C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B6E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B70 0606  14         dec   tmp2
0069 2B72 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B74 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B76 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B78 2B7E     
0075                                                   ; R14=PC
0076 2B7A 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B7C 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B7E 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B80 2B32     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B82 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B84 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B86 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B88 8300     
0126 2B8A 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B8C 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B8E CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B90 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B92 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B94 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B96 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B98 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B9A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B9C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B9E 0606  14         dec   tmp2
0139 2BA0 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2BA2 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2BA4 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2BA6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0228               
0230                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0231                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2BA8 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2BAA 2BAC             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2BAC C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BAE C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BB0 A428     
0064 2BB2 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BB4 201C     
0065 2BB6 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BB8 8356     
0066 2BBA C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BBC 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BBE FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BC0 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BC2 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BC4 06C0  14         swpb  r0                    ;
0075 2BC6 D800  30         movb  r0,@vdpa              ; Send low byte
     2BC8 8C02     
0076 2BCA 06C0  14         swpb  r0                    ;
0077 2BCC D800  30         movb  r0,@vdpa              ; Send high byte
     2BCE 8C02     
0078 2BD0 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BD2 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BD4 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BD6 0704  14         seto  r4                    ; Init counter
0086 2BD8 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BDA A420     
0087 2BDC 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BDE 0584  14         inc   r4                    ; Increment char counter
0089 2BE0 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BE2 0007     
0090 2BE4 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BE6 80C4  18         c     r4,r3                 ; End of name?
0093 2BE8 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BEA 06C0  14         swpb  r0                    ;
0098 2BEC D800  30         movb  r0,@vdpa              ; Send low byte
     2BEE 8C02     
0099 2BF0 06C0  14         swpb  r0                    ;
0100 2BF2 D800  30         movb  r0,@vdpa              ; Send high byte
     2BF4 8C02     
0101 2BF6 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BF8 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BFA DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BFC 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BFE 2D18     
0109 2C00 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2C02 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2C04 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2C06 04E0  26         clr   @>83d0
     2C08 83D0     
0118 2C0A C804  30         mov   r4,@>8354             ; Save name length for search (length
     2C0C 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C0E C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C10 A432     
0121               
0122 2C12 0584  14         inc   r4                    ; Adjust for dot
0123 2C14 A804  30         a     r4,@>8356             ; Point to position after name
     2C16 8356     
0124 2C18 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C1A 8356     
     2C1C A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C1E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C20 83E0     
0130 2C22 04C1  14         clr   r1                    ; Version found of dsr
0131 2C24 020C  20         li    r12,>0f00             ; Init cru address
     2C26 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C28 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C2A 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C2C 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C2E 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C30 0100     
0145 2C32 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C34 83D0     
0146 2C36 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C38 2000     
0147 2C3A 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C3C C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C3E 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C40 1D00  16         sbo   0                     ; Turn on ROM
0154 2C42 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C44 4000     
0155 2C46 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C48 2D14     
0156 2C4A 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C4C A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C4E A40A     
0166 2C50 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C52 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C54 83D2     
0172                                                   ; subprogram
0173               
0174 2C56 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C58 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C5A 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C5C C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C5E 83D2     
0183                                                   ; subprogram
0184               
0185 2C60 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C62 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C64 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C66 D160  30         movb  @>8355,r5             ; Get length as counter
     2C68 8355     
0195 2C6A 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C6C 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C6E 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C70 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C72 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C74 A420     
0206 2C76 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C78 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C7A 0605  14         dec   r5                    ; Update loop counter
0211 2C7C 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C7E 0581  14         inc   r1                    ; Next version found
0217 2C80 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C82 A42A     
0218 2C84 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C86 A42C     
0219 2C88 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C8A A430     
0220               
0221 2C8C 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C8E 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C90 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C92 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C94 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C96 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C98 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C9A 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C9C A400     
0236 2C9E C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2CA0 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2CA2 A428     
0242                                                   ; (8 or >a)
0243 2CA4 0281  26         ci    r1,8                  ; was it 8?
     2CA6 0008     
0244 2CA8 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2CAA D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2CAC 8350     
0246                                                   ; Get error byte from @>8350
0247 2CAE 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CB0 06C0  22         swpb  r0                    ;
0255 2CB2 D800  34         movb  r0,@vdpa              ; send low byte
     2CB4 8C02     
0256 2CB6 06C0  22         swpb  r0                    ;
0257 2CB8 D800  34         movb  r0,@vdpa              ; send high byte
     2CBA 8C02     
0258 2CBC D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CBE 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CC0 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CC2 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CC4 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CC6 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CC8 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CCA A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CCC 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CCE 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CD0 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CD2 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CD4 201C     
0284                                                   ; / to indicate error
0285 2CD6 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CD8 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CDA 2CDC             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CDC 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CDE 83E0     
0319               
0320 2CE0 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CE2 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CE4 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CE6 A42A     
0325 2CE8 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CEA C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CEC C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CEE 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CF0 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CF2 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CF4 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CF6 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CF8 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CFA 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CFC 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CFE 4000     
     2D00 2D14     
0340 2D02 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2D04 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2D06 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2D08 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2D0A 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2D0C A400     
0358 2D0E C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D10 A434     
0359               
0360 2D12 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D14 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D16 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D18 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0232                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR for returning
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 characters maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (only for fixed records)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name (Device + '.' + File name)
0021               ;       even
0022               ***************************************************************
0023               
0024               
0025               ***************************************************************
0026               * file.open - Open File for procesing
0027               ***************************************************************
0028               *  bl   @file.open
0029               *       data P0,P1
0030               *--------------------------------------------------------------
0031               *  P0 = Address of PAB in VDP RAM
0032               *  P1 = LSB contains File type/mode
0033               *--------------------------------------------------------------
0034               *  bl   @xfile.open
0035               *
0036               *  R0 = Address of PAB in VDP RAM
0037               *  R1 = LSB contains File type/mode
0038               *--------------------------------------------------------------
0039               *  Output:
0040               *  tmp0     = Copy of VDP PAB byte 1 after operation
0041               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0042               *  tmp2 LSB = Copy of status register after operation
0043               ********|*****|*********************|**************************
0044               file.open:
0045 2D1A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0046 2D1C C07B  46         mov   *r11+,r1              ; Get file type/mode
0047               *--------------------------------------------------------------
0048               * Initialisation
0049               *--------------------------------------------------------------
0050               xfile.open:
0051 2D1E 0649  22         dect  stack
0052 2D20 C64B  38         mov   r11,*stack            ; Save return address
0053                       ;------------------------------------------------------
0054                       ; Initialisation
0055                       ;------------------------------------------------------
0056 2D22 0204  24         li    tmp0,dsrlnk.savcru
     2D24 A42A     
0057 2D26 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0058 2D28 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0059 2D2A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0060 2D2C 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0061                       ;------------------------------------------------------
0062                       ; Set pointer to VDP disk buffer header
0063                       ;------------------------------------------------------
0064 2D2E 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D30 37D7     
0065 2D32 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D34 8370     
0066                                                   ; / location
0067 2D36 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D38 A44C     
0068 2D3A 04C5  22         clr   tmp1                  ; io.op.open
0069 2D3C 101F  14         jmp   _file.record.fop      ; Do file operation
0070               
0071               
0072               
0073               ***************************************************************
0074               * file.close - Close currently open file
0075               ***************************************************************
0076               *  bl   @file.close
0077               *       data P0
0078               *--------------------------------------------------------------
0079               *  P0 = Address of PAB in VDP RAM
0080               *--------------------------------------------------------------
0081               *  bl   @xfile.close
0082               *
0083               *  R0 = Address of PAB in VDP RAM
0084               *--------------------------------------------------------------
0085               *  Output:
0086               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0087               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0088               *  tmp2 LSB = Copy of status register after operation
0089               ********|*****|*********************|**************************
0090               file.close:
0091 2D3E C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0092               *--------------------------------------------------------------
0093               * Initialisation
0094               *--------------------------------------------------------------
0095               xfile.close:
0096 2D40 0649  22         dect  stack
0097 2D42 C64B  38         mov   r11,*stack            ; Save return address
0098 2D44 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D46 0001     
0099 2D48 1019  14         jmp   _file.record.fop      ; Do file operation
0100               
0101               
0102               ***************************************************************
0103               * file.record.read - Read record from file
0104               ***************************************************************
0105               *  bl   @file.record.read
0106               *       data P0
0107               *--------------------------------------------------------------
0108               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0109               *--------------------------------------------------------------
0110               *  bl   @xfile.record.read
0111               *
0112               *  R0 = Address of PAB in VDP RAM
0113               *--------------------------------------------------------------
0114               *  Output:
0115               *  tmp0     = Copy of VDP PAB byte 1 after operation
0116               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0117               *  tmp2 LSB = Copy of status register after operation
0118               ********|*****|*********************|**************************
0119               file.record.read:
0120 2D4A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0121               *--------------------------------------------------------------
0122               * Initialisation
0123               *--------------------------------------------------------------
0124 2D4C 0649  22         dect  stack
0125 2D4E C64B  38         mov   r11,*stack            ; Save return address
0126               
0127 2D50 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D52 0002     
0128 2D54 1013  14         jmp   _file.record.fop      ; Do file operation
0129               
0130               
0131               
0132               ***************************************************************
0133               * file.record.write - Write record to file
0134               ***************************************************************
0135               *  bl   @file.record.write
0136               *       data P0
0137               *--------------------------------------------------------------
0138               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0139               *--------------------------------------------------------------
0140               *  bl   @xfile.record.write
0141               *
0142               *  R0 = Address of PAB in VDP RAM
0143               *--------------------------------------------------------------
0144               *  Output:
0145               *  tmp0     = Copy of VDP PAB byte 1 after operation
0146               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0147               *  tmp2 LSB = Copy of status register after operation
0148               ********|*****|*********************|**************************
0149               file.record.write:
0150 2D56 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0151               *--------------------------------------------------------------
0152               * Initialisation
0153               *--------------------------------------------------------------
0154 2D58 0649  22         dect  stack
0155 2D5A C64B  38         mov   r11,*stack            ; Save return address
0156               
0157 2D5C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0158 2D5E 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D60 0005     
0159               
0160 2D62 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D64 A43E     
0161               
0162 2D66 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D68 22DA     
0163                                                   ; \ i  tmp0 = VDP target address
0164                                                   ; / i  tmp1 = Byte to write
0165               
0166 2D6A 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D6C 0003     
0167 2D6E 1006  14         jmp   _file.record.fop      ; Do file operation
0168               
0169               
0170               
0171               file.record.seek:
0172 2D70 1000  14         nop
0173               
0174               
0175               file.image.load:
0176 2D72 1000  14         nop
0177               
0178               
0179               file.image.save:
0180 2D74 1000  14         nop
0181               
0182               
0183               file.delete:
0184 2D76 1000  14         nop
0185               
0186               
0187               file.rename:
0188 2D78 1000  14         nop
0189               
0190               
0191               file.status:
0192 2D7A 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D7C C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D7E A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D80 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D82 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D84 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D86 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D88 22DA     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D8A C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D8C 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D8E C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D90 A44C     
0246               
0247 2D92 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D94 22DA     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D96 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D98 0009     
0254 2D9A C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D9C 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D9E C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2DA0 8322     
     2DA2 833C     
0259               
0260 2DA4 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2DA6 A42A     
0261 2DA8 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2DAA 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2DAC 2BA8     
0268 2DAE 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DB0 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DB2 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DB4 2CD8     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DB6 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DB8 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DBA 833C     
     2DBC 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DBE C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DC0 A436     
0292 2DC2 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DC4 0005     
0293 2DC6 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DC8 22F2     
0294 2DCA C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DCC C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DCE C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DD0 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0235               *//////////////////////////////////////////////////////////////
0236               *                            TIMERS
0237               *//////////////////////////////////////////////////////////////
0238               
0239                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2DD2 0300  22 tmgr    limi  0                     ; No interrupt processing
     2DD4 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2DD6 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2DD8 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2DDA 2360  32         coc   @wbit2,r13            ; C flag on ?
     2DDC 201C     
0029 2DDE 1602  14         jne   tmgr1a                ; No, so move on
0030 2DE0 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2DE2 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2DE4 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2DE6 2020     
0035 2DE8 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2DEA 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2DEC 2010     
0048 2DEE 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2DF0 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2DF2 200E     
0050 2DF4 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2DF6 0460  28         b     @kthread              ; Run kernel thread
     2DF8 2E70     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2DFA 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2DFC 2014     
0056 2DFE 13EB  14         jeq   tmgr1
0057 2E00 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E02 2012     
0058 2E04 16E8  14         jne   tmgr1
0059 2E06 C120  38         mov   @wtiusr,tmp0
     2E08 832E     
0060 2E0A 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E0C 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E0E 2E6E     
0065 2E10 C10A  30         mov   r10,tmp0
0066 2E12 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E14 00FF     
0067 2E16 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E18 201C     
0068 2E1A 1303  14         jeq   tmgr5
0069 2E1C 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E1E 003C     
0070 2E20 1002  14         jmp   tmgr6
0071 2E22 0284  26 tmgr5   ci    tmp0,50
     2E24 0032     
0072 2E26 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E28 1001  14         jmp   tmgr8
0074 2E2A 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E2C C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E2E 832C     
0079 2E30 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E32 FF00     
0080 2E34 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E36 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E38 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E3A 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E3C C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E3E 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E40 830C     
     2E42 830D     
0089 2E44 1608  14         jne   tmgr10                ; No, get next slot
0090 2E46 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E48 FF00     
0091 2E4A C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E4C C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E4E 8330     
0096 2E50 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E52 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E54 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E56 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E58 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E5A 8315     
     2E5C 8314     
0103 2E5E 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E60 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E62 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E64 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E66 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E68 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E6A FF00     
0109 2E6C 10B4  14         jmp   tmgr1
0110 2E6E 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0240                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2E70 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2E72 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2E74 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2E76 2006     
0023 2E78 1602  14         jne   kthread_kb
0024 2E7A 06A0  36         bl    @sdpla1               ; Run sound player
     2E7C 2844     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2E7E 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2E80 28C4     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2E82 0460  28         b     @tmgr3                ; Exit
     2E84 2DFA     
                   < runlib.asm
0241                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2E86 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2E88 832E     
0018 2E8A E0A0  42         soc   @wbit7,config         ; Enable user hook
     2E8C 2012     
0019 2E8E 045B  24 mkhoo1  b     *r11                  ; Return
0020      2DD6     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2E90 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2E92 832E     
0029 2E94 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2E96 FEFF     
0030 2E98 045B  24         b     *r11                  ; Return
                   < runlib.asm
0242               
0244                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2E9A C13B  46 mkslot  mov   *r11+,tmp0
0018 2E9C C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2E9E C184  30         mov   tmp0,tmp2
0023 2EA0 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2EA2 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2EA4 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2EA6 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EA8 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EAA C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EAC 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EAE 2022     
0035 2EB0 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EB2 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EB4 05CB  22 mkslo1  inct  r11
0041 2EB6 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EB8 C13B  46 clslot  mov   *r11+,tmp0
0053 2EBA 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EBC A120  38         a     @wtitab,tmp0          ; Add table base
     2EBE 832C     
0055 2EC0 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EC2 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EC4 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EC6 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EC8 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2ECA A120  38         a     @wtitab,tmp0          ; Add table base
     2ECC 832C     
0071 2ECE 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2ED0 C154  38         mov   *tmp0,tmp1
0073 2ED2 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2ED4 FF00     
0074 2ED6 C505  38         mov   tmp1,*tmp0
0075 2ED8 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0246               
0247               
0248               
0249               *//////////////////////////////////////////////////////////////
0250               *                    RUNLIB INITIALISATION
0251               *//////////////////////////////////////////////////////////////
0252               
0253               ***************************************************************
0254               *  RUNLIB - Runtime library initalisation
0255               ***************************************************************
0256               *  B  @RUNLIB
0257               *--------------------------------------------------------------
0258               *  REMARKS
0259               *  if R0 in WS1 equals >4a4a we were called from the system
0260               *  crash handler so we return there after initialisation.
0261               
0262               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0263               *  after clearing scratchpad memory. This has higher priority
0264               *  as crash handler flag R0.
0265               ********|*****|*********************|**************************
0272 2EDA 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2EDC 8302     
0274               *--------------------------------------------------------------
0275               * Alternative entry point
0276               *--------------------------------------------------------------
0277 2EDE 0300  22 runli1  limi  0                     ; Turn off interrupts
     2EE0 0000     
0278 2EE2 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2EE4 8300     
0279 2EE6 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2EE8 83C0     
0280               *--------------------------------------------------------------
0281               * Clear scratch-pad memory from R4 upwards
0282               *--------------------------------------------------------------
0283 2EEA 0202  20 runli2  li    r2,>8308
     2EEC 8308     
0284 2EEE 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0285 2EF0 0282  22         ci    r2,>8400
     2EF2 8400     
0286 2EF4 16FC  14         jne   runli3
0287               *--------------------------------------------------------------
0288               * Exit to TI-99/4A title screen ?
0289               *--------------------------------------------------------------
0290 2EF6 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2EF8 FFFF     
0291 2EFA 1602  14         jne   runli4                ; No, continue
0292 2EFC 0420  42         blwp  @0                    ; Yes, bye bye
     2EFE 0000     
0293               *--------------------------------------------------------------
0294               * Determine if VDP is PAL or NTSC
0295               *--------------------------------------------------------------
0296 2F00 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F02 833C     
0297 2F04 04C1  14         clr   r1                    ; Reset counter
0298 2F06 0202  20         li    r2,10                 ; We test 10 times
     2F08 000A     
0299 2F0A C0E0  30 runli5  mov   @vdps,r3
     2F0C 8802     
0300 2F0E 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F10 2020     
0301 2F12 1302  14         jeq   runli6
0302 2F14 0581  14         inc   r1                    ; Increase counter
0303 2F16 10F9  14         jmp   runli5
0304 2F18 0602  14 runli6  dec   r2                    ; Next test
0305 2F1A 16F7  14         jne   runli5
0306 2F1C 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F1E 1250     
0307 2F20 1202  14         jle   runli7                ; No, so it must be NTSC
0308 2F22 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F24 201C     
0309               *--------------------------------------------------------------
0310               * Copy machine code to scratchpad (prepare tight loop)
0311               *--------------------------------------------------------------
0312 2F26 06A0  32 runli7  bl    @loadmc
     2F28 2228     
0313               *--------------------------------------------------------------
0314               * Initialize registers, memory, ...
0315               *--------------------------------------------------------------
0316 2F2A 04C1  14 runli9  clr   r1
0317 2F2C 04C2  14         clr   r2
0318 2F2E 04C3  14         clr   r3
0319 2F30 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F32 A900     
0320 2F34 020F  20         li    r15,vdpw              ; Set VDP write address
     2F36 8C00     
0322 2F38 06A0  32         bl    @mute                 ; Mute sound generators
     2F3A 2808     
0324               *--------------------------------------------------------------
0325               * Setup video memory
0326               *--------------------------------------------------------------
0328 2F3C 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F3E 4A4A     
0329 2F40 1605  14         jne   runlia
0330 2F42 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F44 229C     
0331 2F46 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F48 0000     
     2F4A 3000     
0336 2F4C 06A0  32 runlia  bl    @filv
     2F4E 229C     
0337 2F50 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F52 00F4     
     2F54 0010     
0338               *--------------------------------------------------------------
0339               * Check if there is a F18A present
0340               *--------------------------------------------------------------
0342               *       <<skipped>>
0353               *--------------------------------------------------------------
0354               * Check if there is a speech synthesizer attached
0355               *--------------------------------------------------------------
0357               *       <<skipped>>
0361               *--------------------------------------------------------------
0362               * Load video mode table & font
0363               *--------------------------------------------------------------
0364 2F56 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2F58 2306     
0365 2F5A 364A             data  spvmod                ; Equate selected video mode table
0366 2F5C 0204  20         li    tmp0,spfont           ; Get font option
     2F5E 000C     
0367 2F60 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0368 2F62 1304  14         jeq   runlid                ; Yes, skip it
0369 2F64 06A0  32         bl    @ldfnt
     2F66 236E     
0370 2F68 1100             data  fntadr,spfont         ; Load specified font
     2F6A 000C     
0371               *--------------------------------------------------------------
0372               * Did a system crash occur before runlib was called?
0373               *--------------------------------------------------------------
0374 2F6C 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2F6E 4A4A     
0375 2F70 1602  14         jne   runlie                ; No, continue
0376 2F72 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2F74 2086     
0377               *--------------------------------------------------------------
0378               * Branch to main program
0379               *--------------------------------------------------------------
0380 2F76 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2F78 0040     
0381 2F7A 0460  28         b     @main                 ; Give control to main program
     2F7C 6046     
                   < stevie_b3.asm
0040                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2F7E C13B  30         mov   *r11+,tmp0            ; P0
0022 2F80 C17B  30         mov   *r11+,tmp1            ; P1
0023 2F82 C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2F84 0649  14         dect  stack
0029 2F86 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2F88 0649  14         dect  stack
0031 2F8A C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2F8C 0649  14         dect  stack
0033 2F8E C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2F90 0649  14         dect  stack
0035 2F92 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Push to farjump return stack
0038                       ;------------------------------------------------------
0039 2F94 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2F96 6000     
0040 2F98 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2F9A C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2F9C A226     
0044 2F9E 0647  14         dect  tmp3
0045 2FA0 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2FA2 0647  14         dect  tmp3
0047 2FA4 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2FA6 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2FA8 A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2FAA 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2FAC 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2FAE 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2FB0 0224  22         ai    tmp0,>0800
     2FB2 0800     
0066 2FB4 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 2FB6 0285  22         ci    tmp1,>ffff
     2FB8 FFFF     
0075 2FBA 1602  14         jne   !
0076 2FBC C160  34         mov   @trmpvector,tmp1
     2FBE A032     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 2FC0 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 2FC2 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 2FC4 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 2FC6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FC8 FFCE     
0091 2FCA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FCC 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 2FCE 0694  24         bl    *tmp0                 ; Call function
0097                       ;------------------------------------------------------
0098                       ; Bankswitch back to source bank
0099                       ;------------------------------------------------------
0100               rom.farjump.return:
0101 2FD0 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     2FD2 A226     
0102 2FD4 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 2FD6 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 2FD8 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 2FDA C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 2FDC 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 2FDE 028B  22         ci    r11,>6000
     2FE0 6000     
0115 2FE2 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 2FE4 028B  22         ci    r11,>7fff
     2FE6 7FFF     
0117 2FE8 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 2FEA C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     2FEC A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 2FEE 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 2FF0 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 2FF2 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 2FF4 0225  22         ai    tmp1,>0800
     2FF6 0800     
0137 2FF8 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 2FFA 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 2FFC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FFE FFCE     
0144 3000 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3002 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 3004 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 3006 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 3008 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 300A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 300C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 300E 0649  14         dect  stack
0021 3010 C64B  30         mov   r11,*stack            ; Save return address
0022 3012 0649  14         dect  stack
0023 3014 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3016 0649  14         dect  stack
0025 3018 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 301A 0204  20         li    tmp0,fb.top
     301C D000     
0030 301E C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     3020 A300     
0031 3022 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3024 A304     
0032 3026 04E0  34         clr   @fb.row               ; Current row=0
     3028 A306     
0033 302A 04E0  34         clr   @fb.column            ; Current column=0
     302C A30C     
0034               
0035 302E 0204  20         li    tmp0,colrow
     3030 0050     
0036 3032 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3034 A30E     
0037 3036 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3038 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 303A C160  34         mov   @tv.ruler.visible,tmp1
     303C A210     
0042 303E 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 3040 0204  20         li    tmp0,pane.botrow-2
     3042 0015     
0044 3044 1002  14         jmp   fb.init.cont
0045 3046 0204  20 !       li    tmp0,pane.botrow-1
     3048 0016     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 304A C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     304C A31C     
0051 304E C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     3050 A31E     
0052               
0053 3052 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3054 A222     
0054 3056 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3058 A312     
0055 305A 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     305C A318     
0056 305E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3060 A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 3062 06A0  32         bl    @film
     3064 2244     
0061 3066 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3068 0000     
     306A 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 306C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 306E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3070 C2F9  30         mov   *stack+,r11           ; Pop r11
0069 3072 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.utils.asm"           ; Framebuffer utilities
     **** ****     > fb.utils.asm
0001               * FILE......: fb.utils.asm
0002               * Purpose...: Stevie Editor - Framebuffer utilities
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 3074 0649  14         dect  stack
0025 3076 C64B  30         mov   r11,*stack            ; Save return address
0026 3078 0649  14         dect  stack
0027 307A C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 307C C120  34         mov   @parm1,tmp0
     307E A006     
0032 3080 A120  34         a     @fb.topline,tmp0
     3082 A304     
0033 3084 C804  38         mov   tmp0,@outparm1
     3086 A016     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3088 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 308A C2F9  30         mov   *stack+,r11           ; Pop r11
0040 308C 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 308E 0649  14         dect  stack
0069 3090 C64B  30         mov   r11,*stack            ; Save return address
0070 3092 0649  14         dect  stack
0071 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0072 3096 0649  14         dect  stack
0073 3098 C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 309A C120  34         mov   @fb.row,tmp0
     309C A306     
0078 309E 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30A0 A30E     
0079 30A2 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     30A4 A30C     
0080 30A6 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     30A8 A300     
0081 30AA C805  38         mov   tmp1,@fb.current
     30AC A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 30AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 30B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 30B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0089 30B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 30B6 0649  14         dect  stack
0052 30B8 C64B  30         mov   r11,*stack            ; Save return address
0053 30BA 0649  14         dect  stack
0054 30BC C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 30BE 0204  20         li    tmp0,idx.top
     30C0 B000     
0059 30C2 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     30C4 A502     
0060               
0061 30C6 C120  34         mov   @tv.sams.b000,tmp0
     30C8 A206     
0062 30CA C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     30CC A600     
0063 30CE C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     30D0 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 30D2 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     30D4 0004     
0068 30D6 C804  38         mov   tmp0,@idx.sams.hipage ; /
     30D8 A604     
0069               
0070 30DA 06A0  32         bl    @_idx.sams.mapcolumn.on
     30DC 30F8     
0071                                                   ; Index in continuous memory region
0072               
0073 30DE 06A0  32         bl    @film
     30E0 2244     
0074 30E2 B000                   data idx.top,>00,idx.size * 5
     30E4 0000     
     30E6 5000     
0075                                                   ; Clear index
0076               
0077 30E8 06A0  32         bl    @_idx.sams.mapcolumn.off
     30EA 312C     
0078                                                   ; Restore memory window layout
0079               
0080 30EC C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     30EE A602     
     30F0 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 30F2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 30F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 30F6 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 30F8 0649  14         dect  stack
0102 30FA C64B  30         mov   r11,*stack            ; Push return address
0103 30FC 0649  14         dect  stack
0104 30FE C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3100 0649  14         dect  stack
0106 3102 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3104 0649  14         dect  stack
0108 3106 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3108 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     310A A602     
0113 310C 0205  20         li    tmp1,idx.top
     310E B000     
0114 3110 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3112 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3114 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3116 2584     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3118 0584  14         inc   tmp0                  ; Next SAMS index page
0123 311A 0225  22         ai    tmp1,>1000            ; Next memory region
     311C 1000     
0124 311E 0606  14         dec   tmp2                  ; Update loop counter
0125 3120 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3122 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3124 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3126 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3128 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 312A 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 312C 0649  14         dect  stack
0151 312E C64B  30         mov   r11,*stack            ; Push return address
0152 3130 0649  14         dect  stack
0153 3132 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3134 0649  14         dect  stack
0155 3136 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3138 0649  14         dect  stack
0157 313A C646  30         mov   tmp2,*stack           ; Push tmp2
0158 313C 0649  14         dect  stack
0159 313E C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3140 0205  20         li    tmp1,idx.top
     3142 B000     
0164 3144 0206  20         li    tmp2,5                ; Always 5 pages
     3146 0005     
0165 3148 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     314A A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 314C C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 314E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3150 2584     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3152 0225  22         ai    tmp1,>1000            ; Next memory region
     3154 1000     
0176 3156 0606  14         dec   tmp2                  ; Update loop counter
0177 3158 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 315A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 315C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 315E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 3160 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 3162 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 3164 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3166 0649  14         dect  stack
0212 3168 C64B  30         mov   r11,*stack            ; Save return address
0213 316A 0649  14         dect  stack
0214 316C C644  30         mov   tmp0,*stack           ; Push tmp0
0215 316E 0649  14         dect  stack
0216 3170 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 3172 0649  14         dect  stack
0218 3174 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3176 C184  18         mov   tmp0,tmp2             ; Line number
0223 3178 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 317A 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     317C 0800     
0225               
0226 317E 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 3180 0A16  18         sla   tmp2,1                ; line number * 2
0231 3182 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     3184 A016     
0232               
0233 3186 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     3188 A602     
0234 318A 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     318C A600     
0235               
0236 318E 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 3190 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     3192 A600     
0242 3194 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     3196 A206     
0243 3198 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 319A 0205  20         li    tmp1,>b000            ; Memory window for index page
     319C B000     
0246               
0247 319E 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31A0 2584     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 31A2 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     31A4 A604     
0254 31A6 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 31A8 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     31AA A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 31AC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 31AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 31B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 31B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 31B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 31B6 0649  14         dect  stack
0023 31B8 C64B  30         mov   r11,*stack            ; Save return address
0024 31BA 0649  14         dect  stack
0025 31BC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 31BE 0204  20         li    tmp0,edb.top          ; \
     31C0 C000     
0030 31C2 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     31C4 A500     
0031 31C6 C804  38         mov   tmp0,@edb.next_free.ptr
     31C8 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 31CA 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     31CC A50A     
0035               
0036 31CE 0204  20         li    tmp0,1
     31D0 0001     
0037 31D2 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     31D4 A504     
0038               
0039 31D6 0720  34         seto  @edb.block.m1         ; Reset block start line
     31D8 A50C     
0040 31DA 0720  34         seto  @edb.block.m2         ; Reset block end line
     31DC A50E     
0041               
0042 31DE 0204  20         li    tmp0,txt.newfile      ; "New file"
     31E0 386C     
0043 31E2 C804  38         mov   tmp0,@edb.filename.ptr
     31E4 A512     
0044               
0045 31E6 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     31E8 A440     
0046 31EA 04E0  34         clr   @fh.kilobytes.prev    ; /
     31EC A45C     
0047               
0048 31EE 0204  20         li    tmp0,txt.filetype.none
     31F0 39BD     
0049 31F2 C804  38         mov   tmp0,@edb.filetype.ptr
     31F4 A514     
0050               
0051               edb.init.exit:
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055 31F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 31F8 C2F9  30         mov   *stack+,r11           ; Pop r11
0057 31FA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 31FC 0649  14         dect  stack
0023 31FE C64B  30         mov   r11,*stack            ; Save return address
0024 3200 0649  14         dect  stack
0025 3202 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3204 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3206 E000     
0030 3208 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     320A A700     
0031               
0032 320C 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     320E A702     
0033 3210 0204  20         li    tmp0,4
     3212 0004     
0034 3214 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3216 A706     
0035 3218 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     321A A708     
0036               
0037 321C 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     321E A716     
0038 3220 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3222 A718     
0039 3224 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3226 A728     
0040                       ;------------------------------------------------------
0041                       ; Clear command buffer
0042                       ;------------------------------------------------------
0043 3228 06A0  32         bl    @film
     322A 2244     
0044 322C E000             data  cmdb.top,>00,cmdb.size
     322E 0000     
     3230 1000     
0045                                                   ; Clear it all the way
0046               cmdb.init.exit:
0047                       ;------------------------------------------------------
0048                       ; Exit
0049                       ;------------------------------------------------------
0050 3232 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 3234 C2F9  30         mov   *stack+,r11           ; Pop r11
0052 3236 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 3238 0649  14         dect  stack
0023 323A C64B  30         mov   r11,*stack            ; Save return address
0024 323C 0649  14         dect  stack
0025 323E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3240 0649  14         dect  stack
0027 3242 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3244 0649  14         dect  stack
0029 3246 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3248 04E0  34         clr   @tv.error.visible     ; Set to hidden
     324A A228     
0034 324C 0204  20         li    tmp0,3
     324E 0003     
0035 3250 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3252 A22A     
0036               
0037 3254 06A0  32         bl    @film
     3256 2244     
0038 3258 A230                   data tv.error.msg,0,160
     325A 0000     
     325C 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 325E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 3260 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3262 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 3264 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 3266 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0014                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 3268 0649  14         dect  stack
0023 326A C64B  30         mov   r11,*stack            ; Save return address
0024 326C 0649  14         dect  stack
0025 326E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3270 0649  14         dect  stack
0027 3272 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3274 0649  14         dect  stack
0029 3276 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3278 0204  20         li    tmp0,1                ; \ Set default color scheme
     327A 0001     
0034 327C C804  38         mov   tmp0,@tv.colorscheme  ; /
     327E A212     
0035               
0036 3280 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3282 A224     
0037 3284 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     3286 200C     
0038               
0039 3288 0204  20         li    tmp0,fj.bottom
     328A B000     
0040 328C C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     328E A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 3290 06A0  32         bl    @cpym2m
     3292 24E8     
0045 3294 3A92                   data def.printer.fname,tv.printer.fname,7
     3296 DE00     
     3298 0007     
0046               
0047 329A 06A0  32         bl    @cpym2m
     329C 24E8     
0048 329E 3A99                   data def.clip.fname,tv.clip.fname,10
     32A0 DE50     
     32A2 000A     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               tv.init.exit:
0053 32A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0054 32A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0055 32A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 32AA C2F9  30         mov   *stack+,r11           ; Pop R11
0057 32AC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 32AE 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     32B0 27B4     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 32B2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     32B4 2F7E     
0028 32B6 600E                   data bank7.rom        ; | i  p0 = bank address
0029 32B8 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 32BA 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0016                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 32BC 0649  14         dect  stack
0024 32BE C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 32C0 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     32C2 31FC     
0029 32C4 06A0  32         bl    @edb.init             ; Initialize editor buffer
     32C6 31B6     
0030 32C8 06A0  32         bl    @idx.init             ; Initialize index
     32CA 30B6     
0031 32CC 06A0  32         bl    @fb.init              ; Initialize framebuffer
     32CE 300E     
0032 32D0 06A0  32         bl    @errpane.init         ; Initialize error pane
     32D2 3238     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 32D4 06A0  32         bl    @hchar
     32D6 27E0     
0037 32D8 0034                   byte 0,52,32,18       ; Remove markers
     32DA 2012     
0038 32DC 1700                   byte pane.botrow,0,32,51
     32DE 2033     
0039 32E0 FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 32E2 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 32E4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "tv.unpack.uint16.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.unpack.uint16.asm
0001               * FILE......: tv.unpack.uint16.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.unpack.uint16
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.unpack.uint16
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @unpacked.string = Length-prefixed string with unpacked uint16
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.unpack.uint16:
0020 32E6 0649  14         dect  stack
0021 32E8 C64B  30         mov   r11,*stack            ; Save return address
0022 32EA 0649  14         dect  stack
0023 32EC C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Initialize
0026                       ;------------------------------------------------------
0027 32EE 06A0  32         bl    @mknum                ; Convert unsigned number to string
     32F0 29B4     
0028 32F2 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0029 32F4 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0030 32F6 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0031 32F7   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0032               
0033 32F8 0204  20         li    tmp0,unpacked.string
     32FA A02C     
0034 32FC 04F4  30         clr   *tmp0+                ; Clear string 01
0035 32FE 04F4  30         clr   *tmp0+                ; Clear string 23
0036 3300 04F4  30         clr   *tmp0+                ; Clear string 34
0037               
0038 3302 06A0  32         bl    @trimnum              ; Trim unsigned number string
     3304 2A0C     
0039 3306 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0040 3308 A02C                   data unpacked.string  ; | i p1  = Pointer to output buffer
0041 330A 0020                   data 32               ; / i p2  = Padding char to match against
0042                       ;-------------------------------------------------------
0043                       ; Exit
0044                       ;-------------------------------------------------------
0045               tv.unpack.uint16.exit:
0046 330C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 330E C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3310 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 3312 0649  14         dect  stack
0025 3314 C64B  30         mov   r11,*stack            ; Push return address
0026 3316 0649  14         dect  stack
0027 3318 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 331A 0649  14         dect  stack
0029 331C C645  30         mov   tmp1,*stack           ; Push tmp1
0030 331E 0649  14         dect  stack
0031 3320 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3322 0649  14         dect  stack
0033 3324 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3326 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3328 A006     
0038 332A D194  26         movb  *tmp0,tmp2            ; /
0039 332C 0986  32         srl   tmp2,8                ; Right align
0040 332E C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 3330 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3332 A008     
0043 3334 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3336 C120  34         mov   @parm1,tmp0           ; Get source address
     3338 A006     
0048 333A C160  34         mov   @parm4,tmp1           ; Get destination address
     333C A00C     
0049 333E 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 3340 0649  14         dect  stack
0052 3342 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3344 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3346 24EE     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3348 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 334A C120  34         mov   @parm2,tmp0           ; Get requested length
     334C A008     
0064 334E 0A84  32         sla   tmp0,8                ; Left align
0065 3350 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3352 A00C     
0066 3354 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3356 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3358 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 335A C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     335C A008     
0073 335E 6187  18         s     tmp3,tmp2             ; |
0074 3360 0586  14         inc   tmp2                  ; /
0075               
0076 3362 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3364 A00A     
0077 3366 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3368 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 336A 0606  14         dec   tmp2                  ; Update loop counter
0084 336C 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 336E C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3370 A00C     
     3372 A016     
0087 3374 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3376 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3378 FFCE     
0093 337A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     337C 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 337E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 3380 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 3382 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 3384 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 3386 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 3388 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       ;-----------------------------------------------------------------------
0020                       ; Logic for Index management
0021                       ;-----------------------------------------------------------------------
0022                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 338A 0649  14         dect  stack
0023 338C C64B  30         mov   r11,*stack            ; Save return address
0024 338E 0649  14         dect  stack
0025 3390 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3392 0649  14         dect  stack
0027 3394 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3396 C120  34         mov   @parm1,tmp0           ; Get line number
     3398 A006     
0032 339A C160  34         mov   @parm2,tmp1           ; Get pointer
     339C A008     
0033 339E 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 33A0 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     33A2 0FFF     
0039 33A4 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 33A6 06E0  34         swpb  @parm3
     33A8 A00A     
0044 33AA D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     33AC A00A     
0045 33AE 06E0  34         swpb  @parm3                ; \ Restore original order again,
     33B0 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 33B2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33B4 3166     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 33B6 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     33B8 A016     
0056 33BA C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     33BC B000     
0057 33BE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33C0 A016     
0058 33C2 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 33C4 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33C6 3166     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 33C8 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     33CA A016     
0068 33CC 04E4  34         clr   @idx.top(tmp0)        ; /
     33CE B000     
0069 33D0 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33D2 A016     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 33D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 33D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 33D8 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 33DA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0023                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 33DC 0649  14         dect  stack
0022 33DE C64B  30         mov   r11,*stack            ; Save return address
0023 33E0 0649  14         dect  stack
0024 33E2 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 33E4 0649  14         dect  stack
0026 33E6 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 33E8 0649  14         dect  stack
0028 33EA C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 33EC C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     33EE A006     
0033               
0034 33F0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     33F2 3166     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 33F4 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     33F6 A016     
0039 33F8 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     33FA B000     
0040               
0041 33FC 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 33FE C185  18         mov   tmp1,tmp2             ; \
0047 3400 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 3402 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     3404 00FF     
0052 3406 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3408 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     340A C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 340C C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     340E A016     
0059 3410 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3412 A018     
0060 3414 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3416 04E0  34         clr   @outparm1
     3418 A016     
0066 341A 04E0  34         clr   @outparm2
     341C A018     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 341E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3420 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3424 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3426 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3428 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     342A B000     
0018 342C C144  18         mov   tmp0,tmp1             ; a = current slot
0019 342E 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3430 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3432 0606  14         dec   tmp2                  ; tmp2--
0026 3434 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3436 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3438 0649  14         dect  stack
0047 343A C64B  30         mov   r11,*stack            ; Save return address
0048 343C 0649  14         dect  stack
0049 343E C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3440 0649  14         dect  stack
0051 3442 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3444 0649  14         dect  stack
0053 3446 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3448 0649  14         dect  stack
0055 344A C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 344C C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     344E A006     
0060               
0061 3450 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3452 3166     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3454 C120  34         mov   @outparm1,tmp0        ; Index offset
     3456 A016     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3458 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     345A A008     
0070 345C 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 345E 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3460 A006     
0074 3462 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3464 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3466 B000     
0081 3468 04D4  26         clr   *tmp0                 ; Clear index entry
0082 346A 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 346C C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     346E A008     
0088 3470 0287  22         ci    tmp3,2048
     3472 0800     
0089 3474 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3476 06A0  32         bl    @_idx.sams.mapcolumn.on
     3478 30F8     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 347A C120  34         mov   @parm1,tmp0           ; Restore line number
     347C A006     
0103 347E 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3480 06A0  32         bl    @_idx.entry.delete.reorg
     3482 3428     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3484 06A0  32         bl    @_idx.sams.mapcolumn.off
     3486 312C     
0111                                                   ; Restore memory window layout
0112               
0113 3488 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 348A 06A0  32         bl    @_idx.entry.delete.reorg
     348C 3428     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 348E 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 3490 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3492 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3494 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3496 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3498 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 349A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 349C 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     349E 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 34A0 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 34A2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34A4 FFCE     
0027 34A6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34A8 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 34AA 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     34AC B000     
0032 34AE C144  18         mov   tmp0,tmp1             ; a = current slot
0033 34B0 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 34B2 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 34B4 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 34B6 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 34B8 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 34BA A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 34BC 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     34BE AFFC     
0043 34C0 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 34C2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34C4 FFCE     
0049 34C6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34C8 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 34CA C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 34CC 0644  14         dect  tmp0                  ; Move pointer up
0056 34CE 0645  14         dect  tmp1                  ; Move pointer up
0057 34D0 0606  14         dec   tmp2                  ; Next index entry
0058 34D2 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 34D4 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 34D6 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 34D8 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 34DA 0649  14         dect  stack
0089 34DC C64B  30         mov   r11,*stack            ; Save return address
0090 34DE 0649  14         dect  stack
0091 34E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 34E2 0649  14         dect  stack
0093 34E4 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 34E6 0649  14         dect  stack
0095 34E8 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 34EA 0649  14         dect  stack
0097 34EC C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 34EE C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     34F0 A008     
0102 34F2 61A0  34         s     @parm1,tmp2           ; Calculate loop
     34F4 A006     
0103 34F6 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 34F8 C1E0  34         mov   @parm2,tmp3
     34FA A008     
0110 34FC 0287  22         ci    tmp3,2048
     34FE 0800     
0111 3500 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 3502 06A0  32         bl    @_idx.sams.mapcolumn.on
     3504 30F8     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 3506 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3508 A008     
0123 350A 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 350C 06A0  32         bl    @_idx.entry.insert.reorg
     350E 349C     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 3510 06A0  32         bl    @_idx.sams.mapcolumn.off
     3512 312C     
0131                                                   ; Restore memory window layout
0132               
0133 3514 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3516 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3518 A008     
0139               
0140 351A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     351C 3166     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 351E C120  34         mov   @outparm1,tmp0        ; Index offset
     3520 A016     
0145               
0146 3522 06A0  32         bl    @_idx.entry.insert.reorg
     3524 349C     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3526 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3528 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 352A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 352C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 352E C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3530 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       ;-----------------------------------------------------------------------
0027                       ; Logic for editor buffer
0028                       ;-----------------------------------------------------------------------
0029                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3532 0649  14         dect  stack
0022 3534 C64B  30         mov   r11,*stack            ; Push return address
0023 3536 0649  14         dect  stack
0024 3538 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 353A 0649  14         dect  stack
0026 353C C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 353E 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3540 A504     
0031 3542 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3546 FFCE     
0037 3548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     354A 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 354C C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     354E A006     
0043               
0044 3550 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3552 33DC     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3554 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3556 A018     
0050 3558 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     355A A016     
0051 355C 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 355E 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3560 A208     
0057 3562 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3564 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3566 2584     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3568 C820  54         mov   @outparm2,@tv.sams.c000
     356A A018     
     356C A208     
0066                                                   ; Set page in shadow registers
0067               
0068 356E C820  54         mov   @outparm2,@edb.sams.page
     3570 A018     
     3572 A516     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3574 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3576 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3578 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 357A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 357C 0649  14         dect  stack
0022 357E C64B  30         mov   r11,*stack            ; Push return address
0023 3580 0649  14         dect  stack
0024 3582 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3584 0649  14         dect  stack
0026 3586 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3588 04E0  34         clr   @outparm1             ; Reset length
     358A A016     
0031 358C 04E0  34         clr   @outparm2             ; Reset SAMS bank
     358E A018     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3590 C120  34         mov   @parm1,tmp0           ; \
     3592 A006     
0036 3594 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3596 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3598 A504     
0039 359A 1101  14         jlt   !                     ; No, continue processing
0040 359C 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 359E C120  34 !       mov   @parm1,tmp0           ; Get line
     35A0 A006     
0046               
0047 35A2 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     35A4 3532     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 35A6 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     35A8 A016     
0053 35AA 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 35AC C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 35AE C805  38         mov   tmp1,@outparm1        ; Save length
     35B0 A016     
0060 35B2 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 35B4 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     35B6 A016     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 35B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 35BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 35BC C2F9  30         mov   *stack+,r11           ; Pop r11
0073 35BE 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 35C0 0649  14         dect  stack
0094 35C2 C64B  30         mov   r11,*stack            ; Save return address
0095 35C4 0649  14         dect  stack
0096 35C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 35C8 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     35CA A304     
0101 35CC A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     35CE A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 35D0 C804  38         mov   tmp0,@parm1
     35D2 A006     
0106 35D4 06A0  32         bl    @edb.line.getlength
     35D6 357C     
0107 35D8 C820  54         mov   @outparm1,@fb.row.length
     35DA A016     
     35DC A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 35DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 35E0 C2F9  30         mov   *stack+,r11           ; Pop R11
0115 35E2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 35E4 0649  14         dect  stack
0021 35E6 C64B  30         mov   r11,*stack            ; Save return address
0022 35E8 0649  14         dect  stack
0023 35EA C644  30         mov   tmp0,*stack           ; Push tmp0
0024 35EC 0649  14         dect  stack
0025 35EE C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 35F0 C120  34         mov   @edb.next_free.ptr,tmp0
     35F2 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 35F4 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     35F6 0FFF     
0035 35F8 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     35FA 0052     
0036 35FC 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     35FE 0FF0     
0037 3600 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 3602 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     3604 A518     
0043 3606 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3608 A500     
     360A A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 360C C120  34         mov   @edb.sams.hipage,tmp0
     360E A518     
0050 3610 C160  34         mov   @edb.top.ptr,tmp1
     3612 A500     
0051 3614 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3616 2584     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3618 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 361A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     361C FFCE     
0061 361E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3620 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3622 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3624 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3626 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3628 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Utility functions
0034                       ;-----------------------------------------------------------------------
0035                       copy  "pane.topline.clearmsg.asm"
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 362A 0649  14         dect  stack
0022 362C C64B  30         mov   r11,*stack            ; Push return address
0023 362E 0649  14         dect  stack
0024 3630 C660  42         mov   @wyx,*stack           ; Push cursor position
     3632 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3634 06A0  32         bl    @hchar
     3636 27E0     
0029 3638 0034                   byte 0,52,32,18
     363A 2012     
0030 363C FFFF                   data EOL              ; Clear message
0031               
0032 363E 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3640 A224     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3642 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3644 832A     
0038 3646 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3648 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0036                                                      ; Remove overlay messsage in top line
0037                       ;------------------------------------------------------
0038                       ; Program data
0039                       ;------------------------------------------------------
0040                       copy  "data.constants.asm"     ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 364A 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     364C 003F     
     364E 0243     
     3650 05F4     
     3652 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 3654 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3656 000C     
     3658 0006     
     365A 0007     
     365C 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 365E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3660 000C     
     3662 0006     
     3664 0007     
     3666 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3668 0000             data  >0000,>0001           ; Cursor
     366A 0001     
0099 366C 0000             data  >0000,>0101           ; Current line indicator     <
     366E 0101     
0100 3670 0820             data  >0820,>0201           ; Current column indicator   v
     3672 0201     
0101               nosprite:
0102 3674 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3676 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3678 F171     
     367A 1B1F     
     367C 71B1     
0158 367E A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     3680 F0FF     
     3682 1F1A     
     3684 F1FF     
0159 3686 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3688 F0FF     
     368A 1F12     
     368C F1F6     
0160 368E F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     3690 1E11     
     3692 1A17     
     3694 1E11     
0161 3696 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     3698 E1FF     
     369A 1F1E     
     369C E1FF     
0162 369E 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     36A0 1016     
     36A2 1B71     
     36A4 1711     
0163 36A6 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     36A8 1011     
     36AA F1F1     
     36AC 1F11     
0164 36AE 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     36B0 A1FF     
     36B2 1F1F     
     36B4 F11F     
0165 36B6 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     36B8 12FF     
     36BA 1B12     
     36BC 12FF     
0166 36BE F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     36C0 E1FF     
     36C2 1B1F     
     36C4 F131     
0167                       even
0168               
0169               tv.tabs.table:
0170 36C6 0007             byte  0,7,12,25             ; \   Default tab positions as used
     36C8 0C19     
0171 36CA 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     36CC 3B4F     
0172 36CE FF00             byte  >ff,0,0,0             ; |
     36D0 0000     
0173 36D2 0000             byte  0,0,0,0               ; |   Up to 20 positions supported.
     36D4 0000     
0174 36D6 0000             byte  0,0,0,0               ; /   >ff means end-of-list.
     36D8 0000     
0175                       even
0176               
0177               
0178               
0179               ***************************************************************
0180               * Constants for numbers 0-10
0181               ********|*****|*********************|**************************
0182      2000     const.0       equ   w$0000          ; 0
0183      2002     const.1       equ   w$0001          ; 1
0184      2004     const.2       equ   w$0002          ; 2
0185 36DA 0003     const.3       data  3               ; 3
0186      2006     const.4       equ   w$0004          ; 4
0187 36DC 0005     const.5       data  5               ; 5
0188 36DE 0006     const.6       data  6               ; 6
0189 36E0 0007     const.7       data  7               ; 7
0190      2008     const.8       equ   w$0008          ; 8
0191 36E2 0009     const.9       data  9               ; 9
0192 36E4 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0041                       copy  "data.strings.asm"       ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 36E6 012C     txt.delim          stri ','
0009 36E8 0520     txt.bottom         stri '  BOT'
     36EA 2042     
     36EC 4F54     
0010 36EE 034F     txt.ovrwrite       stri 'OVR'
     36F0 5652     
0011 36F2 0349     txt.insert         stri 'INS'
     36F4 4E53     
0012 36F6 012A     txt.star           stri '*'
0013 36F8 0A4C     txt.loading        stri 'Loading...'
     36FA 6F61     
     36FC 6469     
     36FE 6E67     
     3700 2E2E     
     3702 2E       
0014 3703   0A     txt.saving         stri 'Saving....'
     3704 5361     
     3706 7669     
     3708 6E67     
     370A 2E2E     
     370C 2E2E     
0015 370E 1250     txt.printing       stri 'Printing file.....'
     3710 7269     
     3712 6E74     
     3714 696E     
     3716 6720     
     3718 6669     
     371A 6C65     
     371C 2E2E     
     371E 2E2E     
     3720 2E       
0016 3721   12     txt.block.del      stri 'Deleting block....'
     3722 4465     
     3724 6C65     
     3726 7469     
     3728 6E67     
     372A 2062     
     372C 6C6F     
     372E 636B     
     3730 2E2E     
     3732 2E2E     
0017 3734 1143     txt.block.copy     stri 'Copying block....'
     3736 6F70     
     3738 7969     
     373A 6E67     
     373C 2062     
     373E 6C6F     
     3740 636B     
     3742 2E2E     
     3744 2E2E     
0018 3746 104D     txt.block.move     stri 'Moving block....'
     3748 6F76     
     374A 696E     
     374C 6720     
     374E 626C     
     3750 6F63     
     3752 6B2E     
     3754 2E2E     
     3756 2E       
0019 3757   18     txt.block.save     stri 'Saving block to file....'
     3758 5361     
     375A 7669     
     375C 6E67     
     375E 2062     
     3760 6C6F     
     3762 636B     
     3764 2074     
     3766 6F20     
     3768 6669     
     376A 6C65     
     376C 2E2E     
     376E 2E2E     
0020 3770 1843     txt.block.clip     stri 'Copying to clipboard....'
     3772 6F70     
     3774 7969     
     3776 6E67     
     3778 2074     
     377A 6F20     
     377C 636C     
     377E 6970     
     3780 626F     
     3782 6172     
     3784 642E     
     3786 2E2E     
     3788 2E       
0021 3789   12     txt.block.print    stri 'Printing block....'
     378A 5072     
     378C 696E     
     378E 7469     
     3790 6E67     
     3792 2062     
     3794 6C6F     
     3796 636B     
     3798 2E2E     
     379A 2E2E     
0022 379C 1343     txt.clearmem       stri 'Clearing memory....'
     379E 6C65     
     37A0 6172     
     37A2 696E     
     37A4 6720     
     37A6 6D65     
     37A8 6D6F     
     37AA 7279     
     37AC 2E2E     
     37AE 2E2E     
0023 37B0 0E4C     txt.done.load      stri 'Load completed'
     37B2 6F61     
     37B4 6420     
     37B6 636F     
     37B8 6D70     
     37BA 6C65     
     37BC 7465     
     37BE 64       
0024 37BF   10     txt.done.insert    stri 'Insert completed'
     37C0 496E     
     37C2 7365     
     37C4 7274     
     37C6 2063     
     37C8 6F6D     
     37CA 706C     
     37CC 6574     
     37CE 6564     
0025 37D0 1041     txt.done.append    stri 'Append completed'
     37D2 7070     
     37D4 656E     
     37D6 6420     
     37D8 636F     
     37DA 6D70     
     37DC 6C65     
     37DE 7465     
     37E0 64       
0026 37E1   0E     txt.done.save      stri 'Save completed'
     37E2 5361     
     37E4 7665     
     37E6 2063     
     37E8 6F6D     
     37EA 706C     
     37EC 6574     
     37EE 6564     
0027 37F0 0E43     txt.done.copy      stri 'Copy completed'
     37F2 6F70     
     37F4 7920     
     37F6 636F     
     37F8 6D70     
     37FA 6C65     
     37FC 7465     
     37FE 64       
0028 37FF   0F     txt.done.print     stri 'Print completed'
     3800 5072     
     3802 696E     
     3804 7420     
     3806 636F     
     3808 6D70     
     380A 6C65     
     380C 7465     
     380E 64       
0029 380F   10     txt.done.delete    stri 'Delete completed'
     3810 4465     
     3812 6C65     
     3814 7465     
     3816 2063     
     3818 6F6D     
     381A 706C     
     381C 6574     
     381E 6564     
0030 3820 0F43     txt.done.clipboard stri 'Clipboard saved'
     3822 6C69     
     3824 7062     
     3826 6F61     
     3828 7264     
     382A 2073     
     382C 6176     
     382E 6564     
0031 3830 0D43     txt.done.clipdev   stri 'Clipboard set'
     3832 6C69     
     3834 7062     
     3836 6F61     
     3838 7264     
     383A 2073     
     383C 6574     
0032 383E 0846     txt.fastmode       stri 'Fastmode'
     3840 6173     
     3842 746D     
     3844 6F64     
     3846 65       
0033 3847   1B     txt.uncrunching    stri 'Expanding TI Basic line....'
     3848 4578     
     384A 7061     
     384C 6E64     
     384E 696E     
     3850 6720     
     3852 5449     
     3854 2042     
     3856 6173     
     3858 6963     
     385A 206C     
     385C 696E     
     385E 652E     
     3860 2E2E     
     3862 2E       
0034 3863   02     txt.kb             stri 'kb'
     3864 6B62     
0035 3866 054C     txt.lines          stri 'Lines'
     3868 696E     
     386A 6573     
0036 386C 0A5B     txt.newfile        stri '[New file]'
     386E 4E65     
     3870 7720     
     3872 6669     
     3874 6C65     
     3876 5D       
0037 3877   0D     txt.tib1           stri '[TI Basic #1]'
     3878 5B54     
     387A 4920     
     387C 4261     
     387E 7369     
     3880 6320     
     3882 2331     
     3884 5D       
0038 3885   0D     txt.tib2           stri '[TI Basic #2]'
     3886 5B54     
     3888 4920     
     388A 4261     
     388C 7369     
     388E 6320     
     3890 2332     
     3892 5D       
0039 3893   0D     txt.tib3           stri '[TI Basic #3]'
     3894 5B54     
     3896 4920     
     3898 4261     
     389A 7369     
     389C 6320     
     389E 2333     
     38A0 5D       
0040 38A1   0D     txt.tib4           stri '[TI Basic #4]'
     38A2 5B54     
     38A4 4920     
     38A6 4261     
     38A8 7369     
     38AA 6320     
     38AC 2334     
     38AE 5D       
0041 38AF   0D     txt.tib5           stri '[TI Basic #5]'
     38B0 5B54     
     38B2 4920     
     38B4 4261     
     38B6 7369     
     38B8 6320     
     38BA 2335     
     38BC 5D       
0042 38BD   04     txt.filetype.dv80  stri 'DV80'
     38BE 4456     
     38C0 3830     
0043 38C2 034D     txt.m1             stri 'M1='
     38C4 313D     
0044 38C6 034D     txt.m2             stri 'M2='
     38C8 323D     
0045 38CA 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     38CC 392D     
     38CE 4D65     
     38D0 6E75     
     38D2 2020     
     38D4 5E48     
     38D6 2D48     
     38D8 656C     
     38DA 70       
0046 38DB   1B     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic#'
     38DC 4639     
     38DE 2D4D     
     38E0 656E     
     38E2 7520     
     38E4 205E     
     38E6 482D     
     38E8 4865     
     38EA 6C70     
     38EC 2020     
     38EE 4630     
     38F0 2D42     
     38F2 6173     
     38F4 6963     
     38F6 23       
0047 38F7   36     txt.keys.block     stri 'F9-Back  ^Copy  ^Move  ^Del  ^Save  ^Print  ^[1-5]Clip'
     38F8 4639     
     38FA 2D42     
     38FC 6163     
     38FE 6B20     
     3900 205E     
     3902 436F     
     3904 7079     
     3906 2020     
     3908 5E4D     
     390A 6F76     
     390C 6520     
     390E 205E     
     3910 4465     
     3912 6C20     
     3914 205E     
     3916 5361     
     3918 7665     
     391A 2020     
     391C 5E50     
     391E 7269     
     3920 6E74     
     3922 2020     
     3924 5E5B     
     3926 312D     
     3928 355D     
     392A 436C     
     392C 6970     
0048 392E 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoMode  SPACE-Uncrunch program'
     3930 392D     
     3932 4261     
     3934 636B     
     3936 2020     
     3938 4635     
     393A 2D41     
     393C 7574     
     393E 6F4D     
     3940 6F64     
     3942 6520     
     3944 2053     
     3946 5041     
     3948 4345     
     394A 2D55     
     394C 6E63     
     394E 7275     
     3950 6E63     
     3952 6820     
     3954 7072     
     3956 6F67     
     3958 7261     
     395A 6D       
0049 395B   2E     txt.ruler          text    '.........'
     395C 2E2E     
     395E 2E2E     
     3960 2E2E     
     3962 2E2E     
0050 3964 12                          byte    18
0051 3965   2E                        text    '.........'
     3966 2E2E     
     3968 2E2E     
     396A 2E2E     
     396C 2E2E     
0052 396E 13                          byte    19
0053 396F   2E                        text    '.........'
     3970 2E2E     
     3972 2E2E     
     3974 2E2E     
     3976 2E2E     
0054 3978 14                          byte    20
0055 3979   2E                        text    '.........'
     397A 2E2E     
     397C 2E2E     
     397E 2E2E     
     3980 2E2E     
0056 3982 15                          byte    21
0057 3983   2E                        text    '.........'
     3984 2E2E     
     3986 2E2E     
     3988 2E2E     
     398A 2E2E     
0058 398C 16                          byte    22
0059 398D   2E                        text    '.........'
     398E 2E2E     
     3990 2E2E     
     3992 2E2E     
     3994 2E2E     
0060 3996 17                          byte    23
0061 3997   2E                        text    '.........'
     3998 2E2E     
     399A 2E2E     
     399C 2E2E     
     399E 2E2E     
0062 39A0 18                          byte    24
0063 39A1   2E                        text    '.........'
     39A2 2E2E     
     39A4 2E2E     
     39A6 2E2E     
     39A8 2E2E     
0064 39AA 19                          byte    25
0065                                  even
0066 39AC 020E     txt.alpha.down     data >020e,>0f00
     39AE 0F00     
0067 39B0 0110     txt.vertline       data >0110
0068 39B2 011C     txt.keymarker      byte 1,28
0069               
0070 39B4 0120     txt.ws1            stri ' '
0071 39B6 0220     txt.ws2            stri '  '
     39B8 20       
0072 39B9   03     txt.ws3            stri '   '
     39BA 2020     
     39BC 20       
0073 39BD   04     txt.ws4            stri '    '
     39BE 2020     
     39C0 2020     
0074 39C2 0520     txt.ws5            stri '     '
     39C4 2020     
     39C6 2020     
0075      39BD     txt.filetype.none  equ txt.ws4
0076               
0077               
0078               ;--------------------------------------------------------------
0079               ; Strings for error line pane
0080               ;--------------------------------------------------------------
0081 39C8 1546     txt.ioerr.load     stri 'Failed loading file: '
     39CA 6169     
     39CC 6C65     
     39CE 6420     
     39D0 6C6F     
     39D2 6164     
     39D4 696E     
     39D6 6720     
     39D8 6669     
     39DA 6C65     
     39DC 3A20     
0082 39DE 1446     txt.ioerr.save     stri 'Failed saving file: '
     39E0 6169     
     39E2 6C65     
     39E4 6420     
     39E6 7361     
     39E8 7669     
     39EA 6E67     
     39EC 2066     
     39EE 696C     
     39F0 653A     
     39F2 20       
0083 39F3   1B     txt.ioerr.print    stri 'Failed printing to device: '
     39F4 4661     
     39F6 696C     
     39F8 6564     
     39FA 2070     
     39FC 7269     
     39FE 6E74     
     3A00 696E     
     3A02 6720     
     3A04 746F     
     3A06 2064     
     3A08 6576     
     3A0A 6963     
     3A0C 653A     
     3A0E 20       
0084 3A0F   16     txt.io.nofile      stri 'No filename specified.'
     3A10 4E6F     
     3A12 2066     
     3A14 696C     
     3A16 656E     
     3A18 616D     
     3A1A 6520     
     3A1C 7370     
     3A1E 6563     
     3A20 6966     
     3A22 6965     
     3A24 642E     
0085 3A26 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3A28 6E64     
     3A2A 6578     
     3A2C 2066     
     3A2E 756C     
     3A30 6C2E     
     3A32 2046     
     3A34 696C     
     3A36 6520     
     3A38 746F     
     3A3A 6F20     
     3A3C 6C61     
     3A3E 7267     
     3A40 6520     
     3A42 666F     
     3A44 7220     
     3A46 6564     
     3A48 6974     
     3A4A 6F72     
     3A4C 2062     
     3A4E 7566     
     3A50 6665     
     3A52 722E     
0086 3A54 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3A56 6F70     
     3A58 792F     
     3A5A 4D6F     
     3A5C 7665     
     3A5E 2074     
     3A60 6172     
     3A62 6765     
     3A64 7420     
     3A66 6D75     
     3A68 7374     
     3A6A 2062     
     3A6C 6520     
     3A6E 6F75     
     3A70 7473     
     3A72 6964     
     3A74 6520     
     3A76 4D31     
     3A78 2D4D     
     3A7A 3220     
     3A7C 7261     
     3A7E 6E67     
     3A80 652E     
0087               
0088               ;--------------------------------------------------------------
0089               ; Strings for command buffer
0090               ;--------------------------------------------------------------
0091 3A82 013E     txt.cmdb.prompt    stri '>'
0092 3A84 0D43     txt.colorscheme    stri 'Color scheme:'
     3A86 6F6C     
     3A88 6F72     
     3A8A 2073     
     3A8C 6368     
     3A8E 656D     
     3A90 653A     
                   < ram.resident.asm
0042                       copy  "data.defaults.asm"      ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3A92 0650     def.printer.fname   stri 'PI.PIO'
     3A94 492E     
     3A96 5049     
     3A98 4F       
0008 3A99   09     def.clip.fname      stri 'DSK1.CLIP'
     3A9A 4453     
     3A9C 4B31     
     3A9E 2E43     
     3AA0 4C49     
     3AA2 50       
0009 3AA3   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3AA4 4453     
     3AA6 4B32     
     3AA8 2E43     
     3AAA 4C49     
     3AAC 50       
0010 3AAD   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3AAE 5449     
     3AB0 5049     
     3AB2 2E43     
     3AB4 4C49     
     3AB6 50       
0011 3AB7   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3AB8 2C44     
     3ABA 534B     
     3ABC 2C48     
     3ABE 4458     
     3AC0 2C49     
     3AC2 4445     
     3AC4 2C50     
     3AC6 492E     
     3AC8 2C50     
     3ACA 494F     
     3ACC 2C54     
     3ACE 4950     
     3AD0 492E     
     3AD2 2C52     
     3AD4 442C     
     3AD6 5343     
     3AD8 532C     
     3ADA 5344     
     3ADC 442C     
     3ADE 5744     
     3AE0 532C     
     3AE2 5253     
     3AE4 3233     
     3AE6 32       
                   < ram.resident.asm
                   < stevie_b3.asm
0041                       ;------------------------------------------------------
0042                       ; Activate bank 1 and branch to  >6036
0043                       ;------------------------------------------------------
0044 3AE8 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3AEA 6002     
0045               
0049               
0050 3AEC 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3AEE 6046     
0051               ***************************************************************
0052               * Step 3: Include main editor modules
0053               ********|*****|*********************|**************************
0054               main:
0055                       aorg  kickstart.code2       ; >6046
0056 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0057                       ;-----------------------------------------------------------------------
0058                       ; Include files - Shared code
0059                       ;-----------------------------------------------------------------------
0060               
0061                       ;-----------------------------------------------------------------------
0062                       ; Include files - Dialogs
0063                       ;-----------------------------------------------------------------------
0064                       copy  "dialog.menu.asm"      ; Dialog "Stevie Menu"
     **** ****     > dialog.menu.asm
0001               * FILE......: dialog.menu.asm
0002               * Purpose...: Dialog "Main Menu"
0003               
0004               ***************************************************************
0005               * dialog.menu
0006               * Open Dialog "Main Menu"
0007               ***************************************************************
0008               * b @dialog.menu
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.menu:
0022 604A 0649  14         dect  stack
0023 604C C64B  30         mov   r11,*stack            ; Save return address
0024 604E 0649  14         dect  stack
0025 6050 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6052 0204  20         li    tmp0,id.dialog.menu
     6054 0064     
0030 6056 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6058 A71A     
0031               
0032 605A 0204  20         li    tmp0,txt.head.menu
     605C 761E     
0033 605E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6060 A71E     
0034               
0035 6062 0204  20         li    tmp0,txt.info.menu
     6064 762D     
0036 6066 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6068 A720     
0037               
0038 606A 0204  20         li    tmp0,pos.info.menu
     606C 7658     
0039 606E C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6070 A724     
0040               
0041 6072 0204  20         li    tmp0,txt.hint.menu
     6074 765E     
0042 6076 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6078 A722     
0043               
0044 607A 0204  20         li    tmp0,txt.keys.menu
     607C 7660     
0045 607E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6080 A726     
0046               
0047 6082 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6084 7108     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.menu.exit:
0052 6086 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 6088 C2F9  30         mov   *stack+,r11           ; Pop R11
0054 608A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0065                       copy  "dialog.help.asm"      ; Dialog "Help"
     **** ****     > dialog.help.asm
0001               * FILE......: dialog.help.asm
0002               * Purpose...: Stevie Editor - About dialog
0003               
0004               *---------------------------------------------------------------
0005               * Show Stevie welcome/about dialog
0006               *---------------------------------------------------------------
0007               dialog.help:
0008 608C 0649  14         dect  stack
0009 608E C64B  30         mov   r11,*stack            ; Save return address
0010                       ;-------------------------------------------------------
0011                       ; Setup dialog
0012                       ;-------------------------------------------------------
0013 6090 06A0  32         bl    @scroff               ; turn screen off
     6092 2694     
0014               
0015 6094 0204  20         li    tmp0,id.dialog.help
     6096 0068     
0016 6098 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     609A A71A     
0017               
0018 609C 06A0  32         bl    @dialog.help.content  ; display content in modal dialog
     609E 60CC     
0019               
0020 60A0 0204  20         li    tmp0,txt.head.about
     60A2 7561     
0021 60A4 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     60A6 A71E     
0022               
0023 60A8 0204  20         li    tmp0,txt.about.build
     60AA 75CF     
0024 60AC C804  38         mov   tmp0,@cmdb.paninfo    ; Info line
     60AE A720     
0025 60B0 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     60B2 A724     
0026               
0027 60B4 0204  20         li    tmp0,txt.hint.about
     60B6 756D     
0028 60B8 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     60BA A722     
0029               
0030 60BC 0204  20         li    tmp0,txt.keys.about
     60BE 75AA     
0031 60C0 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     60C2 A726     
0032               
0033 60C4 06A0  32         bl    @scron                ; Turn screen on
     60C6 269C     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               dialog.help.exit:
0038 60C8 C2F9  30         mov   *stack+,r11           ; Pop r11
0039 60CA 045B  20         b     *r11                  ; Return
0040               
0041               
0042               
0043               ***************************************************************
0044               * dialog.help.content
0045               * Show content in modal dialog
0046               ***************************************************************
0047               * bl  @dialog.help.content
0048               *--------------------------------------------------------------
0049               * OUTPUT
0050               * none
0051               *--------------------------------------------------------------
0052               * Register usage
0053               * tmp0
0054               ********|*****|*********************|**************************
0055               dialog.help.content:
0056 60CC 0649  14         dect  stack
0057 60CE C64B  30         mov   r11,*stack            ; Save return address
0058 60D0 0649  14         dect  stack
0059 60D2 C644  30         mov   tmp0,*stack           ; Push tmp0
0060 60D4 0649  14         dect  stack
0061 60D6 C645  30         mov   tmp1,*stack           ; Push tmp1
0062 60D8 0649  14         dect  stack
0063 60DA C646  30         mov   tmp2,*stack           ; Push tmp2
0064 60DC 0649  14         dect  stack
0065 60DE C647  30         mov   tmp3,*stack           ; Push tmp3
0066 60E0 0649  14         dect  stack
0067 60E2 C660  42         mov   @wyx,*stack           ; Push cursor position
     60E4 832A     
0068                       ;------------------------------------------------------
0069                       ; Clear screen and set colors
0070                       ;------------------------------------------------------
0071 60E6 06A0  32         bl    @filv
     60E8 229C     
0072 60EA 0050                   data vdp.fb.toprow.sit,32,vdp.sit.size - 480
     60EC 0020     
     60EE 05A0     
0073                                                   ; Clear screen
0074               
0075                       ;
0076                       ; Colours are also set in pane.action.colorscheme.load
0077                       ; but we also set them here to avoid flickering due to
0078                       ; timing delay before function is called.
0079                       ;
0080               
0081 60F0 0204  20         li    tmp0,vdp.fb.toprow.tat
     60F2 1850     
0082 60F4 C160  34         mov   @tv.color,tmp1        ; Get color for framebuffer
     60F6 A218     
0083 60F8 0985  32         srl   tmp1,8                ; Right justify
0084 60FA 0206  20         li    tmp2,vdp.sit.size - 480
     60FC 05A0     
0085                                                   ; Prepare for loading color attributes
0086               
0087 60FE 06A0  32         bl    @xfilv                ; \ Fill VDP memory
     6100 22A2     
0088                                                   ; | i  tmp0 = Memory start address
0089                                                   ; | i  tmp1 = Byte to fill
0090                                                   ; / i  tmp2 = Number of bytes to fill
0091               
0092 6102 06A0  32         bl    @filv
     6104 229C     
0093 6106 2180                   data sprsat,>d0,32    ; Turn off sprites
     6108 00D0     
     610A 0020     
0094                       ;------------------------------------------------------
0095                       ; Display left column
0096                       ;------------------------------------------------------
0097 610C 06A0  32         bl    @at                   ; Set cursor position
     610E 26D4     
0098 6110 0100                   byte 1,0              ; Y=1, X=0
0099               
0100 6112 C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     6114 A71C     
0101               
0102 6116 C167  34         mov   @dialog.help.data.pages(tmp3),tmp1
     6118 6148     
0103                                                   ; Pointer to list of strings
0104 611A C1A7  34         mov   @dialog.help.data.pages+2(tmp3),tmp2
     611C 614A     
0105                                                   ; Number of strings to display
0106               
0107 611E 06A0  32         bl    @putlst               ; Loop over string list and display
     6120 2458     
0108                                                   ; \ i  @wyx = Cursor position
0109                                                   ; | i  tmp1 = Pointer to first length-
0110                                                   ; |           prefixed string in list
0111                                                   ; / i  tmp2 = Number of strings to display
0112               
0113                       ;------------------------------------------------------
0114                       ; Display right column
0115                       ;------------------------------------------------------
0116 6122 06A0  32         bl    @at                   ; Set cursor position
     6124 26D4     
0117 6126 002A                   byte 0,42             ; Y=0, X=42
0118               
0119 6128 C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     612A A71C     
0120               
0121 612C C167  34         mov   @dialog.help.data.pages+4(tmp3),tmp1
     612E 614C     
0122                                                   ; Pointer to list of strings
0123 6130 C1A7  34         mov   @dialog.help.data.pages+6(tmp3),tmp2
     6132 614E     
0124                                                   ; Number of strings to display
0125               
0126 6134 06A0  32         bl    @putlst               ; Loop over string list and display
     6136 2458     
0127                                                   ; \ i  @wyx = Cursor position
0128                                                   ; | i  tmp1 = Pointer to first length-
0129                                                   ; |           prefixed string in list
0130                                                   ; / i  tmp2 = Number of strings to display
0131               
0132                       ;------------------------------------------------------
0133                       ; Exit
0134                       ;------------------------------------------------------
0135               dialog.help.content.exit:
0136 6138 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     613A 832A     
0137 613C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0138 613E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0139 6140 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0140 6142 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0141 6144 C2F9  30         mov   *stack+,r11           ; Pop r11
0142 6146 045B  20         b     *r11                  ; Return
0143               
0144               
0145               
0146               dialog.help.data.pages:
0147 6148 6158             data  dialog.help.data.page1.left,17
     614A 0011     
0148 614C 62D0             data  dialog.help.data.page1.right,18
     614E 0012     
0149 6150 64AC             data  dialog.help.data.page2.left,8
     6152 0008     
0150 6154 6588             data  dialog.help.data.page2.right,10
     6156 000A     
0151               
0152               
0153               dialog.help.data.page1.left:
0154 6158 0120             stri ' '
0155                       even
0156 615A 23               byte    35
0157 615B   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     615C 0101     
     615E 0101     
     6160 0101     
     6162 0101     
     6164 0101     
     6166 0101     
0158 6168 2043             text    ' Cursor '
     616A 7572     
     616C 736F     
     616E 7220     
0159 6170 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6172 0101     
     6174 0101     
     6176 0101     
     6178 0101     
     617A 0101     
     617C 0101     
0160                       even
0161 617E 1246             stri 'Fctn s        Left'
     6180 6374     
     6182 6E20     
     6184 7320     
     6186 2020     
     6188 2020     
     618A 2020     
     618C 204C     
     618E 6566     
     6190 74       
0162                       even
0163 6192 1346             stri 'Fctn d        Right'
     6194 6374     
     6196 6E20     
     6198 6420     
     619A 2020     
     619C 2020     
     619E 2020     
     61A0 2052     
     61A2 6967     
     61A4 6874     
0164                       even
0165 61A6 1046             stri 'Fctn e        Up'
     61A8 6374     
     61AA 6E20     
     61AC 6520     
     61AE 2020     
     61B0 2020     
     61B2 2020     
     61B4 2055     
     61B6 70       
0166                       even
0167 61B8 1246             stri 'Fctn x        Down'
     61BA 6374     
     61BC 6E20     
     61BE 7820     
     61C0 2020     
     61C2 2020     
     61C4 2020     
     61C6 2044     
     61C8 6F77     
     61CA 6E       
0168                       even
0169 61CC 1246             stri 'Fctn h        Home'
     61CE 6374     
     61D0 6E20     
     61D2 6820     
     61D4 2020     
     61D6 2020     
     61D8 2020     
     61DA 2048     
     61DC 6F6D     
     61DE 65       
0170                       even
0171 61E0 1146             stri 'Fctn l        End'
     61E2 6374     
     61E4 6E20     
     61E6 6C20     
     61E8 2020     
     61EA 2020     
     61EC 2020     
     61EE 2045     
     61F0 6E64     
0172                       even
0173 61F2 1746             stri 'Fctn j        Prev word'
     61F4 6374     
     61F6 6E20     
     61F8 6A20     
     61FA 2020     
     61FC 2020     
     61FE 2020     
     6200 2050     
     6202 7265     
     6204 7620     
     6206 776F     
     6208 7264     
0174                       even
0175 620A 1746             stri 'Fctn k        Next word'
     620C 6374     
     620E 6E20     
     6210 6B20     
     6212 2020     
     6214 2020     
     6216 2020     
     6218 204E     
     621A 6578     
     621C 7420     
     621E 776F     
     6220 7264     
0176                       even
0177 6222 1646             stri 'Fctn 7   ^t   Next tab'
     6224 6374     
     6226 6E20     
     6228 3720     
     622A 2020     
     622C 5E74     
     622E 2020     
     6230 204E     
     6232 6578     
     6234 7420     
     6236 7461     
     6238 62       
0178                       even
0179 623A 1546             stri 'Fctn 6   ^e   Page up'
     623C 6374     
     623E 6E20     
     6240 3620     
     6242 2020     
     6244 5E65     
     6246 2020     
     6248 2050     
     624A 6167     
     624C 6520     
     624E 7570     
0180                       even
0181 6250 1746             stri 'Fctn 4   ^x   Page down'
     6252 6374     
     6254 6E20     
     6256 3420     
     6258 2020     
     625A 5E78     
     625C 2020     
     625E 2050     
     6260 6167     
     6262 6520     
     6264 646F     
     6266 776E     
0182                       even
0183 6268 1846             stri 'Fctn v        Screen top'
     626A 6374     
     626C 6E20     
     626E 7620     
     6270 2020     
     6272 2020     
     6274 2020     
     6276 2053     
     6278 6372     
     627A 6565     
     627C 6E20     
     627E 746F     
     6280 70       
0184                       even
0185 6282 1B46             stri 'Fctn b        Screen bottom'
     6284 6374     
     6286 6E20     
     6288 6220     
     628A 2020     
     628C 2020     
     628E 2020     
     6290 2053     
     6292 6372     
     6294 6565     
     6296 6E20     
     6298 626F     
     629A 7474     
     629C 6F6D     
0186                       even
0187 629E 1643             stri 'Ctrl v   ^v   File top'
     62A0 7472     
     62A2 6C20     
     62A4 7620     
     62A6 2020     
     62A8 5E76     
     62AA 2020     
     62AC 2046     
     62AE 696C     
     62B0 6520     
     62B2 746F     
     62B4 70       
0188                       even
0189 62B6 1943             stri 'Ctrl b   ^b   File bottom'
     62B8 7472     
     62BA 6C20     
     62BC 6220     
     62BE 2020     
     62C0 5E62     
     62C2 2020     
     62C4 2046     
     62C6 696C     
     62C8 6520     
     62CA 626F     
     62CC 7474     
     62CE 6F6D     
0190               
0191               dialog.help.data.page1.right:
0192 62D0 2620             stri '                                 (1/2)'
     62D2 2020     
     62D4 2020     
     62D6 2020     
     62D8 2020     
     62DA 2020     
     62DC 2020     
     62DE 2020     
     62E0 2020     
     62E2 2020     
     62E4 2020     
     62E6 2020     
     62E8 2020     
     62EA 2020     
     62EC 2020     
     62EE 2020     
     62F0 2020     
     62F2 2831     
     62F4 2F32     
     62F6 29       
0193                       even
0194 62F8 0120             stri ' '
0195                       even
0196 62FA 24               byte    36
0197 62FB   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     62FC 0101     
     62FE 0101     
     6300 0101     
     6302 0101     
     6304 0101     
     6306 0101     
     6308 0101     
0198 630A 2046             text    ' File '
     630C 696C     
     630E 6520     
0199 6310 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6312 0101     
     6314 0101     
     6316 0101     
     6318 0101     
     631A 0101     
     631C 0101     
     631E 01       
0200                       even
0201 6320 1943             stri 'Ctrl a   ^a   Append file'
     6322 7472     
     6324 6C20     
     6326 6120     
     6328 2020     
     632A 5E61     
     632C 2020     
     632E 2041     
     6330 7070     
     6332 656E     
     6334 6420     
     6336 6669     
     6338 6C65     
0202                       even
0203 633A 2143             stri 'Ctrl i   ^i   Insert file at line'
     633C 7472     
     633E 6C20     
     6340 6920     
     6342 2020     
     6344 5E69     
     6346 2020     
     6348 2049     
     634A 6E73     
     634C 6572     
     634E 7420     
     6350 6669     
     6352 6C65     
     6354 2061     
     6356 7420     
     6358 6C69     
     635A 6E65     
0204                       even
0205 635C 2443             stri 'Ctrl c   ^c   Copy clipboard to line'
     635E 7472     
     6360 6C20     
     6362 6320     
     6364 2020     
     6366 5E63     
     6368 2020     
     636A 2043     
     636C 6F70     
     636E 7920     
     6370 636C     
     6372 6970     
     6374 626F     
     6376 6172     
     6378 6420     
     637A 746F     
     637C 206C     
     637E 696E     
     6380 65       
0206                       even
0207 6382 1743             stri 'Ctrl o   ^o   Open file'
     6384 7472     
     6386 6C20     
     6388 6F20     
     638A 2020     
     638C 5E6F     
     638E 2020     
     6390 204F     
     6392 7065     
     6394 6E20     
     6396 6669     
     6398 6C65     
0208                       even
0209 639A 1843             stri 'Ctrl p   ^p   Print file'
     639C 7472     
     639E 6C20     
     63A0 7020     
     63A2 2020     
     63A4 5E70     
     63A6 2020     
     63A8 2050     
     63AA 7269     
     63AC 6E74     
     63AE 2066     
     63B0 696C     
     63B2 65       
0210                       even
0211 63B4 1743             stri 'Ctrl s   ^s   Save file'
     63B6 7472     
     63B8 6C20     
     63BA 7320     
     63BC 2020     
     63BE 5E73     
     63C0 2020     
     63C2 2053     
     63C4 6176     
     63C6 6520     
     63C8 6669     
     63CA 6C65     
0212                       even
0213 63CC 1C43             stri 'Ctrl ,   ^,   Load prev file'
     63CE 7472     
     63D0 6C20     
     63D2 2C20     
     63D4 2020     
     63D6 5E2C     
     63D8 2020     
     63DA 204C     
     63DC 6F61     
     63DE 6420     
     63E0 7072     
     63E2 6576     
     63E4 2066     
     63E6 696C     
     63E8 65       
0214                       even
0215 63EA 1C43             stri 'Ctrl .   ^.   Load next file'
     63EC 7472     
     63EE 6C20     
     63F0 2E20     
     63F2 2020     
     63F4 5E2E     
     63F6 2020     
     63F8 204C     
     63FA 6F61     
     63FC 6420     
     63FE 6E65     
     6400 7874     
     6402 2066     
     6404 696C     
     6406 65       
0216                       even
0217 6408 0120             stri ' '
0218                       even
0219 640A 23               byte    35
0220 640B   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     640C 0101     
     640E 0101     
     6410 0101     
     6412 0101     
     6414 0101     
     6416 0101     
0221 6418 204F             text    ' Others '
     641A 7468     
     641C 6572     
     641E 7320     
0222 6420 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6422 0101     
     6424 0101     
     6426 0101     
     6428 0101     
     642A 0101     
     642C 0101     
0223                       even
0224 642E 1246             stri 'Fctn +   ^q   Quit'
     6430 6374     
     6432 6E20     
     6434 2B20     
     6436 2020     
     6438 5E71     
     643A 2020     
     643C 2051     
     643E 7569     
     6440 74       
0225                       even
0226 6442 1646             stri 'Fctn 0   ^/   TI Basic'
     6444 6374     
     6446 6E20     
     6448 3020     
     644A 2020     
     644C 5E2F     
     644E 2020     
     6450 2054     
     6452 4920     
     6454 4261     
     6456 7369     
     6458 63       
0227                       even
0228 645A 1243             stri 'Ctrl h   ^h   Help'
     645C 7472     
     645E 6C20     
     6460 6820     
     6462 2020     
     6464 5E68     
     6466 2020     
     6468 2048     
     646A 656C     
     646C 70       
0229                       even
0230 646E 1A43             stri 'Ctrl r   ^r   Toggle ruler'
     6470 7472     
     6472 6C20     
     6474 7220     
     6476 2020     
     6478 5E72     
     647A 2020     
     647C 2054     
     647E 6F67     
     6480 676C     
     6482 6520     
     6484 7275     
     6486 6C65     
     6488 72       
0231                       even
0232 648A 2143             stri 'Ctrl z   ^z   Cycle color schemes'
     648C 7472     
     648E 6C20     
     6490 7A20     
     6492 2020     
     6494 5E7A     
     6496 2020     
     6498 2043     
     649A 7963     
     649C 6C65     
     649E 2063     
     64A0 6F6C     
     64A2 6F72     
     64A4 2073     
     64A6 6368     
     64A8 656D     
     64AA 6573     
0233                       even
0234               
0235               dialog.help.data.page2.left:
0236 64AC 0120             stri ' '
0237                       even
0238 64AE 23               byte    35
0239 64AF   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     64B0 0101     
     64B2 0101     
     64B4 0101     
     64B6 0101     
     64B8 0101     
     64BA 0101     
0240 64BC 204D             text    ' Modifiers '
     64BE 6F64     
     64C0 6966     
     64C2 6965     
     64C4 7273     
     64C6 20       
0241 64C7   01             byte    1,1,1,1,1,1,1,1,1,1,1
     64C8 0101     
     64CA 0101     
     64CC 0101     
     64CE 0101     
     64D0 0101     
0242                       even
0243 64D2 1E46             stri 'Fctn 1        Delete character'
     64D4 6374     
     64D6 6E20     
     64D8 3120     
     64DA 2020     
     64DC 2020     
     64DE 2020     
     64E0 2044     
     64E2 656C     
     64E4 6574     
     64E6 6520     
     64E8 6368     
     64EA 6172     
     64EC 6163     
     64EE 7465     
     64F0 72       
0244                       even
0245 64F2 1E46             stri 'Fctn 2        Insert character'
     64F4 6374     
     64F6 6E20     
     64F8 3220     
     64FA 2020     
     64FC 2020     
     64FE 2020     
     6500 2049     
     6502 6E73     
     6504 6572     
     6506 7420     
     6508 6368     
     650A 6172     
     650C 6163     
     650E 7465     
     6510 72       
0246                       even
0247 6512 1946             stri 'Fctn 3        Delete line'
     6514 6374     
     6516 6E20     
     6518 3320     
     651A 2020     
     651C 2020     
     651E 2020     
     6520 2044     
     6522 656C     
     6524 6574     
     6526 6520     
     6528 6C69     
     652A 6E65     
0248                       even
0249 652C 2043             stri 'Ctrl l   ^l   Delete end of line'
     652E 7472     
     6530 6C20     
     6532 6C20     
     6534 2020     
     6536 5E6C     
     6538 2020     
     653A 2044     
     653C 656C     
     653E 6574     
     6540 6520     
     6542 656E     
     6544 6420     
     6546 6F66     
     6548 206C     
     654A 696E     
     654C 65       
0250                       even
0251 654E 1946             stri 'Fctn 8        Insert line'
     6550 6374     
     6552 6E20     
     6554 3820     
     6556 2020     
     6558 2020     
     655A 2020     
     655C 2049     
     655E 6E73     
     6560 6572     
     6562 7420     
     6564 6C69     
     6566 6E65     
0252                       even
0253 6568 1E46             stri 'Fctn .        Insert/Overwrite'
     656A 6374     
     656C 6E20     
     656E 2E20     
     6570 2020     
     6572 2020     
     6574 2020     
     6576 2049     
     6578 6E73     
     657A 6572     
     657C 742F     
     657E 4F76     
     6580 6572     
     6582 7772     
     6584 6974     
     6586 65       
0254                       even
0255               
0256               dialog.help.data.page2.right:
0257 6588 2620             stri '                                 (2/2)'
     658A 2020     
     658C 2020     
     658E 2020     
     6590 2020     
     6592 2020     
     6594 2020     
     6596 2020     
     6598 2020     
     659A 2020     
     659C 2020     
     659E 2020     
     65A0 2020     
     65A2 2020     
     65A4 2020     
     65A6 2020     
     65A8 2020     
     65AA 2832     
     65AC 2F32     
     65AE 29       
0258                       even
0259 65B0 0120             stri ' '
0260                       even
0261 65B2 24               byte    36
0262 65B3   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     65B4 0101     
     65B6 0101     
     65B8 0101     
     65BA 0101     
     65BC 0101     
     65BE 0101     
0263 65C0 2042             text    ' Block Mode '
     65C2 6C6F     
     65C4 636B     
     65C6 204D     
     65C8 6F64     
     65CA 6520     
0264 65CC 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     65CE 0101     
     65D0 0101     
     65D2 0101     
     65D4 0101     
     65D6 01       
0265                       even
0266 65D8 1E43             stri 'Ctrl SPACE    Set M1/M2 marker'
     65DA 7472     
     65DC 6C20     
     65DE 5350     
     65E0 4143     
     65E2 4520     
     65E4 2020     
     65E6 2053     
     65E8 6574     
     65EA 204D     
     65EC 312F     
     65EE 4D32     
     65F0 206D     
     65F2 6172     
     65F4 6B65     
     65F6 72       
0267                       even
0268 65F8 1A43             stri 'Ctrl d   ^d   Delete block'
     65FA 7472     
     65FC 6C20     
     65FE 6420     
     6600 2020     
     6602 5E64     
     6604 2020     
     6606 2044     
     6608 656C     
     660A 6574     
     660C 6520     
     660E 626C     
     6610 6F63     
     6612 6B       
0269                       even
0270 6614 1843             stri 'Ctrl c   ^c   Copy block'
     6616 7472     
     6618 6C20     
     661A 6320     
     661C 2020     
     661E 5E63     
     6620 2020     
     6622 2043     
     6624 6F70     
     6626 7920     
     6628 626C     
     662A 6F63     
     662C 6B       
0271                       even
0272 662E 1C43             stri 'Ctrl g   ^g   Goto marker M1'
     6630 7472     
     6632 6C20     
     6634 6720     
     6636 2020     
     6638 5E67     
     663A 2020     
     663C 2047     
     663E 6F74     
     6640 6F20     
     6642 6D61     
     6644 726B     
     6646 6572     
     6648 204D     
     664A 31       
0273                       even
0274 664C 1843             stri 'Ctrl m   ^m   Move block'
     664E 7472     
     6650 6C20     
     6652 6D20     
     6654 2020     
     6656 5E6D     
     6658 2020     
     665A 204D     
     665C 6F76     
     665E 6520     
     6660 626C     
     6662 6F63     
     6664 6B       
0275                       even
0276 6666 2043             stri 'Ctrl s   ^s   Save block to file'
     6668 7472     
     666A 6C20     
     666C 7320     
     666E 2020     
     6670 5E73     
     6672 2020     
     6674 2053     
     6676 6176     
     6678 6520     
     667A 626C     
     667C 6F63     
     667E 6B20     
     6680 746F     
     6682 2066     
     6684 696C     
     6686 65       
0277                       even
0278 6688 2343             stri 'Ctrl ^1..^3   Copy to clipboard 1-3'
     668A 7472     
     668C 6C20     
     668E 5E31     
     6690 2E2E     
     6692 5E33     
     6694 2020     
     6696 2043     
     6698 6F70     
     669A 7920     
     669C 746F     
     669E 2063     
     66A0 6C69     
     66A2 7062     
     66A4 6F61     
     66A6 7264     
     66A8 2031     
     66AA 2D33     
0279                       even
                   < stevie_b3.asm
0066                       copy  "dialog.file.asm"      ; Dialog "File"
     **** ****     > dialog.file.asm
0001               * FILE......: dialog.file.asm
0002               * Purpose...: Dialog "File"
0003               
0004               ***************************************************************
0005               * dialog.file
0006               * Open Dialog "File"
0007               ***************************************************************
0008               * b @dialog.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.file:
0022 66AC 0649  14         dect  stack
0023 66AE C64B  30         mov   r11,*stack            ; Save return address
0024 66B0 0649  14         dect  stack
0025 66B2 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 66B4 0204  20         li    tmp0,id.dialog.file
     66B6 0069     
0030 66B8 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     66BA A71A     
0031               
0032 66BC 0204  20         li    tmp0,txt.head.file
     66BE 7668     
0033 66C0 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     66C2 A71E     
0034               
0035 66C4 0204  20         li    tmp0,txt.info.file
     66C6 7672     
0036 66C8 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     66CA A720     
0037               
0038 66CC 0204  20         li    tmp0,pos.info.file
     66CE 768C     
0039 66D0 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     66D2 A724     
0040               
0041 66D4 0204  20         li    tmp0,txt.hint.file
     66D6 7691     
0042 66D8 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     66DA A722     
0043               
0044 66DC 0204  20         li    tmp0,txt.keys.file
     66DE 7693     
0045 66E0 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     66E2 A726     
0046               
0047 66E4 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     66E6 7108     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.file.exit:
0052 66E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 66EA C2F9  30         mov   *stack+,r11           ; Pop R11
0054 66EC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0067                       copy  "dialog.cartridge.asm" ; Dialog "Cartridge"
     **** ****     > dialog.cartridge.asm
0001               * basic......: dialog.cartridge.asm
0002               * Purpose....: Dialog "Cartridge"
0003               
0004               ***************************************************************
0005               * dialog.cartridge
0006               * Open Dialog "Cartridge"
0007               ***************************************************************
0008               * b @dialog.cartridge
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cartridge:
0022 66EE 0649  14         dect  stack
0023 66F0 C64B  30         mov   r11,*stack            ; Save return address
0024 66F2 0649  14         dect  stack
0025 66F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 66F6 0204  20         li    tmp0,id.dialog.cartridge
     66F8 006A     
0030 66FA C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     66FC A71A     
0031               
0032 66FE 0204  20         li    tmp0,txt.head.cartridge
     6700 769B     
0033 6702 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6704 A71E     
0034               
0035 6706 0204  20         li    tmp0,txt.info.cartridge
     6708 76AA     
0036 670A C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     670C A720     
0037               
0038 670E 0204  20         li    tmp0,pos.info.cartridge
     6710 76B3     
0039 6712 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6714 A724     
0040               
0041 6716 0204  20         li    tmp0,txt.hint.cartridge
     6718 76B5     
0042 671A C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     671C A722     
0043               
0044 671E 0204  20         li    tmp0,txt.keys.cartridge
     6720 76CE     
0045 6722 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6724 A726     
0046               
0047 6726 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6728 7108     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.cartridge.exit:
0052 672A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 672C C2F9  30         mov   *stack+,r11           ; Pop R11
0054 672E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0068                       copy  "dialog.load.asm"      ; Dialog "Load file"
     **** ****     > dialog.load.asm
0001               * FILE......: dialog.load.asm
0002               * Purpose...: Dialog "Load DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.load
0006               * Open Dialog for loading DV 80 file
0007               ***************************************************************
0008               * b @dialog.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.load:
0022 6730 0649  14         dect  stack
0023 6732 C64B  30         mov   r11,*stack            ; Save return address
0024 6734 0649  14         dect  stack
0025 6736 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6738 0649  14         dect  stack
0027 673A C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Show dialog "Unsaved changes" if editor buffer dirty
0030                       ;-------------------------------------------------------
0031 673C C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     673E A506     
0032 6740 1303  14         jeq   dialog.load.setup     ; No, skip "Unsaved changes"
0033               
0034 6742 06A0  32         bl    @dialog.unsaved       ; Show dialog
     6744 6AB2     
0035 6746 1029  14         jmp   dialog.load.exit      ; Exit early
0036                       ;-------------------------------------------------------
0037                       ; Setup dialog
0038                       ;-------------------------------------------------------
0039               dialog.load.setup:
0040 6748 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     674A 713E     
0041               
0042 674C 0204  20         li    tmp0,id.dialog.load
     674E 000A     
0043 6750 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6752 A71A     
0044               
0045 6754 0204  20         li    tmp0,txt.head.load
     6756 721D     
0046 6758 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     675A A71E     
0047               
0048 675C 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     675E A720     
0049 6760 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6762 A724     
0050               
0051 6764 0204  20         li    tmp0,txt.hint.load
     6766 722C     
0052 6768 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     676A A722     
0053               
0054 676C 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     676E A44E     
0055 6770 1303  14         jeq   !
0056                       ;-------------------------------------------------------
0057                       ; Show that FastMode is on
0058                       ;-------------------------------------------------------
0059 6772 0204  20         li    tmp0,txt.keys.load2   ; Highlight FastMode
     6774 71FD     
0060 6776 1002  14         jmp   dialog.load.keylist
0061                       ;-------------------------------------------------------
0062                       ; Show that FastMode is off
0063                       ;-------------------------------------------------------
0064 6778 0204  20 !       li    tmp0,txt.keys.load
     677A 71DE     
0065                       ;-------------------------------------------------------
0066                       ; Show dialog
0067                       ;-------------------------------------------------------
0068               dialog.load.keylist:
0069 677C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     677E A726     
0070                       ;-------------------------------------------------------
0071                       ; Set command line
0072                       ;-------------------------------------------------------
0073 6780 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     6782 A7AE     
0074 6784 C154  26         mov   *tmp0,tmp1            ; Anything set?
0075 6786 1304  14         jeq   dialog.load.cursor    ; No default filename, skip
0076               
0077 6788 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     678A A006     
0078 678C 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     678E 6E7C     
0079                                                   ; \ i  @parm1 = Pointer to string w. preset
0080                                                   ; /
0081                       ;-------------------------------------------------------
0082                       ; Set cursor shape
0083                       ;-------------------------------------------------------
0084               dialog.load.cursor:
0085 6790 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6792 70F6     
0086 6794 C820  54         mov   @tv.curshape,@ramsat+2
     6796 A214     
     6798 A058     
0087                                                   ; Get cursor shape and color
0088                       ;-------------------------------------------------------
0089                       ; Exit
0090                       ;-------------------------------------------------------
0091               dialog.load.exit:
0092 679A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0093 679C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0094 679E C2F9  30         mov   *stack+,r11           ; Pop R11
0095 67A0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0069                       copy  "dialog.save.asm"      ; Dialog "Save file"
     **** ****     > dialog.save.asm
0001               * FILE......: dialog.save.asm
0002               * Purpose...: Dialog "Save DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.save
0006               * Open Dialog for saving file
0007               ***************************************************************
0008               * b @dialog.save
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.save:
0022 67A2 0649  14         dect  stack
0023 67A4 C64B  30         mov   r11,*stack            ; Save return address
0024 67A6 0649  14         dect  stack
0025 67A8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 67AA 8820  50         c     @fb.row.dirty,@w$ffff
     67AC A30A     
     67AE 2022     
0030 67B0 1604  14         jne   !                     ; Skip crunching if clean
0031 67B2 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     67B4 70AE     
0032 67B6 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     67B8 A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 67BA 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     67BC A50E     
     67BE 2022     
0037 67C0 130B  14         jeq   dialog.save.default   ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 67C2 06A0  32         bl    @cmdb.cmd.clear       ; Clear current CMDB command
     67C4 6E34     
0042               
0043 67C6 0204  20         li    tmp0,id.dialog.saveblock
     67C8 000C     
0044 67CA C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     67CC A71A     
0045 67CE 0204  20         li    tmp0,txt.head.save2   ; Title "Save block to file"
     67D0 725A     
0046 67D2 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     67D4 A71E     
0047 67D6 100E  14         jmp   dialog.save.header
0048                       ;-------------------------------------------------------
0049                       ; Default dialog
0050                       ;-------------------------------------------------------
0051               dialog.save.default:
0052 67D8 0204  20         li    tmp0,id.dialog.save
     67DA 000B     
0053 67DC C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     67DE A71A     
0054 67E0 0204  20         li    tmp0,txt.head.save    ; Title "Save file"
     67E2 724B     
0055 67E4 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     67E6 A71E     
0056                       ;-------------------------------------------------------
0057                       ; Set command line
0058                       ;-------------------------------------------------------
0059 67E8 0204  20         li    tmp0,edb.filename     ; Set filename
     67EA A51A     
0060 67EC C804  38         mov   tmp0,@parm1           ; Get pointer to string
     67EE A006     
0061               
0062 67F0 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     67F2 6E7C     
0063                                                   ; \ i  @parm1 = Pointer to string w. preset
0064                                                   ; /
0065                       ;-------------------------------------------------------
0066                       ; Setup header
0067                       ;-------------------------------------------------------
0068               dialog.save.header:
0069 67F4 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     67F6 A720     
0070 67F8 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     67FA A724     
0071               
0072 67FC 0204  20         li    tmp0,txt.hint.save
     67FE 7272     
0073 6800 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6802 A722     
0074               
0075 6804 0204  20         li    tmp0,txt.keys.save
     6806 7291     
0076 6808 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     680A A726     
0077               
0078 680C 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     680E A44E     
0079                       ;-------------------------------------------------------
0080                       ; Set cursor shape
0081                       ;-------------------------------------------------------
0082 6810 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6812 70F6     
0083                       ;-------------------------------------------------------
0084                       ; Exit
0085                       ;-------------------------------------------------------
0086               dialog.save.exit:
0087 6814 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6816 C2F9  30         mov   *stack+,r11           ; Pop R11
0089 6818 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0070                       copy  "dialog.print.asm"     ; Dialog "Print file"
     **** ****     > dialog.print.asm
0001               * FILE......: dialog.print.asm
0002               * Purpose...: Dialog "Print file"
0003               
0004               ***************************************************************
0005               * dialog.print
0006               * Open Dialog for printing file
0007               ***************************************************************
0008               * b @dialog.print
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.print:
0022 681A 0649  14         dect  stack
0023 681C C64B  30         mov   r11,*stack            ; Save return address
0024 681E 0649  14         dect  stack
0025 6820 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 6822 8820  50         c     @fb.row.dirty,@w$ffff
     6824 A30A     
     6826 2022     
0030 6828 1604  14         jne   !                     ; Skip crunching if clean
0031 682A 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     682C 70AE     
0032 682E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6830 A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 6832 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6834 A50E     
     6836 2022     
0037 6838 1307  14         jeq   dialog.print.default  ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 683A 0204  20         li    tmp0,id.dialog.printblock
     683C 0010     
0042 683E C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6840 A71A     
0043 6842 0204  20         li    tmp0,txt.head.print2  ; Title "Print block to file"
     6844 747D     
0044               
0045 6846 1006  14         jmp   dialog.print.header
0046                       ;-------------------------------------------------------
0047                       ; Default dialog
0048                       ;-------------------------------------------------------
0049               dialog.print.default:
0050 6848 0204  20         li    tmp0,id.dialog.print
     684A 000F     
0051 684C C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     684E A71A     
0052 6850 0204  20         li    tmp0,txt.head.print   ; Title "Print file"
     6852 746D     
0053                       ;-------------------------------------------------------
0054                       ; Setup header
0055                       ;-------------------------------------------------------
0056               dialog.print.header:
0057 6854 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6856 A71E     
0058               
0059 6858 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     685A A720     
0060 685C 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     685E A724     
0061               
0062 6860 0204  20         li    tmp0,txt.hint.print
     6862 748E     
0063 6864 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6866 A722     
0064               
0065 6868 0204  20         li    tmp0,txt.keys.save
     686A 7291     
0066 686C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     686E A726     
0067               
0068 6870 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     6872 A44E     
0069                       ;-------------------------------------------------------
0070                       ; Set command line
0071                       ;-------------------------------------------------------
0072 6874 0204  20         li    tmp0,tv.printer.fname ; Set printer name
     6876 DE00     
0073 6878 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     687A A006     
0074               
0075 687C 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     687E 6E7C     
0076                                                   ; \ i  @parm1 = Pointer to string w. preset
0077                                                   ; /
0078                       ;-------------------------------------------------------
0079                       ; Set cursor shape
0080                       ;-------------------------------------------------------
0081 6880 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6882 70F6     
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               dialog.print.exit:
0086 6884 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 6886 C2F9  30         mov   *stack+,r11           ; Pop R11
0088 6888 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0071                       copy  "dialog.append.asm"    ; Dialog "Append file"
     **** ****     > dialog.append.asm
0001               * FILE......: dialog.append.asm
0002               * Purpose...: Dialog "Append DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.append
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * b @dialog.append
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.append:
0022 688A 0649  14         dect  stack
0023 688C C64B  30         mov   r11,*stack            ; Save return address
0024 688E 0649  14         dect  stack
0025 6890 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6892 0649  14         dect  stack
0027 6894 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.append.setup:
0032 6896 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     6898 713E     
0033               
0034 689A 0204  20         li    tmp0,id.dialog.append
     689C 000E     
0035 689E C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     68A0 A71A     
0036               
0037 68A2 0204  20         li    tmp0,txt.head.append
     68A4 72A3     
0038 68A6 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     68A8 A71E     
0039               
0040 68AA 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     68AC A720     
0041 68AE 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     68B0 A724     
0042               
0043 68B2 0204  20         li    tmp0,txt.hint.append
     68B4 72B4     
0044 68B6 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     68B8 A722     
0045               
0046 68BA 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     68BC A44E     
0047 68BE 1303  14         jeq   !
0048                       ;-------------------------------------------------------
0049                       ; Show that FastMode is on
0050                       ;-------------------------------------------------------
0051 68C0 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     68C2 71DE     
0052 68C4 1002  14         jmp   dialog.append.keylist
0053                       ;-------------------------------------------------------
0054                       ; Show that FastMode is off
0055                       ;-------------------------------------------------------
0056 68C6 0204  20 !       li    tmp0,txt.keys.insert
     68C8 71DE     
0057                       ;-------------------------------------------------------
0058                       ; Show dialog
0059                       ;-------------------------------------------------------
0060               dialog.append.keylist:
0061 68CA C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     68CC A726     
0062                       ;-------------------------------------------------------
0063                       ; Set command line
0064                       ;-------------------------------------------------------
0065 68CE 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     68D0 A7AE     
0066 68D2 C154  26         mov   *tmp0,tmp1            ; Anything set?
0067 68D4 1304  14         jeq   dialog.append.cursor  ; No default filename, skip
0068               
0069 68D6 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     68D8 A006     
0070 68DA 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     68DC 6E7C     
0071                                                   ; \ i  @parm1 = Pointer to string w. preset
0072                                                   ; /
0073                       ;-------------------------------------------------------
0074                       ; Set cursor shape
0075                       ;-------------------------------------------------------
0076               dialog.append.cursor:
0077 68DE 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     68E0 70F6     
0078 68E2 C820  54         mov   @tv.curshape,@ramsat+2
     68E4 A214     
     68E6 A058     
0079                                                   ; Get cursor shape and color
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083               dialog.append.exit:
0084 68E8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0085 68EA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 68EC C2F9  30         mov   *stack+,r11           ; Pop R11
0087 68EE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0072                       copy  "dialog.insert.asm"    ; Dialog "Insert file at line"
     **** ****     > dialog.insert.asm
0001               * FILE......: dialog.insert.asm
0002               * Purpose...: Dialog "Insert DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.insert
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * b @dialog.insert
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.insert:
0022 68F0 0649  14         dect  stack
0023 68F2 C64B  30         mov   r11,*stack            ; Save return address
0024 68F4 0649  14         dect  stack
0025 68F6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 68F8 0649  14         dect  stack
0027 68FA C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.insert.setup:
0032 68FC 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     68FE 713E     
0033               
0034 6900 0204  20         li    tmp0,id.dialog.insert
     6902 000D     
0035 6904 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6906 A71A     
0036                       ;------------------------------------------------------
0037                       ; Include line number in pane header
0038                       ;------------------------------------------------------
0039 6908 06A0  32         bl    @film
     690A 2244     
0040 690C A77C                   data cmdb.panhead.buf,>00,50
     690E 0000     
     6910 0032     
0041                                                   ; Clear pane header buffer
0042               
0043 6912 06A0  32         bl    @cpym2m
     6914 24E8     
0044 6916 72F4                   data txt.head.insert,cmdb.panhead.buf,25
     6918 A77C     
     691A 0019     
0045               
0046 691C C820  54         mov   @fb.row,@parm1        ; Get row at cursor
     691E A306     
     6920 A006     
0047 6922 06A0  32         bl    @fb.row2line          ; Row to editor line
     6924 3074     
0048                                                   ; \ i @fb.topline = Top line in frame buffer
0049                                                   ; | i @parm1      = Row in frame buffer
0050                                                   ; / o @outparm1   = Matching line in EB
0051               
0052 6926 05E0  34         inct  @outparm1             ; \ Add base 1 and insert at line
     6928 A016     
0053                                                   ; / following cursor, not line at cursor.
0054               
0055 692A 06A0  32         bl    @mknum                ; Convert integer to string
     692C 29B4     
0056 692E A016                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0057 6930 A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0058 6932 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0059 6933   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0060               
0061 6934 06A0  32         bl    @cpym2m
     6936 24E8     
0062 6938 A100                   data rambuf,cmdb.panhead.buf + 24,5
     693A A794     
     693C 0005     
0063                                                   ; Add line number to buffer
0064               
0065 693E 0204  20         li    tmp0,29
     6940 001D     
0066 6942 0A84  32         sla   tmp0,8
0067 6944 D804  38         movb  tmp0,@cmdb.panhead.buf ; Set length byte
     6946 A77C     
0068               
0069 6948 0204  20         li    tmp0,cmdb.panhead.buf
     694A A77C     
0070 694C C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     694E A71E     
0071                       ;------------------------------------------------------
0072                       ; Other panel strings
0073                       ;------------------------------------------------------
0074 6950 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6952 A720     
0075 6954 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6956 A724     
0076               
0077 6958 0204  20         li    tmp0,txt.hint.insert
     695A 730D     
0078 695C C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     695E A722     
0079               
0080 6960 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     6962 A44E     
0081 6964 1303  14         jeq   !
0082                       ;-------------------------------------------------------
0083                       ; Show that FastMode is on
0084                       ;-------------------------------------------------------
0085 6966 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     6968 71DE     
0086 696A 1002  14         jmp   dialog.insert.keylist
0087                       ;-------------------------------------------------------
0088                       ; Show that FastMode is off
0089                       ;-------------------------------------------------------
0090 696C 0204  20 !       li    tmp0,txt.keys.insert
     696E 71DE     
0091                       ;-------------------------------------------------------
0092                       ; Show dialog
0093                       ;-------------------------------------------------------
0094               dialog.insert.keylist:
0095 6970 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6972 A726     
0096                       ;-------------------------------------------------------
0097                       ; Set command line
0098                       ;-------------------------------------------------------
0099 6974 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     6976 A7AE     
0100 6978 C154  26         mov   *tmp0,tmp1            ; Anything set?
0101 697A 1304  14         jeq   dialog.insert.cursor  ; No default filename, skip
0102               
0103 697C C804  38         mov   tmp0,@parm1           ; Get pointer to string
     697E A006     
0104 6980 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6982 6E7C     
0105                                                   ; \ i  @parm1 = Pointer to string w. preset
0106                                                   ; /
0107                       ;-------------------------------------------------------
0108                       ; Set cursor shape
0109                       ;-------------------------------------------------------
0110               dialog.insert.cursor:
0111 6984 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6986 70F6     
0112 6988 C820  54         mov   @tv.curshape,@ramsat+2
     698A A214     
     698C A058     
0113                                                   ; Get cursor shape and color
0114                       ;-------------------------------------------------------
0115                       ; Exit
0116                       ;-------------------------------------------------------
0117               dialog.insert.exit:
0118 698E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0119 6990 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0120 6992 C2F9  30         mov   *stack+,r11           ; Pop R11
0121 6994 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0073                       copy  "dialog.config.asm"    ; Dialog "Configure"
     **** ****     > dialog.config.asm
0001               * FILE......: dialog.config.asm
0002               * Purpose...: Dialog "Configure"
0003               
0004               ***************************************************************
0005               * dialog.config
0006               * Open Dialog "Configure"
0007               ***************************************************************
0008               * b @dialog.config
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.config:
0022 6996 0649  14         dect  stack
0023 6998 C64B  30         mov   r11,*stack            ; Save return address
0024 699A 0649  14         dect  stack
0025 699C C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 699E 0204  20         li    tmp0,id.dialog.config
     69A0 006C     
0030 69A2 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     69A4 A71A     
0031               
0032 69A6 0204  20         li    tmp0,txt.head.config
     69A8 7773     
0033 69AA C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     69AC A71E     
0034               
0035 69AE 0204  20         li    tmp0,txt.info.config
     69B0 7782     
0036 69B2 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     69B4 A720     
0037               
0038 69B6 0204  20         li    tmp0,pos.info.config
     69B8 7795     
0039 69BA C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     69BC A724     
0040               
0041 69BE 0204  20         li    tmp0,txt.hint.config
     69C0 7798     
0042 69C2 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     69C4 A722     
0043               
0044 69C6 0204  20         li    tmp0,txt.keys.config
     69C8 779A     
0045 69CA C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     69CC A726     
0046               
0047 69CE 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     69D0 7108     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.config.exit:
0052 69D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 69D4 C2F9  30         mov   *stack+,r11           ; Pop R11
0054 69D6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0074                       copy  "dialog.clipdev.asm"   ; Dialog "Configure clipboard device"
     **** ****     > dialog.clipdev.asm
0001               * FILE......: dialog.clipdev.asm
0002               * Purpose...: Dialog "Configure clipboard device"
0003               
0004               ***************************************************************
0005               * dialog.clipdev
0006               * Open Dialog "Configure clipboard device"
0007               ***************************************************************
0008               * b @dialog.clipdevice
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.clipdev:
0022 69D8 0649  14         dect  stack
0023 69DA C64B  30         mov   r11,*stack            ; Save return address
0024 69DC 0649  14         dect  stack
0025 69DE C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 69E0 0204  20         li    tmp0,id.dialog.clipdev
     69E2 0011     
0030 69E4 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     69E6 A71A     
0031               
0032 69E8 0204  20         li    tmp0,txt.head.clipdev
     69EA 732E     
0033 69EC C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     69EE A71E     
0034               
0035 69F0 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     69F2 A720     
0036 69F4 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     69F6 A724     
0037               
0038 69F8 0204  20         li    tmp0,txt.hint.clipdev
     69FA 7347     
0039 69FC C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     69FE A722     
0040               
0041 6A00 0204  20         li    tmp0,txt.keys.clipdev
     6A02 7375     
0042 6A04 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6A06 A726     
0043                       ;-------------------------------------------------------
0044                       ; Set command line
0045                       ;-------------------------------------------------------
0046 6A08 0204  20         li    tmp0,tv.clip.fname    ; Set clipboard
     6A0A DE50     
0047 6A0C C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6A0E A006     
0048               
0049 6A10 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6A12 6E7C     
0050                                                   ; \ i  @parm1 = Pointer to string w. preset
0051                                                   ; /
0052                       ;-------------------------------------------------------
0053                       ; Set cursor shape
0054                       ;-------------------------------------------------------
0055 6A14 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6A16 70F6     
0056 6A18 C820  54         mov   @tv.curshape,@ramsat+2
     6A1A A214     
     6A1C A058     
0057                                                   ; Get cursor shape and color
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               dialog.clipdevice.exit:
0062 6A1E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0063 6A20 C2F9  30         mov   *stack+,r11           ; Pop R11
0064 6A22 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0075                       copy  "dialog.clipboard.asm" ; Dialog "Copy from clipboard"
     **** ****     > dialog.clipboard.asm
0001               * FILE......: dialog.clipboard.asm
0002               * Purpose...: Dialog "Insert snippet from clipboard"
0003               
0004               ***************************************************************
0005               * dialog.clipboard
0006               * Open Dialog for inserting snippet from clipboard
0007               ***************************************************************
0008               * b @dialog.clipboard
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.clipboard:
0022 6A24 0649  14         dect  stack
0023 6A26 C64B  30         mov   r11,*stack            ; Save return address
0024 6A28 0649  14         dect  stack
0025 6A2A C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029               dialog.clipboard.setup:
0030 6A2C 0204  20         li    tmp0,id.dialog.clipboard
     6A2E 0067     
0031 6A30 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6A32 A71A     
0032                       ;------------------------------------------------------
0033                       ; Include line number in pane header
0034                       ;------------------------------------------------------
0035 6A34 06A0  32         bl    @film
     6A36 2244     
0036 6A38 A77C                   data cmdb.panhead.buf,>00,50
     6A3A 0000     
     6A3C 0032     
0037                                                   ; Clear pane header buffer
0038               
0039 6A3E 06A0  32         bl    @cpym2m
     6A40 24E8     
0040 6A42 73B1                   data txt.head.clipboard,cmdb.panhead.buf,27
     6A44 A77C     
     6A46 001B     
0041               
0042 6A48 C820  54         mov   @fb.row,@parm1
     6A4A A306     
     6A4C A006     
0043 6A4E 06A0  32         bl    @fb.row2line          ; Row to editor line
     6A50 3074     
0044                                                   ; \ i @fb.topline = Top line in frame buffer
0045                                                   ; | i @parm1      = Row in frame buffer
0046                                                   ; / o @outparm1   = Matching line in EB
0047               
0048 6A52 05A0  34         inc   @outparm1             ; Add base 1
     6A54 A016     
0049               
0050 6A56 06A0  32         bl    @mknum                ; Convert integer to string
     6A58 29B4     
0051 6A5A A016                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0052 6A5C A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0053 6A5E 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0054 6A5F   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0055               
0056 6A60 06A0  32         bl    @cpym2m
     6A62 24E8     
0057 6A64 A100                   data rambuf,cmdb.panhead.buf + 27,5
     6A66 A797     
     6A68 0005     
0058                                                   ; Add line number to buffer
0059               
0060 6A6A 0204  20         li    tmp0,32
     6A6C 0020     
0061 6A6E 0A84  32         sla   tmp0,8
0062 6A70 D804  38         movb  tmp0,@cmdb.panhead.buf
     6A72 A77C     
0063                                                   ; Set length byte
0064               
0065 6A74 0204  20         li    tmp0,cmdb.panhead.buf
     6A76 A77C     
0066 6A78 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6A7A A71E     
0067                       ;------------------------------------------------------
0068                       ; Other panel strings
0069                       ;------------------------------------------------------
0070 6A7C 0204  20         li    tmp0,txt.hint.clipboard
     6A7E 73DE     
0071 6A80 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6A82 A722     
0072               
0073 6A84 0204  20         li    tmp0,txt.info.clipboard
     6A86 73CD     
0074 6A88 C804  38         mov   tmp0,@cmdb.paninfo    ; Show info message
     6A8A A720     
0075               
0076 6A8C 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6A8E A724     
0077               
0078 6A90 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6A92 6E34     
0079               
0080 6A94 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     6A96 A44E     
0081 6A98 1303  14         jeq   !
0082                       ;-------------------------------------------------------
0083                       ; Show that FastMode is on
0084                       ;-------------------------------------------------------
0085 6A9A 0204  20         li    tmp0,txt.keys.clipboard ; Highlight FastMode
     6A9C 7426     
0086 6A9E 1002  14         jmp   dialog.clipboard.keylist
0087                       ;-------------------------------------------------------
0088                       ; Show that FastMode is off
0089                       ;-------------------------------------------------------
0090 6AA0 0204  20 !       li    tmp0,txt.keys.clipboard
     6AA2 7426     
0091                       ;-------------------------------------------------------
0092                       ; Show dialog
0093                       ;-------------------------------------------------------
0094               dialog.clipboard.keylist:
0095 6AA4 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6AA6 A726     
0096               
0097 6AA8 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6AAA 7108     
0098                       ;-------------------------------------------------------
0099                       ; Exit
0100                       ;-------------------------------------------------------
0101               dialog.clipboard.exit:
0102 6AAC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0103 6AAE C2F9  30         mov   *stack+,r11           ; Pop R11
0104 6AB0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0076                       copy  "dialog.unsaved.asm"   ; Dialog "Unsaved changes"
     **** ****     > dialog.unsaved.asm
0001               * FILE......: dialog.unsaved.asm
0002               * Purpose...: Dialog "Unsaved changes"
0003               
0004               ***************************************************************
0005               * dialog.unsaved
0006               * Open Dialog "Unsaved changes"
0007               ***************************************************************
0008               * b @dialog.unsaved
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.unsaved:
0022 6AB2 0649  14         dect  stack
0023 6AB4 C64B  30         mov   r11,*stack            ; Save return address
0024 6AB6 0649  14         dect  stack
0025 6AB8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6ABA 0204  20         li    tmp0,id.dialog.unsaved
     6ABC 0065     
0030 6ABE C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6AC0 A71A     
0031               
0032 6AC2 0204  20         li    tmp0,txt.head.unsaved
     6AC4 74CC     
0033 6AC6 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6AC8 A71E     
0034               
0035 6ACA 0204  20         li    tmp0,txt.info.unsaved
     6ACC 74E1     
0036 6ACE C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6AD0 A720     
0037 6AD2 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6AD4 A724     
0038               
0039 6AD6 0204  20         li    tmp0,txt.hint.unsaved
     6AD8 7503     
0040 6ADA C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6ADC A722     
0041               
0042 6ADE 0204  20         li    tmp0,txt.keys.unsaved
     6AE0 753B     
0043 6AE2 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6AE4 A726     
0044               
0045 6AE6 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6AE8 7108     
0046                       ;-------------------------------------------------------
0047                       ; Exit
0048                       ;-------------------------------------------------------
0049               dialog.unsaved.exit:
0050 6AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6AEC C2F9  30         mov   *stack+,r11           ; Pop R11
0052 6AEE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0077                       copy  "dialog.basic.asm"     ; Dialog "Basic"
     **** ****     > dialog.basic.asm
0001               * basic......: dialog.basic.asm
0002               * Purpose...: Dialog "Basic"
0003               
0004               ***************************************************************
0005               * dialog.basic
0006               * Open Dialog "Basic"
0007               ***************************************************************
0008               * b @dialog.basic
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.basic:
0022 6AF0 0649  14         dect  stack
0023 6AF2 C64B  30         mov   r11,*stack            ; Save return address
0024 6AF4 0649  14         dect  stack
0025 6AF6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6AF8 0204  20         li    tmp0,id.dialog.basic
     6AFA 006B     
0030 6AFC C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6AFE A71A     
0031               
0032 6B00 0204  20         li    tmp0,txt.head.basic
     6B02 76D6     
0033 6B04 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6B06 A71E     
0034               
0035 6B08 0204  20         li    tmp0,pos.info.basic
     6B0A 7702     
0036 6B0C C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6B0E A724     
0037               
0038 6B10 0204  20         li    tmp0,txt.hint.basic
     6B12 7708     
0039 6B14 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6B16 A722     
0040               
0041 6B18 C120  34         mov   @tib.automode,tmp0    ; Get 'Automode' flag
     6B1A A0C0     
0042 6B1C 1303  14         jeq   !
0043                       ;-------------------------------------------------------
0044                       ; Flag is on
0045                       ;-------------------------------------------------------
0046 6B1E 0204  20         li    tmp0,txt.keys.basic2
     6B20 775D     
0047 6B22 1008  14         jmp   dialog.basic.done
0048                       ;-------------------------------------------------------
0049                       ; Flag is off
0050                       ;-------------------------------------------------------
0051 6B24 C120  34 !       mov   @tib.session,tmp0     ; Already did session before?
     6B26 A0B4     
0052 6B28 1303  14         jeq   dialog.basic.amonly   ; No, only AutoMode
0053 6B2A 0204  20         li    tmp0,txt.keys.basic1  ; Yes, add "Uncrunch program"
     6B2C 392E     
0054 6B2E 1002  14         jmp   dialog.basic.done
0055                       ;-------------------------------------------------------
0056                       ; AutoMode option only
0057                       ;-------------------------------------------------------
0058               dialog.basic.amonly:
0059 6B30 0204  20         li    tmp0,txt.keys.basic   ; Only AutoMode
     6B32 7748     
0060                       ;-------------------------------------------------------
0061                       ; Show dialog
0062                       ;-------------------------------------------------------
0063               dialog.basic.done:
0064 6B34 C804  38         mov   tmp0,@cmdb.pankeys    ; Save Keylist in status line
     6B36 A726     
0065 6B38 06A0  32         bl    @tibasic.buildstr     ; Build session selection string
     6B3A 6FDC     
0066 6B3C 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6B3E 7108     
0067                       ;-------------------------------------------------------
0068                       ; Exit
0069                       ;-------------------------------------------------------
0070               dialog.basic.exit:
0071 6B40 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 6B42 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 6B44 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Command buffer handling
0080                       ;-----------------------------------------------------------------------
0081                       copy  "pane.utils.hint.asm" ; Show hint in pane
     **** ****     > pane.utils.hint.asm
0001               * FILE......: pane.utils.asm
0002               * Purpose...: Show hint message in pane
0003               
0004               ***************************************************************
0005               * pane.show_hintx
0006               * Show hint message
0007               ***************************************************************
0008               * bl  @pane.show_hintx
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Cursor YX position
0012               * @parm2 = Pointer to Length-prefixed string
0013               *--------------------------------------------------------------
0014               * OUTPUT test
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               pane.show_hintx:
0021 6B46 0649  14         dect  stack
0022 6B48 C64B  30         mov   r11,*stack            ; Save return address
0023 6B4A 0649  14         dect  stack
0024 6B4C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6B4E 0649  14         dect  stack
0026 6B50 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6B52 0649  14         dect  stack
0028 6B54 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6B56 0649  14         dect  stack
0030 6B58 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Display string
0033                       ;-------------------------------------------------------
0034 6B5A C820  46         mov   @parm1,@wyx           ; Set cursor
     6B5C A006     
     6B5E 832A     
0035 6B60 C160  34         mov   @parm2,tmp1           ; Get string to display
     6B62 A008     
0036 6B64 06A0  32         bl    @xutst0               ; Display string
     6B66 242E     
0037                       ;-------------------------------------------------------
0038                       ; Get number of bytes to fill ...
0039                       ;-------------------------------------------------------
0040 6B68 C120  34         mov   @parm2,tmp0
     6B6A A008     
0041 6B6C D114  26         movb  *tmp0,tmp0            ; Get length byte of hint
0042 6B6E 0984  32         srl   tmp0,8                ; Right justify
0043 6B70 C184  18         mov   tmp0,tmp2
0044 6B72 C1C4  18         mov   tmp0,tmp3             ; Work copy
0045 6B74 0506  14         neg   tmp2
0046 6B76 0226  22         ai    tmp2,80               ; Number of bytes to fill
     6B78 0050     
0047                       ;-------------------------------------------------------
0048                       ; ... and clear until end of line
0049                       ;-------------------------------------------------------
0050 6B7A C120  34         mov   @parm1,tmp0           ; \ Restore YX position
     6B7C A006     
0051 6B7E A107  18         a     tmp3,tmp0             ; | Adjust X position to end of string
0052 6B80 C804  30         mov   tmp0,@wyx             ; / Set cursor
     6B82 832A     
0053               
0054 6B84 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6B86 2408     
0055                                                   ; \ i  @wyx = Cursor position
0056                                                   ; / o  tmp0 = VDP target address
0057               
0058 6B88 0205  20         li    tmp1,32               ; Byte to fill
     6B8A 0020     
0059               
0060 6B8C 06A0  32         bl    @xfilv                ; Clear line
     6B8E 22A2     
0061                                                   ; i \  tmp0 = start address
0062                                                   ; i |  tmp1 = byte to fill
0063                                                   ; i /  tmp2 = number of bytes to fill
0064                       ;-------------------------------------------------------
0065                       ; Exit
0066                       ;-------------------------------------------------------
0067               pane.show_hintx.exit:
0068 6B90 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0069 6B92 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0070 6B94 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 6B96 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 6B98 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 6B9A 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * pane.show_hint
0079               * Show hint message (data parameter version)
0080               ***************************************************************
0081               * bl  @pane.show_hint
0082               *     data p1,p2
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * p1 = Cursor YX position
0086               * p2 = Pointer to Length-prefixed string
0087               *--------------------------------------------------------------
0088               * OUTPUT
0089               * none
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * none
0093               ********|*****|*********************|**************************
0094               pane.show_hint:
0095 6B9C C83B  50         mov   *r11+,@parm1          ; Get parameter 1
     6B9E A006     
0096 6BA0 C83B  50         mov   *r11+,@parm2          ; Get parameter 2
     6BA2 A008     
0097 6BA4 0649  14         dect  stack
0098 6BA6 C64B  30         mov   r11,*stack            ; Save return address
0099                       ;-------------------------------------------------------
0100                       ; Display pane hint
0101                       ;-------------------------------------------------------
0102 6BA8 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6BAA 6B46     
0103                       ;-------------------------------------------------------
0104                       ; Exit
0105                       ;-------------------------------------------------------
0106               pane.show_hint.exit:
0107 6BAC C2F9  30         mov   *stack+,r11           ; Pop R11
0108 6BAE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0082                       copy  "pane.cmdb.show.asm"  ; Show command buffer pane
     **** ****     > pane.cmdb.show.asm
0001               * FILE......: pane.cmdb.show.asm
0002               * Purpose...: Show command buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.show
0006               * Show command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.show
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               pane.cmdb.show:
0022 6BB0 0649  14         dect  stack
0023 6BB2 C64B  30         mov   r11,*stack            ; Save return address
0024 6BB4 0649  14         dect  stack
0025 6BB6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6BB8 0649  14         dect  stack
0027 6BBA C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6BBC 0649  14         dect  stack
0029 6BBE C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Hide character cursor
0032                       ;------------------------------------------------------
0033 6BC0 C820  50         mov   @wyx,@cmdb.fb.yxsave  ; Save YX position in frame buffer
     6BC2 832A     
     6BC4 A704     
0034               
0036                       ; Only do this if cursor is a character.
0037                       ; Skip when help dialog is displayed.
0038               
0039 6BC6 C120  34         mov   @cmdb.dialog,tmp0     ; Get dialog ID
     6BC8 A71A     
0040 6BCA 0284  22         ci    tmp0,id.dialog.help
     6BCC 0068     
0041 6BCE 130E  14         jeq   pane.cmdb.show.hidechar.done
0042               
0043 6BD0 06A0  32         bl    @yx2pnt               ; Calculate VDP address from @WYX
     6BD2 2408     
0044                                                   ; \ i  @wyx = Cursor position
0045                                                   ; / o  tmp0 = VDP write address
0046               
0047 6BD4 D164  34         movb  @fb.top(tmp0),tmp1    ; Get character underneath cursor
     6BD6 D000     
0048 6BD8 0985  32         srl   tmp1,8                ; Right justify
0049               
0050 6BDA C1A0  34         mov   @tv.ruler.visible,tmp2
     6BDC A210     
0051 6BDE 1302  14         jeq   !                     ; Ruler hidden, skip additional offset
0052 6BE0 0224  22         ai    tmp0,80               ; Offset because of ruler
     6BE2 0050     
0053 6BE4 0224  22 !       ai    tmp0,80               ; Offset because of topline
     6BE6 0050     
0054               
0055 6BE8 06A0  32         bl    @xvputb               ; Dump character to VDP
     6BEA 22DA     
0056                                                   ; \ i  tmp0 = VDP write address
0057                                                   ; / i  tmp1 = Byte to write (LSB)
0058               
0059               pane.cmdb.show.hidechar.done:
0060 6BEC C820  46         mov   @cmdb.fb.yxsave,@wyx  ; Restore YX position
     6BEE A704     
     6BF0 832A     
0062                       ;------------------------------------------------------
0063                       ; Show command buffer pane
0064                       ;------------------------------------------------------
0065 6BF2 0204  20         li    tmp0,pane.botrow
     6BF4 0017     
0066 6BF6 6120  34         s     @cmdb.scrrows,tmp0
     6BF8 A706     
0067 6BFA C804  38         mov   tmp0,@fb.scrrows      ; Resize framebuffer
     6BFC A31C     
0068               
0069 6BFE 0A84  32         sla   tmp0,8                ; LSB to MSB (Y), X=0
0070 6C00 C804  38         mov   tmp0,@cmdb.yxtop      ; Set position of command buffer header line
     6C02 A70E     
0071               
0072 6C04 0224  22         ai    tmp0,>0100
     6C06 0100     
0073 6C08 C804  38         mov   tmp0,@cmdb.yxprompt   ; Screen position of prompt in cmdb pane
     6C0A A710     
0074 6C0C 0584  14         inc   tmp0
0075 6C0E C804  38         mov   tmp0,@cmdb.cursor     ; Screen position of cursor in cmdb pane
     6C10 A70A     
0076               
0077 6C12 0720  34         seto  @cmdb.visible         ; Show pane
     6C14 A702     
0078               
0079 6C16 0204  20         li    tmp0,tv.1timeonly     ; \ Set CMDB dirty flag (trigger redraw),
     6C18 00FE     
0080 6C1A C804  38         mov   tmp0,@cmdb.dirty      ; / but colorize CMDB pane only once.
     6C1C A718     
0081               
0082 6C1E 0204  20         li    tmp0,pane.focus.cmdb  ; \ CMDB pane has focus
     6C20 0001     
0083 6C22 C804  38         mov   tmp0,@tv.pane.focus   ; /
     6C24 A222     
0084               
0085 6C26 06A0  32         bl    @pane.errline.hide    ; Hide error pane
     6C28 70E4     
0086                       ;------------------------------------------------------
0087                       ; Exit
0088                       ;------------------------------------------------------
0089               pane.cmdb.show.exit:
0090 6C2A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0091 6C2C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 6C2E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6C30 C2F9  30         mov   *stack+,r11           ; Pop r11
0094 6C32 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0083                       copy  "pane.cmdb.hide.asm"  ; Hide command buffer pane
     **** ****     > pane.cmdb.hide.asm
0001               * FILE......: pane.cmdb.hide.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.hide
0006               * Hide command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Hiding the command buffer automatically passes pane focus
0020               * to frame buffer.
0021               ********|*****|*********************|**************************
0022               pane.cmdb.hide:
0023 6C34 0649  14         dect  stack
0024 6C36 C64B  30         mov   r11,*stack            ; Save return address
0025 6C38 0649  14         dect  stack
0026 6C3A C660  46         mov   @parm1,*stack         ; Push @parm1
     6C3C A006     
0027                       ;------------------------------------------------------
0028                       ; Hide command buffer pane
0029                       ;------------------------------------------------------
0030 6C3E C820  54         mov   @fb.scrrows.max,@fb.scrrows
     6C40 A31E     
     6C42 A31C     
0031                       ;------------------------------------------------------
0032                       ; Adjust frame buffer size if error pane visible
0033                       ;------------------------------------------------------
0034 6C44 C820  54         mov   @tv.error.visible,@tv.error.visible
     6C46 A228     
     6C48 A228     
0035 6C4A 1302  14         jeq   !
0036 6C4C 0620  34         dec   @fb.scrrows
     6C4E A31C     
0037                       ;------------------------------------------------------
0038                       ; Clear error/hint & status line
0039                       ;------------------------------------------------------
0040 6C50 06A0  32 !       bl    @hchar
     6C52 27E0     
0041 6C54 1300                   byte pane.botrow-4,0,32,80*3
     6C56 20F0     
0042 6C58 1600                   byte pane.botrow-1,0,32,80*2
     6C5A 20A0     
0043 6C5C FFFF                   data EOL
0044                       ;------------------------------------------------------
0045                       ; Adjust frame buffer size if ruler visible
0046                       ;------------------------------------------------------
0047 6C5E C820  54         mov   @tv.ruler.visible,@tv.ruler.visible
     6C60 A210     
     6C62 A210     
0048 6C64 1302  14         jeq   pane.cmdb.hide.rest
0049 6C66 0620  34         dec   @fb.scrrows
     6C68 A31C     
0050                       ;------------------------------------------------------
0051                       ; Hide command buffer pane (rest)
0052                       ;------------------------------------------------------
0053               pane.cmdb.hide.rest:
0054 6C6A C820  46         mov   @cmdb.fb.yxsave,@wyx  ; Position cursor in framebuffer
     6C6C A704     
     6C6E 832A     
0055 6C70 04E0  34         clr   @cmdb.visible         ; Hide command buffer pane
     6C72 A702     
0056 6C74 0720  34         seto  @fb.dirty             ; Redraw framebuffer
     6C76 A318     
0057 6C78 04E0  34         clr   @tv.pane.focus        ; Framebuffer has focus!
     6C7A A222     
0058                       ;------------------------------------------------------
0059                       ; Reload current color scheme
0060                       ;------------------------------------------------------
0061 6C7C 0720  34         seto  @parm1                ; Do not turn screen off while
     6C7E A006     
0062                                                   ; reloading color scheme
0063 6C80 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     6C82 A008     
0064 6C84 04E0  34         clr   @parm3                ; Colorize all panes
     6C86 A00A     
0065               
0066 6C88 06A0  32         bl    @pane.action.colorscheme.load
     6C8A 712C     
0067                                                   ; Reload color scheme
0068                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0069                                                   ; | i  @parm2 = Skip colorizing marked lines
0070                                                   ; |             if >FFFF
0071                                                   ; | i  @parm3 = Only colorize CMDB pane
0072                                                   ; /             if >FFFF
0073                       ;------------------------------------------------------
0074                       ; Show cursor again
0075                       ;------------------------------------------------------
0076 6C8C 06A0  32         bl    @pane.cursor.blink
     6C8E 70F6     
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080               pane.cmdb.hide.exit:
0081 6C90 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6C92 A006     
0082 6C94 C2F9  30         mov   *stack+,r11           ; Pop r11
0083 6C96 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0084                       copy  "pane.cmdb.draw.asm"  ; Draw command buffer pane contents
     **** ****     > pane.cmdb.draw.asm
0001               * FILE......: pane.cmdb.draw.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.draw
0006               * Draw content in command buffer pane
0007               ***************************************************************
0008               * bl  @pane.cmdb.draw
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.panhead  = Pointer to string with dialog header
0012               * @cmdb.paninfo  = Pointer to string with info message or >0000
0013               *                  if input prompt required
0014               * @cmdb.panhint  = Pointer to string with hint message
0015               * @cmdb.pankeys  = Pointer to string with key shortcuts for dialog
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2
0022               ********|*****|*********************|**************************
0023               pane.cmdb.draw:
0024 6C98 0649  14         dect  stack
0025 6C9A C64B  30         mov   r11,*stack            ; Save return address
0026 6C9C 0649  14         dect  stack
0027 6C9E C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6CA0 0649  14         dect  stack
0029 6CA2 C645  30         mov   tmp1,*stack           ; Push tmp1
0030                       ;------------------------------------------------------
0031                       ; Command buffer header line
0032                       ;------------------------------------------------------
0033 6CA4 C820  54         mov   @cmdb.panhead,@parm1  ; Get string to display
     6CA6 A71E     
     6CA8 A006     
0034 6CAA 0204  20         li    tmp0,80
     6CAC 0050     
0035 6CAE C804  38         mov   tmp0,@parm2           ; Set requested length
     6CB0 A008     
0036 6CB2 0204  20         li    tmp0,1
     6CB4 0001     
0037 6CB6 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6CB8 A00A     
0038 6CBA 0204  20         li    tmp0,rambuf
     6CBC A100     
0039 6CBE C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6CC0 A00C     
0040               
0041 6CC2 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6CC4 3312     
0042                                                   ; \ i  @parm1 = Pointer to string
0043                                                   ; | i  @parm2 = Requested length
0044                                                   ; | i  @parm3 = Fill character
0045                                                   ; | i  @parm4 = Pointer to buffer with
0046                                                   ; /             output string
0047               
0048 6CC6 06A0  32         bl    @cpym2m
     6CC8 24E8     
0049 6CCA 71CE                   data txt.stevie,rambuf+65,20
     6CCC A141     
     6CCE 0014     
0050                                                   ;
0051                                                   ; Add Stevie banner
0052                                                   ;
0053               
0054 6CD0 C820  46         mov   @cmdb.yxtop,@wyx      ; \
     6CD2 A70E     
     6CD4 832A     
0055 6CD6 C160  34         mov   @outparm1,tmp1        ; | Display pane header
     6CD8 A016     
0056 6CDA 06A0  32         bl    @xutst0               ; /
     6CDC 242E     
0057                       ;------------------------------------------------------
0058                       ; Check dialog id
0059                       ;------------------------------------------------------
0060 6CDE 04E0  26         clr   @waux1                ; Default is show prompt
     6CE0 833C     
0061               
0062 6CE2 C120  34         mov   @cmdb.dialog,tmp0
     6CE4 A71A     
0063 6CE6 0284  22         ci    tmp0,99               ; \ Hide prompt and no keyboard
     6CE8 0063     
0064 6CEA 121D  14         jle   pane.cmdb.draw.clear  ; | buffer input if dialog ID > 99
0065 6CEC 0720  26         seto  @waux1                ; /
     6CEE 833C     
0066                       ;------------------------------------------------------
0067                       ; Show info message instead of prompt
0068                       ;------------------------------------------------------
0069 6CF0 C160  34         mov   @cmdb.paninfo,tmp1    ; Null pointer?
     6CF2 A720     
0070 6CF4 1318  14         jeq   pane.cmdb.draw.clear  ; Yes, display normal prompt
0071               
0072 6CF6 C820  54         mov   @cmdb.paninfo,@parm1  ; Get string to display
     6CF8 A720     
     6CFA A006     
0073 6CFC 0204  20         li    tmp0,80
     6CFE 0050     
0074 6D00 C804  38         mov   tmp0,@parm2           ; Set requested length
     6D02 A008     
0075 6D04 0204  20         li    tmp0,32
     6D06 0020     
0076 6D08 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6D0A A00A     
0077 6D0C 0204  20         li    tmp0,rambuf
     6D0E A100     
0078 6D10 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6D12 A00C     
0079               
0080 6D14 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6D16 3312     
0081                                                   ; \ i  @parm1 = Pointer to string
0082                                                   ; | i  @parm2 = Requested length
0083                                                   ; | i  @parm3 = Fill character
0084                                                   ; | i  @parm4 = Pointer to buffer with
0085                                                   ; /             output string
0086               
0087 6D18 06A0  32         bl    @at
     6D1A 26D4     
0088 6D1C 1400                   byte pane.botrow-3,0  ; Position cursor
0089               
0090 6D1E C160  34         mov   @outparm1,tmp1        ; \ Display pane header
     6D20 A016     
0091 6D22 06A0  32         bl    @xutst0               ; /
     6D24 242E     
0092                       ;------------------------------------------------------
0093                       ; Clear lines after prompt in command buffer
0094                       ;------------------------------------------------------
0095               pane.cmdb.draw.clear:
0096 6D26 06A0  32         bl    @hchar
     6D28 27E0     
0097 6D2A 1500                   byte pane.botrow-2,0,32,80
     6D2C 2050     
0098 6D2E FFFF                   data EOL              ; Remove key markers
0099                       ;------------------------------------------------------
0100                       ; Show key markers ?
0101                       ;------------------------------------------------------
0102 6D30 C120  34         mov   @cmdb.panmarkers,tmp0
     6D32 A724     
0103 6D34 1310  14         jeq   pane.cmdb.draw.hint   ; no, skip key markers
0104                       ;------------------------------------------------------
0105                       ; Loop over key marker list
0106                       ;------------------------------------------------------
0107               pane.cmdb.draw.marker.loop:
0108 6D36 D174  28         movb  *tmp0+,tmp1           ; Get X position
0109 6D38 0985  32         srl   tmp1,8                ; Right align
0110 6D3A 0285  22         ci    tmp1,>00ff            ; End of list reached?
     6D3C 00FF     
0111 6D3E 130B  14         jeq   pane.cmdb.draw.hint   ; Yes, exit loop
0112               
0113 6D40 0265  22         ori   tmp1,(pane.botrow - 2) * 256
     6D42 1500     
0114                                                   ; y=bottom row - 3, x=(key marker position)
0115 6D44 C805  30         mov   tmp1,@wyx             ; Set cursor position
     6D46 832A     
0116               
0117 6D48 0649  14         dect  stack
0118 6D4A C644  30         mov   tmp0,*stack           ; Push tmp0
0119               
0120 6D4C 06A0  32         bl    @putstr
     6D4E 242C     
0121 6D50 39B2                   data txt.keymarker    ; Show key marker
0122               
0123 6D52 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0124                       ;------------------------------------------------------
0125                       ; Show marker
0126                       ;------------------------------------------------------
0127 6D54 10F0  14         jmp   pane.cmdb.draw.marker.loop
0128                                                   ; Next iteration
0129                       ;------------------------------------------------------
0130                       ; Display pane hint in command buffer
0131                       ;------------------------------------------------------
0132               pane.cmdb.draw.hint:
0133 6D56 0204  20         li    tmp0,pane.botrow - 1  ; \
     6D58 0016     
0134 6D5A 0A84  32         sla   tmp0,8                ; / Y=bottom row - 1, X=0
0135 6D5C C804  38         mov   tmp0,@parm1           ; Set parameter
     6D5E A006     
0136 6D60 C820  54         mov   @cmdb.panhint,@parm2  ; Pane hint to display
     6D62 A722     
     6D64 A008     
0137               
0138 6D66 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6D68 6B46     
0139                                                   ; \ i  parm1 = Pointer to string with hint
0140                                                   ; / i  parm2 = YX position
0141                       ;------------------------------------------------------
0142                       ; Display keys in status line
0143                       ;------------------------------------------------------
0144 6D6A 0204  20         li    tmp0,pane.botrow      ; \
     6D6C 0017     
0145 6D6E 0A84  32         sla   tmp0,8                ; / Y=bottom row, X=0
0146 6D70 C804  38         mov   tmp0,@parm1           ; Set parameter
     6D72 A006     
0147 6D74 C820  54         mov   @cmdb.pankeys,@parm2  ; Pane hint to display
     6D76 A726     
     6D78 A008     
0148               
0149 6D7A 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6D7C 6B46     
0150                                                   ; \ i  parm1 = Pointer to string with hint
0151                                                   ; / i  parm2 = YX position
0152                       ;------------------------------------------------------
0153                       ; ALPHA-Lock key down?
0154                       ;------------------------------------------------------
0155 6D7E 20A0  32         coc   @wbit10,config
     6D80 200C     
0156 6D82 1306  14         jeq   pane.cmdb.draw.alpha.down
0157                       ;------------------------------------------------------
0158                       ; AlPHA-Lock is up
0159                       ;------------------------------------------------------
0160 6D84 06A0  32         bl    @hchar
     6D86 27E0     
0161 6D88 174E                   byte pane.botrow,78,32,2
     6D8A 2002     
0162 6D8C FFFF                   data eol
0163               
0164 6D8E 1004  14         jmp   pane.cmdb.draw.promptcmd
0165                       ;------------------------------------------------------
0166                       ; AlPHA-Lock is down
0167                       ;------------------------------------------------------
0168               pane.cmdb.draw.alpha.down:
0169 6D90 06A0  32         bl    @putat
     6D92 2450     
0170 6D94 174E                   byte   pane.botrow,78
0171 6D96 39AC                   data   txt.alpha.down
0172                       ;------------------------------------------------------
0173                       ; Command buffer content
0174                       ;------------------------------------------------------
0175               pane.cmdb.draw.promptcmd:
0176 6D98 C120  30         mov   @waux1,tmp0           ; Flag set?
     6D9A 833C     
0177 6D9C 1602  14         jne   pane.cmdb.draw.hearts ; Yes, so skip refresh
0178 6D9E 06A0  32         bl    @cmdb.refresh         ; Refresh command buffer content
     6DA0 6DEA     
0179                       ;------------------------------------------------------
0180                       ; Set color for hearts in TI-Basic dialog
0181                       ;------------------------------------------------------
0182               pane.cmdb.draw.hearts:
0183 6DA2 C120  34         mov   @cmdb.dialog,tmp0
     6DA4 A71A     
0184 6DA6 0284  22         ci    tmp0,id.dialog.basic  ; TI Basic dialog active?
     6DA8 006B     
0185 6DAA 1602  14         jne   pane.cmdb.draw.exit   ; No, so exit early
0186 6DAC 06A0  32         bl    @tibasic.hearts.tat   ; Set color for hearts
     6DAE 7058     
0187                       ;------------------------------------------------------
0188                       ; Exit
0189                       ;------------------------------------------------------
0190               pane.cmdb.draw.exit:
0191 6DB0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0192 6DB2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0193 6DB4 C2F9  30         mov   *stack+,r11           ; Pop r11
0194 6DB6 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0085                       copy  "error.display.asm"   ; Show error message
     **** ****     > error.display.asm
0001               
0002               ***************************************************************
0003               * error.display
0004               * Display error message
0005               ***************************************************************
0006               * bl  @error.display
0007               *--------------------------------------------------------------
0008               * INPUT
0009               * @parm1 = Pointer to error message
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0,tmp1,tmp2
0016               ********|*****|*********************|**************************
0017               error.display:
0018 6DB8 0649  14         dect  stack
0019 6DBA C64B  30         mov   r11,*stack            ; Save return address
0020 6DBC 0649  14         dect  stack
0021 6DBE C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6DC0 0649  14         dect  stack
0023 6DC2 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6DC4 0649  14         dect  stack
0025 6DC6 C646  30         mov   tmp2,*stack           ; Push tmp2
0026                       ;------------------------------------------------------
0027                       ; Display error message
0028                       ;------------------------------------------------------
0029 6DC8 C120  34         mov   @parm1,tmp0           ; \ Get length of string
     6DCA A006     
0030 6DCC D194  26         movb  *tmp0,tmp2            ; |
0031 6DCE 0986  32         srl   tmp2,8                ; / Right align
0032               
0033 6DD0 C120  34         mov   @parm1,tmp0           ; Get error message
     6DD2 A006     
0034 6DD4 0205  20         li    tmp1,tv.error.msg     ; Set error message
     6DD6 A230     
0035               
0036 6DD8 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     6DDA 24EE     
0037                                                   ; \ i  tmp0 = Source CPU memory address
0038                                                   ; | i  tmp1 = Target CPU memory address
0039                                                   ; / i  tmp2 = Number of bytes to copy
0040               
0041 6DDC 06A0  32         bl    @pane.errline.show    ; Display error message
     6DDE 711A     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               error.display.exit:
0046 6DE0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6DE2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6DE4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6DE6 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6DE8 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0086                       copy  "cmdb.refresh.asm"    ; Refresh command buffer contents
     **** ****     > cmdb.refresh.asm
0001               * FILE......: cmdb.refresh.asm
0002               * Purpose...: Stevie Editor - Command buffer
0003               
0004               ***************************************************************
0005               * cmdb.refresh
0006               * Refresh command buffer content
0007               ***************************************************************
0008               * bl @cmdb.refresh
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.refresh:
0022 6DEA 0649  14         dect  stack
0023 6DEC C64B  30         mov   r11,*stack            ; Save return address
0024 6DEE 0649  14         dect  stack
0025 6DF0 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6DF2 0649  14         dect  stack
0027 6DF4 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6DF6 0649  14         dect  stack
0029 6DF8 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6DFA 0649  14         dect  stack
0031 6DFC C660  42         mov   @wyx,*stack           ; Push cursor position
     6DFE 832A     
0032                       ;------------------------------------------------------
0033                       ; Dump Command buffer content
0034                       ;------------------------------------------------------
0035 6E00 C820  46         mov   @cmdb.yxprompt,@wyx   ; Screen position of command line prompt
     6E02 A710     
     6E04 832A     
0036               
0037 6E06 05A0  26         inc   @wyx                  ; X +1 for prompt
     6E08 832A     
0038               
0039 6E0A 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6E0C 2408     
0040                                                   ; \ i  @wyx = Cursor position
0041                                                   ; / o  tmp0 = VDP target address
0042               
0043 6E0E 0205  20         li    tmp1,cmdb.cmd         ; Address of current command
     6E10 A72B     
0044 6E12 0206  20         li    tmp2,1*79             ; Command length
     6E14 004F     
0045               
0046 6E16 06A0  32         bl    @xpym2v               ; \ Copy CPU memory to VDP memory
     6E18 249A     
0047                                                   ; | i  tmp0 = VDP target address
0048                                                   ; | i  tmp1 = RAM source address
0049                                                   ; / i  tmp2 = Number of bytes to copy
0050                       ;------------------------------------------------------
0051                       ; Show command buffer prompt
0052                       ;------------------------------------------------------
0053 6E1A C820  46         mov   @cmdb.yxprompt,@wyx
     6E1C A710     
     6E1E 832A     
0054 6E20 06A0  32         bl    @putstr
     6E22 242C     
0055 6E24 3A82                   data txt.cmdb.prompt
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               cmdb.refresh.exit:
0060 6E26 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6E28 832A     
0061 6E2A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 6E2C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 6E2E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 6E30 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 6E32 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0087                       copy  "cmdb.cmd.asm"        ; Command line handling
     **** ****     > cmdb.cmd.asm
0001               * FILE......: cmdb.cmd.asm
0002               * Purpose...: Stevie Editor - Command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.clear
0006               * Clear current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.clear:
0022 6E34 0649  14         dect  stack
0023 6E36 C64B  30         mov   r11,*stack            ; Save return address
0024 6E38 0649  14         dect  stack
0025 6E3A C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6E3C 0649  14         dect  stack
0027 6E3E C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6E40 0649  14         dect  stack
0029 6E42 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6E44 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6E46 A72A     
0034 6E48 06A0  32         bl    @film                 ; Clear command
     6E4A 2244     
0035 6E4C A72B                   data  cmdb.cmd,>00,80
     6E4E 0000     
     6E50 0050     
0036                       ;------------------------------------------------------
0037                       ; Put cursor at beginning of line
0038                       ;------------------------------------------------------
0039 6E52 C120  34         mov   @cmdb.yxprompt,tmp0
     6E54 A710     
0040 6E56 0584  14         inc   tmp0
0041 6E58 C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6E5A A70A     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               cmdb.cmd.clear.exit:
0046 6E5C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6E5E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6E60 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6E62 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6E64 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               
0054               
0055               
0056               
0057               ***************************************************************
0058               * cmdb.cmdb.getlength
0059               * Get length of current command
0060               ***************************************************************
0061               * bl @cmdb.cmd.getlength
0062               *--------------------------------------------------------------
0063               * INPUT
0064               * @cmdb.cmd
0065               *--------------------------------------------------------------
0066               * OUTPUT
0067               * @outparm1
0068               *--------------------------------------------------------------
0069               * Register usage
0070               * none
0071               *--------------------------------------------------------------
0072               * Notes
0073               ********|*****|*********************|**************************
0074               cmdb.cmd.getlength:
0075 6E66 0649  14         dect  stack
0076 6E68 C64B  30         mov   r11,*stack            ; Save return address
0077                       ;-------------------------------------------------------
0078                       ; Get length of null terminated string
0079                       ;-------------------------------------------------------
0080 6E6A 06A0  32         bl    @string.getlenc      ; Get length of C-style string
     6E6C 2AA8     
0081 6E6E A72B                   data cmdb.cmd,0      ; \ i  p0    = Pointer to C-style string
     6E70 0000     
0082                                                  ; | i  p1    = Termination character
0083                                                  ; / o  waux1 = Length of string
0084 6E72 C820  50         mov   @waux1,@outparm1     ; Save length of string
     6E74 833C     
     6E76 A016     
0085                       ;------------------------------------------------------
0086                       ; Exit
0087                       ;------------------------------------------------------
0088               cmdb.cmd.getlength.exit:
0089 6E78 C2F9  30         mov   *stack+,r11           ; Pop r11
0090 6E7A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0088                       copy  "cmdb.cmd.set.asm"    ; Set command line to preset value
     **** ****     > cmdb.cmd.set.asm
0001               * FILE......: cmdb.cmd.set.asm
0002               * Purpose...: Set command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.set
0006               * Set current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to string with command
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.set:
0022 6E7C 0649  14         dect  stack
0023 6E7E C64B  30         mov   r11,*stack            ; Save return address
0024 6E80 0649  14         dect  stack
0025 6E82 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6E84 0649  14         dect  stack
0027 6E86 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6E88 0649  14         dect  stack
0029 6E8A C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6E8C 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6E8E A72A     
0034 6E90 06A0  32         bl    @film                 ; Clear command
     6E92 2244     
0035 6E94 A72B                   data  cmdb.cmd,>00,80
     6E96 0000     
     6E98 0050     
0036                       ;------------------------------------------------------
0037                       ; Get string length
0038                       ;------------------------------------------------------
0039 6E9A C120  34         mov   @parm1,tmp0
     6E9C A006     
0040 6E9E D1B4  28         movb  *tmp0+,tmp2           ; Get length byte
0041 6EA0 0986  32         srl   tmp2,8                ; Right align
0042 6EA2 1501  14         jgt   !
0043                       ;------------------------------------------------------
0044                       ; Assert: invalid length, we just exit here
0045                       ;------------------------------------------------------
0046 6EA4 100B  14         jmp   cmdb.cmd.set.exit     ; No harm done
0047                       ;------------------------------------------------------
0048                       ; Copy string to command
0049                       ;------------------------------------------------------
0050 6EA6 0205  20 !       li   tmp1,cmdb.cmd          ; Destination
     6EA8 A72B     
0051 6EAA 06A0  32         bl   @xpym2m                ; Copy string
     6EAC 24EE     
0052                       ;------------------------------------------------------
0053                       ; Put cursor at beginning of line
0054                       ;------------------------------------------------------
0055 6EAE C120  34         mov   @cmdb.yxprompt,tmp0
     6EB0 A710     
0056 6EB2 0584  14         inc   tmp0
0057 6EB4 C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6EB6 A70A     
0058               
0059 6EB8 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6EBA A718     
0060                       ;------------------------------------------------------
0061                       ; Exit
0062                       ;------------------------------------------------------
0063               cmdb.cmd.set.exit:
0064 6EBC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0065 6EBE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 6EC0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 6EC2 C2F9  30         mov   *stack+,r11           ; Pop r11
0068 6EC4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0089                       copy  "cmdb.cmd.preset.asm" ; Preset shortcuts in dialogs
     **** ****     > cmdb.cmd.preset.asm
0001               * FILE......: cmdb.cmd.preset.asm
0002               * Purpose...: Set command to preset based on dialog and shortcut pressed
0003               
0004               ***************************************************************
0005               * cmdb.cmd.preset
0006               * Set command to preset based on dialog and shortcut pressed
0007               ***************************************************************
0008               * bl   @cmdb.cmd.preset
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @waux1       = Key pressed
0012               * @cmdb.dialog = ID of current dialog
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0, tmp1, tmp2
0016               ********|*****|*********************|**************************
0017               cmdb.cmd.preset:
0018 6EC6 0649  14         dect  stack
0019 6EC8 C64B  30         mov   r11,*stack            ; Save return address
0020 6ECA 0649  14         dect  stack
0021 6ECC C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6ECE 0649  14         dect  stack
0023 6ED0 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6ED2 0649  14         dect  stack
0025 6ED4 C646  30         mov   tmp2,*stack           ; Push tmp2
0026               
0027 6ED6 0204  20         li    tmp0,cmdb.cmd.preset.data
     6ED8 77A2     
0028                                                   ; Load table
0029 6EDA C1A0  34         mov   @keycode1,tmp2        ; Get keyboard code
     6EDC A028     
0030                       ;-------------------------------------------------------
0031                       ; Loop over table with presets
0032                       ;-------------------------------------------------------
0033               cmdb.cmd.preset.loop:
0034 6EDE 8834  46         c     *tmp0+,@cmdb.dialog   ; Dialog matches?
     6EE0 A71A     
0035 6EE2 1607  14         jne   cmdb.cmd.preset.next  ; No, next entry
0036                       ;-------------------------------------------------------
0037                       ; Dialog matches, check if shortcut matches
0038                       ;-------------------------------------------------------
0039 6EE4 81B4  30         c     *tmp0+,tmp2           ; Compare with keyboard shortcut
0040 6EE6 1606  14         jne   !                     ; No match, next entry
0041                       ;-------------------------------------------------------
0042                       ; Entry in table matches, set preset
0043                       ;-------------------------------------------------------
0044 6EE8 C814  46         mov   *tmp0,@parm1          ; Get pointer to string
     6EEA A006     
0045               
0046 6EEC 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6EEE 6E7C     
0047                                                   ; \ i  @parm1 = Pointer to string w. preset
0048                                                   ; /
0049               
0050 6EF0 1006  14         jmp   cmdb.cmd.preset.exit  ; Exit
0051                       ;-------------------------------------------------------
0052                       ; Dialog does not match, prepare for next entry
0053                       ;-------------------------------------------------------
0054               cmdb.cmd.preset.next:
0055 6EF2 05C4  14         inct  tmp0                  ; Skip shortcut
0056 6EF4 05C4  14 !       inct  tmp0                  ; Skip pointer to string
0057                       ;-------------------------------------------------------
0058                       ; End of list reached?
0059                       ;-------------------------------------------------------
0060 6EF6 C154  26         mov   *tmp0,tmp1            ; Get entry
0061 6EF8 0285  22         ci    tmp1,EOL              ; EOL identifier found?
     6EFA FFFF     
0062 6EFC 16F0  14         jne   cmdb.cmd.preset.loop  ; Not yet, next entry
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               cmdb.cmd.preset.exit:
0067 6EFE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0068 6F00 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 6F02 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6F04 C2F9  30         mov   *stack+,r11           ; Pop r11
0071 6F06 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0090                       ;-----------------------------------------------------------------------
0091                       ; Dialog toggles
0092                       ;-----------------------------------------------------------------------
0093                       copy  "fm.fastmode.asm"     ; Toggle fastmode on/off for file operation
     **** ****     > fm.fastmode.asm
0001               * FILE......: fm.fastmode.asm
0002               * Purpose...: Turn fastmode on/off for file operation
0003               
0004               ***************************************************************
0005               * fm.fastmode
0006               * Turn on fast mode for supported devices
0007               ***************************************************************
0008               * bl  @fm.fastmode
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               ********|*****|*********************|**************************
0019               fm.fastmode:
0020 6F08 0649  14         dect  stack
0021 6F0A C64B  30         mov   r11,*stack            ; Save return address
0022 6F0C 0649  14         dect  stack
0023 6F0E C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6F10 0649  14         dect  stack
0025 6F12 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6F14 0649  14         dect  stack
0027 6F16 C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;------------------------------------------------------
0029                       ; Toggle fastmode
0030                       ;------------------------------------------------------
0031 6F18 C160  34         mov   @cmdb.dialog,tmp1     ; Get ID of current dialog
     6F1A A71A     
0032 6F1C C120  34         mov   @fh.offsetopcode,tmp0 ; Get file opcode offset
     6F1E A44E     
0033 6F20 1322  14         jeq   fm.fastmode.on        ; Toggle on if offset is 0
0034                       ;------------------------------------------------------
0035                       ; Turn fast mode off
0036                       ;------------------------------------------------------
0037               fm.fastmode.off:
0038 6F22 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     6F24 A44E     
0039               
0040 6F26 0206  20         li    tmp2,id.dialog.load
     6F28 000A     
0041 6F2A 8185  18         c     tmp1,tmp2
0042 6F2C 1310  14         jeq   fm.fastmode.off.1
0043               
0044 6F2E 0206  20         li    tmp2,id.dialog.insert
     6F30 000D     
0045 6F32 8185  18         c     tmp1,tmp2
0046 6F34 130F  14         jeq   fm.fastmode.off.2
0047               
0048 6F36 0206  20         li    tmp2,id.dialog.clipboard
     6F38 0067     
0049 6F3A 8185  18         c     tmp1,tmp2
0050 6F3C 130E  14         jeq   fm.fastmode.off.3
0051               
0052 6F3E 0206  20         li    tmp2,id.dialog.append
     6F40 000E     
0053 6F42 8185  18         c     tmp1,tmp2
0054 6F44 130D  14         jeq   fm.fastmode.off.4
0055                       ;------------------------------------------------------
0056                       ; Assert
0057                       ;------------------------------------------------------
0058 6F46 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6F48 FFCE     
0059 6F4A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6F4C 2026     
0060                       ;------------------------------------------------------
0061                       ; Keylist fastmode off
0062                       ;------------------------------------------------------
0063               fm.fastmode.off.1:
0064 6F4E 0204  20         li    tmp0,txt.keys.load
     6F50 71DE     
0065 6F52 102C  14         jmp   fm.fastmode.keylist
0066               fm.fastmode.off.2:
0067 6F54 0204  20         li    tmp0,txt.keys.insert
     6F56 71DE     
0068 6F58 1029  14         jmp   fm.fastmode.keylist
0069               fm.fastmode.off.3:
0070 6F5A 0204  20         li    tmp0,txt.keys.clipboard
     6F5C 7426     
0071 6F5E 1026  14         jmp   fm.fastmode.keylist
0072               fm.fastmode.off.4:
0073 6F60 0204  20         li    tmp0,txt.keys.append
     6F62 71DE     
0074 6F64 1023  14         jmp   fm.fastmode.keylist
0075                       ;------------------------------------------------------
0076                       ; Turn fast mode on
0077                       ;------------------------------------------------------
0078               fm.fastmode.on:
0079 6F66 0204  20         li    tmp0,>40              ; Data buffer in CPU RAM
     6F68 0040     
0080 6F6A C804  38         mov   tmp0,@fh.offsetopcode
     6F6C A44E     
0081               
0082 6F6E 0206  20         li    tmp2,id.dialog.load
     6F70 000A     
0083 6F72 8185  18         c     tmp1,tmp2
0084 6F74 1310  14         jeq   fm.fastmode.on.1
0085               
0086 6F76 0206  20         li    tmp2,id.dialog.insert
     6F78 000D     
0087 6F7A 8185  18         c     tmp1,tmp2
0088 6F7C 130F  14         jeq   fm.fastmode.on.2
0089               
0090 6F7E 0206  20         li    tmp2,id.dialog.clipboard
     6F80 0067     
0091 6F82 8185  18         c     tmp1,tmp2
0092 6F84 130E  14         jeq   fm.fastmode.on.3
0093               
0094 6F86 0206  20         li    tmp2,id.dialog.append
     6F88 000E     
0095 6F8A 8185  18         c     tmp1,tmp2
0096 6F8C 130D  14         jeq   fm.fastmode.on.4
0097                       ;------------------------------------------------------
0098                       ; Assert
0099                       ;------------------------------------------------------
0100 6F8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6F90 FFCE     
0101 6F92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6F94 2026     
0102                       ;------------------------------------------------------
0103                       ; Keylist fastmode on
0104                       ;------------------------------------------------------
0105               fm.fastmode.on.1:
0106 6F96 0204  20         li    tmp0,txt.keys.load2
     6F98 71FD     
0107 6F9A 1008  14         jmp   fm.fastmode.keylist
0108               fm.fastmode.on.2:
0109 6F9C 0204  20         li    tmp0,txt.keys.insert2
     6F9E 71FD     
0110 6FA0 1005  14         jmp   fm.fastmode.keylist
0111               fm.fastmode.on.3:
0112 6FA2 0204  20         li    tmp0,txt.keys.clipboard2
     6FA4 7449     
0113 6FA6 1002  14         jmp   fm.fastmode.keylist
0114               fm.fastmode.on.4:
0115 6FA8 0204  20         li    tmp0,txt.keys.append2
     6FAA 71FD     
0116                       ;------------------------------------------------------
0117                       ; Set keylist
0118                       ;------------------------------------------------------
0119               fm.fastmode.keylist:
0120 6FAC C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6FAE A726     
0121               *--------------------------------------------------------------
0122               * Exit
0123               *--------------------------------------------------------------
0124               fm.fastmode.exit:
0125 6FB0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0126 6FB2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0127 6FB4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0128 6FB6 C2F9  30         mov   *stack+,r11           ; Pop R11
0129 6FB8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0094                       copy  "tib.dialog.helper.asm"
     **** ****     > tib.dialog.helper.asm
0001               * FILE......: tib.dialog.helper.asm
0002               * Purpose...: TI Basic dialog helper functions
0003               
0004               
0005               
0006               ***************************************************************
0007               * tibasic.am.toggle
0008               * Toggle TI Basic AutoMode
0009               ***************************************************************
0010               * bl   @tibasic.am.toggle
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * none
0014               *
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               tibasic.am.toggle:
0025 6FBA 0649  14         dect  stack
0026 6FBC C64B  30         mov   r11,*stack            ; Save return address
0027 6FBE 0649  14         dect  stack
0028 6FC0 C644  30         mov   tmp0,*stack           ; Push tmp0
0029                       ;------------------------------------------------------
0030                       ; Toggle AutoMode display
0031                       ;------------------------------------------------------
0032 6FC2 0560  34         inv   @tib.automode         ; Toggle 'AutoMode'
     6FC4 A0C0     
0033 6FC6 1303  14         jeq   tibasic.am.off
0034 6FC8 0204  20         li    tmp0,txt.keys.basic2
     6FCA 775D     
0035 6FCC 1002  14         jmp   !
0036               tibasic.am.off:
0037 6FCE 0204  20         li    tmp0,txt.keys.basic
     6FD0 7748     
0038 6FD2 C804  38 !       mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6FD4 A726     
0039                       ;------------------------------------------------------
0040                       ; Exit
0041                       ;------------------------------------------------------
0042               tibasic.am.exit:
0043 6FD6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0044 6FD8 C2F9  30         mov   *stack+,r11           ; Pop r11
0045 6FDA 045B  20         b     *r11                  ; Return
0046               
0047               
0048               
0049               
0050               ***************************************************************
0051               * tibasic.buildstr
0052               * Build session picker string for TI Basic dialog
0053               ***************************************************************
0054               * bl   @tibasic.buildstr
0055               *--------------------------------------------------------------
0056               * INPUT
0057               * none
0058               *
0059               * OUTPUT
0060               * none
0061               *--------------------------------------------------------------
0062               * Register usage
0063               * tmp0
0064               *--------------------------------------------------------------
0065               * Remarks
0066               * none
0067               ********|*****|*********************|**************************
0068               tibasic.buildstr:
0069 6FDC 0649  14         dect  stack
0070 6FDE C64B  30         mov   r11,*stack            ; Save return address
0071 6FE0 0649  14         dect  stack
0072 6FE2 C644  30         mov   tmp0,*stack           ; Push tmp0
0073 6FE4 0649  14         dect  stack
0074 6FE6 C645  30         mov   tmp1,*stack           ; Push tmp1
0075 6FE8 0649  14         dect  stack
0076 6FEA C646  30         mov   tmp2,*stack           ; Push tmp2
0077 6FEC 0649  14         dect  stack
0078 6FEE C647  30         mov   tmp3,*stack           ; Push tmp3
0079 6FF0 0649  14         dect  stack
0080 6FF2 C648  30         mov   tmp4,*stack           ; Push tmp4
0081                       ;-------------------------------------------------------
0082                       ; Build session selection string
0083                       ;-------------------------------------------------------
0084 6FF4 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6FF6 A718     
0085               
0086 6FF8 06A0  32         bl    @cpym2m
     6FFA 24E8     
0087 6FFC 76E4                   data txt.info.basic,rambuf+200,30
     6FFE A1C8     
     7000 001E     
0088                                                   ; Copy string from rom to ram buffer
0089               
0090 7002 0204  20         li    tmp0,rambuf + 200     ; \
     7004 A1C8     
0091 7006 C804  38         mov   tmp0,@cmdb.paninfo    ; / Set pointer to session selection string
     7008 A720     
0092               
0093 700A 0204  20         li    tmp0,tib.status1      ; First TI Basic session to check
     700C A0B6     
0094 700E 0206  20         li    tmp2,tib.status5      ; Last TI Basic session to check
     7010 A0BE     
0095 7012 0207  20         li    tmp3,rambuf + 212     ; Position in session selection string
     7014 A1D4     
0096 7016 0208  20         li    tmp4,1                ; Session counter
     7018 0001     
0097                       ;-------------------------------------------------------
0098                       ; Loop over TI Basic sessions and check if active
0099                       ;-------------------------------------------------------
0100               tibasic.buildstr.loop:
0101 701A C174  30         mov   *tmp0+,tmp1           ; Session active?
0102 701C 130E  14         jeq   tibasic.buildstr.next
0103                                                   ; No, check next session
0104                       ;-------------------------------------------------------
0105                       ; Current session?
0106                       ;-------------------------------------------------------
0107               tibasic.buildstr.current:
0108 701E 8808  34         c     tmp4,@tib.session     ; Matches current session?
     7020 A0B4     
0109 7022 1606  14         jne   tibasic.buildstr.active
0110               
0111 7024 DDE0  48         movb  @tibasic.heart.solid,*tmp3+
     7026 7054     
0112 7028 D5E0  46         movb  @tibasic.heart.solid+1,*tmp3
     702A 7055     
0113                                                   ; Set marker
0114 702C 0607  14         dec   tmp3                  ; Adjustment
0115               
0116 702E 1005  14         jmp   tibasic.buildstr.next ; Next entry
0117                       ;-------------------------------------------------------
0118                       ; Set Basic session active marker
0119                       ;-------------------------------------------------------
0120               tibasic.buildstr.active:
0121 7030 DDE0  48         movb  @tibasic.heart.open,*tmp3+
     7032 7056     
0122 7034 D5E0  46         movb  @tibasic.heart.open+1,*tmp3
     7036 7057     
0123                                                   ; Set marker
0124 7038 0607  14         dec   tmp3                  ; Adjustment
0125                       ;-------------------------------------------------------
0126                       ; Next entry
0127                       ;-------------------------------------------------------
0128               tibasic.buildstr.next:
0129 703A 0227  22         ai    tmp3,4                ; Next position
     703C 0004     
0130 703E 8184  18         c     tmp0,tmp2             ; All sessions checked?
0131 7040 1502  14         jgt   tibasic.buildstr.exit ; Yes, exit loop
0132 7042 0588  14         inc   tmp4                  ; Next session
0133 7044 10EA  14         jmp   tibasic.buildstr.loop ; No, next iteration
0134                       ;-------------------------------------------------------
0135                       ; Exit
0136                       ;-------------------------------------------------------
0137               tibasic.buildstr.exit:
0138 7046 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0139 7048 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0140 704A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0141 704C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0142 704E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0143 7050 C2F9  30         mov   *stack+,r11           ; Pop R11
0144 7052 045B  20         b     *r11                  ; Return to caller
0145               
0146               tibasic.heart.solid:
0147 7054 0203             byte  2,3                   ; ASCII 2-3 (heart solid)
0148               tibasic.heart.open:
0149 7056 1D1E             byte  29,30                 ; ASCII 29-30 (heart open)
0150               
0151               
0152               
0153               ***************************************************************
0154               * tibasic.hearts.tat
0155               * Dump color for hearts in TI Basic session dialog
0156               ***************************************************************
0157               * bl   @tibasic.hearts.tat
0158               *--------------------------------------------------------------
0159               * INPUT
0160               * none
0161               *
0162               * OUTPUT
0163               * none
0164               *--------------------------------------------------------------
0165               * Register usage
0166               * tmp0
0167               *--------------------------------------------------------------
0168               * Remarks
0169               * none
0170               ********|*****|*********************|**************************
0171               tibasic.hearts.tat:
0172 7058 0649  14         dect  stack
0173 705A C64B  30         mov   r11,*stack            ; Save return address
0174 705C 0649  14         dect  stack
0175 705E C644  30         mov   tmp0,*stack           ; Push tmp0
0176 7060 0649  14         dect  stack
0177 7062 C645  30         mov   tmp1,*stack           ; Push tmp1
0178 7064 0649  14         dect  stack
0179 7066 C646  30         mov   tmp2,*stack           ; Push tmp2
0180 7068 0649  14         dect  stack
0181 706A C647  30         mov   tmp3,*stack           ; Push tmp3
0182 706C 0649  14         dect  stack
0183 706E C648  30         mov   tmp4,*stack           ; Push tmp4
0184                       ;-------------------------------------------------------
0185                       ; Get background color for hearts in TAT
0186                       ;-------------------------------------------------------
0187 7070 06A0  32         bl    @vgetb                ; Read VDP byte
     7072 22F0     
0188 7074 1E4B                   data vdp.cmdb.toprow.tat + 91
0189                                                   ; 2nd row in CMDB, column 11
0190               
0191 7076 C144  18         mov   tmp0,tmp1             ; Save color combination
0192 7078 0245  22         andi  tmp1,>000f            ; Only keep background
     707A 000F     
0193 707C 0265  22         ori   tmp1,>0060            ; Set foreground color to red
     707E 0060     
0194               
0195 7080 0204  20         li    tmp0,vdp.cmdb.toprow.tat+91
     7082 1E4B     
0196                                                   ; 2nd row in CMDB, column 11
0197               
0198 7084 C204  18         mov   tmp0,tmp4             ; Backup TAT position
0199 7086 C1C5  18         mov   tmp1,tmp3             ; Backup color combination
0200                       ;-------------------------------------------------------
0201                       ; Dump colors for 5 hearts if in TI Basic dialog (TAT)
0202                       ;-------------------------------------------------------
0203               tibasic.hearts.tat.loop:
0204 7088 C108  18         mov   tmp4,tmp0             ; Get VDP address in TAT
0205 708A C147  18         mov   tmp3,tmp1             ; Get VDP byte to write
0206 708C 0206  20         li    tmp2,2                ; Number of bytes to fill
     708E 0002     
0207               
0208 7090 06A0  32         bl    @xfilv                ; Fill colors
     7092 22A2     
0209                                                   ; i \  tmp0 = start address
0210                                                   ; i |  tmp1 = byte to fill
0211                                                   ; i /  tmp2 = number of bytes to fill
0212               
0213 7094 0228  22         ai    tmp4,4                ; Next heart in TAT
     7096 0004     
0214               
0215 7098 0205  20         li    tmp1,vdp.cmdb.toprow.tat+110
     709A 1E5E     
0216 709C 8148  18         c     tmp4,tmp1
0217 709E 12F4  14         jle   tibasic.hearts.tat.loop
0218                       ;-------------------------------------------------------
0219                       ; Exit
0220                       ;-------------------------------------------------------
0221               tibasic.hearts.tat.exit:
0222 70A0 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0223 70A2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0224 70A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0225 70A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0226 70A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0227 70AA C2F9  30         mov   *stack+,r11           ; Pop R11
0228 70AC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0095                                                   ; Helper functions for TI Basic dialog
0096                       ;-----------------------------------------------------------------------
0097                       ; Stubs
0098                       ;-----------------------------------------------------------------------
0099                       copy  "rom.stubs.bank3.asm" ; Bank specific stubs
     **** ****     > rom.stubs.bank3.asm
0001               * FILE......: rom.stubs.bank3.asm
0002               * Purpose...: Bank 3 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.pack"
0007               * bank1 vec.10
0008               ********|*****|*********************|**************************
0009               edb.line.pack:
0010 70AE 0649  14         dect  stack
0011 70B0 C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 70B2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70B4 2F7E     
0016 70B6 6002                   data bank1.rom        ; | i  p0 = bank address
0017 70B8 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0018 70BA 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 70BC C2F9  30         mov   *stack+,r11           ; Pop r11
0023 70BE 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "edkey.action.cmdb.show"
0028               * bank1 vec.15
0029               ********|*****|*********************|**************************
0030               edkey.action.cmdb.show:
0031 70C0 0649  14         dect  stack
0032 70C2 C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 70C4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70C6 2F7E     
0037 70C8 6002                   data bank1.rom        ; | i  p0 = bank address
0038 70CA 7FDC                   data vec.15           ; | i  p1 = Vector with target address
0039 70CC 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 70CE C2F9  30         mov   *stack+,r11           ; Pop r11
0044 70D0 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "fb.refresh"
0049               * bank1 vec.20
0050               ********|*****|*********************|**************************
0051               fb.refresh:
0052 70D2 0649  14         dect  stack
0053 70D4 C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 70D6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70D8 2F7E     
0058 70DA 6002                   data bank1.rom        ; | i  p0 = bank address
0059 70DC 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0060 70DE 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 70E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 70E2 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.errline.hide"
0070               * bank1 vec.27
0071               ********|*****|*********************|**************************
0072               pane.errline.hide:
0073 70E4 0649  14         dect  stack
0074 70E6 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 1
0077                       ;------------------------------------------------------
0078 70E8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70EA 2F7E     
0079 70EC 6002                   data bank1.rom        ; | i  p0 = bank address
0080 70EE 7FF4                   data vec.27           ; | i  p1 = Vector with target address
0081 70F0 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 70F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 70F4 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               
0090               ***************************************************************
0091               * Stub for "pane.cursor.blink"
0092               * bank1 vec.28
0093               ********|*****|*********************|**************************
0094               pane.cursor.blink:
0095 70F6 0649  14         dect  stack
0096 70F8 C64B  30         mov   r11,*stack            ; Save return address
0097                       ;------------------------------------------------------
0098                       ; Call function in bank 1
0099                       ;------------------------------------------------------
0100 70FA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70FC 2F7E     
0101 70FE 6002                   data bank1.rom        ; | i  p0 = bank address
0102 7100 7FF6                   data vec.28           ; | i  p1 = Vector with target address
0103 7102 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107 7104 C2F9  30         mov   *stack+,r11           ; Pop r11
0108 7106 045B  20         b     *r11                  ; Return to caller
0109               
0110               
0111               ***************************************************************
0112               * Stub for "pane.cursor.hide"
0113               * bank1 vec.29
0114               ********|*****|*********************|**************************
0115               pane.cursor.hide:
0116 7108 0649  14         dect  stack
0117 710A C64B  30         mov   r11,*stack            ; Save return address
0118                       ;------------------------------------------------------
0119                       ; Call function in bank 1
0120                       ;------------------------------------------------------
0121 710C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     710E 2F7E     
0122 7110 6002                   data bank1.rom        ; | i  p0 = bank address
0123 7112 7FF8                   data vec.29           ; | i  p1 = Vector with target address
0124 7114 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0125                       ;------------------------------------------------------
0126                       ; Exit
0127                       ;------------------------------------------------------
0128 7116 C2F9  30         mov   *stack+,r11           ; Pop r11
0129 7118 045B  20         b     *r11                  ; Return to caller
0130               
0131               
0132               ***************************************************************
0133               * Stub for "pane.errline.show"
0134               * bank1 vec.30
0135               ********|*****|*********************|**************************
0136               pane.errline.show:
0137 711A 0649  14         dect  stack
0138 711C C64B  30         mov   r11,*stack            ; Save return address
0139                       ;------------------------------------------------------
0140                       ; Call function in bank 1
0141                       ;------------------------------------------------------
0142 711E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7120 2F7E     
0143 7122 6002                   data bank1.rom        ; | i  p0 = bank address
0144 7124 7FFA                   data vec.30           ; | i  p1 = Vector with target address
0145 7126 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149 7128 C2F9  30         mov   *stack+,r11           ; Pop r11
0150 712A 045B  20         b     *r11                  ; Return to caller
0151               
0152               
0153               ***************************************************************
0154               * Stub for "pane.action.colorscheme.load"
0155               * bank1 vec.31
0156               ********|*****|*********************|**************************
0157               pane.action.colorscheme.load:
0158 712C 0649  14         dect  stack
0159 712E C64B  30         mov   r11,*stack            ; Save return address
0160                       ;------------------------------------------------------
0161                       ; Call function in bank 1
0162                       ;------------------------------------------------------
0163 7130 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7132 2F7E     
0164 7134 6002                   data bank1.rom        ; | i  p0 = bank address
0165 7136 7FFC                   data vec.31           ; | i  p1 = Vector with target address
0166 7138 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0167                       ;------------------------------------------------------
0168                       ; Exit
0169                       ;------------------------------------------------------
0170 713A C2F9  30         mov   *stack+,r11           ; Pop r11
0171 713C 045B  20         b     *r11                  ; Return to caller
0172               
0173               
0174               ***************************************************************
0175               * Stub for "fb.scan.fname"
0176               * bank4 vec.5
0177               ********|*****|*********************|**************************
0178               fb.scan.fname:
0179 713E 0649  14         dect  stack
0180 7140 C64B  30         mov   r11,*stack            ; Save return address
0181                       ;------------------------------------------------------
0182                       ; Call function in bank 4
0183                       ;------------------------------------------------------
0184 7142 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7144 2F7E     
0185 7146 6008                   data bank4.rom        ; | i  p0 = bank address
0186 7148 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0187 714A 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0188                       ;------------------------------------------------------
0189                       ; Exit
0190                       ;------------------------------------------------------
0191 714C C2F9  30         mov   *stack+,r11           ; Pop r11
0192 714E 045B  20         b     *r11                  ; Return to caller
0193               
0194               
0195               ***************************************************************
0196               
0197               ; TODO Include _trampoline.bank1.ret
0198               ; TODO Refactor stubs for using _trampoline.bank1.ret
                   < stevie_b3.asm
0100                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * bank1 vec.1
0009               ********|*****|*********************|**************************
0010               mem.sams.setup.stevie:
0011 7150 0649  14         dect  stack
0012 7152 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 7154 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7156 2F7E     
0017 7158 6002                   data bank1.rom        ; | i  p0 = bank address
0018 715A 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 715C 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 715E C2F9  30         mov   *stack+,r11           ; Pop r11
0024 7160 045B  20         b     *r11                  ; Return to caller
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 7162 0649  14         dect  stack
0035 7164 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7166 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7168 2F7E     
0040 716A 600E                   data bank7.rom        ; | i  p0 = bank address
0041 716C 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 716E 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7170 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7172 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 7174 0649  14         dect  stack
0058 7176 C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7178 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     717A 2F7E     
0063 717C 600E                   data bank7.rom        ; | i  p0 = bank address
0064 717E 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7180 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7182 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7184 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7186 0649  14         dect  stack
0081 7188 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 718A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     718C 2F7E     
0086 718E 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7190 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7192 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7194 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7196 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 7198 0649  14         dect  stack
0104 719A C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 719C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     719E 2F7E     
0109 71A0 600E                   data bank7.rom        ; | i  p0 = bank address
0110 71A2 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 71A4 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 71A6 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 71A8 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 71AA 0649  14         dect  stack
0127 71AC C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 71AE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71B0 2F7E     
0132 71B2 600E                   data bank7.rom        ; | i  p0 = bank address
0133 71B4 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 71B6 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 71B8 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 71BA 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 71BC 0649  14         dect  stack
0150 71BE C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 71C0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71C2 2F7E     
0155 71C4 600E                   data bank7.rom        ; | i  p0 = bank address
0156 71C6 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 71C8 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 71CA C2F9  30         mov   *stack+,r11           ; Pop r11
0162 71CC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0101                       ;-----------------------------------------------------------------------
0102                       ; Program data
0103                       ;-----------------------------------------------------------------------
0104                       copy  "data.strings.bank3.asm"  ; Strings used in bank 3
     **** ****     > data.strings.bank3.asm
0001               * FILE......: data.strings.bank3.asm
0002               * Purpose...: Strings used in Stevie bank 3
0003               
0004               
0005               ***************************************************************
0006               *                       Strings
0007               ***************************************************************
0008               
0009               txt.stevie:
0014 71CE 2053                 text ' Stevie 1.3G-24'
     71D0 7465     
     71D2 7669     
     71D4 6520     
     71D6 312E     
     71D8 3347     
     71DA 2D32     
     71DC 34       
0015                           even
0017               
0018 71DE 1E46     txt.keys.default1  stri 'F9-Back  F3-Clear  F5-Fastmode'
     71E0 392D     
     71E2 4261     
     71E4 636B     
     71E6 2020     
     71E8 4633     
     71EA 2D43     
     71EC 6C65     
     71EE 6172     
     71F0 2020     
     71F2 4635     
     71F4 2D46     
     71F6 6173     
     71F8 746D     
     71FA 6F64     
     71FC 65       
0019 71FD   1F     txt.keys.default2  stri 'F9-Back  F3-Clear  *F5-Fastmode'
     71FE 4639     
     7200 2D42     
     7202 6163     
     7204 6B20     
     7206 2046     
     7208 332D     
     720A 436C     
     720C 6561     
     720E 7220     
     7210 202A     
     7212 4635     
     7214 2D46     
     7216 6173     
     7218 746D     
     721A 6F64     
     721C 65       
0020               
0021               ;--------------------------------------------------------------
0022               ; Dialog "Load file"
0023               ;--------------------------------------------------------------
0024 721D   0E     txt.head.load      byte 14,1,1
     721E 0101     
0025 7220 204F                        text ' Open file '
     7222 7065     
     7224 6E20     
     7226 6669     
     7228 6C65     
     722A 20       
0026 722B   01                        byte 1
0027 722C 1E47     txt.hint.load      stri 'Give filename of file to open.'
     722E 6976     
     7230 6520     
     7232 6669     
     7234 6C65     
     7236 6E61     
     7238 6D65     
     723A 206F     
     723C 6620     
     723E 6669     
     7240 6C65     
     7242 2074     
     7244 6F20     
     7246 6F70     
     7248 656E     
     724A 2E       
0028               
0029      71DE     txt.keys.load      equ txt.keys.default1
0030      71FD     txt.keys.load2     equ txt.keys.default2
0031               
0032               ;--------------------------------------------------------------
0033               ; Dialog "Save file"
0034               ;--------------------------------------------------------------
0035 724B   0E     txt.head.save      byte 14,1,1
     724C 0101     
0036 724E 2053                        text ' Save file '
     7250 6176     
     7252 6520     
     7254 6669     
     7256 6C65     
     7258 20       
0037 7259   01                        byte 1
0038 725A 1601     txt.head.save2     byte 22,1,1
     725C 01       
0039 725D   20                        text ' Save block to file '
     725E 5361     
     7260 7665     
     7262 2062     
     7264 6C6F     
     7266 636B     
     7268 2074     
     726A 6F20     
     726C 6669     
     726E 6C65     
     7270 20       
0040 7271   01                        byte 1
0041 7272 1E47     txt.hint.save      stri 'Give filename of file to save.'
     7274 6976     
     7276 6520     
     7278 6669     
     727A 6C65     
     727C 6E61     
     727E 6D65     
     7280 206F     
     7282 6620     
     7284 6669     
     7286 6C65     
     7288 2074     
     728A 6F20     
     728C 7361     
     728E 7665     
     7290 2E       
0042 7291   11     txt.keys.save      stri 'F9-Back  F3-Clear'
     7292 4639     
     7294 2D42     
     7296 6163     
     7298 6B20     
     729A 2046     
     729C 332D     
     729E 436C     
     72A0 6561     
     72A2 72       
0043               
0044               
0045               ;--------------------------------------------------------------
0046               ; Dialog "Append file"
0047               ;--------------------------------------------------------------
0048 72A3   10     txt.head.append    byte 16,1,1
     72A4 0101     
0049 72A6 2041                        text ' Append file '
     72A8 7070     
     72AA 656E     
     72AC 6420     
     72AE 6669     
     72B0 6C65     
     72B2 20       
0050 72B3   01                        byte 1
0051 72B4 3F47     txt.hint.append    stri 'Give filename of file to append at the end of the current file.'
     72B6 6976     
     72B8 6520     
     72BA 6669     
     72BC 6C65     
     72BE 6E61     
     72C0 6D65     
     72C2 206F     
     72C4 6620     
     72C6 6669     
     72C8 6C65     
     72CA 2074     
     72CC 6F20     
     72CE 6170     
     72D0 7065     
     72D2 6E64     
     72D4 2061     
     72D6 7420     
     72D8 7468     
     72DA 6520     
     72DC 656E     
     72DE 6420     
     72E0 6F66     
     72E2 2074     
     72E4 6865     
     72E6 2063     
     72E8 7572     
     72EA 7265     
     72EC 6E74     
     72EE 2066     
     72F0 696C     
     72F2 652E     
0052               
0053      71DE     txt.keys.append    equ txt.keys.default1
0054      71FD     txt.keys.append2   equ txt.keys.default2
0055               
0056               
0057               ;--------------------------------------------------------------
0058               ; Dialog "Insert file"
0059               ;--------------------------------------------------------------
0060 72F4 1801     txt.head.insert    byte 24,1,1
     72F6 01       
0061 72F7   20                        text ' Insert file at line '
     72F8 496E     
     72FA 7365     
     72FC 7274     
     72FE 2066     
     7300 696C     
     7302 6520     
     7304 6174     
     7306 206C     
     7308 696E     
     730A 6520     
0062 730C 01                          byte 1
0063 730D   20     txt.hint.insert    stri 'Give filename of file to insert.'
     730E 4769     
     7310 7665     
     7312 2066     
     7314 696C     
     7316 656E     
     7318 616D     
     731A 6520     
     731C 6F66     
     731E 2066     
     7320 696C     
     7322 6520     
     7324 746F     
     7326 2069     
     7328 6E73     
     732A 6572     
     732C 742E     
0064               
0065      71DE     txt.keys.insert    equ txt.keys.default1
0066      71FD     txt.keys.insert2   equ txt.keys.default2
0067               
0068               
0069               ;--------------------------------------------------------------
0070               ; Dialog "Configure clipboard"
0071               ;--------------------------------------------------------------
0072 732E 1801     txt.head.clipdev   byte 24,1,1
     7330 01       
0073 7331   20                        text ' Configure clipboard '
     7332 436F     
     7334 6E66     
     7336 6967     
     7338 7572     
     733A 6520     
     733C 636C     
     733E 6970     
     7340 626F     
     7342 6172     
     7344 6420     
0074 7346 01                          byte 1
0075 7347   2D     txt.hint.clipdev   stri 'Give device and filename prefix of clipboard.'
     7348 4769     
     734A 7665     
     734C 2064     
     734E 6576     
     7350 6963     
     7352 6520     
     7354 616E     
     7356 6420     
     7358 6669     
     735A 6C65     
     735C 6E61     
     735E 6D65     
     7360 2070     
     7362 7265     
     7364 6669     
     7366 7820     
     7368 6F66     
     736A 2063     
     736C 6C69     
     736E 7062     
     7370 6F61     
     7372 7264     
     7374 2E       
0076 7375   3B     txt.keys.clipdev   stri 'F9-Back  F3-Clear  ^A=DSK1.CLIP  ^B=DSK2.CLIP  ^C=TIPI.CLIP'
     7376 4639     
     7378 2D42     
     737A 6163     
     737C 6B20     
     737E 2046     
     7380 332D     
     7382 436C     
     7384 6561     
     7386 7220     
     7388 205E     
     738A 413D     
     738C 4453     
     738E 4B31     
     7390 2E43     
     7392 4C49     
     7394 5020     
     7396 205E     
     7398 423D     
     739A 4453     
     739C 4B32     
     739E 2E43     
     73A0 4C49     
     73A2 5020     
     73A4 205E     
     73A6 433D     
     73A8 5449     
     73AA 5049     
     73AC 2E43     
     73AE 4C49     
     73B0 50       
0077               
0078               
0079               ;--------------------------------------------------------------
0080               ; Dialog "Copy clipboard"
0081               ;--------------------------------------------------------------
0082 73B1   1B     txt.head.clipboard byte 27,1,1
     73B2 0101     
0083 73B4 2043                        text ' Copy clipboard to line '
     73B6 6F70     
     73B8 7920     
     73BA 636C     
     73BC 6970     
     73BE 626F     
     73C0 6172     
     73C2 6420     
     73C4 746F     
     73C6 206C     
     73C8 696E     
     73CA 6520     
0084 73CC 01                          byte 1
0085 73CD   10     txt.info.clipboard stri 'Clipboard [1-5]?'
     73CE 436C     
     73D0 6970     
     73D2 626F     
     73D4 6172     
     73D6 6420     
     73D8 5B31     
     73DA 2D35     
     73DC 5D3F     
0086 73DE 4750     txt.hint.clipboard stri 'Press 1 to 5 to copy clipboard, press F7 to configure clipboard device.'
     73E0 7265     
     73E2 7373     
     73E4 2031     
     73E6 2074     
     73E8 6F20     
     73EA 3520     
     73EC 746F     
     73EE 2063     
     73F0 6F70     
     73F2 7920     
     73F4 636C     
     73F6 6970     
     73F8 626F     
     73FA 6172     
     73FC 642C     
     73FE 2070     
     7400 7265     
     7402 7373     
     7404 2046     
     7406 3720     
     7408 746F     
     740A 2063     
     740C 6F6E     
     740E 6669     
     7410 6775     
     7412 7265     
     7414 2063     
     7416 6C69     
     7418 7062     
     741A 6F61     
     741C 7264     
     741E 2064     
     7420 6576     
     7422 6963     
     7424 652E     
0087               
0088 7426 2246     txt.keys.clipboard  stri 'F9-Back  F5-Fastmode  F7-Configure'
     7428 392D     
     742A 4261     
     742C 636B     
     742E 2020     
     7430 4635     
     7432 2D46     
     7434 6173     
     7436 746D     
     7438 6F64     
     743A 6520     
     743C 2046     
     743E 372D     
     7440 436F     
     7442 6E66     
     7444 6967     
     7446 7572     
     7448 65       
0089 7449   23     txt.keys.clipboard2 stri 'F9-Back  *F5-Fastmode  F7-Configure'
     744A 4639     
     744C 2D42     
     744E 6163     
     7450 6B20     
     7452 202A     
     7454 4635     
     7456 2D46     
     7458 6173     
     745A 746D     
     745C 6F64     
     745E 6520     
     7460 2046     
     7462 372D     
     7464 436F     
     7466 6E66     
     7468 6967     
     746A 7572     
     746C 65       
0090               
0091               
0092               ;--------------------------------------------------------------
0093               ; Dialog "Print file"
0094               ;--------------------------------------------------------------
0095 746D   0F     txt.head.print     byte 15,1,1
     746E 0101     
0096 7470 2050                        text ' Print file '
     7472 7269     
     7474 6E74     
     7476 2066     
     7478 696C     
     747A 6520     
0097 747C 01                          byte 1
0098 747D   10     txt.head.print2    byte 16,1,1
     747E 0101     
0099 7480 2050                        text ' Print block '
     7482 7269     
     7484 6E74     
     7486 2062     
     7488 6C6F     
     748A 636B     
     748C 20       
0100 748D   01                        byte 1
0101 748E 2B47     txt.hint.print     stri 'Give printer device name (PIO, PI.PIO, ...)'
     7490 6976     
     7492 6520     
     7494 7072     
     7496 696E     
     7498 7465     
     749A 7220     
     749C 6465     
     749E 7669     
     74A0 6365     
     74A2 206E     
     74A4 616D     
     74A6 6520     
     74A8 2850     
     74AA 494F     
     74AC 2C20     
     74AE 5049     
     74B0 2E50     
     74B2 494F     
     74B4 2C20     
     74B6 2E2E     
     74B8 2E29     
0102 74BA 1146     txt.keys.print     stri 'F9-Back  F3-Clear'
     74BC 392D     
     74BE 4261     
     74C0 636B     
     74C2 2020     
     74C4 4633     
     74C6 2D43     
     74C8 6C65     
     74CA 6172     
0103               
0104               ;--------------------------------------------------------------
0105               ; Dialog "Unsaved changes"
0106               ;--------------------------------------------------------------
0107 74CC 1401     txt.head.unsaved   byte 20,1,1
     74CE 01       
0108 74CF   20                        text ' Unsaved changes '
     74D0 556E     
     74D2 7361     
     74D4 7665     
     74D6 6420     
     74D8 6368     
     74DA 616E     
     74DC 6765     
     74DE 7320     
0109 74E0 01                          byte 1
0110 74E1   21     txt.info.unsaved   stri 'Warning! Unsaved changes in file.'
     74E2 5761     
     74E4 726E     
     74E6 696E     
     74E8 6721     
     74EA 2055     
     74EC 6E73     
     74EE 6176     
     74F0 6564     
     74F2 2063     
     74F4 6861     
     74F6 6E67     
     74F8 6573     
     74FA 2069     
     74FC 6E20     
     74FE 6669     
     7500 6C65     
     7502 2E       
0111 7503   37     txt.hint.unsaved   stri 'Press F6 or SPACE to proceed. Press ENTER to save file.'
     7504 5072     
     7506 6573     
     7508 7320     
     750A 4636     
     750C 206F     
     750E 7220     
     7510 5350     
     7512 4143     
     7514 4520     
     7516 746F     
     7518 2070     
     751A 726F     
     751C 6365     
     751E 6564     
     7520 2E20     
     7522 5072     
     7524 6573     
     7526 7320     
     7528 454E     
     752A 5445     
     752C 5220     
     752E 746F     
     7530 2073     
     7532 6176     
     7534 6520     
     7536 6669     
     7538 6C65     
     753A 2E       
0112 753B   25     txt.keys.unsaved   stri 'F9-Back  F6/SPACE-Proceed  ENTER-Save'
     753C 4639     
     753E 2D42     
     7540 6163     
     7542 6B20     
     7544 2046     
     7546 362F     
     7548 5350     
     754A 4143     
     754C 452D     
     754E 5072     
     7550 6F63     
     7552 6565     
     7554 6420     
     7556 2045     
     7558 4E54     
     755A 4552     
     755C 2D53     
     755E 6176     
     7560 65       
0113               
0114               ;--------------------------------------------------------------
0115               ; Dialog "Help"
0116               ;--------------------------------------------------------------
0117 7561   09     txt.head.about     byte 9,1,1
     7562 0101     
0118 7564 2048                        text ' Help '
     7566 656C     
     7568 7020     
0119 756A 01                          byte 1
0120               
0121 756B   01     txt.info.about     stri ''
     756C 00       
0122 756D   3C     txt.hint.about     stri 'Licensed under GPLv3. Press F9 or ENTER to return to editor.'
     756E 4C69     
     7570 6365     
     7572 6E73     
     7574 6564     
     7576 2075     
     7578 6E64     
     757A 6572     
     757C 2047     
     757E 504C     
     7580 7633     
     7582 2E20     
     7584 5072     
     7586 6573     
     7588 7320     
     758A 4639     
     758C 206F     
     758E 7220     
     7590 454E     
     7592 5445     
     7594 5220     
     7596 746F     
     7598 2072     
     759A 6574     
     759C 7572     
     759E 6E20     
     75A0 746F     
     75A2 2065     
     75A4 6469     
     75A6 746F     
     75A8 722E     
0123 75AA 2446     txt.keys.about     stri 'F9-Back  SPACE-Next Page  ENTER-Back'
     75AC 392D     
     75AE 4261     
     75B0 636B     
     75B2 2020     
     75B4 5350     
     75B6 4143     
     75B8 452D     
     75BA 4E65     
     75BC 7874     
     75BE 2050     
     75C0 6167     
     75C2 6520     
     75C4 2045     
     75C6 4E54     
     75C8 4552     
     75CA 2D42     
     75CC 6163     
     75CE 6B       
0124               
0125 75CF   4E     txt.about.build    byte s#txt.about.build
0126 75D0 4275                        text 'Build: '
     75D2 696C     
     75D4 643A     
     75D6 20       
0127                                  copy "buildstr.asm"
     **** ****     > buildstr.asm
0001 75D7   32                        text '220716-1855230'
     75D8 3230     
     75DA 3731     
     75DC 362D     
     75DE 3138     
     75E0 3535     
     75E2 3233     
     75E4 30       
                   < data.strings.bank3.asm
0128 75E5   20                        text ' / 2018-2022 Filip Van Vooren / retroclouds on Atariage '
     75E6 2F20     
     75E8 3230     
     75EA 3138     
     75EC 2D32     
     75EE 3032     
     75F0 3220     
     75F2 4669     
     75F4 6C69     
     75F6 7020     
     75F8 5661     
     75FA 6E20     
     75FC 566F     
     75FE 6F72     
     7600 656E     
     7602 202F     
     7604 2072     
     7606 6574     
     7608 726F     
     760A 636C     
     760C 6F75     
     760E 6473     
     7610 206F     
     7612 6E20     
     7614 4174     
     7616 6172     
     7618 6961     
     761A 6765     
     761C 20       
0129                                  even
0130               
0131               
0132               ;--------------------------------------------------------------
0133               ; Dialog "Main Menu"
0134               ;--------------------------------------------------------------
0135 761E 0E01     txt.head.menu      byte 14,1,1
     7620 01       
0136 7621   20                        text ' Main Menu '
     7622 4D61     
     7624 696E     
     7626 204D     
     7628 656E     
     762A 7520     
0137 762C 01                          byte 1
0138               
0139 762D   2A     txt.info.menu      stri 'File   Cartridge   Configure   Help   Quit'
     762E 4669     
     7630 6C65     
     7632 2020     
     7634 2043     
     7636 6172     
     7638 7472     
     763A 6964     
     763C 6765     
     763E 2020     
     7640 2043     
     7642 6F6E     
     7644 6669     
     7646 6775     
     7648 7265     
     764A 2020     
     764C 2048     
     764E 656C     
     7650 7020     
     7652 2020     
     7654 5175     
     7656 6974     
0140 7658 0007     pos.info.menu      byte 0,7,20,31,38,>ff
     765A 141F     
     765C 26FF     
0141 765E 0120     txt.hint.menu      stri ' '
0142 7660 0746     txt.keys.menu      stri 'F9-Back'
     7662 392D     
     7664 4261     
     7666 636B     
0143               
0144               
0145               ;--------------------------------------------------------------
0146               ; Dialog "File"
0147               ;--------------------------------------------------------------
0148 7668 0901     txt.head.file      byte 9,1,1
     766A 01       
0149 766B   20                        text ' File '
     766C 4669     
     766E 6C65     
     7670 20       
0150 7671   01                        byte 1
0151               
0152 7672 194E     txt.info.file      stri 'New   Open   Save   Print'
     7674 6577     
     7676 2020     
     7678 204F     
     767A 7065     
     767C 6E20     
     767E 2020     
     7680 5361     
     7682 7665     
     7684 2020     
     7686 2050     
     7688 7269     
     768A 6E74     
0153 768C 0006     pos.info.file      byte 0,6,13,20,>ff
     768E 0D14     
     7690 FF       
0154 7691   01     txt.hint.file      stri ' '
     7692 20       
0155 7693   07     txt.keys.file      stri 'F9-Back'
     7694 4639     
     7696 2D42     
     7698 6163     
     769A 6B       
0156               
0157               
0158               ;--------------------------------------------------------------
0159               ; Dialog "Cartridge"
0160               ;--------------------------------------------------------------
0161 769B   0E     txt.head.cartridge byte 14,1,1
     769C 0101     
0162 769E 2043                        text ' Cartridge '
     76A0 6172     
     76A2 7472     
     76A4 6964     
     76A6 6765     
     76A8 20       
0163 76A9   01                        byte 1
0164               
0165 76AA 0854     txt.info.cartridge stri 'TI Basic'
     76AC 4920     
     76AE 4261     
     76B0 7369     
     76B2 63       
0166 76B3   03     pos.info.cartridge byte 3,>ff
     76B4 FF       
0167 76B5   18     txt.hint.cartridge stri 'Select cartridge to run.'
     76B6 5365     
     76B8 6C65     
     76BA 6374     
     76BC 2063     
     76BE 6172     
     76C0 7472     
     76C2 6964     
     76C4 6765     
     76C6 2074     
     76C8 6F20     
     76CA 7275     
     76CC 6E2E     
0168 76CE 0746     txt.keys.cartridge stri 'F9-Back'
     76D0 392D     
     76D2 4261     
     76D4 636B     
0169               
0170               
0171               ;--------------------------------------------------------------
0172               ; Dialog "TI Basic"
0173               ;--------------------------------------------------------------
0174 76D6 0D01     txt.head.basic     byte 13,1,1
     76D8 01       
0175 76D9   20                        text ' TI Basic '
     76DA 5449     
     76DC 2042     
     76DE 6173     
     76E0 6963     
     76E2 20       
0176 76E3   01                        byte 1
0177               
0178 76E4 1D53     txt.info.basic     stri 'Session:  1   2   3   4   5  '
     76E6 6573     
     76E8 7369     
     76EA 6F6E     
     76EC 3A20     
     76EE 2031     
     76F0 2020     
     76F2 2032     
     76F4 2020     
     76F6 2033     
     76F8 2020     
     76FA 2034     
     76FC 2020     
     76FE 2035     
     7700 2020     
0179 7702 0A0E     pos.info.basic     byte 10,14,18,22,26,>ff
     7704 1216     
     7706 1AFF     
0180 7708 3F50     txt.hint.basic     stri 'Pick session 1-5. Press F9 in TI BASIC for returning to Stevie.'
     770A 6963     
     770C 6B20     
     770E 7365     
     7710 7373     
     7712 696F     
     7714 6E20     
     7716 312D     
     7718 352E     
     771A 2050     
     771C 7265     
     771E 7373     
     7720 2046     
     7722 3920     
     7724 696E     
     7726 2054     
     7728 4920     
     772A 4241     
     772C 5349     
     772E 4320     
     7730 666F     
     7732 7220     
     7734 7265     
     7736 7475     
     7738 726E     
     773A 696E     
     773C 6720     
     773E 746F     
     7740 2053     
     7742 7465     
     7744 7669     
     7746 652E     
0181 7748 1446     txt.keys.basic     stri 'F9-Back  F5-AutoMode'
     774A 392D     
     774C 4261     
     774E 636B     
     7750 2020     
     7752 4635     
     7754 2D41     
     7756 7574     
     7758 6F4D     
     775A 6F64     
     775C 65       
0182 775D   15     txt.keys.basic2    stri 'F9-Back  *F5-AutoMode'
     775E 4639     
     7760 2D42     
     7762 6163     
     7764 6B20     
     7766 202A     
     7768 4635     
     776A 2D41     
     776C 7574     
     776E 6F4D     
     7770 6F64     
     7772 65       
0183               
0184               
0185               ;--------------------------------------------------------------
0186               ; Dialog "Configure"
0187               ;--------------------------------------------------------------
0188 7773   0E     txt.head.config    byte 14,1,1
     7774 0101     
0189 7776 2043                        text ' Configure '
     7778 6F6E     
     777A 6669     
     777C 6775     
     777E 7265     
     7780 20       
0190 7781   01                        byte 1
0191               
0192 7782 1243     txt.info.config    stri 'Clipboard   Editor'
     7784 6C69     
     7786 7062     
     7788 6F61     
     778A 7264     
     778C 2020     
     778E 2045     
     7790 6469     
     7792 746F     
     7794 72       
0193 7795   00     pos.info.config    byte 0,12,>ff
     7796 0CFF     
0194 7798 0120     txt.hint.config    stri ' '
0195 779A 0746     txt.keys.config    stri 'F9-Back'
     779C 392D     
     779E 4261     
     77A0 636B     
                   < stevie_b3.asm
0105                       copy  "data.keymap.presets.asm" ; Shortcut presets in dialogs
     **** ****     > data.keymap.presets.asm
0001               * FILE......: data.keymap.presets.asm
0002               * Purpose...: Shortcut presets in dialogs
0003               
0004               *---------------------------------------------------------------
0005               * Shorcut presets for dialogs
0006               *-------------|---------------------|---------------------------
0007               cmdb.cmd.preset.data:
0008                       ;-------------------------------------------------------
0009                       ; Dialog "Configure clipboard device"
0010                       ;-------------------------------------------------------
0011 77A2 0011             data  id.dialog.clipdev,key.ctrl.a,def.clip.fname
     77A4 0081     
     77A6 3A99     
0012 77A8 0011             data  id.dialog.clipdev,key.ctrl.b,def.clip.fname.b
     77AA 0082     
     77AC 3AA3     
0013 77AE 0011             data  id.dialog.clipdev,key.ctrl.c,def.clip.fname.C
     77B0 0083     
     77B2 3AAD     
0014                       ;------------------------------------------------------
0015                       ; End of list
0016                       ;-------------------------------------------------------
0017 77B4 FFFF             data  EOL                   ; EOL
                   < stevie_b3.asm
0106                       ;-----------------------------------------------------------------------
0107                       ; Bank full check
0108                       ;-----------------------------------------------------------------------
0112                       ;-----------------------------------------------------------------------
0113                       ; Show ROM bank in CPU crash screen
0114                       ;-----------------------------------------------------------------------
0115                       copy "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2450     
0010 7F04 0314                   byte 3,20
0011 7F06 7F0A                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b3.asm
0116                       ;-----------------------------------------------------------------------
0117                       ; Vector table
0118                       ;-----------------------------------------------------------------------
0119                       copy  "rom.vectors.bank3.asm"
     **** ****     > rom.vectors.bank3.asm
0001               * FILE......: rom.vectors.bank3.asm
0002               * Purpose...: Bank 3 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F0A 0552             stri 'ROM#3'
     7F0C 4F4D     
     7F0E 2333     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 608C     vec.1   data  dialog.help           ; Dialog "About"
0016 7FC2 6730     vec.2   data  dialog.load           ; Dialog "Load file"
0017 7FC4 67A2     vec.3   data  dialog.save           ; Dialog "Save file"
0018 7FC6 68F0     vec.4   data  dialog.insert         ; Dialog "Insert file at line ..."
0019 7FC8 681A     vec.5   data  dialog.print          ; Dialog "Print file"
0020 7FCA 66AC     vec.6   data  dialog.file           ; Dialog "File"
0021 7FCC 6AB2     vec.7   data  dialog.unsaved        ; Dialog "Unsaved changes"
0022 7FCE 6A24     vec.8   data  dialog.clipboard      ; Dialog "Copy clipboard to line ..."
0023 7FD0 69D8     vec.9   data  dialog.clipdev        ; Dialog "Configure clipboard device"
0024 7FD2 6996     vec.10  data  dialog.config         ; Dialog "Configure"
0025 7FD4 688A     vec.11  data  dialog.append         ; Dialog "Append file"
0026 7FD6 66EE     vec.12  data  dialog.cartridge      ; Dialog "Cartridge"
0027 7FD8 6AF0     vec.13  data  dialog.basic          ; Dialog "TI Basic"
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 2026     vec.15  data  cpu.crash             ;
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6DB8     vec.18  data  error.display         ; Show error message
0033 7FE4 6B46     vec.19  data  pane.show_hintx       ; Show or hide hint (register version)
0034 7FE6 6BB0     vec.20  data  pane.cmdb.show        ; Show command buffer pane (=dialog)
0035 7FE8 6C34     vec.21  data  pane.cmdb.hide        ; Hide command buffer pane
0036 7FEA 6C98     vec.22  data  pane.cmdb.draw        ; Draw content in command
0037 7FEC 6FDC     vec.23  data  tibasic.buildstr      ; Build TI Basic session identifier string
0038 7FEE 6DEA     vec.24  data  cmdb.refresh          ;
0039 7FF0 6E34     vec.25  data  cmdb.cmd.clear        ;
0040 7FF2 6E66     vec.26  data  cmdb.cmd.getlength    ;
0041 7FF4 6EC6     vec.27  data  cmdb.cmd.preset       ;
0042 7FF6 6E7C     vec.28  data  cmdb.cmd.set          ;
0043 7FF8 7058     vec.29  data  tibasic.hearts.tat    ; Dump color for hearts in TI-Basic dialog
0044 7FFA 604A     vec.30  data  dialog.menu           ; Dialog "Main Menu"
0045 7FFC 6FBA     vec.31  data  tibasic.am.toggle     ; Toggle AutoMode in Run TI-Basic dialog
0046 7FFE 6F08     vec.32  data  fm.fastmode           ; Toggle FastMode on/off in Load dialog
                   < stevie_b3.asm
0120                                                   ; Vector table bank 3
0121               *--------------------------------------------------------------
0122               * Video mode configuration
0123               *--------------------------------------------------------------
0124      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0125      0004     spfbck  equ   >04                   ; Screen background color.
0126      364A     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0127      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0128      0050     colrow  equ   80                    ; Columns per row
0129      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0130      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0131      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0132      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table

    ANYKEY.............. >200A :     
    AT.................. >26D4 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6006 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2E90 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EB8 :     
    CMDB.ACTION.PTR..... >A728 :     
    CMDB.CMD............ >A72B :     
    CMDB.CMD.CLEAR...... >6E34 :     
    CMDB.CMD.CLEAR.EXIT. >6E5C :     
    CMDB.CMD.GETLENGTH.. >6E66 :     
    CMDB.CMD.GETLENGTH.EXIT >6E78 :     
    CMDB.CMD.PRESET..... >6EC6 :     
    CMDB.CMD.PRESET.DATA >77A2 :     
    CMDB.CMD.PRESET.EXIT >6EFE :     
    CMDB.CMD.PRESET.LOOP >6EDE :     
    CMDB.CMD.PRESET.NEXT >6EF2 :     
    CMDB.CMD.SET........ >6E7C :     
    CMDB.CMD.SET.EXIT... >6EBC :     
    CMDB.CMDALL......... >A72A :     
    CMDB.CMDLEN......... >A72A :     
    CMDB.COLUMN......... >A712 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7AE :     
    CMDB.DIALOG......... >A71A :     
    CMDB.DIALOG.VAR..... >A71C :     
    CMDB.DIRTY.......... >A718 :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >31FC :     
    CMDB.INIT.EXIT...... >3232 :     
    CMDB.LENGTH......... >A714 :     
    CMDB.LINES.......... >A716 :     
    CMDB.PANHEAD........ >A71E :     
    CMDB.PANHEAD.BUF.... >A77C :     
    CMDB.PANHINT........ >A722 :     
    CMDB.PANINFO........ >A720 :     
    CMDB.PANKEYS........ >A726 :     
    CMDB.PANMARKERS..... >A724 :     
    CMDB.REFRESH........ >6DEA :     
    CMDB.REFRESH.EXIT... >6E26 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A710 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A70E :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >36E4 :     
    CONST.2............. >2004 :     
    CONST.3............. >36DA :     
    CONST.4............. >2006 :     
    CONST.5............. >36DC :     
    CONST.6............. >36DE :     
    CONST.7............. >36E0 :     
    CONST.8............. >2008 :     
    CONST.9............. >36E2 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A034 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >21A8 :     
    CPU.CRASH.MSG.CRASHED >2192 :     
    CPU.CRASH.MSG.ID.... >21E6 :     
    CPU.CRASH.MSG.MARKER >21C0 :     
    CPU.CRASH.MSG.R..... >21BE :     
    CPU.CRASH.MSG.SOURCE >21CE :     
    CPU.CRASH.MSG.ST.... >21C9 :     
    CPU.CRASH.MSG.WP.... >21C4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F0A :     
    CPU.CRASH.SHOWREG... >20FC :     
    CPU.CRASH.SHOWREG.CONTENT >2152 :     
    CPU.CRASH.SHOWREG.LABEL >210A :     
    CPU.SCRPAD.BACKUP... >2AFE :     
    CPU.SCRPAD.BACKUP.COPY >2B16 :     
    CPU.SCRPAD.BACKUP.EXIT >2B30 :     
    CPU.SCRPAD.PGIN..... >2B84 :     
    CPU.SCRPAD.PGIN.EXIT >2BA6 :     
    CPU.SCRPAD.PGOUT.... >2B46 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B7E :     
    CPU.SCRPAD.PGOUT.EXIT >2B82 :     
    CPU.SCRPAD.RESTORE.. >2B32 :     
    CPU.SCRPAD.RESTORE.COPY >2B3A :     
    CPU.SCRPAD.RESTORE.EXIT >2B44 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24FA :     
    CPYM0............... >2506 :     
    CPYM1............... >2512 :     
    CPYM2............... >251A :     
    CPYM2M.............. >24E8 :     
    CPYM2V.............. >2494 :     
    CPYM3............... >252A :     
    CPYM4............... >2534 :     
    CPYMZ............... >2540 :     
    CPYODD.............. >2542 :     
    CPYV2M.............. >24C6 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3A99 :     
    DEF.CLIP.FNAME.B.... >3AA3 :     
    DEF.CLIP.FNAME.C.... >3AAD :     
    DEF.DEVICES......... >3AB7 :     
    DEF.PRINTER.FNAME... >3A92 :     
    DEVICE.9938......... >0001 :     
    DEVICE.F18A......... >0000 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >688A :     
    DIALOG.APPEND.CURSOR >68DE :     
    DIALOG.APPEND.EXIT.. >68E8 :     
    DIALOG.APPEND.KEYLIST >68CA :     
    DIALOG.APPEND.SETUP. >6896 :     
    DIALOG.BASIC........ >6AF0 :     
    DIALOG.BASIC.AMONLY. >6B30 :     
    DIALOG.BASIC.DONE... >6B34 :     
    DIALOG.BASIC.EXIT... >6B40 :     
    DIALOG.CARTRIDGE.... >66EE :     
    DIALOG.CARTRIDGE.EXIT >672A :     
    DIALOG.CLIPBOARD.... >6A24 :     
    DIALOG.CLIPBOARD.EXIT >6AAC :     
    DIALOG.CLIPBOARD.KEYLIST >6AA4 :     
    DIALOG.CLIPBOARD.SETUP >6A2C :     
    DIALOG.CLIPDEV...... >69D8 :     
    DIALOG.CLIPDEVICE.EXIT >6A1E :     
    DIALOG.CONFIG....... >6996 :     
    DIALOG.CONFIG.EXIT.. >69D2 :     
    DIALOG.FILE......... >66AC :     
    DIALOG.FILE.EXIT.... >66E8 :     
    DIALOG.HELP......... >608C :     
    DIALOG.HELP.CONTENT. >60CC :     
    DIALOG.HELP.CONTENT.EXIT >6138 :     
    DIALOG.HELP.DATA.PAGE1.LEFT >6158 :     
    DIALOG.HELP.DATA.PAGE1.RIGHT >62D0 :     
    DIALOG.HELP.DATA.PAGE2.LEFT >64AC :     
    DIALOG.HELP.DATA.PAGE2.RIGHT >6588 :     
    DIALOG.HELP.DATA.PAGES >6148 :     
    DIALOG.HELP.EXIT.... >60C8 :     
    DIALOG.INSERT....... >68F0 :     
    DIALOG.INSERT.CURSOR >6984 :     
    DIALOG.INSERT.EXIT.. >698E :     
    DIALOG.INSERT.KEYLIST >6970 :     
    DIALOG.INSERT.SETUP. >68FC :     
    DIALOG.LOAD......... >6730 :     
    DIALOG.LOAD.CURSOR.. >6790 :     
    DIALOG.LOAD.EXIT.... >679A :     
    DIALOG.LOAD.KEYLIST. >677C :     
    DIALOG.LOAD.SETUP... >6748 :     
    DIALOG.MENU......... >604A :     
    DIALOG.MENU.EXIT.... >6086 :     
    DIALOG.PRINT........ >681A :     
    DIALOG.PRINT.DEFAULT >6848 :     
    DIALOG.PRINT.EXIT... >6884 :     
    DIALOG.PRINT.HEADER. >6854 :     
    DIALOG.SAVE......... >67A2 :     
    DIALOG.SAVE.DEFAULT. >67D8 :     
    DIALOG.SAVE.EXIT.... >6814 :     
    DIALOG.SAVE.HEADER.. >67F4 :     
    DIALOG.UNSAVED...... >6AB2 :     
    DIALOG.UNSAVED.EXIT. >6AEA :     
    DOFILL.............. >228E :     
    DOWN................ >26DA :     
    DSRLNK.............. >2BA8 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2C02 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C7E :     
    DSRLNK.DSRSCAN.CARDLOOP >2C2E :     
    DSRLNK.DSRSCAN.CARDOFF >2C28 :     
    DSRLNK.DSRSCAN.DSR.8 >2CB0 :     
    DSRLNK.DSRSCAN.DSR.A >2CC0 :     
    DSRLNK.DSRSCAN.GETENTRY >2C58 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C52 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2CA0 :     
    DSRLNK.DSRSCAN.START >2C1E :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CCC :     
    DSRLNK.ERROR.IO_ERROR >2CCE :     
    DSRLNK.ERROR.NODSR_FOUND >2CC8 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CC6 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2BAC :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D18 :     
    DSRLNK.REUSE........ >2CD8 :     
    DSRLNK.REUSE.INIT... >2CDC :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.BLOCK.M1........ >A50C :     
    EDB.BLOCK.M2........ >A50E :     
    EDB.BLOCK.VAR....... >A510 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51A :     
    EDB.FILENAME.PTR.... >A512 :     
    EDB.FILETYPE.PTR.... >A514 :     
    EDB.FREE............ >A56A :     
    EDB.HIPAGE.ALLOC.... >35E4 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >35F0 :     
    EDB.HIPAGE.ALLOC.CRASH >361A :     
    EDB.HIPAGE.ALLOC.EXIT >3622 :     
    EDB.HIPAGE.ALLOC.SETPAGE >360C :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >31B6 :     
    EDB.INIT.EXIT....... >31F6 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >357C :     
    EDB.LINE.GETLENGTH.EXIT >35B8 :     
    EDB.LINE.GETLENGTH.NULL >35B4 :     
    EDB.LINE.GETLENGTH2. >35C0 :     
    EDB.LINE.GETLENGTH2.EXIT >35DE :     
    EDB.LINE.MAPPAGE.... >3532 :     
    EDB.LINE.MAPPAGE.EXIT >3574 :     
    EDB.LINE.MAPPAGE.LOOKUP >354C :     
    EDB.LINE.PACK....... >70AE :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A518 :     
    EDB.SAMS.PAGE....... >A516 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.CMDB.SHOW >70C0 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >6DB8 :     
    ERROR.DISPLAY.EXIT.. >6DE0 :     
    ERRPANE.EXIT........ >325E :     
    ERRPANE.INIT........ >3238 :     
    F18CHK.............. >2762 :     
    F18CHK_EXIT......... >27A0 :     
    F18CHK_GPU.......... >27AC :     
    F18CHK_NO........... >2796 :     
    F18CHK_YES.......... >279C :     
    F18FW1.............. >27DE :     
    F18FWV.............. >27C4 :     
    F18IDL.............. >2758 :     
    F18LCK.............. >274E :     
    F18RST.............. >27B4 :     
    F18UNL.............. >2738 :     
    FB.CALC_POINTER..... >308E :     
    FB.CALC_POINTER.EXIT >30AE :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >300E :     
    FB.INIT.CONT........ >304A :     
    FB.INIT.EXIT........ >306C :     
    FB.REFRESH.......... >70D2 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >3074 :     
    FB.ROW2LINE.EXIT.... >3088 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCAN.FNAME....... >713E :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B6 :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A466 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >229A :     
    FIL16B.............. >2284 :     
    FILCHK.............. >2256 :     
    FILCHK2............. >2266 :     
    FILCHK3............. >2272 :     
    FILE.CLOSE.......... >2D3E :     
    FILE.DELETE......... >2D76 :     
    FILE.IMAGE.LOAD..... >2D72 :     
    FILE.IMAGE.SAVE..... >2D74 :     
    FILE.OPEN........... >2D1A :     
    FILE.RECORD.READ.... >2D4A :     
    FILE.RECORD.SEEK.... >2D70 :     
    FILE.RECORD.WRITE... >2D56 :     
    FILE.RENAME......... >2D78 :     
    FILE.STATUS......... >2D7A :     
    FILM................ >2244 :     
    FILV................ >229C :     
    FILZZ............... >22C2 :     
    FJ.BOTTOM........... >B000 :     
    FM.FASTMODE......... >6F08 :     
    FM.FASTMODE.EXIT.... >6FB0 :     
    FM.FASTMODE.KEYLIST. >6FAC :     
    FM.FASTMODE.OFF..... >6F22 :     
    FM.FASTMODE.OFF.1... >6F4E :     
    FM.FASTMODE.OFF.2... >6F54 :     
    FM.FASTMODE.OFF.3... >6F5A :     
    FM.FASTMODE.OFF.4... >6F60 :     
    FM.FASTMODE.ON...... >6F66 :     
    FM.FASTMODE.ON.1.... >6F96 :     
    FM.FASTMODE.ON.2.... >6F9C :     
    FM.FASTMODE.ON.3.... >6FA2 :     
    FM.FASTMODE.ON.4.... >6FA8 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21FF :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27E0 :     
    HCHAR1.............. >27FA :     
    HCHAR2.............. >2804 :     
    HCHARX.............. >27E6 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2DD6 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3438 :     
    IDX.ENTRY.DELETE.EXIT >3490 :     
    IDX.ENTRY.DELETE.LASTLINE >3464 :     
    IDX.ENTRY.DELETE.REORG >346C :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3476 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >348A :     
    IDX.ENTRY.INSERT.... >34DA :     
    IDX.ENTRY.INSERT.EXIT >3526 :     
    IDX.ENTRY.INSERT.REORG >34F8 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >3502 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3516 :     
    IDX.ENTRY.UPDATE.... >338A :     
    IDX.ENTRY.UPDATE.CLEAR >33C4 :     
    IDX.ENTRY.UPDATE.EXIT >33D4 :     
    IDX.ENTRY.UPDATE.SAVE >33B2 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >30B6 :     
    IDX.INIT.EXIT....... >30F2 :     
    IDX.POINTER.GET..... >33DC :     
    IDX.POINTER.GET.EXIT >341E :     
    IDX.POINTER.GET.PARM >340C :     
    IDX.POINTER.GET.PARM.NULL >3416 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26A4 :     
    INTON............... >26AC :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.S............ >0073 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.S............ >0053 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2E70 :     
    KTHREAD_EXIT........ >2E82 :     
    KTHREAD_KB.......... >2E7E :     
    LDFNT............... >236E :     
    LDFNT1.............. >2386 :     
    LDFNT2.............. >23C0 :     
    LDFNT3.............. >23D4 :     
    LDFNT4.............. >23E8 :     
    LOADMC.............. >2228 :     
    MAGIC.CHECK......... >71BC :     
    MAGIC.CLEAR......... >71AA :     
    MAGIC.SET........... >7198 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >221E :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7174 :     
    MEM.SAMS.SET.LEGACY. >7162 :     
    MEM.SAMS.SET.STEVIE. >7186 :     
    MEM.SAMS.SETUP.STEVIE >7150 :     
    MKHEX............... >2926 :     
    MKHEX1.............. >293E :     
    MKHEX1.DIGIT09...... >2954 :     
    MKHEX1.DIGITAF...... >294A :     
    MKHEX2.............. >295A :     
    MKHEX3.............. >299C :     
    MKHOO1.............. >2E8E :     
    MKHOOK.............. >2E86 :     
    MKNUM............... >29B4 :     
    MKNUM1.............. >29C6 :     
    MKNUM2.............. >29E2 :     
    MKNUM3.............. >29E6 :     
    MKNUM4.............. >29F0 :     
    MKNUM5.............. >29F8 :     
    MKSLO1.............. >2EB4 :     
    MKSLOT.............. >2E9A :     
    MMPLA1.............. >2892 :     
    MMPLA2.............. >2898 :     
    MMPLAY.............. >288A :     
    MUTE................ >2808 :     
    MUTE2............... >280C :     
    MUTTAB.............. >2822 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3674 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A016 :     
    OUTPARM2............ >A018 :     
    OUTPARM3............ >A01A :     
    OUTPARM4............ >A01C :     
    OUTPARM5............ >A01E :     
    OUTPARM6............ >A020 :     
    OUTPARM7............ >A022 :     
    OUTPARM8............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.LOAD >712C :     
    PANE.BOTROW......... >0017 :     
    PANE.CMDB.DRAW...... >6C98 :     
    PANE.CMDB.DRAW.ALPHA.DOWN >6D90 :     
    PANE.CMDB.DRAW.CLEAR >6D26 :     
    PANE.CMDB.DRAW.EXIT. >6DB0 :     
    PANE.CMDB.DRAW.HEARTS >6DA2 :     
    PANE.CMDB.DRAW.HINT. >6D56 :     
    PANE.CMDB.DRAW.MARKER.LOOP >6D36 :     
    PANE.CMDB.DRAW.PROMPTCMD >6D98 :     
    PANE.CMDB.HIDE...... >6C34 :     
    PANE.CMDB.HIDE.EXIT. >6C90 :     
    PANE.CMDB.HIDE.REST. >6C6A :     
    PANE.CMDB.SHOW...... >6BB0 :     
    PANE.CMDB.SHOW.EXIT. >6C2A :     
    PANE.CMDB.SHOW.HIDECHAR.DONE >6BEC :     
    PANE.CURSOR.BLINK... >70F6 :     
    PANE.CURSOR.HIDE.... >7108 :     
    PANE.ERRLINE.HIDE... >70E4 :     
    PANE.ERRLINE.SHOW... >711A :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINT...... >6B9C :     
    PANE.SHOW_HINT.EXIT. >6BAC :     
    PANE.SHOW_HINTX..... >6B46 :     
    PANE.SHOW_HINTX.EXIT >6B90 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >362A :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3642 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >223E :     
    POPR1............... >223C :     
    POPR2............... >223A :     
    POPR3............... >2238 :     
    POPRT............... >2240 :     
    POS.INFO.BASIC...... >7702 :     
    POS.INFO.CARTRIDGE.. >76B3 :     
    POS.INFO.CONFIG..... >7795 :     
    POS.INFO.FILE....... >768C :     
    POS.INFO.MENU....... >7658 :     
    PREFIX.............. >29A8 :     
    PUTAT............... >2450 :     
    PUTHEX.............. >29AA :     
    PUTLST.............. >2458 :     
    PUTLST.EXIT......... >248E :     
    PUTLST.LOOP......... >2460 :     
    PUTNUM.............. >2A32 :     
    PUTSTR.............. >242C :     
    PUTV01.............. >2354 :     
    PUTVR............... >2340 :     
    PUTVRX.............. >2342 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28C4 :     
    RKSCAN.EXIT......... >291A :     
    ROM.FARJUMP......... >2F7E :     
    ROM.FARJUMP.BANKSWITCH.CALL >2FCE :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >2FC6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >2FFC :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >2FF2 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >2FEE :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2FAA :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2FAE :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >2FB6 :     
    ROM.FARJUMP.EXIT.... >3004 :     
    ROM.FARJUMP.RETURN.. >2FD0 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >601E :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3668 :     
    RSSLOT.............. >2EC6 :     
    RUNLI1.............. >2EDE :     
    RUNLI2.............. >2EEA :     
    RUNLI3.............. >2EEE :     
    RUNLI3A............. >2EF6 :     
    RUNLI4.............. >2F00 :     
    RUNLI5.............. >2F0A :     
    RUNLI6.............. >2F18 :     
    RUNLI7.............. >2F26 :     
    RUNLI9.............. >2F2A :     
    RUNLIA.............. >2F4C :     
    RUNLIB.............. >2EDA :     
    RUNLIC.............. >2F56 :     
    RUNLID.............. >2F6C :     
    RUNLIE.............. >2F76 :     
    S16X16.............. >26CC :     
    S8X8................ >26C4 :     
    SAMS.LAYOUT......... >25FC :     
    SAMS.LAYOUT.COPY.... >264C :     
    SAMS.LAYOUT.COPY.DATA >2684 :     
    SAMS.LAYOUT.COPY.EXIT >2678 :     
    SAMS.LAYOUT.COPY.LOOP >266A :     
    SAMS.LAYOUT.EXIT.... >2634 :     
    SAMS.LAYOUT.STANDARD >263C :     
    SAMS.MAPPING.OFF.... >25EE :     
    SAMS.MAPPING.OFF.EXIT >25F8 :     
    SAMS.MAPPING.ON..... >25E0 :     
    SAMS.MAPPING.ON.EXIT >25EA :     
    SAMS.PAGE.GET....... >254A :     
    SAMS.PAGE.GET.EXIT.. >2578 :     
    SAMS.PAGE.SET....... >2580 :     
    SAMS.PAGE.SET.EXIT.. >25D4 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25C4 :     
    SCROFF.............. >2694 :     
    SCRON............... >269C :     
    SCRPAD.83C6......... >2920 :     
    SCRPAD.83FA......... >2922 :     
    SCRPAD.83FE......... >2924 :     
    SDEXI1.............. >28BC :     
    SDEXI2.............. >28BE :     
    SDEXIT.............. >28AA :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2844 :     
    SDPLA2.............. >284E :     
    SDPLA3.............. >2850 :     
    SDPLAY.............. >283C :     
    SDPREP.............. >2826 :     
    SETX................ >26EA :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_F18A_SUPPORT >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E52 :     
    SMAG1X.............. >26B4 :     
    SMAG2X.............. >26BC :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2224 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >364A :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >364A :     
    STRING.GETLENC...... >2AA8 :     
    STRING.GETLENC.EXIT. >2AF4 :     
    STRING.GETLENC.LOOP. >2AD6 :     
    STRING.GETLENC.PANIC >2AEC :     
    STRING.GETLENC.PUTLENGTH >2AE4 :     
    STRING.LTRIM........ >2A3C :     
    STRING.LTRIM.EXIT... >2A9C :     
    STRING.LTRIM.MOVE... >2A82 :     
    STRING.LTRIM.PANIC.. >2A94 :     
    STRING.LTRIM.SCAN... >2A76 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TIB.AUTOMODE........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >3654 :     
    TIBASIC.32X30....... >365E :     
    TIBASIC.AM.EXIT..... >6FD6 :     
    TIBASIC.AM.OFF...... >6FCE :     
    TIBASIC.AM.TOGGLE... >6FBA :     
    TIBASIC.BUILDSTR.... >6FDC :     
    TIBASIC.BUILDSTR.ACTIVE >7030 :     
    TIBASIC.BUILDSTR.CURRENT >701E :     
    TIBASIC.BUILDSTR.EXIT >7046 :     
    TIBASIC.BUILDSTR.LOOP >701A :     
    TIBASIC.BUILDSTR.NEXT >703A :     
    TIBASIC.HEART.OPEN.. >7056 :     
    TIBASIC.HEART.SOLID. >7054 :     
    TIBASIC.HEARTS.TAT.. >7058 :     
    TIBASIC.HEARTS.TAT.EXIT >70A0 :     
    TIBASIC.HEARTS.TAT.LOOP >7088 :     
    TIMERS.............. >A064 :     
    TMDAT............... >2E6E :     
    TMGR................ >2DD2 :     
    TMGR1............... >2DD6 :     
    TMGR10.............. >2E56 :     
    TMGR11.............. >2E64 :     
    TMGR12.............. >2E68 :     
    TMGR1A.............. >2DE4 :     
    TMGR2............... >2DEA :     
    TMGR3............... >2DFA :     
    TMGR4............... >2E0C :     
    TMGR5............... >2E22 :     
    TMGR6............... >2E26 :     
    TMGR7............... >2E2A :     
    TMGR8............... >2E2C :     
    TMGR9............... >2E34 :     
    TMP0................ >0004 :     
    TMP006.............. >23F0 :     
    TMP007.............. >24E6 :     
    TMP008.............. >24C4 :     
    TMP011.............. >2548 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2A0C :     
    TRIMNUM_FILL........ >2A2A :     
    TRIMNUM_SCAN........ >2A18 :     
    TRIMNUM_SETLEN...... >2A24 :     
    TRMPVECTOR.......... >A032 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3676 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A230 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D0 :     
    TV.INIT............. >3268 :     
    TV.INIT.EXIT........ >32A4 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3312 :     
    TV.PAD.STRING.EXIT.. >337E :     
    TV.PAD.STRING.LOOP.. >3368 :     
    TV.PAD.STRING.PANIC. >3376 :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >32AE :     
    TV.RESET............ >32BC :     
    TV.RESET.EXIT....... >32E2 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22C :     
    TV.TABS.TABLE....... >36C6 :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UNPACK.UINT16.... >32E6 :     
    TV.UNPACK.UINT16.EXIT >330C :     
    TX4024.............. >2209 :     
    TX8024.............. >2213 :     
    TXT.ABOUT.BUILD..... >75CF :     
    TXT.ALPHA.DOWN...... >39AC :     
    TXT.BLOCK.CLIP...... >3770 :     
    TXT.BLOCK.COPY...... >3734 :     
    TXT.BLOCK.DEL....... >3721 :     
    TXT.BLOCK.INSIDE.... >3A54 :     
    TXT.BLOCK.MOVE...... >3746 :     
    TXT.BLOCK.PRINT..... >3789 :     
    TXT.BLOCK.SAVE...... >3757 :     
    TXT.BOTTOM.......... >36E8 :     
    TXT.CLEARMEM........ >379C :     
    TXT.CMDB.PROMPT..... >3A82 :     
    TXT.COLORSCHEME..... >3A84 :     
    TXT.DELIM........... >36E6 :     
    TXT.DONE.APPEND..... >37D0 :     
    TXT.DONE.CLIPBOARD.. >3820 :     
    TXT.DONE.CLIPDEV.... >3830 :     
    TXT.DONE.COPY....... >37F0 :     
    TXT.DONE.DELETE..... >380F :     
    TXT.DONE.INSERT..... >37BF :     
    TXT.DONE.LOAD....... >37B0 :     
    TXT.DONE.PRINT...... >37FF :     
    TXT.DONE.SAVE....... >37E1 :     
    TXT.FASTMODE........ >383E :     
    TXT.FILETYPE.DV80... >38BD :     
    TXT.FILETYPE.NONE... >39BD :     
    TXT.HEAD.ABOUT...... >7561 :     
    TXT.HEAD.APPEND..... >72A3 :     
    TXT.HEAD.BASIC...... >76D6 :     
    TXT.HEAD.CARTRIDGE.. >769B :     
    TXT.HEAD.CLIPBOARD.. >73B1 :     
    TXT.HEAD.CLIPDEV.... >732E :     
    TXT.HEAD.CONFIG..... >7773 :     
    TXT.HEAD.FILE....... >7668 :     
    TXT.HEAD.INSERT..... >72F4 :     
    TXT.HEAD.LOAD....... >721D :     
    TXT.HEAD.MENU....... >761E :     
    TXT.HEAD.PRINT...... >746D :     
    TXT.HEAD.PRINT2..... >747D :     
    TXT.HEAD.SAVE....... >724B :     
    TXT.HEAD.SAVE2...... >725A :     
    TXT.HEAD.UNSAVED.... >74CC :     
    TXT.HINT.ABOUT...... >756D :     
    TXT.HINT.APPEND..... >72B4 :     
    TXT.HINT.BASIC...... >7708 :     
    TXT.HINT.CARTRIDGE.. >76B5 :     
    TXT.HINT.CLIPBOARD.. >73DE :     
    TXT.HINT.CLIPDEV.... >7347 :     
    TXT.HINT.CONFIG..... >7798 :     
    TXT.HINT.FILE....... >7691 :     
    TXT.HINT.INSERT..... >730D :     
    TXT.HINT.LOAD....... >722C :     
    TXT.HINT.MENU....... >765E :     
    TXT.HINT.PRINT...... >748E :     
    TXT.HINT.SAVE....... >7272 :     
    TXT.HINT.UNSAVED.... >7503 :     
    TXT.INFO.ABOUT...... >756B :     
    TXT.INFO.BASIC...... >76E4 :     
    TXT.INFO.CARTRIDGE.. >76AA :     
    TXT.INFO.CLIPBOARD.. >73CD :     
    TXT.INFO.CONFIG..... >7782 :     
    TXT.INFO.FILE....... >7672 :     
    TXT.INFO.MENU....... >762D :     
    TXT.INFO.UNSAVED.... >74E1 :     
    TXT.INSERT.......... >36F2 :     
    TXT.IO.NOFILE....... >3A0F :     
    TXT.IOERR.LOAD...... >39C8 :     
    TXT.IOERR.PRINT..... >39F3 :     
    TXT.IOERR.SAVE...... >39DE :     
    TXT.KB.............. >3863 :     
    TXT.KEYMARKER....... >39B2 :     
    TXT.KEYS.ABOUT...... >75AA :     
    TXT.KEYS.APPEND..... >71DE :     
    TXT.KEYS.APPEND2.... >71FD :     
    TXT.KEYS.BASIC...... >7748 :     
    TXT.KEYS.BASIC1..... >392E :     
    TXT.KEYS.BASIC2..... >775D :     
    TXT.KEYS.BLOCK...... >38F7 :     
    TXT.KEYS.CARTRIDGE.. >76CE :     
    TXT.KEYS.CLIPBOARD.. >7426 :     
    TXT.KEYS.CLIPBOARD2. >7449 :     
    TXT.KEYS.CLIPDEV.... >7375 :     
    TXT.KEYS.CONFIG..... >779A :     
    TXT.KEYS.DEFAULT.... >38CA :     
    TXT.KEYS.DEFAULT1... >71DE :     
    TXT.KEYS.DEFAULT2... >71FD :     
    TXT.KEYS.DEFAULTB... >38DB :     
    TXT.KEYS.FILE....... >7693 :     
    TXT.KEYS.INSERT..... >71DE :     
    TXT.KEYS.INSERT2.... >71FD :     
    TXT.KEYS.LOAD....... >71DE :     
    TXT.KEYS.LOAD2...... >71FD :     
    TXT.KEYS.MENU....... >7660 :     
    TXT.KEYS.PRINT...... >74BA :     
    TXT.KEYS.SAVE....... >7291 :     
    TXT.KEYS.UNSAVED.... >753B :     
    TXT.LINES........... >3866 :     
    TXT.LOADING......... >36F8 :     
    TXT.M1.............. >38C2 :     
    TXT.M2.............. >38C6 :     
    TXT.MEMFULL.LOAD.... >3A26 :     
    TXT.NEWFILE......... >386C :     
    TXT.OVRWRITE........ >36EE :     
    TXT.PRINTING........ >370E :     
    TXT.RULER........... >395B :     
    TXT.SAVING.......... >3703 :     
    TXT.STAR............ >36F6 :     
    TXT.STEVIE.......... >71CE :     
    TXT.TIB1............ >3877 :     
    TXT.TIB2............ >3885 :     
    TXT.TIB3............ >3893 :     
    TXT.TIB4............ >38A1 :     
    TXT.TIB5............ >38AF :     
    TXT.UNCRUNCHING..... >3847 :     
    TXT.VERTLINE........ >39B0 :     
    TXT.WS1............. >39B4 :     
    TXT.WS2............. >39B6 :     
    TXT.WS3............. >39B9 :     
    TXT.WS4............. >39BD :     
    TXT.WS5............. >39C2 :     
    UNPACKED.STRING..... >A02C :     
    UP.................. >26E2 :     
    VDP.CMDB.TOPROW.TAT. >1DF0 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0780 :     
    VDP.TAT.BASE........ >1800 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >286E :     
    VDPLA2.............. >2874 :     
    VDPLA3.............. >2884 :     
    VDPLAY.............. >2856 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22C8 :     
    VDWA................ >22C4 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22F0 :     
    VIDTA1.............. >2322 :     
    VIDTAB.............. >2306 :     
    VPUTB............... >22D6 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B86 :     
    XCPU.SCRPAD.PGOUT... >2B58 :     
    XFILE.CLOSE......... >2D40 :     
    XFILE.OPEN.......... >2D1E :     
    XFILM............... >224A :     
    XFILV............... >22A2 :     
    XIDTAB.............. >2308 :     
    XLSLOT.............. >2EBA :     
    XPYM2M.............. >24EE :     
    XPYM2V.............. >249A :     
    XPYV2M.............. >24CC :     
    XROM.FARJUMP........ >2F84 :     
    XSAMS.LAYOUT........ >25FE :     
    XSAMS.PAGE.GET...... >254C :     
    XSAMS.PAGE.SET...... >2584 :     
    XSETX............... >26EC :     
    XSTRING.GETLENC..... >2AC2 :     
    XSTRING.LTRIM....... >2A58 :     
    XUTST0.............. >242E :     
    XUTSTR.............. >2430 :     
    XVGETB.............. >22F2 :     
    XVPUTB.............. >22DA :     
    YX2PI1.............. >2724 :     
    YX2PI2.............. >272A :     
    YX2PI3.............. >2734 :     
    YX2PNT.............. >2408 :     
    YX2PX............... >26F6 :     
    YX2PXX.............. >26FA :     
    YX2PXX_C80.......... >2736 :     
    YX2PXX_NORMAL....... >271A :     
    YX2PXX_Y_CALC....... >271E :     
    _FILE.RECORD.FOP.... >2D7C :     
    _FILE.RECORD.FOP.EXIT >2DCE :     
    _FILE.RECORD.FOP.OPTIMIZED >2DB2 :     
    _FILE.RECORD.FOP.PAB >2DB6 :     
    _IDX.ENTRY.DELETE.REORG >3428 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3430 :     
    _IDX.ENTRY.INSERT.REORG >349C :     
    _IDX.ENTRY.INSERT.REORG.CRASH >34A2 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >34CA :     
    _IDX.SAMS.MAPCOLUMN.OFF >312C :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >315A :     
    _IDX.SAMS.MAPCOLUMN.ON >30F8 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3122 :     
    _IDX.SAMSPAGE.GET... >3166 :     
    _IDX.SAMSPAGE.GET.EXIT >31AC :     
