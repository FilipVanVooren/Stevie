XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b3.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2022 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b3.asm
0020               *
0021               * Bank 3 "John"
0022               * Dialogs & Command Buffer pane
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 220726-1553430
0003               ***************************************************************
                   < stevie_b3.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037               
0038               
0039               
0040               *--------------------------------------------------------------
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0059      0001     device.f18a               equ  1       ; F18a GPU
0060      0000     device.9938               equ  0       ; 9938 GPU
0061      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
                   < stevie_b3.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b3.asm
0027                       copy  "equates.asm"         ; Equates Stevie configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0068               
0069      001D     pane.botrow               equ  29      ; Bottom row on screen
0070               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0092               ;-----------------------------------------------------------------
0093               ;   Dialog ID's >= 100 indicate that command prompt should be
0094               ;   hidden and no characters added to CMDB keyboard buffer.
0095               ;-----------------------------------------------------------------
0096      0064     id.dialog.menu            equ  100     ; "Main Menu"
0097      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0098      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0099      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0100      0068     id.dialog.help            equ  104     ; "About"
0101      0069     id.dialog.file            equ  105     ; "File"
0102      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0103      006B     id.dialog.basic           equ  107     ; "TI Basic"
0104      006C     id.dialog.config          equ  108     ; "Configure"
0105      006D     id.dialog.editor          equ  109     ; "Configure editor"
0106      006E     id.dialog.shortcuts       equ  110     ; "Shortcuts"
0107               *--------------------------------------------------------------
0108               * Suffix characters for clipboards
0109               *--------------------------------------------------------------
0110      3100     clip1                     equ  >3100   ; '1'
0111      3200     clip2                     equ  >3200   ; '2'
0112      3300     clip3                     equ  >3300   ; '3'
0113      3400     clip4                     equ  >3400   ; '4'
0114      3500     clip5                     equ  >3500   ; '5'
0115               *--------------------------------------------------------------
0116               * Keyboard flags in Stevie
0117               *--------------------------------------------------------------
0118      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0119               
0120               *--------------------------------------------------------------
0121               * File work mode
0122               *--------------------------------------------------------------
0123      0001     id.file.loadfile          equ  1       ; Load file
0124      0002     id.file.insertfile        equ  2       ; Insert file
0125      0003     id.file.appendfile        equ  3       ; Append file
0126      0004     id.file.savefile          equ  4       ; Save file
0127      0005     id.file.saveblock         equ  5       ; Save block to file
0128      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0129      0007     id.file.printfile         equ  7       ; Print file
0130      0008     id.file.printblock        equ  8       ; Print block
0131               *--------------------------------------------------------------
0132               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0133               *--------------------------------------------------------------
0134      A000     core1.top         equ  >a000           ; Structure begin
0135      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0136      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0137      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0138      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0139      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0140      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0141      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0142      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0143      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0144      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0145      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0146      A016     outparm1          equ  core1.top + 22  ; Function output parameter 1
0147      A018     outparm2          equ  core1.top + 24  ; Function output parameter 2
0148      A01A     outparm3          equ  core1.top + 26  ; Function output parameter 3
0149      A01C     outparm4          equ  core1.top + 28  ; Function output parameter 4
0150      A01E     outparm5          equ  core1.top + 30  ; Function output parameter 5
0151      A020     outparm6          equ  core1.top + 32  ; Function output parameter 6
0152      A022     outparm7          equ  core1.top + 34  ; Function output parameter 7
0153      A024     outparm8          equ  core1.top + 36  ; Function output parameter 8
0154      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0155      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0156      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0157      A02C     unpacked.string   equ  core1.top + 44  ; 6 char string with unpacked uin16
0158      A032     trmpvector        equ  core1.top + 50  ; Vector trampoline (if p1|tmp1 = >ffff)
0159      A034     core1.free1       equ  core1.top + 52  ; 52-85 **free**
0160      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0161      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0162                                 ;--------------------------------------------
0163                                 ; TI Basic related
0164                                 ;--------------------------------------------
0165      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0166      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0167      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0168      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0169      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0170      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0171      A0C0     tib.automode      equ  core1.top + 192 ; TI-Basic AutoMode (crunch/uncrunch)
0172      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0173      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0174      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0175      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0176      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0177      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0178      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0179      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0180      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0181      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0182      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0183      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0184      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0185      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0186      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0187      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0188      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0189      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0190      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0191      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0192      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0193      A100     core1.free        equ  core1.top + 256 ; End of structure
0194               *--------------------------------------------------------------
0195               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0196               *--------------------------------------------------------------
0197      A100     core2.top         equ  >a100           ; Structure begin
0198      A100     rambuf            equ  core2.top       ; RAM workbuffer
0199      A200     core2.free        equ  core2.top + 256 ; End of structure
0200               *--------------------------------------------------------------
0201               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0202               *--------------------------------------------------------------
0203      A200     tv.top            equ  >a200           ; Structure begin
0204      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0205      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0206      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0207      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0208      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0209      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0210      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0211      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0212      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0213      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0214      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0215      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0216      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0217      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0218      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0219      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0220      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0221      A222     tv.pane.focus     equ  tv.top + 34     ; Identify pane that has focus
0222      A224     tv.task.oneshot   equ  tv.top + 36     ; Pointer to one-shot routine
0223      A226     tv.fj.stackpnt    equ  tv.top + 38     ; Pointer to farjump return stack
0224      A228     tv.error.visible  equ  tv.top + 40     ; Error pane visible
0225      A22A     tv.error.rows     equ  tv.top + 42     ; Number of rows in error pane
0226      A22C     tv.sp2.conf       equ  tv.top + 44     ; Backup of SP2 config register
0227      A22E     tv.sp2.stack      equ  tv.top + 46     ; Backup of SP2 stack register
0228      A230     tv.error.msg      equ  tv.top + 48     ; Error message (max. 160 characters)
0229      A2D0     tv.free           equ  tv.top + 208    ; End of structure
0230               *--------------------------------------------------------------
0231               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0232               *--------------------------------------------------------------
0233      A300     fb.struct         equ  >a300           ; Structure begin
0234      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0235      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0236      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0237                                                      ; line X in editor buffer).
0238      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0239                                                      ; (offset 0 .. @fb.scrrows)
0240      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0241      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0242      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0243      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0244      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0245      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0246      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0247      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0248      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0249      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0250      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0251      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0252      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0253      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0254      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0255               *--------------------------------------------------------------
0256               * File handle structure               @>a400-a4ff   (256 bytes)
0257               *--------------------------------------------------------------
0258      A400     fh.struct         equ  >a400           ; stevie file handling structures
0259               ;***********************************************************************
0260               ; ATTENTION
0261               ; The dsrlnk variables must form a continuous memory block and keep
0262               ; their order!
0263               ;***********************************************************************
0264      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0265      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0266      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0267      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0268      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0269      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0270      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0271      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0272      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0273      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0274      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0275      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0276      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0277      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0278      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0279      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0280      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0281      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0282      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0283      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0284      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0285      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0286      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0287      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0288      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0289      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0290      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0291      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0292      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0293      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0294      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0295      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0296      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0297      A466     fh.membuffer      equ  fh.struct +102  ; 80 bytes file memory buffer
0298      A4B6     fh.free           equ  fh.struct +182  ; End of structure
0299      0960     fh.vrecbuf        equ  >0960           ; VDP address record buffer
0300      0A60     fh.vpab           equ  >0a60           ; VDP address PAB
0301               *--------------------------------------------------------------
0302               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0303               *--------------------------------------------------------------
0304      A500     edb.struct        equ  >a500           ; Begin structure
0305      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0306      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0307      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0308      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0309      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0310      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0311      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0312      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0313      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0314      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0315      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0316                                                      ; with current filename.
0317      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0318                                                      ; with current file type.
0319      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0320      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0321               
0322      A51C     edb.filename      equ  edb.struct + 28 ; 80 characters inline buffer reserved
0323                                                      ; for filename, but not always used.
0324      A56C     edb.free          equ  edb.struct + 108; End of structure
0325               *--------------------------------------------------------------
0326               * Index structure                     @>a600-a6ff   (256 bytes)
0327               *--------------------------------------------------------------
0328      A600     idx.struct        equ  >a600           ; stevie index structure
0329      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0330      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0331      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0332      A606     idx.free          equ  idx.struct + 6  ; End of structure
0333               *--------------------------------------------------------------
0334               * Command buffer structure            @>a700-a7ff   (256 bytes)
0335               *--------------------------------------------------------------
0336      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0337      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0338      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0339      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0340      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0341      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0342      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0343      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0344      A70E     cmdb.yxtop        equ  cmdb.struct + 14; YX position of CMDB pane header line
0345      A710     cmdb.yxprompt     equ  cmdb.struct + 16; YX position of command buffer prompt
0346      A712     cmdb.column       equ  cmdb.struct + 18; Current column in command buffer pane
0347      A714     cmdb.length       equ  cmdb.struct + 20; Length of current row in CMDB
0348      A716     cmdb.lines        equ  cmdb.struct + 22; Total lines in CMDB
0349      A718     cmdb.dirty        equ  cmdb.struct + 24; Command buffer dirty (Text changed!)
0350      A71A     cmdb.dialog       equ  cmdb.struct + 26; Dialog identifier
0351      A71C     cmdb.dialog.var   equ  cmdb.struct + 28; Dialog private variable or pointer
0352      A71E     cmdb.panhead      equ  cmdb.struct + 30; Pointer to string pane header
0353      A720     cmdb.paninfo      equ  cmdb.struct + 32; Pointer to string pane info (1st line)
0354      A722     cmdb.panhint      equ  cmdb.struct + 34; Pointer to string pane hint (2nd line)
0355      A724     cmdb.panhint2     equ  cmdb.struct + 36; Pointer to string pane hint (extra)
0356      A726     cmdb.panmarkers   equ  cmdb.struct + 38; Pointer to key marker list  (3rd line)
0357      A728     cmdb.pankeys      equ  cmdb.struct + 40; Pointer to string pane keys (stat line)
0358      A72A     cmdb.action.ptr   equ  cmdb.struct + 42; Pointer to function to execute
0359      A72C     cmdb.cmdall       equ  cmdb.struct + 44; Current command including length-byte
0360      A72C     cmdb.cmdlen       equ  cmdb.struct + 44; Length of current command (MSB byte!)
0361      A72D     cmdb.cmd          equ  cmdb.struct + 45; Current command (80 bytes max.)
0362      A77E     cmdb.panhead.buf  equ  cmdb.struct +126; String buffer for pane header
0363      A7B0     cmdb.dflt.fname   equ  cmdb.struct +176; Default for filename
0364      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0365               *--------------------------------------------------------------
0366               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0367               *--------------------------------------------------------------
0368      A900     sp2.stktop        equ  >a900           ; \
0369                                                      ; | The stack grows from high memory
0370                                                      ; | towards low memory.
0371                                                      ; |
0372                                                      ; | Stack leaking is checked in SP2
0373                                                      ; | user hook "edkey.keyscan.hook"
0374                                                      ; /
0375               *--------------------------------------------------------------
0376               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0377               *--------------------------------------------------------------
0378      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0379                                                      ; / stored in cartridge ROM bank7.asm
0380               
0381      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0382                                                      ; | scratchpad backup/restore routines.
0383                                                      ; /
0384               
0385      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0386               
0387      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0388                                                      ; calling TI Basic/External programs
0389               *--------------------------------------------------------------
0390               * Farjump return stack                @>af00-afff   (256 bytes)
0391               *--------------------------------------------------------------
0392      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0393                                                      ; Grows downwards from high to low.
0394               *--------------------------------------------------------------
0395               * Index                               @>b000-bfff  (4096 bytes)
0396               *--------------------------------------------------------------
0397      B000     idx.top           equ  >b000           ; Top of index
0398      1000     idx.size          equ  4096            ; Index size
0399               *--------------------------------------------------------------
0400               * Editor buffer                       @>c000-cfff  (4096 bytes)
0401               *--------------------------------------------------------------
0402      C000     edb.top           equ  >c000           ; Editor buffer high memory
0403      1000     edb.size          equ  4096            ; Editor buffer size
0404               *--------------------------------------------------------------
0405               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0406               *--------------------------------------------------------------
0407      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0408      0960     fb.size           equ  80*30           ; Frame buffer size
0409      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0410                                                      ; / >d960->dcff
0411               *--------------------------------------------------------------
0412               * Defaults area                       @>de00-dfff  (3584 bytes)
0413               *--------------------------------------------------------------
0414      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0415      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0416               *--------------------------------------------------------------
0417               * Command buffer history              @>e000-efff  (4096 bytes)
0418               *--------------------------------------------------------------
0419      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0420      1000     cmdb.size         equ  4096            ; Command buffer size
0421               *--------------------------------------------------------------
0422               * Heap                                @>f000-ffff  (4096 bytes)
0423               *--------------------------------------------------------------
0424      F000     heap.top          equ  >f000           ; Top of heap
0425               
0426               
0427               *--------------------------------------------------------------
0428               * Stevie specific equates
0429               *--------------------------------------------------------------
0430      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0431      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0432      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0433      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0434               
0435      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0436      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0437      1FD0     vdp.cmdb.toprow.tat       equ  >1800 + ((pane.botrow - 4) * 80)
0438                                                      ; VDP TAT address of 1st CMDB row
0439      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0440      0960     vdp.sit.size              equ  (pane.botrow + 1) * 80
0441                                                      ; VDP SIT size 80 columns, 24/30 rows
0442      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0443      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0444      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b3.asm
0028                       copy  "equates.c99.asm"     ; Equates related to classic99 emulator
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b3.asm
0029                       copy  "equates.tib.asm"     ; Equates related to TI Basic session
     **** ****     > equates.tib.asm
0001               * FILE......: equates.tib.asm
0002               * Purpose...: Equates for TI Basic session
0003               
0004               *--------------------------------------------------------------
0005               * Equates mainly used while TI Basic session is running
0006               *--------------------------------------------------------------
0007      FF00     tib.aux           equ  >ff00           ; Auxiliary memory 256 bytes
0008      FF00     tib.aux.fname     equ  tib.aux         ; TI Basic program filename
0009      FFFA     tib.aux.end       equ  >fffa           ; \ End of auxiliary memory
0010                                                      ; | >fffc-ffff is reserved
0011                                                      ; / for NMI vector.
                   < stevie_b3.asm
0030                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0045     key.uc.e      equ >45               ; E
0025      0046     key.uc.f      equ >46               ; F
0026      0048     key.uc.h      equ >48               ; H
0027      0049     key.uc.i      equ >49               ; I
0028      004D     key.uc.m      equ >4d               ; M
0029      004E     key.uc.n      equ >4e               ; N
0030      0052     key.uc.r      equ >52               ; R
0031      0053     key.uc.s      equ >53               ; S
0032      004F     key.uc.o      equ >4f               ; O
0033      0050     key.uc.p      equ >50               ; P
0034      0051     key.uc.q      equ >51               ; Q
0035      00A2     key.lc.b      equ >a2               ; b
0036      00A5     key.lc.e      equ >a5               ; e
0037      00A6     key.lc.f      equ >a6               ; f
0038      00A8     key.lc.h      equ >a8               ; h
0039      006E     key.lc.n      equ >6e               ; n
0040      0073     key.lc.s      equ >73               ; s
0041      006F     key.lc.o      equ >6f               ; o
0042      0070     key.lc.p      equ >70               ; p
0043      0071     key.lc.q      equ >71               ; q
0044               *---------------------------------------------------------------
0045               * Keyboard scancodes - Function keys
0046               *-------------|---------------------|---------------------------
0047      00BC     key.fctn.0    equ >bc               ; fctn + 0
0048      0003     key.fctn.1    equ >03               ; fctn + 1
0049      0004     key.fctn.2    equ >04               ; fctn + 2
0050      0007     key.fctn.3    equ >07               ; fctn + 3
0051      0002     key.fctn.4    equ >02               ; fctn + 4
0052      000E     key.fctn.5    equ >0e               ; fctn + 5
0053      000C     key.fctn.6    equ >0c               ; fctn + 6
0054      0001     key.fctn.7    equ >01               ; fctn + 7
0055      0006     key.fctn.8    equ >06               ; fctn + 8
0056      000F     key.fctn.9    equ >0f               ; fctn + 9
0057      0000     key.fctn.a    equ >00               ; fctn + a
0058      00BE     key.fctn.b    equ >be               ; fctn + b
0059      0000     key.fctn.c    equ >00               ; fctn + c
0060      0009     key.fctn.d    equ >09               ; fctn + d
0061      000B     key.fctn.e    equ >0b               ; fctn + e
0062      0000     key.fctn.f    equ >00               ; fctn + f
0063      0000     key.fctn.g    equ >00               ; fctn + g
0064      00BF     key.fctn.h    equ >bf               ; fctn + h
0065      0000     key.fctn.i    equ >00               ; fctn + i
0066      00C0     key.fctn.j    equ >c0               ; fctn + j
0067      00C1     key.fctn.k    equ >c1               ; fctn + k
0068      00C2     key.fctn.l    equ >c2               ; fctn + l
0069      00C3     key.fctn.m    equ >c3               ; fctn + m
0070      00C4     key.fctn.n    equ >c4               ; fctn + n
0071      0000     key.fctn.o    equ >00               ; fctn + o
0072      0000     key.fctn.p    equ >00               ; fctn + p
0073      00C5     key.fctn.q    equ >c5               ; fctn + q
0074      0000     key.fctn.r    equ >00               ; fctn + r
0075      0008     key.fctn.s    equ >08               ; fctn + s
0076      0000     key.fctn.t    equ >00               ; fctn + t
0077      0000     key.fctn.u    equ >00               ; fctn + u
0078      007F     key.fctn.v    equ >7f               ; fctn + v
0079      007E     key.fctn.w    equ >7e               ; fctn + w
0080      000A     key.fctn.x    equ >0a               ; fctn + x
0081      00C6     key.fctn.y    equ >c6               ; fctn + y
0082      0000     key.fctn.z    equ >00               ; fctn + z
0083               *---------------------------------------------------------------
0084               * Keyboard scancodes - Function keys extra
0085               *---------------------------------------------------------------
0086      00B9     key.fctn.dot    equ >b9             ; fctn + .
0087      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0088      0005     key.fctn.plus   equ >05             ; fctn + +
0089               *---------------------------------------------------------------
0090               * Keyboard scancodes - control keys
0091               *-------------|---------------------|---------------------------
0092      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0093      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0094      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0095      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0096      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0097      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0098      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0099      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0100      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0101      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0102      0081     key.ctrl.a    equ >81               ; ctrl + a
0103      0082     key.ctrl.b    equ >82               ; ctrl + b
0104      0083     key.ctrl.c    equ >83               ; ctrl + c
0105      0084     key.ctrl.d    equ >84               ; ctrl + d
0106      0085     key.ctrl.e    equ >85               ; ctrl + e
0107      0086     key.ctrl.f    equ >86               ; ctrl + f
0108      0087     key.ctrl.g    equ >87               ; ctrl + g
0109      0088     key.ctrl.h    equ >88               ; ctrl + h
0110      0089     key.ctrl.i    equ >89               ; ctrl + i
0111      008A     key.ctrl.j    equ >8a               ; ctrl + j
0112      008B     key.ctrl.k    equ >8b               ; ctrl + k
0113      008C     key.ctrl.l    equ >8c               ; ctrl + l
0114      008D     key.ctrl.m    equ >8d               ; ctrl + m
0115      008E     key.ctrl.n    equ >8e               ; ctrl + n
0116      008F     key.ctrl.o    equ >8f               ; ctrl + o
0117      0090     key.ctrl.p    equ >90               ; ctrl + p
0118      0091     key.ctrl.q    equ >91               ; ctrl + q
0119      0092     key.ctrl.r    equ >92               ; ctrl + r
0120      0093     key.ctrl.s    equ >93               ; ctrl + s
0121      0094     key.ctrl.t    equ >94               ; ctrl + t
0122      0095     key.ctrl.u    equ >95               ; ctrl + u
0123      0096     key.ctrl.v    equ >96               ; ctrl + v
0124      0097     key.ctrl.w    equ >97               ; ctrl + w
0125      0098     key.ctrl.x    equ >98               ; ctrl + x
0126      0099     key.ctrl.y    equ >99               ; ctrl + y
0127      009A     key.ctrl.z    equ >9a               ; ctrl + z
0128               *---------------------------------------------------------------
0129               * Keyboard scancodes - control keys extra
0130               *---------------------------------------------------------------
0131      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0132      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0133      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0134      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0135      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0136               *---------------------------------------------------------------
0137               * Special keys
0138               *---------------------------------------------------------------
0139      000D     key.enter     equ >0d               ; enter
0140      0020     key.space     equ >20               ; space
                   < stevie_b3.asm
0031               
0032               ****************************************************s***********
0033               * BANK 3
0034               ********|*****|*********************|**************************
0035      6006     bankid  equ   bank3.rom             ; Set bank identifier to current bank
0036                       aorg  >6000
0037                       save  >6000,>8000           ; Save bank
0038                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0016                                                   ; 7  /
0017               
0018 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0019                                                   ; 9  /
0020               
0021 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0022                                                   ; 11 /
0023               
0024                       ;-----------------------------------------------------------------------
0025                       ; Program list entry
0026                       ;-----------------------------------------------------------------------
0027               rom.program1:
0028 600C 601E             data  rom.program2          ; 12 \ Next program list entry         >600c
0029                                                   ; 13 / (no more items following)
0030               
0031 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0032                                                   ; 15 /
0033               
0034 6010 0C53             stri 'STEVIE TOOLS'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 544F     
     601A 4F4C     
     601C 53       
0035               
0036                       ;-----------------------------------------------------------------------
0037                       ; Program list entry
0038                       ;-----------------------------------------------------------------------
0039               rom.program2:
0040 601E 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0041                                                   ; 13 / (no more items following)
0042               
0043 6020 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0044                                                   ; 15 /
0045               
0047 6022 0E53                 stri 'STEVIE 1.3J-30'
     6024 5445     
     6026 5649     
     6028 4520     
     602A 312E     
     602C 334A     
     602E 2D33     
     6030 30       
                   < stevie_b3.asm
0039               
0040               ***************************************************************
0041               * Step 1: Switch to bank 0 (uniform code accross all banks)
0042               ********|*****|*********************|**************************
0043                       aorg  kickstart.code1       ; >6040
0044 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0045               ***************************************************************
0046               * Step 2: Satisfy assembler, must know relocated code
0047               ********|*****|*********************|**************************
0048                       aorg  >2000                 ; Relocate to >2000
0049                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               *
0070               * == Startup behaviour
0071               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0072               *                                   ; to pre-defined backup address
0073               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0074               *******************************************************************************
0075               
0076               *//////////////////////////////////////////////////////////////
0077               *                       RUNLIB SETUP
0078               *//////////////////////////////////////////////////////////////
0079               
0080                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0081                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0082                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0083                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0084                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0085               
0089               
0090                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0091                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0092                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2E9C     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22C4     
0078 208A 21BE                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 232C     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 225A     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 225A     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 240E     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2968     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 240E     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2968     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 240E     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 240E     
0120 20DC 0400                   byte 4,0
0121 20DE 21B9                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2692     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2972     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26A8     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 23EA     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26A8     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 23EA     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2972     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 28E4     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26A8     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 23EA     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26A8     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 23EA     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 2698     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0229 21AE 0152     cpu.crash.msg.r            stri 'R'
0230 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0231 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0232 21B9   04     cpu.crash.msg.st           stri '**ST'
     21BA 2A2A     
     21BC 5354     
                   < runlib.asm
0093                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21BE 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21C0 000E     
     21C2 0106     
     21C4 0204     
     21C6 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21C8 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21CA 000E     
     21CC 0106     
     21CE 00F4     
     21D0 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 21D2 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     21D4 003F     
     21D6 0240     
     21D8 03F4     
     21DA 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0094                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 21DC 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 21DE 16FD             data  >16fd                 ; |         jne   mcloop
0015 21E0 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 21E2 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 21E4 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 21E6 0201  20         li    r1,mccode             ; Machinecode to patch
     21E8 21DC     
0037 21EA 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     21EC 8322     
0038 21EE CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 21F0 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 21F2 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 21F4 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 21F6 C0F9  30 popr3   mov   *stack+,r3
0057 21F8 C0B9  30 popr2   mov   *stack+,r2
0058 21FA C079  30 popr1   mov   *stack+,r1
0059 21FC C039  30 popr0   mov   *stack+,r0
0060 21FE C2F9  30 poprt   mov   *stack+,r11
0061 2200 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2202 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2204 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 2206 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 2208 C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 220A 1604  14         jne   filchk                ; No, continue checking
0093               
0094 220C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     220E FFCE     
0095 2210 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2212 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2214 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     2216 830B     
     2218 830A     
0100               
0101 221A 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     221C 0001     
0102 221E 1602  14         jne   filchk2
0103 2220 DD05  32         movb  tmp1,*tmp0+
0104 2222 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2224 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     2226 0002     
0109 2228 1603  14         jne   filchk3
0110 222A DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 222C DD05  32         movb  tmp1,*tmp0+
0112 222E 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2230 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2232 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2234 0001     
0118 2236 1305  14         jeq   fil16b
0119 2238 DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 223A 0606  14         dec   tmp2
0121 223C 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     223E 0002     
0122 2240 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2242 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2244 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2246 0001     
0128 2248 1301  14         jeq   dofill
0129 224A 0606  14         dec   tmp2                  ; Make TMP2 even
0130 224C CD05  34 dofill  mov   tmp1,*tmp0+
0131 224E 0646  14         dect  tmp2
0132 2250 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2252 C1C7  18         mov   tmp3,tmp3
0137 2254 1301  14         jeq   fil.exit
0138 2256 DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 2258 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 225A C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 225C C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 225E C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2260 0264  22 xfilv   ori   tmp0,>4000
     2262 4000     
0166 2264 06C4  14         swpb  tmp0
0167 2266 D804  30         movb  tmp0,@vdpa
     2268 8C02     
0168 226A 06C4  14         swpb  tmp0
0169 226C D804  30         movb  tmp0,@vdpa
     226E 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 2270 020F  20         li    r15,vdpw              ; Set VDP write address
     2272 8C00     
0174 2274 06C5  14         swpb  tmp1
0175 2276 C820  46         mov   @filzz,@mcloop        ; Setup move command
     2278 2280     
     227A 8320     
0176 227C 0460  24         b     @mcloop               ; Write data to VDP
     227E 8320     
0177               *--------------------------------------------------------------
0181 2280 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 2282 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     2284 4000     
0202 2286 06C4  14 vdra    swpb  tmp0
0203 2288 D804  30         movb  tmp0,@vdpa
     228A 8C02     
0204 228C 06C4  14         swpb  tmp0
0205 228E D804  30         movb  tmp0,@vdpa            ; Set VDP address
     2290 8C02     
0206 2292 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 2294 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 2296 C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 2298 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     229A 4000     
0223 229C 06C4  14         swpb  tmp0                  ; \
0224 229E D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22A0 8C02     
0225 22A2 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22A4 D804  30         movb  tmp0,@vdpa            ; /
     22A6 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22A8 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22AA D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22AC 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22AE C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22B0 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22B2 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22B4 8C02     
0257 22B6 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22B8 D804  30         movb  tmp0,@vdpa            ; /
     22BA 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22BC D120  30         movb  @vdpr,tmp0            ; Read byte
     22BE 8800     
0263 22C0 0984  32         srl   tmp0,8                ; Right align
0264 22C2 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22C4 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22C6 C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22C8 C144  18         mov   tmp0,tmp1
0289 22CA 05C5  14         inct  tmp1
0290 22CC D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 22CE 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     22D0 FF00     
0292 22D2 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 22D4 C805  30         mov   tmp1,@wbase           ; Store calculated base
     22D6 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 22D8 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     22DA 8000     
0298 22DC 0206  20         li    tmp2,8
     22DE 0008     
0299 22E0 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     22E2 830B     
0300 22E4 06C5  14         swpb  tmp1
0301 22E6 D805  30         movb  tmp1,@vdpa
     22E8 8C02     
0302 22EA 06C5  14         swpb  tmp1
0303 22EC D805  30         movb  tmp1,@vdpa
     22EE 8C02     
0304 22F0 0225  22         ai    tmp1,>0100
     22F2 0100     
0305 22F4 0606  14         dec   tmp2
0306 22F6 16F4  14         jne   vidta1                ; Next register
0307 22F8 C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     22FA 833A     
0308 22FC 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 22FE C13B  30 putvr   mov   *r11+,tmp0
0326 2300 0264  22 putvrx  ori   tmp0,>8000
     2302 8000     
0327 2304 06C4  14         swpb  tmp0
0328 2306 D804  30         movb  tmp0,@vdpa
     2308 8C02     
0329 230A 06C4  14         swpb  tmp0
0330 230C D804  30         movb  tmp0,@vdpa
     230E 8C02     
0331 2310 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2312 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2314 C10E  18         mov   r14,tmp0
0341 2316 0984  32         srl   tmp0,8
0342 2318 06A0  32         bl    @putvrx               ; Write VR#0
     231A 2300     
0343 231C 0204  20         li    tmp0,>0100
     231E 0100     
0344 2320 D820  42         movb  @r14lb,@tmp0lb
     2322 831D     
     2324 8309     
0345 2326 06A0  32         bl    @putvrx               ; Write VR#1
     2328 2300     
0346 232A 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 232C C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 232E 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2330 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2332 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2334 7FFF     
0364 2336 2120  32         coc   @wbit0,tmp0
     2338 2020     
0365 233A 1604  14         jne   ldfnt1
0366 233C 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     233E 8000     
0367 2340 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2342 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2344 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     2346 23AE     
0372 2348 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     234A 9C02     
0373 234C 06C4  14         swpb  tmp0
0374 234E D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2350 9C02     
0375 2352 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2354 9800     
0376 2356 06C5  14         swpb  tmp1
0377 2358 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     235A 9800     
0378 235C 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 235E D805  38         movb  tmp1,@grmwa
     2360 9C02     
0383 2362 06C5  14         swpb  tmp1
0384 2364 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     2366 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 2368 C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 236A 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     236C 2282     
0390 236E 05C8  14         inct  tmp4                  ; R11=R11+2
0391 2370 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 2372 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     2374 7FFF     
0393 2376 C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     2378 23B0     
0394 237A C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     237C 23B2     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 237E 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 2380 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 2382 D120  34         movb  @grmrd,tmp0
     2384 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 2386 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     2388 2020     
0405 238A 1603  14         jne   ldfnt3                ; No, so skip
0406 238C D1C4  18         movb  tmp0,tmp3
0407 238E 0917  18         srl   tmp3,1
0408 2390 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 2392 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     2394 8C00     
0413 2396 0606  14         dec   tmp2
0414 2398 16F2  14         jne   ldfnt2
0415 239A 05C8  14         inct  tmp4                  ; R11=R11+2
0416 239C 020F  20         li    r15,vdpw              ; Set VDP write address
     239E 8C00     
0417 23A0 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23A2 7FFF     
0418 23A4 0458  20         b     *tmp4                 ; Exit
0419 23A6 D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23A8 2000     
     23AA 8C00     
0420 23AC 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23AE 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23B0 0200     
     23B2 0000     
0425 23B4 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23B6 01C0     
     23B8 0101     
0426 23BA 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23BC 02A0     
     23BE 0101     
0427 23C0 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23C2 00E0     
     23C4 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23C6 C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23C8 C3A0  30         mov   @wyx,r14              ; Get YX
     23CA 832A     
0447 23CC 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 23CE 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     23D0 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 23D2 C3A0  30         mov   @wyx,r14              ; Get YX
     23D4 832A     
0454 23D6 024E  22         andi  r14,>00ff             ; Remove Y
     23D8 00FF     
0455 23DA A3CE  18         a     r14,r15               ; pos = pos + X
0456 23DC A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     23DE 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 23E0 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 23E2 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 23E4 020F  20         li    r15,vdpw              ; VDP write address
     23E6 8C00     
0463 23E8 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 23EA C17B  30 putstr  mov   *r11+,tmp1
0482 23EC D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 23EE C1CB  18 xutstr  mov   r11,tmp3
0484 23F0 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     23F2 23C6     
0485 23F4 C2C7  18         mov   tmp3,r11
0486 23F6 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 23F8 C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 23FA 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 23FC 0286  22         ci    tmp2,255              ; Length > 255 ?
     23FE 00FF     
0494 2400 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2402 0460  28         b     @xpym2v               ; Display string
     2404 2458     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 2406 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2408 FFCE     
0501 240A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     240C 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 240E C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2410 832A     
0518 2412 0460  28         b     @putstr
     2414 23EA     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 2416 0649  14         dect  stack
0540 2418 C64B  30         mov   r11,*stack            ; Save return address
0541 241A 0649  14         dect  stack
0542 241C C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 241E D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2420 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2422 0649  14         dect  stack
0551 2424 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 2426 0649  14         dect  stack
0553 2428 C646  30         mov   tmp2,*stack           ; Push tmp2
0554 242A 0649  14         dect  stack
0555 242C C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 242E 06A0  32         bl    @xutst0               ; Display string
     2430 23EC     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2432 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2434 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 2436 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 2438 06A0  32         bl    @down                 ; Move cursor down
     243A 2698     
0566               
0567 243C A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 243E 0585  14         inc   tmp1                  ; Consider length byte
0569 2440 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2442 2002     
0570 2444 1301  14         jeq   !                     ; Yes, skip adjustment
0571 2446 0585  14         inc   tmp1                  ; Make address even
0572 2448 0606  14 !       dec   tmp2
0573 244A 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 244C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 244E C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2450 045B  20         b     *r11                  ; Return
                   < runlib.asm
0095               
0097                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2452 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2454 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 2456 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 2458 C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 245A 1604  14         jne   !                     ; No, continue
0028               
0029 245C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     245E FFCE     
0030 2460 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2462 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2464 0264  22 !       ori   tmp0,>4000
     2466 4000     
0035 2468 06C4  14         swpb  tmp0
0036 246A D804  30         movb  tmp0,@vdpa
     246C 8C02     
0037 246E 06C4  14         swpb  tmp0
0038 2470 D804  30         movb  tmp0,@vdpa
     2472 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2474 020F  20         li    r15,vdpw              ; Set VDP write address
     2476 8C00     
0043 2478 C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     247A 2482     
     247C 8320     
0044 247E 0460  24         b     @mcloop               ; Write data to VDP and return
     2480 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2482 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0099               
0101                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2484 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 2486 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 2488 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 248A 06C4  14 xpyv2m  swpb  tmp0
0027 248C D804  30         movb  tmp0,@vdpa
     248E 8C02     
0028 2490 06C4  14         swpb  tmp0
0029 2492 D804  30         movb  tmp0,@vdpa
     2494 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 2496 020F  20         li    r15,vdpr              ; Set VDP read address
     2498 8800     
0034 249A C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     249C 24A4     
     249E 8320     
0035 24A0 0460  24         b     @mcloop               ; Read data from VDP
     24A2 8320     
0036 24A4 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0103               
0105                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24A6 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24A8 C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24AA C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24AC C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24AE 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24B0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24B2 FFCE     
0034 24B4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24B6 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24B8 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24BA 0001     
0039 24BC 1603  14         jne   cpym0                 ; No, continue checking
0040 24BE DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24C0 04C6  14         clr   tmp2                  ; Reset counter
0042 24C2 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24C4 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24C6 7FFF     
0047 24C8 C1C4  18         mov   tmp0,tmp3
0048 24CA 0247  22         andi  tmp3,1
     24CC 0001     
0049 24CE 1618  14         jne   cpyodd                ; Odd source address handling
0050 24D0 C1C5  18 cpym1   mov   tmp1,tmp3
0051 24D2 0247  22         andi  tmp3,1
     24D4 0001     
0052 24D6 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 24D8 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     24DA 2020     
0057 24DC 1605  14         jne   cpym3
0058 24DE C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     24E0 2506     
     24E2 8320     
0059 24E4 0460  24         b     @mcloop               ; Copy memory and exit
     24E6 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 24E8 C1C6  18 cpym3   mov   tmp2,tmp3
0064 24EA 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     24EC 0001     
0065 24EE 1301  14         jeq   cpym4
0066 24F0 0606  14         dec   tmp2                  ; Make TMP2 even
0067 24F2 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 24F4 0646  14         dect  tmp2
0069 24F6 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 24F8 C1C7  18         mov   tmp3,tmp3
0074 24FA 1301  14         jeq   cpymz
0075 24FC D554  38         movb  *tmp0,*tmp1
0076 24FE 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2500 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2502 8000     
0081 2504 10E9  14         jmp   cpym2
0082 2506 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0107               
0111               
0115               
0117                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 2508 C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 250A 0649  14         dect  stack
0065 250C C64B  30         mov   r11,*stack            ; Push return address
0066 250E 0649  14         dect  stack
0067 2510 C640  30         mov   r0,*stack             ; Push r0
0068 2512 0649  14         dect  stack
0069 2514 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2516 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 2518 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 251A 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     251C 4000     
0077 251E C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2520 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2522 020C  20         li    r12,>1e00             ; SAMS CRU address
     2524 1E00     
0082 2526 04C0  14         clr   r0
0083 2528 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 252A D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 252C D100  18         movb  r0,tmp0
0086 252E 0984  32         srl   tmp0,8                ; Right align
0087 2530 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2532 833C     
0088 2534 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2536 C339  30         mov   *stack+,r12           ; Pop r12
0094 2538 C039  30         mov   *stack+,r0            ; Pop r0
0095 253A C2F9  30         mov   *stack+,r11           ; Pop return address
0096 253C 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 253E C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2540 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2542 0649  14         dect  stack
0135 2544 C64B  30         mov   r11,*stack            ; Push return address
0136 2546 0649  14         dect  stack
0137 2548 C640  30         mov   r0,*stack             ; Push r0
0138 254A 0649  14         dect  stack
0139 254C C64C  30         mov   r12,*stack            ; Push r12
0140 254E 0649  14         dect  stack
0141 2550 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2552 0649  14         dect  stack
0143 2554 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 2556 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 2558 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 255A 0284  22         ci    tmp0,255              ; Crash if page > 255
     255C 00FF     
0153 255E 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2560 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2562 001E     
0158 2564 150A  14         jgt   !
0159 2566 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     2568 0004     
0160 256A 1107  14         jlt   !
0161 256C 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     256E 0012     
0162 2570 1508  14         jgt   sams.page.set.switch_page
0163 2572 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2574 0006     
0164 2576 1501  14         jgt   !
0165 2578 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 257A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     257C FFCE     
0170 257E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2580 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2582 020C  20         li    r12,>1e00             ; SAMS CRU address
     2584 1E00     
0176 2586 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 2588 06C0  14         swpb  r0                    ; LSB to MSB
0178 258A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 258C D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     258E 4000     
0180 2590 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2592 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2594 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 2596 C339  30         mov   *stack+,r12           ; Pop r12
0188 2598 C039  30         mov   *stack+,r0            ; Pop r0
0189 259A C2F9  30         mov   *stack+,r11           ; Pop return address
0190 259C 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 259E 0649  14         dect  stack
0205 25A0 C64C  30         mov   r12,*stack            ; Push r12
0206 25A2 020C  20         li    r12,>1e00             ; SAMS CRU address
     25A4 1E00     
0207 25A6 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25A8 C339  30         mov   *stack+,r12           ; Pop r12
0213 25AA 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25AC 0649  14         dect  stack
0231 25AE C64C  30         mov   r12,*stack            ; Push r12
0232 25B0 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B2 1E00     
0233 25B4 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25B6 C339  30         mov   *stack+,r12           ; Pop r12
0239 25B8 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25BA C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25BC 0649  14         dect  stack
0271 25BE C64B  30         mov   r11,*stack            ; Save return address
0272 25C0 0649  14         dect  stack
0273 25C2 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25C4 0649  14         dect  stack
0275 25C6 C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25C8 020C  20         li    r12,>1e00             ; SAMS CRU address
     25CA 1E00     
0280 25CC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 25CE C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     25D0 4004     
0283 25D2 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     25D4 4006     
0284 25D6 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     25D8 4014     
0285 25DA C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     25DC 4016     
0286 25DE C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     25E0 4018     
0287 25E2 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     25E4 401A     
0288 25E6 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     25E8 401C     
0289 25EA C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     25EC 401E     
0290               
0291 25EE 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 25F0 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 25F2 C339  30         mov   *stack+,r12           ; Pop r12
0298 25F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 25F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0300 25F8 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 25FA 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 25FC 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 25FE 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2600 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2602 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2604 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 2606 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 2608 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 260A C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 260C 0649  14         dect  stack
0335 260E C64B  30         mov   r11,*stack            ; Push return address
0336 2610 0649  14         dect  stack
0337 2612 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2614 0649  14         dect  stack
0339 2616 C645  30         mov   tmp1,*stack           ; Push tmp1
0340 2618 0649  14         dect  stack
0341 261A C646  30         mov   tmp2,*stack           ; Push tmp2
0342 261C 0649  14         dect  stack
0343 261E C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2620 0205  20         li    tmp1,sams.layout.copy.data
     2622 2642     
0348 2624 0206  20         li    tmp2,8                ; Set loop counter
     2626 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 2628 C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 262A 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     262C 250A     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 262E CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2630 833C     
0359               
0360 2632 0606  14         dec   tmp2                  ; Next iteration
0361 2634 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 2636 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 2638 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 263A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 263C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 263E C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2640 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2642 2000             data  >2000                 ; >2000-2fff
0377 2644 3000             data  >3000                 ; >3000-3fff
0378 2646 A000             data  >a000                 ; >a000-afff
0379 2648 B000             data  >b000                 ; >b000-bfff
0380 264A C000             data  >c000                 ; >c000-cfff
0381 264C D000             data  >d000                 ; >d000-dfff
0382 264E E000             data  >e000                 ; >e000-efff
0383 2650 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0119               
0123               
0125                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2652 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2654 FFBF     
0010 2656 0460  28         b     @putv01
     2658 2312     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 265A 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     265C 0040     
0018 265E 0460  28         b     @putv01
     2660 2312     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2662 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2664 FFDF     
0026 2666 0460  28         b     @putv01
     2668 2312     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 266A 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     266C 0020     
0034 266E 0460  28         b     @putv01
     2670 2312     
                   < runlib.asm
0127               
0129                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2672 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2674 FFFE     
0011 2676 0460  28         b     @putv01
     2678 2312     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 267A 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     267C 0001     
0019 267E 0460  28         b     @putv01
     2680 2312     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2682 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2684 FFFD     
0027 2686 0460  28         b     @putv01
     2688 2312     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 268A 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     268C 0002     
0035 268E 0460  28         b     @putv01
     2690 2312     
                   < runlib.asm
0131               
0133                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2692 C83B  42 at      mov   *r11+,@wyx
     2694 832A     
0019 2696 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 2698 B820  46 down    ab    @hb$01,@wyx
     269A 2012     
     269C 832A     
0028 269E 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26A0 7820  46 up      sb    @hb$01,@wyx
     26A2 2012     
     26A4 832A     
0037 26A6 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26A8 C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26AA D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26AC 832A     
0051 26AE C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26B0 832A     
0052 26B2 045B  20         b     *r11
                   < runlib.asm
0135               
0137                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26B4 C120  30 yx2px   mov   @wyx,tmp0
     26B6 832A     
0022 26B8 C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26BA 06C4  14         swpb  tmp0                  ; Y<->X
0024 26BC 04C5  14         clr   tmp1                  ; Clear before copy
0025 26BE D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26C0 20A0  32         coc   @wbit1,config         ; f18a present ?
     26C2 201E     
0030 26C4 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26C6 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26C8 833A     
     26CA 26F4     
0032 26CC 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 26CE 0A15  18         sla   tmp1,1                ; X = X * 2
0035 26D0 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 26D2 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     26D4 0500     
0037 26D6 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 26D8 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 26DA 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 26DC 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 26DE D105  18         movb  tmp1,tmp0
0051 26E0 06C4  14         swpb  tmp0                  ; X<->Y
0052 26E2 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     26E4 2020     
0053 26E6 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 26E8 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     26EA 2012     
0059 26EC 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     26EE 2024     
0060 26F0 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 26F2 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 26F4 0050            data   80
0067               
0068               
                   < runlib.asm
0139               
0143               
0147               
0149                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 26F6 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 26F8 06A0  32         bl    @putvr                ; Write once
     26FA 22FE     
0015 26FC 391C             data  >391c                 ; VR1/57, value 00011100
0016 26FE 06A0  32         bl    @putvr                ; Write twice
     2700 22FE     
0017 2702 391C             data  >391c                 ; VR1/57, value 00011100
0018 2704 06A0  32         bl    @putvr
     2706 22FE     
0019 2708 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 270A 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 270C C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 270E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2710 22FE     
0030 2712 3900             data  >3900
0031 2714 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2716 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 2718 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     271A 22FE     
0044 271C 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 271E 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2720 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2722 06A0  32         bl    @cpym2v
     2724 2452     
0060 2726 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     2728 276A     
     272A 0008     
0061 272C 06A0  32         bl    @putvr
     272E 22FE     
0062 2730 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2732 06A0  32         bl    @putvr
     2734 22FE     
0064 2736 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 2738 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     273A 22FE     
0068 273C 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 273E 0204  20         li    tmp0,>3f00
     2740 3F00     
0073 2742 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2744 2286     
0074 2746 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     2748 8800     
0075 274A 0984  32         srl   tmp0,8
0076 274C D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     274E 8800     
0077 2750 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2752 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2754 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     2756 BFFF     
0081 2758 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 275A 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     275C 4000     
0084               
0085               f18chk_exit:
0086 275E 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2760 225A     
0087 2762 3F00             data  >3f00,>00,6
     2764 0000     
     2766 0006     
0088 2768 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 276A 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 276C 3F00             data  >3f00                 ; 3f02 / 3f00
0095 276E 0340             data  >0340                 ; 3f04   0340  idle
0096 2770 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2772 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2774 06A0  32         bl    @putvr
     2776 22FE     
0124 2778 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 277A 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     277C 22FE     
0127 277E 3900             data  >3900                 ; Lock the F18a
0128 2780 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2782 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2784 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     2786 201E     
0149 2788 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 278A C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     278C 8802     
0154 278E 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2790 22FE     
0155 2792 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2794 04C4  14         clr   tmp0
0157 2796 D120  30         movb  @vdps,tmp0
     2798 8802     
0158 279A 0984  32         srl   tmp0,8
0159 279C 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0151               
0153                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 279E C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27A0 832A     
0018 27A2 D17B  28         movb  *r11+,tmp1
0019 27A4 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27A6 D1BB  28         movb  *r11+,tmp2
0021 27A8 0986  32         srl   tmp2,8                ; Repeat count
0022 27AA C1CB  18         mov   r11,tmp3
0023 27AC 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27AE 23C6     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27B0 020B  20         li    r11,hchar1
     27B2 27B8     
0028 27B4 0460  28         b     @xfilv                ; Draw
     27B6 2260     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27B8 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27BA 2022     
0033 27BC 1302  14         jeq   hchar2                ; Yes, exit
0034 27BE C2C7  18         mov   tmp3,r11
0035 27C0 10EE  14         jmp   hchar                 ; Next one
0036 27C2 05C7  14 hchar2  inct  tmp3
0037 27C4 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0155               
0159               
0163               
0167               
0169                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27C6 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27C8 8334     
0015 27CA 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     27CC 2006     
0016 27CE 0204  20         li    tmp0,muttab
     27D0 27E0     
0017 27D2 0205  20         li    tmp1,sound            ; Sound generator port >8400
     27D4 8400     
0018 27D6 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 27D8 D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 27DA D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 27DC D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 27DE 045B  20         b     *r11
0023 27E0 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     27E2 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 27E4 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     27E6 8334     
0044 27E8 C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     27EA 8336     
0045 27EC 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     27EE FFF8     
0046 27F0 E0BB  30         soc   *r11+,config          ; Set options
0047 27F2 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     27F4 2012     
     27F6 831B     
0048 27F8 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 27FA 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     27FC 2006     
0060 27FE 1301  14         jeq   sdpla1                ; Yes, play
0061 2800 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2802 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2804 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     2806 831B     
     2808 2000     
0067 280A 1301  14         jeq   sdpla3                ; Play next note
0068 280C 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 280E 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2810 2002     
0070 2812 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2814 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     2816 8336     
0075 2818 06C4  14         swpb  tmp0
0076 281A D804  30         movb  tmp0,@vdpa
     281C 8C02     
0077 281E 06C4  14         swpb  tmp0
0078 2820 D804  30         movb  tmp0,@vdpa
     2822 8C02     
0079 2824 04C4  14         clr   tmp0
0080 2826 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     2828 8800     
0081 282A 131E  14         jeq   sdexit                ; Yes. exit
0082 282C 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 282E A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2830 8336     
0084 2832 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2834 8800     
     2836 8400     
0085 2838 0604  14         dec   tmp0
0086 283A 16FB  14         jne   vdpla2
0087 283C D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     283E 8800     
     2840 831B     
0088 2842 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2844 8336     
0089 2846 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 2848 C120  30 mmplay  mov   @wsdtmp,tmp0
     284A 8336     
0094 284C D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 284E 130C  14         jeq   sdexit                ; Yes, exit
0096 2850 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2852 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2854 8336     
0098 2856 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     2858 8400     
0099 285A 0605  14         dec   tmp1
0100 285C 16FC  14         jne   mmpla2
0101 285E D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2860 831B     
0102 2862 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2864 8336     
0103 2866 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 2868 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     286A 2004     
0108 286C 1607  14         jne   sdexi2                ; No, exit
0109 286E C820  42         mov   @wsdlst,@wsdtmp
     2870 8334     
     2872 8336     
0110 2874 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     2876 2012     
     2878 831B     
0111 287A 045B  20 sdexi1  b     *r11                  ; Exit
0112 287C 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     287E FFF8     
0113 2880 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0171               
0175               
0179               
0183               
0186                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2882 0649  14         dect  stack
0038 2884 C64B  30         mov   r11,*stack            ; Push return address
0039 2886 0649  14         dect  stack
0040 2888 C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 288A 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     288C 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 288E 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2890 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2892 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2894 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 2896 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 2898 E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     289A 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 289C 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 289E C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28A0 28DE     
     28A2 83C6     
0074 28A4 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28A6 28E0     
     28A8 83FA     
0075 28AA C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28AC 28E2     
     28AE 83FE     
0076               
0077 28B0 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28B2 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28B4 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28B6 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28B8 83E0     
0084               
0085 28BA 06A0  28         bl    @kscan                ; Call KSCAN
     28BC 000E     
0086 28BE 02E0  18         lwpi  ws1                   ; Activate user workspace
     28C0 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28C2 D120  30         movb  @>837c,tmp0           ; Get flag
     28C4 837C     
0091 28C6 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28C8 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28CA D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     28CC 8375     
0097 28CE 0984  32         srl   tmp0,8                ; / Move to LSB
0099 28D0 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     28D2 A028     
0103 28D4 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     28D6 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 28D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 28DA C2F9  30         mov   *stack+,r11           ; Pop r11
0110 28DC 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 28DE 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 28E0 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 28E2 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0191               
0193                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 28E4 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 28E6 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     28E8 8340     
0025 28EA 04E0  26         clr   @waux1
     28EC 833C     
0026 28EE 04E0  26         clr   @waux2
     28F0 833E     
0027 28F2 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     28F4 833C     
0028 28F6 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 28F8 0205  20         li    tmp1,4                ; 4 nibbles
     28FA 0004     
0033 28FC C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 28FE 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2900 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2902 0286  22         ci    tmp2,>000a
     2904 000A     
0039 2906 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 2908 C21B  26         mov   *r11,tmp4
0045 290A 0988  32         srl   tmp4,8                ; Right justify
0046 290C 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     290E FFF6     
0047 2910 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2912 C21B  26         mov   *r11,tmp4
0054 2914 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     2916 00FF     
0055               
0056 2918 A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 291A 06C6  14         swpb  tmp2
0058 291C DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 291E 0944  24         srl   tmp0,4                ; Next nibble
0060 2920 0605  14         dec   tmp1
0061 2922 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2924 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2926 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2928 C160  30         mov   @waux3,tmp1           ; Get pointer
     292A 8340     
0067 292C 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 292E 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2930 C120  30         mov   @waux2,tmp0
     2932 833E     
0070 2934 06C4  14         swpb  tmp0
0071 2936 DD44  32         movb  tmp0,*tmp1+
0072 2938 06C4  14         swpb  tmp0
0073 293A DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 293C C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     293E 8340     
0078 2940 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2942 2016     
0079 2944 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2946 C120  30         mov   @waux1,tmp0
     2948 833C     
0084 294A 06C4  14         swpb  tmp0
0085 294C DD44  32         movb  tmp0,*tmp1+
0086 294E 06C4  14         swpb  tmp0
0087 2950 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2952 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2954 2020     
0092 2956 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2958 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 295A 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     295C 7FFF     
0098 295E C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2960 8340     
0099 2962 0460  28         b     @xutst0               ; Display string
     2964 23EC     
0100 2966 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2968 C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     296A 832A     
0122 296C 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     296E 8000     
0123 2970 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0195               
0197                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2972 0207  20 mknum   li    tmp3,5                ; Digit counter
     2974 0005     
0020 2976 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2978 C155  26         mov   *tmp1,tmp1            ; /
0022 297A C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 297C 0228  22         ai    tmp4,4                ; Get end of buffer
     297E 0004     
0024 2980 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2982 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2984 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2986 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2988 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 298A B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 298C D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 298E C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2990 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2992 0607  14         dec   tmp3                  ; Decrease counter
0036 2994 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2996 0207  20         li    tmp3,4                ; Check first 4 digits
     2998 0004     
0041 299A 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 299C C11B  26         mov   *r11,tmp0
0043 299E 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29A0 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29A2 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29A4 05CB  14 mknum3  inct  r11
0047 29A6 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29A8 2020     
0048 29AA 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29AC 045B  20         b     *r11                  ; Exit
0050 29AE DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29B0 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29B2 13F8  14         jeq   mknum3                ; Yes, exit
0053 29B4 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29B6 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29B8 7FFF     
0058 29BA C10B  18         mov   r11,tmp0
0059 29BC 0224  22         ai    tmp0,-4
     29BE FFFC     
0060 29C0 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29C2 0206  20         li    tmp2,>0500            ; String length = 5
     29C4 0500     
0062 29C6 0460  28         b     @xutstr               ; Display string
     29C8 23EE     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29CA C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 29CC C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 29CE C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 29D0 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 29D2 0207  20         li    tmp3,5                ; Set counter
     29D4 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 29D6 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 29D8 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 29DA 0584  14         inc   tmp0                  ; Next character
0106 29DC 0607  14         dec   tmp3                  ; Last digit reached ?
0107 29DE 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 29E0 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 29E2 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 29E4 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 29E6 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 29E8 DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 29EA 0607  14         dec   tmp3                  ; Last character ?
0122 29EC 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 29EE 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 29F0 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     29F2 832A     
0141 29F4 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29F6 8000     
0142 29F8 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0199               
0203               
0207               
0211               
0215               
0217                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 29FA 0649  14         dect  stack
0023 29FC C64B  30         mov   r11,*stack            ; Save return address
0024 29FE 0649  14         dect  stack
0025 2A00 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A02 0649  14         dect  stack
0027 2A04 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A06 0649  14         dect  stack
0029 2A08 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A0A 0649  14         dect  stack
0031 2A0C C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A0E C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A10 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A12 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A14 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A16 0649  14         dect  stack
0044 2A18 C64B  30         mov   r11,*stack            ; Save return address
0045 2A1A 0649  14         dect  stack
0046 2A1C C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A1E 0649  14         dect  stack
0048 2A20 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A22 0649  14         dect  stack
0050 2A24 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A26 0649  14         dect  stack
0052 2A28 C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A2A C1D4  26 !       mov   *tmp0,tmp3
0057 2A2C 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A2E 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A30 00FF     
0059 2A32 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A34 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A36 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A38 0584  14         inc   tmp0                  ; Next byte
0067 2A3A 0607  14         dec   tmp3                  ; Shorten string length
0068 2A3C 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A3E 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A40 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A42 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A44 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A46 C187  18         mov   tmp3,tmp2
0078 2A48 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A4A DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A4C 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A4E 24AC     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A50 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A52 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A54 FFCE     
0090 2A56 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A58 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A5A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A5C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A5E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A60 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A62 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A64 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A66 0649  14         dect  stack
0124 2A68 C64B  30         mov   r11,*stack            ; Save return address
0125 2A6A 05D9  26         inct  *stack                ; Skip "data P0"
0126 2A6C 05D9  26         inct  *stack                ; Skip "data P1"
0127 2A6E 0649  14         dect  stack
0128 2A70 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2A72 0649  14         dect  stack
0130 2A74 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2A76 0649  14         dect  stack
0132 2A78 C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2A7A C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2A7C C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2A7E 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2A80 0649  14         dect  stack
0144 2A82 C64B  30         mov   r11,*stack            ; Save return address
0145 2A84 0649  14         dect  stack
0146 2A86 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2A88 0649  14         dect  stack
0148 2A8A C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2A8C 0649  14         dect  stack
0150 2A8E C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2A90 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2A92 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2A94 0586  14         inc   tmp2
0161 2A96 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2A98 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2A9A 0286  22         ci    tmp2,255
     2A9C 00FF     
0167 2A9E 1505  14         jgt   string.getlenc.panic
0168 2AA0 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AA2 0606  14         dec   tmp2                  ; One time adjustment
0174 2AA4 C806  30         mov   tmp2,@waux1           ; Store length
     2AA6 833C     
0175 2AA8 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2AAA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AAC FFCE     
0181 2AAE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AB0 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AB2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AB4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AB6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AB8 C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2ABA 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0219               
0223               
0225                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2ABC C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2ABE F000     
0024 2AC0 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AC2 F002     
0025 2AC4 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AC6 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AC8 0200  20         li    r0,>8306              ; Scratchpad source address
     2ACA 8306     
0030 2ACC 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2ACE F006     
0031 2AD0 0202  20         li    r2,62                 ; Loop counter
     2AD2 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2AD4 CC70  46         mov   *r0+,*r1+
0037 2AD6 CC70  46         mov   *r0+,*r1+
0038 2AD8 0642  14         dect  r2
0039 2ADA 16FC  14         jne   cpu.scrpad.backup.copy
0040 2ADC C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2ADE 83FE     
     2AE0 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2AE2 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2AE4 F000     
0046 2AE6 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2AE8 F002     
0047 2AEA C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2AEC F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2AEE 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2AF0 0200  20         li    r0,cpu.scrpad.tgt
     2AF2 F000     
0075 2AF4 0201  20         li    r1,>8300
     2AF6 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2AF8 CC70  46         mov   *r0+,*r1+
0081 2AFA CC70  46         mov   *r0+,*r1+
0082 2AFC 0281  22         ci    r1,>8400
     2AFE 8400     
0083 2B00 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B02 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0226                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B04 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B06 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B08 CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B0A CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B0C CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B0E CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B10 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B12 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B14 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B16 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B18 8310     
0055                                                   ;        as of register r8
0056 2B1A 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B1C 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B1E CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B20 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B22 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B24 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B26 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B28 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B2A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B2C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B2E 0606  14         dec   tmp2
0069 2B30 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B32 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B34 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B36 2B3C     
0075                                                   ; R14=PC
0076 2B38 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B3A 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B3C 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B3E 2AF0     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B40 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B42 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B44 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B46 8300     
0126 2B48 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B4A 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B4C CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B4E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B50 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B52 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B5C 0606  14         dec   tmp2
0139 2B5E 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B60 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B62 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B64 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0228               
0230                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0231                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B66 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B68 2B6A             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B6A C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2B6C C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2B6E A428     
0064 2B70 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2B72 201C     
0065 2B74 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2B76 8356     
0066 2B78 C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2B7A 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2B7C FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2B7E C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2B80 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2B82 06C0  14         swpb  r0                    ;
0075 2B84 D800  30         movb  r0,@vdpa              ; Send low byte
     2B86 8C02     
0076 2B88 06C0  14         swpb  r0                    ;
0077 2B8A D800  30         movb  r0,@vdpa              ; Send high byte
     2B8C 8C02     
0078 2B8E D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2B90 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2B92 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2B94 0704  14         seto  r4                    ; Init counter
0086 2B96 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2B98 A420     
0087 2B9A 0580  14 !       inc   r0                    ; Point to next char of name
0088 2B9C 0584  14         inc   r4                    ; Increment char counter
0089 2B9E 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BA0 0007     
0090 2BA2 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BA4 80C4  18         c     r4,r3                 ; End of name?
0093 2BA6 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BA8 06C0  14         swpb  r0                    ;
0098 2BAA D800  30         movb  r0,@vdpa              ; Send low byte
     2BAC 8C02     
0099 2BAE 06C0  14         swpb  r0                    ;
0100 2BB0 D800  30         movb  r0,@vdpa              ; Send high byte
     2BB2 8C02     
0101 2BB4 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BB6 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BB8 DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BBA 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BBC 2CD6     
0109 2BBE 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BC0 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BC2 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BC4 04E0  26         clr   @>83d0
     2BC6 83D0     
0118 2BC8 C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BCA 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2BCC C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2BCE A432     
0121               
0122 2BD0 0584  14         inc   r4                    ; Adjust for dot
0123 2BD2 A804  30         a     r4,@>8356             ; Point to position after name
     2BD4 8356     
0124 2BD6 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2BD8 8356     
     2BDA A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2BDC 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2BDE 83E0     
0130 2BE0 04C1  14         clr   r1                    ; Version found of dsr
0131 2BE2 020C  20         li    r12,>0f00             ; Init cru address
     2BE4 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2BE6 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2BE8 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2BEA 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2BEC 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2BEE 0100     
0145 2BF0 04E0  26         clr   @>83d0                ; Clear in case we are done
     2BF2 83D0     
0146 2BF4 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2BF6 2000     
0147 2BF8 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2BFA C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2BFC 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2BFE 1D00  16         sbo   0                     ; Turn on ROM
0154 2C00 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C02 4000     
0155 2C04 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C06 2CD2     
0156 2C08 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C0A A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C0C A40A     
0166 2C0E 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C10 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C12 83D2     
0172                                                   ; subprogram
0173               
0174 2C14 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C16 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C18 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C1A C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C1C 83D2     
0183                                                   ; subprogram
0184               
0185 2C1E 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C20 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C22 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C24 D160  30         movb  @>8355,r5             ; Get length as counter
     2C26 8355     
0195 2C28 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C2A 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C2C 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C2E 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C30 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C32 A420     
0206 2C34 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C36 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C38 0605  14         dec   r5                    ; Update loop counter
0211 2C3A 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C3C 0581  14         inc   r1                    ; Next version found
0217 2C3E C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C40 A42A     
0218 2C42 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C44 A42C     
0219 2C46 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C48 A430     
0220               
0221 2C4A 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C4C 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C4E 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C50 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C52 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C54 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C56 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C58 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C5A A400     
0236 2C5C C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C5E C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C60 A428     
0242                                                   ; (8 or >a)
0243 2C62 0281  26         ci    r1,8                  ; was it 8?
     2C64 0008     
0244 2C66 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C68 D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C6A 8350     
0246                                                   ; Get error byte from @>8350
0247 2C6C 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2C6E 06C0  22         swpb  r0                    ;
0255 2C70 D800  34         movb  r0,@vdpa              ; send low byte
     2C72 8C02     
0256 2C74 06C0  22         swpb  r0                    ;
0257 2C76 D800  34         movb  r0,@vdpa              ; send high byte
     2C78 8C02     
0258 2C7A D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2C7C 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2C7E 09D1  50         srl   r1,13                 ; just keep error bits
0266 2C80 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2C82 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2C84 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2C86 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2C88 A400     
0278               dsrlnk.error.devicename_invalid:
0279 2C8A 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2C8C 06C1  22         swpb  r1                    ; put error in hi byte
0282 2C8E D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2C90 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2C92 201C     
0284                                                   ; / to indicate error
0285 2C94 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2C96 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2C98 2C9A             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2C9A 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C9C 83E0     
0319               
0320 2C9E 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CA0 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CA2 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CA4 A42A     
0325 2CA6 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CA8 C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CAA C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CAC 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CAE C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CB0 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CB2 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CB4 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CB6 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CB8 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CBA 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CBC 4000     
     2CBE 2CD2     
0340 2CC0 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CC2 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CC4 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CC6 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CC8 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CCA A400     
0358 2CCC C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2CCE A434     
0359               
0360 2CD0 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2CD2 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2CD4 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2CD6 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0232                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR for returning
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 characters maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (only for fixed records)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name (Device + '.' + File name)
0021               ;       even
0022               ***************************************************************
0023               
0024               
0025               ***************************************************************
0026               * file.open - Open File for procesing
0027               ***************************************************************
0028               *  bl   @file.open
0029               *       data P0,P1
0030               *--------------------------------------------------------------
0031               *  P0 = Address of PAB in VDP RAM
0032               *  P1 = LSB contains File type/mode
0033               *--------------------------------------------------------------
0034               *  bl   @xfile.open
0035               *
0036               *  R0 = Address of PAB in VDP RAM
0037               *  R1 = LSB contains File type/mode
0038               *--------------------------------------------------------------
0039               *  Output:
0040               *  tmp0     = Copy of VDP PAB byte 1 after operation
0041               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0042               *  tmp2 LSB = Copy of status register after operation
0043               ********|*****|*********************|**************************
0044               file.open:
0045 2CD8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0046 2CDA C07B  46         mov   *r11+,r1              ; Get file type/mode
0047               *--------------------------------------------------------------
0048               * Initialisation
0049               *--------------------------------------------------------------
0050               xfile.open:
0051 2CDC 0649  22         dect  stack
0052 2CDE C64B  38         mov   r11,*stack            ; Save return address
0053                       ;------------------------------------------------------
0054                       ; Initialisation
0055                       ;------------------------------------------------------
0056 2CE0 0204  24         li    tmp0,dsrlnk.savcru
     2CE2 A42A     
0057 2CE4 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0058 2CE6 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0059 2CE8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0060 2CEA 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0061                       ;------------------------------------------------------
0062                       ; Set pointer to VDP disk buffer header
0063                       ;------------------------------------------------------
0064 2CEC 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2CEE 37D7     
0065 2CF0 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2CF2 8370     
0066                                                   ; / location
0067 2CF4 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2CF6 A44C     
0068 2CF8 04C5  22         clr   tmp1                  ; io.op.open
0069 2CFA 101F  14         jmp   _file.record.fop      ; Do file operation
0070               
0071               
0072               
0073               ***************************************************************
0074               * file.close - Close currently open file
0075               ***************************************************************
0076               *  bl   @file.close
0077               *       data P0
0078               *--------------------------------------------------------------
0079               *  P0 = Address of PAB in VDP RAM
0080               *--------------------------------------------------------------
0081               *  bl   @xfile.close
0082               *
0083               *  R0 = Address of PAB in VDP RAM
0084               *--------------------------------------------------------------
0085               *  Output:
0086               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0087               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0088               *  tmp2 LSB = Copy of status register after operation
0089               ********|*****|*********************|**************************
0090               file.close:
0091 2CFC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0092               *--------------------------------------------------------------
0093               * Initialisation
0094               *--------------------------------------------------------------
0095               xfile.close:
0096 2CFE 0649  22         dect  stack
0097 2D00 C64B  38         mov   r11,*stack            ; Save return address
0098 2D02 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D04 0001     
0099 2D06 1019  14         jmp   _file.record.fop      ; Do file operation
0100               
0101               
0102               ***************************************************************
0103               * file.record.read - Read record from file
0104               ***************************************************************
0105               *  bl   @file.record.read
0106               *       data P0
0107               *--------------------------------------------------------------
0108               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0109               *--------------------------------------------------------------
0110               *  bl   @xfile.record.read
0111               *
0112               *  R0 = Address of PAB in VDP RAM
0113               *--------------------------------------------------------------
0114               *  Output:
0115               *  tmp0     = Copy of VDP PAB byte 1 after operation
0116               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0117               *  tmp2 LSB = Copy of status register after operation
0118               ********|*****|*********************|**************************
0119               file.record.read:
0120 2D08 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0121               *--------------------------------------------------------------
0122               * Initialisation
0123               *--------------------------------------------------------------
0124 2D0A 0649  22         dect  stack
0125 2D0C C64B  38         mov   r11,*stack            ; Save return address
0126               
0127 2D0E 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D10 0002     
0128 2D12 1013  14         jmp   _file.record.fop      ; Do file operation
0129               
0130               
0131               
0132               ***************************************************************
0133               * file.record.write - Write record to file
0134               ***************************************************************
0135               *  bl   @file.record.write
0136               *       data P0
0137               *--------------------------------------------------------------
0138               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0139               *--------------------------------------------------------------
0140               *  bl   @xfile.record.write
0141               *
0142               *  R0 = Address of PAB in VDP RAM
0143               *--------------------------------------------------------------
0144               *  Output:
0145               *  tmp0     = Copy of VDP PAB byte 1 after operation
0146               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0147               *  tmp2 LSB = Copy of status register after operation
0148               ********|*****|*********************|**************************
0149               file.record.write:
0150 2D14 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0151               *--------------------------------------------------------------
0152               * Initialisation
0153               *--------------------------------------------------------------
0154 2D16 0649  22         dect  stack
0155 2D18 C64B  38         mov   r11,*stack            ; Save return address
0156               
0157 2D1A C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0158 2D1C 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D1E 0005     
0159               
0160 2D20 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D22 A43E     
0161               
0162 2D24 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D26 2298     
0163                                                   ; \ i  tmp0 = VDP target address
0164                                                   ; / i  tmp1 = Byte to write
0165               
0166 2D28 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D2A 0003     
0167 2D2C 1006  14         jmp   _file.record.fop      ; Do file operation
0168               
0169               
0170               
0171               file.record.seek:
0172 2D2E 1000  14         nop
0173               
0174               
0175               file.image.load:
0176 2D30 1000  14         nop
0177               
0178               
0179               file.image.save:
0180 2D32 1000  14         nop
0181               
0182               
0183               file.delete:
0184 2D34 1000  14         nop
0185               
0186               
0187               file.rename:
0188 2D36 1000  14         nop
0189               
0190               
0191               file.status:
0192 2D38 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D3A C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D3C A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D3E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D40 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D42 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D44 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D46 2298     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D48 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D4A 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D4C C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D4E A44C     
0246               
0247 2D50 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D52 2298     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D54 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D56 0009     
0254 2D58 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D5A 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D5C C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D5E 8322     
     2D60 833C     
0259               
0260 2D62 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D64 A42A     
0261 2D66 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D68 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D6A 2B66     
0268 2D6C 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2D6E 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2D70 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2D72 2C96     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2D74 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2D76 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2D78 833C     
     2D7A 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2D7C C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2D7E A436     
0292 2D80 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2D82 0005     
0293 2D84 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2D86 22B0     
0294 2D88 C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2D8A C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2D8C C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2D8E 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0235               *//////////////////////////////////////////////////////////////
0236               *                            TIMERS
0237               *//////////////////////////////////////////////////////////////
0238               
0239                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2D90 0300  22 tmgr    limi  0                     ; No interrupt processing
     2D92 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2D94 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2D96 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2D98 2360  32         coc   @wbit2,r13            ; C flag on ?
     2D9A 201C     
0029 2D9C 1602  14         jne   tmgr1a                ; No, so move on
0030 2D9E E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2DA0 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2DA2 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2DA4 2020     
0035 2DA6 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2DA8 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2DAA 2010     
0048 2DAC 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2DAE 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2DB0 200E     
0050 2DB2 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2DB4 0460  28         b     @kthread              ; Run kernel thread
     2DB6 2E2E     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2DB8 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2DBA 2014     
0056 2DBC 13EB  14         jeq   tmgr1
0057 2DBE 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2DC0 2012     
0058 2DC2 16E8  14         jne   tmgr1
0059 2DC4 C120  38         mov   @wtiusr,tmp0
     2DC6 832E     
0060 2DC8 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2DCA 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2DCC 2E2C     
0065 2DCE C10A  30         mov   r10,tmp0
0066 2DD0 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2DD2 00FF     
0067 2DD4 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2DD6 201C     
0068 2DD8 1303  14         jeq   tmgr5
0069 2DDA 0284  26         ci    tmp0,60               ; 1 second reached ?
     2DDC 003C     
0070 2DDE 1002  14         jmp   tmgr6
0071 2DE0 0284  26 tmgr5   ci    tmp0,50
     2DE2 0032     
0072 2DE4 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2DE6 1001  14         jmp   tmgr8
0074 2DE8 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2DEA C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2DEC 832C     
0079 2DEE 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2DF0 FF00     
0080 2DF2 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2DF4 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2DF6 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2DF8 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2DFA C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2DFC 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2DFE 830C     
     2E00 830D     
0089 2E02 1608  14         jne   tmgr10                ; No, get next slot
0090 2E04 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E06 FF00     
0091 2E08 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E0A C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E0C 8330     
0096 2E0E 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E10 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E12 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E14 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E16 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E18 8315     
     2E1A 8314     
0103 2E1C 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E1E 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E20 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E22 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E24 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E26 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E28 FF00     
0109 2E2A 10B4  14         jmp   tmgr1
0110 2E2C 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0240                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2E2E E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2E30 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2E32 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2E34 2006     
0023 2E36 1602  14         jne   kthread_kb
0024 2E38 06A0  36         bl    @sdpla1               ; Run sound player
     2E3A 2802     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2E3C 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2E3E 2882     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2E40 0460  28         b     @tmgr3                ; Exit
     2E42 2DB8     
                   < runlib.asm
0241                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2E44 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2E46 832E     
0018 2E48 E0A0  42         soc   @wbit7,config         ; Enable user hook
     2E4A 2012     
0019 2E4C 045B  24 mkhoo1  b     *r11                  ; Return
0020      2D94     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2E4E 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2E50 832E     
0029 2E52 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2E54 FEFF     
0030 2E56 045B  24         b     *r11                  ; Return
                   < runlib.asm
0242               
0244                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2E58 C13B  46 mkslot  mov   *r11+,tmp0
0018 2E5A C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2E5C C184  30         mov   tmp0,tmp2
0023 2E5E 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2E60 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2E62 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2E64 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2E66 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2E68 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2E6A 881B  46         c     *r11,@w$ffff          ; End of list ?
     2E6C 2022     
0035 2E6E 1301  14         jeq   mkslo1                ; Yes, exit
0036 2E70 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2E72 05CB  22 mkslo1  inct  r11
0041 2E74 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2E76 C13B  46 clslot  mov   *r11+,tmp0
0053 2E78 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2E7A A120  38         a     @wtitab,tmp0          ; Add table base
     2E7C 832C     
0055 2E7E 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2E80 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2E82 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2E84 C13B  46 rsslot  mov   *r11+,tmp0
0069 2E86 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2E88 A120  38         a     @wtitab,tmp0          ; Add table base
     2E8A 832C     
0071 2E8C 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2E8E C154  38         mov   *tmp0,tmp1
0073 2E90 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2E92 FF00     
0074 2E94 C505  38         mov   tmp1,*tmp0
0075 2E96 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0246               
0247               
0248               
0249               *//////////////////////////////////////////////////////////////
0250               *                    RUNLIB INITIALISATION
0251               *//////////////////////////////////////////////////////////////
0252               
0253               ***************************************************************
0254               *  RUNLIB - Runtime library initalisation
0255               ***************************************************************
0256               *  B  @RUNLIB
0257               *--------------------------------------------------------------
0258               *  REMARKS
0259               *  if R0 in WS1 equals >4a4a we were called from the system
0260               *  crash handler so we return there after initialisation.
0261               
0262               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0263               *  after clearing scratchpad memory. This has higher priority
0264               *  as crash handler flag R0.
0265               ********|*****|*********************|**************************
0272 2E98 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2E9A 8302     
0274               *--------------------------------------------------------------
0275               * Alternative entry point
0276               *--------------------------------------------------------------
0277 2E9C 0300  22 runli1  limi  0                     ; Turn off interrupts
     2E9E 0000     
0278 2EA0 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2EA2 8300     
0279 2EA4 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2EA6 83C0     
0280               *--------------------------------------------------------------
0281               * Clear scratch-pad memory from R4 upwards
0282               *--------------------------------------------------------------
0283 2EA8 0202  20 runli2  li    r2,>8308
     2EAA 8308     
0284 2EAC 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0285 2EAE 0282  22         ci    r2,>8400
     2EB0 8400     
0286 2EB2 16FC  14         jne   runli3
0287               *--------------------------------------------------------------
0288               * Exit to TI-99/4A title screen ?
0289               *--------------------------------------------------------------
0290 2EB4 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2EB6 FFFF     
0291 2EB8 1602  14         jne   runli4                ; No, continue
0292 2EBA 0420  42         blwp  @0                    ; Yes, bye bye
     2EBC 0000     
0293               *--------------------------------------------------------------
0294               * Determine if VDP is PAL or NTSC
0295               *--------------------------------------------------------------
0296 2EBE C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2EC0 833C     
0297 2EC2 04C1  14         clr   r1                    ; Reset counter
0298 2EC4 0202  20         li    r2,10                 ; We test 10 times
     2EC6 000A     
0299 2EC8 C0E0  30 runli5  mov   @vdps,r3
     2ECA 8802     
0300 2ECC 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2ECE 2020     
0301 2ED0 1302  14         jeq   runli6
0302 2ED2 0581  14         inc   r1                    ; Increase counter
0303 2ED4 10F9  14         jmp   runli5
0304 2ED6 0602  14 runli6  dec   r2                    ; Next test
0305 2ED8 16F7  14         jne   runli5
0306 2EDA 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2EDC 1250     
0307 2EDE 1202  14         jle   runli7                ; No, so it must be NTSC
0308 2EE0 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2EE2 201C     
0309               *--------------------------------------------------------------
0310               * Copy machine code to scratchpad (prepare tight loop)
0311               *--------------------------------------------------------------
0312 2EE4 06A0  32 runli7  bl    @loadmc
     2EE6 21E6     
0313               *--------------------------------------------------------------
0314               * Initialize registers, memory, ...
0315               *--------------------------------------------------------------
0316 2EE8 04C1  14 runli9  clr   r1
0317 2EEA 04C2  14         clr   r2
0318 2EEC 04C3  14         clr   r3
0319 2EEE 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2EF0 A900     
0320 2EF2 020F  20         li    r15,vdpw              ; Set VDP write address
     2EF4 8C00     
0322 2EF6 06A0  32         bl    @mute                 ; Mute sound generators
     2EF8 27C6     
0324               *--------------------------------------------------------------
0325               * Setup video memory
0326               *--------------------------------------------------------------
0328 2EFA 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2EFC 4A4A     
0329 2EFE 1605  14         jne   runlia
0330 2F00 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F02 225A     
0331 2F04 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F06 0000     
     2F08 3000     
0336 2F0A 06A0  32 runlia  bl    @filv
     2F0C 225A     
0337 2F0E 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F10 00F4     
     2F12 0010     
0338               *--------------------------------------------------------------
0339               * Check if there is a F18A present
0340               *--------------------------------------------------------------
0344 2F14 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F16 26F6     
0345 2F18 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F1A 2720     
0346 2F1C 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F1E 2720     
0347 2F20 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F22 2720     
0348 2F24 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F26 270C     
0349               
0350 2F28 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F2A 22FE     
0351 2F2C 3201                   data >3201            ; F18a VR50 (>32), bit 1
0353               *--------------------------------------------------------------
0354               * Check if there is a speech synthesizer attached
0355               *--------------------------------------------------------------
0357               *       <<skipped>>
0361               *--------------------------------------------------------------
0362               * Load video mode table & font
0363               *--------------------------------------------------------------
0364 2F2E 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2F30 22C4     
0365 2F32 3626             data  spvmod                ; Equate selected video mode table
0366 2F34 0204  20         li    tmp0,spfont           ; Get font option
     2F36 000C     
0367 2F38 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0368 2F3A 1304  14         jeq   runlid                ; Yes, skip it
0369 2F3C 06A0  32         bl    @ldfnt
     2F3E 232C     
0370 2F40 1100             data  fntadr,spfont         ; Load specified font
     2F42 000C     
0371               *--------------------------------------------------------------
0372               * Did a system crash occur before runlib was called?
0373               *--------------------------------------------------------------
0374 2F44 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2F46 4A4A     
0375 2F48 1602  14         jne   runlie                ; No, continue
0376 2F4A 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2F4C 2086     
0377               *--------------------------------------------------------------
0378               * Branch to main program
0379               *--------------------------------------------------------------
0380 2F4E 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2F50 0040     
0381 2F52 0460  28         b     @main                 ; Give control to main program
     2F54 6046     
                   < stevie_b3.asm
0050                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2F56 C13B  30         mov   *r11+,tmp0            ; P0
0022 2F58 C17B  30         mov   *r11+,tmp1            ; P1
0023 2F5A C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2F5C 0649  14         dect  stack
0029 2F5E C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2F60 0649  14         dect  stack
0031 2F62 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2F64 0649  14         dect  stack
0033 2F66 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2F68 0649  14         dect  stack
0035 2F6A C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Push to farjump return stack
0038                       ;------------------------------------------------------
0039 2F6C 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2F6E 6000     
0040 2F70 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2F72 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2F74 A226     
0044 2F76 0647  14         dect  tmp3
0045 2F78 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2F7A 0647  14         dect  tmp3
0047 2F7C C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2F7E C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2F80 A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2F82 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2F84 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2F86 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2F88 0224  22         ai    tmp0,>0800
     2F8A 0800     
0066 2F8C 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 2F8E 0285  22         ci    tmp1,>ffff
     2F90 FFFF     
0075 2F92 1602  14         jne   !
0076 2F94 C160  34         mov   @trmpvector,tmp1
     2F96 A032     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 2F98 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 2F9A 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 2F9C 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 2F9E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FA0 FFCE     
0091 2FA2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FA4 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 2FA6 0694  24         bl    *tmp0                 ; Call function
0097                       ;------------------------------------------------------
0098                       ; Bankswitch back to source bank
0099                       ;------------------------------------------------------
0100               rom.farjump.return:
0101 2FA8 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     2FAA A226     
0102 2FAC C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 2FAE 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 2FB0 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 2FB2 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 2FB4 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 2FB6 028B  22         ci    r11,>6000
     2FB8 6000     
0115 2FBA 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 2FBC 028B  22         ci    r11,>7fff
     2FBE 7FFF     
0117 2FC0 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 2FC2 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     2FC4 A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 2FC6 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 2FC8 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 2FCA 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 2FCC 0225  22         ai    tmp1,>0800
     2FCE 0800     
0137 2FD0 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 2FD2 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 2FD4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FD6 FFCE     
0144 2FD8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FDA 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 2FDC C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 2FDE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 2FE0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 2FE2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 2FE4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 2FE6 0649  14         dect  stack
0021 2FE8 C64B  30         mov   r11,*stack            ; Save return address
0022 2FEA 0649  14         dect  stack
0023 2FEC C644  30         mov   tmp0,*stack           ; Push tmp0
0024 2FEE 0649  14         dect  stack
0025 2FF0 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 2FF2 0204  20         li    tmp0,fb.top
     2FF4 D000     
0030 2FF6 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     2FF8 A300     
0031 2FFA 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     2FFC A304     
0032 2FFE 04E0  34         clr   @fb.row               ; Current row=0
     3000 A306     
0033 3002 04E0  34         clr   @fb.column            ; Current column=0
     3004 A30C     
0034               
0035 3006 0204  20         li    tmp0,colrow
     3008 0050     
0036 300A C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     300C A30E     
0037 300E 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3010 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3012 C160  34         mov   @tv.ruler.visible,tmp1
     3014 A210     
0042 3016 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 3018 0204  20         li    tmp0,pane.botrow-2
     301A 001B     
0044 301C 1002  14         jmp   fb.init.cont
0045 301E 0204  20 !       li    tmp0,pane.botrow-1
     3020 001C     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 3022 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     3024 A31C     
0051 3026 C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     3028 A31E     
0052               
0053 302A 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     302C A222     
0054 302E 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3030 A312     
0055 3032 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3034 A318     
0056 3036 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3038 A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 303A 06A0  32         bl    @film
     303C 2202     
0061 303E D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3040 0000     
     3042 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 3044 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3046 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3048 C2F9  30         mov   *stack+,r11           ; Pop r11
0069 304A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.utils.asm"           ; Framebuffer utilities
     **** ****     > fb.utils.asm
0001               * FILE......: fb.utils.asm
0002               * Purpose...: Stevie Editor - Framebuffer utilities
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 304C 0649  14         dect  stack
0025 304E C64B  30         mov   r11,*stack            ; Save return address
0026 3050 0649  14         dect  stack
0027 3052 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3054 C120  34         mov   @parm1,tmp0
     3056 A006     
0032 3058 A120  34         a     @fb.topline,tmp0
     305A A304     
0033 305C C804  38         mov   tmp0,@outparm1
     305E A016     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3060 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 3062 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 3064 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 3066 0649  14         dect  stack
0069 3068 C64B  30         mov   r11,*stack            ; Save return address
0070 306A 0649  14         dect  stack
0071 306C C644  30         mov   tmp0,*stack           ; Push tmp0
0072 306E 0649  14         dect  stack
0073 3070 C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 3072 C120  34         mov   @fb.row,tmp0
     3074 A306     
0078 3076 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     3078 A30E     
0079 307A A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     307C A30C     
0080 307E A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3080 A300     
0081 3082 C805  38         mov   tmp1,@fb.current
     3084 A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 3086 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 3088 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 308A C2F9  30         mov   *stack+,r11           ; Pop r11
0089 308C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 308E 0649  14         dect  stack
0052 3090 C64B  30         mov   r11,*stack            ; Save return address
0053 3092 0649  14         dect  stack
0054 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 3096 0204  20         li    tmp0,idx.top
     3098 B000     
0059 309A C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     309C A502     
0060               
0061 309E C120  34         mov   @tv.sams.b000,tmp0
     30A0 A206     
0062 30A2 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     30A4 A600     
0063 30A6 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     30A8 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 30AA 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     30AC 0004     
0068 30AE C804  38         mov   tmp0,@idx.sams.hipage ; /
     30B0 A604     
0069               
0070 30B2 06A0  32         bl    @_idx.sams.mapcolumn.on
     30B4 30D0     
0071                                                   ; Index in continuous memory region
0072               
0073 30B6 06A0  32         bl    @film
     30B8 2202     
0074 30BA B000                   data idx.top,>00,idx.size * 5
     30BC 0000     
     30BE 5000     
0075                                                   ; Clear index
0076               
0077 30C0 06A0  32         bl    @_idx.sams.mapcolumn.off
     30C2 3104     
0078                                                   ; Restore memory window layout
0079               
0080 30C4 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     30C6 A602     
     30C8 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 30CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 30CC C2F9  30         mov   *stack+,r11           ; Pop r11
0088 30CE 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 30D0 0649  14         dect  stack
0102 30D2 C64B  30         mov   r11,*stack            ; Push return address
0103 30D4 0649  14         dect  stack
0104 30D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 30D8 0649  14         dect  stack
0106 30DA C645  30         mov   tmp1,*stack           ; Push tmp1
0107 30DC 0649  14         dect  stack
0108 30DE C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 30E0 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     30E2 A602     
0113 30E4 0205  20         li    tmp1,idx.top
     30E6 B000     
0114 30E8 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     30EA 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 30EC 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     30EE 2542     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 30F0 0584  14         inc   tmp0                  ; Next SAMS index page
0123 30F2 0225  22         ai    tmp1,>1000            ; Next memory region
     30F4 1000     
0124 30F6 0606  14         dec   tmp2                  ; Update loop counter
0125 30F8 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 30FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 30FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 30FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3100 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3102 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3104 0649  14         dect  stack
0151 3106 C64B  30         mov   r11,*stack            ; Push return address
0152 3108 0649  14         dect  stack
0153 310A C644  30         mov   tmp0,*stack           ; Push tmp0
0154 310C 0649  14         dect  stack
0155 310E C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3110 0649  14         dect  stack
0157 3112 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3114 0649  14         dect  stack
0159 3116 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3118 0205  20         li    tmp1,idx.top
     311A B000     
0164 311C 0206  20         li    tmp2,5                ; Always 5 pages
     311E 0005     
0165 3120 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3122 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3124 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3126 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3128 2542     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 312A 0225  22         ai    tmp1,>1000            ; Next memory region
     312C 1000     
0176 312E 0606  14         dec   tmp2                  ; Update loop counter
0177 3130 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 3132 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 3134 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 3136 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 3138 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 313A C2F9  30         mov   *stack+,r11           ; Pop return address
0187 313C 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 313E 0649  14         dect  stack
0212 3140 C64B  30         mov   r11,*stack            ; Save return address
0213 3142 0649  14         dect  stack
0214 3144 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 3146 0649  14         dect  stack
0216 3148 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 314A 0649  14         dect  stack
0218 314C C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 314E C184  18         mov   tmp0,tmp2             ; Line number
0223 3150 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 3152 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     3154 0800     
0225               
0226 3156 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 3158 0A16  18         sla   tmp2,1                ; line number * 2
0231 315A C806  38         mov   tmp2,@outparm1        ; Offset index entry
     315C A016     
0232               
0233 315E A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     3160 A602     
0234 3162 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     3164 A600     
0235               
0236 3166 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 3168 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     316A A600     
0242 316C C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     316E A206     
0243 3170 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 3172 0205  20         li    tmp1,>b000            ; Memory window for index page
     3174 B000     
0246               
0247 3176 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     3178 2542     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 317A 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     317C A604     
0254 317E 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3180 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     3182 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 3184 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 3186 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 3188 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 318A C2F9  30         mov   *stack+,r11           ; Pop r11
0265 318C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 318E 0649  14         dect  stack
0023 3190 C64B  30         mov   r11,*stack            ; Save return address
0024 3192 0649  14         dect  stack
0025 3194 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3196 0204  20         li    tmp0,edb.top          ; \
     3198 C000     
0030 319A C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     319C A500     
0031 319E C804  38         mov   tmp0,@edb.next_free.ptr
     31A0 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 31A2 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     31A4 A50A     
0035               
0036 31A6 0204  20         li    tmp0,1
     31A8 0001     
0037 31AA C804  38         mov   tmp0,@edb.lines       ; Lines=1
     31AC A504     
0038               
0039 31AE 0720  34         seto  @edb.block.m1         ; Reset block start line
     31B0 A50E     
0040 31B2 0720  34         seto  @edb.block.m2         ; Reset block end line
     31B4 A510     
0041               
0042 31B6 0204  20         li    tmp0,txt.newfile      ; "New file"
     31B8 3882     
0043 31BA C804  38         mov   tmp0,@edb.filename.ptr
     31BC A514     
0044               
0045 31BE 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     31C0 A440     
0046 31C2 04E0  34         clr   @fh.kilobytes.prev    ; /
     31C4 A45C     
0047               
0048 31C6 0204  20         li    tmp0,txt.filetype.none
     31C8 39E4     
0049 31CA C804  38         mov   tmp0,@edb.filetype.ptr
     31CC A516     
0050               
0051               
0052               edb.init.exit:
0053                       ;------------------------------------------------------
0054                       ; Exit
0055                       ;------------------------------------------------------
0056 31CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 31D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0058 31D2 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 31D4 0649  14         dect  stack
0023 31D6 C64B  30         mov   r11,*stack            ; Save return address
0024 31D8 0649  14         dect  stack
0025 31DA C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 31DC 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     31DE E000     
0030 31E0 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     31E2 A700     
0031               
0032 31E4 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     31E6 A702     
0033 31E8 0204  20         li    tmp0,4
     31EA 0004     
0034 31EC C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     31EE A706     
0035 31F0 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     31F2 A708     
0036               
0037 31F4 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     31F6 A716     
0038 31F8 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     31FA A718     
0039 31FC 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     31FE A72A     
0040                       ;------------------------------------------------------
0041                       ; Clear command buffer
0042                       ;------------------------------------------------------
0043 3200 06A0  32         bl    @film
     3202 2202     
0044 3204 E000             data  cmdb.top,>00,cmdb.size
     3206 0000     
     3208 1000     
0045                                                   ; Clear it all the way
0046               cmdb.init.exit:
0047                       ;------------------------------------------------------
0048                       ; Exit
0049                       ;------------------------------------------------------
0050 320A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 320C C2F9  30         mov   *stack+,r11           ; Pop r11
0052 320E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 3210 0649  14         dect  stack
0023 3212 C64B  30         mov   r11,*stack            ; Save return address
0024 3214 0649  14         dect  stack
0025 3216 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3218 0649  14         dect  stack
0027 321A C645  30         mov   tmp1,*stack           ; Push tmp1
0028 321C 0649  14         dect  stack
0029 321E C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3220 04E0  34         clr   @tv.error.visible     ; Set to hidden
     3222 A228     
0034 3224 0204  20         li    tmp0,3
     3226 0003     
0035 3228 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     322A A22A     
0036               
0037 322C 06A0  32         bl    @film
     322E 2202     
0038 3230 A230                   data tv.error.msg,0,160
     3232 0000     
     3234 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 3236 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 3238 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 323A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 323C C2F9  30         mov   *stack+,r11           ; Pop R11
0047 323E 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0014                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 3240 0649  14         dect  stack
0023 3242 C64B  30         mov   r11,*stack            ; Save return address
0024 3244 0649  14         dect  stack
0025 3246 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3248 0649  14         dect  stack
0027 324A C645  30         mov   tmp1,*stack           ; Push tmp1
0028 324C 0649  14         dect  stack
0029 324E C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3250 0204  20         li    tmp0,1                ; \ Set default color scheme
     3252 0001     
0034 3254 C804  38         mov   tmp0,@tv.colorscheme  ; /
     3256 A212     
0035               
0036 3258 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     325A A224     
0037 325C E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     325E 200C     
0038               
0039 3260 0204  20         li    tmp0,fj.bottom
     3262 B000     
0040 3264 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     3266 A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 3268 06A0  32         bl    @cpym2m
     326A 24A6     
0045 326C 3ABC                   data def.printer.fname,tv.printer.fname,7
     326E DE00     
     3270 0007     
0046               
0047 3272 06A0  32         bl    @cpym2m
     3274 24A6     
0048 3276 3AC3                   data def.clip.fname,tv.clip.fname,10
     3278 DE50     
     327A 000A     
0049               
0050 327C 0720  34         seto  @edb.autoinsert       ; Set AutoInsert on by default
     327E A50C     
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               tv.init.exit:
0055 3280 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 3282 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 3284 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 3286 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 3288 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 328A 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     328C 2772     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 328E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3290 2F56     
0028 3292 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3294 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3296 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0016                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 3298 0649  14         dect  stack
0024 329A C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 329C 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     329E 31D4     
0029 32A0 06A0  32         bl    @edb.init             ; Initialize editor buffer
     32A2 318E     
0030 32A4 06A0  32         bl    @idx.init             ; Initialize index
     32A6 308E     
0031 32A8 06A0  32         bl    @fb.init              ; Initialize framebuffer
     32AA 2FE6     
0032 32AC 06A0  32         bl    @errpane.init         ; Initialize error pane
     32AE 3210     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 32B0 06A0  32         bl    @hchar
     32B2 279E     
0037 32B4 0034                   byte 0,52,32,18       ; Remove markers
     32B6 2012     
0038 32B8 1D00                   byte pane.botrow,0,32,51
     32BA 2033     
0039 32BC FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 32BE C2F9  30         mov   *stack+,r11           ; Pop R11
0045 32C0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "tv.unpack.uint16.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.unpack.uint16.asm
0001               * FILE......: tv.unpack.uint16.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.unpack.uint16
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.unpack.uint16
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @unpacked.string = Length-prefixed string with unpacked uint16
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.unpack.uint16:
0020 32C2 0649  14         dect  stack
0021 32C4 C64B  30         mov   r11,*stack            ; Save return address
0022 32C6 0649  14         dect  stack
0023 32C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Initialize
0026                       ;------------------------------------------------------
0027 32CA 06A0  32         bl    @mknum                ; Convert unsigned number to string
     32CC 2972     
0028 32CE A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0029 32D0 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0030 32D2 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0031 32D3   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0032               
0033 32D4 0204  20         li    tmp0,unpacked.string
     32D6 A02C     
0034 32D8 04F4  30         clr   *tmp0+                ; Clear string 01
0035 32DA 04F4  30         clr   *tmp0+                ; Clear string 23
0036 32DC 04F4  30         clr   *tmp0+                ; Clear string 34
0037               
0038 32DE 06A0  32         bl    @trimnum              ; Trim unsigned number string
     32E0 29CA     
0039 32E2 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0040 32E4 A02C                   data unpacked.string  ; | i p1  = Pointer to output buffer
0041 32E6 0020                   data 32               ; / i p2  = Padding char to match against
0042                       ;-------------------------------------------------------
0043                       ; Exit
0044                       ;-------------------------------------------------------
0045               tv.unpack.uint16.exit:
0046 32E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 32EA C2F9  30         mov   *stack+,r11           ; Pop r11
0048 32EC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 32EE 0649  14         dect  stack
0025 32F0 C64B  30         mov   r11,*stack            ; Push return address
0026 32F2 0649  14         dect  stack
0027 32F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 32F6 0649  14         dect  stack
0029 32F8 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 32FA 0649  14         dect  stack
0031 32FC C646  30         mov   tmp2,*stack           ; Push tmp2
0032 32FE 0649  14         dect  stack
0033 3300 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3302 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3304 A006     
0038 3306 D194  26         movb  *tmp0,tmp2            ; /
0039 3308 0986  32         srl   tmp2,8                ; Right align
0040 330A C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 330C 8806  34         c     tmp2,@parm2           ; String length > requested length?
     330E A008     
0043 3310 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3312 C120  34         mov   @parm1,tmp0           ; Get source address
     3314 A006     
0048 3316 C160  34         mov   @parm4,tmp1           ; Get destination address
     3318 A00C     
0049 331A 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 331C 0649  14         dect  stack
0052 331E C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3320 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3322 24AC     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3324 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3326 C120  34         mov   @parm2,tmp0           ; Get requested length
     3328 A008     
0064 332A 0A84  32         sla   tmp0,8                ; Left align
0065 332C C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     332E A00C     
0066 3330 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3332 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3334 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3336 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3338 A008     
0073 333A 6187  18         s     tmp3,tmp2             ; |
0074 333C 0586  14         inc   tmp2                  ; /
0075               
0076 333E C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3340 A00A     
0077 3342 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3344 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3346 0606  14         dec   tmp2                  ; Update loop counter
0084 3348 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 334A C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     334C A00C     
     334E A016     
0087 3350 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3352 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3354 FFCE     
0093 3356 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3358 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 335A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 335C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 335E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 3360 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 3362 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 3364 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       ;-----------------------------------------------------------------------
0020                       ; Logic for Index management
0021                       ;-----------------------------------------------------------------------
0022                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3366 0649  14         dect  stack
0023 3368 C64B  30         mov   r11,*stack            ; Save return address
0024 336A 0649  14         dect  stack
0025 336C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 336E 0649  14         dect  stack
0027 3370 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3372 C120  34         mov   @parm1,tmp0           ; Get line number
     3374 A006     
0032 3376 C160  34         mov   @parm2,tmp1           ; Get pointer
     3378 A008     
0033 337A 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 337C 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     337E 0FFF     
0039 3380 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3382 06E0  34         swpb  @parm3
     3384 A00A     
0044 3386 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3388 A00A     
0045 338A 06E0  34         swpb  @parm3                ; \ Restore original order again,
     338C A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 338E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3390 313E     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 3392 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     3394 A016     
0056 3396 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     3398 B000     
0057 339A C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     339C A016     
0058 339E 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 33A0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33A2 313E     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 33A4 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     33A6 A016     
0068 33A8 04E4  34         clr   @idx.top(tmp0)        ; /
     33AA B000     
0069 33AC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33AE A016     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 33B0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 33B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 33B4 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 33B6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0023                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 33B8 0649  14         dect  stack
0022 33BA C64B  30         mov   r11,*stack            ; Save return address
0023 33BC 0649  14         dect  stack
0024 33BE C644  30         mov   tmp0,*stack           ; Push tmp0
0025 33C0 0649  14         dect  stack
0026 33C2 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 33C4 0649  14         dect  stack
0028 33C6 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 33C8 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     33CA A006     
0033               
0034 33CC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     33CE 313E     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 33D0 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     33D2 A016     
0039 33D4 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     33D6 B000     
0040               
0041 33D8 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 33DA C185  18         mov   tmp1,tmp2             ; \
0047 33DC 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 33DE 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     33E0 00FF     
0052 33E2 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 33E4 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     33E6 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 33E8 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     33EA A016     
0059 33EC C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     33EE A018     
0060 33F0 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 33F2 04E0  34         clr   @outparm1
     33F4 A016     
0066 33F6 04E0  34         clr   @outparm2
     33F8 A018     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 33FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 33FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 33FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3400 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3402 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3404 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3406 B000     
0018 3408 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 340A 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 340C CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 340E 0606  14         dec   tmp2                  ; tmp2--
0026 3410 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3412 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3414 0649  14         dect  stack
0047 3416 C64B  30         mov   r11,*stack            ; Save return address
0048 3418 0649  14         dect  stack
0049 341A C644  30         mov   tmp0,*stack           ; Push tmp0
0050 341C 0649  14         dect  stack
0051 341E C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3420 0649  14         dect  stack
0053 3422 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3424 0649  14         dect  stack
0055 3426 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3428 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     342A A006     
0060               
0061 342C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     342E 313E     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3430 C120  34         mov   @outparm1,tmp0        ; Index offset
     3432 A016     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3434 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3436 A008     
0070 3438 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 343A 61A0  34         s     @parm1,tmp2           ; Calculate loop
     343C A006     
0074 343E 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3440 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3442 B000     
0081 3444 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3446 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3448 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     344A A008     
0088 344C 0287  22         ci    tmp3,2048
     344E 0800     
0089 3450 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3452 06A0  32         bl    @_idx.sams.mapcolumn.on
     3454 30D0     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3456 C120  34         mov   @parm1,tmp0           ; Restore line number
     3458 A006     
0103 345A 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 345C 06A0  32         bl    @_idx.entry.delete.reorg
     345E 3404     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3460 06A0  32         bl    @_idx.sams.mapcolumn.off
     3462 3104     
0111                                                   ; Restore memory window layout
0112               
0113 3464 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3466 06A0  32         bl    @_idx.entry.delete.reorg
     3468 3404     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 346A 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 346C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 346E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3470 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3472 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3474 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3476 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3478 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     347A 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 347C 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 347E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3480 FFCE     
0027 3482 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3484 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3486 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3488 B000     
0032 348A C144  18         mov   tmp0,tmp1             ; a = current slot
0033 348C 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 348E 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 3490 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 3492 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 3494 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 3496 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 3498 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     349A AFFC     
0043 349C 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 349E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34A0 FFCE     
0049 34A2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34A4 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 34A6 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 34A8 0644  14         dect  tmp0                  ; Move pointer up
0056 34AA 0645  14         dect  tmp1                  ; Move pointer up
0057 34AC 0606  14         dec   tmp2                  ; Next index entry
0058 34AE 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 34B0 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 34B2 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 34B4 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 34B6 0649  14         dect  stack
0089 34B8 C64B  30         mov   r11,*stack            ; Save return address
0090 34BA 0649  14         dect  stack
0091 34BC C644  30         mov   tmp0,*stack           ; Push tmp0
0092 34BE 0649  14         dect  stack
0093 34C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 34C2 0649  14         dect  stack
0095 34C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 34C6 0649  14         dect  stack
0097 34C8 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 34CA C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     34CC A008     
0102 34CE 61A0  34         s     @parm1,tmp2           ; Calculate loop
     34D0 A006     
0103 34D2 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 34D4 C1E0  34         mov   @parm2,tmp3
     34D6 A008     
0110 34D8 0287  22         ci    tmp3,2048
     34DA 0800     
0111 34DC 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 34DE 06A0  32         bl    @_idx.sams.mapcolumn.on
     34E0 30D0     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 34E2 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     34E4 A008     
0123 34E6 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 34E8 06A0  32         bl    @_idx.entry.insert.reorg
     34EA 3478     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 34EC 06A0  32         bl    @_idx.sams.mapcolumn.off
     34EE 3104     
0131                                                   ; Restore memory window layout
0132               
0133 34F0 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 34F2 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     34F4 A008     
0139               
0140 34F6 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34F8 313E     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 34FA C120  34         mov   @outparm1,tmp0        ; Index offset
     34FC A016     
0145               
0146 34FE 06A0  32         bl    @_idx.entry.insert.reorg
     3500 3478     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3502 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3504 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3506 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3508 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 350A C2F9  30         mov   *stack+,r11           ; Pop r11
0160 350C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       ;-----------------------------------------------------------------------
0027                       ; Logic for editor buffer
0028                       ;-----------------------------------------------------------------------
0029                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 350E 0649  14         dect  stack
0022 3510 C64B  30         mov   r11,*stack            ; Push return address
0023 3512 0649  14         dect  stack
0024 3514 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3516 0649  14         dect  stack
0026 3518 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 351A 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     351C A504     
0031 351E 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3520 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3522 FFCE     
0037 3524 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3526 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3528 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     352A A006     
0043               
0044 352C 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     352E 33B8     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3530 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3532 A018     
0050 3534 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3536 A016     
0051 3538 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 353A 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     353C A208     
0057 353E 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3540 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3542 2542     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3544 C820  54         mov   @outparm2,@tv.sams.c000
     3546 A018     
     3548 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 354A C820  54         mov   @outparm2,@edb.sams.page
     354C A018     
     354E A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3550 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3552 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3554 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3556 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3558 0649  14         dect  stack
0022 355A C64B  30         mov   r11,*stack            ; Push return address
0023 355C 0649  14         dect  stack
0024 355E C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3560 0649  14         dect  stack
0026 3562 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3564 04E0  34         clr   @outparm1             ; Reset length
     3566 A016     
0031 3568 04E0  34         clr   @outparm2             ; Reset SAMS bank
     356A A018     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 356C C120  34         mov   @parm1,tmp0           ; \
     356E A006     
0036 3570 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3572 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3574 A504     
0039 3576 1101  14         jlt   !                     ; No, continue processing
0040 3578 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 357A C120  34 !       mov   @parm1,tmp0           ; Get line
     357C A006     
0046               
0047 357E 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3580 350E     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3582 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3584 A016     
0053 3586 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3588 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 358A C805  38         mov   tmp1,@outparm1        ; Save length
     358C A016     
0060 358E 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 3590 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     3592 A016     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 3594 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 3596 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 3598 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 359A 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 359C 0649  14         dect  stack
0094 359E C64B  30         mov   r11,*stack            ; Save return address
0095 35A0 0649  14         dect  stack
0096 35A2 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 35A4 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     35A6 A304     
0101 35A8 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     35AA A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 35AC C804  38         mov   tmp0,@parm1
     35AE A006     
0106 35B0 06A0  32         bl    @edb.line.getlength
     35B2 3558     
0107 35B4 C820  54         mov   @outparm1,@fb.row.length
     35B6 A016     
     35B8 A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 35BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 35BC C2F9  30         mov   *stack+,r11           ; Pop R11
0115 35BE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 35C0 0649  14         dect  stack
0021 35C2 C64B  30         mov   r11,*stack            ; Save return address
0022 35C4 0649  14         dect  stack
0023 35C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 35C8 0649  14         dect  stack
0025 35CA C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 35CC C120  34         mov   @edb.next_free.ptr,tmp0
     35CE A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 35D0 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     35D2 0FFF     
0035 35D4 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     35D6 0052     
0036 35D8 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     35DA 0FF0     
0037 35DC 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 35DE 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     35E0 A51A     
0043 35E2 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     35E4 A500     
     35E6 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 35E8 C120  34         mov   @edb.sams.hipage,tmp0
     35EA A51A     
0050 35EC C160  34         mov   @edb.top.ptr,tmp1
     35EE A500     
0051 35F0 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     35F2 2542     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 35F4 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 35F6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35F8 FFCE     
0061 35FA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35FC 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 35FE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3600 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3602 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3604 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Utility functions
0034                       ;-----------------------------------------------------------------------
0035                       copy  "pane.topline.clearmsg.asm"
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3606 0649  14         dect  stack
0022 3608 C64B  30         mov   r11,*stack            ; Push return address
0023 360A 0649  14         dect  stack
0024 360C C660  42         mov   @wyx,*stack           ; Push cursor position
     360E 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3610 06A0  32         bl    @hchar
     3612 279E     
0029 3614 0034                   byte 0,52,32,18
     3616 2012     
0030 3618 FFFF                   data EOL              ; Clear message
0031               
0032 361A 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     361C A224     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 361E C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3620 832A     
0038 3622 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3624 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0036                                                      ; Remove overlay messsage in top line
0037                       ;------------------------------------------------------
0038                       ; Program data
0039                       ;------------------------------------------------------
0040                       copy  "data.constants.asm"     ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 3626 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     3628 003F     
     362A 0243     
     362C 05F4     
     362E 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 3630 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3632 000C     
     3634 0006     
     3636 0007     
     3638 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 363A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     363C 000C     
     363E 0006     
     3640 0007     
     3642 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3644 0000             data  >0000,>0001           ; Cursor
     3646 0001     
0099 3648 0000             data  >0000,>0101           ; Current line indicator     <
     364A 0101     
0100 364C 0820             data  >0820,>0201           ; Current column indicator   v
     364E 0201     
0101               nosprite:
0102 3650 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3652 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3654 F171     
     3656 1B1F     
     3658 71B1     
0158 365A A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     365C F0FF     
     365E 1F1A     
     3660 F1FF     
0159 3662 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3664 F0FF     
     3666 1F12     
     3668 F1F6     
0160 366A F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     366C 1E11     
     366E 1A17     
     3670 1E11     
0161 3672 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     3674 E1FF     
     3676 1F1E     
     3678 E1FF     
0162 367A 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     367C 1016     
     367E 1B71     
     3680 1711     
0163 3682 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     3684 1011     
     3686 F1F1     
     3688 1F11     
0164 368A 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     368C A1FF     
     368E 1F1F     
     3690 F11F     
0165 3692 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     3694 12FF     
     3696 1B12     
     3698 12FF     
0166 369A F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     369C E1FF     
     369E 1B1F     
     36A0 F131     
0167                       even
0168               
0169               tv.tabs.table:
0170 36A2 0007             byte  0,7,12,25             ; \   Default tab positions as used
     36A4 0C19     
0171 36A6 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     36A8 3B4F     
0172 36AA FF00             byte  >ff,0,0,0             ; |
     36AC 0000     
0173 36AE 0000             byte  0,0,0,0               ; |   Up to 20 positions supported.
     36B0 0000     
0174 36B2 0000             byte  0,0,0,0               ; /   >ff means end-of-list.
     36B4 0000     
0175                       even
0176               
0177               
0178               
0179               ***************************************************************
0180               * Constants for numbers 0-10
0181               ********|*****|*********************|**************************
0182      2000     const.0       equ   w$0000          ; 0
0183      2002     const.1       equ   w$0001          ; 1
0184      2004     const.2       equ   w$0002          ; 2
0185 36B6 0003     const.3       data  3               ; 3
0186      2006     const.4       equ   w$0004          ; 4
0187 36B8 0005     const.5       data  5               ; 5
0188 36BA 0006     const.6       data  6               ; 6
0189 36BC 0007     const.7       data  7               ; 7
0190      2008     const.8       equ   w$0008          ; 8
0191 36BE 0009     const.9       data  9               ; 9
0192 36C0 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0041                       copy  "data.strings.asm"       ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 36C2 012C     txt.delim          stri ','
0009                                  even
0010 36C4 0520     txt.bottom         stri '  BOT'
     36C6 2042     
     36C8 4F54     
0011                                  even
0012 36CA 044F     txt.ovrwrite       stri 'OVR '
     36CC 5652     
     36CE 20       
0013                                  even
0014 36D0 0449     txt.insert         stri 'INS '
     36D2 4E53     
     36D4 20       
0015                                  even
0016 36D6 0449     txt.autoinsert     stri 'INS+'
     36D8 4E53     
     36DA 2B       
0017                                  even
0018 36DC 012A     txt.star           stri '*'
0019                                  even
0020 36DE 0A4C     txt.loading        stri 'Loading...'
     36E0 6F61     
     36E2 6469     
     36E4 6E67     
     36E6 2E2E     
     36E8 2E       
0021                                  even
0022 36EA 0A53     txt.saving         stri 'Saving....'
     36EC 6176     
     36EE 696E     
     36F0 672E     
     36F2 2E2E     
     36F4 2E       
0023                                  even
0024 36F6 1250     txt.printing       stri 'Printing file.....'
     36F8 7269     
     36FA 6E74     
     36FC 696E     
     36FE 6720     
     3700 6669     
     3702 6C65     
     3704 2E2E     
     3706 2E2E     
     3708 2E       
0025                                  even
0026 370A 1244     txt.block.del      stri 'Deleting block....'
     370C 656C     
     370E 6574     
     3710 696E     
     3712 6720     
     3714 626C     
     3716 6F63     
     3718 6B2E     
     371A 2E2E     
     371C 2E       
0027                                  even
0028 371E 1143     txt.block.copy     stri 'Copying block....'
     3720 6F70     
     3722 7969     
     3724 6E67     
     3726 2062     
     3728 6C6F     
     372A 636B     
     372C 2E2E     
     372E 2E2E     
0029                                  even
0030 3730 104D     txt.block.move     stri 'Moving block....'
     3732 6F76     
     3734 696E     
     3736 6720     
     3738 626C     
     373A 6F63     
     373C 6B2E     
     373E 2E2E     
     3740 2E       
0031                                  even
0032 3742 1853     txt.block.save     stri 'Saving block to file....'
     3744 6176     
     3746 696E     
     3748 6720     
     374A 626C     
     374C 6F63     
     374E 6B20     
     3750 746F     
     3752 2066     
     3754 696C     
     3756 652E     
     3758 2E2E     
     375A 2E       
0033                                  even
0034 375C 1843     txt.block.clip     stri 'Copying to clipboard....'
     375E 6F70     
     3760 7969     
     3762 6E67     
     3764 2074     
     3766 6F20     
     3768 636C     
     376A 6970     
     376C 626F     
     376E 6172     
     3770 642E     
     3772 2E2E     
     3774 2E       
0035                                  even
0036 3776 1250     txt.block.print    stri 'Printing block....'
     3778 7269     
     377A 6E74     
     377C 696E     
     377E 6720     
     3780 626C     
     3782 6F63     
     3784 6B2E     
     3786 2E2E     
     3788 2E       
0037                                  even
0038 378A 1343     txt.clearmem       stri 'Clearing memory....'
     378C 6C65     
     378E 6172     
     3790 696E     
     3792 6720     
     3794 6D65     
     3796 6D6F     
     3798 7279     
     379A 2E2E     
     379C 2E2E     
0039                                  even
0040 379E 0E4C     txt.done.load      stri 'Load completed'
     37A0 6F61     
     37A2 6420     
     37A4 636F     
     37A6 6D70     
     37A8 6C65     
     37AA 7465     
     37AC 64       
0041                                  even
0042 37AE 1049     txt.done.insert    stri 'Insert completed'
     37B0 6E73     
     37B2 6572     
     37B4 7420     
     37B6 636F     
     37B8 6D70     
     37BA 6C65     
     37BC 7465     
     37BE 64       
0043                                  even
0044 37C0 1041     txt.done.append    stri 'Append completed'
     37C2 7070     
     37C4 656E     
     37C6 6420     
     37C8 636F     
     37CA 6D70     
     37CC 6C65     
     37CE 7465     
     37D0 64       
0045                                  even
0046 37D2 0E53     txt.done.save      stri 'Save completed'
     37D4 6176     
     37D6 6520     
     37D8 636F     
     37DA 6D70     
     37DC 6C65     
     37DE 7465     
     37E0 64       
0047                                  even
0048 37E2 0E43     txt.done.copy      stri 'Copy completed'
     37E4 6F70     
     37E6 7920     
     37E8 636F     
     37EA 6D70     
     37EC 6C65     
     37EE 7465     
     37F0 64       
0049                                  even
0050 37F2 0F50     txt.done.print     stri 'Print completed'
     37F4 7269     
     37F6 6E74     
     37F8 2063     
     37FA 6F6D     
     37FC 706C     
     37FE 6574     
     3800 6564     
0051                                  even
0052 3802 1044     txt.done.delete    stri 'Delete completed'
     3804 656C     
     3806 6574     
     3808 6520     
     380A 636F     
     380C 6D70     
     380E 6C65     
     3810 7465     
     3812 64       
0053                                  even
0054 3814 0F43     txt.done.clipboard stri 'Clipboard saved'
     3816 6C69     
     3818 7062     
     381A 6F61     
     381C 7264     
     381E 2073     
     3820 6176     
     3822 6564     
0055                                  even
0056 3824 0D43     txt.done.clipdev   stri 'Clipboard set'
     3826 6C69     
     3828 7062     
     382A 6F61     
     382C 7264     
     382E 2073     
     3830 6574     
0057                                  even
0058 3832 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3834 7574     
     3836 6F69     
     3838 6E73     
     383A 6572     
     383C 743A     
     383E 206F     
     3840 6E       
0059                                  even
0060 3842 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3844 7574     
     3846 6F69     
     3848 6E73     
     384A 6572     
     384C 743A     
     384E 206F     
     3850 6666     
0061                                  even
0062 3852 0846     txt.fastmode       stri 'Fastmode'
     3854 6173     
     3856 746D     
     3858 6F64     
     385A 65       
0063                                  even
0064 385C 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     385E 7870     
     3860 616E     
     3862 6469     
     3864 6E67     
     3866 2054     
     3868 4920     
     386A 4261     
     386C 7369     
     386E 6320     
     3870 6C69     
     3872 6E65     
     3874 2E2E     
     3876 2E2E     
0065                                  even
0066 3878 026B     txt.kb             stri 'kb'
     387A 62       
0067                                  even
0068 387C 054C     txt.lines          stri 'Lines'
     387E 696E     
     3880 6573     
0069                                  even
0070 3882 0A5B     txt.newfile        stri '[New file]'
     3884 4E65     
     3886 7720     
     3888 6669     
     388A 6C65     
     388C 5D       
0071                                  even
0072 388E 0D5B     txt.tib1           stri '[TI Basic #1]'
     3890 5449     
     3892 2042     
     3894 6173     
     3896 6963     
     3898 2023     
     389A 315D     
0073                                  even
0074 389C 0D5B     txt.tib2           stri '[TI Basic #2]'
     389E 5449     
     38A0 2042     
     38A2 6173     
     38A4 6963     
     38A6 2023     
     38A8 325D     
0075                                  even
0076 38AA 0D5B     txt.tib3           stri '[TI Basic #3]'
     38AC 5449     
     38AE 2042     
     38B0 6173     
     38B2 6963     
     38B4 2023     
     38B6 335D     
0077                                  even
0078 38B8 0D5B     txt.tib4           stri '[TI Basic #4]'
     38BA 5449     
     38BC 2042     
     38BE 6173     
     38C0 6963     
     38C2 2023     
     38C4 345D     
0079                                  even
0080 38C6 0D5B     txt.tib5           stri '[TI Basic #5]'
     38C8 5449     
     38CA 2042     
     38CC 6173     
     38CE 6963     
     38D0 2023     
     38D2 355D     
0081                                  even
0082 38D4 0444     txt.filetype.dv80  stri 'DV80'
     38D6 5638     
     38D8 30       
0083                                  even
0084 38DA 034D     txt.m1             stri 'M1='
     38DC 313D     
0085                                  even
0086 38DE 034D     txt.m2             stri 'M2='
     38E0 323D     
0087                                  even
0088 38E2 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     38E4 392D     
     38E6 4D65     
     38E8 6E75     
     38EA 2020     
     38EC 5E48     
     38EE 2D48     
     38F0 656C     
     38F2 70       
0089                                  even
0090 38F4 1B46     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic#'
     38F6 392D     
     38F8 4D65     
     38FA 6E75     
     38FC 2020     
     38FE 5E48     
     3900 2D48     
     3902 656C     
     3904 7020     
     3906 2046     
     3908 302D     
     390A 4261     
     390C 7369     
     390E 6323     
0091                                  even
0092 3910 3646     txt.keys.block     stri 'F9-Back  ^Copy  ^Move  ^Del  ^Save  ^Print  ^[1-5]Clip'
     3912 392D     
     3914 4261     
     3916 636B     
     3918 2020     
     391A 5E43     
     391C 6F70     
     391E 7920     
     3920 205E     
     3922 4D6F     
     3924 7665     
     3926 2020     
     3928 5E44     
     392A 656C     
     392C 2020     
     392E 5E53     
     3930 6176     
     3932 6520     
     3934 205E     
     3936 5072     
     3938 696E     
     393A 7420     
     393C 205E     
     393E 5B31     
     3940 2D35     
     3942 5D43     
     3944 6C69     
     3946 70       
0093                                  even
0094 3948 3846     txt.keys.basic1    stri 'F9-Back  ENTER-Back  F5-AutoMode  SPACE-Uncrunch program'
     394A 392D     
     394C 4261     
     394E 636B     
     3950 2020     
     3952 454E     
     3954 5445     
     3956 522D     
     3958 4261     
     395A 636B     
     395C 2020     
     395E 4635     
     3960 2D41     
     3962 7574     
     3964 6F4D     
     3966 6F64     
     3968 6520     
     396A 2053     
     396C 5041     
     396E 4345     
     3970 2D55     
     3972 6E63     
     3974 7275     
     3976 6E63     
     3978 6820     
     397A 7072     
     397C 6F67     
     397E 7261     
     3980 6D       
0095                                  even
0096 3982 2E2E     txt.ruler          text    '.........'
     3984 2E2E     
     3986 2E2E     
     3988 2E2E     
     398A 2E       
0097 398B   12                        byte    18
0098 398C 2E2E                        text    '.........'
     398E 2E2E     
     3990 2E2E     
     3992 2E2E     
     3994 2E       
0099 3995   13                        byte    19
0100 3996 2E2E                        text    '.........'
     3998 2E2E     
     399A 2E2E     
     399C 2E2E     
     399E 2E       
0101 399F   14                        byte    20
0102 39A0 2E2E                        text    '.........'
     39A2 2E2E     
     39A4 2E2E     
     39A6 2E2E     
     39A8 2E       
0103 39A9   15                        byte    21
0104 39AA 2E2E                        text    '.........'
     39AC 2E2E     
     39AE 2E2E     
     39B0 2E2E     
     39B2 2E       
0105 39B3   16                        byte    22
0106 39B4 2E2E                        text    '.........'
     39B6 2E2E     
     39B8 2E2E     
     39BA 2E2E     
     39BC 2E       
0107 39BD   17                        byte    23
0108 39BE 2E2E                        text    '.........'
     39C0 2E2E     
     39C2 2E2E     
     39C4 2E2E     
     39C6 2E       
0109 39C7   18                        byte    24
0110 39C8 2E2E                        text    '.........'
     39CA 2E2E     
     39CC 2E2E     
     39CE 2E2E     
     39D0 2E       
0111 39D1   19                        byte    25
0112                                  even
0113 39D2 020E     txt.alpha.down     data >020e,>0f00
     39D4 0F00     
0114 39D6 0110     txt.vertline       data >0110
0115 39D8 011C     txt.keymarker      byte 1,28
0116               
0117 39DA 0120     txt.ws1            stri ' '
0118                                  even
0119 39DC 0220     txt.ws2            stri '  '
     39DE 20       
0120                                  even
0121 39E0 0320     txt.ws3            stri '   '
     39E2 2020     
0122                                  even
0123 39E4 0420     txt.ws4            stri '    '
     39E6 2020     
     39E8 20       
0124                                  even
0125 39EA 0520     txt.ws5            stri '     '
     39EC 2020     
     39EE 2020     
0126                                  even
0127      39E4     txt.filetype.none  equ txt.ws4
0128               
0129               
0130               ;--------------------------------------------------------------
0131               ; Strings for error line pane
0132               ;--------------------------------------------------------------
0133 39F0 1546     txt.ioerr.load     stri 'Failed loading file: '
     39F2 6169     
     39F4 6C65     
     39F6 6420     
     39F8 6C6F     
     39FA 6164     
     39FC 696E     
     39FE 6720     
     3A00 6669     
     3A02 6C65     
     3A04 3A20     
0134                                  even
0135 3A06 1446     txt.ioerr.save     stri 'Failed saving file: '
     3A08 6169     
     3A0A 6C65     
     3A0C 6420     
     3A0E 7361     
     3A10 7669     
     3A12 6E67     
     3A14 2066     
     3A16 696C     
     3A18 653A     
     3A1A 20       
0136                                  even
0137 3A1C 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3A1E 6169     
     3A20 6C65     
     3A22 6420     
     3A24 7072     
     3A26 696E     
     3A28 7469     
     3A2A 6E67     
     3A2C 2074     
     3A2E 6F20     
     3A30 6465     
     3A32 7669     
     3A34 6365     
     3A36 3A20     
0138                                  even
0139 3A38 164E     txt.io.nofile      stri 'No filename specified.'
     3A3A 6F20     
     3A3C 6669     
     3A3E 6C65     
     3A40 6E61     
     3A42 6D65     
     3A44 2073     
     3A46 7065     
     3A48 6369     
     3A4A 6669     
     3A4C 6564     
     3A4E 2E       
0140                                  even
0141 3A50 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3A52 6E64     
     3A54 6578     
     3A56 2066     
     3A58 756C     
     3A5A 6C2E     
     3A5C 2046     
     3A5E 696C     
     3A60 6520     
     3A62 746F     
     3A64 6F20     
     3A66 6C61     
     3A68 7267     
     3A6A 6520     
     3A6C 666F     
     3A6E 7220     
     3A70 6564     
     3A72 6974     
     3A74 6F72     
     3A76 2062     
     3A78 7566     
     3A7A 6665     
     3A7C 722E     
0142                                  even
0143 3A7E 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3A80 6F70     
     3A82 792F     
     3A84 4D6F     
     3A86 7665     
     3A88 2074     
     3A8A 6172     
     3A8C 6765     
     3A8E 7420     
     3A90 6D75     
     3A92 7374     
     3A94 2062     
     3A96 6520     
     3A98 6F75     
     3A9A 7473     
     3A9C 6964     
     3A9E 6520     
     3AA0 4D31     
     3AA2 2D4D     
     3AA4 3220     
     3AA6 7261     
     3AA8 6E67     
     3AAA 652E     
0144                                  even
0145               
0146               ;--------------------------------------------------------------
0147               ; Strings for command buffer
0148               ;--------------------------------------------------------------
0149 3AAC 013E     txt.cmdb.prompt    stri '>'
0150                                  even
0151 3AAE 0D43     txt.colorscheme    stri 'Color scheme:'
     3AB0 6F6C     
     3AB2 6F72     
     3AB4 2073     
     3AB6 6368     
     3AB8 656D     
     3ABA 653A     
0152                                  even
                   < ram.resident.asm
0042                       copy  "data.defaults.asm"      ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3ABC 0650     def.printer.fname   stri 'PI.PIO'
     3ABE 492E     
     3AC0 5049     
     3AC2 4F       
0008 3AC3   09     def.clip.fname      stri 'DSK1.CLIP'
     3AC4 4453     
     3AC6 4B31     
     3AC8 2E43     
     3ACA 4C49     
     3ACC 50       
0009 3ACD   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3ACE 4453     
     3AD0 4B32     
     3AD2 2E43     
     3AD4 4C49     
     3AD6 50       
0010 3AD7   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3AD8 5449     
     3ADA 5049     
     3ADC 2E43     
     3ADE 4C49     
     3AE0 50       
0011 3AE1   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3AE2 2C44     
     3AE4 534B     
     3AE6 2C48     
     3AE8 4458     
     3AEA 2C49     
     3AEC 4445     
     3AEE 2C50     
     3AF0 492E     
     3AF2 2C50     
     3AF4 494F     
     3AF6 2C54     
     3AF8 4950     
     3AFA 492E     
     3AFC 2C52     
     3AFE 442C     
     3B00 5343     
     3B02 532C     
     3B04 5344     
     3B06 442C     
     3B08 5744     
     3B0A 532C     
     3B0C 5253     
     3B0E 3233     
     3B10 32       
                   < ram.resident.asm
                   < stevie_b3.asm
0051                       ;------------------------------------------------------
0052                       ; Activate bank 1 and branch to  >6036
0053                       ;------------------------------------------------------
0054 3B12 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3B14 6002     
0055               
0059               
0060 3B16 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3B18 6046     
0061               ***************************************************************
0062               * Step 3: Include main editor modules
0063               ********|*****|*********************|**************************
0064               main:
0065                       aorg  kickstart.code2       ; >6046
0066 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0067                       ;-----------------------------------------------------------------------
0068                       ; Include files - Shared code
0069                       ;-----------------------------------------------------------------------
0070               
0071                       ;-----------------------------------------------------------------------
0072                       ; Include files - Dialogs
0073                       ;-----------------------------------------------------------------------
0074                       copy  "dialog.menu.asm"      ; Dialog "Stevie Menu"
     **** ****     > dialog.menu.asm
0001               * FILE......: dialog.menu.asm
0002               * Purpose...: Dialog "Main Menu"
0003               
0004               ***************************************************************
0005               * dialog.menu
0006               * Open Dialog "Main Menu"
0007               ***************************************************************
0008               * bl @dialog.menu
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.menu:
0022 604A 0649  14         dect  stack
0023 604C C64B  30         mov   r11,*stack            ; Save return address
0024 604E 0649  14         dect  stack
0025 6050 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6052 0204  20         li    tmp0,id.dialog.menu
     6054 0064     
0030 6056 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6058 A71A     
0031               
0032 605A 0204  20         li    tmp0,txt.head.menu
     605C 76BC     
0033 605E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6060 A71E     
0034               
0035 6062 0204  20         li    tmp0,txt.info.menu
     6064 76CB     
0036 6066 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6068 A720     
0037               
0038 606A 0204  20         li    tmp0,pos.info.menu
     606C 7702     
0039 606E C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6070 A726     
0040               
0041 6072 0204  20         li    tmp0,txt.hint.menu
     6074 7709     
0042 6076 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6078 A722     
0043 607A 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     607C A724     
0044               
0045 607E 0204  20         li    tmp0,txt.keys.menu
     6080 770B     
0046 6082 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6084 A728     
0047               
0048 6086 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6088 71CE     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               dialog.menu.exit:
0053 608A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 608C C2F9  30         mov   *stack+,r11           ; Pop R11
0055 608E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0075                       copy  "dialog.help.asm"      ; Dialog "Help"
     **** ****     > dialog.help.asm
0001               * FILE......: dialog.help.asm
0002               * Purpose...: Dialog "Help"
0003               
0004               *---------------------------------------------------------------
0005               * Show Stevie welcome/about dialog
0006               *---------------------------------------------------------------
0007               dialog.help:
0008 6090 0649  14         dect  stack
0009 6092 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;-------------------------------------------------------
0011                       ; Setup dialog
0012                       ;-------------------------------------------------------
0013 6094 06A0  32         bl    @scroff               ; turn screen off
     6096 2652     
0014               
0015 6098 0204  20         li    tmp0,id.dialog.help
     609A 0068     
0016 609C C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     609E A71A     
0017               
0018 60A0 06A0  32         bl    @dialog.help.content  ; display content in modal dialog
     60A2 60D4     
0019               
0020 60A4 0204  20         li    tmp0,txt.head.about
     60A6 75A1     
0021 60A8 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     60AA A71E     
0022               
0023 60AC 0204  20         li    tmp0,txt.about.build
     60AE 7672     
0024 60B0 C804  38         mov   tmp0,@cmdb.paninfo    ; Info line
     60B2 A720     
0025 60B4 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     60B6 A726     
0026               
0027 60B8 0204  20         li    tmp0,txt.hint.about
     60BA 75FB     
0028 60BC C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     60BE A722     
0029 60C0 0204  20         li    tmp0,txt.hint.about2
     60C2 75AD     
0030 60C4 C804  38         mov   tmp0,@cmdb.panhint2   ; Extra hint to display
     60C6 A724     
0031               
0032 60C8 0204  20         li    tmp0,txt.keys.about
     60CA 764B     
0033 60CC C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     60CE A728     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               dialog.help.exit:
0038 60D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0039 60D2 045B  20         b     *r11                  ; Return
0040               
0041               
0042               
0043               ***************************************************************
0044               * dialog.help.content
0045               * Show content in modal dialog
0046               ***************************************************************
0047               * bl  @dialog.help.content
0048               *--------------------------------------------------------------
0049               * OUTPUT
0050               * none
0051               *--------------------------------------------------------------
0052               * Register usage
0053               * tmp0
0054               ********|*****|*********************|**************************
0055               dialog.help.content:
0056 60D4 0649  14         dect  stack
0057 60D6 C64B  30         mov   r11,*stack            ; Save return address
0058 60D8 0649  14         dect  stack
0059 60DA C644  30         mov   tmp0,*stack           ; Push tmp0
0060 60DC 0649  14         dect  stack
0061 60DE C645  30         mov   tmp1,*stack           ; Push tmp1
0062 60E0 0649  14         dect  stack
0063 60E2 C646  30         mov   tmp2,*stack           ; Push tmp2
0064 60E4 0649  14         dect  stack
0065 60E6 C647  30         mov   tmp3,*stack           ; Push tmp3
0066 60E8 0649  14         dect  stack
0067 60EA C660  42         mov   @wyx,*stack           ; Push cursor position
     60EC 832A     
0068                       ;------------------------------------------------------
0069                       ; Clear screen and set colors
0070                       ;------------------------------------------------------
0071 60EE 06A0  32         bl    @filv
     60F0 225A     
0072 60F2 0050                   data vdp.fb.toprow.sit,32,vdp.sit.size - 480
     60F4 0020     
     60F6 0780     
0073                                                   ; Clear screen
0074               
0075                       ;
0076                       ; Colours are also set in pane.action.colorscheme.load
0077                       ; but we also set them here to avoid flickering due to
0078                       ; timing delay before function is called.
0079                       ;
0080               
0081 60F8 0204  20         li    tmp0,vdp.fb.toprow.tat
     60FA 1850     
0082 60FC C160  34         mov   @tv.color,tmp1        ; Get color for framebuffer
     60FE A218     
0083 6100 0985  32         srl   tmp1,8                ; Right justify
0084 6102 0206  20         li    tmp2,vdp.sit.size - 480
     6104 0780     
0085                                                   ; Prepare for loading color attributes
0086               
0087 6106 06A0  32         bl    @xfilv                ; \ Fill VDP memory
     6108 2260     
0088                                                   ; | i  tmp0 = Memory start address
0089                                                   ; | i  tmp1 = Byte to fill
0090                                                   ; / i  tmp2 = Number of bytes to fill
0091               
0092 610A 06A0  32         bl    @filv
     610C 225A     
0093 610E 2180                   data sprsat,>d0,32    ; Turn off sprites
     6110 00D0     
     6112 0020     
0094                       ;------------------------------------------------------
0095                       ; Display left column
0096                       ;------------------------------------------------------
0097 6114 06A0  32         bl    @at                   ; Set cursor position
     6116 2692     
0098 6118 0100                   byte 1,0              ; Y=1, X=0
0099               
0100 611A C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     611C A71C     
0101               
0102 611E C167  34         mov   @dialog.help.data.pages(tmp3),tmp1
     6120 6150     
0103                                                   ; Pointer to list of strings
0104 6122 C1A7  34         mov   @dialog.help.data.pages+2(tmp3),tmp2
     6124 6152     
0105                                                   ; Number of strings to display
0106               
0107 6126 06A0  32         bl    @putlst               ; Loop over string list and display
     6128 2416     
0108                                                   ; \ i  @wyx = Cursor position
0109                                                   ; | i  tmp1 = Pointer to first length-
0110                                                   ; |           prefixed string in list
0111                                                   ; / i  tmp2 = Number of strings to display
0112               
0113                       ;------------------------------------------------------
0114                       ; Display right column
0115                       ;------------------------------------------------------
0116 612A 06A0  32         bl    @at                   ; Set cursor position
     612C 2692     
0117 612E 002A                   byte 0,42             ; Y=0, X=42
0118               
0119 6130 C1E0  34         mov   @cmdb.dialog.var,tmp3 ; Get Page index
     6132 A71C     
0120               
0121 6134 C167  34         mov   @dialog.help.data.pages+4(tmp3),tmp1
     6136 6154     
0122                                                   ; Pointer to list of strings
0123 6138 C1A7  34         mov   @dialog.help.data.pages+6(tmp3),tmp2
     613A 6156     
0124                                                   ; Number of strings to display
0125               
0126 613C 06A0  32         bl    @putlst               ; Loop over string list and display
     613E 2416     
0127                                                   ; \ i  @wyx = Cursor position
0128                                                   ; | i  tmp1 = Pointer to first length-
0129                                                   ; |           prefixed string in list
0130                                                   ; / i  tmp2 = Number of strings to display
0131               
0132                       ;------------------------------------------------------
0133                       ; Exit
0134                       ;------------------------------------------------------
0135               dialog.help.content.exit:
0136 6140 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6142 832A     
0137 6144 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0138 6146 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0139 6148 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0140 614A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0141 614C C2F9  30         mov   *stack+,r11           ; Pop r11
0142 614E 045B  20         b     *r11                  ; Return
0143               
0144               
0145               
0146               dialog.help.data.pages:
0147 6150 6160             data  dialog.help.data.page1.left,17
     6152 0011     
0148 6154 62D8             data  dialog.help.data.page1.right,18
     6156 0012     
0149 6158 64D0             data  dialog.help.data.page2.left,8
     615A 0008     
0150 615C 65AC             data  dialog.help.data.page2.right,10
     615E 000A     
0151               
0152               
0153               dialog.help.data.page1.left:
0154 6160 0120             stri ' '
0155                       even
0156 6162 23               byte    35
0157 6163   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     6164 0101     
     6166 0101     
     6168 0101     
     616A 0101     
     616C 0101     
     616E 0101     
0158 6170 2043             text    ' Cursor '
     6172 7572     
     6174 736F     
     6176 7220     
0159 6178 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     617A 0101     
     617C 0101     
     617E 0101     
     6180 0101     
     6182 0101     
     6184 0101     
0160                       even
0161 6186 1246             stri 'Fctn s        Left'
     6188 6374     
     618A 6E20     
     618C 7320     
     618E 2020     
     6190 2020     
     6192 2020     
     6194 204C     
     6196 6566     
     6198 74       
0162                       even
0163 619A 1346             stri 'Fctn d        Right'
     619C 6374     
     619E 6E20     
     61A0 6420     
     61A2 2020     
     61A4 2020     
     61A6 2020     
     61A8 2052     
     61AA 6967     
     61AC 6874     
0164                       even
0165 61AE 1046             stri 'Fctn e        Up'
     61B0 6374     
     61B2 6E20     
     61B4 6520     
     61B6 2020     
     61B8 2020     
     61BA 2020     
     61BC 2055     
     61BE 70       
0166                       even
0167 61C0 1246             stri 'Fctn x        Down'
     61C2 6374     
     61C4 6E20     
     61C6 7820     
     61C8 2020     
     61CA 2020     
     61CC 2020     
     61CE 2044     
     61D0 6F77     
     61D2 6E       
0168                       even
0169 61D4 1246             stri 'Fctn h        Home'
     61D6 6374     
     61D8 6E20     
     61DA 6820     
     61DC 2020     
     61DE 2020     
     61E0 2020     
     61E2 2048     
     61E4 6F6D     
     61E6 65       
0170                       even
0171 61E8 1146             stri 'Fctn l        End'
     61EA 6374     
     61EC 6E20     
     61EE 6C20     
     61F0 2020     
     61F2 2020     
     61F4 2020     
     61F6 2045     
     61F8 6E64     
0172                       even
0173 61FA 1746             stri 'Fctn j        Prev word'
     61FC 6374     
     61FE 6E20     
     6200 6A20     
     6202 2020     
     6204 2020     
     6206 2020     
     6208 2050     
     620A 7265     
     620C 7620     
     620E 776F     
     6210 7264     
0174                       even
0175 6212 1746             stri 'Fctn k        Next word'
     6214 6374     
     6216 6E20     
     6218 6B20     
     621A 2020     
     621C 2020     
     621E 2020     
     6220 204E     
     6222 6578     
     6224 7420     
     6226 776F     
     6228 7264     
0176                       even
0177 622A 1646             stri 'Fctn 7   ^t   Next tab'
     622C 6374     
     622E 6E20     
     6230 3720     
     6232 2020     
     6234 5E74     
     6236 2020     
     6238 204E     
     623A 6578     
     623C 7420     
     623E 7461     
     6240 62       
0178                       even
0179 6242 1546             stri 'Fctn 6   ^e   Page up'
     6244 6374     
     6246 6E20     
     6248 3620     
     624A 2020     
     624C 5E65     
     624E 2020     
     6250 2050     
     6252 6167     
     6254 6520     
     6256 7570     
0180                       even
0181 6258 1746             stri 'Fctn 4   ^x   Page down'
     625A 6374     
     625C 6E20     
     625E 3420     
     6260 2020     
     6262 5E78     
     6264 2020     
     6266 2050     
     6268 6167     
     626A 6520     
     626C 646F     
     626E 776E     
0182                       even
0183 6270 1846             stri 'Fctn v        Screen top'
     6272 6374     
     6274 6E20     
     6276 7620     
     6278 2020     
     627A 2020     
     627C 2020     
     627E 2053     
     6280 6372     
     6282 6565     
     6284 6E20     
     6286 746F     
     6288 70       
0184                       even
0185 628A 1B46             stri 'Fctn b        Screen bottom'
     628C 6374     
     628E 6E20     
     6290 6220     
     6292 2020     
     6294 2020     
     6296 2020     
     6298 2053     
     629A 6372     
     629C 6565     
     629E 6E20     
     62A0 626F     
     62A2 7474     
     62A4 6F6D     
0186                       even
0187 62A6 1643             stri 'Ctrl v   ^v   File top'
     62A8 7472     
     62AA 6C20     
     62AC 7620     
     62AE 2020     
     62B0 5E76     
     62B2 2020     
     62B4 2046     
     62B6 696C     
     62B8 6520     
     62BA 746F     
     62BC 70       
0188                       even
0189 62BE 1943             stri 'Ctrl b   ^b   File bottom'
     62C0 7472     
     62C2 6C20     
     62C4 6220     
     62C6 2020     
     62C8 5E62     
     62CA 2020     
     62CC 2046     
     62CE 696C     
     62D0 6520     
     62D2 626F     
     62D4 7474     
     62D6 6F6D     
0190               
0191               dialog.help.data.page1.right:
0192 62D8 2620             stri '                                 (1/2)'
     62DA 2020     
     62DC 2020     
     62DE 2020     
     62E0 2020     
     62E2 2020     
     62E4 2020     
     62E6 2020     
     62E8 2020     
     62EA 2020     
     62EC 2020     
     62EE 2020     
     62F0 2020     
     62F2 2020     
     62F4 2020     
     62F6 2020     
     62F8 2020     
     62FA 2831     
     62FC 2F32     
     62FE 29       
0193                       even
0194 6300 0120             stri ' '
0195                       even
0196 6302 24               byte    36
0197 6303   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6304 0101     
     6306 0101     
     6308 0101     
     630A 0101     
     630C 0101     
     630E 0101     
     6310 0101     
0198 6312 2046             text    ' File '
     6314 696C     
     6316 6520     
0199 6318 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
     631A 0101     
     631C 0101     
     631E 0101     
     6320 0101     
     6322 0101     
     6324 0101     
     6326 01       
0200                       even
0201 6328 1943             stri 'Ctrl a   ^a   Append file'
     632A 7472     
     632C 6C20     
     632E 6120     
     6330 2020     
     6332 5E61     
     6334 2020     
     6336 2041     
     6338 7070     
     633A 656E     
     633C 6420     
     633E 6669     
     6340 6C65     
0202                       even
0203 6342 2143             stri 'Ctrl i   ^i   Insert file at line'
     6344 7472     
     6346 6C20     
     6348 6920     
     634A 2020     
     634C 5E69     
     634E 2020     
     6350 2049     
     6352 6E73     
     6354 6572     
     6356 7420     
     6358 6669     
     635A 6C65     
     635C 2061     
     635E 7420     
     6360 6C69     
     6362 6E65     
0204                       even
0205 6364 2443             stri 'Ctrl c   ^c   Copy clipboard to line'
     6366 7472     
     6368 6C20     
     636A 6320     
     636C 2020     
     636E 5E63     
     6370 2020     
     6372 2043     
     6374 6F70     
     6376 7920     
     6378 636C     
     637A 6970     
     637C 626F     
     637E 6172     
     6380 6420     
     6382 746F     
     6384 206C     
     6386 696E     
     6388 65       
0206                       even
0207 638A 1743             stri 'Ctrl o   ^o   Open file'
     638C 7472     
     638E 6C20     
     6390 6F20     
     6392 2020     
     6394 5E6F     
     6396 2020     
     6398 204F     
     639A 7065     
     639C 6E20     
     639E 6669     
     63A0 6C65     
0208                       even
0209 63A2 1843             stri 'Ctrl p   ^p   Print file'
     63A4 7472     
     63A6 6C20     
     63A8 7020     
     63AA 2020     
     63AC 5E70     
     63AE 2020     
     63B0 2050     
     63B2 7269     
     63B4 6E74     
     63B6 2066     
     63B8 696C     
     63BA 65       
0210                       even
0211 63BC 1743             stri 'Ctrl s   ^s   Save file'
     63BE 7472     
     63C0 6C20     
     63C2 7320     
     63C4 2020     
     63C6 5E73     
     63C8 2020     
     63CA 2053     
     63CC 6176     
     63CE 6520     
     63D0 6669     
     63D2 6C65     
0212                       even
0213 63D4 1C43             stri 'Ctrl ,   ^,   Load prev file'
     63D6 7472     
     63D8 6C20     
     63DA 2C20     
     63DC 2020     
     63DE 5E2C     
     63E0 2020     
     63E2 204C     
     63E4 6F61     
     63E6 6420     
     63E8 7072     
     63EA 6576     
     63EC 2066     
     63EE 696C     
     63F0 65       
0214                       even
0215 63F2 1C43             stri 'Ctrl .   ^.   Load next file'
     63F4 7472     
     63F6 6C20     
     63F8 2E20     
     63FA 2020     
     63FC 5E2E     
     63FE 2020     
     6400 204C     
     6402 6F61     
     6404 6420     
     6406 6E65     
     6408 7874     
     640A 2066     
     640C 696C     
     640E 65       
0216                       even
0217 6410 23               byte    35
0218 6411   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     6412 0101     
     6414 0101     
     6416 0101     
     6418 0101     
     641A 0101     
     641C 0101     
0219 641E 204F             text    ' Others '
     6420 7468     
     6422 6572     
     6424 7320     
0220 6426 0101             byte    1,1,1,1,1,1,1,1,1,1,1,1,1,1
     6428 0101     
     642A 0101     
     642C 0101     
     642E 0101     
     6430 0101     
     6432 0101     
0221                       even
0222 6434 1246             stri 'Fctn +   ^q   Quit'
     6436 6374     
     6438 6E20     
     643A 2B20     
     643C 2020     
     643E 5E71     
     6440 2020     
     6442 2051     
     6444 7569     
     6446 74       
0223                       even
0224 6448 1646             stri 'Fctn 0   ^/   TI Basic'
     644A 6374     
     644C 6E20     
     644E 3020     
     6450 2020     
     6452 5E2F     
     6454 2020     
     6456 2054     
     6458 4920     
     645A 4261     
     645C 7369     
     645E 63       
0225                       even
0226 6460 1243             stri 'Ctrl h   ^h   Help'
     6462 7472     
     6464 6C20     
     6466 6820     
     6468 2020     
     646A 5E68     
     646C 2020     
     646E 2048     
     6470 656C     
     6472 70       
0227                       even
0228 6474 1A43             stri 'Ctrl r   ^r   Toggle ruler'
     6476 7472     
     6478 6C20     
     647A 7220     
     647C 2020     
     647E 5E72     
     6480 2020     
     6482 2054     
     6484 6F67     
     6486 676C     
     6488 6520     
     648A 7275     
     648C 6C65     
     648E 72       
0229                       even
0230 6490 1C43             stri 'Ctrl u   ^u   Shortcuts menu'
     6492 7472     
     6494 6C20     
     6496 7520     
     6498 2020     
     649A 5E75     
     649C 2020     
     649E 2053     
     64A0 686F     
     64A2 7274     
     64A4 6375     
     64A6 7473     
     64A8 206D     
     64AA 656E     
     64AC 75       
0231                       even
0232 64AE 2143             stri 'Ctrl z   ^z   Cycle color schemes'
     64B0 7472     
     64B2 6C20     
     64B4 7A20     
     64B6 2020     
     64B8 5E7A     
     64BA 2020     
     64BC 2043     
     64BE 7963     
     64C0 6C65     
     64C2 2063     
     64C4 6F6C     
     64C6 6F72     
     64C8 2073     
     64CA 6368     
     64CC 656D     
     64CE 6573     
0233                       even
0234               
0235               dialog.help.data.page2.left:
0236 64D0 0120             stri ' '
0237                       even
0238 64D2 23               byte    35
0239 64D3   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     64D4 0101     
     64D6 0101     
     64D8 0101     
     64DA 0101     
     64DC 0101     
     64DE 0101     
0240 64E0 204D             text    ' Modifiers '
     64E2 6F64     
     64E4 6966     
     64E6 6965     
     64E8 7273     
     64EA 20       
0241 64EB   01             byte    1,1,1,1,1,1,1,1,1,1,1
     64EC 0101     
     64EE 0101     
     64F0 0101     
     64F2 0101     
     64F4 0101     
0242                       even
0243 64F6 1E46             stri 'Fctn 1        Delete character'
     64F8 6374     
     64FA 6E20     
     64FC 3120     
     64FE 2020     
     6500 2020     
     6502 2020     
     6504 2044     
     6506 656C     
     6508 6574     
     650A 6520     
     650C 6368     
     650E 6172     
     6510 6163     
     6512 7465     
     6514 72       
0244                       even
0245 6516 1E46             stri 'Fctn 2        Insert character'
     6518 6374     
     651A 6E20     
     651C 3220     
     651E 2020     
     6520 2020     
     6522 2020     
     6524 2049     
     6526 6E73     
     6528 6572     
     652A 7420     
     652C 6368     
     652E 6172     
     6530 6163     
     6532 7465     
     6534 72       
0246                       even
0247 6536 1946             stri 'Fctn 3        Delete line'
     6538 6374     
     653A 6E20     
     653C 3320     
     653E 2020     
     6540 2020     
     6542 2020     
     6544 2044     
     6546 656C     
     6548 6574     
     654A 6520     
     654C 6C69     
     654E 6E65     
0248                       even
0249 6550 2043             stri 'Ctrl l   ^l   Delete end of line'
     6552 7472     
     6554 6C20     
     6556 6C20     
     6558 2020     
     655A 5E6C     
     655C 2020     
     655E 2044     
     6560 656C     
     6562 6574     
     6564 6520     
     6566 656E     
     6568 6420     
     656A 6F66     
     656C 206C     
     656E 696E     
     6570 65       
0250                       even
0251 6572 1946             stri 'Fctn 8        Insert line'
     6574 6374     
     6576 6E20     
     6578 3820     
     657A 2020     
     657C 2020     
     657E 2020     
     6580 2049     
     6582 6E73     
     6584 6572     
     6586 7420     
     6588 6C69     
     658A 6E65     
0252                       even
0253 658C 1E46             stri 'Fctn .        Insert/Overwrite'
     658E 6374     
     6590 6E20     
     6592 2E20     
     6594 2020     
     6596 2020     
     6598 2020     
     659A 2049     
     659C 6E73     
     659E 6572     
     65A0 742F     
     65A2 4F76     
     65A4 6572     
     65A6 7772     
     65A8 6974     
     65AA 65       
0254                       even
0255               
0256               dialog.help.data.page2.right:
0257 65AC 2620             stri '                                 (2/2)'
     65AE 2020     
     65B0 2020     
     65B2 2020     
     65B4 2020     
     65B6 2020     
     65B8 2020     
     65BA 2020     
     65BC 2020     
     65BE 2020     
     65C0 2020     
     65C2 2020     
     65C4 2020     
     65C6 2020     
     65C8 2020     
     65CA 2020     
     65CC 2020     
     65CE 2832     
     65D0 2F32     
     65D2 29       
0258                       even
0259 65D4 0120             stri ' '
0260                       even
0261 65D6 24               byte    36
0262 65D7   01             byte    1,1,1,1,1,1,1,1,1,1,1,1,1
     65D8 0101     
     65DA 0101     
     65DC 0101     
     65DE 0101     
     65E0 0101     
     65E2 0101     
0263 65E4 2042             text    ' Block Mode '
     65E6 6C6F     
     65E8 636B     
     65EA 204D     
     65EC 6F64     
     65EE 6520     
0264 65F0 0101             byte    1,1,1,1,1,1,1,1,1,1,1
     65F2 0101     
     65F4 0101     
     65F6 0101     
     65F8 0101     
     65FA 01       
0265                       even
0266 65FC 1E43             stri 'Ctrl SPACE    Set M1/M2 marker'
     65FE 7472     
     6600 6C20     
     6602 5350     
     6604 4143     
     6606 4520     
     6608 2020     
     660A 2053     
     660C 6574     
     660E 204D     
     6610 312F     
     6612 4D32     
     6614 206D     
     6616 6172     
     6618 6B65     
     661A 72       
0267                       even
0268 661C 1A43             stri 'Ctrl d   ^d   Delete block'
     661E 7472     
     6620 6C20     
     6622 6420     
     6624 2020     
     6626 5E64     
     6628 2020     
     662A 2044     
     662C 656C     
     662E 6574     
     6630 6520     
     6632 626C     
     6634 6F63     
     6636 6B       
0269                       even
0270 6638 1843             stri 'Ctrl c   ^c   Copy block'
     663A 7472     
     663C 6C20     
     663E 6320     
     6640 2020     
     6642 5E63     
     6644 2020     
     6646 2043     
     6648 6F70     
     664A 7920     
     664C 626C     
     664E 6F63     
     6650 6B       
0271                       even
0272 6652 1C43             stri 'Ctrl g   ^g   Goto marker M1'
     6654 7472     
     6656 6C20     
     6658 6720     
     665A 2020     
     665C 5E67     
     665E 2020     
     6660 2047     
     6662 6F74     
     6664 6F20     
     6666 6D61     
     6668 726B     
     666A 6572     
     666C 204D     
     666E 31       
0273                       even
0274 6670 1843             stri 'Ctrl m   ^m   Move block'
     6672 7472     
     6674 6C20     
     6676 6D20     
     6678 2020     
     667A 5E6D     
     667C 2020     
     667E 204D     
     6680 6F76     
     6682 6520     
     6684 626C     
     6686 6F63     
     6688 6B       
0275                       even
0276 668A 2043             stri 'Ctrl s   ^s   Save block to file'
     668C 7472     
     668E 6C20     
     6690 7320     
     6692 2020     
     6694 5E73     
     6696 2020     
     6698 2053     
     669A 6176     
     669C 6520     
     669E 626C     
     66A0 6F63     
     66A2 6B20     
     66A4 746F     
     66A6 2066     
     66A8 696C     
     66AA 65       
0277                       even
0278 66AC 2343             stri 'Ctrl ^1..^3   Copy to clipboard 1-3'
     66AE 7472     
     66B0 6C20     
     66B2 5E31     
     66B4 2E2E     
     66B6 5E33     
     66B8 2020     
     66BA 2043     
     66BC 6F70     
     66BE 7920     
     66C0 746F     
     66C2 2063     
     66C4 6C69     
     66C6 7062     
     66C8 6F61     
     66CA 7264     
     66CC 2031     
     66CE 2D33     
0279                       even
                   < stevie_b3.asm
0076                       copy  "dialog.file.asm"      ; Dialog "File"
     **** ****     > dialog.file.asm
0001               * FILE......: dialog.file.asm
0002               * Purpose...: Dialog "File"
0003               
0004               ***************************************************************
0005               * dialog.file
0006               * Open Dialog "File"
0007               ***************************************************************
0008               * bl @dialog.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.file:
0022 66D0 0649  14         dect  stack
0023 66D2 C64B  30         mov   r11,*stack            ; Save return address
0024 66D4 0649  14         dect  stack
0025 66D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 66D8 0204  20         li    tmp0,id.dialog.file
     66DA 0069     
0030 66DC C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     66DE A71A     
0031               
0032 66E0 0204  20         li    tmp0,txt.head.file
     66E2 771F     
0033 66E4 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     66E6 A71E     
0034               
0035 66E8 0204  20         li    tmp0,txt.info.file
     66EA 7729     
0036 66EC C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     66EE A720     
0037               
0038 66F0 0204  20         li    tmp0,pos.info.file
     66F2 7753     
0039 66F4 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     66F6 A726     
0040               
0041 66F8 0204  20         li    tmp0,txt.hint.file
     66FA 775A     
0042 66FC C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     66FE A722     
0043 6700 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6702 A724     
0044               
0045 6704 0204  20         li    tmp0,txt.keys.file
     6706 775C     
0046 6708 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     670A A728     
0047               
0048 670C 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     670E 71CE     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               dialog.file.exit:
0053 6710 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 6712 C2F9  30         mov   *stack+,r11           ; Pop R11
0055 6714 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0077                       copy  "dialog.cartridge.asm" ; Dialog "Cartridge"
     **** ****     > dialog.cartridge.asm
0001               * basic......: dialog.cartridge.asm
0002               * Purpose....: Dialog "Cartridge"
0003               
0004               ***************************************************************
0005               * dialog.cartridge
0006               * Open Dialog "Cartridge"
0007               ***************************************************************
0008               * bl @dialog.cartridge
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cartridge:
0022 6716 0649  14         dect  stack
0023 6718 C64B  30         mov   r11,*stack            ; Save return address
0024 671A 0649  14         dect  stack
0025 671C C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 671E 0204  20         li    tmp0,id.dialog.cartridge
     6720 006A     
0030 6722 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6724 A71A     
0031               
0032 6726 0204  20         li    tmp0,txt.head.cartridge
     6728 7770     
0033 672A C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     672C A71E     
0034               
0035 672E 0204  20         li    tmp0,txt.info.cartridge
     6730 777F     
0036 6732 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6734 A720     
0037               
0038 6736 0204  20         li    tmp0,pos.info.cartridge
     6738 7788     
0039 673A C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     673C A726     
0040               
0041 673E 0204  20         li    tmp0,txt.hint.cartridge
     6740 778A     
0042 6742 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6744 A722     
0043 6746 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6748 A724     
0044               
0045 674A 0204  20         li    tmp0,txt.keys.cartridge
     674C 77A3     
0046 674E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6750 A728     
0047               
0048 6752 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6754 71CE     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               dialog.cartridge.exit:
0053 6756 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 6758 C2F9  30         mov   *stack+,r11           ; Pop R11
0055 675A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0078                       copy  "dialog.load.asm"      ; Dialog "Load file"
     **** ****     > dialog.load.asm
0001               * FILE......: dialog.load.asm
0002               * Purpose...: Dialog "Load DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.load
0006               * Open Dialog for loading DV 80 file
0007               ***************************************************************
0008               * bl @dialog.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.load:
0022 675C 0649  14         dect  stack
0023 675E C64B  30         mov   r11,*stack            ; Save return address
0024 6760 0649  14         dect  stack
0025 6762 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6764 0649  14         dect  stack
0027 6766 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Show dialog "Unsaved changes" if editor buffer dirty
0030                       ;-------------------------------------------------------
0031 6768 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     676A A506     
0032 676C 1303  14         jeq   dialog.load.setup     ; No, skip "Unsaved changes"
0033               
0034 676E 06A0  32         bl    @dialog.unsaved       ; Show dialog
     6770 6B3C     
0035 6772 102B  14         jmp   dialog.load.exit      ; Exit early
0036                       ;-------------------------------------------------------
0037                       ; Setup dialog
0038                       ;-------------------------------------------------------
0039               dialog.load.setup:
0040 6774 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     6776 7204     
0041               
0042 6778 0204  20         li    tmp0,id.dialog.load
     677A 000A     
0043 677C C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     677E A71A     
0044               
0045 6780 0204  20         li    tmp0,txt.head.load
     6782 72E4     
0046 6784 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6786 A71E     
0047               
0048 6788 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     678A A720     
0049 678C 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     678E A726     
0050               
0051 6790 0204  20         li    tmp0,txt.hint.load
     6792 72F3     
0052 6794 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6796 A722     
0053 6798 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     679A A724     
0054               
0055 679C 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     679E A44E     
0056 67A0 1303  14         jeq   !
0057                       ;-------------------------------------------------------
0058                       ; Show that FastMode is on
0059                       ;-------------------------------------------------------
0060 67A2 0204  20         li    tmp0,txt.keys.load2   ; Highlight FastMode
     67A4 72C4     
0061 67A6 1002  14         jmp   dialog.load.keylist
0062                       ;-------------------------------------------------------
0063                       ; Show that FastMode is off
0064                       ;-------------------------------------------------------
0065 67A8 0204  20 !       li    tmp0,txt.keys.load
     67AA 72A4     
0066                       ;-------------------------------------------------------
0067                       ; Show dialog
0068                       ;-------------------------------------------------------
0069               dialog.load.keylist:
0070 67AC C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     67AE A728     
0071                       ;-------------------------------------------------------
0072                       ; Set command line
0073                       ;-------------------------------------------------------
0074 67B0 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     67B2 A7B0     
0075 67B4 C154  26         mov   *tmp0,tmp1            ; Anything set?
0076 67B6 1304  14         jeq   dialog.load.cursor    ; No default filename, skip
0077               
0078 67B8 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     67BA A006     
0079 67BC 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     67BE 6F42     
0080                                                   ; \ i  @parm1 = Pointer to string w. preset
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Set cursor shape
0084                       ;-------------------------------------------------------
0085               dialog.load.cursor:
0086 67C0 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     67C2 71BC     
0087 67C4 C820  54         mov   @tv.curshape,@ramsat+2
     67C6 A214     
     67C8 A058     
0088                                                   ; Get cursor shape and color
0089                       ;-------------------------------------------------------
0090                       ; Exit
0091                       ;-------------------------------------------------------
0092               dialog.load.exit:
0093 67CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0094 67CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0095 67CE C2F9  30         mov   *stack+,r11           ; Pop R11
0096 67D0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0079                       copy  "dialog.save.asm"      ; Dialog "Save file"
     **** ****     > dialog.save.asm
0001               * FILE......: dialog.save.asm
0002               * Purpose...: Dialog "Save DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.save
0006               * Dialog "Save"
0007               ***************************************************************
0008               * bl @dialog.save
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.save:
0022 67D2 0649  14         dect  stack
0023 67D4 C64B  30         mov   r11,*stack            ; Save return address
0024 67D6 0649  14         dect  stack
0025 67D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 67DA 8820  50         c     @fb.row.dirty,@w$ffff
     67DC A30A     
     67DE 2022     
0030 67E0 1604  14         jne   !                     ; Skip crunching if clean
0031 67E2 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     67E4 7174     
0032 67E6 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     67E8 A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 67EA 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     67EC A510     
     67EE 2022     
0037 67F0 130B  14         jeq   dialog.save.default   ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 67F2 06A0  32         bl    @cmdb.cmd.clear       ; Clear current CMDB command
     67F4 6EFA     
0042               
0043 67F6 0204  20         li    tmp0,id.dialog.saveblock
     67F8 000C     
0044 67FA C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     67FC A71A     
0045 67FE 0204  20         li    tmp0,txt.head.save2   ; Title "Save block to file"
     6800 7322     
0046 6802 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6804 A71E     
0047 6806 100E  14         jmp   dialog.save.header
0048                       ;-------------------------------------------------------
0049                       ; Default dialog
0050                       ;-------------------------------------------------------
0051               dialog.save.default:
0052 6808 0204  20         li    tmp0,id.dialog.save
     680A 000B     
0053 680C C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     680E A71A     
0054 6810 0204  20         li    tmp0,txt.head.save    ; Title "Save file"
     6812 7313     
0055 6814 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6816 A71E     
0056                       ;-------------------------------------------------------
0057                       ; Set command line
0058                       ;-------------------------------------------------------
0059 6818 0204  20         li    tmp0,edb.filename     ; Set filename
     681A A51C     
0060 681C C804  38         mov   tmp0,@parm1           ; Get pointer to string
     681E A006     
0061               
0062 6820 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6822 6F42     
0063                                                   ; \ i  @parm1 = Pointer to string w. preset
0064                                                   ; /
0065                       ;-------------------------------------------------------
0066                       ; Setup header
0067                       ;-------------------------------------------------------
0068               dialog.save.header:
0069 6824 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6826 A720     
0070 6828 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     682A A726     
0071               
0072 682C 0204  20         li    tmp0,txt.hint.save
     682E 733A     
0073 6830 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6832 A722     
0074 6834 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6836 A724     
0075               
0076 6838 0204  20         li    tmp0,txt.keys.save
     683A 735A     
0077 683C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     683E A728     
0078               
0079 6840 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     6842 A44E     
0080                       ;-------------------------------------------------------
0081                       ; Set cursor shape
0082                       ;-------------------------------------------------------
0083 6844 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6846 71BC     
0084                       ;-------------------------------------------------------
0085                       ; Exit
0086                       ;-------------------------------------------------------
0087               dialog.save.exit:
0088 6848 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 684A C2F9  30         mov   *stack+,r11           ; Pop R11
0090 684C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0080                       copy  "dialog.print.asm"     ; Dialog "Print file"
     **** ****     > dialog.print.asm
0001               * FILE......: dialog.print.asm
0002               * Purpose...: Dialog "Print file"
0003               
0004               ***************************************************************
0005               * dialog.print
0006               * Dialog "Print"
0007               ***************************************************************
0008               * bl @dialog.print
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.print:
0022 684E 0649  14         dect  stack
0023 6850 C64B  30         mov   r11,*stack            ; Save return address
0024 6852 0649  14         dect  stack
0025 6854 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 6856 8820  50         c     @fb.row.dirty,@w$ffff
     6858 A30A     
     685A 2022     
0030 685C 1604  14         jne   !                     ; Skip crunching if clean
0031 685E 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     6860 7174     
0032 6862 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6864 A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 6866 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6868 A510     
     686A 2022     
0037 686C 1307  14         jeq   dialog.print.default  ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 686E 0204  20         li    tmp0,id.dialog.printblock
     6870 0010     
0042 6872 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6874 A71A     
0043 6876 0204  20         li    tmp0,txt.head.print2  ; Title "Print block to file"
     6878 74BC     
0044               
0045 687A 1006  14         jmp   dialog.print.header
0046                       ;-------------------------------------------------------
0047                       ; Default dialog
0048                       ;-------------------------------------------------------
0049               dialog.print.default:
0050 687C 0204  20         li    tmp0,id.dialog.print
     687E 000F     
0051 6880 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6882 A71A     
0052 6884 0204  20         li    tmp0,txt.head.print   ; Title "Print file"
     6886 74AC     
0053                       ;-------------------------------------------------------
0054                       ; Setup header
0055                       ;-------------------------------------------------------
0056               dialog.print.header:
0057 6888 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     688A A71E     
0058               
0059 688C 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     688E A720     
0060 6890 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6892 A726     
0061               
0062 6894 0204  20         li    tmp0,txt.hint.print
     6896 74CD     
0063 6898 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     689A A722     
0064 689C 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     689E A724     
0065               
0066 68A0 0204  20         li    tmp0,txt.keys.save
     68A2 735A     
0067 68A4 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     68A6 A728     
0068               
0069 68A8 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     68AA A44E     
0070                       ;-------------------------------------------------------
0071                       ; Set command line
0072                       ;-------------------------------------------------------
0073 68AC 0204  20         li    tmp0,tv.printer.fname ; Set printer name
     68AE DE00     
0074 68B0 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     68B2 A006     
0075               
0076 68B4 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     68B6 6F42     
0077                                                   ; \ i  @parm1 = Pointer to string w. preset
0078                                                   ; /
0079                       ;-------------------------------------------------------
0080                       ; Set cursor shape
0081                       ;-------------------------------------------------------
0082 68B8 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     68BA 71BC     
0083                       ;-------------------------------------------------------
0084                       ; Exit
0085                       ;-------------------------------------------------------
0086               dialog.print.exit:
0087 68BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 68BE C2F9  30         mov   *stack+,r11           ; Pop R11
0089 68C0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0081                       copy  "dialog.append.asm"    ; Dialog "Append file"
     **** ****     > dialog.append.asm
0001               * FILE......: dialog.append.asm
0002               * Purpose...: Dialog "Append DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.append
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * bl @dialog.append
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.append:
0022 68C2 0649  14         dect  stack
0023 68C4 C64B  30         mov   r11,*stack            ; Save return address
0024 68C6 0649  14         dect  stack
0025 68C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 68CA 0649  14         dect  stack
0027 68CC C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.append.setup:
0032 68CE 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     68D0 7204     
0033               
0034 68D2 0204  20         li    tmp0,id.dialog.append
     68D4 000E     
0035 68D6 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     68D8 A71A     
0036               
0037 68DA 0204  20         li    tmp0,txt.head.append
     68DC 736C     
0038 68DE C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     68E0 A71E     
0039               
0040 68E2 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     68E4 A720     
0041 68E6 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     68E8 A726     
0042               
0043 68EA 0204  20         li    tmp0,txt.hint.append
     68EC 737D     
0044 68EE C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     68F0 A722     
0045 68F2 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     68F4 A724     
0046               
0047 68F6 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     68F8 A44E     
0048 68FA 1303  14         jeq   !
0049                       ;-------------------------------------------------------
0050                       ; Show that FastMode is on
0051                       ;-------------------------------------------------------
0052 68FC 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     68FE 72A4     
0053 6900 1002  14         jmp   dialog.append.keylist
0054                       ;-------------------------------------------------------
0055                       ; Show that FastMode is off
0056                       ;-------------------------------------------------------
0057 6902 0204  20 !       li    tmp0,txt.keys.insert
     6904 72A4     
0058                       ;-------------------------------------------------------
0059                       ; Show dialog
0060                       ;-------------------------------------------------------
0061               dialog.append.keylist:
0062 6906 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6908 A728     
0063                       ;-------------------------------------------------------
0064                       ; Set command line
0065                       ;-------------------------------------------------------
0066 690A 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     690C A7B0     
0067 690E C154  26         mov   *tmp0,tmp1            ; Anything set?
0068 6910 1304  14         jeq   dialog.append.cursor  ; No default filename, skip
0069               
0070 6912 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6914 A006     
0071 6916 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6918 6F42     
0072                                                   ; \ i  @parm1 = Pointer to string w. preset
0073                                                   ; /
0074                       ;-------------------------------------------------------
0075                       ; Set cursor shape
0076                       ;-------------------------------------------------------
0077               dialog.append.cursor:
0078 691A 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     691C 71BC     
0079 691E C820  54         mov   @tv.curshape,@ramsat+2
     6920 A214     
     6922 A058     
0080                                                   ; Get cursor shape and color
0081                       ;-------------------------------------------------------
0082                       ; Exit
0083                       ;-------------------------------------------------------
0084               dialog.append.exit:
0085 6924 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0086 6926 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 6928 C2F9  30         mov   *stack+,r11           ; Pop R11
0088 692A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0082                       copy  "dialog.insert.asm"    ; Dialog "Insert file at line"
     **** ****     > dialog.insert.asm
0001               * FILE......: dialog.insert.asm
0002               * Purpose...: Dialog "Insert DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.insert
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * bl @dialog.insert
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.insert:
0022 692C 0649  14         dect  stack
0023 692E C64B  30         mov   r11,*stack            ; Save return address
0024 6930 0649  14         dect  stack
0025 6932 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6934 0649  14         dect  stack
0027 6936 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.insert.setup:
0032 6938 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     693A 7204     
0033               
0034 693C 0204  20         li    tmp0,id.dialog.insert
     693E 000D     
0035 6940 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6942 A71A     
0036                       ;------------------------------------------------------
0037                       ; Include line number in pane header
0038                       ;------------------------------------------------------
0039 6944 06A0  32         bl    @film
     6946 2202     
0040 6948 A77E                   data cmdb.panhead.buf,>00,50
     694A 0000     
     694C 0032     
0041                                                   ; Clear pane header buffer
0042               
0043 694E 06A0  32         bl    @cpym2m
     6950 24A6     
0044 6952 73B6                   data txt.head.insert,cmdb.panhead.buf,25
     6954 A77E     
     6956 0019     
0045               
0046 6958 C820  54         mov   @fb.row,@parm1        ; Get row at cursor
     695A A306     
     695C A006     
0047 695E 06A0  32         bl    @fb.row2line          ; Row to editor line
     6960 304C     
0048                                                   ; \ i @fb.topline = Top line in frame buffer
0049                                                   ; | i @parm1      = Row in frame buffer
0050                                                   ; / o @outparm1   = Matching line in EB
0051               
0052 6962 05E0  34         inct  @outparm1             ; \ Add base 1 and insert at line
     6964 A016     
0053                                                   ; / following cursor, not line at cursor.
0054               
0055 6966 06A0  32         bl    @mknum                ; Convert integer to string
     6968 2972     
0056 696A A016                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0057 696C A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0058 696E 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0059 696F   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0060               
0061 6970 06A0  32         bl    @cpym2m
     6972 24A6     
0062 6974 A100                   data rambuf,cmdb.panhead.buf + 24,5
     6976 A796     
     6978 0005     
0063                                                   ; Add line number to buffer
0064               
0065 697A 0204  20         li    tmp0,29
     697C 001D     
0066 697E 0A84  32         sla   tmp0,8
0067 6980 D804  38         movb  tmp0,@cmdb.panhead.buf ; Set length byte
     6982 A77E     
0068               
0069 6984 0204  20         li    tmp0,cmdb.panhead.buf
     6986 A77E     
0070 6988 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     698A A71E     
0071                       ;------------------------------------------------------
0072                       ; Other panel strings
0073                       ;------------------------------------------------------
0074 698C 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     698E A720     
0075 6990 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6992 A726     
0076               
0077 6994 0204  20         li    tmp0,txt.hint.insert
     6996 73CF     
0078 6998 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     699A A722     
0079 699C 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     699E A724     
0080               
0081 69A0 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     69A2 A44E     
0082 69A4 1303  14         jeq   !
0083                       ;-------------------------------------------------------
0084                       ; Show that FastMode is on
0085                       ;-------------------------------------------------------
0086 69A6 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     69A8 72A4     
0087 69AA 1002  14         jmp   dialog.insert.keylist
0088                       ;-------------------------------------------------------
0089                       ; Show that FastMode is off
0090                       ;-------------------------------------------------------
0091 69AC 0204  20 !       li    tmp0,txt.keys.insert
     69AE 72A4     
0092                       ;-------------------------------------------------------
0093                       ; Show dialog
0094                       ;-------------------------------------------------------
0095               dialog.insert.keylist:
0096 69B0 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     69B2 A728     
0097                       ;-------------------------------------------------------
0098                       ; Set command line
0099                       ;-------------------------------------------------------
0100 69B4 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     69B6 A7B0     
0101 69B8 C154  26         mov   *tmp0,tmp1            ; Anything set?
0102 69BA 1304  14         jeq   dialog.insert.cursor  ; No default filename, skip
0103               
0104 69BC C804  38         mov   tmp0,@parm1           ; Get pointer to string
     69BE A006     
0105 69C0 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     69C2 6F42     
0106                                                   ; \ i  @parm1 = Pointer to string w. preset
0107                                                   ; /
0108                       ;-------------------------------------------------------
0109                       ; Set cursor shape
0110                       ;-------------------------------------------------------
0111               dialog.insert.cursor:
0112 69C4 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     69C6 71BC     
0113 69C8 C820  54         mov   @tv.curshape,@ramsat+2
     69CA A214     
     69CC A058     
0114                                                   ; Get cursor shape and color
0115                       ;-------------------------------------------------------
0116                       ; Exit
0117                       ;-------------------------------------------------------
0118               dialog.insert.exit:
0119 69CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0120 69D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0121 69D2 C2F9  30         mov   *stack+,r11           ; Pop R11
0122 69D4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0083                       copy  "dialog.config.asm"    ; Dialog "Configure"
     **** ****     > dialog.config.asm
0001               * FILE......: dialog.config.asm
0002               * Purpose...: Dialog "Configure"
0003               
0004               ***************************************************************
0005               * dialog.config
0006               * Open Dialog "Configure"
0007               ***************************************************************
0008               * bl @dialog.config
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.config:
0022 69D6 0649  14         dect  stack
0023 69D8 C64B  30         mov   r11,*stack            ; Save return address
0024 69DA 0649  14         dect  stack
0025 69DC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 69DE 0204  20         li    tmp0,id.dialog.config
     69E0 006C     
0030 69E2 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     69E4 A71A     
0031               
0032 69E6 0204  20         li    tmp0,txt.head.config
     69E8 7867     
0033 69EA C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     69EC A71E     
0034               
0035 69EE 0204  20         li    tmp0,txt.info.config
     69F0 7876     
0036 69F2 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     69F4 A720     
0037               
0038 69F6 0204  20         li    tmp0,pos.info.config
     69F8 7880     
0039 69FA C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     69FC A726     
0040               
0041 69FE 0204  20         li    tmp0,txt.hint.config
     6A00 7882     
0042 6A02 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6A04 A722     
0043 6A06 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6A08 A724     
0044               
0045 6A0A 0204  20         li    tmp0,txt.keys.config
     6A0C 7884     
0046 6A0E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6A10 A728     
0047               
0048 6A12 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6A14 71CE     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               dialog.config.exit:
0053 6A16 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 6A18 C2F9  30         mov   *stack+,r11           ; Pop R11
0055 6A1A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0084                       copy  "dialog.clipdev.asm"   ; Dialog "Configure clipboard"
     **** ****     > dialog.clipdev.asm
0001               * FILE......: dialog.clipdev.asm
0002               * Purpose...: Dialog "Configure clipboard device"
0003               
0004               ***************************************************************
0005               * dialog.clipdev
0006               * Open Dialog "Configure clipboard device"
0007               ***************************************************************
0008               * bl @dialog.clipdevice
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.clipdev:
0022 6A1C 0649  14         dect  stack
0023 6A1E C64B  30         mov   r11,*stack            ; Save return address
0024 6A20 0649  14         dect  stack
0025 6A22 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6A24 0204  20         li    tmp0,id.dialog.clipdev
     6A26 0011     
0030 6A28 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6A2A A71A     
0031               
0032 6A2C 0204  20         li    tmp0,txt.head.clipdev
     6A2E 7898     
0033 6A30 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6A32 A71E     
0034               
0035 6A34 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6A36 A720     
0036 6A38 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6A3A A726     
0037               
0038 6A3C 0204  20         li    tmp0,txt.hint.clipdev
     6A3E 78B1     
0039 6A40 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6A42 A722     
0040 6A44 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6A46 A724     
0041               
0042 6A48 0204  20         li    tmp0,txt.keys.clipdev
     6A4A 78E4     
0043 6A4C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6A4E A728     
0044                       ;-------------------------------------------------------
0045                       ; Set command line
0046                       ;-------------------------------------------------------
0047 6A50 0204  20         li    tmp0,tv.clip.fname    ; Set clipboard
     6A52 DE50     
0048 6A54 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6A56 A006     
0049               
0050 6A58 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6A5A 6F42     
0051                                                   ; \ i  @parm1 = Pointer to string w. preset
0052                                                   ; /
0053                       ;-------------------------------------------------------
0054                       ; Set cursor shape
0055                       ;-------------------------------------------------------
0056 6A5C 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6A5E 71BC     
0057 6A60 C820  54         mov   @tv.curshape,@ramsat+2
     6A62 A214     
     6A64 A058     
0058                                                   ; Get cursor shape and color
0059                       ;-------------------------------------------------------
0060                       ; Exit
0061                       ;-------------------------------------------------------
0062               dialog.clipdevice.exit:
0063 6A66 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 6A68 C2F9  30         mov   *stack+,r11           ; Pop R11
0065 6A6A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0085                       copy  "dialog.editor.asm"    ; Dialog "Configure editor"
     **** ****     > dialog.editor.asm
0001               * FILE......: dialog.editor.asm
0002               * Purpose...: Dialog "Configure editor"
0003               
0004               ***************************************************************
0005               * dialog.editor
0006               * Dialog "Configure editor"
0007               ***************************************************************
0008               * bl @dialog.editor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.editor:
0022 6A6C 0649  14         dect  stack
0023 6A6E C64B  30         mov   r11,*stack            ; Save return address
0024 6A70 0649  14         dect  stack
0025 6A72 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6A74 0204  20         li    tmp0,id.dialog.editor
     6A76 006D     
0030 6A78 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6A7A A71A     
0031               
0032 6A7C 0204  20         li    tmp0,txt.head.editor
     6A7E 7920     
0033 6A80 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6A82 A71E     
0034               
0035 6A84 0204  20         li    tmp0,txt.info.editor
     6A86 7936     
0036 6A88 C804  38         mov   tmp0,@cmdb.paninfo    ; Show info message
     6A8A A720     
0037               
0038 6A8C 0204  20         li    tmp0,pos.info.editor
     6A8E 7949     
0039 6A90 C804  38         mov   tmp0,@cmdb.panmarkers ; Show key markers
     6A92 A726     
0040               
0041 6A94 0204  20         li    tmp0,txt.hint.editor
     6A96 794C     
0042 6A98 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6A9A A722     
0043 6A9C 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6A9E A724     
0044               
0045 6AA0 0204  20         li    tmp0,txt.keys.editor
     6AA2 7967     
0046 6AA4 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6AA6 A728     
0047                       ;-------------------------------------------------------
0048                       ; Exit
0049                       ;-------------------------------------------------------
0050               dialog.editor.exit:
0051 6AA8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0052 6AAA C2F9  30         mov   *stack+,r11           ; Pop R11
0053 6AAC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0086                       copy  "dialog.clipboard.asm" ; Dialog "Copy from clipboard"
     **** ****     > dialog.clipboard.asm
0001               * FILE......: dialog.clipboard.asm
0002               * Purpose...: Dialog "Insert snippet from clipboard"
0003               
0004               ***************************************************************
0005               * dialog.clipboard
0006               * Open Dialog for inserting snippet from clipboard
0007               ***************************************************************
0008               * bl @dialog.clipboard
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.clipboard:
0022 6AAE 0649  14         dect  stack
0023 6AB0 C64B  30         mov   r11,*stack            ; Save return address
0024 6AB2 0649  14         dect  stack
0025 6AB4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029               dialog.clipboard.setup:
0030 6AB6 0204  20         li    tmp0,id.dialog.clipboard
     6AB8 0067     
0031 6ABA C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6ABC A71A     
0032                       ;------------------------------------------------------
0033                       ; Include line number in pane header
0034                       ;------------------------------------------------------
0035 6ABE 06A0  32         bl    @film
     6AC0 2202     
0036 6AC2 A77E                   data cmdb.panhead.buf,>00,50
     6AC4 0000     
     6AC6 0032     
0037                                                   ; Clear pane header buffer
0038               
0039 6AC8 06A0  32         bl    @cpym2m
     6ACA 24A6     
0040 6ACC 7401                   data txt.head.clipboard,cmdb.panhead.buf,27
     6ACE A77E     
     6AD0 001B     
0041               
0042 6AD2 C820  54         mov   @fb.row,@parm1
     6AD4 A306     
     6AD6 A006     
0043 6AD8 06A0  32         bl    @fb.row2line          ; Row to editor line
     6ADA 304C     
0044                                                   ; \ i @fb.topline = Top line in frame buffer
0045                                                   ; | i @parm1      = Row in frame buffer
0046                                                   ; / o @outparm1   = Matching line in EB
0047               
0048 6ADC 05A0  34         inc   @outparm1             ; Add base 1
     6ADE A016     
0049               
0050 6AE0 06A0  32         bl    @mknum                ; Convert integer to string
     6AE2 2972     
0051 6AE4 A016                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0052 6AE6 A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0053 6AE8 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0054 6AE9   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0055               
0056 6AEA 06A0  32         bl    @cpym2m
     6AEC 24A6     
0057 6AEE A100                   data rambuf,cmdb.panhead.buf + 27,5
     6AF0 A799     
     6AF2 0005     
0058                                                   ; Add line number to buffer
0059               
0060 6AF4 0204  20         li    tmp0,32
     6AF6 0020     
0061 6AF8 0A84  32         sla   tmp0,8
0062 6AFA D804  38         movb  tmp0,@cmdb.panhead.buf
     6AFC A77E     
0063                                                   ; Set length byte
0064               
0065 6AFE 0204  20         li    tmp0,cmdb.panhead.buf
     6B00 A77E     
0066 6B02 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6B04 A71E     
0067                       ;------------------------------------------------------
0068                       ; Other panel strings
0069                       ;------------------------------------------------------
0070 6B06 0204  20         li    tmp0,txt.hint.clipboard
     6B08 742E     
0071 6B0A C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6B0C A722     
0072               
0073 6B0E 0204  20         li    tmp0,txt.info.clipboard
     6B10 741D     
0074 6B12 C804  38         mov   tmp0,@cmdb.paninfo    ; Show info message
     6B14 A720     
0075               
0076 6B16 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6B18 A726     
0077               
0078 6B1A 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6B1C 6EFA     
0079               
0080 6B1E 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     6B20 A44E     
0081 6B22 1303  14         jeq   !
0082                       ;-------------------------------------------------------
0083                       ; Show that FastMode is on
0084                       ;-------------------------------------------------------
0085 6B24 0204  20         li    tmp0,txt.keys.clipboard ; Highlight FastMode
     6B26 7465     
0086 6B28 1002  14         jmp   dialog.clipboard.keylist
0087                       ;-------------------------------------------------------
0088                       ; Show that FastMode is off
0089                       ;-------------------------------------------------------
0090 6B2A 0204  20 !       li    tmp0,txt.keys.clipboard
     6B2C 7465     
0091                       ;-------------------------------------------------------
0092                       ; Show dialog
0093                       ;-------------------------------------------------------
0094               dialog.clipboard.keylist:
0095 6B2E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6B30 A728     
0096               
0097 6B32 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6B34 71CE     
0098                       ;-------------------------------------------------------
0099                       ; Exit
0100                       ;-------------------------------------------------------
0101               dialog.clipboard.exit:
0102 6B36 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0103 6B38 C2F9  30         mov   *stack+,r11           ; Pop R11
0104 6B3A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0087                       copy  "dialog.unsaved.asm"   ; Dialog "Unsaved changes"
     **** ****     > dialog.unsaved.asm
0001               * FILE......: dialog.unsaved.asm
0002               * Purpose...: Dialog "Unsaved changes"
0003               
0004               ***************************************************************
0005               * dialog.unsaved
0006               * Dialog "Unsaved changes"
0007               ***************************************************************
0008               * bl @dialog.unsaved
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.unsaved:
0022 6B3C 0649  14         dect  stack
0023 6B3E C64B  30         mov   r11,*stack            ; Save return address
0024 6B40 0649  14         dect  stack
0025 6B42 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6B44 0204  20         li    tmp0,id.dialog.unsaved
     6B46 0065     
0030 6B48 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6B4A A71A     
0031               
0032 6B4C 0204  20         li    tmp0,txt.head.unsaved
     6B4E 750C     
0033 6B50 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6B52 A71E     
0034               
0035 6B54 0204  20         li    tmp0,txt.info.unsaved
     6B56 7521     
0036 6B58 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6B5A A720     
0037 6B5C 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6B5E A726     
0038               
0039 6B60 0204  20         li    tmp0,txt.hint.unsaved
     6B62 7543     
0040 6B64 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6B66 A722     
0041 6B68 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6B6A A724     
0042               
0043 6B6C 0204  20         li    tmp0,txt.keys.unsaved
     6B6E 757B     
0044 6B70 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6B72 A728     
0045               
0046 6B74 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6B76 71CE     
0047                       ;-------------------------------------------------------
0048                       ; Exit
0049                       ;-------------------------------------------------------
0050               dialog.unsaved.exit:
0051 6B78 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0052 6B7A C2F9  30         mov   *stack+,r11           ; Pop R11
0053 6B7C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0088                       copy  "dialog.basic.asm"     ; Dialog "Basic"
     **** ****     > dialog.basic.asm
0001               * basic......: dialog.basic.asm
0002               * Purpose...: Dialog "Basic"
0003               
0004               ***************************************************************
0005               * dialog.basic
0006               * Open Dialog "Basic"
0007               ***************************************************************
0008               * bl @dialog.basic
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.basic:
0022 6B7E 0649  14         dect  stack
0023 6B80 C64B  30         mov   r11,*stack            ; Save return address
0024 6B82 0649  14         dect  stack
0025 6B84 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6B86 0204  20         li    tmp0,id.dialog.basic
     6B88 006B     
0030 6B8A C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6B8C A71A     
0031               
0032 6B8E 0204  20         li    tmp0,txt.head.basic
     6B90 77B7     
0033 6B92 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6B94 A71E     
0034               
0035 6B96 0204  20         li    tmp0,pos.info.basic
     6B98 77E3     
0036 6B9A C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6B9C A726     
0037               
0038 6B9E 0204  20         li    tmp0,txt.hint.basic
     6BA0 77E9     
0039 6BA2 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6BA4 A722     
0040 6BA6 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6BA8 A724     
0041               
0042 6BAA C120  34         mov   @tib.automode,tmp0    ; Get 'Automode' flag
     6BAC A0C0     
0043 6BAE 1303  14         jeq   !
0044                       ;-------------------------------------------------------
0045                       ; Flag is on
0046                       ;-------------------------------------------------------
0047 6BB0 0204  20         li    tmp0,txt.keys.basic2
     6BB2 7846     
0048 6BB4 1008  14         jmp   dialog.basic.done
0049                       ;-------------------------------------------------------
0050                       ; Flag is off
0051                       ;-------------------------------------------------------
0052 6BB6 C120  34 !       mov   @tib.session,tmp0     ; Already did session before?
     6BB8 A0B4     
0053 6BBA 1303  14         jeq   dialog.basic.amonly   ; No, only AutoMode
0054 6BBC 0204  20         li    tmp0,txt.keys.basic1  ; Yes, add "Uncrunch program"
     6BBE 3948     
0055 6BC0 1002  14         jmp   dialog.basic.done
0056                       ;-------------------------------------------------------
0057                       ; AutoMode option only
0058                       ;-------------------------------------------------------
0059               dialog.basic.amonly:
0060 6BC2 0204  20         li    tmp0,txt.keys.basic   ; Only AutoMode
     6BC4 7825     
0061                       ;-------------------------------------------------------
0062                       ; Show dialog
0063                       ;-------------------------------------------------------
0064               dialog.basic.done:
0065 6BC6 C804  38         mov   tmp0,@cmdb.pankeys    ; Save Keylist in status line
     6BC8 A728     
0066 6BCA 06A0  32         bl    @tibasic.buildstr     ; Build session selection string
     6BCC 70A2     
0067 6BCE 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6BD0 71CE     
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               dialog.basic.exit:
0072 6BD2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 6BD4 C2F9  30         mov   *stack+,r11           ; Pop R11
0074 6BD6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0089                       copy  "dialog.shortcuts.asm" ; Dialog "Shortcuts"
     **** ****     > dialog.shortcuts.asm
0001               * FILE......: dialog.shortcuts.asm
0002               * Purpose...: Dialog "Shortcuts"
0003               
0004               ***************************************************************
0005               * dialog.shortcuts
0006               * Dialog "Shortcuts"
0007               ***************************************************************
0008               * bl @dialog.shortcuts
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.shortcuts:
0022 6BD8 0649  14         dect  stack
0023 6BDA C64B  30         mov   r11,*stack            ; Save return address
0024 6BDC 0649  14         dect  stack
0025 6BDE C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6BE0 0204  20         li    tmp0,id.dialog.shortcuts
     6BE2 006E     
0030 6BE4 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6BE6 A71A     
0031               
0032 6BE8 0204  20         li    tmp0,txt.head.shortcuts
     6BEA 797B     
0033 6BEC C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6BEE A71E     
0034               
0035 6BF0 0204  20         li    tmp0,txt.info.shortcuts
     6BF2 798A     
0036 6BF4 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6BF6 A720     
0037               
0038 6BF8 0204  20         li    tmp0,pos.info.shortcuts
     6BFA 79AE     
0039 6BFC C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6BFE A726     
0040               
0041 6C00 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6C02 A724     
0042               
0043 6C04 0204  20         li    tmp0,txt.keys.shortcuts
     6C06 79B6     
0044 6C08 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6C0A A728     
0045               
0046 6C0C 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6C0E 71CE     
0047                       ;-------------------------------------------------------
0048                       ; Exit
0049                       ;-------------------------------------------------------
0050               dialog.shortcuts.exit:
0051 6C10 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0052 6C12 C2F9  30         mov   *stack+,r11           ; Pop R11
0053 6C14 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0090                       ;-----------------------------------------------------------------------
0091                       ; Command buffer handling
0092                       ;-----------------------------------------------------------------------
0093                       copy  "pane.utils.hint.asm" ; Show hint in pane
     **** ****     > pane.utils.hint.asm
0001               * FILE......: pane.utils.asm
0002               * Purpose...: Show hint message in pane
0003               
0004               ***************************************************************
0005               * pane.show_hintx
0006               * Show hint message
0007               ***************************************************************
0008               * bl  @pane.show_hintx
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Cursor YX position
0012               * @parm2 = Pointer to Length-prefixed string
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               pane.show_hintx:
0021 6C16 0649  14         dect  stack
0022 6C18 C64B  30         mov   r11,*stack            ; Save return address
0023 6C1A 0649  14         dect  stack
0024 6C1C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 6C1E 0649  14         dect  stack
0026 6C20 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 6C22 0649  14         dect  stack
0028 6C24 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6C26 0649  14         dect  stack
0030 6C28 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Display string
0033                       ;-------------------------------------------------------
0034 6C2A C820  46         mov   @parm1,@wyx           ; Set cursor
     6C2C A006     
     6C2E 832A     
0035 6C30 C160  34         mov   @parm2,tmp1           ; Get string to display
     6C32 A008     
0036 6C34 06A0  32         bl    @xutst0               ; Display string
     6C36 23EC     
0037                       ;-------------------------------------------------------
0038                       ; Get number of bytes to fill ...
0039                       ;-------------------------------------------------------
0040 6C38 C120  34         mov   @parm2,tmp0
     6C3A A008     
0041 6C3C D114  26         movb  *tmp0,tmp0            ; Get length byte of hint
0042 6C3E 0984  32         srl   tmp0,8                ; Right justify
0043 6C40 C184  18         mov   tmp0,tmp2
0044 6C42 C1C4  18         mov   tmp0,tmp3             ; Work copy
0045 6C44 0506  14         neg   tmp2
0046 6C46 0226  22         ai    tmp2,80               ; Number of bytes to fill
     6C48 0050     
0047                       ;-------------------------------------------------------
0048                       ; ... and clear until end of line
0049                       ;-------------------------------------------------------
0050 6C4A C120  34         mov   @parm1,tmp0           ; \ Restore YX position
     6C4C A006     
0051 6C4E A107  18         a     tmp3,tmp0             ; | Adjust X position to end of string
0052 6C50 C804  30         mov   tmp0,@wyx             ; / Set cursor
     6C52 832A     
0053               
0054 6C54 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6C56 23C6     
0055                                                   ; \ i  @wyx = Cursor position
0056                                                   ; / o  tmp0 = VDP target address
0057               
0058 6C58 0205  20         li    tmp1,32               ; Byte to fill
     6C5A 0020     
0059               
0060 6C5C 06A0  32         bl    @xfilv                ; Clear line
     6C5E 2260     
0061                                                   ; i \  tmp0 = start address
0062                                                   ; i |  tmp1 = byte to fill
0063                                                   ; i /  tmp2 = number of bytes to fill
0064                       ;-------------------------------------------------------
0065                       ; Exit
0066                       ;-------------------------------------------------------
0067               pane.show_hintx.exit:
0068 6C60 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0069 6C62 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0070 6C64 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 6C66 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 6C68 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 6C6A 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * pane.show_hint
0079               * Show hint message (data parameter version)
0080               ***************************************************************
0081               * bl  @pane.show_hint
0082               *     data p1,p2
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * p1 = Cursor YX position
0086               * p2 = Pointer to Length-prefixed string
0087               *--------------------------------------------------------------
0088               * OUTPUT
0089               * none
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * none
0093               ********|*****|*********************|**************************
0094               pane.show_hint:
0095 6C6C C83B  50         mov   *r11+,@parm1          ; Get parameter 1
     6C6E A006     
0096 6C70 C83B  50         mov   *r11+,@parm2          ; Get parameter 2
     6C72 A008     
0097 6C74 0649  14         dect  stack
0098 6C76 C64B  30         mov   r11,*stack            ; Save return address
0099                       ;-------------------------------------------------------
0100                       ; Display pane hint
0101                       ;-------------------------------------------------------
0102 6C78 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6C7A 6C16     
0103                       ;-------------------------------------------------------
0104                       ; Exit
0105                       ;-------------------------------------------------------
0106               pane.show_hint.exit:
0107 6C7C C2F9  30         mov   *stack+,r11           ; Pop R11
0108 6C7E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0094                       copy  "pane.cmdb.show.asm"  ; Show command buffer pane
     **** ****     > pane.cmdb.show.asm
0001               * FILE......: pane.cmdb.show.asm
0002               * Purpose...: Show command buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.show
0006               * Show command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.show
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               pane.cmdb.show:
0022 6C80 0649  14         dect  stack
0023 6C82 C64B  30         mov   r11,*stack            ; Save return address
0024 6C84 0649  14         dect  stack
0025 6C86 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6C88 0649  14         dect  stack
0027 6C8A C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6C8C 0649  14         dect  stack
0029 6C8E C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Hide character cursor
0032                       ;------------------------------------------------------
0033 6C90 C820  50         mov   @wyx,@cmdb.fb.yxsave  ; Save YX position in frame buffer
     6C92 832A     
     6C94 A704     
0034               
0062                       ;------------------------------------------------------
0063                       ; Show command buffer pane
0064                       ;------------------------------------------------------
0065 6C96 0204  20         li    tmp0,pane.botrow
     6C98 001D     
0066 6C9A 6120  34         s     @cmdb.scrrows,tmp0
     6C9C A706     
0067 6C9E C804  38         mov   tmp0,@fb.scrrows      ; Resize framebuffer
     6CA0 A31C     
0068               
0069 6CA2 0A84  32         sla   tmp0,8                ; LSB to MSB (Y), X=0
0070 6CA4 C804  38         mov   tmp0,@cmdb.yxtop      ; Set position of command buffer header line
     6CA6 A70E     
0071               
0072 6CA8 0224  22         ai    tmp0,>0100
     6CAA 0100     
0073 6CAC C804  38         mov   tmp0,@cmdb.yxprompt   ; Screen position of prompt in cmdb pane
     6CAE A710     
0074 6CB0 0584  14         inc   tmp0
0075 6CB2 C804  38         mov   tmp0,@cmdb.cursor     ; Screen position of cursor in cmdb pane
     6CB4 A70A     
0076               
0077 6CB6 0720  34         seto  @cmdb.visible         ; Show pane
     6CB8 A702     
0078               
0079 6CBA 0204  20         li    tmp0,tv.1timeonly     ; \ Set CMDB dirty flag (trigger redraw),
     6CBC 00FE     
0080 6CBE C804  38         mov   tmp0,@cmdb.dirty      ; / but colorize CMDB pane only once.
     6CC0 A718     
0081               
0082 6CC2 0204  20         li    tmp0,pane.focus.cmdb  ; \ CMDB pane has focus
     6CC4 0001     
0083 6CC6 C804  38         mov   tmp0,@tv.pane.focus   ; /
     6CC8 A222     
0084               
0085 6CCA 06A0  32         bl    @pane.errline.hide    ; Hide error pane
     6CCC 71AA     
0086                       ;------------------------------------------------------
0087                       ; Exit
0088                       ;------------------------------------------------------
0089               pane.cmdb.show.exit:
0090 6CCE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0091 6CD0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 6CD2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6CD4 C2F9  30         mov   *stack+,r11           ; Pop r11
0094 6CD6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0095                       copy  "pane.cmdb.hide.asm"  ; Hide command buffer pane
     **** ****     > pane.cmdb.hide.asm
0001               * FILE......: pane.cmdb.hide.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.hide
0006               * Hide command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Hiding the command buffer automatically passes pane focus
0020               * to frame buffer.
0021               ********|*****|*********************|**************************
0022               pane.cmdb.hide:
0023 6CD8 0649  14         dect  stack
0024 6CDA C64B  30         mov   r11,*stack            ; Save return address
0025 6CDC 0649  14         dect  stack
0026 6CDE C660  46         mov   @parm1,*stack         ; Push @parm1
     6CE0 A006     
0027                       ;------------------------------------------------------
0028                       ; Hide command buffer pane
0029                       ;------------------------------------------------------
0030 6CE2 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     6CE4 A31E     
     6CE6 A31C     
0031                       ;------------------------------------------------------
0032                       ; Adjust frame buffer size if error pane visible
0033                       ;------------------------------------------------------
0034 6CE8 C820  54         mov   @tv.error.visible,@tv.error.visible
     6CEA A228     
     6CEC A228     
0035 6CEE 1302  14         jeq   !
0036 6CF0 0620  34         dec   @fb.scrrows
     6CF2 A31C     
0037                       ;------------------------------------------------------
0038                       ; Clear error/hint & status line
0039                       ;------------------------------------------------------
0040 6CF4 06A0  32 !       bl    @hchar
     6CF6 279E     
0041 6CF8 1900                   byte pane.botrow-4,0,32,80*3
     6CFA 20F0     
0042 6CFC 1C00                   byte pane.botrow-1,0,32,80*2
     6CFE 20A0     
0043 6D00 FFFF                   data EOL
0044                       ;------------------------------------------------------
0045                       ; Adjust frame buffer size if ruler visible
0046                       ;------------------------------------------------------
0047 6D02 C820  54         mov   @tv.ruler.visible,@tv.ruler.visible
     6D04 A210     
     6D06 A210     
0048 6D08 1302  14         jeq   pane.cmdb.hide.rest
0049 6D0A 0620  34         dec   @fb.scrrows
     6D0C A31C     
0050                       ;------------------------------------------------------
0051                       ; Hide command buffer pane (rest)
0052                       ;------------------------------------------------------
0053               pane.cmdb.hide.rest:
0054 6D0E C820  46         mov   @cmdb.fb.yxsave,@wyx  ; Position cursor in framebuffer
     6D10 A704     
     6D12 832A     
0055 6D14 04E0  34         clr   @cmdb.visible         ; Hide command buffer pane
     6D16 A702     
0056 6D18 0720  34         seto  @fb.dirty             ; Redraw framebuffer
     6D1A A318     
0057 6D1C 04E0  34         clr   @tv.pane.focus        ; Framebuffer has focus!
     6D1E A222     
0058                       ;------------------------------------------------------
0059                       ; Reload current color scheme
0060                       ;------------------------------------------------------
0061 6D20 0720  34         seto  @parm1                ; Do not turn screen off while
     6D22 A006     
0062                                                   ; reloading color scheme
0063 6D24 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     6D26 A008     
0064 6D28 04E0  34         clr   @parm3                ; Colorize all panes
     6D2A A00A     
0065               
0066 6D2C 06A0  32         bl    @pane.action.colorscheme.load
     6D2E 71F2     
0067                                                   ; Reload color scheme
0068                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0069                                                   ; | i  @parm2 = Skip colorizing marked lines
0070                                                   ; |             if >FFFF
0071                                                   ; | i  @parm3 = Only colorize CMDB pane
0072                                                   ; /             if >FFFF
0073                       ;------------------------------------------------------
0074                       ; Show cursor again
0075                       ;------------------------------------------------------
0076 6D30 06A0  32         bl    @pane.cursor.blink
     6D32 71BC     
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080               pane.cmdb.hide.exit:
0081 6D34 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6D36 A006     
0082 6D38 C2F9  30         mov   *stack+,r11           ; Pop r11
0083 6D3A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0096                       copy  "pane.cmdb.draw.asm"  ; Draw command buffer pane contents
     **** ****     > pane.cmdb.draw.asm
0001               * FILE......: pane.cmdb.draw.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.draw
0006               * Draw content in command buffer pane
0007               ***************************************************************
0008               * bl  @pane.cmdb.draw
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.panhead  = Pointer to string with dialog header
0012               * @cmdb.paninfo  = Pointer to string with info message or >0000
0013               *                  if input prompt required
0014               * @cmdb.panhint  = Pointer to string with hint message
0015               * @cmdb.pankeys  = Pointer to string with key shortcuts for dialog
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2
0022               ********|*****|*********************|**************************
0023               pane.cmdb.draw:
0024 6D3C 0649  14         dect  stack
0025 6D3E C64B  30         mov   r11,*stack            ; Save return address
0026 6D40 0649  14         dect  stack
0027 6D42 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6D44 0649  14         dect  stack
0029 6D46 C645  30         mov   tmp1,*stack           ; Push tmp1
0030                       ;------------------------------------------------------
0031                       ; Command buffer header line
0032                       ;------------------------------------------------------
0033 6D48 C820  54         mov   @cmdb.panhead,@parm1  ; Get string to display
     6D4A A71E     
     6D4C A006     
0034 6D4E 0204  20         li    tmp0,80
     6D50 0050     
0035 6D52 C804  38         mov   tmp0,@parm2           ; Set requested length
     6D54 A008     
0036 6D56 0204  20         li    tmp0,1
     6D58 0001     
0037 6D5A C804  38         mov   tmp0,@parm3           ; Set character to fill
     6D5C A00A     
0038 6D5E 0204  20         li    tmp0,rambuf
     6D60 A100     
0039 6D62 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6D64 A00C     
0040               
0041 6D66 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6D68 32EE     
0042                                                   ; \ i  @parm1 = Pointer to string
0043                                                   ; | i  @parm2 = Requested length
0044                                                   ; | i  @parm3 = Fill character
0045                                                   ; | i  @parm4 = Pointer to buffer with
0046                                                   ; /             output string
0047               
0048 6D6A 06A0  32         bl    @cpym2m
     6D6C 24A6     
0049 6D6E 7294                   data txt.stevie,rambuf+65,20
     6D70 A141     
     6D72 0014     
0050                                                   ;
0051                                                   ; Add Stevie banner
0052                                                   ;
0053               
0054 6D74 C820  46         mov   @cmdb.yxtop,@wyx      ; \
     6D76 A70E     
     6D78 832A     
0055 6D7A C160  34         mov   @outparm1,tmp1        ; | Display pane header
     6D7C A016     
0056 6D7E 06A0  32         bl    @xutst0               ; /
     6D80 23EC     
0057                       ;------------------------------------------------------
0058                       ; Check dialog id
0059                       ;------------------------------------------------------
0060 6D82 04E0  26         clr   @waux1                ; Default is show prompt
     6D84 833C     
0061               
0062 6D86 C120  34         mov   @cmdb.dialog,tmp0
     6D88 A71A     
0063 6D8A 0284  22         ci    tmp0,99               ; \ Hide prompt and no keyboard
     6D8C 0063     
0064 6D8E 121D  14         jle   pane.cmdb.draw.clear  ; | buffer input if dialog ID > 99
0065 6D90 0720  26         seto  @waux1                ; /
     6D92 833C     
0066                       ;------------------------------------------------------
0067                       ; Show info message instead of prompt
0068                       ;------------------------------------------------------
0069 6D94 C160  34         mov   @cmdb.paninfo,tmp1    ; Null pointer?
     6D96 A720     
0070 6D98 1318  14         jeq   pane.cmdb.draw.clear  ; Yes, display normal prompt
0071               
0072 6D9A C820  54         mov   @cmdb.paninfo,@parm1  ; Get string to display
     6D9C A720     
     6D9E A006     
0073 6DA0 0204  20         li    tmp0,80
     6DA2 0050     
0074 6DA4 C804  38         mov   tmp0,@parm2           ; Set requested length
     6DA6 A008     
0075 6DA8 0204  20         li    tmp0,32
     6DAA 0020     
0076 6DAC C804  38         mov   tmp0,@parm3           ; Set character to fill
     6DAE A00A     
0077 6DB0 0204  20         li    tmp0,rambuf
     6DB2 A100     
0078 6DB4 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6DB6 A00C     
0079               
0080 6DB8 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6DBA 32EE     
0081                                                   ; \ i  @parm1 = Pointer to string
0082                                                   ; | i  @parm2 = Requested length
0083                                                   ; | i  @parm3 = Fill character
0084                                                   ; | i  @parm4 = Pointer to buffer with
0085                                                   ; /             output string
0086               
0087 6DBC 06A0  32         bl    @at
     6DBE 2692     
0088 6DC0 1A00                   byte pane.botrow-3,0  ; Position cursor
0089               
0090 6DC2 C160  34         mov   @outparm1,tmp1        ; \ Display pane header
     6DC4 A016     
0091 6DC6 06A0  32         bl    @xutst0               ; /
     6DC8 23EC     
0092                       ;------------------------------------------------------
0093                       ; Clear lines after prompt in command buffer
0094                       ;------------------------------------------------------
0095               pane.cmdb.draw.clear:
0096 6DCA 06A0  32         bl    @hchar
     6DCC 279E     
0097 6DCE 1B00                   byte pane.botrow-2,0,32,80
     6DD0 2050     
0098 6DD2 FFFF                   data EOL              ; Remove key markers
0099                       ;------------------------------------------------------
0100                       ; Show key markers ?
0101                       ;------------------------------------------------------
0102 6DD4 C120  34         mov   @cmdb.panmarkers,tmp0
     6DD6 A726     
0103 6DD8 1310  14         jeq   pane.cmdb.draw.hint   ; no, skip key markers
0104                       ;------------------------------------------------------
0105                       ; Loop over key marker list
0106                       ;------------------------------------------------------
0107               pane.cmdb.draw.marker.loop:
0108 6DDA D174  28         movb  *tmp0+,tmp1           ; Get X position
0109 6DDC 0985  32         srl   tmp1,8                ; Right align
0110 6DDE 0285  22         ci    tmp1,>00ff            ; End of list reached?
     6DE0 00FF     
0111 6DE2 130B  14         jeq   pane.cmdb.draw.hint   ; Yes, exit loop
0112               
0113 6DE4 0265  22         ori   tmp1,(pane.botrow - 2) * 256
     6DE6 1B00     
0114                                                   ; y=bottom row - 3, x=(key marker position)
0115 6DE8 C805  30         mov   tmp1,@wyx             ; Set cursor position
     6DEA 832A     
0116               
0117 6DEC 0649  14         dect  stack
0118 6DEE C644  30         mov   tmp0,*stack           ; Push tmp0
0119               
0120 6DF0 06A0  32         bl    @putstr
     6DF2 23EA     
0121 6DF4 39D8                   data txt.keymarker    ; Show key marker
0122               
0123 6DF6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0124                       ;------------------------------------------------------
0125                       ; Show marker
0126                       ;------------------------------------------------------
0127 6DF8 10F0  14         jmp   pane.cmdb.draw.marker.loop
0128                                                   ; Next iteration
0129                       ;------------------------------------------------------
0130                       ; Display pane hint in command buffer
0131                       ;------------------------------------------------------
0132               pane.cmdb.draw.hint:
0133 6DFA 0204  20         li    tmp0,pane.botrow - 1  ; \
     6DFC 001C     
0134 6DFE 0A84  32         sla   tmp0,8                ; / Y=bottom row - 1, X=0
0135 6E00 C804  38         mov   tmp0,@parm1           ; Set parameter
     6E02 A006     
0136 6E04 C820  54         mov   @cmdb.panhint,@parm2  ; Pane hint to display
     6E06 A722     
     6E08 A008     
0137               
0138 6E0A 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6E0C 6C16     
0139                                                   ; \ i  parm1 = Pointer to string with hint
0140                                                   ; / i  parm2 = YX position
0141                       ;------------------------------------------------------
0142                       ; Display extra pane hint in command buffer
0143                       ;------------------------------------------------------
0144 6E0E C120  34         mov   @cmdb.panmarkers,tmp0 ; Any key markers to display?
     6E10 A726     
0145 6E12 160E  14         jne   pane.cmdb.draw.keys   ; yes, skip extra pane hint
0146               
0147 6E14 C820  54         mov   @cmdb.panhint2,@parm2 ; Extra pane hint to display
     6E16 A724     
     6E18 A008     
0148 6E1A 130A  14         jeq   pane.cmdb.draw.keys   ; No extra pane hint to display
0149               
0150 6E1C 0204  20         li    tmp0,pane.botrow - 2  ; \
     6E1E 001B     
0151 6E20 0A84  32         sla   tmp0,8                ; / Y=bottom row - 2, X=0
0152 6E22 C804  38         mov   tmp0,@parm1           ; Set parameter
     6E24 A006     
0153 6E26 C820  54         mov   @cmdb.panhint2,@parm2 ; Extra pane hint to display
     6E28 A724     
     6E2A A008     
0154               
0155 6E2C 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6E2E 6C16     
0156                                                   ; \ i  parm1 = Pointer to string with hint
0157                                                   ; / i  parm2 = YX position
0158                       ;------------------------------------------------------
0159                       ; Display keys in status line
0160                       ;------------------------------------------------------
0161               pane.cmdb.draw.keys:
0162 6E30 0204  20         li    tmp0,pane.botrow      ; \
     6E32 001D     
0163 6E34 0A84  32         sla   tmp0,8                ; / Y=bottom row, X=0
0164 6E36 C804  38         mov   tmp0,@parm1           ; Set parameter
     6E38 A006     
0165 6E3A C820  54         mov   @cmdb.pankeys,@parm2  ; Pane hint to display
     6E3C A728     
     6E3E A008     
0166               
0167 6E40 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6E42 6C16     
0168                                                   ; \ i  parm1 = Pointer to string with hint
0169                                                   ; / i  parm2 = YX position
0170                       ;------------------------------------------------------
0171                       ; ALPHA-Lock key down?
0172                       ;------------------------------------------------------
0173 6E44 20A0  32         coc   @wbit10,config
     6E46 200C     
0174 6E48 1306  14         jeq   pane.cmdb.draw.alpha.down
0175                       ;------------------------------------------------------
0176                       ; AlPHA-Lock is up
0177                       ;------------------------------------------------------
0178 6E4A 06A0  32         bl    @hchar
     6E4C 279E     
0179 6E4E 1D4E                   byte pane.botrow,78,32,2
     6E50 2002     
0180 6E52 FFFF                   data eol
0181               
0182 6E54 1004  14         jmp   pane.cmdb.draw.promptcmd
0183                       ;------------------------------------------------------
0184                       ; AlPHA-Lock is down
0185                       ;------------------------------------------------------
0186               pane.cmdb.draw.alpha.down:
0187 6E56 06A0  32         bl    @putat
     6E58 240E     
0188 6E5A 1D4E                   byte   pane.botrow,78
0189 6E5C 39D2                   data   txt.alpha.down
0190                       ;------------------------------------------------------
0191                       ; Command buffer content
0192                       ;------------------------------------------------------
0193               pane.cmdb.draw.promptcmd:
0194 6E5E C120  30         mov   @waux1,tmp0           ; Flag set?
     6E60 833C     
0195 6E62 1602  14         jne   pane.cmdb.draw.hearts ; Yes, so skip refresh
0196 6E64 06A0  32         bl    @cmdb.refresh         ; Refresh command buffer content
     6E66 6EB0     
0197                       ;------------------------------------------------------
0198                       ; Set color for hearts in TI-Basic dialog
0199                       ;------------------------------------------------------
0200               pane.cmdb.draw.hearts:
0201 6E68 C120  34         mov   @cmdb.dialog,tmp0
     6E6A A71A     
0202 6E6C 0284  22         ci    tmp0,id.dialog.basic  ; TI Basic dialog active?
     6E6E 006B     
0203 6E70 1602  14         jne   pane.cmdb.draw.exit   ; No, so exit early
0204 6E72 06A0  32         bl    @tibasic.hearts.tat   ; Set color for hearts
     6E74 711E     
0205                       ;------------------------------------------------------
0206                       ; Exit
0207                       ;------------------------------------------------------
0208               pane.cmdb.draw.exit:
0209 6E76 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0210 6E78 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0211 6E7A C2F9  30         mov   *stack+,r11           ; Pop r11
0212 6E7C 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0097                       copy  "error.display.asm"   ; Show error message
     **** ****     > error.display.asm
0001               
0002               ***************************************************************
0003               * error.display
0004               * Display error message
0005               ***************************************************************
0006               * bl  @error.display
0007               *--------------------------------------------------------------
0008               * INPUT
0009               * @parm1 = Pointer to error message
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0,tmp1,tmp2
0016               ********|*****|*********************|**************************
0017               error.display:
0018 6E7E 0649  14         dect  stack
0019 6E80 C64B  30         mov   r11,*stack            ; Save return address
0020 6E82 0649  14         dect  stack
0021 6E84 C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6E86 0649  14         dect  stack
0023 6E88 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6E8A 0649  14         dect  stack
0025 6E8C C646  30         mov   tmp2,*stack           ; Push tmp2
0026                       ;------------------------------------------------------
0027                       ; Display error message
0028                       ;------------------------------------------------------
0029 6E8E C120  34         mov   @parm1,tmp0           ; \ Get length of string
     6E90 A006     
0030 6E92 D194  26         movb  *tmp0,tmp2            ; |
0031 6E94 0986  32         srl   tmp2,8                ; / Right align
0032               
0033 6E96 C120  34         mov   @parm1,tmp0           ; Get error message
     6E98 A006     
0034 6E9A 0205  20         li    tmp1,tv.error.msg     ; Set error message
     6E9C A230     
0035               
0036 6E9E 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     6EA0 24AC     
0037                                                   ; \ i  tmp0 = Source CPU memory address
0038                                                   ; | i  tmp1 = Target CPU memory address
0039                                                   ; / i  tmp2 = Number of bytes to copy
0040               
0041 6EA2 06A0  32         bl    @pane.errline.show    ; Display error message
     6EA4 71E0     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               error.display.exit:
0046 6EA6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6EA8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6EAA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6EAC C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6EAE 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0098                       copy  "cmdb.refresh.asm"    ; Refresh command buffer contents
     **** ****     > cmdb.refresh.asm
0001               * FILE......: cmdb.refresh.asm
0002               * Purpose...: Stevie Editor - Command buffer
0003               
0004               ***************************************************************
0005               * cmdb.refresh
0006               * Refresh command buffer content
0007               ***************************************************************
0008               * bl @cmdb.refresh
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.refresh:
0022 6EB0 0649  14         dect  stack
0023 6EB2 C64B  30         mov   r11,*stack            ; Save return address
0024 6EB4 0649  14         dect  stack
0025 6EB6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6EB8 0649  14         dect  stack
0027 6EBA C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6EBC 0649  14         dect  stack
0029 6EBE C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6EC0 0649  14         dect  stack
0031 6EC2 C660  42         mov   @wyx,*stack           ; Push cursor position
     6EC4 832A     
0032                       ;------------------------------------------------------
0033                       ; Dump Command buffer content
0034                       ;------------------------------------------------------
0035 6EC6 C820  46         mov   @cmdb.yxprompt,@wyx   ; Screen position of command line prompt
     6EC8 A710     
     6ECA 832A     
0036               
0037 6ECC 05A0  26         inc   @wyx                  ; X +1 for prompt
     6ECE 832A     
0038               
0039 6ED0 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6ED2 23C6     
0040                                                   ; \ i  @wyx = Cursor position
0041                                                   ; / o  tmp0 = VDP target address
0042               
0043 6ED4 0205  20         li    tmp1,cmdb.cmd         ; Address of current command
     6ED6 A72D     
0044 6ED8 0206  20         li    tmp2,1*79             ; Command length
     6EDA 004F     
0045               
0046 6EDC 06A0  32         bl    @xpym2v               ; \ Copy CPU memory to VDP memory
     6EDE 2458     
0047                                                   ; | i  tmp0 = VDP target address
0048                                                   ; | i  tmp1 = RAM source address
0049                                                   ; / i  tmp2 = Number of bytes to copy
0050                       ;------------------------------------------------------
0051                       ; Show command buffer prompt
0052                       ;------------------------------------------------------
0053 6EE0 C820  46         mov   @cmdb.yxprompt,@wyx
     6EE2 A710     
     6EE4 832A     
0054 6EE6 06A0  32         bl    @putstr
     6EE8 23EA     
0055 6EEA 3AAC                   data txt.cmdb.prompt
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               cmdb.refresh.exit:
0060 6EEC C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6EEE 832A     
0061 6EF0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 6EF2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 6EF4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 6EF6 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 6EF8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0099                       copy  "cmdb.cmd.asm"        ; Command line handling
     **** ****     > cmdb.cmd.asm
0001               * FILE......: cmdb.cmd.asm
0002               * Purpose...: Stevie Editor - Command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.clear
0006               * Clear current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.clear:
0022 6EFA 0649  14         dect  stack
0023 6EFC C64B  30         mov   r11,*stack            ; Save return address
0024 6EFE 0649  14         dect  stack
0025 6F00 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6F02 0649  14         dect  stack
0027 6F04 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6F06 0649  14         dect  stack
0029 6F08 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6F0A 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6F0C A72C     
0034 6F0E 06A0  32         bl    @film                 ; Clear command
     6F10 2202     
0035 6F12 A72D                   data  cmdb.cmd,>00,80
     6F14 0000     
     6F16 0050     
0036                       ;------------------------------------------------------
0037                       ; Put cursor at beginning of line
0038                       ;------------------------------------------------------
0039 6F18 C120  34         mov   @cmdb.yxprompt,tmp0
     6F1A A710     
0040 6F1C 0584  14         inc   tmp0
0041 6F1E C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6F20 A70A     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               cmdb.cmd.clear.exit:
0046 6F22 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6F24 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6F26 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6F28 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6F2A 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               
0054               
0055               
0056               
0057               ***************************************************************
0058               * cmdb.cmdb.getlength
0059               * Get length of current command
0060               ***************************************************************
0061               * bl @cmdb.cmd.getlength
0062               *--------------------------------------------------------------
0063               * INPUT
0064               * @cmdb.cmd
0065               *--------------------------------------------------------------
0066               * OUTPUT
0067               * @outparm1
0068               *--------------------------------------------------------------
0069               * Register usage
0070               * none
0071               *--------------------------------------------------------------
0072               * Notes
0073               ********|*****|*********************|**************************
0074               cmdb.cmd.getlength:
0075 6F2C 0649  14         dect  stack
0076 6F2E C64B  30         mov   r11,*stack            ; Save return address
0077                       ;-------------------------------------------------------
0078                       ; Get length of null terminated string
0079                       ;-------------------------------------------------------
0080 6F30 06A0  32         bl    @string.getlenc      ; Get length of C-style string
     6F32 2A66     
0081 6F34 A72D                   data cmdb.cmd,0      ; \ i  p0    = Pointer to C-style string
     6F36 0000     
0082                                                  ; | i  p1    = Termination character
0083                                                  ; / o  waux1 = Length of string
0084 6F38 C820  50         mov   @waux1,@outparm1     ; Save length of string
     6F3A 833C     
     6F3C A016     
0085                       ;------------------------------------------------------
0086                       ; Exit
0087                       ;------------------------------------------------------
0088               cmdb.cmd.getlength.exit:
0089 6F3E C2F9  30         mov   *stack+,r11           ; Pop r11
0090 6F40 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0100                       copy  "cmdb.cmd.set.asm"    ; Set command line to preset value
     **** ****     > cmdb.cmd.set.asm
0001               * FILE......: cmdb.cmd.set.asm
0002               * Purpose...: Set command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.set
0006               * Set current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to string with command
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.set:
0022 6F42 0649  14         dect  stack
0023 6F44 C64B  30         mov   r11,*stack            ; Save return address
0024 6F46 0649  14         dect  stack
0025 6F48 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6F4A 0649  14         dect  stack
0027 6F4C C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6F4E 0649  14         dect  stack
0029 6F50 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6F52 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6F54 A72C     
0034 6F56 06A0  32         bl    @film                 ; Clear command
     6F58 2202     
0035 6F5A A72D                   data  cmdb.cmd,>00,80
     6F5C 0000     
     6F5E 0050     
0036                       ;------------------------------------------------------
0037                       ; Get string length
0038                       ;------------------------------------------------------
0039 6F60 C120  34         mov   @parm1,tmp0
     6F62 A006     
0040 6F64 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte
0041 6F66 0986  32         srl   tmp2,8                ; Right align
0042 6F68 1501  14         jgt   !
0043                       ;------------------------------------------------------
0044                       ; Assert: invalid length, we just exit here
0045                       ;------------------------------------------------------
0046 6F6A 100B  14         jmp   cmdb.cmd.set.exit     ; No harm done
0047                       ;------------------------------------------------------
0048                       ; Copy string to command
0049                       ;------------------------------------------------------
0050 6F6C 0205  20 !       li   tmp1,cmdb.cmd          ; Destination
     6F6E A72D     
0051 6F70 06A0  32         bl   @xpym2m                ; Copy string
     6F72 24AC     
0052                       ;------------------------------------------------------
0053                       ; Put cursor at beginning of line
0054                       ;------------------------------------------------------
0055 6F74 C120  34         mov   @cmdb.yxprompt,tmp0
     6F76 A710     
0056 6F78 0584  14         inc   tmp0
0057 6F7A C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6F7C A70A     
0058               
0059 6F7E 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6F80 A718     
0060                       ;------------------------------------------------------
0061                       ; Exit
0062                       ;------------------------------------------------------
0063               cmdb.cmd.set.exit:
0064 6F82 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0065 6F84 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 6F86 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 6F88 C2F9  30         mov   *stack+,r11           ; Pop r11
0068 6F8A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0101                       copy  "cmdb.cmd.preset.asm" ; Preset shortcuts in dialogs
     **** ****     > cmdb.cmd.preset.asm
0001               * FILE......: cmdb.cmd.preset.asm
0002               * Purpose...: Set command to preset based on dialog and shortcut pressed
0003               
0004               ***************************************************************
0005               * cmdb.cmd.preset
0006               * Set command to preset based on dialog and shortcut pressed
0007               ***************************************************************
0008               * bl   @cmdb.cmd.preset
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @waux1       = Key pressed
0012               * @cmdb.dialog = ID of current dialog
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0, tmp1, tmp2
0016               ********|*****|*********************|**************************
0017               cmdb.cmd.preset:
0018 6F8C 0649  14         dect  stack
0019 6F8E C64B  30         mov   r11,*stack            ; Save return address
0020 6F90 0649  14         dect  stack
0021 6F92 C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6F94 0649  14         dect  stack
0023 6F96 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6F98 0649  14         dect  stack
0025 6F9A C646  30         mov   tmp2,*stack           ; Push tmp2
0026               
0027 6F9C 0204  20         li    tmp0,cmdb.cmd.preset.data
     6F9E 79CA     
0028                                                   ; Load table
0029 6FA0 C1A0  34         mov   @keycode1,tmp2        ; Get keyboard code
     6FA2 A028     
0030                       ;-------------------------------------------------------
0031                       ; Loop over table with presets
0032                       ;-------------------------------------------------------
0033               cmdb.cmd.preset.loop:
0034 6FA4 8834  46         c     *tmp0+,@cmdb.dialog   ; Dialog matches?
     6FA6 A71A     
0035 6FA8 1607  14         jne   cmdb.cmd.preset.next  ; No, next entry
0036                       ;-------------------------------------------------------
0037                       ; Dialog matches, check if shortcut matches
0038                       ;-------------------------------------------------------
0039 6FAA 81B4  30         c     *tmp0+,tmp2           ; Compare with keyboard shortcut
0040 6FAC 1606  14         jne   !                     ; No match, next entry
0041                       ;-------------------------------------------------------
0042                       ; Entry in table matches, set preset
0043                       ;-------------------------------------------------------
0044 6FAE C814  46         mov   *tmp0,@parm1          ; Get pointer to string
     6FB0 A006     
0045               
0046 6FB2 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6FB4 6F42     
0047                                                   ; \ i  @parm1 = Pointer to string w. preset
0048                                                   ; /
0049               
0050 6FB6 1006  14         jmp   cmdb.cmd.preset.exit  ; Exit
0051                       ;-------------------------------------------------------
0052                       ; Dialog does not match, prepare for next entry
0053                       ;-------------------------------------------------------
0054               cmdb.cmd.preset.next:
0055 6FB8 05C4  14         inct  tmp0                  ; Skip shortcut
0056 6FBA 05C4  14 !       inct  tmp0                  ; Skip pointer to string
0057                       ;-------------------------------------------------------
0058                       ; End of list reached?
0059                       ;-------------------------------------------------------
0060 6FBC C154  26         mov   *tmp0,tmp1            ; Get entry
0061 6FBE 0285  22         ci    tmp1,EOL              ; EOL identifier found?
     6FC0 FFFF     
0062 6FC2 16F0  14         jne   cmdb.cmd.preset.loop  ; Not yet, next entry
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               cmdb.cmd.preset.exit:
0067 6FC4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0068 6FC6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 6FC8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6FCA C2F9  30         mov   *stack+,r11           ; Pop r11
0071 6FCC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0102                       ;-----------------------------------------------------------------------
0103                       ; Dialog toggles
0104                       ;-----------------------------------------------------------------------
0105                       copy  "fm.fastmode.asm"     ; Toggle fastmode on/off for file operation
     **** ****     > fm.fastmode.asm
0001               * FILE......: fm.fastmode.asm
0002               * Purpose...: Turn fastmode on/off for file operation
0003               
0004               ***************************************************************
0005               * fm.fastmode
0006               * Turn on fast mode for supported devices
0007               ***************************************************************
0008               * bl  @fm.fastmode
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               ********|*****|*********************|**************************
0019               fm.fastmode:
0020 6FCE 0649  14         dect  stack
0021 6FD0 C64B  30         mov   r11,*stack            ; Save return address
0022 6FD2 0649  14         dect  stack
0023 6FD4 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6FD6 0649  14         dect  stack
0025 6FD8 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6FDA 0649  14         dect  stack
0027 6FDC C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;------------------------------------------------------
0029                       ; Toggle fastmode
0030                       ;------------------------------------------------------
0031 6FDE C160  34         mov   @cmdb.dialog,tmp1     ; Get ID of current dialog
     6FE0 A71A     
0032 6FE2 C120  34         mov   @fh.offsetopcode,tmp0 ; Get file opcode offset
     6FE4 A44E     
0033 6FE6 1322  14         jeq   fm.fastmode.on        ; Toggle on if offset is 0
0034                       ;------------------------------------------------------
0035                       ; Turn fast mode off
0036                       ;------------------------------------------------------
0037               fm.fastmode.off:
0038 6FE8 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     6FEA A44E     
0039               
0040 6FEC 0206  20         li    tmp2,id.dialog.load
     6FEE 000A     
0041 6FF0 8185  18         c     tmp1,tmp2
0042 6FF2 1310  14         jeq   fm.fastmode.off.1
0043               
0044 6FF4 0206  20         li    tmp2,id.dialog.insert
     6FF6 000D     
0045 6FF8 8185  18         c     tmp1,tmp2
0046 6FFA 130F  14         jeq   fm.fastmode.off.2
0047               
0048 6FFC 0206  20         li    tmp2,id.dialog.clipboard
     6FFE 0067     
0049 7000 8185  18         c     tmp1,tmp2
0050 7002 130E  14         jeq   fm.fastmode.off.3
0051               
0052 7004 0206  20         li    tmp2,id.dialog.append
     7006 000E     
0053 7008 8185  18         c     tmp1,tmp2
0054 700A 130D  14         jeq   fm.fastmode.off.4
0055                       ;------------------------------------------------------
0056                       ; Assert
0057                       ;------------------------------------------------------
0058 700C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     700E FFCE     
0059 7010 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7012 2026     
0060                       ;------------------------------------------------------
0061                       ; Keylist fastmode off
0062                       ;------------------------------------------------------
0063               fm.fastmode.off.1:
0064 7014 0204  20         li    tmp0,txt.keys.load
     7016 72A4     
0065 7018 102C  14         jmp   fm.fastmode.keylist
0066               fm.fastmode.off.2:
0067 701A 0204  20         li    tmp0,txt.keys.insert
     701C 72A4     
0068 701E 1029  14         jmp   fm.fastmode.keylist
0069               fm.fastmode.off.3:
0070 7020 0204  20         li    tmp0,txt.keys.clipboard
     7022 7465     
0071 7024 1026  14         jmp   fm.fastmode.keylist
0072               fm.fastmode.off.4:
0073 7026 0204  20         li    tmp0,txt.keys.append
     7028 72A4     
0074 702A 1023  14         jmp   fm.fastmode.keylist
0075                       ;------------------------------------------------------
0076                       ; Turn fast mode on
0077                       ;------------------------------------------------------
0078               fm.fastmode.on:
0079 702C 0204  20         li    tmp0,>40              ; Data buffer in CPU RAM
     702E 0040     
0080 7030 C804  38         mov   tmp0,@fh.offsetopcode
     7032 A44E     
0081               
0082 7034 0206  20         li    tmp2,id.dialog.load
     7036 000A     
0083 7038 8185  18         c     tmp1,tmp2
0084 703A 1310  14         jeq   fm.fastmode.on.1
0085               
0086 703C 0206  20         li    tmp2,id.dialog.insert
     703E 000D     
0087 7040 8185  18         c     tmp1,tmp2
0088 7042 130F  14         jeq   fm.fastmode.on.2
0089               
0090 7044 0206  20         li    tmp2,id.dialog.clipboard
     7046 0067     
0091 7048 8185  18         c     tmp1,tmp2
0092 704A 130E  14         jeq   fm.fastmode.on.3
0093               
0094 704C 0206  20         li    tmp2,id.dialog.append
     704E 000E     
0095 7050 8185  18         c     tmp1,tmp2
0096 7052 130D  14         jeq   fm.fastmode.on.4
0097                       ;------------------------------------------------------
0098                       ; Assert
0099                       ;------------------------------------------------------
0100 7054 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7056 FFCE     
0101 7058 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     705A 2026     
0102                       ;------------------------------------------------------
0103                       ; Keylist fastmode on
0104                       ;------------------------------------------------------
0105               fm.fastmode.on.1:
0106 705C 0204  20         li    tmp0,txt.keys.load2
     705E 72C4     
0107 7060 1008  14         jmp   fm.fastmode.keylist
0108               fm.fastmode.on.2:
0109 7062 0204  20         li    tmp0,txt.keys.insert2
     7064 72C4     
0110 7066 1005  14         jmp   fm.fastmode.keylist
0111               fm.fastmode.on.3:
0112 7068 0204  20         li    tmp0,txt.keys.clipboard2
     706A 7488     
0113 706C 1002  14         jmp   fm.fastmode.keylist
0114               fm.fastmode.on.4:
0115 706E 0204  20         li    tmp0,txt.keys.append2
     7070 72C4     
0116                       ;------------------------------------------------------
0117                       ; Set keylist
0118                       ;------------------------------------------------------
0119               fm.fastmode.keylist:
0120 7072 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     7074 A728     
0121               *--------------------------------------------------------------
0122               * Exit
0123               *--------------------------------------------------------------
0124               fm.fastmode.exit:
0125 7076 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0126 7078 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0127 707A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0128 707C C2F9  30         mov   *stack+,r11           ; Pop R11
0129 707E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0106                       copy  "tib.dialog.helper.asm"
     **** ****     > tib.dialog.helper.asm
0001               * FILE......: tib.dialog.helper.asm
0002               * Purpose...: TI Basic dialog helper functions
0003               
0004               
0005               
0006               ***************************************************************
0007               * tibasic.am.toggle
0008               * Toggle TI Basic AutoMode
0009               ***************************************************************
0010               * bl   @tibasic.am.toggle
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * none
0014               *
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               tibasic.am.toggle:
0025 7080 0649  14         dect  stack
0026 7082 C64B  30         mov   r11,*stack            ; Save return address
0027 7084 0649  14         dect  stack
0028 7086 C644  30         mov   tmp0,*stack           ; Push tmp0
0029                       ;------------------------------------------------------
0030                       ; Toggle AutoMode display
0031                       ;------------------------------------------------------
0032 7088 0560  34         inv   @tib.automode         ; Toggle 'AutoMode'
     708A A0C0     
0033 708C 1303  14         jeq   tibasic.am.off
0034 708E 0204  20         li    tmp0,txt.keys.basic2
     7090 7846     
0035 7092 1002  14         jmp   !
0036               tibasic.am.off:
0037 7094 0204  20         li    tmp0,txt.keys.basic
     7096 7825     
0038 7098 C804  38 !       mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     709A A728     
0039                       ;------------------------------------------------------
0040                       ; Exit
0041                       ;------------------------------------------------------
0042               tibasic.am.exit:
0043 709C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0044 709E C2F9  30         mov   *stack+,r11           ; Pop r11
0045 70A0 045B  20         b     *r11                  ; Return
0046               
0047               
0048               
0049               
0050               ***************************************************************
0051               * tibasic.buildstr
0052               * Build session picker string for TI Basic dialog
0053               ***************************************************************
0054               * bl   @tibasic.buildstr
0055               *--------------------------------------------------------------
0056               * INPUT
0057               * none
0058               *
0059               * OUTPUT
0060               * none
0061               *--------------------------------------------------------------
0062               * Register usage
0063               * tmp0
0064               *--------------------------------------------------------------
0065               * Remarks
0066               * none
0067               ********|*****|*********************|**************************
0068               tibasic.buildstr:
0069 70A2 0649  14         dect  stack
0070 70A4 C64B  30         mov   r11,*stack            ; Save return address
0071 70A6 0649  14         dect  stack
0072 70A8 C644  30         mov   tmp0,*stack           ; Push tmp0
0073 70AA 0649  14         dect  stack
0074 70AC C645  30         mov   tmp1,*stack           ; Push tmp1
0075 70AE 0649  14         dect  stack
0076 70B0 C646  30         mov   tmp2,*stack           ; Push tmp2
0077 70B2 0649  14         dect  stack
0078 70B4 C647  30         mov   tmp3,*stack           ; Push tmp3
0079 70B6 0649  14         dect  stack
0080 70B8 C648  30         mov   tmp4,*stack           ; Push tmp4
0081                       ;-------------------------------------------------------
0082                       ; Build session selection string
0083                       ;-------------------------------------------------------
0084 70BA 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     70BC A718     
0085               
0086 70BE 06A0  32         bl    @cpym2m
     70C0 24A6     
0087 70C2 77C5                   data txt.info.basic,rambuf+200,30
     70C4 A1C8     
     70C6 001E     
0088                                                   ; Copy string from rom to ram buffer
0089               
0090 70C8 0204  20         li    tmp0,rambuf + 200     ; \
     70CA A1C8     
0091 70CC C804  38         mov   tmp0,@cmdb.paninfo    ; / Set pointer to session selection string
     70CE A720     
0092               
0093 70D0 0204  20         li    tmp0,tib.status1      ; First TI Basic session to check
     70D2 A0B6     
0094 70D4 0206  20         li    tmp2,tib.status5      ; Last TI Basic session to check
     70D6 A0BE     
0095 70D8 0207  20         li    tmp3,rambuf + 212     ; Position in session selection string
     70DA A1D4     
0096 70DC 0208  20         li    tmp4,1                ; Session counter
     70DE 0001     
0097                       ;-------------------------------------------------------
0098                       ; Loop over TI Basic sessions and check if active
0099                       ;-------------------------------------------------------
0100               tibasic.buildstr.loop:
0101 70E0 C174  30         mov   *tmp0+,tmp1           ; Session active?
0102 70E2 130E  14         jeq   tibasic.buildstr.next
0103                                                   ; No, check next session
0104                       ;-------------------------------------------------------
0105                       ; Current session?
0106                       ;-------------------------------------------------------
0107               tibasic.buildstr.current:
0108 70E4 8808  34         c     tmp4,@tib.session     ; Matches current session?
     70E6 A0B4     
0109 70E8 1606  14         jne   tibasic.buildstr.active
0110               
0111 70EA DDE0  48         movb  @tibasic.heart.solid,*tmp3+
     70EC 711A     
0112 70EE D5E0  46         movb  @tibasic.heart.solid+1,*tmp3
     70F0 711B     
0113                                                   ; Set marker
0114 70F2 0607  14         dec   tmp3                  ; Adjustment
0115               
0116 70F4 1005  14         jmp   tibasic.buildstr.next ; Next entry
0117                       ;-------------------------------------------------------
0118                       ; Set Basic session active marker
0119                       ;-------------------------------------------------------
0120               tibasic.buildstr.active:
0121 70F6 DDE0  48         movb  @tibasic.heart.open,*tmp3+
     70F8 711C     
0122 70FA D5E0  46         movb  @tibasic.heart.open+1,*tmp3
     70FC 711D     
0123                                                   ; Set marker
0124 70FE 0607  14         dec   tmp3                  ; Adjustment
0125                       ;-------------------------------------------------------
0126                       ; Next entry
0127                       ;-------------------------------------------------------
0128               tibasic.buildstr.next:
0129 7100 0227  22         ai    tmp3,4                ; Next position
     7102 0004     
0130 7104 8184  18         c     tmp0,tmp2             ; All sessions checked?
0131 7106 1502  14         jgt   tibasic.buildstr.exit ; Yes, exit loop
0132 7108 0588  14         inc   tmp4                  ; Next session
0133 710A 10EA  14         jmp   tibasic.buildstr.loop ; No, next iteration
0134                       ;-------------------------------------------------------
0135                       ; Exit
0136                       ;-------------------------------------------------------
0137               tibasic.buildstr.exit:
0138 710C C239  30         mov   *stack+,tmp4          ; Pop tmp4
0139 710E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0140 7110 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0141 7112 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0142 7114 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0143 7116 C2F9  30         mov   *stack+,r11           ; Pop R11
0144 7118 045B  20         b     *r11                  ; Return to caller
0145               
0146               tibasic.heart.solid:
0147 711A 0203             byte  2,3                   ; ASCII 2-3 (heart solid)
0148               tibasic.heart.open:
0149 711C 1D1E             byte  29,30                 ; ASCII 29-30 (heart open)
0150               
0151               
0152               
0153               ***************************************************************
0154               * tibasic.hearts.tat
0155               * Dump color for hearts in TI Basic session dialog
0156               ***************************************************************
0157               * bl   @tibasic.hearts.tat
0158               *--------------------------------------------------------------
0159               * INPUT
0160               * none
0161               *
0162               * OUTPUT
0163               * none
0164               *--------------------------------------------------------------
0165               * Register usage
0166               * tmp0
0167               *--------------------------------------------------------------
0168               * Remarks
0169               * none
0170               ********|*****|*********************|**************************
0171               tibasic.hearts.tat:
0172 711E 0649  14         dect  stack
0173 7120 C64B  30         mov   r11,*stack            ; Save return address
0174 7122 0649  14         dect  stack
0175 7124 C644  30         mov   tmp0,*stack           ; Push tmp0
0176 7126 0649  14         dect  stack
0177 7128 C645  30         mov   tmp1,*stack           ; Push tmp1
0178 712A 0649  14         dect  stack
0179 712C C646  30         mov   tmp2,*stack           ; Push tmp2
0180 712E 0649  14         dect  stack
0181 7130 C647  30         mov   tmp3,*stack           ; Push tmp3
0182 7132 0649  14         dect  stack
0183 7134 C648  30         mov   tmp4,*stack           ; Push tmp4
0184                       ;-------------------------------------------------------
0185                       ; Get background color for hearts in TAT
0186                       ;-------------------------------------------------------
0187 7136 06A0  32         bl    @vgetb                ; Read VDP byte
     7138 22AE     
0188 713A 202B                   data vdp.cmdb.toprow.tat + 91
0189                                                   ; 2nd row in CMDB, column 11
0190               
0191 713C C144  18         mov   tmp0,tmp1             ; Save color combination
0192 713E 0245  22         andi  tmp1,>000f            ; Only keep background
     7140 000F     
0193 7142 0265  22         ori   tmp1,>0060            ; Set foreground color to red
     7144 0060     
0194               
0195 7146 0204  20         li    tmp0,vdp.cmdb.toprow.tat+91
     7148 202B     
0196                                                   ; 2nd row in CMDB, column 11
0197               
0198 714A C204  18         mov   tmp0,tmp4             ; Backup TAT position
0199 714C C1C5  18         mov   tmp1,tmp3             ; Backup color combination
0200                       ;-------------------------------------------------------
0201                       ; Dump colors for 5 hearts if in TI Basic dialog (TAT)
0202                       ;-------------------------------------------------------
0203               tibasic.hearts.tat.loop:
0204 714E C108  18         mov   tmp4,tmp0             ; Get VDP address in TAT
0205 7150 C147  18         mov   tmp3,tmp1             ; Get VDP byte to write
0206 7152 0206  20         li    tmp2,2                ; Number of bytes to fill
     7154 0002     
0207               
0208 7156 06A0  32         bl    @xfilv                ; Fill colors
     7158 2260     
0209                                                   ; i \  tmp0 = start address
0210                                                   ; i |  tmp1 = byte to fill
0211                                                   ; i /  tmp2 = number of bytes to fill
0212               
0213 715A 0228  22         ai    tmp4,4                ; Next heart in TAT
     715C 0004     
0214               
0215 715E 0205  20         li    tmp1,vdp.cmdb.toprow.tat+110
     7160 203E     
0216 7162 8148  18         c     tmp4,tmp1
0217 7164 12F4  14         jle   tibasic.hearts.tat.loop
0218                       ;-------------------------------------------------------
0219                       ; Exit
0220                       ;-------------------------------------------------------
0221               tibasic.hearts.tat.exit:
0222 7166 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0223 7168 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0224 716A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0225 716C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0226 716E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0227 7170 C2F9  30         mov   *stack+,r11           ; Pop R11
0228 7172 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0107                                                   ; Helper functions for TI Basic dialog
0108                       ;-----------------------------------------------------------------------
0109                       ; Stubs
0110                       ;-----------------------------------------------------------------------
0111                       copy  "rom.stubs.bank3.asm" ; Bank specific stubs
     **** ****     > rom.stubs.bank3.asm
0001               * FILE......: rom.stubs.bank3.asm
0002               * Purpose...: Bank 3 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.pack"
0007               * bank1 vec.10
0008               ********|*****|*********************|**************************
0009               edb.line.pack:
0010 7174 0649  14         dect  stack
0011 7176 C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 7178 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     717A 2F56     
0016 717C 6002                   data bank1.rom        ; | i  p0 = bank address
0017 717E 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0018 7180 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 7182 C2F9  30         mov   *stack+,r11           ; Pop r11
0023 7184 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "edkey.action.cmdb.show"
0028               * bank1 vec.15
0029               ********|*****|*********************|**************************
0030               edkey.action.cmdb.show:
0031 7186 0649  14         dect  stack
0032 7188 C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 718A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     718C 2F56     
0037 718E 6002                   data bank1.rom        ; | i  p0 = bank address
0038 7190 7FDC                   data vec.15           ; | i  p1 = Vector with target address
0039 7192 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 7194 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 7196 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "fb.refresh"
0049               * bank1 vec.20
0050               ********|*****|*********************|**************************
0051               fb.refresh:
0052 7198 0649  14         dect  stack
0053 719A C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 719C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     719E 2F56     
0058 71A0 6002                   data bank1.rom        ; | i  p0 = bank address
0059 71A2 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0060 71A4 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 71A6 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 71A8 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.errline.hide"
0070               * bank1 vec.27
0071               ********|*****|*********************|**************************
0072               pane.errline.hide:
0073 71AA 0649  14         dect  stack
0074 71AC C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 1
0077                       ;------------------------------------------------------
0078 71AE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71B0 2F56     
0079 71B2 6002                   data bank1.rom        ; | i  p0 = bank address
0080 71B4 7FF4                   data vec.27           ; | i  p1 = Vector with target address
0081 71B6 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 71B8 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 71BA 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               
0090               ***************************************************************
0091               * Stub for "pane.cursor.blink"
0092               * bank1 vec.28
0093               ********|*****|*********************|**************************
0094               pane.cursor.blink:
0095 71BC 0649  14         dect  stack
0096 71BE C64B  30         mov   r11,*stack            ; Save return address
0097                       ;------------------------------------------------------
0098                       ; Call function in bank 1
0099                       ;------------------------------------------------------
0100 71C0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71C2 2F56     
0101 71C4 6002                   data bank1.rom        ; | i  p0 = bank address
0102 71C6 7FF6                   data vec.28           ; | i  p1 = Vector with target address
0103 71C8 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107 71CA C2F9  30         mov   *stack+,r11           ; Pop r11
0108 71CC 045B  20         b     *r11                  ; Return to caller
0109               
0110               
0111               ***************************************************************
0112               * Stub for "pane.cursor.hide"
0113               * bank1 vec.29
0114               ********|*****|*********************|**************************
0115               pane.cursor.hide:
0116 71CE 0649  14         dect  stack
0117 71D0 C64B  30         mov   r11,*stack            ; Save return address
0118                       ;------------------------------------------------------
0119                       ; Call function in bank 1
0120                       ;------------------------------------------------------
0121 71D2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71D4 2F56     
0122 71D6 6002                   data bank1.rom        ; | i  p0 = bank address
0123 71D8 7FF8                   data vec.29           ; | i  p1 = Vector with target address
0124 71DA 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0125                       ;------------------------------------------------------
0126                       ; Exit
0127                       ;------------------------------------------------------
0128 71DC C2F9  30         mov   *stack+,r11           ; Pop r11
0129 71DE 045B  20         b     *r11                  ; Return to caller
0130               
0131               
0132               ***************************************************************
0133               * Stub for "pane.errline.show"
0134               * bank1 vec.30
0135               ********|*****|*********************|**************************
0136               pane.errline.show:
0137 71E0 0649  14         dect  stack
0138 71E2 C64B  30         mov   r11,*stack            ; Save return address
0139                       ;------------------------------------------------------
0140                       ; Call function in bank 1
0141                       ;------------------------------------------------------
0142 71E4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71E6 2F56     
0143 71E8 6002                   data bank1.rom        ; | i  p0 = bank address
0144 71EA 7FFA                   data vec.30           ; | i  p1 = Vector with target address
0145 71EC 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149 71EE C2F9  30         mov   *stack+,r11           ; Pop r11
0150 71F0 045B  20         b     *r11                  ; Return to caller
0151               
0152               
0153               ***************************************************************
0154               * Stub for "pane.action.colorscheme.load"
0155               * bank1 vec.31
0156               ********|*****|*********************|**************************
0157               pane.action.colorscheme.load:
0158 71F2 0649  14         dect  stack
0159 71F4 C64B  30         mov   r11,*stack            ; Save return address
0160                       ;------------------------------------------------------
0161                       ; Call function in bank 1
0162                       ;------------------------------------------------------
0163 71F6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     71F8 2F56     
0164 71FA 6002                   data bank1.rom        ; | i  p0 = bank address
0165 71FC 7FFC                   data vec.31           ; | i  p1 = Vector with target address
0166 71FE 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0167                       ;------------------------------------------------------
0168                       ; Exit
0169                       ;------------------------------------------------------
0170 7200 C2F9  30         mov   *stack+,r11           ; Pop r11
0171 7202 045B  20         b     *r11                  ; Return to caller
0172               
0173               
0174               ***************************************************************
0175               * Stub for "fb.scan.fname"
0176               * bank4 vec.5
0177               ********|*****|*********************|**************************
0178               fb.scan.fname:
0179 7204 0649  14         dect  stack
0180 7206 C64B  30         mov   r11,*stack            ; Save return address
0181                       ;------------------------------------------------------
0182                       ; Call function in bank 4
0183                       ;------------------------------------------------------
0184 7208 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     720A 2F56     
0185 720C 6008                   data bank4.rom        ; | i  p0 = bank address
0186 720E 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0187 7210 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0188                       ;------------------------------------------------------
0189                       ; Exit
0190                       ;------------------------------------------------------
0191 7212 C2F9  30         mov   *stack+,r11           ; Pop r11
0192 7214 045B  20         b     *r11                  ; Return to caller
0193               
0194               
0195               ***************************************************************
0196               
0197               ; TODO Include _trampoline.bank1.ret
0198               ; TODO Refactor stubs for using _trampoline.bank1.ret
                   < stevie_b3.asm
0112                       copy  "rom.stubs.bankx.asm" ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * bank1 vec.1
0009               ********|*****|*********************|**************************
0010               mem.sams.setup.stevie:
0011 7216 0649  14         dect  stack
0012 7218 C64B  30         mov   r11,*stack            ; Save return address
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 1
0015                       ;------------------------------------------------------
0016 721A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     721C 2F56     
0017 721E 6002                   data bank1.rom        ; | i  p0 = bank address
0018 7220 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 7222 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Exit
0022                       ;------------------------------------------------------
0023 7224 C2F9  30         mov   *stack+,r11           ; Pop r11
0024 7226 045B  20         b     *r11                  ; Return to caller
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 7228 0649  14         dect  stack
0035 722A C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 722C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     722E 2F56     
0040 7230 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7232 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 7234 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7236 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7238 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 723A 0649  14         dect  stack
0058 723C C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 723E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7240 2F56     
0063 7242 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7244 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7246 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7248 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 724A 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 724C 0649  14         dect  stack
0081 724E C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7250 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7252 2F56     
0086 7254 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7256 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7258 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 725A C2F9  30         mov   *stack+,r11           ; Pop r11
0093 725C 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 725E 0649  14         dect  stack
0104 7260 C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7262 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7264 2F56     
0109 7266 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7268 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 726A 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 726C C2F9  30         mov   *stack+,r11           ; Pop r11
0116 726E 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 7270 0649  14         dect  stack
0127 7272 C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7274 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7276 2F56     
0132 7278 600E                   data bank7.rom        ; | i  p0 = bank address
0133 727A 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 727C 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 727E C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7280 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 7282 0649  14         dect  stack
0150 7284 C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7286 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7288 2F56     
0155 728A 600E                   data bank7.rom        ; | i  p0 = bank address
0156 728C 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 728E 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7290 C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7292 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0113                       ;-----------------------------------------------------------------------
0114                       ; Program data
0115                       ;-----------------------------------------------------------------------
0116                       copy  "data.dialogs.asm"        ; Strings used in bank 3
     **** ****     > data.dialogs.asm
0001               * FILE......: data.strings.bank3.asm
0002               * Purpose...: Strings used in Stevie bank 3
0003               
0004               
0005               ***************************************************************
0006               *                       Strings
0007               ***************************************************************
0008               
0009               txt.stevie:
0011 7294 2053                 text ' Stevie 1.3J-30'
     7296 7465     
     7298 7669     
     729A 6520     
     729C 312E     
     729E 334A     
     72A0 2D33     
     72A2 30       
0012                           even
0017               
0018 72A4 1E46     txt.keys.default1  stri 'F9-Back  F3-Clear  F5-Fastmode'
     72A6 392D     
     72A8 4261     
     72AA 636B     
     72AC 2020     
     72AE 4633     
     72B0 2D43     
     72B2 6C65     
     72B4 6172     
     72B6 2020     
     72B8 4635     
     72BA 2D46     
     72BC 6173     
     72BE 746D     
     72C0 6F64     
     72C2 65       
0019                                  even
0020 72C4 1F46     txt.keys.default2  stri 'F9-Back  F3-Clear  *F5-Fastmode'
     72C6 392D     
     72C8 4261     
     72CA 636B     
     72CC 2020     
     72CE 4633     
     72D0 2D43     
     72D2 6C65     
     72D4 6172     
     72D6 2020     
     72D8 2A46     
     72DA 352D     
     72DC 4661     
     72DE 7374     
     72E0 6D6F     
     72E2 6465     
0021                                  even
0022               
0023               ;--------------------------------------------------------------
0024               ; Dialog "Load file"
0025               ;--------------------------------------------------------------
0026 72E4 0E01     txt.head.load      byte 14,1,1
     72E6 01       
0027 72E7   20                        text ' Open file '
     72E8 4F70     
     72EA 656E     
     72EC 2066     
     72EE 696C     
     72F0 6520     
0028 72F2 01                          byte 1
0029 72F3   1F     txt.hint.load      stri 'Enter filename of file to open.'
     72F4 456E     
     72F6 7465     
     72F8 7220     
     72FA 6669     
     72FC 6C65     
     72FE 6E61     
     7300 6D65     
     7302 206F     
     7304 6620     
     7306 6669     
     7308 6C65     
     730A 2074     
     730C 6F20     
     730E 6F70     
     7310 656E     
     7312 2E       
0030               
0031      72A4     txt.keys.load      equ txt.keys.default1
0032      72C4     txt.keys.load2     equ txt.keys.default2
0033               
0034               ;--------------------------------------------------------------
0035               ; Dialog "Save file"
0036               ;--------------------------------------------------------------
0037 7313   0E     txt.head.save      byte 14,1,1
     7314 0101     
0038 7316 2053                        text ' Save file '
     7318 6176     
     731A 6520     
     731C 6669     
     731E 6C65     
     7320 20       
0039 7321   01                        byte 1
0040 7322 1601     txt.head.save2     byte 22,1,1
     7324 01       
0041 7325   20                        text ' Save block to file '
     7326 5361     
     7328 7665     
     732A 2062     
     732C 6C6F     
     732E 636B     
     7330 2074     
     7332 6F20     
     7334 6669     
     7336 6C65     
     7338 20       
0042 7339   01                        byte 1
0043 733A 1F45     txt.hint.save      stri 'Enter filename of file to save.'
     733C 6E74     
     733E 6572     
     7340 2066     
     7342 696C     
     7344 656E     
     7346 616D     
     7348 6520     
     734A 6F66     
     734C 2066     
     734E 696C     
     7350 6520     
     7352 746F     
     7354 2073     
     7356 6176     
     7358 652E     
0044 735A 1146     txt.keys.save      stri 'F9-Back  F3-Clear'
     735C 392D     
     735E 4261     
     7360 636B     
     7362 2020     
     7364 4633     
     7366 2D43     
     7368 6C65     
     736A 6172     
0045               
0046               
0047               ;--------------------------------------------------------------
0048               ; Dialog "Append file"
0049               ;--------------------------------------------------------------
0050 736C 1001     txt.head.append    byte 16,1,1
     736E 01       
0051 736F   20                        text ' Append file '
     7370 4170     
     7372 7065     
     7374 6E64     
     7376 2066     
     7378 696C     
     737A 6520     
0052 737C 01                          byte 1
0053 737D   38     txt.hint.append    stri 'Enter filename of file to append at end of current file.'
     737E 456E     
     7380 7465     
     7382 7220     
     7384 6669     
     7386 6C65     
     7388 6E61     
     738A 6D65     
     738C 206F     
     738E 6620     
     7390 6669     
     7392 6C65     
     7394 2074     
     7396 6F20     
     7398 6170     
     739A 7065     
     739C 6E64     
     739E 2061     
     73A0 7420     
     73A2 656E     
     73A4 6420     
     73A6 6F66     
     73A8 2063     
     73AA 7572     
     73AC 7265     
     73AE 6E74     
     73B0 2066     
     73B2 696C     
     73B4 652E     
0054               
0055      72A4     txt.keys.append    equ txt.keys.default1
0056      72C4     txt.keys.append2   equ txt.keys.default2
0057               
0058               
0059               ;--------------------------------------------------------------
0060               ; Dialog "Insert file"
0061               ;--------------------------------------------------------------
0062 73B6 1801     txt.head.insert    byte 24,1,1
     73B8 01       
0063 73B9   20                        text ' Insert file at line '
     73BA 496E     
     73BC 7365     
     73BE 7274     
     73C0 2066     
     73C2 696C     
     73C4 6520     
     73C6 6174     
     73C8 206C     
     73CA 696E     
     73CC 6520     
0064 73CE 01                          byte 1
0065 73CF   31     txt.hint.insert    stri 'Enter filename of file to insert at current line.'
     73D0 456E     
     73D2 7465     
     73D4 7220     
     73D6 6669     
     73D8 6C65     
     73DA 6E61     
     73DC 6D65     
     73DE 206F     
     73E0 6620     
     73E2 6669     
     73E4 6C65     
     73E6 2074     
     73E8 6F20     
     73EA 696E     
     73EC 7365     
     73EE 7274     
     73F0 2061     
     73F2 7420     
     73F4 6375     
     73F6 7272     
     73F8 656E     
     73FA 7420     
     73FC 6C69     
     73FE 6E65     
     7400 2E       
0066               
0067      72A4     txt.keys.insert    equ txt.keys.default1
0068      72C4     txt.keys.insert2   equ txt.keys.default2
0069               
0070               
0071               ;--------------------------------------------------------------
0072               ; Dialog "Copy clipboard"
0073               ;--------------------------------------------------------------
0074 7401   1B     txt.head.clipboard byte 27,1,1
     7402 0101     
0075 7404 2043                        text ' Copy clipboard to line '
     7406 6F70     
     7408 7920     
     740A 636C     
     740C 6970     
     740E 626F     
     7410 6172     
     7412 6420     
     7414 746F     
     7416 206C     
     7418 696E     
     741A 6520     
0076 741C 01                          byte 1
0077 741D   10     txt.info.clipboard stri 'Clipboard [1-5]?'
     741E 436C     
     7420 6970     
     7422 626F     
     7424 6172     
     7426 6420     
     7428 5B31     
     742A 2D35     
     742C 5D3F     
0078 742E 3650     txt.hint.clipboard stri 'Press 1 to 5 to copy clipboard, press F7 to configure.'
     7430 7265     
     7432 7373     
     7434 2031     
     7436 2074     
     7438 6F20     
     743A 3520     
     743C 746F     
     743E 2063     
     7440 6F70     
     7442 7920     
     7444 636C     
     7446 6970     
     7448 626F     
     744A 6172     
     744C 642C     
     744E 2070     
     7450 7265     
     7452 7373     
     7454 2046     
     7456 3720     
     7458 746F     
     745A 2063     
     745C 6F6E     
     745E 6669     
     7460 6775     
     7462 7265     
     7464 2E       
0079               
0080 7465   22     txt.keys.clipboard  stri 'F9-Back  F5-Fastmode  F7-Configure'
     7466 4639     
     7468 2D42     
     746A 6163     
     746C 6B20     
     746E 2046     
     7470 352D     
     7472 4661     
     7474 7374     
     7476 6D6F     
     7478 6465     
     747A 2020     
     747C 4637     
     747E 2D43     
     7480 6F6E     
     7482 6669     
     7484 6775     
     7486 7265     
0081 7488 2346     txt.keys.clipboard2 stri 'F9-Back  *F5-Fastmode  F7-Configure'
     748A 392D     
     748C 4261     
     748E 636B     
     7490 2020     
     7492 2A46     
     7494 352D     
     7496 4661     
     7498 7374     
     749A 6D6F     
     749C 6465     
     749E 2020     
     74A0 4637     
     74A2 2D43     
     74A4 6F6E     
     74A6 6669     
     74A8 6775     
     74AA 7265     
0082               
0083               
0084               ;--------------------------------------------------------------
0085               ; Dialog "Print file"
0086               ;--------------------------------------------------------------
0087 74AC 0F01     txt.head.print     byte 15,1,1
     74AE 01       
0088 74AF   20                        text ' Print file '
     74B0 5072     
     74B2 696E     
     74B4 7420     
     74B6 6669     
     74B8 6C65     
     74BA 20       
0089 74BB   01                        byte 1
0090 74BC 1001     txt.head.print2    byte 16,1,1
     74BE 01       
0091 74BF   20                        text ' Print block '
     74C0 5072     
     74C2 696E     
     74C4 7420     
     74C6 626C     
     74C8 6F63     
     74CA 6B20     
0092 74CC 01                          byte 1
0093 74CD   2C     txt.hint.print     stri 'Enter printer device name (PIO, PI.PIO, ...)'
     74CE 456E     
     74D0 7465     
     74D2 7220     
     74D4 7072     
     74D6 696E     
     74D8 7465     
     74DA 7220     
     74DC 6465     
     74DE 7669     
     74E0 6365     
     74E2 206E     
     74E4 616D     
     74E6 6520     
     74E8 2850     
     74EA 494F     
     74EC 2C20     
     74EE 5049     
     74F0 2E50     
     74F2 494F     
     74F4 2C20     
     74F6 2E2E     
     74F8 2E29     
0094 74FA 1146     txt.keys.print     stri 'F9-Back  F3-Clear'
     74FC 392D     
     74FE 4261     
     7500 636B     
     7502 2020     
     7504 4633     
     7506 2D43     
     7508 6C65     
     750A 6172     
0095               
0096               ;--------------------------------------------------------------
0097               ; Dialog "Unsaved changes"
0098               ;--------------------------------------------------------------
0099 750C 1401     txt.head.unsaved   byte 20,1,1
     750E 01       
0100 750F   20                        text ' Unsaved changes '
     7510 556E     
     7512 7361     
     7514 7665     
     7516 6420     
     7518 6368     
     751A 616E     
     751C 6765     
     751E 7320     
0101 7520 01                          byte 1
0102 7521   21     txt.info.unsaved   stri 'Warning! Unsaved changes in file.'
     7522 5761     
     7524 726E     
     7526 696E     
     7528 6721     
     752A 2055     
     752C 6E73     
     752E 6176     
     7530 6564     
     7532 2063     
     7534 6861     
     7536 6E67     
     7538 6573     
     753A 2069     
     753C 6E20     
     753E 6669     
     7540 6C65     
     7542 2E       
0103 7543   37     txt.hint.unsaved   stri 'Press F6 or SPACE to proceed. Press ENTER to save file.'
     7544 5072     
     7546 6573     
     7548 7320     
     754A 4636     
     754C 206F     
     754E 7220     
     7550 5350     
     7552 4143     
     7554 4520     
     7556 746F     
     7558 2070     
     755A 726F     
     755C 6365     
     755E 6564     
     7560 2E20     
     7562 5072     
     7564 6573     
     7566 7320     
     7568 454E     
     756A 5445     
     756C 5220     
     756E 746F     
     7570 2073     
     7572 6176     
     7574 6520     
     7576 6669     
     7578 6C65     
     757A 2E       
0104 757B   25     txt.keys.unsaved   stri 'F9-Back  F6/SPACE-Proceed  ENTER-Save'
     757C 4639     
     757E 2D42     
     7580 6163     
     7582 6B20     
     7584 2046     
     7586 362F     
     7588 5350     
     758A 4143     
     758C 452D     
     758E 5072     
     7590 6F63     
     7592 6565     
     7594 6420     
     7596 2045     
     7598 4E54     
     759A 4552     
     759C 2D53     
     759E 6176     
     75A0 65       
0105               
0106               ;--------------------------------------------------------------
0107               ; Dialog "Help"
0108               ;--------------------------------------------------------------
0109 75A1   09     txt.head.about     byte 9,1,1
     75A2 0101     
0110 75A4 2048                        text ' Help '
     75A6 656C     
     75A8 7020     
0111 75AA 01                          byte 1
0112               
0113 75AB   01     txt.info.about     stri ''
     75AC 00       
0114 75AD   4D     txt.hint.about2    stri 'Licensed under GPLv3 or later. This program comes with ABSOLUTELY NO WARRANTY'
     75AE 4C69     
     75B0 6365     
     75B2 6E73     
     75B4 6564     
     75B6 2075     
     75B8 6E64     
     75BA 6572     
     75BC 2047     
     75BE 504C     
     75C0 7633     
     75C2 206F     
     75C4 7220     
     75C6 6C61     
     75C8 7465     
     75CA 722E     
     75CC 2054     
     75CE 6869     
     75D0 7320     
     75D2 7072     
     75D4 6F67     
     75D6 7261     
     75D8 6D20     
     75DA 636F     
     75DC 6D65     
     75DE 7320     
     75E0 7769     
     75E2 7468     
     75E4 2041     
     75E6 4253     
     75E8 4F4C     
     75EA 5554     
     75EC 454C     
     75EE 5920     
     75F0 4E4F     
     75F2 2057     
     75F4 4152     
     75F6 5241     
     75F8 4E54     
     75FA 59       
0115 75FB   4F     txt.hint.about     stri 'This is free software, you are welcome to redistribute under certain conditions'
     75FC 5468     
     75FE 6973     
     7600 2069     
     7602 7320     
     7604 6672     
     7606 6565     
     7608 2073     
     760A 6F66     
     760C 7477     
     760E 6172     
     7610 652C     
     7612 2079     
     7614 6F75     
     7616 2061     
     7618 7265     
     761A 2077     
     761C 656C     
     761E 636F     
     7620 6D65     
     7622 2074     
     7624 6F20     
     7626 7265     
     7628 6469     
     762A 7374     
     762C 7269     
     762E 6275     
     7630 7465     
     7632 2075     
     7634 6E64     
     7636 6572     
     7638 2063     
     763A 6572     
     763C 7461     
     763E 696E     
     7640 2063     
     7642 6F6E     
     7644 6469     
     7646 7469     
     7648 6F6E     
     764A 73       
0116 764B   26     txt.keys.about     stri 'F9-Back   ENTER-Back   SPACE-Next Page'
     764C 4639     
     764E 2D42     
     7650 6163     
     7652 6B20     
     7654 2020     
     7656 454E     
     7658 5445     
     765A 522D     
     765C 4261     
     765E 636B     
     7660 2020     
     7662 2053     
     7664 5041     
     7666 4345     
     7668 2D4E     
     766A 6578     
     766C 7420     
     766E 5061     
     7670 6765     
0117               
0118 7672 49       txt.about.build    byte 73
0119 7673   42                        text 'Build: '
     7674 7569     
     7676 6C64     
     7678 3A20     
0120                                  copy "buildstr.asm"
     **** ****     > buildstr.asm
0001 767A 3232                        text '220726-1553430'
     767C 3037     
     767E 3236     
     7680 2D31     
     7682 3535     
     7684 3334     
     7686 3330     
                   < data.dialogs.asm
0121 7688 202F                        text ' / Stevie  Copyright (C) 2018-2022  Filip Van Vooren'
     768A 2053     
     768C 7465     
     768E 7669     
     7690 6520     
     7692 2043     
     7694 6F70     
     7696 7972     
     7698 6967     
     769A 6874     
     769C 2028     
     769E 4329     
     76A0 2032     
     76A2 3031     
     76A4 382D     
     76A6 3230     
     76A8 3232     
     76AA 2020     
     76AC 4669     
     76AE 6C69     
     76B0 7020     
     76B2 5661     
     76B4 6E20     
     76B6 566F     
     76B8 6F72     
     76BA 656E     
0122                                  even
0123               
0124               ;--------------------------------------------------------------
0125               ; Dialog "Main Menu"
0126               ;--------------------------------------------------------------
0127 76BC 0E01     txt.head.menu      byte 14,1,1
     76BE 01       
0128 76BF   20                        text ' Main Menu '
     76C0 4D61     
     76C2 696E     
     76C4 204D     
     76C6 656E     
     76C8 7520     
0129 76CA 01                          byte 1
0130               
0131 76CB   36     txt.info.menu      stri 'File   Cartridge   Configure   Shortcuts   Help   Quit'
     76CC 4669     
     76CE 6C65     
     76D0 2020     
     76D2 2043     
     76D4 6172     
     76D6 7472     
     76D8 6964     
     76DA 6765     
     76DC 2020     
     76DE 2043     
     76E0 6F6E     
     76E2 6669     
     76E4 6775     
     76E6 7265     
     76E8 2020     
     76EA 2053     
     76EC 686F     
     76EE 7274     
     76F0 6375     
     76F2 7473     
     76F4 2020     
     76F6 2048     
     76F8 656C     
     76FA 7020     
     76FC 2020     
     76FE 5175     
     7700 6974     
0132 7702 0007     pos.info.menu      byte 0,7,20,31,43,50,>ff
     7704 141F     
     7706 2B32     
     7708 FF       
0133 7709   01     txt.hint.menu      stri ''
     770A 00       
0134 770B   13     txt.keys.menu      stri 'F9-Back  ENTER-Back'
     770C 4639     
     770E 2D42     
     7710 6163     
     7712 6B20     
     7714 2045     
     7716 4E54     
     7718 4552     
     771A 2D42     
     771C 6163     
     771E 6B       
0135               
0136               ;--------------------------------------------------------------
0137               ; Dialog "File"
0138               ;--------------------------------------------------------------
0139 771F   09     txt.head.file      byte 9,1,1
     7720 0101     
0140 7722 2046                        text ' File '
     7724 696C     
     7726 6520     
0141 7728 01                          byte 1
0142               
0143 7729   29     txt.info.file      stri 'New   Open   Insert/Append   Save   Print'
     772A 4E65     
     772C 7720     
     772E 2020     
     7730 4F70     
     7732 656E     
     7734 2020     
     7736 2049     
     7738 6E73     
     773A 6572     
     773C 742F     
     773E 4170     
     7740 7065     
     7742 6E64     
     7744 2020     
     7746 2053     
     7748 6176     
     774A 6520     
     774C 2020     
     774E 5072     
     7750 696E     
     7752 74       
0144 7753   00     pos.info.file      byte 0,6,13,20,29,36,>ff
     7754 060D     
     7756 141D     
     7758 24FF     
0145 775A 0120     txt.hint.file      stri ' '
0146 775C 1346     txt.keys.file      stri 'F9-Back  ENTER-Back'
     775E 392D     
     7760 4261     
     7762 636B     
     7764 2020     
     7766 454E     
     7768 5445     
     776A 522D     
     776C 4261     
     776E 636B     
0147               
0148               
0149               ;--------------------------------------------------------------
0150               ; Dialog "Cartridge"
0151               ;--------------------------------------------------------------
0152 7770 0E01     txt.head.cartridge byte 14,1,1
     7772 01       
0153 7773   20                        text ' Cartridge '
     7774 4361     
     7776 7274     
     7778 7269     
     777A 6467     
     777C 6520     
0154 777E 01                          byte 1
0155               
0156 777F   08     txt.info.cartridge stri 'TI Basic'
     7780 5449     
     7782 2042     
     7784 6173     
     7786 6963     
0157 7788 03FF     pos.info.cartridge byte 3,>ff
0158 778A 1853     txt.hint.cartridge stri 'Select cartridge to run.'
     778C 656C     
     778E 6563     
     7790 7420     
     7792 6361     
     7794 7274     
     7796 7269     
     7798 6467     
     779A 6520     
     779C 746F     
     779E 2072     
     77A0 756E     
     77A2 2E       
0159 77A3   13     txt.keys.cartridge stri 'F9-Back  ENTER-Back'
     77A4 4639     
     77A6 2D42     
     77A8 6163     
     77AA 6B20     
     77AC 2045     
     77AE 4E54     
     77B0 4552     
     77B2 2D42     
     77B4 6163     
     77B6 6B       
0160               
0161               
0162               ;--------------------------------------------------------------
0163               ; Dialog "TI Basic"
0164               ;--------------------------------------------------------------
0165 77B7   0D     txt.head.basic     byte 13,1,1
     77B8 0101     
0166 77BA 2054                        text ' TI Basic '
     77BC 4920     
     77BE 4261     
     77C0 7369     
     77C2 6320     
0167 77C4 01                          byte 1
0168               
0169 77C5   1D     txt.info.basic     stri 'Session:  1   2   3   4   5  '
     77C6 5365     
     77C8 7373     
     77CA 696F     
     77CC 6E3A     
     77CE 2020     
     77D0 3120     
     77D2 2020     
     77D4 3220     
     77D6 2020     
     77D8 3320     
     77DA 2020     
     77DC 3420     
     77DE 2020     
     77E0 3520     
     77E2 20       
0170 77E3   0A     pos.info.basic     byte 10,14,18,22,26,>ff
     77E4 0E12     
     77E6 161A     
     77E8 FF       
0171 77E9   3B     txt.hint.basic     stri 'Pick session 1-5. Press F9 in TI Basic to return to Stevie.'
     77EA 5069     
     77EC 636B     
     77EE 2073     
     77F0 6573     
     77F2 7369     
     77F4 6F6E     
     77F6 2031     
     77F8 2D35     
     77FA 2E20     
     77FC 5072     
     77FE 6573     
     7800 7320     
     7802 4639     
     7804 2069     
     7806 6E20     
     7808 5449     
     780A 2042     
     780C 6173     
     780E 6963     
     7810 2074     
     7812 6F20     
     7814 7265     
     7816 7475     
     7818 726E     
     781A 2074     
     781C 6F20     
     781E 5374     
     7820 6576     
     7822 6965     
     7824 2E       
0172 7825   20     txt.keys.basic     stri 'F9-Back  ENTER-Back  F5-AutoMode'
     7826 4639     
     7828 2D42     
     782A 6163     
     782C 6B20     
     782E 2045     
     7830 4E54     
     7832 4552     
     7834 2D42     
     7836 6163     
     7838 6B20     
     783A 2046     
     783C 352D     
     783E 4175     
     7840 746F     
     7842 4D6F     
     7844 6465     
0173 7846 2046     txt.keys.basic2    stri 'F9-Back  ENTER-Back *F5-AutoMode'
     7848 392D     
     784A 4261     
     784C 636B     
     784E 2020     
     7850 454E     
     7852 5445     
     7854 522D     
     7856 4261     
     7858 636B     
     785A 202A     
     785C 4635     
     785E 2D41     
     7860 7574     
     7862 6F4D     
     7864 6F64     
     7866 65       
0174               
0175               
0176               ;--------------------------------------------------------------
0177               ; Dialog "Configure"
0178               ;--------------------------------------------------------------
0179 7867   0E     txt.head.config    byte 14,1,1
     7868 0101     
0180 786A 2043                        text ' Configure '
     786C 6F6E     
     786E 6669     
     7870 6775     
     7872 7265     
     7874 20       
0181 7875   01                        byte 1
0182               
0183 7876 0943     txt.info.config    stri 'Clipboard'
     7878 6C69     
     787A 7062     
     787C 6F61     
     787E 7264     
0184 7880 00FF     pos.info.config    byte 0,>ff
0185 7882 0120     txt.hint.config    stri ' '
0186 7884 1346     txt.keys.config    stri 'F9-Back  ENTER-Back'
     7886 392D     
     7888 4261     
     788A 636B     
     788C 2020     
     788E 454E     
     7890 5445     
     7892 522D     
     7894 4261     
     7896 636B     
0187               
0188               
0189               ;--------------------------------------------------------------
0190               ; Dialog "Configure clipboard"
0191               ;--------------------------------------------------------------
0192 7898 1801     txt.head.clipdev   byte 24,1,1
     789A 01       
0193 789B   20                        text ' Configure clipboard '
     789C 436F     
     789E 6E66     
     78A0 6967     
     78A2 7572     
     78A4 6520     
     78A6 636C     
     78A8 6970     
     78AA 626F     
     78AC 6172     
     78AE 6420     
0194 78B0 01                          byte 1
0195 78B1   32     txt.hint.clipdev   stri 'Give device and filename prefix of clipboard file.'
     78B2 4769     
     78B4 7665     
     78B6 2064     
     78B8 6576     
     78BA 6963     
     78BC 6520     
     78BE 616E     
     78C0 6420     
     78C2 6669     
     78C4 6C65     
     78C6 6E61     
     78C8 6D65     
     78CA 2070     
     78CC 7265     
     78CE 6669     
     78D0 7820     
     78D2 6F66     
     78D4 2063     
     78D6 6C69     
     78D8 7062     
     78DA 6F61     
     78DC 7264     
     78DE 2066     
     78E0 696C     
     78E2 652E     
0196 78E4 3B46     txt.keys.clipdev   stri 'F9-Back  F3-Clear  ^A=DSK1.CLIP  ^B=DSK2.CLIP  ^C=TIPI.CLIP'
     78E6 392D     
     78E8 4261     
     78EA 636B     
     78EC 2020     
     78EE 4633     
     78F0 2D43     
     78F2 6C65     
     78F4 6172     
     78F6 2020     
     78F8 5E41     
     78FA 3D44     
     78FC 534B     
     78FE 312E     
     7900 434C     
     7902 4950     
     7904 2020     
     7906 5E42     
     7908 3D44     
     790A 534B     
     790C 322E     
     790E 434C     
     7910 4950     
     7912 2020     
     7914 5E43     
     7916 3D54     
     7918 4950     
     791A 492E     
     791C 434C     
     791E 4950     
0197               
0198               
0199               ;--------------------------------------------------------------
0200               ; Dialog "Configure editor"
0201               ;--------------------------------------------------------------
0202 7920 1501     txt.head.editor    byte 21,1,1
     7922 01       
0203 7923   20                        text ' Configure editor '
     7924 436F     
     7926 6E66     
     7928 6967     
     792A 7572     
     792C 6520     
     792E 6564     
     7930 6974     
     7932 6F72     
     7934 20       
0204 7935   01                        byte 1
0205 7936 1241     txt.info.editor    stri 'AutoInsert: Yes/No'
     7938 7574     
     793A 6F49     
     793C 6E73     
     793E 6572     
     7940 743A     
     7942 2059     
     7944 6573     
     7946 2F4E     
     7948 6F       
0206 7949   0C     pos.info.editor    byte 12,16,>ff
     794A 10FF     
0207               
0208 794C 1A53     txt.hint.editor    stri 'Select editor preferences.'
     794E 656C     
     7950 6563     
     7952 7420     
     7954 6564     
     7956 6974     
     7958 6F72     
     795A 2070     
     795C 7265     
     795E 6665     
     7960 7265     
     7962 6E63     
     7964 6573     
     7966 2E       
0209 7967   13     txt.keys.editor    stri 'F9-Back  ENTER-Back'
     7968 4639     
     796A 2D42     
     796C 6163     
     796E 6B20     
     7970 2045     
     7972 4E54     
     7974 4552     
     7976 2D42     
     7978 6163     
     797A 6B       
0210               
0211               
0212               ;--------------------------------------------------------------
0213               ; Dialog "Shortcuts"
0214               ;--------------------------------------------------------------
0215 797B   0E     txt.head.shortcuts byte 14,1,1
     797C 0101     
0216 797E 2053                        text ' Shortcuts '
     7980 686F     
     7982 7274     
     7984 6375     
     7986 7473     
     7988 20       
0217 7989   01                        byte 1
0218               
0219 798A 2343     txt.info.shortcuts stri 'Colors   Ruler   Autoinsert   M1/M2'
     798C 6F6C     
     798E 6F72     
     7990 7320     
     7992 2020     
     7994 5275     
     7996 6C65     
     7998 7220     
     799A 2020     
     799C 4175     
     799E 746F     
     79A0 696E     
     79A2 7365     
     79A4 7274     
     79A6 2020     
     79A8 204D     
     79AA 312F     
     79AC 4D32     
0220 79AE 0009     pos.info.shortcuts byte 0,9,17,31,34,>ff
     79B0 111F     
     79B2 22FF     
0221 79B4 0100     txt.hint.shortcuts stri ''
0222 79B6 1346     txt.keys.shortcuts stri 'F9-Back  ENTER-Back'
     79B8 392D     
     79BA 4261     
     79BC 636B     
     79BE 2020     
     79C0 454E     
     79C2 5445     
     79C4 522D     
     79C6 4261     
     79C8 636B     
                   < stevie_b3.asm
0117                       copy  "data.keymap.presets.asm" ; Shortcut presets in dialogs
     **** ****     > data.keymap.presets.asm
0001               * FILE......: data.keymap.presets.asm
0002               * Purpose...: Shortcut presets in dialogs
0003               
0004               *---------------------------------------------------------------
0005               * Shorcut presets for dialogs
0006               *-------------|---------------------|---------------------------
0007               cmdb.cmd.preset.data:
0008                       ;-------------------------------------------------------
0009                       ; Dialog "Configure clipboard device"
0010                       ;-------------------------------------------------------
0011 79CA 0011             data  id.dialog.clipdev,key.ctrl.a,def.clip.fname
     79CC 0081     
     79CE 3AC3     
0012 79D0 0011             data  id.dialog.clipdev,key.ctrl.b,def.clip.fname.b
     79D2 0082     
     79D4 3ACD     
0013 79D6 0011             data  id.dialog.clipdev,key.ctrl.c,def.clip.fname.C
     79D8 0083     
     79DA 3AD7     
0014                       ;------------------------------------------------------
0015                       ; End of list
0016                       ;-------------------------------------------------------
0017 79DC FFFF             data  EOL                   ; EOL
                   < stevie_b3.asm
0118                       ;-----------------------------------------------------------------------
0119                       ; Bank full check
0120                       ;-----------------------------------------------------------------------
0124                       ;-----------------------------------------------------------------------
0125                       ; Show ROM bank in CPU crash screen
0126                       ;-----------------------------------------------------------------------
0127                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 240E     
0010 7F04 0314                   byte 3,20
0011 7F06 7F0A                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b3.asm
0128                       ;-----------------------------------------------------------------------
0129                       ; Vector table
0130                       ;-----------------------------------------------------------------------
0131                       copy  "rom.vectors.bank3.asm"
     **** ****     > rom.vectors.bank3.asm
0001               * FILE......: rom.vectors.bank3.asm
0002               * Purpose...: Bank 3 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F0A 0552             stri 'ROM#3'
     7F0C 4F4D     
     7F0E 2333     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 6090     vec.1   data  dialog.help           ; Dialog "About"
0016 7FC2 675C     vec.2   data  dialog.load           ; Dialog "Load file"
0017 7FC4 67D2     vec.3   data  dialog.save           ; Dialog "Save file"
0018 7FC6 692C     vec.4   data  dialog.insert         ; Dialog "Insert file at line ..."
0019 7FC8 684E     vec.5   data  dialog.print          ; Dialog "Print file"
0020 7FCA 66D0     vec.6   data  dialog.file           ; Dialog "File"
0021 7FCC 6B3C     vec.7   data  dialog.unsaved        ; Dialog "Unsaved changes"
0022 7FCE 6AAE     vec.8   data  dialog.clipboard      ; Dialog "Copy clipboard to line ..."
0023 7FD0 6A1C     vec.9   data  dialog.clipdev        ; Dialog "Configure clipboard device"
0024 7FD2 69D6     vec.10  data  dialog.config         ; Dialog "Configure"
0025 7FD4 68C2     vec.11  data  dialog.append         ; Dialog "Append file"
0026 7FD6 6716     vec.12  data  dialog.cartridge      ; Dialog "Cartridge"
0027 7FD8 6B7E     vec.13  data  dialog.basic          ; Dialog "TI Basic"
0028 7FDA 6BD8     vec.14  data  dialog.shortcuts      ; Dialog "Shortcuts"
0029 7FDC 6A6C     vec.15  data  dialog.editor         ; Dialog "Configure editor"
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6E7E     vec.18  data  error.display         ; Show error message
0033 7FE4 6C16     vec.19  data  pane.show_hintx       ; Show or hide hint (register version)
0034 7FE6 6C80     vec.20  data  pane.cmdb.show        ; Show command buffer pane (=dialog)
0035 7FE8 6CD8     vec.21  data  pane.cmdb.hide        ; Hide command buffer pane
0036 7FEA 6D3C     vec.22  data  pane.cmdb.draw        ; Draw content in command
0037 7FEC 70A2     vec.23  data  tibasic.buildstr      ; Build TI Basic session identifier string
0038 7FEE 6EB0     vec.24  data  cmdb.refresh          ;
0039 7FF0 6EFA     vec.25  data  cmdb.cmd.clear        ;
0040 7FF2 6F2C     vec.26  data  cmdb.cmd.getlength    ;
0041 7FF4 6F8C     vec.27  data  cmdb.cmd.preset       ;
0042 7FF6 6F42     vec.28  data  cmdb.cmd.set          ;
0043 7FF8 711E     vec.29  data  tibasic.hearts.tat    ; Dump color for hearts in TI-Basic dialog
0044 7FFA 604A     vec.30  data  dialog.menu           ; Dialog "Main Menu"
0045 7FFC 7080     vec.31  data  tibasic.am.toggle     ; Toggle AutoMode in Run TI-Basic dialog
0046 7FFE 6FCE     vec.32  data  fm.fastmode           ; Toggle FastMode on/off in Load dialog
                   < stevie_b3.asm
0132                                                   ; Vector table bank 3
0133               *--------------------------------------------------------------
0134               * Video mode configuration
0135               *--------------------------------------------------------------
0136      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0137      0004     spfbck  equ   >04                   ; Screen background color.
0138      3626     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0139      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0140      0050     colrow  equ   80                    ; Columns per row
0141      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0142      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0143      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0144      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table

    ANYKEY.............. >200A :     
    AT.................. >2692 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6006 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2E4E :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2E76 :     
    CMDB.ACTION.PTR..... >A72A :     
    CMDB.CMD............ >A72D :     
    CMDB.CMD.CLEAR...... >6EFA :     
    CMDB.CMD.CLEAR.EXIT. >6F22 :     
    CMDB.CMD.GETLENGTH.. >6F2C :     
    CMDB.CMD.GETLENGTH.EXIT >6F3E :     
    CMDB.CMD.PRESET..... >6F8C :     
    CMDB.CMD.PRESET.DATA >79CA :     
    CMDB.CMD.PRESET.EXIT >6FC4 :     
    CMDB.CMD.PRESET.LOOP >6FA4 :     
    CMDB.CMD.PRESET.NEXT >6FB8 :     
    CMDB.CMD.SET........ >6F42 :     
    CMDB.CMD.SET.EXIT... >6F82 :     
    CMDB.CMDALL......... >A72C :     
    CMDB.CMDLEN......... >A72C :     
    CMDB.COLUMN......... >A712 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B0 :     
    CMDB.DIALOG......... >A71A :     
    CMDB.DIALOG.VAR..... >A71C :     
    CMDB.DIRTY.......... >A718 :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >31D4 :     
    CMDB.INIT.EXIT...... >320A :     
    CMDB.LENGTH......... >A714 :     
    CMDB.LINES.......... >A716 :     
    CMDB.PANHEAD........ >A71E :     
    CMDB.PANHEAD.BUF.... >A77E :     
    CMDB.PANHINT........ >A722 :     
    CMDB.PANHINT2....... >A724 :     
    CMDB.PANINFO........ >A720 :     
    CMDB.PANKEYS........ >A728 :     
    CMDB.PANMARKERS..... >A726 :     
    CMDB.REFRESH........ >6EB0 :     
    CMDB.REFRESH.EXIT... >6EEC :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A710 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A70E :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >36C0 :     
    CONST.2............. >2004 :     
    CONST.3............. >36B6 :     
    CONST.4............. >2006 :     
    CONST.5............. >36B8 :     
    CONST.6............. >36BA :     
    CONST.7............. >36BC :     
    CONST.8............. >2008 :     
    CONST.9............. >36BE :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A034 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.ST.... >21B9 :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F0A :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2ABC :     
    CPU.SCRPAD.BACKUP.COPY >2AD4 :     
    CPU.SCRPAD.BACKUP.EXIT >2AEE :     
    CPU.SCRPAD.PGIN..... >2B42 :     
    CPU.SCRPAD.PGIN.EXIT >2B64 :     
    CPU.SCRPAD.PGOUT.... >2B04 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B3C :     
    CPU.SCRPAD.PGOUT.EXIT >2B40 :     
    CPU.SCRPAD.RESTORE.. >2AF0 :     
    CPU.SCRPAD.RESTORE.COPY >2AF8 :     
    CPU.SCRPAD.RESTORE.EXIT >2B02 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24B8 :     
    CPYM0............... >24C4 :     
    CPYM1............... >24D0 :     
    CPYM2............... >24D8 :     
    CPYM2M.............. >24A6 :     
    CPYM2V.............. >2452 :     
    CPYM3............... >24E8 :     
    CPYM4............... >24F2 :     
    CPYMZ............... >24FE :     
    CPYODD.............. >2500 :     
    CPYV2M.............. >2484 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3AC3 :     
    DEF.CLIP.FNAME.B.... >3ACD :     
    DEF.CLIP.FNAME.C.... >3AD7 :     
    DEF.DEVICES......... >3AE1 :     
    DEF.PRINTER.FNAME... >3ABC :     
    DEVICE.9938......... >0000 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >68C2 :     
    DIALOG.APPEND.CURSOR >691A :     
    DIALOG.APPEND.EXIT.. >6924 :     
    DIALOG.APPEND.KEYLIST >6906 :     
    DIALOG.APPEND.SETUP. >68CE :     
    DIALOG.BASIC........ >6B7E :     
    DIALOG.BASIC.AMONLY. >6BC2 :     
    DIALOG.BASIC.DONE... >6BC6 :     
    DIALOG.BASIC.EXIT... >6BD2 :     
    DIALOG.CARTRIDGE.... >6716 :     
    DIALOG.CARTRIDGE.EXIT >6756 :     
    DIALOG.CLIPBOARD.... >6AAE :     
    DIALOG.CLIPBOARD.EXIT >6B36 :     
    DIALOG.CLIPBOARD.KEYLIST >6B2E :     
    DIALOG.CLIPBOARD.SETUP >6AB6 :     
    DIALOG.CLIPDEV...... >6A1C :     
    DIALOG.CLIPDEVICE.EXIT >6A66 :     
    DIALOG.CONFIG....... >69D6 :     
    DIALOG.CONFIG.EXIT.. >6A16 :     
    DIALOG.EDITOR....... >6A6C :     
    DIALOG.EDITOR.EXIT.. >6AA8 :     
    DIALOG.FILE......... >66D0 :     
    DIALOG.FILE.EXIT.... >6710 :     
    DIALOG.HELP......... >6090 :     
    DIALOG.HELP.CONTENT. >60D4 :     
    DIALOG.HELP.CONTENT.EXIT >6140 :     
    DIALOG.HELP.DATA.PAGE1.LEFT >6160 :     
    DIALOG.HELP.DATA.PAGE1.RIGHT >62D8 :     
    DIALOG.HELP.DATA.PAGE2.LEFT >64D0 :     
    DIALOG.HELP.DATA.PAGE2.RIGHT >65AC :     
    DIALOG.HELP.DATA.PAGES >6150 :     
    DIALOG.HELP.EXIT.... >60D0 :     
    DIALOG.INSERT....... >692C :     
    DIALOG.INSERT.CURSOR >69C4 :     
    DIALOG.INSERT.EXIT.. >69CE :     
    DIALOG.INSERT.KEYLIST >69B0 :     
    DIALOG.INSERT.SETUP. >6938 :     
    DIALOG.LOAD......... >675C :     
    DIALOG.LOAD.CURSOR.. >67C0 :     
    DIALOG.LOAD.EXIT.... >67CA :     
    DIALOG.LOAD.KEYLIST. >67AC :     
    DIALOG.LOAD.SETUP... >6774 :     
    DIALOG.MENU......... >604A :     
    DIALOG.MENU.EXIT.... >608A :     
    DIALOG.PRINT........ >684E :     
    DIALOG.PRINT.DEFAULT >687C :     
    DIALOG.PRINT.EXIT... >68BC :     
    DIALOG.PRINT.HEADER. >6888 :     
    DIALOG.SAVE......... >67D2 :     
    DIALOG.SAVE.DEFAULT. >6808 :     
    DIALOG.SAVE.EXIT.... >6848 :     
    DIALOG.SAVE.HEADER.. >6824 :     
    DIALOG.SHORTCUTS.... >6BD8 :     
    DIALOG.SHORTCUTS.EXIT >6C10 :     
    DIALOG.UNSAVED...... >6B3C :     
    DIALOG.UNSAVED.EXIT. >6B78 :     
    DOFILL.............. >224C :     
    DOWN................ >2698 :     
    DSRLNK.............. >2B66 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BC0 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C3C :     
    DSRLNK.DSRSCAN.CARDLOOP >2BEC :     
    DSRLNK.DSRSCAN.CARDOFF >2BE6 :     
    DSRLNK.DSRSCAN.DSR.8 >2C6E :     
    DSRLNK.DSRSCAN.DSR.A >2C7E :     
    DSRLNK.DSRSCAN.GETENTRY >2C16 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C10 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C5E :     
    DSRLNK.DSRSCAN.START >2BDC :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2C8A :     
    DSRLNK.ERROR.IO_ERROR >2C8C :     
    DSRLNK.ERROR.NODSR_FOUND >2C86 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2C84 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B6A :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2CD6 :     
    DSRLNK.REUSE........ >2C96 :     
    DSRLNK.REUSE.INIT... >2C9A :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51C :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >35C0 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >35CC :     
    EDB.HIPAGE.ALLOC.CRASH >35F6 :     
    EDB.HIPAGE.ALLOC.EXIT >35FE :     
    EDB.HIPAGE.ALLOC.SETPAGE >35E8 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >318E :     
    EDB.INIT.EXIT....... >31CE :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >3558 :     
    EDB.LINE.GETLENGTH.EXIT >3594 :     
    EDB.LINE.GETLENGTH.NULL >3590 :     
    EDB.LINE.GETLENGTH2. >359C :     
    EDB.LINE.GETLENGTH2.EXIT >35BA :     
    EDB.LINE.MAPPAGE.... >350E :     
    EDB.LINE.MAPPAGE.EXIT >3550 :     
    EDB.LINE.MAPPAGE.LOOKUP >3528 :     
    EDB.LINE.PACK....... >7174 :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.CMDB.SHOW >7186 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >6E7E :     
    ERROR.DISPLAY.EXIT.. >6EA6 :     
    ERRPANE.EXIT........ >3236 :     
    ERRPANE.INIT........ >3210 :     
    F18CHK.............. >2720 :     
    F18CHK_EXIT......... >275E :     
    F18CHK_GPU.......... >276A :     
    F18CHK_NO........... >2754 :     
    F18CHK_YES.......... >275A :     
    F18FW1.............. >279C :     
    F18FWV.............. >2782 :     
    F18IDL.............. >2716 :     
    F18LCK.............. >270C :     
    F18RST.............. >2772 :     
    F18UNL.............. >26F6 :     
    FB.CALC_POINTER..... >3066 :     
    FB.CALC_POINTER.EXIT >3086 :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >2FE6 :     
    FB.INIT.CONT........ >3022 :     
    FB.INIT.EXIT........ >3044 :     
    FB.REFRESH.......... >7198 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >304C :     
    FB.ROW2LINE.EXIT.... >3060 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCAN.FNAME....... >7204 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B6 :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A466 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >2258 :     
    FIL16B.............. >2242 :     
    FILCHK.............. >2214 :     
    FILCHK2............. >2224 :     
    FILCHK3............. >2230 :     
    FILE.CLOSE.......... >2CFC :     
    FILE.DELETE......... >2D34 :     
    FILE.IMAGE.LOAD..... >2D30 :     
    FILE.IMAGE.SAVE..... >2D32 :     
    FILE.OPEN........... >2CD8 :     
    FILE.RECORD.READ.... >2D08 :     
    FILE.RECORD.SEEK.... >2D2E :     
    FILE.RECORD.WRITE... >2D14 :     
    FILE.RENAME......... >2D36 :     
    FILE.STATUS......... >2D38 :     
    FILM................ >2202 :     
    FILV................ >225A :     
    FILZZ............... >2280 :     
    FJ.BOTTOM........... >B000 :     
    FM.FASTMODE......... >6FCE :     
    FM.FASTMODE.EXIT.... >7076 :     
    FM.FASTMODE.KEYLIST. >7072 :     
    FM.FASTMODE.OFF..... >6FE8 :     
    FM.FASTMODE.OFF.1... >7014 :     
    FM.FASTMODE.OFF.2... >701A :     
    FM.FASTMODE.OFF.3... >7020 :     
    FM.FASTMODE.OFF.4... >7026 :     
    FM.FASTMODE.ON...... >702C :     
    FM.FASTMODE.ON.1.... >705C :     
    FM.FASTMODE.ON.2.... >7062 :     
    FM.FASTMODE.ON.3.... >7068 :     
    FM.FASTMODE.ON.4.... >706E :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21BE :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >279E :     
    HCHAR1.............. >27B8 :     
    HCHAR2.............. >27C2 :     
    HCHARX.............. >27A4 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2D94 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006E :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3414 :     
    IDX.ENTRY.DELETE.EXIT >346C :     
    IDX.ENTRY.DELETE.LASTLINE >3440 :     
    IDX.ENTRY.DELETE.REORG >3448 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3452 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3466 :     
    IDX.ENTRY.INSERT.... >34B6 :     
    IDX.ENTRY.INSERT.EXIT >3502 :     
    IDX.ENTRY.INSERT.REORG >34D4 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >34DE :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >34F2 :     
    IDX.ENTRY.UPDATE.... >3366 :     
    IDX.ENTRY.UPDATE.CLEAR >33A0 :     
    IDX.ENTRY.UPDATE.EXIT >33B0 :     
    IDX.ENTRY.UPDATE.SAVE >338E :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >308E :     
    IDX.INIT.EXIT....... >30CA :     
    IDX.POINTER.GET..... >33B8 :     
    IDX.POINTER.GET.EXIT >33FA :     
    IDX.POINTER.GET.PARM >33E8 :     
    IDX.POINTER.GET.PARM.NULL >33F2 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2662 :     
    INTON............... >266A :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.S............ >0073 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2E2E :     
    KTHREAD_EXIT........ >2E40 :     
    KTHREAD_KB.......... >2E3C :     
    LDFNT............... >232C :     
    LDFNT1.............. >2344 :     
    LDFNT2.............. >237E :     
    LDFNT3.............. >2392 :     
    LDFNT4.............. >23A6 :     
    LOADMC.............. >21E6 :     
    MAGIC.CHECK......... >7282 :     
    MAGIC.CLEAR......... >7270 :     
    MAGIC.SET........... >725E :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >21DC :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >723A :     
    MEM.SAMS.SET.LEGACY. >7228 :     
    MEM.SAMS.SET.STEVIE. >724C :     
    MEM.SAMS.SETUP.STEVIE >7216 :     
    MKHEX............... >28E4 :     
    MKHEX1.............. >28FC :     
    MKHEX1.DIGIT09...... >2912 :     
    MKHEX1.DIGITAF...... >2908 :     
    MKHEX2.............. >2918 :     
    MKHEX3.............. >295A :     
    MKHOO1.............. >2E4C :     
    MKHOOK.............. >2E44 :     
    MKNUM............... >2972 :     
    MKNUM1.............. >2984 :     
    MKNUM2.............. >29A0 :     
    MKNUM3.............. >29A4 :     
    MKNUM4.............. >29AE :     
    MKNUM5.............. >29B6 :     
    MKSLO1.............. >2E72 :     
    MKSLOT.............. >2E58 :     
    MMPLA1.............. >2850 :     
    MMPLA2.............. >2856 :     
    MMPLAY.............. >2848 :     
    MUTE................ >27C6 :     
    MUTE2............... >27CA :     
    MUTTAB.............. >27E0 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3650 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A016 :     
    OUTPARM2............ >A018 :     
    OUTPARM3............ >A01A :     
    OUTPARM4............ >A01C :     
    OUTPARM5............ >A01E :     
    OUTPARM6............ >A020 :     
    OUTPARM7............ >A022 :     
    OUTPARM8............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.LOAD >71F2 :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >6D3C :     
    PANE.CMDB.DRAW.ALPHA.DOWN >6E56 :     
    PANE.CMDB.DRAW.CLEAR >6DCA :     
    PANE.CMDB.DRAW.EXIT. >6E76 :     
    PANE.CMDB.DRAW.HEARTS >6E68 :     
    PANE.CMDB.DRAW.HINT. >6DFA :     
    PANE.CMDB.DRAW.KEYS. >6E30 :     
    PANE.CMDB.DRAW.MARKER.LOOP >6DDA :     
    PANE.CMDB.DRAW.PROMPTCMD >6E5E :     
    PANE.CMDB.HIDE...... >6CD8 :     
    PANE.CMDB.HIDE.EXIT. >6D34 :     
    PANE.CMDB.HIDE.REST. >6D0E :     
    PANE.CMDB.SHOW...... >6C80 :     
    PANE.CMDB.SHOW.EXIT. >6CCE :     
    PANE.CURSOR.BLINK... >71BC :     
    PANE.CURSOR.HIDE.... >71CE :     
    PANE.ERRLINE.HIDE... >71AA :     
    PANE.ERRLINE.SHOW... >71E0 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINT...... >6C6C :     
    PANE.SHOW_HINT.EXIT. >6C7C :     
    PANE.SHOW_HINTX..... >6C16 :     
    PANE.SHOW_HINTX.EXIT >6C60 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3606 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >361E :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >21FC :     
    POPR1............... >21FA :     
    POPR2............... >21F8 :     
    POPR3............... >21F6 :     
    POPRT............... >21FE :     
    POS.INFO.BASIC...... >77E3 :     
    POS.INFO.CARTRIDGE.. >7788 :     
    POS.INFO.CONFIG..... >7880 :     
    POS.INFO.EDITOR..... >7949 :     
    POS.INFO.FILE....... >7753 :     
    POS.INFO.MENU....... >7702 :     
    POS.INFO.SHORTCUTS.. >79AE :     
    PREFIX.............. >2966 :     
    PUTAT............... >240E :     
    PUTHEX.............. >2968 :     
    PUTLST.............. >2416 :     
    PUTLST.EXIT......... >244C :     
    PUTLST.LOOP......... >241E :     
    PUTNUM.............. >29F0 :     
    PUTSTR.............. >23EA :     
    PUTV01.............. >2312 :     
    PUTVR............... >22FE :     
    PUTVRX.............. >2300 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2882 :     
    RKSCAN.EXIT......... >28D8 :     
    ROM.FARJUMP......... >2F56 :     
    ROM.FARJUMP.BANKSWITCH.CALL >2FA6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >2F9E :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >2FD4 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >2FCA :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >2FC6 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2F82 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2F86 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >2F8E :     
    ROM.FARJUMP.EXIT.... >2FDC :     
    ROM.FARJUMP.RETURN.. >2FA8 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >601E :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3644 :     
    RSSLOT.............. >2E84 :     
    RUNLI1.............. >2E9C :     
    RUNLI2.............. >2EA8 :     
    RUNLI3.............. >2EAC :     
    RUNLI3A............. >2EB4 :     
    RUNLI4.............. >2EBE :     
    RUNLI5.............. >2EC8 :     
    RUNLI6.............. >2ED6 :     
    RUNLI7.............. >2EE4 :     
    RUNLI9.............. >2EE8 :     
    RUNLIA.............. >2F0A :     
    RUNLIB.............. >2E98 :     
    RUNLIC.............. >2F2E :     
    RUNLID.............. >2F44 :     
    RUNLIE.............. >2F4E :     
    S16X16.............. >268A :     
    S8X8................ >2682 :     
    SAMS.LAYOUT......... >25BA :     
    SAMS.LAYOUT.COPY.... >260A :     
    SAMS.LAYOUT.COPY.DATA >2642 :     
    SAMS.LAYOUT.COPY.EXIT >2636 :     
    SAMS.LAYOUT.COPY.LOOP >2628 :     
    SAMS.LAYOUT.EXIT.... >25F2 :     
    SAMS.LAYOUT.STANDARD >25FA :     
    SAMS.MAPPING.OFF.... >25AC :     
    SAMS.MAPPING.OFF.EXIT >25B6 :     
    SAMS.MAPPING.ON..... >259E :     
    SAMS.MAPPING.ON.EXIT >25A8 :     
    SAMS.PAGE.GET....... >2508 :     
    SAMS.PAGE.GET.EXIT.. >2536 :     
    SAMS.PAGE.SET....... >253E :     
    SAMS.PAGE.SET.EXIT.. >2592 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2582 :     
    SCROFF.............. >2652 :     
    SCRON............... >265A :     
    SCRPAD.83C6......... >28DE :     
    SCRPAD.83FA......... >28E0 :     
    SCRPAD.83FE......... >28E2 :     
    SDEXI1.............. >287A :     
    SDEXI2.............. >287C :     
    SDEXIT.............. >2868 :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2802 :     
    SDPLA2.............. >280C :     
    SDPLA3.............. >280E :     
    SDPLAY.............. >27FA :     
    SDPREP.............. >27E4 :     
    SETX................ >26A8 :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E10 :     
    SMAG1X.............. >2672 :     
    SMAG2X.............. >267A :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >21E2 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >3626 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >3626 :     
    STRING.GETLENC...... >2A66 :     
    STRING.GETLENC.EXIT. >2AB2 :     
    STRING.GETLENC.LOOP. >2A94 :     
    STRING.GETLENC.PANIC >2AAA :     
    STRING.GETLENC.PUTLENGTH >2AA2 :     
    STRING.LTRIM........ >29FA :     
    STRING.LTRIM.EXIT... >2A5A :     
    STRING.LTRIM.MOVE... >2A40 :     
    STRING.LTRIM.PANIC.. >2A52 :     
    STRING.LTRIM.SCAN... >2A34 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TIB.AUTOMODE........ >A0C0 :     
    TIB.AUX............. >FF00 :     
    TIB.AUX.END......... >FFFA :     
    TIB.AUX.FNAME....... >FF00 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >3630 :     
    TIBASIC.32X30....... >363A :     
    TIBASIC.AM.EXIT..... >709C :     
    TIBASIC.AM.OFF...... >7094 :     
    TIBASIC.AM.TOGGLE... >7080 :     
    TIBASIC.BUILDSTR.... >70A2 :     
    TIBASIC.BUILDSTR.ACTIVE >70F6 :     
    TIBASIC.BUILDSTR.CURRENT >70E4 :     
    TIBASIC.BUILDSTR.EXIT >710C :     
    TIBASIC.BUILDSTR.LOOP >70E0 :     
    TIBASIC.BUILDSTR.NEXT >7100 :     
    TIBASIC.HEART.OPEN.. >711C :     
    TIBASIC.HEART.SOLID. >711A :     
    TIBASIC.HEARTS.TAT.. >711E :     
    TIBASIC.HEARTS.TAT.EXIT >7166 :     
    TIBASIC.HEARTS.TAT.LOOP >714E :     
    TIMERS.............. >A064 :     
    TMDAT............... >2E2C :     
    TMGR................ >2D90 :     
    TMGR1............... >2D94 :     
    TMGR10.............. >2E14 :     
    TMGR11.............. >2E22 :     
    TMGR12.............. >2E26 :     
    TMGR1A.............. >2DA2 :     
    TMGR2............... >2DA8 :     
    TMGR3............... >2DB8 :     
    TMGR4............... >2DCA :     
    TMGR5............... >2DE0 :     
    TMGR6............... >2DE4 :     
    TMGR7............... >2DE8 :     
    TMGR8............... >2DEA :     
    TMGR9............... >2DF2 :     
    TMP0................ >0004 :     
    TMP006.............. >23AE :     
    TMP007.............. >24A4 :     
    TMP008.............. >2482 :     
    TMP011.............. >2506 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29CA :     
    TRIMNUM_FILL........ >29E8 :     
    TRIMNUM_SCAN........ >29D6 :     
    TRIMNUM_SETLEN...... >29E2 :     
    TRMPVECTOR.......... >A032 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3652 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A230 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D0 :     
    TV.INIT............. >3240 :     
    TV.INIT.EXIT........ >3280 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >32EE :     
    TV.PAD.STRING.EXIT.. >335A :     
    TV.PAD.STRING.LOOP.. >3344 :     
    TV.PAD.STRING.PANIC. >3352 :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >328A :     
    TV.RESET............ >3298 :     
    TV.RESET.EXIT....... >32BE :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22E :     
    TV.TABS.TABLE....... >36A2 :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UNPACK.UINT16.... >32C2 :     
    TV.UNPACK.UINT16.EXIT >32E8 :     
    TX4024.............. >21C8 :     
    TX8024.............. >21D2 :     
    TXT.ABOUT.BUILD..... >7672 :     
    TXT.ALPHA.DOWN...... >39D2 :     
    TXT.AUTOINS.OFF..... >3842 :     
    TXT.AUTOINS.ON...... >3832 :     
    TXT.AUTOINSERT...... >36D6 :     
    TXT.BLOCK.CLIP...... >375C :     
    TXT.BLOCK.COPY...... >371E :     
    TXT.BLOCK.DEL....... >370A :     
    TXT.BLOCK.INSIDE.... >3A7E :     
    TXT.BLOCK.MOVE...... >3730 :     
    TXT.BLOCK.PRINT..... >3776 :     
    TXT.BLOCK.SAVE...... >3742 :     
    TXT.BOTTOM.......... >36C4 :     
    TXT.CLEARMEM........ >378A :     
    TXT.CMDB.PROMPT..... >3AAC :     
    TXT.COLORSCHEME..... >3AAE :     
    TXT.DELIM........... >36C2 :     
    TXT.DONE.APPEND..... >37C0 :     
    TXT.DONE.CLIPBOARD.. >3814 :     
    TXT.DONE.CLIPDEV.... >3824 :     
    TXT.DONE.COPY....... >37E2 :     
    TXT.DONE.DELETE..... >3802 :     
    TXT.DONE.INSERT..... >37AE :     
    TXT.DONE.LOAD....... >379E :     
    TXT.DONE.PRINT...... >37F2 :     
    TXT.DONE.SAVE....... >37D2 :     
    TXT.FASTMODE........ >3852 :     
    TXT.FILETYPE.DV80... >38D4 :     
    TXT.FILETYPE.NONE... >39E4 :     
    TXT.HEAD.ABOUT...... >75A1 :     
    TXT.HEAD.APPEND..... >736C :     
    TXT.HEAD.BASIC...... >77B7 :     
    TXT.HEAD.CARTRIDGE.. >7770 :     
    TXT.HEAD.CLIPBOARD.. >7401 :     
    TXT.HEAD.CLIPDEV.... >7898 :     
    TXT.HEAD.CONFIG..... >7867 :     
    TXT.HEAD.EDITOR..... >7920 :     
    TXT.HEAD.FILE....... >771F :     
    TXT.HEAD.INSERT..... >73B6 :     
    TXT.HEAD.LOAD....... >72E4 :     
    TXT.HEAD.MENU....... >76BC :     
    TXT.HEAD.PRINT...... >74AC :     
    TXT.HEAD.PRINT2..... >74BC :     
    TXT.HEAD.SAVE....... >7313 :     
    TXT.HEAD.SAVE2...... >7322 :     
    TXT.HEAD.SHORTCUTS.. >797B :     
    TXT.HEAD.UNSAVED.... >750C :     
    TXT.HINT.ABOUT...... >75FB :     
    TXT.HINT.ABOUT2..... >75AD :     
    TXT.HINT.APPEND..... >737D :     
    TXT.HINT.BASIC...... >77E9 :     
    TXT.HINT.CARTRIDGE.. >778A :     
    TXT.HINT.CLIPBOARD.. >742E :     
    TXT.HINT.CLIPDEV.... >78B1 :     
    TXT.HINT.CONFIG..... >7882 :     
    TXT.HINT.EDITOR..... >794C :     
    TXT.HINT.FILE....... >775A :     
    TXT.HINT.INSERT..... >73CF :     
    TXT.HINT.LOAD....... >72F3 :     
    TXT.HINT.MENU....... >7709 :     
    TXT.HINT.PRINT...... >74CD :     
    TXT.HINT.SAVE....... >733A :     
    TXT.HINT.SHORTCUTS.. >79B4 :     
    TXT.HINT.UNSAVED.... >7543 :     
    TXT.INFO.ABOUT...... >75AB :     
    TXT.INFO.BASIC...... >77C5 :     
    TXT.INFO.CARTRIDGE.. >777F :     
    TXT.INFO.CLIPBOARD.. >741D :     
    TXT.INFO.CONFIG..... >7876 :     
    TXT.INFO.EDITOR..... >7936 :     
    TXT.INFO.FILE....... >7729 :     
    TXT.INFO.MENU....... >76CB :     
    TXT.INFO.SHORTCUTS.. >798A :     
    TXT.INFO.UNSAVED.... >7521 :     
    TXT.INSERT.......... >36D0 :     
    TXT.IO.NOFILE....... >3A38 :     
    TXT.IOERR.LOAD...... >39F0 :     
    TXT.IOERR.PRINT..... >3A1C :     
    TXT.IOERR.SAVE...... >3A06 :     
    TXT.KB.............. >3878 :     
    TXT.KEYMARKER....... >39D8 :     
    TXT.KEYS.ABOUT...... >764B :     
    TXT.KEYS.APPEND..... >72A4 :     
    TXT.KEYS.APPEND2.... >72C4 :     
    TXT.KEYS.BASIC...... >7825 :     
    TXT.KEYS.BASIC1..... >3948 :     
    TXT.KEYS.BASIC2..... >7846 :     
    TXT.KEYS.BLOCK...... >3910 :     
    TXT.KEYS.CARTRIDGE.. >77A3 :     
    TXT.KEYS.CLIPBOARD.. >7465 :     
    TXT.KEYS.CLIPBOARD2. >7488 :     
    TXT.KEYS.CLIPDEV.... >78E4 :     
    TXT.KEYS.CONFIG..... >7884 :     
    TXT.KEYS.DEFAULT.... >38E2 :     
    TXT.KEYS.DEFAULT1... >72A4 :     
    TXT.KEYS.DEFAULT2... >72C4 :     
    TXT.KEYS.DEFAULTB... >38F4 :     
    TXT.KEYS.EDITOR..... >7967 :     
    TXT.KEYS.FILE....... >775C :     
    TXT.KEYS.INSERT..... >72A4 :     
    TXT.KEYS.INSERT2.... >72C4 :     
    TXT.KEYS.LOAD....... >72A4 :     
    TXT.KEYS.LOAD2...... >72C4 :     
    TXT.KEYS.MENU....... >770B :     
    TXT.KEYS.PRINT...... >74FA :     
    TXT.KEYS.SAVE....... >735A :     
    TXT.KEYS.SHORTCUTS.. >79B6 :     
    TXT.KEYS.UNSAVED.... >757B :     
    TXT.LINES........... >387C :     
    TXT.LOADING......... >36DE :     
    TXT.M1.............. >38DA :     
    TXT.M2.............. >38DE :     
    TXT.MEMFULL.LOAD.... >3A50 :     
    TXT.NEWFILE......... >3882 :     
    TXT.OVRWRITE........ >36CA :     
    TXT.PRINTING........ >36F6 :     
    TXT.RULER........... >3982 :     
    TXT.SAVING.......... >36EA :     
    TXT.STAR............ >36DC :     
    TXT.STEVIE.......... >7294 :     
    TXT.TIB1............ >388E :     
    TXT.TIB2............ >389C :     
    TXT.TIB3............ >38AA :     
    TXT.TIB4............ >38B8 :     
    TXT.TIB5............ >38C6 :     
    TXT.UNCRUNCHING..... >385C :     
    TXT.VERTLINE........ >39D6 :     
    TXT.WS1............. >39DA :     
    TXT.WS2............. >39DC :     
    TXT.WS3............. >39E0 :     
    TXT.WS4............. >39E4 :     
    TXT.WS5............. >39EA :     
    UNPACKED.STRING..... >A02C :     
    UP.................. >26A0 :     
    VDP.CMDB.TOPROW.TAT. >1FD0 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >282C :     
    VDPLA2.............. >2832 :     
    VDPLA3.............. >2842 :     
    VDPLAY.............. >2814 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >2286 :     
    VDWA................ >2282 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22AE :     
    VIDTA1.............. >22E0 :     
    VIDTAB.............. >22C4 :     
    VPUTB............... >2294 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B44 :     
    XCPU.SCRPAD.PGOUT... >2B16 :     
    XFILE.CLOSE......... >2CFE :     
    XFILE.OPEN.......... >2CDC :     
    XFILM............... >2208 :     
    XFILV............... >2260 :     
    XIDTAB.............. >22C6 :     
    XLSLOT.............. >2E78 :     
    XPYM2M.............. >24AC :     
    XPYM2V.............. >2458 :     
    XPYV2M.............. >248A :     
    XROM.FARJUMP........ >2F5C :     
    XSAMS.LAYOUT........ >25BC :     
    XSAMS.PAGE.GET...... >250A :     
    XSAMS.PAGE.SET...... >2542 :     
    XSETX............... >26AA :     
    XSTRING.GETLENC..... >2A80 :     
    XSTRING.LTRIM....... >2A16 :     
    XUTST0.............. >23EC :     
    XUTSTR.............. >23EE :     
    XVGETB.............. >22B0 :     
    XVPUTB.............. >2298 :     
    YX2PI1.............. >26E2 :     
    YX2PI2.............. >26E8 :     
    YX2PI3.............. >26F2 :     
    YX2PNT.............. >23C6 :     
    YX2PX............... >26B4 :     
    YX2PXX.............. >26B8 :     
    YX2PXX_C80.......... >26F4 :     
    YX2PXX_NORMAL....... >26D8 :     
    YX2PXX_Y_CALC....... >26DC :     
    _FILE.RECORD.FOP.... >2D3A :     
    _FILE.RECORD.FOP.EXIT >2D8C :     
    _FILE.RECORD.FOP.OPTIMIZED >2D70 :     
    _FILE.RECORD.FOP.PAB >2D74 :     
    _IDX.ENTRY.DELETE.REORG >3404 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >340C :     
    _IDX.ENTRY.INSERT.REORG >3478 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >347E :     
    _IDX.ENTRY.INSERT.REORG.LOOP >34A6 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3104 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >3132 :     
    _IDX.SAMS.MAPCOLUMN.ON >30D0 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >30FA :     
    _IDX.SAMSPAGE.GET... >313E :     
    _IDX.SAMSPAGE.GET.EXIT >3184 :     
