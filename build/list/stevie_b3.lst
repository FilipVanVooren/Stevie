XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b3.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2024 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b3.asm
0020               *
0021               * Bank 3 "John"
0022               * Dialogs & Command Buffer pane
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 240915-2123500
0003               ***************************************************************
                   < stevie_b3.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F50     bankx.vdptab              equ  >7f50   ; VDP mode tables
0043      7F70     bankx.vectab              equ  >7f70   ; Vector table
0044      7FF0     bankx.crash.showbank      equ  >7ff0   ; Show ROM bank in CPU crash screen
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b3.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b3.asm
0027                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *--------------------------------------------------------------
0007               * Video mode configuration (stevie) - Graphics mode 30x80
0008               *--------------------------------------------------------------
0009      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0010      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0011      0980     vdp.tat.base              equ  >0980   ; VDP TAT base address
0012      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 30 rows
0013      1800     vdp.pdt.base              equ  >1800   ; VDP PDT base address
0014               
0015      0050     vdp.fb.toprow.sit         equ  vdp.sit.base + >50   ; VDP SIT 1st Framebuf row
0016      09D0     vdp.fb.toprow.tat         equ  vdp.tat.base + >50   ; VDP TAT 1st Framebuf row
0017               
0018               *--------------------------------------------------------------
0019               * Video mode configuration (stevie)
0020               *--------------------------------------------------------------
0021      001D     pane.botrow               equ  29      ; Bottom row on screen
0022      0050     colrow                    equ  80      ; Columns per row
0023      0001     device.f18a               equ  1       ; F18a on
0024      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0025               
0026               *--------------------------------------------------------------
0027               * VDP memory setup for file handling
0028               *--------------------------------------------------------------
0029      2000     fh.vrecbuf                equ  >2000   ; VDP address record buffer
0030      2000     fh.filebuf                equ  >2000   ; VDP address binary file buffer
0031      0960     fh.vpab                   equ  >0960   ; VDP address PAB
0032               
0033               *--------------------------------------------------------------
0034               * Video mode configuration (spectra2)
0035               *--------------------------------------------------------------
0036      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0037      0004     spfbck  equ   >04                   ; Screen background color.
0038      7F50     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0039      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0040      0FC0     pctadr  equ   >0fc0                 ; \ VDP color table base.
0041                                                   ; / Not used in F18a 80 columns mode
0042      1900     fntadr  equ   vdp.pdt.base + >100   ; VDP font start address (in PDT range)
0043      1300     sprsat  equ   >1300                 ; VDP sprite attribute table
0044      1800     sprpdt  equ   >1800                 ; VDP sprite pattern table
0045               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b3.asm
0028                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.insert          equ  11      ; "Insert file"
0033      000C     id.dialog.append          equ  12      ; "Append file"
0034      000D     id.dialog.cat             equ  13      ; "Catalog"
0035      000E     id.dialog.run             equ  14      ; "Run file"
0036      000F     id.dialog.save            equ  15      ; "Save file"
0037      0010     id.dialog.saveblock       equ  16      ; "Save block to file"
0038      0011     id.dialog.print           equ  17      ; "Print file"
0039      0012     id.dialog.printblock      equ  18      ; "Print block"
0040      0013     id.dialog.cfg.clip        equ  19      ; "Configure clipboard"
0041      0014     id.dialog.goto            equ  20      ; "Goto"
0042               ;-----------------------------------------------------------------
0043               ;   Dialog ID's >= 100 indicate that command prompt should be
0044               ;   hidden and no characters added to CMDB keyboard buffer.
0045               ;-----------------------------------------------------------------
0046      0064     id.dialog.menu            equ  100     ; "Main Menu"
0047      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0048      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0049      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0050      0068     id.dialog.help            equ  104     ; "About"
0051      0069     id.dialog.file            equ  105     ; "File"
0052      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0053      006B     id.dialog.basic           equ  107     ; "TI Basic"
0054      006C     id.dialog.cfg             equ  108     ; "Configure"
0055      006D     id.dialog.editor          equ  109     ; "Configure editor"
0056      006E     id.dialog.font            equ  110     ; "Configure font"
0057      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0058               ;-----------------------------------------------------------------
0059               ; Suffix characters for clipboards
0060               ;-----------------------------------------------------------------
0061      3100     clip1                     equ  >3100   ; '1'
0062      3200     clip2                     equ  >3200   ; '2'
0063      3300     clip3                     equ  >3300   ; '3'
0064      3400     clip4                     equ  >3400   ; '4'
0065      3500     clip5                     equ  >3500   ; '5'
0066               ;-----------------------------------------------------------------
0067               ; Keyboard flags in Stevie
0068               ;-----------------------------------------------------------------
0069      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0070               ;-----------------------------------------------------------------
0071               ; File work mode
0072               ;-----------------------------------------------------------------
0073      0001     id.file.loadfile          equ  1       ; Load file
0074      0002     id.file.insertfile        equ  2       ; Insert file
0075      0003     id.file.appendfile        equ  3       ; Append file
0076      0004     id.file.savefile          equ  4       ; Save file
0077      0005     id.file.saveblock         equ  5       ; Save block to file
0078      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0079      0007     id.file.printfile         equ  7       ; Print file
0080      0008     id.file.printblock        equ  8       ; Print block
0081               ;-----------------------------------------------------------------
0082               ; Special file indicator
0083               ;-----------------------------------------------------------------
0084      0000     id.special.normal         equ  0       ; Normal file
0085      0002     id.special.readonly       equ  2       ; Read-only file
0086      0003     id.special.basic          equ  3       ; TI Basic program
0087               ;-----------------------------------------------------------------
0088               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0089               ;-----------------------------------------------------------------
0090      A000     core1.top         equ  >a000           ; Structure begin
0091      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0092      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0093      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0094      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0095      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0096      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0097      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0098      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0099      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0100      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0101      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0102      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0103      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0104      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0105      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0106      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0107      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0108      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0109      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0110      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0111      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0112      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0113      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0114      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0115      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0116      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0117      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0118      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0119                                 ;--------------------------------------------
0120                                 ; TI Basic related
0121                                 ;--------------------------------------------
0122      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0123      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0124      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0125      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0126      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0127      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0128      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0129      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0130      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0131      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0132      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0133      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0134      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0135      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0136      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0137      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0138      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0139      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0140      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0141      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0142      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0143      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0144      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0145      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0146      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0147      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0148      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0149      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0150      A100     core1.free        equ  core1.top + 256 ; End of structure
0151               ;-----------------------------------------------------------------
0152               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0153               ;-----------------------------------------------------------------
0154      A100     core2.top         equ  >a100           ; Structure begin
0155      A100     rambuf            equ  core2.top       ; RAM workbuffer
0156      A200     core2.free        equ  core2.top + 256 ; End of structure
0157               ;-----------------------------------------------------------------
0158               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0159               ;-----------------------------------------------------------------
0160      A200     tv.struct         equ  >a200           ; Structure begin
0161      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0162      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0163      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0164      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0165      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0166      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0167      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0168      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0169      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0170      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0171      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0172      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0173      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0174      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0175      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0176      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0177      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0178      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0179      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0180      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0181      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0182      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0183      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0184      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0185      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0186      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0187      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0188      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0189      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0190      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0191               ;-----------------------------------------------------------------
0192               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0193               ;-----------------------------------------------------------------
0194      A300     fb.struct         equ  >a300           ; Structure begin
0195      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0196      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0197      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0198                                                      ; line X in editor buffer).
0199      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0200                                                      ; (offset 0 .. @fb.scrrows)
0201      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0202      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0203      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0204      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0205      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0206      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0207      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0208      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0209      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0210      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0211      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0212      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0213      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0214      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0215      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0216               ;-----------------------------------------------------------------
0217               ; File handle structure                @>a400-a4ff   (256 bytes)
0218               ;-----------------------------------------------------------------
0219      A400     fh.struct         equ  >a400           ; stevie file handling structures
0220               ;*******************************************************************************
0221               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0222               ;*******************************************************************************
0223      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0224      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0225      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0226      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0227      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0228      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0229      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0230      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0231      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0232      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0233      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0234      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0235      A43C     fh.records        equ  fh.struct + 60  ; \ File records counter
0236      A43C     fh.segments       equ  fh.struct + 60  ; / Program image segments counter
0237      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0238      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0239      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0240      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0241      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0242      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0243      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0244      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0245      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0246      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0247      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0248      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0249      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0250      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0251      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0252      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0253      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0254      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0255      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0256      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3 (circuit-breaker)
0257      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0258      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0259      A46A     fh.membuffer      equ  fh.struct +106  ; 80 bytes file memory buffer
0260      A4BA     fh.free           equ  fh.struct +186  ; End of structure
0261               ;-----------------------------------------------------------------
0262               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0263               ; Overloads file handle structure
0264               ;-----------------------------------------------------------------
0265      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0266      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0267               ;-----------------------------------------------------------------
0268               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0269               ;-----------------------------------------------------------------
0270      A500     edb.struct        equ  >a500           ; Begin structure
0271      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0272      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0273      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0274      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0275      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0276      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0277      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0278      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0279      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0280      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0281      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0282                                                      ; with current filename.
0283      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0284                                                      ; with current file type.
0285      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0286      A51A     edb.sams.lopage   equ  edb.struct + 26 ; Lowest SAMS page in use
0287      A51C     edb.sams.hipage   equ  edb.struct + 28 ; Highest SAMS page in use
0288      A51E     edb.bk.fb.topline equ  edb.struct + 30 ; Backup of @fb.topline before opening
0289                                                      ; other file from special file.
0290      A520     edb.bk.fb.row     equ  edb.struct + 32 ; Backup of @fb.row before opening
0291                                                      ; other file from special file.
0292      A522     edb.special.file  equ  edb.struct + 34 ; Special file in editor buffer
0293      A524     edb.lineterm      equ  edb.struct + 36 ; Line termination character
0294                                                      ; MSB: Mode on (>ff) or off (>00)
0295                                                      ; LSB: Line termination character
0296      A526     edb.filename      equ  edb.struct + 38 ; 80 characters inline buffer reserved
0297                                                      ; for filename, but not always used.
0298      A576     edb.free          equ  edb.struct + 118; End of structure
0299               ;-----------------------------------------------------------------
0300               ; Index structure                      @>a600-a6ff   (256 bytes)
0301               ;-----------------------------------------------------------------
0302      A600     idx.struct        equ  >a600           ; stevie index structure
0303      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0304      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0305      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0306      A606     idx.free          equ  idx.struct + 6  ; End of structure
0307               ;-----------------------------------------------------------------
0308               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0309               ;-----------------------------------------------------------------
0310      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0311      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0312      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0313      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0314      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0315      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0316      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0317      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0318      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0319      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0320      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0321      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0322      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0323      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0324      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0325      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0326      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0327      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0328      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0329      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0330      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0331      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0332      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0333      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0334      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0335      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0336      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0337      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0338      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0339      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0340               ;-----------------------------------------------------------------
0341               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0342               ;-----------------------------------------------------------------
0343      A900     sp2.stktop        equ  >a900           ; \
0344                                                      ; | The stack grows from high memory
0345                                                      ; | towards low memory.
0346                                                      ; |
0347                                                      ; | Stack leaking is checked in SP2
0348                                                      ; | user hook "edkey.keyscan.hook"
0349                                                      ; /
0350               ;-----------------------------------------------------------------
0351               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0352               ;-----------------------------------------------------------------
0353      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0354                                                      ; / stored in cartridge ROM bank7.asm
0355               
0356      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0357                                                      ; | scratchpad backup/restore routines.
0358                                                      ; /
0359               
0360      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0361               
0362      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0363                                                      ; calling TI Basic/External programs
0364               ;-----------------------------------------------------------------
0365               ; Farjump return stack                 @>af00-afff     (256 bytes)
0366               ;-----------------------------------------------------------------
0367      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0368                                                      ; Grows downwards from high to low.
0369               ;-----------------------------------------------------------------
0370               ; Index                                @>b000-bfff    (4096 bytes)
0371               ;-----------------------------------------------------------------
0372      B000     idx.top           equ  >b000           ; Top of index
0373      1000     idx.size          equ  4096            ; Index size
0374               ;-----------------------------------------------------------------
0375               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0376               ;-----------------------------------------------------------------
0377      C000     edb.top           equ  >c000           ; Editor buffer high memory
0378      1000     edb.size          equ  4096            ; Editor buffer size
0379               ;-----------------------------------------------------------------
0380               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0381               ;-----------------------------------------------------------------
0382      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0383      0960     fb.size           equ  80*30           ; Frame buffer size
0384      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0385                                                      ; / >d960->dcff
0386               ;-----------------------------------------------------------------
0387               ; Defaults area                        @>de00-dfff     (512 bytes)
0388               ;-----------------------------------------------------------------
0389      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0390      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0391      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0392               ;-----------------------------------------------------------------
0393               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0394               ;-----------------------------------------------------------------
0395      E000     cat.top           equ  >e000           ; Top of file catalog
0396      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0397      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0398      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0399      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0400      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0401      E00A     cat.nofilescol    equ  cat.top + 10    ; Number of files per column
0402      E00C     cat.currentpage   equ  cat.top + 12    ; Current page
0403      E00E     cat.totalpages    equ  cat.top + 14    ; Total number of pages
0404      E010     cat.previouspage  equ  cat.top + 16    ; Previous page
0405      E012     cat.shortcut.idx  equ  cat.top + 18    ; Index in catalog(current entry on page)
0406      E014     cat.norowscol     equ  cat.top + 20    ; Number of rows per column
0407      E016     cat.fullfname     equ  cat.top + 22    ; Device & filename string (80)
0408               ;-----------------------------------------------------------------
0409               ; Directory/File catalog pointers and numbers
0410               ;-----------------------------------------------------------------
0411      E066     cat.var1          equ  cat.top + 102   ; Temp variable 1
0412      E068     cat.var2          equ  cat.top + 104   ; Temp variable 2
0413      E06A     cat.var3          equ  cat.top + 106   ; Temp variable 3
0414      E06C     cat.var4          equ  cat.top + 108   ; Temp variable 4
0415      E06E     cat.var5          equ  cat.top + 110   ; Temp variable 5
0416      E070     cat.var6          equ  cat.top + 112   ; Temp variable 6
0417      E072     cat.var7          equ  cat.top + 114   ; Temp variable 7
0418      E074     cat.var8          equ  cat.top + 116   ; Temp variable 8
0419      E076     cat.ptrlist       equ  cat.top + 118   ; Pointer list to filenames (254=127*2)
0420      E174     cat.ftlist        equ  cat.top + 372   ; Filetype list (128)
0421      E1F4     cat.fslist        equ  cat.top + 500   ; Filesize size (256)
0422      E2F4     cat.rslist        equ  cat.top + 756   ; Record size list (128)
0423      E374     cat.barpos        equ  cat.top + 884   ; Color bar YX position (backup)
0424      E376     cat.barcol        equ  cat.top + 886   ; Color bar column 0-2
0425      E378     cat.free1         equ  cat.top + 888   ; **free** up to 954
0426               ;-----------------------------------------------------------------
0427               ; Directory/File catalog strings (always length byte included)
0428               ;-----------------------------------------------------------------
0429      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0430      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0431      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0432      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0433      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0434      0F00     cat.size          equ  3840            ; Catalog total size
0435               ;-----------------------------------------------------------------
0436               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0437               ;-----------------------------------------------------------------
0438      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0439      0100     cmdb.size         equ  256             ; Command buffer size
0440               ;-----------------------------------------------------------------
0441               ; Heap & Strings area                  @>f000-ffff    (4096 bytes)
0442               ;-----------------------------------------------------------------
0443      F000     heap.top          equ  >f000           ; 80 Current filename
0444      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0445      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0446               ;-----------------------------------------------------------------
0447               ; Stevie specific equates
0448               ;-----------------------------------------------------------------
0449      0000     fh.fopmode.none           equ  0        ; No file operation in progress
0450      0001     fh.fopmode.readfile       equ  1        ; Read file from disk to memory
0451      0002     fh.fopmode.writefile      equ  2        ; Save file from memory to disk
0452      0006     cmdb.rows                 equ  6        ; Number of rows in CMDB pane
0453      A028     rom0_kscan_out            equ  keycode1 ; Where to store value of key pressed
0454      9900     tv.colorize.reset         equ  >9900    ; Colorization off
0455      00FE     tv.1timeonly              equ  254      ; One-time only flag indicator
0456      0100     tv.sams.maxpage           equ  256      ; Max SAMS pages supported
                   < stevie_b3.asm
0029                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b3.asm
0030                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b3.asm
0031               
0032               ****************************************************s***********
0033               * BANK 3
0034               ********|*****|*********************|**************************
0035      6006     bankid  equ   bank3.rom             ; Set bank identifier to current bank
0036                       aorg  >6000
0037                       save  >6000,>8000           ; Save bank
0038                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 6024             data  rom.program2          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0C53                 stri 'STEVIE 1.6.3'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 362E     
     6034 33       
0057               
0061               
0065               
                   < stevie_b3.asm
0039               
0040               ***************************************************************
0041               * Step 1: Switch to bank 0 (uniform code accross all banks)
0042               ********|*****|*********************|**************************
0043                       aorg  kickstart.code1       ; >6040
0044 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0045               ***************************************************************
0046               * Step 2: Satisfy assembler, must know relocated code
0047               ********|*****|*********************|**************************
0048                       aorg  >2000                 ; Relocate to >2000
0049                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FCA     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7FF0     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 1024  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 101E  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1018  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 100B  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               ***************************************************************
0172               * file.load - RLoad binary file into VDP memory
0173               ***************************************************************
0174               *  bl   @file.load
0175               *       data P0
0176               *--------------------------------------------------------------
0177               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0178               *--------------------------------------------------------------
0179               *  bl   @xfile.load
0180               *
0181               *  R0 = Address of PAB in VDP RAM
0182               *--------------------------------------------------------------
0183               *  Output:
0184               *  tmp0     = Copy of VDP PAB byte 1 after operation
0185               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0186               *  tmp2 LSB = Copy of status register after operation
0187               ********|*****|*********************|**************************
0188               file.load:
0189 2E12 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0190               *--------------------------------------------------------------
0191               * Initialisation
0192               *--------------------------------------------------------------
0193               xfile.load:
0194 2E14 0649  22         dect  stack
0195 2E16 C64B  38         mov   r11,*stack            ; Save return address
0196               
0197 2E18 0205  24         li    tmp1,io.op.load       ; io.op.load
     2E1A 0005     
0198 2E1C 1005  14         jmp   _file.record.fop      ; Do file operation
0199               
0200               
0201               file.record.seek:
0202 2E1E 1000  14         nop                         ; Not yet supported
0203               
0204               file.image.save:
0205 2E20 1000  14         nop                         ; Not yet supported
0206               
0207               file.delete:
0208 2E22 1000  14         nop                         ; Not yet supported
0209               
0210               file.rename:
0211 2E24 1000  14         nop                         ; Not yet supported
0212               
0213               file.status:
0214 2E26 1000  14         nop
0215               
0216               
0217               
0218               ***************************************************************
0219               * _file.record.fop - File operation
0220               ***************************************************************
0221               * Called internally via JMP/B by file operations
0222               *--------------------------------------------------------------
0223               *  Input:
0224               *  r0   = Address of PAB in VDP RAM
0225               *  r1   = File type/mode
0226               *  tmp1 = File operation opcode
0227               *
0228               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0229               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0230               *--------------------------------------------------------------
0231               *  Output:
0232               *  tmp0     = Copy of VDP PAB byte 1 after operation
0233               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0234               *  tmp2 LSB = Copy of status register after operation
0235               *--------------------------------------------------------------
0236               *  Register usage:
0237               *  r0, r1, tmp0, tmp1, tmp2
0238               *--------------------------------------------------------------
0239               *  Remarks
0240               *  Private, only to be called from inside fio_level3 module
0241               *  via jump or branch instruction.
0242               *
0243               *  Uses @waux1 for backup/restore of memory word @>8322
0244               ********|*****|*********************|**************************
0245               _file.record.fop:
0246                       ;------------------------------------------------------
0247                       ; Write to PAB required?
0248                       ;------------------------------------------------------
0249 2E28 C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E2A A436     
0250                       ;------------------------------------------------------
0251                       ; Set file opcode in VDP PAB
0252                       ;------------------------------------------------------
0253 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0254               
0255 2E2E A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E30 A44E     
0256                                                   ; >00 = Data buffer in VDP RAM
0257                                                   ; >40 = Data buffer in CPU RAM
0258               
0259 2E32 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E34 22CC     
0260                                                   ; \ i  tmp0 = VDP target address
0261                                                   ; / i  tmp1 = Byte to write
0262                       ;------------------------------------------------------
0263                       ; Set file type/mode in VDP PAB
0264                       ;------------------------------------------------------
0265 2E36 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0266 2E38 0584  22         inc   tmp0                  ; Next byte in PAB
0267 2E3A C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E3C A44C     
0268               
0269 2E3E 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E40 22CC     
0270                                                   ; \ i  tmp0 = VDP target address
0271                                                   ; / i  tmp1 = Byte to write
0272                       ;------------------------------------------------------
0273                       ; Prepare for DSRLNK
0274                       ;------------------------------------------------------
0275 2E42 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E44 0009     
0276 2E46 C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E48 8356     
0277               *--------------------------------------------------------------
0278               * Call DSRLINK for doing file operation
0279               *--------------------------------------------------------------
0280 2E4A C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E4C 8322     
     2E4E 833C     
0281               
0282 2E50 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E52 A42A     
0283 2E54 1504  14         jgt   _file.record.fop.optimized
0284                                                   ; Optimized version
0285               
0286                       ;------------------------------------------------------
0287                       ; First IO call. Call standard DSRLNK
0288                       ;------------------------------------------------------
0289 2E56 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E58 2C4A     
0290 2E5A 0008                   data >8               ; \ i  p0 = >8 (DSR)
0291                                                   ; / o  r0 = Copy of VDP PAB byte 1
0292 2E5C 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0293               
0294                       ;------------------------------------------------------
0295                       ; Recurring IO call. Call optimized DSRLNK
0296                       ;------------------------------------------------------
0297               _file.record.fop.optimized:
0298 2E5E 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E60 2D7A     
0299               
0300               *--------------------------------------------------------------
0301               * Return PAB details to caller
0302               *--------------------------------------------------------------
0303               _file.record.fop.pab:
0304 2E62 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0305                                                   ; Upon DSRLNK return status register EQ bit
0306                                                   ; 1 = No file error
0307                                                   ; 0 = File error occured
0308               
0309 2E64 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E66 833C     
     2E68 8322     
0310               *--------------------------------------------------------------
0311               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0312               *--------------------------------------------------------------
0313 2E6A C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E6C A436     
0314 2E6E 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E70 0005     
0315 2E72 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E74 22E4     
0316 2E76 C144  30         mov   tmp0,tmp1             ; Move to destination
0317               *--------------------------------------------------------------
0318               * Get PAB byte 1 from VDP ram into tmp0 (status)
0319               *--------------------------------------------------------------
0320 2E78 C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0321                                                   ; as returned by DSRLNK
0322               *--------------------------------------------------------------
0323               * Exit
0324               *--------------------------------------------------------------
0325               ; If an error occured during the IO operation, then the
0326               ; equal bit in the saved status register (=tmp2) is set to 1.
0327               ;
0328               ; Upon return from this IO call you should basically test with:
0329               ;       coc   @wbit2,tmp2           ; Equal bit set?
0330               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0331               ;
0332               ; Then look for further details in the copy of VDP PAB byte 1
0333               ; in register tmp0, bits 13-15
0334               ;
0335               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0336               ;                                   ; calls, skip for type >A subprograms!)
0337               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0338               ;       jeq   my_error_handler
0339               *--------------------------------------------------------------
0340               _file.record.fop.exit:
0341 2E7A C2F9  46         mov   *stack+,r11           ; Pop R11
0342 2E7C 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E7E C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E80 0649  22         dect  stack
0038 2E82 C64B  38         mov   r11,*stack            ; Save return address
0039 2E84 0649  22         dect  stack
0040 2E86 C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E88 C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E8A 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E8C 0014     
0046               fg99.send.loop:
0047 2E8E 04E0  34         clr   @>6000                ; Signal new byte
     2E90 6000     
0048 2E92 0201  24         li    r1,>0038              ; >7000 >> 9
     2E94 0038     
0049 2E96 D070  44         movb  *r0+,r1
0050 2E98 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E9A 04D1  30         clr   *r1                   ; Send byte
0053 2E9C 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E9E 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2EA0 04E0  34         clr   @>6000                ; Done sending filename
     2EA2 6000     
0057 2EA4 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2EA6 0200  24         li    r0,>6000              ; check >6000->6200
     2EA8 6000     
0063 2EAA 0202  24         li    r2,>100
     2EAC 0100     
0064 2EAE C070  46 !       mov   *r0+, r1
0065 2EB0 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2EB2 0602  22         dec   r2
0067 2EB4 16FC  14         jne   -!
0068 2EB6 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EB8 C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EBA C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EBC 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EBE 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EC0 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EC2 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EC4 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EC6 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EC8 201C     
0029 2ECA 1602  14         jne   tmgr1a                ; No, so move on
0030 2ECC E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2ECE 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2ED0 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2ED2 2020     
0035 2ED4 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ED6 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ED8 2010     
0048 2EDA 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2EDC 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2EDE 200E     
0050 2EE0 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2EE2 0460  28         b     @kthread              ; Run kernel thread
     2EE4 2F5C     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EE6 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EE8 2014     
0056 2EEA 13EB  14         jeq   tmgr1
0057 2EEC 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EEE 2012     
0058 2EF0 16E8  14         jne   tmgr1
0059 2EF2 C120  38         mov   @wtiusr,tmp0
     2EF4 832E     
0060 2EF6 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EF8 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EFA 2F5A     
0065 2EFC C10A  30         mov   r10,tmp0
0066 2EFE 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2F00 00FF     
0067 2F02 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2F04 201C     
0068 2F06 1303  14         jeq   tmgr5
0069 2F08 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F0A 003C     
0070 2F0C 1002  14         jmp   tmgr6
0071 2F0E 0284  26 tmgr5   ci    tmp0,50
     2F10 0032     
0072 2F12 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F14 1001  14         jmp   tmgr8
0074 2F16 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F18 C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F1A 832C     
0079 2F1C 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F1E FF00     
0080 2F20 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F22 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F24 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F26 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F28 C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F2A 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F2C 830C     
     2F2E 830D     
0089 2F30 1608  14         jne   tmgr10                ; No, get next slot
0090 2F32 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F34 FF00     
0091 2F36 C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F38 C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F3A 8330     
0096 2F3C 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F3E C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F40 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F42 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F44 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F46 8315     
     2F48 8314     
0103 2F4A 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F4C 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F4E 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F50 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F52 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F54 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F56 FF00     
0109 2F58 10B4  14         jmp   tmgr1
0110 2F5A 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F5C E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F5E 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F60 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F62 2006     
0023 2F64 1602  14         jne   kthread_kb
0024 2F66 06A0  36         bl    @sdpla1               ; Run sound player
     2F68 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F6A 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F6C 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F6E 0460  28         b     @tmgr3                ; Exit
     2F70 2EE6     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F72 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F74 832E     
0018 2F76 E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F78 2012     
0019 2F7A 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EC2     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F7C 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F7E 832E     
0029 2F80 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F82 FEFF     
0030 2F84 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F86 C13B  46 mkslot  mov   *r11+,tmp0
0018 2F88 C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F8A C184  30         mov   tmp0,tmp2
0023 2F8C 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F8E A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F90 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F92 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F94 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F96 C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F98 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F9A 2022     
0035 2F9C 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F9E 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2FA0 05CB  22 mkslo1  inct  r11
0041 2FA2 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2FA4 C13B  46 clslot  mov   *r11+,tmp0
0053 2FA6 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2FA8 A120  38         a     @wtitab,tmp0          ; Add table base
     2FAA 832C     
0055 2FAC 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FAE 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FB0 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FB2 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FB4 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FB6 A120  38         a     @wtitab,tmp0          ; Add table base
     2FB8 832C     
0071 2FBA 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FBC C154  38         mov   *tmp0,tmp1
0073 2FBE 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FC0 FF00     
0074 2FC2 C505  38         mov   tmp1,*tmp0
0075 2FC4 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FC6 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FC8 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FCA 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FCC 0000     
0288 2FCE 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FD0 8300     
0289 2FD2 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FD4 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FD6 0202  20 runli2  li    r2,>8308
     2FD8 8308     
0294 2FDA 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FDC 0282  22         ci    r2,>8400
     2FDE 8400     
0296 2FE0 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FE2 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FE4 FFFF     
0301 2FE6 1602  14         jne   runli4                ; No, continue
0302 2FE8 0420  42         blwp  @0                    ; Yes, bye bye
     2FEA 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FEC C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FEE 833C     
0307 2FF0 04C1  14         clr   r1                    ; Reset counter
0308 2FF2 0202  20         li    r2,10                 ; We test 10 times
     2FF4 000A     
0309 2FF6 C0E0  30 runli5  mov   @vdps,r3
     2FF8 8802     
0310 2FFA 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FFC 2020     
0311 2FFE 1302  14         jeq   runli6
0312 3000 0581  14         inc   r1                    ; Increase counter
0313 3002 10F9  14         jmp   runli5
0314 3004 0602  14 runli6  dec   r2                    ; Next test
0315 3006 16F7  14         jne   runli5
0316 3008 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     300A 1250     
0317 300C 1202  14         jle   runli7                ; No, so it must be NTSC
0318 300E 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3010 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3012 06A0  32 runli7  bl    @loadmc
     3014 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 3016 04C1  14 runli9  clr   r1
0327 3018 04C2  14         clr   r2
0328 301A 04C3  14         clr   r3
0329 301C 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     301E A900     
0330 3020 020F  20         li    r15,vdpw              ; Set VDP write address
     3022 8C00     
0332 3024 06A0  32         bl    @mute                 ; Mute sound generators
     3026 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 3028 0280  22         ci    r0,>4a4a              ; Crash flag set?
     302A 4A4A     
0339 302C 1605  14         jne   runlia
0340 302E 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3030 228E     
0341 3032 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     3034 0000     
     3036 3000     
0346 3038 06A0  32 runlia  bl    @filv
     303A 228E     
0347 303C 0FC0             data  pctadr,spfclr,16      ; Load color table
     303E 00F4     
     3040 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3042 06A0  32         bl    @f18unl               ; Unlock the F18A
     3044 278A     
0355 3046 06A0  32         bl    @f18chk               ; Check if F18A is there \
     3048 27B4     
0356 304A 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     304C 27B4     
0357 304E 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3050 27B4     
0358 3052 06A0  32         bl    @f18lck               ; Lock the F18A again
     3054 27A0     
0359               
0360 3056 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     3058 2332     
0361 305A 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 305C 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     305E 22F8     
0375 3060 7F50             data  spvmod                ; Equate selected video mode table
0376 3062 0204  20         li    tmp0,spfont           ; Get font option
     3064 0000     
0377 3066 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 3068 1304  14         jeq   runlid                ; Yes, skip it
0379 306A 06A0  32         bl    @ldfnt
     306C 2360     
0380 306E 1900             data  fntadr,spfont         ; Load specified font
     3070 0000     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3072 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     3074 4A4A     
0385 3076 1602  14         jne   runlie                ; No, continue
0386 3078 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     307A 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 307C 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     307E 0040     
0391 3080 0460  28         b     @main                 ; Give control to main program
     3082 6046     
                   < stevie_b3.asm
0050                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 3084 0649  14         dect  stack
0029 3086 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 3088 0649  14         dect  stack
0031 308A C645  30         mov   tmp1,*stack           ; Push tmp1
0032 308C 0649  14         dect  stack
0033 308E C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3090 0649  14         dect  stack
0035 3092 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 3094 C13B  30         mov   *r11+,tmp0            ; P0
0040 3096 C17B  30         mov   *r11+,tmp1            ; P1
0041 3098 C1BB  30         mov   *r11+,tmp2            ; P2
0042 309A 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 309C 0649  14         dect  stack
0048 309E C644  30         mov   tmp0,*stack           ; Push tmp0
0049 30A0 0649  14         dect  stack
0050 30A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 30A4 0649  14         dect  stack
0052 30A6 C646  30         mov   tmp2,*stack           ; Push tmp2
0053 30A8 0649  14         dect  stack
0054 30AA C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30AC 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30AE 6000     
0060 30B0 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30B2 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30B4 A228     
0064 30B6 0647  14         dect  tmp3
0065 30B8 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30BA 0647  14         dect  tmp3
0067 30BC C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30BE C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30C0 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30C2 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30C4 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30C6 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30C8 0224  22         ai    tmp0,>0800
     30CA 0800     
0086 30CC 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30CE 0285  22         ci    tmp1,>ffff
     30D0 FFFF     
0095 30D2 1602  14         jne   !
0096 30D4 C160  34         mov   @trmpvector,tmp1
     30D6 A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30D8 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30DA 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30DC 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30DE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30E0 FFCE     
0111 30E2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30E4 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30E6 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30E8 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30EA A228     
0122 30EC C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30EE 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30F0 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30F2 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30F4 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30F6 028B  22         ci    r11,>6000
     30F8 6000     
0139 30FA 1104  14         jlt   rom.farjump.assert.lowmem
0140 30FC 028B  22         ci    r11,>7fff
     30FE 7FFF     
0141 3100 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 3102 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 3104 028B  22         ci    r11,>2000
     3106 2000     
0148 3108 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 310A 028B  22         ci    r11,>3fff
     310C 3FFF     
0150 310E 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3110 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3112 A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 3114 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 3116 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 3118 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 311A 0225  22         ai    tmp1,>0800
     311C 0800     
0171 311E 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3120 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3122 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3124 FFCE     
0178 3126 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3128 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 312A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 312C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 312E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3130 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3132 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3134 0649  14         dect  stack
0021 3136 C64B  30         mov   r11,*stack            ; Save return address
0022 3138 0649  14         dect  stack
0023 313A C644  30         mov   tmp0,*stack           ; Push tmp0
0024 313C 0649  14         dect  stack
0025 313E C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3140 0204  20         li    tmp0,fb.top
     3142 D000     
0030 3144 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     3146 A300     
0031 3148 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     314A A304     
0032 314C 04E0  34         clr   @fb.row               ; Current row=0
     314E A306     
0033 3150 04E0  34         clr   @fb.column            ; Current column=0
     3152 A30C     
0034               
0035 3154 0204  20         li    tmp0,colrow
     3156 0050     
0036 3158 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     315A A30E     
0037 315C 04E0  34         clr   @fb.vwco              ; Set view window column offset
     315E A310     
0038               
0039 3160 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3162 001C     
0040 3164 C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     3166 A31E     
0041               
0042 3168 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     316A 31D0     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 316C 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     316E A224     
0048 3170 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3172 A312     
0049 3174 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3176 A318     
0050 3178 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     317A A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 317C 06A0  32         bl    @film
     317E 2236     
0055 3180 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3182 0000     
     3184 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 3186 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 3188 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 318A C2F9  30         mov   *stack+,r11           ; Pop r11
0063 318C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 318E 0649  14         dect  stack
0025 3190 C64B  30         mov   r11,*stack            ; Save return address
0026 3192 0649  14         dect  stack
0027 3194 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3196 C120  34         mov   @parm1,tmp0
     3198 A006     
0032 319A A120  34         a     @fb.topline,tmp0
     319C A304     
0033 319E C804  38         mov   tmp0,@outparm1
     31A0 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 31A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 31A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 31A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 31A8 0649  14         dect  stack
0028 31AA C64B  30         mov   r11,*stack            ; Save return address
0029 31AC 0649  14         dect  stack
0030 31AE C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31B0 0649  14         dect  stack
0032 31B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31B4 C120  34         mov   @fb.row,tmp0
     31B6 A306     
0037 31B8 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31BA A30E     
0038 31BC A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31BE A30C     
0039 31C0 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31C2 A300     
0040 31C4 C805  38         mov   tmp1,@fb.current
     31C6 A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31CC C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31D0 0649  14         dect  stack
0026 31D2 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31D4 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31D6 A31E     
     31D8 A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31DA 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31DC A210     
0037 31DE 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31E0 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E2 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31E4 8820  50         c     @edb.special.file,@const.0
     31E6 A522     
     31E8 2000     
0044 31EA 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31EC 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31EE A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31F0 0760  38         abs   @tv.error.visible     ; Error area visible?
     31F2 A22A     
0051 31F4 1303  14         jeq   fb.calc.scrrows.exit
0052 31F6 6820  54         s     @tv.error.rows,@fb.scrrows
     31F8 A22C     
     31FA A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31FC C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3200 0649  14         dect  stack
0052 3202 C64B  30         mov   r11,*stack            ; Save return address
0053 3204 0649  14         dect  stack
0054 3206 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 3208 0204  20         li    tmp0,idx.top
     320A B000     
0059 320C C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     320E A502     
0060               
0061 3210 C120  34         mov   @tv.sams.b000,tmp0
     3212 A206     
0062 3214 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     3216 A600     
0063 3218 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     321A A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 321C 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     321E 0004     
0068 3220 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3222 A604     
0069               
0070 3224 06A0  32         bl    @_idx.sams.mapcolumn.on
     3226 3242     
0071                                                   ; Index in continuous memory region
0072               
0073 3228 06A0  32         bl    @film
     322A 2236     
0074 322C B000                   data idx.top,>00,idx.size * 5
     322E 0000     
     3230 5000     
0075                                                   ; Clear index
0076               
0077 3232 06A0  32         bl    @_idx.sams.mapcolumn.off
     3234 3276     
0078                                                   ; Restore memory window layout
0079               
0080 3236 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3238 A602     
     323A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 323C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 323E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3240 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3242 0649  14         dect  stack
0102 3244 C64B  30         mov   r11,*stack            ; Push return address
0103 3246 0649  14         dect  stack
0104 3248 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 324A 0649  14         dect  stack
0106 324C C645  30         mov   tmp1,*stack           ; Push tmp1
0107 324E 0649  14         dect  stack
0108 3250 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3252 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3254 A602     
0113 3256 0205  20         li    tmp1,idx.top
     3258 B000     
0114 325A 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     325C 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 325E 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3260 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3262 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3264 0225  22         ai    tmp1,>1000            ; Next memory region
     3266 1000     
0124 3268 0606  14         dec   tmp2                  ; Update loop counter
0125 326A 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 326C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 326E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3270 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3272 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3274 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3276 0649  14         dect  stack
0151 3278 C64B  30         mov   r11,*stack            ; Push return address
0152 327A 0649  14         dect  stack
0153 327C C644  30         mov   tmp0,*stack           ; Push tmp0
0154 327E 0649  14         dect  stack
0155 3280 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3282 0649  14         dect  stack
0157 3284 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3286 0649  14         dect  stack
0159 3288 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 328A 0205  20         li    tmp1,idx.top
     328C B000     
0164 328E 0206  20         li    tmp2,5                ; Always 5 pages
     3290 0005     
0165 3292 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3294 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3296 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3298 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     329A 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 329C 0225  22         ai    tmp1,>1000            ; Next memory region
     329E 1000     
0176 32A0 0606  14         dec   tmp2                  ; Update loop counter
0177 32A2 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 32A4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 32A6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 32A8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32AC C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32AE 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32B0 0649  14         dect  stack
0212 32B2 C64B  30         mov   r11,*stack            ; Save return address
0213 32B4 0649  14         dect  stack
0214 32B6 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32B8 0649  14         dect  stack
0216 32BA C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32BC 0649  14         dect  stack
0218 32BE C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32C0 C184  18         mov   tmp0,tmp2             ; Line number
0223 32C2 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32C4 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32C6 0800     
0225               
0226 32C8 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32CA 0A16  18         sla   tmp2,1                ; line number * 2
0231 32CC C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32CE A018     
0232               
0233 32D0 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32D2 A602     
0234 32D4 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32D6 A600     
0235               
0236 32D8 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32DA C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32DC A600     
0242 32DE C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32E0 A206     
0243 32E2 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32E4 0205  20         li    tmp1,>b000            ; Memory window for index page
     32E6 B000     
0246               
0247 32E8 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32EA 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32EC 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32EE A604     
0254 32F0 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32F2 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32F4 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32F6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32FC C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3300 0649  14         dect  stack
0023 3302 C64B  30         mov   r11,*stack            ; Save return address
0024 3304 0649  14         dect  stack
0025 3306 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3308 0204  20         li    tmp0,edb.top          ; \
     330A C000     
0030 330C C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     330E A500     
0031 3310 C804  38         mov   tmp0,@edb.next_free.ptr
     3312 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3314 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     3316 A50A     
0035               
0036 3318 0204  20         li    tmp0,1
     331A 0001     
0037 331C C804  38         mov   tmp0,@edb.lines       ; Lines=1
     331E A504     
0038               
0039 3320 0720  34         seto  @edb.block.m1         ; Reset block start line
     3322 A50E     
0040 3324 0720  34         seto  @edb.block.m2         ; Reset block end line
     3326 A510     
0041               
0042 3328 C820  54         mov   @tv.lineterm,@edb.lineterm
     332A A236     
     332C A524     
0043                                                   ; Set line termination char from default
0044               
0045 332E 0204  20         li    tmp0,txt.newfile      ; "New file"
     3330 3BAA     
0046 3332 C804  38         mov   tmp0,@edb.filename.ptr
     3334 A514     
0047               
0048 3336 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3338 A440     
0049 333A 04E0  34         clr   @fh.kilobytes.prev    ; /
     333C A45C     
0050               
0051 333E 0204  20         li    tmp0,txt.filetype.none
     3340 3CC6     
0052 3342 C804  38         mov   tmp0,@edb.filetype.ptr
     3344 A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 3346 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 3348 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 334A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 334C 0649  14         dect  stack
0023 334E C64B  30         mov   r11,*stack            ; Save return address
0024 3350 0649  14         dect  stack
0025 3352 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3354 0649  14         dect  stack
0027 3356 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3358 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     335A EF00     
0032 335C C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     335E A700     
0033               
0034 3360 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3362 A702     
0035 3364 0204  20         li    tmp0,6
     3366 0006     
0036 3368 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     336A A706     
0037 336C C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     336E A708     
0038               
0039 3370 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3372 A718     
0040 3374 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3376 A71A     
0041 3378 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     337A A72C     
0042 337C 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     337E A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3380 0204  20         li    tmp0,pane.botrow      ; \
     3382 001D     
0047 3384 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3386 A706     
0048 3388 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     338A 833A     
0049 338C C105  18         mov   tmp1,tmp0             ; | Get result
0050 338E 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3390 0980     
0051 3392 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3394 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 3396 06A0  32         bl    @film
     3398 2236     
0056 339A EF00                   data  cmdb.top,>00,cmdb.size
     339C 0000     
     339E 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 33A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 33A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 33A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 33A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 33A8 0649  14         dect  stack
0023 33AA C64B  30         mov   r11,*stack            ; Save return address
0024 33AC 0649  14         dect  stack
0025 33AE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33B0 0649  14         dect  stack
0027 33B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33B4 0649  14         dect  stack
0029 33B6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33B8 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33BA A22A     
0034 33BC 0204  20         li    tmp0,3
     33BE 0003     
0035 33C0 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33C2 A22C     
0036               
0037 33C4 06A0  32         bl    @film
     33C6 2236     
0038 33C8 A238                   data tv.error.msg,0,160
     33CA 0000     
     33CC 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33CE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33D0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33D4 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33D6 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33D8 0649  14         dect  stack
0023 33DA C64B  30         mov   r11,*stack            ; Save return address
0024 33DC 0649  14         dect  stack
0025 33DE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33E0 0649  14         dect  stack
0027 33E2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33E4 0649  14         dect  stack
0029 33E6 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33E8 0204  20         li    tmp0,1                ; \ Set default color scheme
     33EA 0001     
0034 33EC C804  38         mov   tmp0,@tv.colorscheme  ; /
     33EE A212     
0035               
0036 33F0 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33F2 A226     
0037 33F4 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33F6 200C     
0038               
0039 33F8 0204  20         li    tmp0,fj.bottom
     33FA B000     
0040 33FC C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33FE A228     
0041               
0042 3400 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     3402 A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 3404 06A0  32         bl    @cpym2m
     3406 253A     
0047 3408 3D9C                   data def.printer.fname,tv.printer.fname,7
     340A DE00     
     340C 0007     
0048               
0049 340E 06A0  32         bl    @cpym2m
     3410 253A     
0050 3412 3DA3                   data def.clip.fname.a,tv.clip.fname,10
     3414 DE50     
     3416 000A     
0051               
0052 3418 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     341A A50C     
0053               
0054 341C 0204  20         li    tmp0,13               ; \
     341E 000D     
0055 3420 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3422 A236     
0056                                                   ; / LSB = 13 Carriage return
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               tv.init.exit:
0061 3424 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 3426 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3428 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 342A C2F9  30         mov   *stack+,r11           ; Pop R11
0065 342C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 342E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3430 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3432 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3434 3084     
0028 3436 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3438 7F70                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 343A 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 343C 0649  14         dect  stack
0025 343E C64B  30         mov   r11,*stack            ; Push return address
0026 3440 0649  14         dect  stack
0027 3442 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3444 0649  14         dect  stack
0029 3446 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3448 0649  14         dect  stack
0031 344A C646  30         mov   tmp2,*stack           ; Push tmp2
0032 344C 0649  14         dect  stack
0033 344E C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3450 0649  14         dect  stack
0035 3452 C640  30         mov   r0,*stack             ; Push r0
0036 3454 0649  14         dect  stack
0037 3456 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3458 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     345A A006     
0042 345C 04C5  14         clr   tmp1                  ; Termination character >00
0043 345E 04E0  34         clr   @outparm1             ; Reset output parameters
     3460 A018     
0044 3462 04E0  34         clr   @outparm2             ; Reset output parameters
     3464 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3466 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3468 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 346A C1A0  30         mov   @waux1,tmp2           ; Get string length
     346C 833C     
0056 346E 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3470 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3472 0005     
0058 3474 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3476 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3478 A006     
0063               
0064 347A A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 347C 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     347E FFF6     
0066 3480 0746  18         abs   tmp2                  ; /
0067               
0068 3482 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 3484 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3486 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3488 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 348A 0285  22         ci    tmp1,32               ; Blank ?
     348C 0020     
0080 348E 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3490 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3492 FFD0     
0085 3494 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3496 0285  22         ci    tmp1,9
     3498 0009     
0087 349A 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 349C C026  34         mov   @tv.uint16.mpy(tmp2),r0
     349E 34CA     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 34A0 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 34A2 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 34A4 05C6  14         inct  tmp2                  ; Update loop counter
0102 34A6 0286  22         ci    tmp2,8                ; Last digit done?
     34A8 0008     
0103 34AA 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34AC 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34AE 04E0  34         clr   @outparm1             ; Empty uint16
     34B0 A018     
0110 34B2 0720  34         seto  @outparm2             ; Invalid input string
     34B4 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34B6 C807  38         mov   tmp3,@outparm1
     34B8 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34BA C079  30         mov   *stack+,r1            ; Pop r1
0121 34BC C039  30         mov   *stack+,r0            ; Pop r0
0122 34BE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34C0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34C8 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34CA 2710             data  10000,1000,100,10,1
     34CC 03E8     
     34CE 0064     
     34D0 000A     
     34D2 0001     
0133               
                   < ram.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34D4 0649  14         dect  stack
0022 34D6 C64B  30         mov   r11,*stack            ; Save return address
0023 34D8 0649  14         dect  stack
0024 34DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34DC 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34DE 2A56     
0029 34E0 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34E2 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34E4 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34E5   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34E6 0204  20         li    tmp0,uint16.unpacked
     34E8 A02C     
0035 34EA 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34EC 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34EE 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34F0 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34F2 2AAE     
0040 34F4 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34F6 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34F8 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34FC C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 3500 0649  14         dect  stack
0031 3502 C64B  30         mov   r11,*stack            ; Push return address
0032 3504 0649  14         dect  stack
0033 3506 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 3508 0649  14         dect  stack
0035 350A C645  30         mov   tmp1,*stack           ; Push tmp1
0036 350C 0649  14         dect  stack
0037 350E C646  30         mov   tmp2,*stack           ; Push tmp2
0038 3510 0649  14         dect  stack
0039 3512 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 3514 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3516 A006     
0044 3518 D194  26         movb  *tmp0,tmp2            ; /
0045 351A 0986  32         srl   tmp2,8                ; Right align
0046 351C C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 351E 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3520 A008     
0049 3522 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 3524 C120  34         mov   @parm1,tmp0           ; Get source address
     3526 A006     
0054 3528 C160  34         mov   @parm4,tmp1           ; Get destination address
     352A A00C     
0055 352C 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 352E 0649  14         dect  stack
0058 3530 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 3532 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3534 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 3536 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 3538 C120  34         mov   @parm2,tmp0           ; Get requested length
     353A A008     
0070 353C 0A84  32         sla   tmp0,8                ; Left align
0071 353E C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3540 A00C     
0072 3542 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 3544 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 3546 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 3548 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     354A A008     
0079 354C 6187  18         s     tmp3,tmp2             ; |
0080 354E 0586  14         inc   tmp2                  ; /
0081               
0082 3550 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3552 A00A     
0083 3554 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 3556 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 3558 0606  14         dec   tmp2                  ; Update loop counter
0090 355A 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 355C C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     355E A00C     
     3560 A018     
0093 3562 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 3564 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3566 FFCE     
0099 3568 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     356A 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 356C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 356E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 3570 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3572 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 3574 C2F9  30         mov   *stack+,r11           ; Pop r11
0109 3576 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3578 0649  14         dect  stack
0023 357A C64B  30         mov   r11,*stack            ; Save return address
0024 357C 0649  14         dect  stack
0025 357E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3580 0649  14         dect  stack
0027 3582 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3584 C120  34         mov   @parm1,tmp0           ; Get line number
     3586 A006     
0032 3588 C160  34         mov   @parm2,tmp1           ; Get pointer
     358A A008     
0033 358C 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 358E 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3590 0FFF     
0039 3592 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3594 06E0  34         swpb  @parm3
     3596 A00A     
0044 3598 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     359A A00A     
0045 359C 06E0  34         swpb  @parm3                ; \ Restore original order again,
     359E A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 35A0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35A2 32B0     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 35A4 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     35A6 A018     
0056 35A8 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35AA B000     
0057 35AC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35AE A018     
0058 35B0 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35B2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35B4 32B0     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35B6 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35B8 A018     
0068 35BA 04E4  34         clr   @idx.top(tmp0)        ; /
     35BC B000     
0069 35BE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35C0 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35C8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35CA 0649  14         dect  stack
0022 35CC C64B  30         mov   r11,*stack            ; Save return address
0023 35CE 0649  14         dect  stack
0024 35D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35D2 0649  14         dect  stack
0026 35D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35D6 0649  14         dect  stack
0028 35D8 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35DA C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35DC A006     
0033               
0034 35DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35E0 32B0     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35E2 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35E4 A018     
0039 35E6 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35E8 B000     
0040               
0041 35EA 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35EC C185  18         mov   tmp1,tmp2             ; \
0047 35EE 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35F0 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35F2 00FF     
0052 35F4 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35F6 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35F8 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35FA C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35FC A018     
0059 35FE C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3600 A01A     
0060 3602 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3604 04E0  34         clr   @outparm1
     3606 A018     
0066 3608 04E0  34         clr   @outparm2
     360A A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 360C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 360E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3610 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3612 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3614 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3616 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3618 B000     
0018 361A C144  18         mov   tmp0,tmp1             ; a = current slot
0019 361C 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 361E CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3620 0606  14         dec   tmp2                  ; tmp2--
0026 3622 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3624 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3626 0649  14         dect  stack
0047 3628 C64B  30         mov   r11,*stack            ; Save return address
0048 362A 0649  14         dect  stack
0049 362C C644  30         mov   tmp0,*stack           ; Push tmp0
0050 362E 0649  14         dect  stack
0051 3630 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3632 0649  14         dect  stack
0053 3634 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3636 0649  14         dect  stack
0055 3638 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 363A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     363C A006     
0060               
0061 363E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3640 32B0     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3642 C120  34         mov   @outparm1,tmp0        ; Index offset
     3644 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3646 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3648 A008     
0070 364A 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 364C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     364E A006     
0074 3650 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3652 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3654 B000     
0081 3656 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3658 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 365A C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     365C A008     
0088 365E 0287  22         ci    tmp3,2048
     3660 0800     
0089 3662 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3664 06A0  32         bl    @_idx.sams.mapcolumn.on
     3666 3242     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3668 C120  34         mov   @parm1,tmp0           ; Restore line number
     366A A006     
0103 366C 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 366E 06A0  32         bl    @_idx.entry.delete.reorg
     3670 3616     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3672 06A0  32         bl    @_idx.sams.mapcolumn.off
     3674 3276     
0111                                                   ; Restore memory window layout
0112               
0113 3676 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3678 06A0  32         bl    @_idx.entry.delete.reorg
     367A 3616     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 367C 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 367E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3680 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3682 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3684 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3686 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3688 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 368A 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     368C 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 368E 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3690 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3692 FFCE     
0027 3694 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3696 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3698 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     369A B000     
0032 369C C144  18         mov   tmp0,tmp1             ; a = current slot
0033 369E 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 36A0 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 36A2 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 36A4 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 36A6 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 36A8 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36AA 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36AC AFFC     
0043 36AE 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36B0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36B2 FFCE     
0049 36B4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36B6 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36B8 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36BA 0644  14         dect  tmp0                  ; Move pointer up
0056 36BC 0645  14         dect  tmp1                  ; Move pointer up
0057 36BE 0606  14         dec   tmp2                  ; Next index entry
0058 36C0 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36C2 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36C4 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36C6 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36C8 0649  14         dect  stack
0089 36CA C64B  30         mov   r11,*stack            ; Save return address
0090 36CC 0649  14         dect  stack
0091 36CE C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36D0 0649  14         dect  stack
0093 36D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36D4 0649  14         dect  stack
0095 36D6 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36D8 0649  14         dect  stack
0097 36DA C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36DC C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36DE A008     
0102 36E0 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36E2 A006     
0103 36E4 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36E6 C1E0  34         mov   @parm2,tmp3
     36E8 A008     
0110 36EA 0287  22         ci    tmp3,2048
     36EC 0800     
0111 36EE 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36F0 06A0  32         bl    @_idx.sams.mapcolumn.on
     36F2 3242     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36F4 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36F6 A008     
0123 36F8 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36FA 06A0  32         bl    @_idx.entry.insert.reorg
     36FC 368A     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36FE 06A0  32         bl    @_idx.sams.mapcolumn.off
     3700 3276     
0131                                                   ; Restore memory window layout
0132               
0133 3702 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3704 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3706 A008     
0139               
0140 3708 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     370A 32B0     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 370C C120  34         mov   @outparm1,tmp0        ; Index offset
     370E A018     
0145               
0146 3710 06A0  32         bl    @_idx.entry.insert.reorg
     3712 368A     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3714 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3716 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3718 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 371A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 371C C2F9  30         mov   *stack+,r11           ; Pop r11
0160 371E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3720 0649  14         dect  stack
0022 3722 C64B  30         mov   r11,*stack            ; Push return address
0023 3724 0649  14         dect  stack
0024 3726 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3728 0649  14         dect  stack
0026 372A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 372C 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     372E A504     
0031 3730 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3732 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3734 FFCE     
0037 3736 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3738 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 373A C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     373C A006     
0043               
0044 373E 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3740 35CA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3742 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3744 A01A     
0050 3746 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3748 A018     
0051 374A 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 374C 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     374E A208     
0057 3750 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3752 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3754 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3756 C820  54         mov   @outparm2,@tv.sams.c000
     3758 A01A     
     375A A208     
0066                                                   ; Set page in shadow registers
0067               
0068 375C C820  54         mov   @outparm2,@edb.sams.page
     375E A01A     
     3760 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3762 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3764 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3766 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3768 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 376A 0649  14         dect  stack
0022 376C C64B  30         mov   r11,*stack            ; Push return address
0023 376E 0649  14         dect  stack
0024 3770 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3772 0649  14         dect  stack
0026 3774 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3776 04E0  34         clr   @outparm1             ; Reset length
     3778 A018     
0031 377A 04E0  34         clr   @outparm2             ; Reset SAMS bank
     377C A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 377E C120  34         mov   @parm1,tmp0           ; \
     3780 A006     
0036 3782 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3784 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3786 A504     
0039 3788 1201  14         jle   !                     ; No, continue processing
0040 378A 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 378C C120  34 !       mov   @parm1,tmp0           ; Get line
     378E A006     
0046               
0047 3790 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3792 3720     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3794 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3796 A018     
0053 3798 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 379A C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 379C C805  38         mov   tmp1,@outparm1        ; Save length
     379E A018     
0060 37A0 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 37A2 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     37A4 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 37A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 37A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37AA C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37AC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37AE 0649  14         dect  stack
0021 37B0 C64B  30         mov   r11,*stack            ; Save return address
0022 37B2 0649  14         dect  stack
0023 37B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37B6 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37B8 A304     
0028 37BA A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37BC A306     
0029 37BE C804  38         mov   tmp0,@parm1
     37C0 A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37C2 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37C4 376A     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37C6 C820  54         mov   @outparm1,@fb.row.length
     37C8 A018     
     37CA A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37CE C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37D0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37D2 0649  14         dect  stack
0021 37D4 C64B  30         mov   r11,*stack            ; Save return address
0022 37D6 0649  14         dect  stack
0023 37D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37DA 0649  14         dect  stack
0025 37DC C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37DE C120  34         mov   @edb.next_free.ptr,tmp0
     37E0 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37E2 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37E4 0FFF     
0035 37E6 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37E8 0052     
0036 37EA 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37EC 0FF0     
0037 37EE 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37F0 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37F2 A51C     
0043 37F4 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37F6 A500     
     37F8 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37FA C120  34         mov   @edb.sams.hipage,tmp0
     37FC A51C     
0050 37FE C160  34         mov   @edb.top.ptr,tmp1
     3800 A500     
0051 3802 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3804 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3806 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3808 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     380A FFCE     
0061 380C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     380E 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3810 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3812 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3814 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3816 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3818 0649  14         dect  stack
0022 381A C64B  30         mov   r11,*stack            ; Push return address
0023 381C 0649  14         dect  stack
0024 381E C660  42         mov   @wyx,*stack           ; Push cursor position
     3820 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3822 06A0  32         bl    @hchar
     3824 2832     
0029 3826 0032                   byte 0,50,32,30
     3828 201E     
0030 382A FFFF                   data EOL              ; Clear message
0031               
0032 382C 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     382E A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3830 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3832 832A     
0038 3834 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3836 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0043                       copy  "fg99.run.asm"              ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 3838 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     383A 2806     
0028               
0029 383C 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     383E 22F8     
0030 3840 7F5A                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 3842 06A0  32         bl    @scroff               ; Turn off screen
     3844 26E6     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 3846 04E0  34         clr   @magic.str.w1
     3848 A000     
0040 384A 04E0  34         clr   @magic.str.w2
     384C A002     
0041 384E 04E0  34         clr   @magic.str.w3
     3850 A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 3852 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3854 A232     
0046 3856 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     3858 2E80     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 385A 020C  20         li    r12,>1e00             ; SAMS CRU address
     385C 1E00     
0053 385E 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 3860 0420  42         blwp @0                     ; Return to monitor
     3862 0000     
                   < ram.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 3864 0649  14         dect  stack
0009 3866 C64B  30         mov   r11,*stack            ; Save return address
0010 3868 0649  14         dect  stack
0011 386A C644  30         mov   tmp0,*stack           ; Push tmp0
0012 386C 0649  14         dect  stack
0013 386E C645  30         mov   tmp1,*stack           ; Push tmp1
0014 3870 0649  14         dect  stack
0015 3872 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 3874 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     3876 A224     
0020               
0021 3878 0284  22         ci    tmp0,pane.focus.fb
     387A 0000     
0022 387C 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 387E 0284  22         ci    tmp0,pane.focus.cmdb
     3880 0001     
0025 3882 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 3884 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3886 FFCE     
0031 3888 06A0  32         bl    @cpu.crash            ; / Halt system.
     388A 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 388C C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     388E A70A     
     3890 832A     
0037 3892 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3894 2020     
0038 3896 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3898 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 389A 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 389C E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     389E 2020     
0048 38A0 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     38A2 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 38A4 C160  34         mov   @tv.ruler.visible,tmp1
     38A6 A210     
0056 38A8 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 38AA 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     38AC 1000     
0058 38AE 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 38B0 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     38B2 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 38B4 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38B6 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38B8 C160  34         mov   @tv.ruler.visible,tmp1
     38BA A210     
0071                                                   ; Ruler visible?
0072 38BC 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38BE C160  34         mov   @cmdb.visible,tmp1
     38C0 A702     
0076 38C2 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38C4 FFFF     
0077 38C6 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38C8 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38CA FF00     
0081 38CC 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38CE 00F0     
0082 38D0 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38D2 A05A     
0083               
0084 38D4 C120  34         mov   @ramsat,tmp0
     38D6 A056     
0085 38D8 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38DA 00FF     
0086 38DC 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38DE 0800     
0087 38E0 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38E2 A05E     
0088               
0089 38E4 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38E6 04C5  14         clr   tmp1
0095 38E8 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38EA A05D     
0096                                                   ; / by transparant color
0097 38EC D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38EE A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38F0 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38F2 24E6     
0104 38F4 1300                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38F6 A056     
     38F8 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 3900 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 3902 0460  28         b     @slotok               ; Exit task
     3904 2F3E     
                   < ram.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 3906 0649  14         dect  stack
0009 3908 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 390A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     390C 3084     
0014 390E 600C                   data bank6.rom        ; | i  p0 = bank address
0015 3910 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0016 3912 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 3914 C2F9  30         mov   *stack+,r11           ; Pop r11
0022 3916 0460  28         b     @slotok               ; Exit task
     3918 2F3E     
                   < ram.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 391A C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     391C A226     
0010 391E 1301  14         jeq   task.oneshot.exit
0011               
0012 3920 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3922 0460  28         b     @slotok                ; Exit task
     3924 2F3E     
                   < ram.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3926 0000             data  >0000,>8201           ; Cursor
     3928 8201     
0014 392A 0000             data  >0000,>8301           ; Current line indicator     <
     392C 8301     
0015 392E 0820             data  >0820,>8401           ; Current column indicator   v
     3930 8401     
0016               nosprite:
0017 3932 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               ***************************************************************
0021               * Stevie color schemes table
0022               *--------------------------------------------------------------
0023               * ;
0024               * ; Word 1
0025               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0026               * ; B  MSB  low-nibble     Background color text line in frame buffer
0027               * ; C  LSB  high-nibble    Foreground color top/bottom line
0028               * ; D  LSB  low-nibble     Background color top/bottom line
0029               * ;
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ;
0036               * ; Word 3
0037               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0038               * ; J  MSB  low-nibble     Background color busy top/bottom line
0039               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0040               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0041               * ;
0042               * ; Word 4
0043               * ; M  MSB  high-nibble    Foreground color command buffer header line
0044               * ; N  MSB  low-nibble     Background color command buffer header line
0045               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0046               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0047               *
0048               * ; Colors
0049               * ; 0  Transparant
0050               * ; 1  black
0051               * ; 2  Green
0052               * ; 3  Light Green
0053               * ; 4  Blue
0054               * ; 5  Light Blue
0055               * ; 6  Dark Red
0056               * ; 7  Cyan
0057               * ; 8  Red
0058               * ; 9  Light Red
0059               * ; A  Yellow
0060               * ; B  Light Yellow
0061               * ; C  Dark Green
0062               * ; D  Magenta
0063               * ; E  Grey
0064               * ; F  White
0065               *--------------------------------------------------------------
0066      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0067               
0068               tv.colorscheme.table:
0069                       ;                             ;
0070                       ;      ABCD  EFGH  IJKL  MNOP ;
0071 3934 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     3936 F171     
     3938 1B1F     
     393A 7111     
0072 393C 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     393E 21FF     
     3940 F112     
     3942 21FF     
0073 3944 A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     3946 F0FF     
     3948 1F1A     
     394A F1FF     
0074 394C 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     394E 1E11     
     3950 1EE1     
     3952 1E11     
0075 3954 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     3956 1511     
     3958 1F1F     
     395A 1511     
0076 395C 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     395E 1311     
     3960 1331     
     3962 1311     
0077 3964 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     3966 1011     
     3968 0171     
     396A 1711     
0078 396C 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     396E F0FF     
     3970 1F12     
     3972 F1F6     
0079 3974 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     3976 1011     
     3978 F1F1     
     397A 1F11     
0080 397C 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     397E A111     
     3980 1F1F     
     3982 F11F     
0081 3984 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     3986 1911     
     3988 1991     
     398A 1911     
0082 398C FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     398E 1D11     
     3990 FDDF     
     3992 1D11     
0083                       even
0084               
0085               ***************************************************************
0086               * Tab positions
0087               ********|*****|*********************|**************************
0088               tv.tabs.table.lr:
0089 3994 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3996 0C19     
0090 3998 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     399A 3B4F     
0091 399C FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     399E 0000     
0092                                                   ; /   >ff means end-of-list.
0093               
0094               tv.tabs.table.rl:
0095 39A0 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     39A2 2D1E     
0096 39A4 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     39A6 0700     
0097 39A8 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     39AA 0000     
0098                                                   ; /   >ff means end-of-list.
0099               
0100               ***************************************************************
0101               * Constants for numbers 0-10
0102               ********|*****|*********************|**************************
0103      2000     const.0       equ   w$0000          ; 0
0104      2002     const.1       equ   w$0001          ; 1
0105      2004     const.2       equ   w$0002          ; 2
0106 39AC 0003     const.3       data  3               ; 3
0107      2006     const.4       equ   w$0004          ; 4
0108 39AE 0005     const.5       data  5               ; 5
0109 39B0 0006     const.6       data  6               ; 6
0110 39B2 0007     const.7       data  7               ; 7
0111      2008     const.8       equ   w$0008          ; 8
0112 39B4 0009     const.9       data  9               ; 9
0113 39B6 000A     const.10      data  10              ; 10 ; A
0114 39B8 000B     const.11      data  11              ; 11 ; B
0115 39BA 000C     const.12      data  12              ; 12 ; C
0116 39BC 000D     const.13      data  13              ; 13 ; D
0117 39BE 000E     const.14      data  14              ; 14 ; E
0118 39C0 000F     const.15      data  15              ; 15 ; F
0119 39C2 0020     const.32      data  32              ; 32
0120 39C4 0050     const.80      data  80              ; 80
                   < ram.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 39C6 012C     txt.delim          stri ','
0008                                  even
0009 39C8 0520     txt.bottom         stri '  BOT'
     39CA 2042     
     39CC 4F54     
0010                                  even
0011 39CE 044F     txt.ovrwrite       stri 'OVR '
     39D0 5652     
     39D2 20       
0012                                  even
0013 39D4 0449     txt.insert         stri 'INS '
     39D6 4E53     
     39D8 20       
0014                                  even
0015 39DA 0449     txt.autoinsert     stri 'INS+'
     39DC 4E53     
     39DE 2B       
0016                                  even
0017 39E0 012A     txt.star           stri '*'
0018                                  even
0019 39E2 0A4C     txt.loading        stri 'Loading...'
     39E4 6F61     
     39E6 6469     
     39E8 6E67     
     39EA 2E2E     
     39EC 2E       
0020                                  even
0021 39EE 0A53     txt.saving         stri 'Saving....'
     39F0 6176     
     39F2 696E     
     39F4 672E     
     39F6 2E2E     
     39F8 2E       
0022                                  even
0023 39FA 1250     txt.printing       stri 'Printing file.....'
     39FC 7269     
     39FE 6E74     
     3A00 696E     
     3A02 6720     
     3A04 6669     
     3A06 6C65     
     3A08 2E2E     
     3A0A 2E2E     
     3A0C 2E       
0024                                  even
0025 3A0E 1244     txt.block.del      stri 'Deleting block....'
     3A10 656C     
     3A12 6574     
     3A14 696E     
     3A16 6720     
     3A18 626C     
     3A1A 6F63     
     3A1C 6B2E     
     3A1E 2E2E     
     3A20 2E       
0026                                  even
0027 3A22 1143     txt.block.copy     stri 'Copying block....'
     3A24 6F70     
     3A26 7969     
     3A28 6E67     
     3A2A 2062     
     3A2C 6C6F     
     3A2E 636B     
     3A30 2E2E     
     3A32 2E2E     
0028                                  even
0029 3A34 104D     txt.block.move     stri 'Moving block....'
     3A36 6F76     
     3A38 696E     
     3A3A 6720     
     3A3C 626C     
     3A3E 6F63     
     3A40 6B2E     
     3A42 2E2E     
     3A44 2E       
0030                                  even
0031 3A46 1053     txt.block.save     stri 'Saving block....'
     3A48 6176     
     3A4A 696E     
     3A4C 6720     
     3A4E 626C     
     3A50 6F63     
     3A52 6B2E     
     3A54 2E2E     
     3A56 2E       
0032                                  even
0033 3A58 1843     txt.block.clip     stri 'Copying to clipboard....'
     3A5A 6F70     
     3A5C 7969     
     3A5E 6E67     
     3A60 2074     
     3A62 6F20     
     3A64 636C     
     3A66 6970     
     3A68 626F     
     3A6A 6172     
     3A6C 642E     
     3A6E 2E2E     
     3A70 2E       
0034                                  even
0035 3A72 1250     txt.block.print    stri 'Printing block....'
     3A74 7269     
     3A76 6E74     
     3A78 696E     
     3A7A 6720     
     3A7C 626C     
     3A7E 6F63     
     3A80 6B2E     
     3A82 2E2E     
     3A84 2E       
0036                                  even
0037 3A86 1343     txt.clearmem       stri 'Clearing memory....'
     3A88 6C65     
     3A8A 6172     
     3A8C 696E     
     3A8E 6720     
     3A90 6D65     
     3A92 6D6F     
     3A94 7279     
     3A96 2E2E     
     3A98 2E2E     
0038                                  even
0039 3A9A 1352     txt.readdir        stri 'Reading catalog....'
     3A9C 6561     
     3A9E 6469     
     3AA0 6E67     
     3AA2 2063     
     3AA4 6174     
     3AA6 616C     
     3AA8 6F67     
     3AAA 2E2E     
     3AAC 2E2E     
0040                                  even
0041 3AAE 0E4C     txt.done.load      stri 'Load completed'
     3AB0 6F61     
     3AB2 6420     
     3AB4 636F     
     3AB6 6D70     
     3AB8 6C65     
     3ABA 7465     
     3ABC 64       
0042                                  even
0043 3ABE 1049     txt.done.insert    stri 'Insert completed'
     3AC0 6E73     
     3AC2 6572     
     3AC4 7420     
     3AC6 636F     
     3AC8 6D70     
     3ACA 6C65     
     3ACC 7465     
     3ACE 64       
0044                                  even
0045 3AD0 1041     txt.done.append    stri 'Append completed'
     3AD2 7070     
     3AD4 656E     
     3AD6 6420     
     3AD8 636F     
     3ADA 6D70     
     3ADC 6C65     
     3ADE 7465     
     3AE0 64       
0046                                  even
0047 3AE2 0E53     txt.done.save      stri 'Save completed'
     3AE4 6176     
     3AE6 6520     
     3AE8 636F     
     3AEA 6D70     
     3AEC 6C65     
     3AEE 7465     
     3AF0 64       
0048                                  even
0049 3AF2 0E43     txt.done.copy      stri 'Copy completed'
     3AF4 6F70     
     3AF6 7920     
     3AF8 636F     
     3AFA 6D70     
     3AFC 6C65     
     3AFE 7465     
     3B00 64       
0050                                  even
0051 3B02 0F50     txt.done.print     stri 'Print completed'
     3B04 7269     
     3B06 6E74     
     3B08 2063     
     3B0A 6F6D     
     3B0C 706C     
     3B0E 6574     
     3B10 6564     
0052                                  even
0053 3B12 1044     txt.done.delete    stri 'Delete completed'
     3B14 656C     
     3B16 6574     
     3B18 6520     
     3B1A 636F     
     3B1C 6D70     
     3B1E 6C65     
     3B20 7465     
     3B22 64       
0054                                  even
0055 3B24 0F43     txt.done.clipboard stri 'Clipboard saved'
     3B26 6C69     
     3B28 7062     
     3B2A 6F61     
     3B2C 7264     
     3B2E 2073     
     3B30 6176     
     3B32 6564     
0056                                  even
0057 3B34 0D43     txt.done.clipdev   stri 'Clipboard set'
     3B36 6C69     
     3B38 7062     
     3B3A 6F61     
     3B3C 7264     
     3B3E 2073     
     3B40 6574     
0058                                  even
0059 3B42 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3B44 7574     
     3B46 6F69     
     3B48 6E73     
     3B4A 6572     
     3B4C 743A     
     3B4E 206F     
     3B50 6E       
0060                                  even
0061 3B52 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3B54 7574     
     3B56 6F69     
     3B58 6E73     
     3B5A 6572     
     3B5C 743A     
     3B5E 206F     
     3B60 6666     
0062                                  even
0063 3B62 0B46     txt.fastmode       stri 'Fastmode IO'
     3B64 6173     
     3B66 746D     
     3B68 6F64     
     3B6A 6520     
     3B6C 494F     
0064                                  even
0065 3B6E 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3B70 6F20     
     3B72 4465     
     3B74 7669     
     3B76 6365     
     3B78 2F44     
     3B7A 6973     
     3B7C 6B2F     
     3B7E 5061     
     3B80 7468     
0066                                  even
0067 3B82 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3B84 6E63     
     3B86 7275     
     3B88 6E63     
     3B8A 6869     
     3B8C 6E67     
     3B8E 2054     
     3B90 4920     
     3B92 4261     
     3B94 7369     
     3B96 6320     
     3B98 6C69     
     3B9A 6E65     
     3B9C 2E2E     
     3B9E 2E2E     
0068                                  even
0069 3BA0 026B     txt.kb             stri 'kb'
     3BA2 62       
0070                                  even
0071 3BA4 054C     txt.lines          stri 'Lines'
     3BA6 696E     
     3BA8 6573     
0072                                  even
0073 3BAA 0A5B     txt.newfile        stri '[New file]'
     3BAC 4E65     
     3BAE 7720     
     3BB0 6669     
     3BB2 6C65     
     3BB4 5D       
0074                                  even
0075 3BB6 0D5B     txt.tib1           stri '[TI Basic #1]'
     3BB8 5449     
     3BBA 2042     
     3BBC 6173     
     3BBE 6963     
     3BC0 2023     
     3BC2 315D     
0076                                  even
0077 3BC4 0D5B     txt.tib2           stri '[TI Basic #2]'
     3BC6 5449     
     3BC8 2042     
     3BCA 6173     
     3BCC 6963     
     3BCE 2023     
     3BD0 325D     
0078                                  even
0079 3BD2 0D5B     txt.tib3           stri '[TI Basic #3]'
     3BD4 5449     
     3BD6 2042     
     3BD8 6173     
     3BDA 6963     
     3BDC 2023     
     3BDE 335D     
0080                                  even
0081 3BE0 0D5B     txt.tib4           stri '[TI Basic #4]'
     3BE2 5449     
     3BE4 2042     
     3BE6 6173     
     3BE8 6963     
     3BEA 2023     
     3BEC 345D     
0082                                  even
0083 3BEE 0D5B     txt.tib5           stri '[TI Basic #5]'
     3BF0 5449     
     3BF2 2042     
     3BF4 6173     
     3BF6 6963     
     3BF8 2023     
     3BFA 355D     
0084                                  even
0085 3BFC 0444     txt.filetype.dv80  stri 'DV80'
     3BFE 5638     
     3C00 30       
0086                                  even
0087 3C02 034D     txt.m1             stri 'M1='
     3C04 313D     
0088                                  even
0089 3C06 034D     txt.m2             stri 'M2='
     3C08 323D     
0090                                  even
0091 3C0A 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3C0C 392D     
     3C0E 4D65     
     3C10 6E75     
     3C12 2020     
     3C14 5E48     
     3C16 2D48     
     3C18 656C     
     3C1A 7020     
     3C1C 205E     
     3C1E 552D     
     3C20 5368     
     3C22 6F72     
     3C24 7463     
     3C26 7574     
     3C28 73       
0092                                  even
0093 3C2A 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3C2C 392D     
     3C2E 4D65     
     3C30 6E75     
     3C32 2020     
     3C34 5E48     
     3C36 2D48     
     3C38 656C     
     3C3A 7020     
     3C3C 205E     
     3C3E 552D     
     3C40 5368     
     3C42 6F72     
     3C44 7463     
     3C46 7574     
     3C48 7320     
     3C4A 2046     
     3C4C 302D     
     3C4E 4261     
     3C50 7369     
     3C52 6323     
0094                                  even
0095 3C54 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3C56 392D     
     3C58 4578     
     3C5A 6974     
     3C5C 2020     
     3C5E 5E43     
     3C60 6F70     
     3C62 7920     
     3C64 5E4D     
     3C66 6F76     
     3C68 6520     
     3C6A 5E44     
     3C6C 656C     
     3C6E 205E     
     3C70 5361     
     3C72 7665     
     3C74 205E     
     3C76 5072     
     3C78 696E     
     3C7A 7420     
     3C7C 5E5B     
     3C7E 312D     
     3C80 335D     
     3C82 436C     
     3C84 6970     
     3C86 6272     
     3C88 64       
0096                                  even
0097 3C8A 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C8C 392D     
     3C8E 4261     
     3C90 636B     
     3C92 2020     
     3C94 4635     
     3C96 2D41     
     3C98 7574     
     3C9A 6F55     
     3C9C 6E70     
     3C9E 6163     
     3CA0 6B20     
     3CA2 2053     
     3CA4 5041     
     3CA6 4345     
     3CA8 2D55     
     3CAA 6E70     
     3CAC 6163     
     3CAE 6B20     
     3CB0 7072     
     3CB2 6F67     
     3CB4 7261     
     3CB6 6D       
0098                                  even
0099 3CB8 020E     txt.alpha.down     data >020e,>0f00
     3CBA 0F00     
0100 3CBC 0110     txt.vertline       data >0110
0101 3CBE 011C     txt.keymarker      byte 1,28
0102                                  even
0103 3CC0 0120     txt.ws1            stri ' '
0104                                  even
0105 3CC2 0220     txt.ws2            stri '  '
     3CC4 20       
0106                                  even
0107 3CC6 0420     txt.ws4            stri '    '
     3CC8 2020     
     3CCA 20       
0108                                  even
0109      3CC6     txt.filetype.none  equ txt.ws4
0110               
0111 3CCC 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CCE 4920     
     3CD0 4261     
     3CD2 7369     
     3CD4 6320     
     3CD6 6D6F     
     3CD8 6465     
     3CDA 2061     
     3CDC 6374     
     3CDE 6976     
     3CE0 652E     
0112                                  even
0113               
0114               ;--------------------------------------------------------------
0115               ; Strings for error line pane
0116               ;--------------------------------------------------------------
0117 3CE2 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CE4 6169     
     3CE6 6C65     
     3CE8 6420     
     3CEA 6C6F     
     3CEC 6164     
     3CEE 696E     
     3CF0 6720     
     3CF2 6669     
     3CF4 6C65     
     3CF6 3A20     
0118                                  even
0119 3CF8 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CFA 6169     
     3CFC 6C65     
     3CFE 6420     
     3D00 7361     
     3D02 7669     
     3D04 6E67     
     3D06 2066     
     3D08 696C     
     3D0A 653A     
     3D0C 20       
0120                                  even
0121 3D0E 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3D10 6169     
     3D12 6C65     
     3D14 6420     
     3D16 7072     
     3D18 696E     
     3D1A 7469     
     3D1C 6E67     
     3D1E 2074     
     3D20 6F20     
     3D22 6465     
     3D24 7669     
     3D26 6365     
     3D28 3A20     
0122                                  even
0123 3D2A 164E     txt.io.nofile      stri 'No filename specified.'
     3D2C 6F20     
     3D2E 6669     
     3D30 6C65     
     3D32 6E61     
     3D34 6D65     
     3D36 2073     
     3D38 7065     
     3D3A 6369     
     3D3C 6669     
     3D3E 6564     
     3D40 2E       
0124                                  even
0125 3D42 1B49     txt.memfull.load   stri 'Index full. File too large.'
     3D44 6E64     
     3D46 6578     
     3D48 2066     
     3D4A 756C     
     3D4C 6C2E     
     3D4E 2046     
     3D50 696C     
     3D52 6520     
     3D54 746F     
     3D56 6F20     
     3D58 6C61     
     3D5A 7267     
     3D5C 652E     
0126                                  even
0127 3D5E 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D60 6F70     
     3D62 792F     
     3D64 4D6F     
     3D66 7665     
     3D68 2074     
     3D6A 6172     
     3D6C 6765     
     3D6E 7420     
     3D70 6D75     
     3D72 7374     
     3D74 2062     
     3D76 6520     
     3D78 6F75     
     3D7A 7473     
     3D7C 6964     
     3D7E 6520     
     3D80 4D31     
     3D82 2D4D     
     3D84 3220     
     3D86 7261     
     3D88 6E67     
     3D8A 652E     
0128                                  even
0129               ;--------------------------------------------------------------
0130               ; Strings for command buffer
0131               ;--------------------------------------------------------------
0132 3D8C 013E     txt.cmdb.prompt    stri '>'
0133                                  even
0134 3D8E 0D43     txt.colorscheme    stri 'Color scheme:'
     3D90 6F6C     
     3D92 6F72     
     3D94 2073     
     3D96 6368     
     3D98 656D     
     3D9A 653A     
0135                                  even
0136               
0137               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < ram.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D9C 0650     def.printer.fname   stri 'PI.PIO'
     3D9E 492E     
     3DA0 5049     
     3DA2 4F       
0008 3DA3   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3DA4 4453     
     3DA6 4B31     
     3DA8 2E43     
     3DAA 4C49     
     3DAC 50       
0009 3DAD   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3DAE 4453     
     3DB0 4B36     
     3DB2 2E43     
     3DB4 4C49     
     3DB6 50       
0010 3DB7   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3DB8 5449     
     3DBA 5049     
     3DBC 2E43     
     3DBE 4C49     
     3DC0 50       
0011 3DC1   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DC2 2C44     
     3DC4 534B     
     3DC6 2C48     
     3DC8 4458     
     3DCA 2C49     
     3DCC 4445     
     3DCE 2C50     
     3DD0 492E     
     3DD2 2C50     
     3DD4 494F     
     3DD6 2C54     
     3DD8 4950     
     3DDA 492E     
     3DDC 2C52     
     3DDE 442C     
     3DE0 5343     
     3DE2 532C     
     3DE4 5344     
     3DE6 442C     
     3DE8 5744     
     3DEA 532C     
     3DEC 5253     
     3DEE 3233     
     3DF0 32       
                   < ram.resident.asm
0066                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3DF2 99              byte   >99                   ; \
0013 3DF3   4F            text   'OKFG99'              ; | Send this to reload
     3DF4 4B46     
     3DF6 4739     
     3DF8 39       
0014 3DF9   99            byte   >99                   ; /
0015 3DFA 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3DFC 4D44     
     3DFE 47       
0016 3DFF   00            byte   >00, >00, >00         ; /
     3E00 0000     
0017 3E02 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3E04 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3E06 99              byte   >99                   ; \
0026 3E07   4F            text   'OKFG99'              ; | Send this to reload
     3E08 4B46     
     3E0A 4739     
     3E0C 39       
0027 3E0D   99            byte   >99                   ; /
0028 3E0E 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3E10 3239     
     3E12 4745     
     3E14 4D47     
0029                      ;                            ; /
0030 3E16 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3E18 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E1A 99              byte   >99                   ; \
0039 3E1B   4F            text   'OKFG99'              ; | Send this to reload
     3E1C 4B46     
     3E1E 4739     
     3E20 39       
0040 3E21   99            byte   >99                   ; /
0041 3E22 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E24 4247     
0042 3E26 0000            byte   >00, >00, >00, >00    ; /
     3E28 0000     
0043 3E2A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E2C 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E2E 99              byte   >99                   ; \
0052 3E2F   4F            text   'OKFG99'              ; | Send this to reload
     3E30 4B46     
     3E32 4739     
     3E34 39       
0053 3E35   99            byte   >99                   ; /
0054 3E36 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E38 464F     
     3E3A 5254     
     3E3C 4843     
0055                      ;                            ; /
0056 3E3E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E40 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b3.asm
0051                       ;------------------------------------------------------
0052                       ; Activate bank 1 and branch to  >6036
0053                       ;------------------------------------------------------
0054 3E42 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E44 6002     
0055               
0059               
0060 3E46 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E48 6046     
0061               ***************************************************************
0062               * Step 3: Include main editor modules
0063               ********|*****|*********************|**************************
0064               main:
0065                       aorg  kickstart.code2       ; >6046
0066 6046 06A0  32         bl    @cpu.crash            ; Should never get here
     6048 2026     
0067                       ;-----------------------------------------------------------------------
0068                       ; Dialogs (1)
0069                       ;-----------------------------------------------------------------------
0070                       copy  "dialog.asm"              ; Dialog initialisation code
     **** ****     > dialog.asm
0001               * basic......: dialog.asm
0002               * Purpose....: Dialog initialisation
0003               
0004               ***************************************************************
0005               * dialog
0006               * Dialog initialisation code
0007               ***************************************************************
0008               * bl @dialog
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog:
0022 604A 0649  14         dect  stack
0023 604C C64B  30         mov   r11,*stack            ; Save return address
0024 604E 0649  14         dect  stack
0025 6050 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6052 0649  14         dect  stack
0027 6054 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6056 0649  14         dect  stack
0029 6058 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;-------------------------------------------------------
0031                       ; Copy dialog strings to RAM
0032                       ;-------------------------------------------------------
0033 605A 06A0  32         bl    @cpym2m
     605C 253A     
0034 605E 7174                   data txt.hint.memstat,ram.msg1,23
     6060 F050     
     6062 0017     
0035               
0036 6064 06A0  32         bl    @cpym2m
     6066 253A     
0037 6068 718E                   data txt.hint.lineterm,ram.msg2,42
     606A F0A0     
     606C 002A     
0038                       ;-------------------------------------------------------
0039                       ; Exit
0040                       ;-------------------------------------------------------
0041               dialog.exit:
0042 606E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0043 6070 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0044 6072 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 6074 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 6076 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0071                       copy  "dialog.menu.asm"         ; Dialog "Stevie Menu"
     **** ****     > dialog.menu.asm
0001               * FILE......: dialog.menu.asm
0002               * Purpose...: Dialog "Main Menu"
0003               
0004               ***************************************************************
0005               * dialog.menu
0006               * Open Dialog "Main Menu"
0007               ***************************************************************
0008               * bl @dialog.menu
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2,tmp3,tmp4
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.menu:
0022 6078 0649  14         dect  stack
0023 607A C64B  30         mov   r11,*stack            ; Save return address
0024 607C 0649  14         dect  stack
0025 607E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6080 0649  14         dect  stack
0027 6082 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6084 0649  14         dect  stack
0029 6086 C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6088 0649  14         dect  stack
0031 608A C647  30         mov   tmp3,*stack           ; Push tmp3
0032 608C 0649  14         dect  stack
0033 608E C648  30         mov   tmp4,*stack           ; Push tmp4
0034                       ;-------------------------------------------------------
0035                       ; Setup dialog
0036                       ;-------------------------------------------------------
0037 6090 0204  20         li    tmp0,id.dialog.menu
     6092 0064     
0038 6094 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6096 A71C     
0039               
0040 6098 0204  20         li    tmp0,txt.head.menu
     609A 768E     
0041 609C C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     609E A720     
0042               
0043 60A0 0204  20         li    tmp0,txt.info.menu
     60A2 769D     
0044 60A4 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     60A6 A722     
0045               
0046 60A8 0204  20         li    tmp0,pos.info.menu
     60AA 76DA     
0047 60AC C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     60AE A728     
0048               
0049 60B0 0204  20         li    tmp0,ram.msg1
     60B2 F050     
0050 60B4 C804  38         mov   tmp0,@cmdb.panhint    ; Show SAMS memory allocation
     60B6 A724     
0051               
0052 60B8 04E0  34         clr    @cmdb.panhint2       ; No extra hint to display
     60BA A726     
0053               
0054 60BC 0204  20         li    tmp0,txt.keys.menu
     60BE 76E4     
0055 60C0 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     60C2 A72A     
0056               
0057 60C4 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     60C6 6F88     
0058                       ;-------------------------------------------------------
0059                       ; Print SAMS pages free
0060                       ;-------------------------------------------------------
0061 60C8 0204  20         li    tmp0,tv.sams.maxpage  ; Calculate number of free pages
     60CA 0100     
0062 60CC 6120  34         s     @edb.sams.hipage,tmp0 ;
     60CE A51C     
0063               
0064 60D0 C804  38         mov   tmp0,@rambuf          ; Number of pages free
     60D2 A100     
0065               
0066 60D4 0242  22         andi  config,>7fff          ; Do not print number
     60D6 7FFF     
0067                                                   ; (Reset bit 0 in config register)
0068               
0069 60D8 06A0  32         bl    @mknum                ; Convert unsigned number to string
     60DA 2A56     
0070 60DC A100                   data rambuf           ; \ i  p1    = Source
0071 60DE F060                   data ram.msg1+16      ; | i  p2    = Destination
0072 60E0 30                     byte 48               ; | i  p3MSB = ASCII offset
0073 60E1   20                   byte 32               ; / i  p3LSB = Padding character
0074               
0075 60E2 0204  20         li    tmp0,>3a00            ; \ MSB = ASCII 58 (hex 3a) colon character
     60E4 3A00     
0076 60E6 D804  38         movb  tmp0,@ram.msg1 + 16   ; | Overwrite length-byte prefix in
     60E8 F060     
0077                                                   ; / number with colon
0078                       ;-------------------------------------------------------
0079                       ; Print SAMS pages total
0080                       ;-------------------------------------------------------
0081 60EA 0204  20         li    tmp0,tv.sams.maxpage  ; Max number of SAMS pages supported
     60EC 0100     
0082 60EE C804  38         mov   tmp0,@rambuf          ; Number of pages total
     60F0 A100     
0083               
0084 60F2 0242  22         andi  config,>7fff          ; Do not print number
     60F4 7FFF     
0085                                                   ; (Reset bit 0 in config register)
0086               
0087 60F6 06A0  32         bl    @mknum                ; Convert unsigned number to string
     60F8 2A56     
0088 60FA A100                   data rambuf           ; \ i  p1    = Source
0089 60FC A102                   data rambuf+2         ; | i  p2    = Destination
0090 60FE 30                     byte 48               ; | i  p3MSB = ASCII offset
0091 60FF   20                   byte 32               ; / i  p3LSB = Padding character
0092               
0093 6100 06A0  32         bl    @trimnum              ; Trim number to the left
     6102 2AAE     
0094 6104 A102                   data rambuf+2,ram.msg1 + 21,32
     6106 F065     
     6108 0020     
0095               
0096 610A 0204  20         li    tmp0,>2f00            ; \ MSB = ASCII 47 (hex 2f) slash character
     610C 2F00     
0097 610E D804  38         movb  tmp0,@ram.msg1 + 21   ; | Overwrite length-byte prefix in
     6110 F065     
0098                                                   ; / trimmed number with slash
0099                       ;------------------------------------------------------
0100                       ; Remove filepicker color bar
0101                       ;------------------------------------------------------
0102 6112 06A0  32         bl    @pane.filebrowser.colbar.remove
     6114 702A     
0103                                                   ; Remove filepicker color bar
0104                                                   ; i \  @cat.barpos = YX position color bar
0105                                                   ;   /
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               dialog.menu.exit:
0110 6116 C139  30         mov   *stack+,tmp0          ; Pop tmp4
0111 6118 C139  30         mov   *stack+,tmp0          ; Pop tmp3
0112 611A C139  30         mov   *stack+,tmp0          ; Pop tmp2
0113 611C C139  30         mov   *stack+,tmp0          ; Pop tmp1
0114 611E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0115 6120 C2F9  30         mov   *stack+,r11           ; Pop R11
0116 6122 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0072                       copy  "dialog.file.asm"         ; Dialog "File"
     **** ****     > dialog.file.asm
0001               * FILE......: dialog.file.asm
0002               * Purpose...: Dialog "File"
0003               
0004               ***************************************************************
0005               * dialog.file
0006               * Open Dialog "File"
0007               ***************************************************************
0008               * bl @dialog.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.file:
0022 6124 0649  14         dect  stack
0023 6126 C64B  30         mov   r11,*stack            ; Save return address
0024 6128 0649  14         dect  stack
0025 612A C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 612C 0204  20         li    tmp0,id.dialog.file
     612E 0069     
0030 6130 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6132 A71C     
0031               
0032 6134 0204  20         li    tmp0,txt.head.file
     6136 7724     
0033 6138 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     613A A720     
0034               
0035 613C 0204  20         li    tmp0,txt.info.file
     613E 772E     
0036 6140 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6142 A722     
0037               
0038 6144 0204  20         li    tmp0,pos.info.file
     6146 776A     
0039 6148 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     614A A728     
0040               
0041 614C 0204  20         li    tmp0,txt.hint.file
     614E 7773     
0042 6150 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6152 A724     
0043 6154 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6156 A726     
0044               dialog.file.keylist:
0045 6158 0204  20         li    tmp0,txt.keys.file    ; No navigation keys
     615A 7775     
0046 615C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     615E A72A     
0047 6160 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6162 6F88     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.file.exit:
0052 6164 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 6166 C2F9  30         mov   *stack+,r11           ; Pop R11
0054 6168 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0073                       copy  "dialog.cartridge.asm"    ; Dialog "Cartridge"
     **** ****     > dialog.cartridge.asm
0001               * basic......: dialog.cartridge.asm
0002               * Purpose....: Dialog "Cartridge"
0003               
0004               ***************************************************************
0005               * dialog.cartridge
0006               * Open Dialog "Cartridge"
0007               ***************************************************************
0008               * bl @dialog.cartridge
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cartridge:
0022 616A 0649  14         dect  stack
0023 616C C64B  30         mov   r11,*stack            ; Save return address
0024 616E 0649  14         dect  stack
0025 6170 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6172 0204  20         li    tmp0,id.dialog.cartridge
     6174 006A     
0030 6176 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6178 A71C     
0031               
0032 617A 0204  20         li    tmp0,txt.head.cartridge
     617C 778F     
0033 617E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6180 A720     
0034               
0035 6182 0204  20         li    tmp0,txt.info.cartridge
     6184 779E     
0036 6186 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6188 A722     
0037               
0038 618A 0204  20         li    tmp0,pos.info.cartridge
     618C 77B6     
0039 618E C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6190 A728     
0040               
0041 6192 0204  20         li    tmp0,txt.hint.cartridg2
     6194 77BA     
0042 6196 C804  38         mov   tmp0,@cmdb.panhint2   ; Extra hint to display
     6198 A726     
0043               
0044 619A 0204  20         li    tmp0,txt.hint.cartridge
     619C 77F1     
0045 619E C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     61A0 A724     
0046               
0047 61A2 0204  20         li    tmp0,txt.keys.cartridge
     61A4 781F     
0048 61A6 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     61A8 A72A     
0049               
0050 61AA 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     61AC 6F88     
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               dialog.cartridge.exit:
0055 61AE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 61B0 C2F9  30         mov   *stack+,r11           ; Pop R11
0057 61B2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0074                       copy  "dialog.help.asm"         ; Dialog "Help"
     **** ****     > dialog.help.asm
0001               * FILE......: dialog.help.asm
0002               * Purpose...: Dialog "Help"
0003               
0004               *---------------------------------------------------------------
0005               * Show Stevie welcome/about dialog
0006               *---------------------------------------------------------------
0007               dialog.help:
0008 61B4 0649  14         dect  stack
0009 61B6 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;-------------------------------------------------------
0011                       ; Setup dialog
0012                       ;-------------------------------------------------------
0013 61B8 06A0  32         bl    @scroff               ; turn screen off
     61BA 26E6     
0014               
0015 61BC 0204  20         li    tmp0,id.dialog.help
     61BE 0068     
0016 61C0 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     61C2 A71C     
0017               
0018 61C4 06A0  32         bl    @dialog.help.content  ; display content in modal dialog
     61C6 703C     
0019               
0020 61C8 0204  20         li    tmp0,txt.head.about
     61CA 7576     
0021 61CC C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     61CE A720     
0022               
0023 61D0 0204  20         li    tmp0,txt.about.build
     61D2 7648     
0024 61D4 C804  38         mov   tmp0,@cmdb.paninfo    ; Info line
     61D6 A722     
0025 61D8 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     61DA A728     
0026               
0027 61DC 0204  20         li    tmp0,txt.hint.about
     61DE 75D0     
0028 61E0 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     61E2 A724     
0029 61E4 0204  20         li    tmp0,txt.hint.about2
     61E6 7582     
0030 61E8 C804  38         mov   tmp0,@cmdb.panhint2   ; Extra hint to display
     61EA A726     
0031               
0032 61EC 0204  20         li    tmp0,txt.keys.about
     61EE 7620     
0033 61F0 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     61F2 A72A     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               dialog.help.exit:
0038 61F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0039 61F6 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0075                       copy  "dialog.load.asm"         ; Dialog "Load file"
     **** ****     > dialog.load.asm
0001               * FILE......: dialog.load.asm
0002               * Purpose...: Dialog "Load DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.load
0006               * Open Dialog for loading DV 80 file
0007               ***************************************************************
0008               * bl @dialog.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.load:
0022 61F8 0649  14         dect  stack
0023 61FA C64B  30         mov   r11,*stack            ; Save return address
0024 61FC 0649  14         dect  stack
0025 61FE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6200 0649  14         dect  stack
0027 6202 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Show dialog "Unsaved changes" if editor buffer dirty
0030                       ;-------------------------------------------------------
0031 6204 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6206 A506     
0032 6208 1303  14         jeq   dialog.load.setup     ; No, skip "Unsaved changes"
0033               
0034 620A 06A0  32         bl    @dialog.unsaved       ; Show dialog
     620C 672A     
0035 620E 103F  14         jmp   dialog.load.exit      ; Exit early
0036                       ;-------------------------------------------------------
0037                       ; Setup dialog
0038                       ;-------------------------------------------------------
0039               dialog.load.setup:
0040 6210 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     6212 6FE2     
0041               
0042 6214 0204  20         li    tmp0,id.dialog.load
     6216 000A     
0043 6218 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     621A A71C     
0044               
0045 621C 0204  20         li    tmp0,txt.head.load
     621E 71F2     
0046 6220 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6222 A720     
0047               
0048 6224 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6226 A722     
0049 6228 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     622A A728     
0050               
0051 622C 0204  20         li    tmp0,txt.hint.load
     622E 71B8     
0052 6230 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6232 A724     
0053               
0054 6234 0204  20         li    tmp0,txt.hint.load2
     6236 7201     
0055 6238 C804  38         mov   tmp0,@cmdb.panhint2   ; Show extra hint
     623A A726     
0056               
0057 623C 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     623E A44E     
0058 6240 1303  14         jeq   !
0059                       ;-------------------------------------------------------
0060                       ; Show that FastMode is on
0061                       ;-------------------------------------------------------
0062 6242 0204  20         li    tmp0,txt.keys.load2   ; Highlight FastMode
     6244 7128     
0063 6246 1002  14         jmp   dialog.load.keylist
0064                       ;-------------------------------------------------------
0065                       ; Show that FastMode is off
0066                       ;-------------------------------------------------------
0067 6248 0204  20 !       li    tmp0,txt.keys.load
     624A 70DE     
0068                       ;-------------------------------------------------------
0069                       ; Show dialog
0070                       ;-------------------------------------------------------
0071               dialog.load.keylist:
0072 624C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     624E A72A     
0073                       ;-------------------------------------------------------
0074                       ; Set filename (1)
0075                       ;-------------------------------------------------------
0076               dialog.load.set.filename1:
0077 6250 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     6252 6FD0     
0078                                                   ; \ i  @cat.device = Current device name
0079                                                   ; | i  @cat.shortcut.idx = Index in catalog
0080                                                   ; |        filename pointerlist
0081                                                   ; |
0082                                                   ; | o  @cat.fullfname = Combined string with
0083                                                   ; /        device & filename
0084               
0085 6254 0204  20         li    tmp0,cat.fullfname
     6256 E016     
0086 6258 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     625A A006     
0087 625C 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     625E 6C1E     
0088                                                   ; \ i  @parm1 = Pointer to string w. preset
0089                                                   ; /
0090 6260 100F  14         jmp   dialog.load.cursor    ; Set cursor shape
0091                       ;-------------------------------------------------------
0092                       ; Set filename (2)
0093                       ;-------------------------------------------------------
0094               dialog.load.set.filename2:
0095 6262 0204  20         li    tmp0,edb.filename     ; Set filename
     6264 A526     
0096 6266 1305  14         jeq   dialog.load.clearcmd  ; No filename to set
0097               
0098 6268 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     626A A006     
0099 626C 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     626E 6C1E     
0100                                                   ; \ i  @parm1 = Pointer to string w. preset
0101                                                   ; /
0102 6270 1007  14         jmp   dialog.load.cursor    ; Set cursor shape
0103                       ;------------------------------------------------------
0104                       ; Clear filename
0105                       ;------------------------------------------------------
0106               dialog.load.clearcmd:
0107 6272 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6274 A72E     
0108 6276 06A0  32         bl    @film                 ; Clear command
     6278 2236     
0109 627A A72F                   data  cmdb.cmd,>00,80
     627C 0000     
     627E 0050     
0110                       ;-------------------------------------------------------
0111                       ; Set cursor shape
0112                       ;-------------------------------------------------------
0113               dialog.load.cursor:
0114 6280 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6282 6F76     
0115 6284 C820  54         mov   @tv.curshape,@ramsat+2
     6286 A214     
     6288 A058     
0116                                                   ; Get cursor shape and color
0117                       ;-------------------------------------------------------
0118                       ; Show file browser
0119                       ;-------------------------------------------------------
0120 628A 06A0  32         bl    @pane.filebrowser     ; Show file browser
     628C 6FF4     
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               dialog.load.exit:
0125 628E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0126 6290 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 6292 C2F9  30         mov   *stack+,r11           ; Pop R11
0128 6294 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0076                       copy  "dialog.save.asm"         ; Dialog "Save file"
     **** ****     > dialog.save.asm
0001               * FILE......: dialog.save.asm
0002               * Purpose...: Dialog "Save DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.save
0006               * Dialog "Save"
0007               ***************************************************************
0008               * bl @dialog.save
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.save:
0022 6296 0649  14         dect  stack
0023 6298 C64B  30         mov   r11,*stack            ; Save return address
0024 629A 0649  14         dect  stack
0025 629C C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 629E 8820  50         c     @fb.row.dirty,@w$ffff
     62A0 A30A     
     62A2 2022     
0030 62A4 1604  14         jne   !                     ; Skip crunching if clean
0031 62A6 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     62A8 6F2E     
0032 62AA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     62AC A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 62AE 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     62B0 A510     
     62B2 2022     
0037 62B4 130B  14         jeq   dialog.save.default   ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 62B6 06A0  32         bl    @cmdb.cmd.clear       ; Clear current CMDB command
     62B8 6BD6     
0042               
0043 62BA 0204  20         li    tmp0,id.dialog.saveblock
     62BC 0010     
0044 62BE C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     62C0 A71C     
0045 62C2 0204  20         li    tmp0,txt.head.save2   ; Title "Save block to file"
     62C4 7281     
0046 62C6 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     62C8 A720     
0047 62CA 100E  14         jmp   dialog.save.header
0048                       ;-------------------------------------------------------
0049                       ; Default dialog
0050                       ;-------------------------------------------------------
0051               dialog.save.default:
0052 62CC 0204  20         li    tmp0,id.dialog.save
     62CE 000F     
0053 62D0 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     62D2 A71C     
0054 62D4 0204  20         li    tmp0,txt.head.save    ; Title "Save file"
     62D6 7272     
0055 62D8 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     62DA A720     
0056                       ;-------------------------------------------------------
0057                       ; Set filename
0058                       ;-------------------------------------------------------
0059 62DC 0204  20         li    tmp0,edb.filename     ; Set filename
     62DE A526     
0060 62E0 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     62E2 A006     
0061               
0062 62E4 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     62E6 6C1E     
0063                                                   ; \ i  @parm1 = Pointer to string w. preset
0064                                                   ; /
0065                       ;-------------------------------------------------------
0066                       ; Setup header
0067                       ;-------------------------------------------------------
0068               dialog.save.header:
0069 62E8 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     62EA A722     
0070 62EC 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     62EE A728     
0071               
0072 62F0 0204  20         li    tmp0,txt.hint.save
     62F2 7299     
0073 62F4 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     62F6 A724     
0074 62F8 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     62FA A726     
0075 62FC 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     62FE A44E     
0076                       ;-------------------------------------------------------
0077                       ; Line termination on ?
0078                       ;-------------------------------------------------------
0079 6300 C120  34         mov   @edb.lineterm,tmp0    ; Get line termination mode + char
     6302 A524     
0080 6304 0244  22         andi  tmp0,>ff00            ; Only interested in MSB
     6306 FF00     
0081 6308 1303  14         jeq   !                     ; Line termination mode is off
0082                       ;-------------------------------------------------------
0083                       ; Line termination on
0084                       ;-------------------------------------------------------
0085 630A 0204  20         li    tmp0,txt.keys.save2
     630C 72DE     
0086 630E 1002  14         jmp   dialog.save.cursorshape
0087                       ;-------------------------------------------------------
0088                       ; Line termination off
0089                       ;-------------------------------------------------------
0090 6310 0204  20 !       li    tmp0,txt.keys.save1
     6312 72A9     
0091                       ;-------------------------------------------------------
0092                       ; Set cursor shape
0093                       ;-------------------------------------------------------
0094               dialog.save.cursorshape:
0095 6314 C804  38         mov   tmp0,@cmdb.pankeys    ; Save keylist in status line
     6316 A72A     
0096 6318 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     631A 6F76     
0097                       ;-------------------------------------------------------
0098                       ; Exit
0099                       ;-------------------------------------------------------
0100               dialog.save.exit:
0101 631C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 631E C2F9  30         mov   *stack+,r11           ; Pop R11
0103 6320 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0077                       copy  "dialog.print.asm"        ; Dialog "Print file"
     **** ****     > dialog.print.asm
0001               * FILE......: dialog.print.asm
0002               * Purpose...: Dialog "Print file"
0003               
0004               ***************************************************************
0005               * dialog.print
0006               * Dialog "Print"
0007               ***************************************************************
0008               * bl @dialog.print
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.print:
0022 6322 0649  14         dect  stack
0023 6324 C64B  30         mov   r11,*stack            ; Save return address
0024 6326 0649  14         dect  stack
0025 6328 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Crunch current row if dirty
0028                       ;-------------------------------------------------------
0029 632A 8820  50         c     @fb.row.dirty,@w$ffff
     632C A30A     
     632E 2022     
0030 6330 1604  14         jne   !                     ; Skip crunching if clean
0031 6332 06A0  32         bl    @edb.line.pack        ; Copy line to editor buffer
     6334 6F2E     
0032 6336 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6338 A30A     
0033                       ;-------------------------------------------------------
0034                       ; Setup dialog
0035                       ;-------------------------------------------------------
0036 633A 8820  50 !       c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     633C A510     
     633E 2022     
0037 6340 1307  14         jeq   dialog.print.default  ; Yes, so show default dialog
0038                       ;-------------------------------------------------------
0039                       ; Setup dialog title
0040                       ;-------------------------------------------------------
0041 6342 0204  20         li    tmp0,id.dialog.printblock
     6344 0012     
0042 6346 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6348 A71C     
0043 634A 0204  20         li    tmp0,txt.head.print2  ; Title "Print block to file"
     634C 7434     
0044               
0045 634E 1006  14         jmp   dialog.print.header
0046                       ;-------------------------------------------------------
0047                       ; Default dialog
0048                       ;-------------------------------------------------------
0049               dialog.print.default:
0050 6350 0204  20         li    tmp0,id.dialog.print
     6352 0011     
0051 6354 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6356 A71C     
0052 6358 0204  20         li    tmp0,txt.head.print   ; Title "Print file"
     635A 7424     
0053                       ;-------------------------------------------------------
0054                       ; Setup header
0055                       ;-------------------------------------------------------
0056               dialog.print.header:
0057 635C C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     635E A720     
0058               
0059 6360 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6362 A722     
0060 6364 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6366 A728     
0061               
0062 6368 0204  20         li    tmp0,txt.hint.print
     636A 7445     
0063 636C C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     636E A724     
0064 6370 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6372 A726     
0065               
0066 6374 0204  20         li    tmp0,txt.keys.save1
     6376 72A9     
0067 6378 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     637A A72A     
0068               
0069 637C 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     637E A44E     
0070                       ;-------------------------------------------------------
0071                       ; Line termination on ?
0072                       ;-------------------------------------------------------
0073 6380 C120  34         mov   @edb.lineterm,tmp0    ; Get line termination mode + char
     6382 A524     
0074 6384 0244  22         andi  tmp0,>ff00            ; Only interested in MSB
     6386 FF00     
0075 6388 1303  14         jeq   !                     ; Line termination mode is off
0076                       ;-------------------------------------------------------
0077                       ; Line termination on
0078                       ;-------------------------------------------------------
0079 638A 0204  20         li    tmp0,txt.keys.save2
     638C 72DE     
0080 638E 1002  14         jmp   dialog.print.cmdline
0081                       ;-------------------------------------------------------
0082                       ; Line termination off
0083                       ;-------------------------------------------------------
0084 6390 0204  20 !       li    tmp0,txt.keys.save1
     6392 72A9     
0085                       ;-------------------------------------------------------
0086                       ; Set command line
0087                       ;-------------------------------------------------------
0088               dialog.print.cmdline:
0089 6394 0204  20         li    tmp0,tv.printer.fname ; Set printer name
     6396 DE00     
0090 6398 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     639A A006     
0091               
0092 639C 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     639E 6C1E     
0093                                                   ; \ i  @parm1 = Pointer to string w. preset
0094                                                   ; /
0095                       ;-------------------------------------------------------
0096                       ; Set cursor shape
0097                       ;-------------------------------------------------------
0098 63A0 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     63A2 6F76     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               dialog.print.exit:
0103 63A4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0104 63A6 C2F9  30         mov   *stack+,r11           ; Pop R11
0105 63A8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0078                       copy  "dialog.append.asm"       ; Dialog "Append file"
     **** ****     > dialog.append.asm
0001               * FILE......: dialog.append.asm
0002               * Purpose...: Dialog "Append DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.append
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * bl @dialog.append
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.append:
0022 63AA 0649  14         dect  stack
0023 63AC C64B  30         mov   r11,*stack            ; Save return address
0024 63AE 0649  14         dect  stack
0025 63B0 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 63B2 0649  14         dect  stack
0027 63B4 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.append.setup:
0032 63B6 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     63B8 6FE2     
0033               
0034 63BA 0204  20         li    tmp0,id.dialog.append
     63BC 000C     
0035 63BE C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     63C0 A71C     
0036               
0037 63C2 0204  20         li    tmp0,txt.head.append
     63C4 7313     
0038 63C6 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     63C8 A720     
0039               
0040 63CA 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     63CC A722     
0041 63CE 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     63D0 A728     
0042               
0043 63D2 0204  20         li    tmp0,txt.hint.append
     63D4 71B8     
0044 63D6 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     63D8 A724     
0045               
0046 63DA 0204  20         li    tmp0,txt.hint.append2
     63DC 7201     
0047 63DE C804  38         mov   tmp0,@cmdb.panhint2   ; Show extra hint
     63E0 A726     
0048               
0049 63E2 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     63E4 A44E     
0050 63E6 1303  14         jeq   !
0051                       ;-------------------------------------------------------
0052                       ; Show that FastMode is on
0053                       ;-------------------------------------------------------
0054 63E8 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     63EA 70DE     
0055 63EC 1002  14         jmp   dialog.append.keylist
0056                       ;-------------------------------------------------------
0057                       ; Show that FastMode is off
0058                       ;-------------------------------------------------------
0059 63EE 0204  20 !       li    tmp0,txt.keys.insert
     63F0 70DE     
0060                       ;-------------------------------------------------------
0061                       ; Show dialog
0062                       ;-------------------------------------------------------
0063               dialog.append.keylist:
0064 63F2 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     63F4 A72A     
0065                       ;-------------------------------------------------------
0066                       ; Set command line
0067                       ;-------------------------------------------------------
0068 63F6 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     63F8 A7B2     
0069 63FA C154  26         mov   *tmp0,tmp1            ; Anything set?
0070 63FC 1304  14         jeq   dialog.append.cursor  ; No default filename, skip
0071               
0072 63FE C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6400 A006     
0073 6402 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6404 6C1E     
0074                                                   ; \ i  @parm1 = Pointer to string w. preset
0075                                                   ; /
0076                       ;-------------------------------------------------------
0077                       ; Set cursor shape
0078                       ;-------------------------------------------------------
0079               dialog.append.cursor:
0080 6406 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6408 6F76     
0081 640A C820  54         mov   @tv.curshape,@ramsat+2
     640C A214     
     640E A058     
0082                                                   ; Get cursor shape and color
0083                       ;-------------------------------------------------------
0084                       ; Show file browser
0085                       ;-------------------------------------------------------
0086 6410 06A0  32         bl    @pane.filebrowser     ; Show file browser
     6412 6FF4     
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               dialog.append.exit:
0091 6414 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0092 6416 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6418 C2F9  30         mov   *stack+,r11           ; Pop R11
0094 641A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0079                       copy  "dialog.insert.asm"       ; Dialog "Insert file at line"
     **** ****     > dialog.insert.asm
0001               * FILE......: dialog.insert.asm
0002               * Purpose...: Dialog "Insert DV80 file"
0003               
0004               ***************************************************************
0005               * dialog.insert
0006               * Open Dialog for inserting DV 80 file
0007               ***************************************************************
0008               * bl @dialog.insert
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.insert:
0022 641C 0649  14         dect  stack
0023 641E C64B  30         mov   r11,*stack            ; Save return address
0024 6420 0649  14         dect  stack
0025 6422 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6424 0649  14         dect  stack
0027 6426 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Setup dialog
0030                       ;-------------------------------------------------------
0031               dialog.insert.setup:
0032 6428 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     642A 6FE2     
0033               
0034 642C 0204  20         li    tmp0,id.dialog.insert
     642E 000B     
0035 6430 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6432 A71C     
0036                       ;------------------------------------------------------
0037                       ; Include line number in pane header
0038                       ;------------------------------------------------------
0039 6434 06A0  32         bl    @film
     6436 2236     
0040 6438 A780                   data cmdb.panhead.buf,>00,50
     643A 0000     
     643C 0032     
0041                                                   ; Clear pane header buffer
0042               
0043 643E 06A0  32         bl    @cpym2m
     6440 253A     
0044 6442 7324                   data txt.head.insert,cmdb.panhead.buf,25
     6444 A780     
     6446 0019     
0045               
0046 6448 C820  54         mov   @fb.row,@parm1        ; Get row at cursor
     644A A306     
     644C A006     
0047 644E 06A0  32         bl    @fb.row2line          ; Row to editor line
     6450 318E     
0048                                                   ; \ i @fb.topline = Top line in frame buffer
0049                                                   ; | i @parm1      = Row in frame buffer
0050                                                   ; / o @outparm1   = Matching line in EB
0051               
0052 6452 05E0  34         inct  @outparm1             ; \ Add base 1 and insert at line
     6454 A018     
0053                                                   ; / following cursor, not line at cursor.
0054               
0055 6456 06A0  32         bl    @mknum                ; Convert integer to string
     6458 2A56     
0056 645A A018                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0057 645C A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0058 645E 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0059 645F   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0060               
0061 6460 06A0  32         bl    @cpym2m
     6462 253A     
0062 6464 A100                   data rambuf,cmdb.panhead.buf + 24,5
     6466 A798     
     6468 0005     
0063                                                   ; Add line number to buffer
0064               
0065 646A 0204  20         li    tmp0,29
     646C 001D     
0066 646E 0A84  32         sla   tmp0,8
0067 6470 D804  38         movb  tmp0,@cmdb.panhead.buf ; Set length byte
     6472 A780     
0068               
0069 6474 0204  20         li    tmp0,cmdb.panhead.buf
     6476 A780     
0070 6478 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     647A A720     
0071                       ;------------------------------------------------------
0072                       ; Other panel strings
0073                       ;------------------------------------------------------
0074 647C 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     647E A722     
0075 6480 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6482 A728     
0076               
0077 6484 0204  20         li    tmp0,txt.hint.insert
     6486 71B8     
0078 6488 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     648A A724     
0079               
0080 648C 0204  20         li    tmp0,txt.hint.insert2
     648E 7201     
0081 6490 C804  38         mov   tmp0,@cmdb.panhint2   ; Show extra hint
     6492 A726     
0082               
0083 6494 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     6496 A44E     
0084 6498 1303  14         jeq   !
0085                       ;-------------------------------------------------------
0086                       ; Show that FastMode is on
0087                       ;-------------------------------------------------------
0088 649A 0204  20         li    tmp0,txt.keys.insert  ; Highlight FastMode
     649C 70DE     
0089 649E 1002  14         jmp   dialog.insert.keylist
0090                       ;-------------------------------------------------------
0091                       ; Show that FastMode is off
0092                       ;-------------------------------------------------------
0093 64A0 0204  20 !       li    tmp0,txt.keys.insert
     64A2 70DE     
0094                       ;-------------------------------------------------------
0095                       ; Show dialog
0096                       ;-------------------------------------------------------
0097               dialog.insert.keylist:
0098 64A4 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     64A6 A72A     
0099                       ;-------------------------------------------------------
0100                       ; Set command line
0101                       ;-------------------------------------------------------
0102 64A8 0204  20         li    tmp0,cmdb.dflt.fname  ; Get pointer to default filename
     64AA A7B2     
0103 64AC C154  26         mov   *tmp0,tmp1            ; Anything set?
0104 64AE 1304  14         jeq   dialog.insert.cursor  ; No default filename, skip
0105               
0106 64B0 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     64B2 A006     
0107 64B4 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     64B6 6C1E     
0108                                                   ; \ i  @parm1 = Pointer to string w. preset
0109                                                   ; /
0110                       ;-------------------------------------------------------
0111                       ; Set cursor shape
0112                       ;-------------------------------------------------------
0113               dialog.insert.cursor:
0114 64B8 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     64BA 6F76     
0115 64BC C820  54         mov   @tv.curshape,@ramsat+2
     64BE A214     
     64C0 A058     
0116                                                   ; Get cursor shape and color
0117                       ;-------------------------------------------------------
0118                       ; Show file browser
0119                       ;-------------------------------------------------------
0120 64C2 06A0  32         bl    @pane.filebrowser     ; Show file browser
     64C4 6FF4     
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               dialog.insert.exit:
0125 64C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0126 64C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 64CA C2F9  30         mov   *stack+,r11           ; Pop R11
0128 64CC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0080                       copy  "dialog.run.asm"          ; Dialog "Run file"
     **** ****     > dialog.run.asm
0001               * FILE......: dialog.run.asm
0002               * Purpose...: Dialog "Run program file"
0003               
0004               ***************************************************************
0005               * dialog.run
0006               * Open Dialog for running program file
0007               ***************************************************************
0008               * bl @dialog.run
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.run:
0022 64CE 0649  14         dect  stack
0023 64D0 C64B  30         mov   r11,*stack            ; Save return address
0024 64D2 0649  14         dect  stack
0025 64D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 64D6 0649  14         dect  stack
0027 64D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Show dialog "Unsaved changes" if editor buffer dirty
0030                       ;-------------------------------------------------------
0031 64DA C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     64DC A506     
0032 64DE 1303  14         jeq   dialog.run.setup      ; No, skip "Unsaved changes"
0033               
0034 64E0 06A0  32         bl    @dialog.unsaved       ; Show dialog
     64E2 672A     
0035 64E4 103F  14         jmp   dialog.run.exit       ; Exit early
0036                       ;-------------------------------------------------------
0037                       ; Setup dialog
0038                       ;-------------------------------------------------------
0039               dialog.run.setup:
0040 64E6 06A0  32         bl    @fb.scan.fname        ; Get possible device/filename
     64E8 6FE2     
0041               
0042 64EA 0204  20         li    tmp0,id.dialog.run
     64EC 000E     
0043 64EE C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     64F0 A71C     
0044               
0045 64F2 0204  20         li    tmp0,txt.head.run
     64F4 722B     
0046 64F6 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     64F8 A720     
0047               
0048 64FA 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     64FC A722     
0049 64FE 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6500 A728     
0050               
0051 6502 0204  20         li    tmp0,txt.hint.run
     6504 71B8     
0052 6506 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6508 A724     
0053               
0054 650A 0204  20         li    tmp0,txt.hint.run2
     650C 7248     
0055 650E C804  38         mov   tmp0,@cmdb.panhint2   ; Show extra hint
     6510 A726     
0056               
0057 6512 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     6514 A44E     
0058 6516 1303  14         jeq   !
0059                       ;-------------------------------------------------------
0060                       ; Show that FastMode is on
0061                       ;-------------------------------------------------------
0062 6518 0204  20         li    tmp0,txt.keys.run2    ; Highlight FastMode
     651A 7128     
0063 651C 1002  14         jmp   dialog.run.keylist
0064                       ;-------------------------------------------------------
0065                       ; Show that FastMode is off
0066                       ;-------------------------------------------------------
0067 651E 0204  20 !       li    tmp0,txt.keys.run
     6520 70DE     
0068                       ;-------------------------------------------------------
0069                       ; Show dialog
0070                       ;-------------------------------------------------------
0071               dialog.run.keylist:
0072 6522 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6524 A72A     
0073                       ;-------------------------------------------------------
0074                       ; Set filename (1)
0075                       ;-------------------------------------------------------
0076               dialog.run.set.filename1:
0077 6526 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     6528 6FD0     
0078                                                   ; \ i  @cat.device = Current device name
0079                                                   ; | i  @cat.shortcut.idx = Index in catalog
0080                                                   ; |        filename pointerlist
0081                                                   ; |
0082                                                   ; | o  @cat.fullfname = Combined string with
0083                                                   ; /        device & filename
0084               
0085 652A 0204  20         li    tmp0,cat.fullfname
     652C E016     
0086 652E C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6530 A006     
0087 6532 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6534 6C1E     
0088                                                   ; \ i  @parm1 = Pointer to string w. preset
0089                                                   ; /
0090 6536 100F  14         jmp   dialog.run.cursor    ; Set cursor shape
0091                       ;-------------------------------------------------------
0092                       ; Set filename (2)
0093                       ;-------------------------------------------------------
0094               dialog.run.set.filename2:
0095 6538 0204  20         li    tmp0,edb.filename     ; Set filename
     653A A526     
0096 653C 1305  14         jeq   dialog.run.clearcmd  ; No filename to set
0097               
0098 653E C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6540 A006     
0099 6542 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6544 6C1E     
0100                                                   ; \ i  @parm1 = Pointer to string w. preset
0101                                                   ; /
0102 6546 1007  14         jmp   dialog.run.cursor    ; Set cursor shape
0103                       ;------------------------------------------------------
0104                       ; Clear filename
0105                       ;------------------------------------------------------
0106               dialog.run.clearcmd:
0107 6548 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     654A A72E     
0108 654C 06A0  32         bl    @film                 ; Clear command
     654E 2236     
0109 6550 A72F                   data  cmdb.cmd,>00,80
     6552 0000     
     6554 0050     
0110                       ;-------------------------------------------------------
0111                       ; Set cursor shape
0112                       ;-------------------------------------------------------
0113               dialog.run.cursor:
0114 6556 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6558 6F76     
0115 655A C820  54         mov   @tv.curshape,@ramsat+2
     655C A214     
     655E A058     
0116                                                   ; Get cursor shape and color
0117                       ;-------------------------------------------------------
0118                       ; Show file browser
0119                       ;-------------------------------------------------------
0120 6560 06A0  32         bl    @pane.filebrowser     ; Show file browser
     6562 6FF4     
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               dialog.run.exit:
0125 6564 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0126 6566 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 6568 C2F9  30         mov   *stack+,r11           ; Pop R11
0128 656A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0081                       copy  "dialog.cat.asm"          ; Dialog "Catalog"
     **** ****     > dialog.cat.asm
0001               * dir......: dialog.cat.asm
0002               * Purpose...: Dialog "Catalog drive/directory"
0003               
0004               ***************************************************************
0005               * dialog.cat
0006               * Open Dialog "Dir"
0007               ***************************************************************
0008               * bl @dialog.cat
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cat:
0022 656C 0649  14         dect  stack
0023 656E C64B  30         mov   r11,*stack            ; Save return address
0024 6570 0649  14         dect  stack
0025 6572 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6574 0204  20         li    tmp0,id.dialog.cat
     6576 000D     
0030 6578 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     657A A71C     
0031               
0032 657C 0204  20         li    tmp0,txt.head.dir
     657E 733D     
0033 6580 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6582 A720     
0034               
0035 6584 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6586 A722     
0036 6588 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     658A A728     
0037               
0038 658C 0204  20         li    tmp0,txt.hint.dir
     658E 71B8     
0039 6590 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6592 A724     
0040               
0041 6594 0204  20         li    tmp0,txt.hint.dir2
     6596 734A     
0042 6598 C804  38         mov   tmp0,@cmdb.panhint2   ; Extra hint to display
     659A A726     
0043 659C 0204  20         li    tmp0,txt.keys.dir     ; Key list
     659E 70DE     
0044                       ;-------------------------------------------------------
0045                       ; Show dialog
0046                       ;-------------------------------------------------------
0047               dialog.cat.keylist:
0048 65A0 C804  38         mov   tmp0,@cmdb.pankeys    ; Show keylist in status line
     65A2 A72A     
0049                       ;-------------------------------------------------------
0050                       ; Set filename (1)
0051                       ;-------------------------------------------------------
0052               dialog.cat.set.filename1:
0053 65A4 0204  20         li    tmp0,cat.device       ; Get pointer to catalog device name
     65A6 EEB0     
0054 65A8 C154  26         mov   *tmp0,tmp1            ; Anything set?
0055 65AA 1304  14         jeq   dialog.cat.cursor     ; No device set
0056               
0057 65AC C804  38         mov   tmp0,@parm1           ; Get pointer to string
     65AE A006     
0058 65B0 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     65B2 6C1E     
0059                                                   ; \ i  @parm1 = Pointer to string w. preset
0060                       ;-------------------------------------------------------
0061                       ; Set cursor shape
0062                       ;-------------------------------------------------------
0063               dialog.cat.cursor:
0064 65B4 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     65B6 6F76     
0065 65B8 C820  54         mov   @tv.curshape,@ramsat+2
     65BA A214     
     65BC A058     
0066                                                   ; Get cursor shape and color
0067                       ;-------------------------------------------------------
0068                       ; Show file browser
0069                       ;-------------------------------------------------------
0070 65BE 06A0  32         bl    @pane.filebrowser     ; Show file browser
     65C0 6FF4     
0071                       ;-------------------------------------------------------
0072                       ; Exit
0073                       ;-------------------------------------------------------
0074               dialog.cat.exit:
0075 65C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 65C4 C2F9  30         mov   *stack+,r11           ; Pop R11
0077 65C6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0082                       copy  "dialog.cfg.asm"          ; Dialog "Configure"
     **** ****     > dialog.cfg.asm
0001               * FILE......: dialog.cfg.asm
0002               * Purpose...: Dialog "Configure"
0003               
0004               ***************************************************************
0005               * dialog.cfg
0006               * Open Dialog "Configure"
0007               ***************************************************************
0008               * bl @dialog.cfg
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cfg:
0022 65C8 0649  14         dect  stack
0023 65CA C64B  30         mov   r11,*stack            ; Save return address
0024 65CC 0649  14         dect  stack
0025 65CE C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 65D0 0204  20         li    tmp0,id.dialog.cfg
     65D2 006C     
0030 65D4 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     65D6 A71C     
0031               
0032 65D8 0204  20         li    tmp0,txt.head.config
     65DA 7934     
0033 65DC C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     65DE A720     
0034               
0035 65E0 0204  20         li    tmp0,txt.info.config
     65E2 7941     
0036 65E4 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     65E6 A722     
0037               
0038 65E8 0204  20         li    tmp0,pos.info.config
     65EA 7952     
0039 65EC C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     65EE A728     
0040               
0041 65F0 04E0  34         clr   @cmdb.panhint         ; No hint to display
     65F2 A724     
0042 65F4 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     65F6 A726     
0043               
0044 65F8 0204  20         li    tmp0,txt.keys.config
     65FA 7955     
0045 65FC C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     65FE A72A     
0046               
0047 6600 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6602 6F88     
0048                       ;-------------------------------------------------------
0049                       ; Exit
0050                       ;-------------------------------------------------------
0051               dialog.cfg.exit:
0052 6604 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 6606 C2F9  30         mov   *stack+,r11           ; Pop R11
0054 6608 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0083                       copy  "dialog.cfg.clip.asm"     ; Dialog "Configure clipboard"
     **** ****     > dialog.cfg.clip.asm
0001               * FILE......: dialog.cfg.clip.asm
0002               * Purpose...: Dialog "Configure clipboard"
0003               
0004               ***************************************************************
0005               * dialog.cfg.clip
0006               * Open Dialog "Configure clipboard"
0007               ***************************************************************
0008               * bl @dialog.cfg.clip
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.cfg.clip:
0022 660A 0649  14         dect  stack
0023 660C C64B  30         mov   r11,*stack            ; Save return address
0024 660E 0649  14         dect  stack
0025 6610 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6612 0204  20         li    tmp0,id.dialog.cfg.clip
     6614 0013     
0030 6616 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6618 A71C     
0031               
0032 661A 0204  20         li    tmp0,txt.head.clipdev
     661C 796F     
0033 661E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6620 A720     
0034               
0035 6622 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     6624 A722     
0036 6626 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6628 A728     
0037               
0038 662A 0204  20         li    tmp0,txt.hint.clipdev
     662C 7988     
0039 662E C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6630 A724     
0040 6632 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6634 A726     
0041               
0042 6636 0204  20         li    tmp0,txt.keys.clipdev
     6638 79C1     
0043 663A C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     663C A72A     
0044                       ;-------------------------------------------------------
0045                       ; Set command line
0046                       ;-------------------------------------------------------
0047 663E 0204  20         li    tmp0,tv.clip.fname    ; Set clipboard
     6640 DE50     
0048 6642 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     6644 A006     
0049               
0050 6646 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6648 6C1E     
0051                                                   ; \ i  @parm1 = Pointer to string w. preset
0052                                                   ; /
0053                       ;-------------------------------------------------------
0054                       ; Set cursor shape
0055                       ;-------------------------------------------------------
0056 664A 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     664C 6F76     
0057 664E C820  54         mov   @tv.curshape,@ramsat+2
     6650 A214     
     6652 A058     
0058                                                   ; Get cursor shape and color
0059                       ;-------------------------------------------------------
0060                       ; Exit
0061                       ;-------------------------------------------------------
0062               dialog.cfg.clip.exit:
0063 6654 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 6656 C2F9  30         mov   *stack+,r11           ; Pop R11
0065 6658 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0084                       copy  "dialog.font.asm"         ; Dialog "Configure font"
     **** ****     > dialog.font.asm
0001               * FILE......: dialog.font.asm
0002               * Purpose...: Dialog "Configure font"
0003               
0004               ***************************************************************
0005               * dialog.font
0006               * Open Dialog for configuring font
0007               ***************************************************************
0008               * bl @dialog.font
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.font:
0022 665A 0649  14         dect  stack
0023 665C C64B  30         mov   r11,*stack            ; Save return address
0024 665E 0649  14         dect  stack
0025 6660 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029               dialog.font.setup:
0030 6662 0204  20         li    tmp0,id.dialog.font
     6664 006E     
0031 6666 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6668 A71C     
0032               
0033 666A 0204  20         li    tmp0,txt.head.font
     666C 79FD     
0034 666E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6670 A720     
0035               
0036 6672 0204  20         li    tmp0,pos.info.font
     6674 7A2A     
0037 6676 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     6678 A728     
0038                       ;------------------------------------------------------
0039                       ; Other panel strings
0040                       ;------------------------------------------------------
0041 667A 0204  20         li    tmp0,txt.hint.font
     667C 7A30     
0042 667E C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6680 A724     
0043               
0044 6682 0204  20         li    tmp0,txt.info.font
     6684 7A11     
0045 6686 C804  38         mov   tmp0,@cmdb.paninfo    ; Show info message
     6688 A722     
0046                       ;-------------------------------------------------------
0047                       ; Show dialog
0048                       ;-------------------------------------------------------
0049               dialog.font.keylist:
0050 668A 0204  20         li    tmp0,txt.keys.font
     668C 7A5A     
0051 668E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6690 A72A     
0052               
0053 6692 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6694 6F88     
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               dialog.font.exit:
0058 6696 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 6698 C2F9  30         mov   *stack+,r11           ; Pop R11
0060 669A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0085                       copy  "dialog.clipboard.asm"    ; Dialog "Copy from clipboard"
     **** ****     > dialog.clipboard.asm
0001               * FILE......: dialog.clipboard.asm
0002               * Purpose...: Dialog "Insert snippet from clipboard"
0003               
0004               ***************************************************************
0005               * dialog.clipboard
0006               * Open Dialog for inserting snippet from clipboard
0007               ***************************************************************
0008               * bl @dialog.clipboard
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.clipboard:
0022 669C 0649  14         dect  stack
0023 669E C64B  30         mov   r11,*stack            ; Save return address
0024 66A0 0649  14         dect  stack
0025 66A2 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029               dialog.clipboard.setup:
0030 66A4 0204  20         li    tmp0,id.dialog.clipboard
     66A6 0067     
0031 66A8 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     66AA A71C     
0032                       ;------------------------------------------------------
0033                       ; Include line number in pane header
0034                       ;------------------------------------------------------
0035 66AC 06A0  32         bl    @film
     66AE 2236     
0036 66B0 A780                   data cmdb.panhead.buf,>00,50
     66B2 0000     
     66B4 0032     
0037                                                   ; Clear pane header buffer
0038               
0039 66B6 06A0  32         bl    @cpym2m
     66B8 253A     
0040 66BA 7381                   data txt.head.clipboard,cmdb.panhead.buf,27
     66BC A780     
     66BE 001B     
0041               
0042 66C0 C820  54         mov   @fb.row,@parm1
     66C2 A306     
     66C4 A006     
0043 66C6 06A0  32         bl    @fb.row2line          ; Row to editor line
     66C8 318E     
0044                                                   ; \ i @fb.topline = Top line in frame buffer
0045                                                   ; | i @parm1      = Row in frame buffer
0046                                                   ; / o @outparm1   = Matching line in EB
0047               
0048 66CA 05A0  34         inc   @outparm1             ; Add base 1
     66CC A018     
0049               
0050 66CE 06A0  32         bl    @mknum                ; Convert integer to string
     66D0 2A56     
0051 66D2 A018                   data  outparm1        ; \ i  p0 = Pointer to 16 bit unsigned int
0052 66D4 A100                   data  rambuf          ; | i  p1 = Pointer to 5 byte string buffer
0053 66D6 30                     byte  48              ; | i  p2 = MSB offset for ASCII digit
0054 66D7   30                   byte  48              ; / i  p2 = LSB char for replacing leading 0
0055               
0056 66D8 06A0  32         bl    @cpym2m
     66DA 253A     
0057 66DC A100                   data rambuf,cmdb.panhead.buf + 27,5
     66DE A79B     
     66E0 0005     
0058                                                   ; Add line number to buffer
0059               
0060 66E2 0204  20         li    tmp0,32
     66E4 0020     
0061 66E6 0A84  32         sla   tmp0,8
0062 66E8 D804  38         movb  tmp0,@cmdb.panhead.buf
     66EA A780     
0063                                                   ; Set length byte
0064               
0065 66EC 0204  20         li    tmp0,cmdb.panhead.buf
     66EE A780     
0066 66F0 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     66F2 A720     
0067                       ;------------------------------------------------------
0068                       ; Other panel strings
0069                       ;------------------------------------------------------
0070 66F4 0204  20         li    tmp0,txt.hint.clipboard
     66F6 73AE     
0071 66F8 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     66FA A724     
0072               
0073 66FC 0204  20         li    tmp0,txt.info.clipboard
     66FE 739D     
0074 6700 C804  38         mov   tmp0,@cmdb.paninfo    ; Show info message
     6702 A722     
0075               
0076 6704 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     6706 A728     
0077               
0078 6708 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     670A 6BD6     
0079               
0080 670C 0760  38         abs   @fh.offsetopcode      ; FastMode is off ?
     670E A44E     
0081 6710 1303  14         jeq   !
0082                       ;-------------------------------------------------------
0083                       ; Show that FastMode is on
0084                       ;-------------------------------------------------------
0085 6712 0204  20         li    tmp0,txt.keys.clipboard ; Highlight FastMode
     6714 73E5     
0086 6716 1002  14         jmp   dialog.clipboard.keylist
0087                       ;-------------------------------------------------------
0088                       ; Show that FastMode is off
0089                       ;-------------------------------------------------------
0090 6718 0204  20 !       li    tmp0,txt.keys.clipboard
     671A 73E5     
0091                       ;-------------------------------------------------------
0092                       ; Show dialog
0093                       ;-------------------------------------------------------
0094               dialog.clipboard.keylist:
0095 671C C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     671E A72A     
0096               
0097 6720 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6722 6F88     
0098                       ;-------------------------------------------------------
0099                       ; Exit
0100                       ;-------------------------------------------------------
0101               dialog.clipboard.exit:
0102 6724 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0103 6726 C2F9  30         mov   *stack+,r11           ; Pop R11
0104 6728 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0086                       copy  "dialog.unsaved.asm"      ; Dialog "Unsaved changes"
     **** ****     > dialog.unsaved.asm
0001               * FILE......: dialog.unsaved.asm
0002               * Purpose...: Dialog "Unsaved changes"
0003               
0004               ***************************************************************
0005               * dialog.unsaved
0006               * Dialog "Unsaved changes"
0007               ***************************************************************
0008               * bl @dialog.unsaved
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.unsaved:
0022 672A 0649  14         dect  stack
0023 672C C64B  30         mov   r11,*stack            ; Save return address
0024 672E 0649  14         dect  stack
0025 6730 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6732 0204  20         li    tmp0,id.dialog.unsaved
     6734 0065     
0030 6736 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     6738 A71C     
0031               
0032 673A 0204  20         li    tmp0,txt.head.unsaved
     673C 74E1     
0033 673E C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6740 A720     
0034               
0035 6742 0204  20         li    tmp0,txt.info.unsaved
     6744 74F6     
0036 6746 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     6748 A722     
0037 674A 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     674C A728     
0038               
0039 674E 0204  20         li    tmp0,txt.hint.unsaved
     6750 7518     
0040 6752 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6754 A724     
0041 6756 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     6758 A726     
0042               
0043 675A 0204  20         li    tmp0,txt.keys.unsaved
     675C 7550     
0044 675E C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6760 A72A     
0045               
0046 6762 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6764 6F88     
0047                       ;-------------------------------------------------------
0048                       ; Exit
0049                       ;-------------------------------------------------------
0050               dialog.unsaved.exit:
0051 6766 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0052 6768 C2F9  30         mov   *stack+,r11           ; Pop R11
0053 676A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0087                       copy  "dialog.basic.asm"        ; Dialog "Basic"
     **** ****     > dialog.basic.asm
0001               * basic......: dialog.basic.asm
0002               * Purpose....: Dialog "Basic"
0003               
0004               ***************************************************************
0005               * dialog.basic
0006               * Open Dialog "Basic"
0007               ***************************************************************
0008               * bl @dialog.basic
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.basic:
0022 676C 0649  14         dect  stack
0023 676E C64B  30         mov   r11,*stack            ; Save return address
0024 6770 0649  14         dect  stack
0025 6772 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6774 0204  20         li    tmp0,id.dialog.basic
     6776 006B     
0030 6778 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     677A A71C     
0031               
0032 677C 0204  20         li    tmp0,txt.head.basic
     677E 7839     
0033 6780 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6782 A720     
0034               
0035 6784 0204  20         li    tmp0,pos.info.basic
     6786 785D     
0036 6788 C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     678A A728     
0037               
0038 678C 0204  20         li    tmp0,txt.hint.basic
     678E 78AA     
0039 6790 C804  38         mov   tmp0,@cmdb.panhint    ; Hint in bottom line
     6792 A724     
0040               
0041 6794 0204  20         li    tmp0,txt.hint.basic2  ; \ Display extra hint
     6796 7861     
0042 6798 C804  38         mov   tmp0,@cmdb.panhint2   ; /
     679A A726     
0043               
0044 679C C120  34         mov   @tib.autounpk,tmp0    ; Get 'AutoUnpack' flag
     679E A0C0     
0045 67A0 1303  14         jeq   !
0046                       ;-------------------------------------------------------
0047                       ; Flag is on
0048                       ;-------------------------------------------------------
0049 67A2 0204  20         li    tmp0,txt.keys.basic2
     67A4 791C     
0050 67A6 1008  14         jmp   dialog.basic.done
0051                       ;-------------------------------------------------------
0052                       ; Flag is off
0053                       ;-------------------------------------------------------
0054 67A8 C120  34 !       mov   @tib.session,tmp0     ; Already did session before?
     67AA A0B4     
0055 67AC 1303  14         jeq   dialog.basic.amonly   ; No, only AutoUnpack
0056               
0057 67AE 0204  20         li    tmp0,txt.keys.basic1  ; Add "Unpack" option to keylist
     67B0 3C8A     
0058 67B2 1002  14         jmp   dialog.basic.done
0059                       ;-------------------------------------------------------
0060                       ; AutoUnpack option only
0061                       ;-------------------------------------------------------
0062               dialog.basic.amonly:
0063 67B4 0204  20         li    tmp0,txt.keys.basic   ; Only AutoUnpack
     67B6 78EF     
0064                       ;-------------------------------------------------------
0065                       ; Show dialog
0066                       ;-------------------------------------------------------
0067               dialog.basic.done:
0068 67B8 C804  38         mov   tmp0,@cmdb.pankeys    ; Save keylist in status line
     67BA A72A     
0069 67BC 06A0  32         bl    @tibasic.buildstr     ; Build session selection string
     67BE 6EB2     
0070 67C0 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     67C2 6F88     
0071                       ;-------------------------------------------------------
0072                       ; Exit
0073                       ;-------------------------------------------------------
0074               dialog.basic.exit:
0075 67C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 67C6 C2F9  30         mov   *stack+,r11           ; Pop R11
0077 67C8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0088                       copy  "dialog.shortcuts.asm"    ; Dialog "Shortcuts"
     **** ****     > dialog.shortcuts.asm
0001               * FILE......: dialog.shortcuts.asm
0002               * Purpose...: Dialog "Shortcuts"
0003               
0004               ***************************************************************
0005               * dialog.shortcuts
0006               * Dialog "Shortcuts"
0007               ***************************************************************
0008               * bl @dialog.shortcuts
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.shortcuts:
0022 67CA 0649  14         dect  stack
0023 67CC C64B  30         mov   r11,*stack            ; Save return address
0024 67CE 0649  14         dect  stack
0025 67D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 67D2 0204  20         li    tmp0,id.dialog.shortcuts
     67D4 006F     
0030 67D6 C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     67D8 A71C     
0031               
0032 67DA 0204  20         li    tmp0,txt.head.shortcuts
     67DC 7A74     
0033 67DE C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     67E0 A720     
0034               
0035 67E2 0204  20         li    tmp0,txt.info.shortcuts
     67E4 7A83     
0036 67E6 C804  38         mov   tmp0,@cmdb.paninfo    ; Info message instead of input prompt
     67E8 A722     
0037               
0038 67EA 0204  20         li    tmp0,pos.info.shortcuts
     67EC 7AAE     
0039 67EE C804  38         mov   tmp0,@cmdb.panmarkers ; Show letter markers
     67F0 A728     
0040               
0041 67F2 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     67F4 A726     
0042               
0043 67F6 0204  20         li    tmp0,txt.hint.shortcuts
     67F8 7AB6     
0044 67FA C804  38         mov   tmp0,@cmdb.panhint    ; Empty hint
     67FC A724     
0045               
0046 67FE 0204  20         li    tmp0,txt.keys.shortcuts
     6800 7AB8     
0047 6802 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6804 A72A     
0048               
0049 6806 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     6808 6F88     
0050                       ;-------------------------------------------------------
0051                       ; Exit
0052                       ;-------------------------------------------------------
0053               dialog.shortcuts.exit:
0054 680A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0055 680C C2F9  30         mov   *stack+,r11           ; Pop R11
0056 680E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0089                       copy  "dialog.goto.asm"         ; Dialog "Goto"
     **** ****     > dialog.goto.asm
0001               * FILE......: dialog.goto.asm
0002               * Purpose...: Dialog "Goto line"
0003               
0004               ***************************************************************
0005               * dialog.goto
0006               * Dialog "Goto line"
0007               ***************************************************************
0008               * bl @dialog.goto
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               dialog.goto:
0022 6810 0649  14         dect  stack
0023 6812 C64B  30         mov   r11,*stack            ; Save return address
0024 6814 0649  14         dect  stack
0025 6816 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;-------------------------------------------------------
0027                       ; Setup dialog
0028                       ;-------------------------------------------------------
0029 6818 0204  20         li    tmp0,id.dialog.goto
     681A 0014     
0030 681C C804  38         mov   tmp0,@cmdb.dialog     ; Set dialog ID
     681E A71C     
0031               
0032 6820 0204  20         li    tmp0,txt.head.goto
     6822 7472     
0033 6824 C804  38         mov   tmp0,@cmdb.panhead    ; Header for dialog
     6826 A720     
0034               
0035 6828 04E0  34         clr   @cmdb.paninfo         ; No info message, do input prompt
     682A A722     
0036 682C 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     682E A728     
0037               
0038 6830 0204  20         li    tmp0,txt.hint.goto
     6832 7481     
0039 6834 C804  38         mov   tmp0,@cmdb.panhint    ; Hint line in dialog
     6836 A724     
0040 6838 04E0  34         clr   @cmdb.panhint2        ; No extra hint to display
     683A A726     
0041               
0042 683C 0204  20         li    tmp0,txt.keys.goto
     683E 74BE     
0043 6840 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6842 A72A     
0044                       ;------------------------------------------------------
0045                       ; Clear command
0046                       ;------------------------------------------------------
0047 6844 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6846 A72E     
0048 6848 06A0  32         bl    @film                 ; Clear command
     684A 2236     
0049 684C A72F                   data  cmdb.cmd,>00,80
     684E 0000     
     6850 0050     
0050                       ;-------------------------------------------------------
0051                       ; Set cursor shape
0052                       ;-------------------------------------------------------
0053               dialog.goto.cursor:
0054 6852 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6854 6F76     
0055 6856 C820  54         mov   @tv.curshape,@ramsat+2
     6858 A214     
     685A A058     
0056                                                   ; Get cursor shape and color
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               dialog.goto.exit:
0061 685C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 685E C2F9  30         mov   *stack+,r11           ; Pop R11
0063 6860 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0090                       ;-----------------------------------------------------------------------
0091                       ; Command buffer handling
0092                       ;-----------------------------------------------------------------------
0093                       copy  "pane.utils.hint.asm"     ; Show hint in pane
     **** ****     > pane.utils.hint.asm
0001               * FILE......: pane.utils.asm
0002               * Purpose...: Show hint message in pane
0003               
0004               ***************************************************************
0005               * pane.show_hintx
0006               * Show hint message
0007               ***************************************************************
0008               * bl  @pane.show_hintx
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Cursor YX position
0012               * @parm2 = Pointer to Length-prefixed string
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               pane.show_hintx:
0021 6862 0649  14         dect  stack
0022 6864 C64B  30         mov   r11,*stack            ; Save return address
0023 6866 0649  14         dect  stack
0024 6868 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 686A 0649  14         dect  stack
0026 686C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 686E 0649  14         dect  stack
0028 6870 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 6872 0649  14         dect  stack
0030 6874 C647  30         mov   tmp3,*stack           ; Push tmp3
0031                       ;-------------------------------------------------------
0032                       ; Display string
0033                       ;-------------------------------------------------------
0034 6876 C820  46         mov   @parm1,@wyx           ; Set cursor
     6878 A006     
     687A 832A     
0035 687C C160  34         mov   @parm2,tmp1           ; Get string to display
     687E A008     
0036 6880 06A0  32         bl    @xutst0               ; Display string
     6882 2420     
0037                       ;-------------------------------------------------------
0038                       ; Get number of bytes to fill ...
0039                       ;-------------------------------------------------------
0040 6884 C120  34         mov   @parm2,tmp0
     6886 A008     
0041 6888 D114  26         movb  *tmp0,tmp0            ; Get length byte of hint
0042 688A 0984  32         srl   tmp0,8                ; Right justify
0043 688C C184  18         mov   tmp0,tmp2
0044 688E C1C4  18         mov   tmp0,tmp3             ; Work copy
0045 6890 0506  14         neg   tmp2
0046 6892 0226  22         ai    tmp2,80               ; Number of bytes to fill
     6894 0050     
0047                       ;-------------------------------------------------------
0048                       ; ... and clear until end of line
0049                       ;-------------------------------------------------------
0050 6896 C120  34         mov   @parm1,tmp0           ; \ Restore YX position
     6898 A006     
0051 689A A107  18         a     tmp3,tmp0             ; | Adjust X position to end of string
0052 689C C804  30         mov   tmp0,@wyx             ; / Set cursor
     689E 832A     
0053               
0054 68A0 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     68A2 23FA     
0055                                                   ; \ i  @wyx = Cursor position
0056                                                   ; / o  tmp0 = VDP target address
0057               
0058 68A4 0205  20         li    tmp1,32               ; Byte to fill
     68A6 0020     
0059               
0060 68A8 06A0  32         bl    @xfilv                ; Clear line
     68AA 2294     
0061                                                   ; i \  tmp0 = start address
0062                                                   ; i |  tmp1 = byte to fill
0063                                                   ; i /  tmp2 = number of bytes to fill
0064                       ;-------------------------------------------------------
0065                       ; Exit
0066                       ;-------------------------------------------------------
0067               pane.show_hintx.exit:
0068 68AC C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0069 68AE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0070 68B0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 68B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 68B4 C2F9  30         mov   *stack+,r11           ; Pop R11
0073 68B6 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * pane.show_hint
0079               * Show hint message (data parameter version)
0080               ***************************************************************
0081               * bl  @pane.show_hint
0082               *     data p1,p2
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * p1 = Cursor YX position
0086               * p2 = Pointer to Length-prefixed string
0087               *--------------------------------------------------------------
0088               * OUTPUT
0089               * none
0090               *--------------------------------------------------------------
0091               * Register usage
0092               * none
0093               ********|*****|*********************|**************************
0094               pane.show_hint:
0095 68B8 C83B  50         mov   *r11+,@parm1          ; Get parameter 1
     68BA A006     
0096 68BC C83B  50         mov   *r11+,@parm2          ; Get parameter 2
     68BE A008     
0097 68C0 0649  14         dect  stack
0098 68C2 C64B  30         mov   r11,*stack            ; Save return address
0099                       ;-------------------------------------------------------
0100                       ; Display pane hint
0101                       ;-------------------------------------------------------
0102 68C4 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     68C6 6862     
0103                       ;-------------------------------------------------------
0104                       ; Exit
0105                       ;-------------------------------------------------------
0106               pane.show_hint.exit:
0107 68C8 C2F9  30         mov   *stack+,r11           ; Pop R11
0108 68CA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0094                       copy  "pane.utils.dialog.asm"   ; Dialog utility functions
     **** ****     > pane.utils.dialog.asm
0001               * FILE......: pane.utils.dialog.asm
0002               * Purpose...: Dialog helper functions
0003               
0004               
0005               ***************************************************************
0006               * dialog.hearts.tat
0007               * Dump color for hearts in dialog
0008               ***************************************************************
0009               * bl   @dialog.hearts.tat
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Start column (position 1st heart)
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * none
0022               ********|*****|*********************|**************************
0023               dialog.hearts.tat:
0024 68CC 0649  14         dect  stack
0025 68CE C64B  30         mov   r11,*stack            ; Save return address
0026 68D0 0649  14         dect  stack
0027 68D2 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 68D4 0649  14         dect  stack
0029 68D6 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 68D8 0649  14         dect  stack
0031 68DA C646  30         mov   tmp2,*stack           ; Push tmp2
0032                       ;-------------------------------------------------------
0033                       ; Get background color for hearts in TAT
0034                       ;-------------------------------------------------------
0035 68DC C120  34         mov   @cmdb.vdptop,tmp0     ; \ 2nd row in CMDB TAT
     68DE A70E     
0036 68E0 0224  22         ai    tmp0,80               ; /
     68E2 0050     
0037 68E4 A120  34         a     @parm1,tmp0           ; Add start column (position 1st heart)
     68E6 A006     
0038               
0039 68E8 06A0  32         bl    @xvgetb               ; Read VDP byte
     68EA 22E4     
0040               
0041 68EC C144  18         mov   tmp0,tmp1             ; Save color combination
0042 68EE 0245  22         andi  tmp1,>000f            ; Only keep background
     68F0 000F     
0043 68F2 0265  22         ori   tmp1,>0060            ; Set foreground color to red
     68F4 0060     
0044               
0045 68F6 C120  34         mov   @cmdb.vdptop,tmp0     ; \ 2nd row in CMDB TAT
     68F8 A70E     
0046 68FA 0224  22         ai    tmp0,80               ; /
     68FC 0050     
0047 68FE A120  34         a     @parm1,tmp0           ; Add start column (position 1st heart)
     6900 A006     
0048               
0049 6902 0206  20         li    tmp2,10               ; Set loop counter
     6904 000A     
0050                       ;-------------------------------------------------------
0051                       ; Dump colors for 10 hearts in TI Basic dialog (TAT)
0052                       ;-------------------------------------------------------
0053               dialog.hearts.tat.loop:
0054                       ;-------------------------------------------------------
0055                       ; Dump color for single heart
0056                       ;-------------------------------------------------------
0057 6906 0649  14         dect  stack
0058 6908 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 690A 0649  14         dect  stack
0060 690C C645  30         mov   tmp1,*stack           ; Push tmp1
0061 690E 0649  14         dect  stack
0062 6910 C646  30         mov   tmp2,*stack           ; Push tmp2
0063               
0064 6912 0206  20         li    tmp2,2                ; 2 bytes
     6914 0002     
0065               
0066 6916 06A0  32         bl    @xfilv                ; Fill colors
     6918 2294     
0067                                                   ; i \  tmp0 = start address
0068                                                   ; i |  tmp1 = byte to fill
0069                                                   ; i /  tmp2 = number of bytes to fill
0070               
0071 691A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 691C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 691E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074                       ;-------------------------------------------------------
0075                       ; Next iteration
0076                       ;-------------------------------------------------------
0077 6920 0224  22         ai    tmp0,4                ; Next heart in TAT
     6922 0004     
0078 6924 0606  14         dec   tmp2                  ; Next iteration
0079               
0080 6926 16EF  14         jne   dialog.hearts.tat.loop
0081                       ;-------------------------------------------------------
0082                       ; Exit
0083                       ;-------------------------------------------------------
0084               dialog.hearts.tat.exit:
0085 6928 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0086 692A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 692C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 692E C2F9  30         mov   *stack+,r11           ; Pop R11
0089 6930 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0095                       copy  "pane.cmdb.show.asm"      ; Show command buffer pane
     **** ****     > pane.cmdb.show.asm
0001               * FILE......: pane.cmdb.show.asm
0002               * Purpose...: Show command buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.show
0006               * Show command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.show
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               pane.cmdb.show:
0022 6932 0649  14         dect  stack
0023 6934 C64B  30         mov   r11,*stack            ; Save return address
0024 6936 0649  14         dect  stack
0025 6938 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 693A 0649  14         dect  stack
0027 693C C645  30         mov   tmp1,*stack           ; Push tmp1
0028 693E 0649  14         dect  stack
0029 6940 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Backup framebuffer cursor position
0032                       ;------------------------------------------------------
0033 6942 C120  34         mov   @cmdb.fb.yxsave,tmp0  ; Check if variable is "write protected"
     6944 A704     
0034 6946 0544  14         inv   tmp0                  ; \ Was it >ffff before, so now >0000 ?
0035 6948 1603  14         jne   pane.cmdb.show.rest   ; / No, it's write protected.
0036 694A C820  50         mov   @wyx,@cmdb.fb.yxsave  ; Save YX position in frame buffer
     694C 832A     
     694E A704     
0037                       ;------------------------------------------------------
0038                       ; Further processing
0039                       ;------------------------------------------------------
0040               pane.cmdb.show.rest:
0041 6950 1000  14         nop
0072                       ;------------------------------------------------------
0073                       ; Show command buffer pane
0074                       ;------------------------------------------------------
0075 6952 0204  20         li    tmp0,pane.botrow
     6954 001D     
0076 6956 6120  34         s     @cmdb.scrrows,tmp0
     6958 A706     
0077 695A C804  38         mov   tmp0,@fb.scrrows      ; Resize framebuffer
     695C A31C     
0078               
0079 695E 0A84  32         sla   tmp0,8                ; LSB to MSB (Y), X=0
0080 6960 C804  38         mov   tmp0,@cmdb.yxtop      ; Set position of command buffer header line
     6962 A710     
0081                       ;------------------------------------------------------
0082                       ; Determine initial cursor position
0083                       ;------------------------------------------------------
0084 6964 0224  22         ai    tmp0,>0100            ; Skip row
     6966 0100     
0085 6968 C804  38         mov   tmp0,@cmdb.yxprompt   ; Screen position of prompt in cmdb pane
     696A A712     
0086               
0087 696C D160  34         movb  @cmdb.cmdlen,tmp1     ; \
     696E A72E     
0088 6970 0985  32         srl   tmp1,8                ; | Put cursor at end of command string
0089 6972 A105  18         a     tmp1,tmp0             ; /
0090 6974 C805  38         mov   tmp1,@cmdb.column     ; Set column position (must match cursor X)
     6976 A714     
0091               
0092 6978 0584  14         inc   tmp0                  ; Skip ">" character
0093 697A C804  38         mov   tmp0,@cmdb.cursor     ; Screen position of cursor in cmdb pane
     697C A70A     
0094               
0095                       ;------------------------------------------------------
0096                       ; Show pane
0097                       ;------------------------------------------------------
0098 697E 0720  34         seto  @cmdb.visible         ; Show pane
     6980 A702     
0099               
0100 6982 0204  20         li    tmp0,tv.1timeonly     ; \ Set CMDB dirty flag (trigger redraw),
     6984 00FE     
0101 6986 C804  38         mov   tmp0,@cmdb.dirty      ; / but colorize CMDB pane only once.
     6988 A71A     
0102               
0103 698A 0204  20         li    tmp0,pane.focus.cmdb  ; \ CMDB pane has focus
     698C 0001     
0104 698E C804  38         mov   tmp0,@tv.pane.focus   ; /
     6990 A224     
0105               
0106 6992 06A0  32         bl    @pane.errline.hide    ; Hide error pane
     6994 6F64     
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               pane.cmdb.show.exit:
0111 6996 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 6998 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 699A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 699C C2F9  30         mov   *stack+,r11           ; Pop r11
0115 699E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0096                       copy  "pane.cmdb.hide.asm"      ; Hide command buffer pane
     **** ****     > pane.cmdb.hide.asm
0001               * FILE......: pane.cmdb.hide.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.hide
0006               * Hide command buffer pane
0007               ***************************************************************
0008               * bl @pane.cmdb.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               *--------------------------------------------------------------
0019               * Hiding the command buffer automatically passes pane focus
0020               * to frame buffer. SP2 can destroy tmp0-tmp2 so save on stack.
0021               ********|*****|*********************|**************************
0022               pane.cmdb.hide:
0023 69A0 0649  14         dect  stack
0024 69A2 C64B  30         mov   r11,*stack            ; Save return address
0025 69A4 0649  14         dect  stack
0026 69A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 69A8 0649  14         dect  stack
0028 69AA C645  30         mov   tmp1,*stack           ; Push tmp1
0029 69AC 0649  14         dect  stack
0030 69AE C646  30         mov   tmp2,*stack           ; Push tmp2
0031 69B0 0649  14         dect  stack
0032 69B2 C660  46         mov   @parm1,*stack         ; Push @parm1
     69B4 A006     
0033 69B6 0649  14         dect  stack
0034 69B8 C660  46         mov   @parm2,*stack         ; Push @parm2
     69BA A008     
0035 69BC 0649  14         dect  stack
0036 69BE C660  46         mov   @parm3,*stack         ; Push @parm3
     69C0 A00A     
0037                       ;------------------------------------------------------
0038                       ; Clear error/hint & status line
0039                       ;------------------------------------------------------
0040 69C2 06A0  32         bl    @hchar                ; Destroys tmp0, tmp1,tmp2, tmp3
     69C4 2832     
0041 69C6 1700                   byte pane.botrow-6,0,32,80*3
     69C8 20F0     
0042 69CA 1A00                   byte pane.botrow-3,0,32,80*3
     69CC 20F0     
0043 69CE 1C00                   byte pane.botrow-1,0,32,80*2
     69D0 20A0     
0044 69D2 FFFF                   data EOL
0045                       ;------------------------------------------------------
0046                       ; Hide command buffer pane (rest)
0047                       ;------------------------------------------------------
0048 69D4 C820  46         mov   @cmdb.fb.yxsave,@wyx  ; Position cursor in framebuffer
     69D6 A704     
     69D8 832A     
0049 69DA 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     69DC A704     
0050 69DE 04E0  34         clr   @cmdb.visible         ; Hide command buffer pane
     69E0 A702     
0051 69E2 0720  34         seto  @fb.dirty             ; Redraw framebuffer
     69E4 A318     
0052 69E6 04E0  34         clr   @tv.pane.focus        ; Framebuffer has focus!
     69E8 A224     
0053                       ;------------------------------------------------------
0054                       ; Reload current color scheme
0055                       ;------------------------------------------------------
0056 69EA 0720  34         seto  @parm1                ; Do not turn screen off while
     69EC A006     
0057                                                   ; reloading color scheme
0058 69EE 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     69F0 A008     
0059 69F2 04E0  34         clr   @parm3                ; Colorize all panes
     69F4 A00A     
0060               
0061 69F6 06A0  32         bl    @pane.colorscheme.load
     69F8 6FAC     
0062                                                   ; Reload color scheme
0063                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0064                                                   ; | i  @parm2 = Skip colorizing marked lines
0065                                                   ; |             if >FFFF
0066                                                   ; | i  @parm3 = Only colorize CMDB pane
0067                                                   ; /             if >FFFF
0068               
0069 69FA 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     69FC 6F76     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               pane.cmdb.hide.exit:
0074 69FE C839  50         mov   *stack+,@parm3        ; Pop @parm3
     6A00 A00A     
0075 6A02 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     6A04 A008     
0076 6A06 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     6A08 A006     
0077 6A0A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0078 6A0C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0079 6A0E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0080 6A10 C2F9  30         mov   *stack+,r11           ; Pop r11
0081 6A12 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0097                       copy  "pane.cmdb.draw.asm"      ; Draw command buffer pane contents
     **** ****     > pane.cmdb.draw.asm
0001               * FILE......: pane.cmdb.draw.asm
0002               * Purpose...: Stevie Editor - Command Buffer pane
0003               
0004               ***************************************************************
0005               * pane.cmdb.draw
0006               * Draw content in command buffer pane
0007               ***************************************************************
0008               * bl  @pane.cmdb.draw
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.panhead  = Pointer to string with dialog header
0012               * @cmdb.paninfo  = Pointer to string with info message or >0000
0013               *                  if input prompt required
0014               * @cmdb.panhint  = Pointer to string with hint message
0015               * @cmdb.pankeys  = Pointer to string with key shortcuts for dialog
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2
0022               ********|*****|*********************|**************************
0023               pane.cmdb.draw:
0024 6A14 0649  14         dect  stack
0025 6A16 C64B  30         mov   r11,*stack            ; Save return address
0026 6A18 0649  14         dect  stack
0027 6A1A C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6A1C 0649  14         dect  stack
0029 6A1E C645  30         mov   tmp1,*stack           ; Push tmp1
0030                       ;------------------------------------------------------
0031                       ; Command buffer header line
0032                       ;------------------------------------------------------
0033 6A20 C820  54         mov   @cmdb.panhead,@parm1  ; Get string to display
     6A22 A720     
     6A24 A006     
0034 6A26 0204  20         li    tmp0,80
     6A28 0050     
0035 6A2A C804  38         mov   tmp0,@parm2           ; Set requested length
     6A2C A008     
0036 6A2E 0204  20         li    tmp0,1
     6A30 0001     
0037 6A32 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6A34 A00A     
0038 6A36 0204  20         li    tmp0,rambuf
     6A38 A100     
0039 6A3A C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6A3C A00C     
0040               
0041 6A3E 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6A40 3500     
0042                                                   ; \ i  @parm1 = Pointer to string
0043                                                   ; | i  @parm2 = Requested length
0044                                                   ; | i  @parm3 = Fill character
0045                                                   ; | i  @parm4 = Pointer to buffer with
0046                                                   ; /             output string
0047               
0048 6A42 06A0  32         bl    @cpym2m
     6A44 253A     
0049 6A46 70CC                   data txt.stevie,rambuf+64,23
     6A48 A140     
     6A4A 0017     
0050                                                   ;
0051                                                   ; Add Stevie banner
0052                                                   ;
0053               
0054 6A4C C820  46         mov   @cmdb.yxtop,@wyx      ; \
     6A4E A710     
     6A50 832A     
0055 6A52 C160  34         mov   @outparm1,tmp1        ; | Display pane header
     6A54 A018     
0056 6A56 06A0  32         bl    @xutst0               ; /
     6A58 2420     
0057                       ;------------------------------------------------------
0058                       ; Check dialog id
0059                       ;------------------------------------------------------
0060 6A5A 04E0  26         clr   @waux1                ; Default is show prompt
     6A5C 833C     
0061               
0062 6A5E C120  34         mov   @cmdb.dialog,tmp0
     6A60 A71C     
0063 6A62 0284  22         ci    tmp0,99               ; \ Hide prompt and no keyboard
     6A64 0063     
0064 6A66 121D  14         jle   pane.cmdb.draw.clear  ; | buffer input if dialog ID > 99
0065 6A68 0720  26         seto  @waux1                ; /
     6A6A 833C     
0066                       ;------------------------------------------------------
0067                       ; Show info message instead of prompt
0068                       ;------------------------------------------------------
0069 6A6C C160  34         mov   @cmdb.paninfo,tmp1    ; Null pointer?
     6A6E A722     
0070 6A70 1318  14         jeq   pane.cmdb.draw.clear  ; Yes, display normal prompt
0071               
0072 6A72 C820  54         mov   @cmdb.paninfo,@parm1  ; Get string to display
     6A74 A722     
     6A76 A006     
0073 6A78 0204  20         li    tmp0,80
     6A7A 0050     
0074 6A7C C804  38         mov   tmp0,@parm2           ; Set requested length
     6A7E A008     
0075 6A80 0204  20         li    tmp0,32
     6A82 0020     
0076 6A84 C804  38         mov   tmp0,@parm3           ; Set character to fill
     6A86 A00A     
0077 6A88 0204  20         li    tmp0,rambuf
     6A8A A100     
0078 6A8C C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     6A8E A00C     
0079               
0080 6A90 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     6A92 3500     
0081                                                   ; \ i  @parm1 = Pointer to string
0082                                                   ; | i  @parm2 = Requested length
0083                                                   ; | i  @parm3 = Fill character
0084                                                   ; | i  @parm4 = Pointer to buffer with
0085                                                   ; /             output string
0086               
0087 6A94 06A0  32         bl    @at
     6A96 2726     
0088 6A98 1800                   byte pane.botrow-5,0  ; Position cursor
0089               
0090 6A9A C160  34         mov   @outparm1,tmp1        ; \ Display info message
     6A9C A018     
0091 6A9E 06A0  32         bl    @xutst0               ; /
     6AA0 2420     
0092                       ;------------------------------------------------------
0093                       ; Clear lines after prompt in command buffer
0094                       ;------------------------------------------------------
0095               pane.cmdb.draw.clear:
0096 6AA2 06A0  32         bl    @hchar
     6AA4 2832     
0097 6AA6 1900                   byte pane.botrow-4,0,32,240
     6AA8 20F0     
0098 6AAA FFFF                   data EOL              ; Remove key markers
0099                                                   ; Remove extra pane hint
0100                                                   ; Remove pane hint
0101                       ;------------------------------------------------------
0102                       ; Show key markers ?
0103                       ;------------------------------------------------------
0104 6AAC C120  34         mov   @cmdb.panmarkers,tmp0
     6AAE A728     
0105 6AB0 1310  14         jeq   pane.cmdb.draw.hint   ; no, skip key markers
0106                       ;------------------------------------------------------
0107                       ; Loop over key marker list
0108                       ;------------------------------------------------------
0109               pane.cmdb.draw.marker.loop:
0110 6AB2 D174  28         movb  *tmp0+,tmp1           ; Get X position
0111 6AB4 0985  32         srl   tmp1,8                ; Right align
0112 6AB6 0285  22         ci    tmp1,>00ff            ; End of list reached?
     6AB8 00FF     
0113 6ABA 130B  14         jeq   pane.cmdb.draw.hint   ; Yes, exit loop
0114               
0115 6ABC 0265  22         ori   tmp1,(pane.botrow - 4) * 256
     6ABE 1900     
0116                                                   ; y=bottom row - 3, x=(key marker position)
0117 6AC0 C805  30         mov   tmp1,@wyx             ; Set cursor position
     6AC2 832A     
0118               
0119 6AC4 0649  14         dect  stack
0120 6AC6 C644  30         mov   tmp0,*stack           ; Push tmp0
0121               
0122 6AC8 06A0  32         bl    @putstr
     6ACA 241E     
0123 6ACC 3CBE                   data txt.keymarker    ; Show key marker
0124               
0125 6ACE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126                       ;------------------------------------------------------
0127                       ; Show marker
0128                       ;------------------------------------------------------
0129 6AD0 10F0  14         jmp   pane.cmdb.draw.marker.loop
0130                                                   ; Next iteration
0131                       ;------------------------------------------------------
0132                       ; Display pane hint in command buffer
0133                       ;------------------------------------------------------
0134               pane.cmdb.draw.hint:
0135 6AD2 C820  54         mov   @cmdb.panhint,@parm2  ; Pane hint to display
     6AD4 A724     
     6AD6 A008     
0136 6AD8 1307  14         jeq   pane.cmdb.draw.extrahint
0137                                                   ; No pane hint to display
0138               
0139 6ADA 0204  20         li    tmp0,pane.botrow - 1  ; \
     6ADC 001C     
0140 6ADE 0A84  32         sla   tmp0,8                ; / Y=bottom row - 1, X=0
0141 6AE0 C804  38         mov   tmp0,@parm1           ; Set parameter
     6AE2 A006     
0142               
0143 6AE4 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6AE6 6862     
0144                                                   ; \ i  parm1 = Pointer to string with hint
0145                                                   ; / i  parm2 = YX position
0146                       ;------------------------------------------------------
0147                       ; Display extra pane hint in command buffer
0148                       ;------------------------------------------------------
0149               pane.cmdb.draw.extrahint:
0150 6AE8 C820  54         mov   @cmdb.panhint2,@parm2 ; Extra pane hint to display
     6AEA A726     
     6AEC A008     
0151 6AEE 130A  14         jeq   pane.cmdb.draw.keys   ; No extra pane hint to display
0152               
0153 6AF0 0204  20         li    tmp0,pane.botrow - 2  ; \
     6AF2 001B     
0154 6AF4 0A84  32         sla   tmp0,8                ; / Y=bottom row - 2, X=0
0155 6AF6 C804  38         mov   tmp0,@parm1           ; Set parameter
     6AF8 A006     
0156 6AFA C820  54         mov   @cmdb.panhint2,@parm2 ; Extra pane hint to display
     6AFC A726     
     6AFE A008     
0157               
0158 6B00 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6B02 6862     
0159                                                   ; \ i  parm1 = Pointer to string with hint
0160                                                   ; / i  parm2 = YX position
0161                       ;------------------------------------------------------
0162                       ; Display keys in status line
0163                       ;------------------------------------------------------
0164               pane.cmdb.draw.keys:
0165 6B04 0204  20         li    tmp0,pane.botrow      ; \
     6B06 001D     
0166 6B08 0A84  32         sla   tmp0,8                ; / Y=bottom row, X=0
0167 6B0A C804  38         mov   tmp0,@parm1           ; Set parameter
     6B0C A006     
0168 6B0E C820  54         mov   @cmdb.pankeys,@parm2  ; Pane hint to display
     6B10 A72A     
     6B12 A008     
0169               
0170 6B14 06A0  32         bl    @pane.show_hintx      ; Display pane hint
     6B16 6862     
0171                                                   ; \ i  parm1 = Pointer to string with hint
0172                                                   ; / i  parm2 = YX position
0173                       ;------------------------------------------------------
0174                       ; ALPHA-Lock key down?
0175                       ;------------------------------------------------------
0176 6B18 20A0  32         coc   @wbit10,config
     6B1A 200C     
0177 6B1C 1306  14         jeq   pane.cmdb.draw.alpha.down
0178                       ;------------------------------------------------------
0179                       ; AlPHA-Lock is up
0180                       ;------------------------------------------------------
0181 6B1E 06A0  32         bl    @hchar
     6B20 2832     
0182 6B22 1D4E                   byte pane.botrow,78,32,2
     6B24 2002     
0183 6B26 FFFF                   data eol
0184               
0185 6B28 1004  14         jmp   pane.cmdb.draw.promptcmd
0186                       ;------------------------------------------------------
0187                       ; AlPHA-Lock is down
0188                       ;------------------------------------------------------
0189               pane.cmdb.draw.alpha.down:
0190 6B2A 06A0  32         bl    @putat
     6B2C 2442     
0191 6B2E 1D4E                   byte   pane.botrow,78
0192 6B30 3CB8                   data   txt.alpha.down
0193                       ;------------------------------------------------------
0194                       ; Command buffer content
0195                       ;------------------------------------------------------
0196               pane.cmdb.draw.promptcmd:
0197 6B32 C120  30         mov   @waux1,tmp0           ; Flag set?
     6B34 833C     
0198 6B36 1602  14         jne   pane.cmdb.draw.hearts ; Yes, so skip refresh
0199 6B38 06A0  32         bl    @cmdb.refresh         ; Refresh command buffer content
     6B3A 6B8C     
0200                       ;------------------------------------------------------
0201                       ; Set color for hearts in TI-Basic dialog
0202                       ;------------------------------------------------------
0203               pane.cmdb.draw.hearts:
0204 6B3C C120  34         mov   @cmdb.dialog,tmp0
     6B3E A71C     
0205 6B40 0284  22         ci    tmp0,id.dialog.basic  ; TI Basic dialog active?
     6B42 006B     
0206 6B44 1606  14         jne   pane.cmdb.draw.exit   ; No, so exit early
0207               
0208 6B46 0204  20         li    tmp0,11               ; 1st Heart after string "Session: 1"
     6B48 000B     
0209 6B4A C804  38         mov   tmp0,@parm1           ; Set parameter
     6B4C A006     
0210               
0211 6B4E 06A0  32         bl    @dialog.hearts.tat    ; Dump colors for hearts
     6B50 68CC     
0212                                                   ; \ i  @parm1 = Start column (pos 1st heart)
0213                                                   ; /
0214                       ;------------------------------------------------------
0215                       ; Exit
0216                       ;------------------------------------------------------
0217               pane.cmdb.draw.exit:
0218 6B52 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0219 6B54 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0220 6B56 C2F9  30         mov   *stack+,r11           ; Pop r11
0221 6B58 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0098                       copy  "error.display.asm"       ; Show error message
     **** ****     > error.display.asm
0001               
0002               ***************************************************************
0003               * error.display
0004               * Display error message
0005               ***************************************************************
0006               * bl  @error.display
0007               *--------------------------------------------------------------
0008               * INPUT
0009               * @parm1 = Pointer to error message
0010               *--------------------------------------------------------------
0011               * OUTPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0,tmp1,tmp2
0016               ********|*****|*********************|**************************
0017               error.display:
0018 6B5A 0649  14         dect  stack
0019 6B5C C64B  30         mov   r11,*stack            ; Save return address
0020 6B5E 0649  14         dect  stack
0021 6B60 C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6B62 0649  14         dect  stack
0023 6B64 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6B66 0649  14         dect  stack
0025 6B68 C646  30         mov   tmp2,*stack           ; Push tmp2
0026                       ;------------------------------------------------------
0027                       ; Display error message
0028                       ;------------------------------------------------------
0029 6B6A C120  34         mov   @parm1,tmp0           ; \ Get length of string
     6B6C A006     
0030 6B6E D194  26         movb  *tmp0,tmp2            ; |
0031 6B70 0986  32         srl   tmp2,8                ; / Right align
0032               
0033 6B72 C120  34         mov   @parm1,tmp0           ; Get error message
     6B74 A006     
0034 6B76 0205  20         li    tmp1,tv.error.msg     ; Set error message
     6B78 A238     
0035               
0036 6B7A 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     6B7C 2540     
0037                                                   ; \ i  tmp0 = Source CPU memory address
0038                                                   ; | i  tmp1 = Target CPU memory address
0039                                                   ; / i  tmp2 = Number of bytes to copy
0040               
0041 6B7E 06A0  32         bl    @pane.errline.show    ; Display error message
     6B80 6F9A     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               error.display.exit:
0046 6B82 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6B84 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6B86 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6B88 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6B8A 045B  20         b     *r11                  ; Return
                   < stevie_b3.asm
0099                       copy  "cmdb.refresh.asm"        ; Refresh command buffer contents
     **** ****     > cmdb.refresh.asm
0001               * FILE......: cmdb.refresh.asm
0002               * Purpose...: Stevie Editor - Command buffer
0003               
0004               ***************************************************************
0005               * cmdb.refresh
0006               * Refresh command buffer content
0007               ***************************************************************
0008               * bl @cmdb.refresh
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.refresh:
0022 6B8C 0649  14         dect  stack
0023 6B8E C64B  30         mov   r11,*stack            ; Save return address
0024 6B90 0649  14         dect  stack
0025 6B92 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6B94 0649  14         dect  stack
0027 6B96 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6B98 0649  14         dect  stack
0029 6B9A C646  30         mov   tmp2,*stack           ; Push tmp2
0030 6B9C 0649  14         dect  stack
0031 6B9E C660  42         mov   @wyx,*stack           ; Push cursor position
     6BA0 832A     
0032                       ;------------------------------------------------------
0033                       ; Dump Command buffer content
0034                       ;------------------------------------------------------
0035 6BA2 C820  46         mov   @cmdb.yxprompt,@wyx   ; Screen position of command line prompt
     6BA4 A712     
     6BA6 832A     
0036 6BA8 05A0  26         inc   @wyx                  ; Skip '>' character
     6BAA 832A     
0037               
0038 6BAC 06A0  32         bl    @yx2pnt               ; Get VDP PNT address for current YX pos.
     6BAE 23FA     
0039                                                   ; \ i  @wyx = Cursor position
0040                                                   ; / o  tmp0 = VDP target address
0041               
0042 6BB0 0205  20         li    tmp1,cmdb.cmd         ; Address of current command
     6BB2 A72F     
0043 6BB4 0206  20         li    tmp2,1*79             ; Command length
     6BB6 004F     
0044               
0045 6BB8 06A0  32         bl    @xpym2v               ; \ Copy CPU memory to VDP memory
     6BBA 24EC     
0046                                                   ; | i  tmp0 = VDP target address
0047                                                   ; | i  tmp1 = RAM source address
0048                                                   ; / i  tmp2 = Number of bytes to copy
0049                       ;------------------------------------------------------
0050                       ; Show command buffer prompt
0051                       ;------------------------------------------------------
0052 6BBC C820  46         mov   @cmdb.yxprompt,@wyx
     6BBE A712     
     6BC0 832A     
0053 6BC2 06A0  32         bl    @putstr
     6BC4 241E     
0054 6BC6 3D8C                   data txt.cmdb.prompt  ; Draw prompt
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058               cmdb.refresh.exit:
0059 6BC8 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     6BCA 832A     
0060 6BCC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0061 6BCE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0062 6BD0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0063 6BD2 C2F9  30         mov   *stack+,r11           ; Pop r11
0064 6BD4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0100                       copy  "cmdb.cmd.asm"            ; Command line handling
     **** ****     > cmdb.cmd.asm
0001               * FILE......: cmdb.cmd.asm
0002               * Purpose...: Stevie Editor - Command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.clear
0006               * Clear current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.clear:
0022 6BD6 0649  14         dect  stack
0023 6BD8 C64B  30         mov   r11,*stack            ; Save return address
0024 6BDA 0649  14         dect  stack
0025 6BDC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6BDE 0649  14         dect  stack
0027 6BE0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6BE2 0649  14         dect  stack
0029 6BE4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6BE6 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6BE8 A72E     
0034 6BEA 06A0  32         bl    @film                 ; Clear command
     6BEC 2236     
0035 6BEE A72F                   data  cmdb.cmd,>00,80
     6BF0 0000     
     6BF2 0050     
0036                       ;------------------------------------------------------
0037                       ; Put cursor at beginning of line
0038                       ;------------------------------------------------------
0039 6BF4 C120  34         mov   @cmdb.yxprompt,tmp0
     6BF6 A712     
0040 6BF8 0584  14         inc   tmp0
0041 6BFA C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6BFC A70A     
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045               cmdb.cmd.clear.exit:
0046 6BFE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0047 6C00 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0048 6C02 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0049 6C04 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 6C06 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               
0054               
0055               
0056               
0057               ***************************************************************
0058               * cmdb.cmdb.getlength
0059               * Get length of current command
0060               ***************************************************************
0061               * bl @cmdb.cmd.getlength
0062               *--------------------------------------------------------------
0063               * INPUT
0064               * @cmdb.cmd
0065               *--------------------------------------------------------------
0066               * OUTPUT
0067               * @outparm1
0068               *--------------------------------------------------------------
0069               * Register usage
0070               * none
0071               *--------------------------------------------------------------
0072               * Notes
0073               ********|*****|*********************|**************************
0074               cmdb.cmd.getlength:
0075 6C08 0649  14         dect  stack
0076 6C0A C64B  30         mov   r11,*stack            ; Save return address
0077                       ;-------------------------------------------------------
0078                       ; Get length of null terminated string
0079                       ;-------------------------------------------------------
0080 6C0C 06A0  32         bl    @string.getlenc      ; Get length of C-style string
     6C0E 2B4A     
0081 6C10 A72F                   data cmdb.cmd,0      ; \ i  p0    = Pointer to C-style string
     6C12 0000     
0082                                                  ; | i  p1    = Termination character
0083                                                  ; / o  waux1 = Length of string
0084 6C14 C820  50         mov   @waux1,@outparm1     ; Save length of string
     6C16 833C     
     6C18 A018     
0085                       ;------------------------------------------------------
0086                       ; Exit
0087                       ;------------------------------------------------------
0088               cmdb.cmd.getlength.exit:
0089 6C1A C2F9  30         mov   *stack+,r11           ; Pop r11
0090 6C1C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0101                       copy  "cmdb.cmd.set.asm"        ; Set command line to preset value
     **** ****     > cmdb.cmd.set.asm
0001               * FILE......: cmdb.cmd.set.asm
0002               * Purpose...: Set command line
0003               
0004               ***************************************************************
0005               * cmdb.cmd.set
0006               * Set current command
0007               ***************************************************************
0008               * bl @cmdb.cmd.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to string with command
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.cmd.set:
0022 6C1E 0649  14         dect  stack
0023 6C20 C64B  30         mov   r11,*stack            ; Save return address
0024 6C22 0649  14         dect  stack
0025 6C24 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6C26 0649  14         dect  stack
0027 6C28 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 6C2A 0649  14         dect  stack
0029 6C2C C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Clear command
0032                       ;------------------------------------------------------
0033 6C2E 04E0  34         clr   @cmdb.cmdlen          ; Reset length
     6C30 A72E     
0034 6C32 06A0  32         bl    @film                 ; Clear command
     6C34 2236     
0035 6C36 A72F                   data  cmdb.cmd,>00,80
     6C38 0000     
     6C3A 0050     
0036                       ;------------------------------------------------------
0037                       ; Get string length
0038                       ;------------------------------------------------------
0039 6C3C C120  34         mov   @parm1,tmp0
     6C3E A006     
0040 6C40 D1B4  28         movb  *tmp0+,tmp2           ; Get length byte
0041 6C42 D806  38         movb  tmp2,@cmdb.cmdlen     ; Set length byte
     6C44 A72E     
0042 6C46 0986  32         srl   tmp2,8                ; Right align
0043 6C48 1501  14         jgt   !
0044                       ;------------------------------------------------------
0045                       ; Assert: invalid length, we just exit here
0046                       ;------------------------------------------------------
0047 6C4A 100B  14         jmp   cmdb.cmd.set.exit     ; No harm done
0048                       ;------------------------------------------------------
0049                       ; Copy string to command
0050                       ;------------------------------------------------------
0051 6C4C 0205  20 !       li   tmp1,cmdb.cmd          ; Destination
     6C4E A72F     
0052 6C50 06A0  32         bl   @xpym2m                ; Copy string
     6C52 2540     
0053                       ;------------------------------------------------------
0054                       ; Put cursor at beginning of line
0055                       ;------------------------------------------------------
0056 6C54 C120  34         mov   @cmdb.yxprompt,tmp0
     6C56 A712     
0057 6C58 0584  14         inc   tmp0
0058 6C5A C804  38         mov   tmp0,@cmdb.cursor     ; Position cursor
     6C5C A70A     
0059               
0060 6C5E 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6C60 A71A     
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064               cmdb.cmd.set.exit:
0065 6C62 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0066 6C64 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 6C66 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 6C68 C2F9  30         mov   *stack+,r11           ; Pop r11
0069 6C6A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0102                       copy  "cmdb.cmd.preset.asm"     ; Preset shortcuts in dialogs
     **** ****     > cmdb.cmd.preset.asm
0001               * FILE......: cmdb.cmd.preset.asm
0002               * Purpose...: Set command to preset based on dialog and shortcut pressed
0003               
0004               ***************************************************************
0005               * cmdb.cmd.preset
0006               * Set command to preset based on dialog and shortcut pressed
0007               ***************************************************************
0008               * bl   @cmdb.cmd.preset
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @waux1       = Key pressed
0012               * @cmdb.dialog = ID of current dialog
0013               *--------------------------------------------------------------
0014               * Register usage
0015               * tmp0, tmp1, tmp2
0016               ********|*****|*********************|**************************
0017               cmdb.cmd.preset:
0018 6C6C 0649  14         dect  stack
0019 6C6E C64B  30         mov   r11,*stack            ; Save return address
0020 6C70 0649  14         dect  stack
0021 6C72 C644  30         mov   tmp0,*stack           ; Push tmp0
0022 6C74 0649  14         dect  stack
0023 6C76 C645  30         mov   tmp1,*stack           ; Push tmp1
0024 6C78 0649  14         dect  stack
0025 6C7A C646  30         mov   tmp2,*stack           ; Push tmp2
0026               
0027 6C7C 0204  20         li    tmp0,cmdb.cmd.preset.data
     6C7E 7AD2     
0028                                                   ; Load table
0029 6C80 C1A0  34         mov   @keycode1,tmp2        ; Get keyboard code
     6C82 A028     
0030                       ;-------------------------------------------------------
0031                       ; Loop over table with presets
0032                       ;-------------------------------------------------------
0033               cmdb.cmd.preset.loop:
0034 6C84 8834  46         c     *tmp0+,@cmdb.dialog   ; Dialog matches?
     6C86 A71C     
0035 6C88 1607  14         jne   cmdb.cmd.preset.next  ; No, next entry
0036                       ;-------------------------------------------------------
0037                       ; Dialog matches, check if shortcut matches
0038                       ;-------------------------------------------------------
0039 6C8A 81B4  30         c     *tmp0+,tmp2           ; Compare with keyboard shortcut
0040 6C8C 1606  14         jne   !                     ; No match, next entry
0041                       ;-------------------------------------------------------
0042                       ; Entry in table matches, set preset
0043                       ;-------------------------------------------------------
0044 6C8E C814  46         mov   *tmp0,@parm1          ; Get pointer to string
     6C90 A006     
0045               
0046 6C92 06A0  32         bl    @cmdb.cmd.set         ; Set command value
     6C94 6C1E     
0047                                                   ; \ i  @parm1 = Pointer to string w. preset
0048                                                   ; /
0049               
0050 6C96 1006  14         jmp   cmdb.cmd.preset.exit  ; Exit
0051                       ;-------------------------------------------------------
0052                       ; Dialog does not match, prepare for next entry
0053                       ;-------------------------------------------------------
0054               cmdb.cmd.preset.next:
0055 6C98 05C4  14         inct  tmp0                  ; Skip shortcut
0056 6C9A 05C4  14 !       inct  tmp0                  ; Skip pointer to string
0057                       ;-------------------------------------------------------
0058                       ; End of list reached?
0059                       ;-------------------------------------------------------
0060 6C9C C154  26         mov   *tmp0,tmp1            ; Get entry
0061 6C9E 0285  22         ci    tmp1,EOL              ; EOL identifier found?
     6CA0 FFFF     
0062 6CA2 16F0  14         jne   cmdb.cmd.preset.loop  ; Not yet, next entry
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               cmdb.cmd.preset.exit:
0067 6CA4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0068 6CA6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0069 6CA8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 6CAA C2F9  30         mov   *stack+,r11           ; Pop r11
0071 6CAC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0103                       copy  "cmdb.cfg.fname.asm"      ; Configure filename
     **** ****     > cmdb.cfg.fname.asm
0001               * FILE......: cmdb.cfg.fname.asm
0002               * Purpose...: Configure filename
0003               
0004               ***************************************************************
0005               * cmdb.cfg.fname
0006               * Configure filename for clipboard, ...
0007               ***************************************************************
0008               * bl  @cmdb.cfg.fname
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to 80 bytes buffer for storing filename
0012               * @parm2 = Pointer to oneshot message to display when done
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1, tmp2
0019               ********|*****|*********************|**************************
0020               
0021               *---------------------------------------------------------------
0022               * Configure filename
0023               *---------------------------------------------------------------
0024               cmdb.cfg.fname:
0025 6CAE 0649  14         dect  stack
0026 6CB0 C64B  30         mov   r11,*stack            ; Save return address
0027 6CB2 0649  14         dect  stack
0028 6CB4 C644  30         mov   tmp0,*stack           ; Push tmp0
0029 6CB6 0649  14         dect  stack
0030 6CB8 C645  30         mov   tmp1,*stack           ; Push tmp1
0031 6CBA 0649  14         dect  stack
0032 6CBC C646  30         mov   tmp2,*stack           ; Push tmp2
0033                       ;-------------------------------------------------------
0034                       ; Configure
0035                       ;-------------------------------------------------------
0036 6CBE 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6CC0 69A0     
0037               
0038 6CC2 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6CC4 6C08     
0039 6CC6 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6CC8 A018     
0040 6CCA 1607  14         jne   !                     ; No, continue
0041                       ;-------------------------------------------------------
0042                       ; No filename specified
0043                       ;-------------------------------------------------------
0044 6CCC 0204  20         li    tmp0,txt.io.nofile    ; \
     6CCE 3D2A     
0045 6CD0 C804  38         mov   tmp0,@parm1           ; / Error message
     6CD2 A006     
0046               
0047 6CD4 06A0  32         bl    @error.display        ; Show error message
     6CD6 6B5A     
0048                                                   ; \ i  @parm1 = Pointer to error message
0049                                                   ; /
0050               
0051 6CD8 101D  14         jmp   cmdb.cfg.fname.exit   ; Exit
0052                       ;-------------------------------------------------------
0053                       ; Set filename
0054                       ;-------------------------------------------------------
0055 6CDA 0A84  32 !       sla   tmp0,8                ; LSB to MSB
0056 6CDC D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6CDE A72E     
0057               
0058 6CE0 0204  20         li    tmp0,cmdb.cmdall      ; Source
     6CE2 A72E     
0059 6CE4 C160  34         mov   @parm1,tmp1           ; Destination
     6CE6 A006     
0060 6CE8 0206  20         li    tmp2,80               ; Number of bytes to copy
     6CEA 0050     
0061               
0062 6CEC 06A0  32         bl    @xpym2m               ; Copy filename from command line to buffer
     6CEE 2540     
0063                                                   ; \ i  tmp0 = Source address
0064                                                   ; | i  tmp1 = Destination address
0065                                                   ; / i  tmp2 = Number of bytes to copy
0066                       ;-------------------------------------------------------
0067                       ; Show message
0068                       ;-------------------------------------------------------
0069               cmdb.cfg.fname.message:
0070 6CF0 06A0  32         bl    @hchar
     6CF2 2832     
0071 6CF4 0032                   byte 0,50,32,20
     6CF6 2014     
0072 6CF8 FFFF                   data EOL              ; Erase any previous message
0073               
0074 6CFA 0204  20         li    tmp0,52               ; y=0, x=52
     6CFC 0034     
0075 6CFE C804  30         mov   tmp0,@wyx             ; Set cursor
     6D00 832A     
0076 6D02 C160  34         mov   @parm2,tmp1           ; Get string to display
     6D04 A008     
0077                       ;-------------------------------------------------------
0078                       ; Setup one shot task for removing overlay message
0079                       ;-------------------------------------------------------
0080 6D06 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6D08 3818     
0081 6D0A C804  38         mov   tmp0,@tv.task.oneshot
     6D0C A226     
0082               
0083 6D0E 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6D10 2FB2     
0084 6D12 0003                   data 3                ; / for getting consistent delay
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               cmdb.cfg.fname.exit:
0089 6D14 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0090 6D16 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0091 6D18 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0092 6D1A C2F9  30         mov   *stack+,r11           ; Pop R11
0093 6D1C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0104                       ;-----------------------------------------------------------------------
0105                       ; Dialog toggles
0106                       ;-----------------------------------------------------------------------
0107                       copy  "fm.fastmode.asm"         ; Toggle Fastmode IO for file operation
     **** ****     > fm.fastmode.asm
0001               * FILE......: fm.fastmode.asm
0002               * Purpose...: Toggle "fast-mode IO" for file operation
0003               
0004               ***************************************************************
0005               * fm.fastmode
0006               * Toggle "fast-mode IO" for file operation
0007               ***************************************************************
0008               * bl  @fm.fastmode
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               ********|*****|*********************|**************************
0019               fm.fastmode:
0020 6D1E 0649  14         dect  stack
0021 6D20 C64B  30         mov   r11,*stack            ; Save return address
0022 6D22 0649  14         dect  stack
0023 6D24 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6D26 0649  14         dect  stack
0025 6D28 C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6D2A 0649  14         dect  stack
0027 6D2C C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;------------------------------------------------------
0029                       ; Toggle fastmode
0030                       ;------------------------------------------------------
0031 6D2E C160  34         mov   @cmdb.dialog,tmp1     ; Get ID of current dialog
     6D30 A71C     
0032 6D32 C120  34         mov   @fh.offsetopcode,tmp0 ; Get file opcode offset
     6D34 A44E     
0033 6D36 1322  14         jeq   fm.fastmode.on        ; Toggle on if offset is 0
0034                       ;------------------------------------------------------
0035                       ; Turn fast mode off
0036                       ;------------------------------------------------------
0037               fm.fastmode.off:
0038 6D38 04E0  34         clr   @fh.offsetopcode      ; Data buffer in VDP RAM
     6D3A A44E     
0039               
0040 6D3C 0206  20         li    tmp2,id.dialog.load
     6D3E 000A     
0041 6D40 8185  18         c     tmp1,tmp2
0042 6D42 1310  14         jeq   fm.fastmode.off.1
0043               
0044 6D44 0206  20         li    tmp2,id.dialog.insert
     6D46 000B     
0045 6D48 8185  18         c     tmp1,tmp2
0046 6D4A 130F  14         jeq   fm.fastmode.off.2
0047               
0048 6D4C 0206  20         li    tmp2,id.dialog.clipboard
     6D4E 0067     
0049 6D50 8185  18         c     tmp1,tmp2
0050 6D52 130E  14         jeq   fm.fastmode.off.3
0051               
0052 6D54 0206  20         li    tmp2,id.dialog.append
     6D56 000C     
0053 6D58 8185  18         c     tmp1,tmp2
0054 6D5A 130D  14         jeq   fm.fastmode.off.4
0055                       ;------------------------------------------------------
0056                       ; Assert
0057                       ;------------------------------------------------------
0058 6D5C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6D5E FFCE     
0059 6D60 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6D62 2026     
0060                       ;------------------------------------------------------
0061                       ; Keylist fastmode off
0062                       ;------------------------------------------------------
0063               fm.fastmode.off.1:
0064 6D64 0204  20         li    tmp0,txt.keys.load
     6D66 70DE     
0065 6D68 102C  14         jmp   fm.fastmode.keylist
0066               fm.fastmode.off.2:
0067 6D6A 0204  20         li    tmp0,txt.keys.insert
     6D6C 70DE     
0068 6D6E 1029  14         jmp   fm.fastmode.keylist
0069               fm.fastmode.off.3:
0070 6D70 0204  20         li    tmp0,txt.keys.clipboard
     6D72 73E5     
0071 6D74 1026  14         jmp   fm.fastmode.keylist
0072               fm.fastmode.off.4:
0073 6D76 0204  20         li    tmp0,txt.keys.append
     6D78 70DE     
0074 6D7A 1023  14         jmp   fm.fastmode.keylist
0075                       ;------------------------------------------------------
0076                       ; Turn fast mode on
0077                       ;------------------------------------------------------
0078               fm.fastmode.on:
0079 6D7C 0204  20         li    tmp0,>40              ; Data buffer in CPU RAM
     6D7E 0040     
0080 6D80 C804  38         mov   tmp0,@fh.offsetopcode
     6D82 A44E     
0081               
0082 6D84 0206  20         li    tmp2,id.dialog.load
     6D86 000A     
0083 6D88 8185  18         c     tmp1,tmp2
0084 6D8A 1310  14         jeq   fm.fastmode.on.1
0085               
0086 6D8C 0206  20         li    tmp2,id.dialog.insert
     6D8E 000B     
0087 6D90 8185  18         c     tmp1,tmp2
0088 6D92 130F  14         jeq   fm.fastmode.on.2
0089               
0090 6D94 0206  20         li    tmp2,id.dialog.clipboard
     6D96 0067     
0091 6D98 8185  18         c     tmp1,tmp2
0092 6D9A 130E  14         jeq   fm.fastmode.on.3
0093               
0094 6D9C 0206  20         li    tmp2,id.dialog.append
     6D9E 000C     
0095 6DA0 8185  18         c     tmp1,tmp2
0096 6DA2 130D  14         jeq   fm.fastmode.on.4
0097                       ;------------------------------------------------------
0098                       ; Assert
0099                       ;------------------------------------------------------
0100 6DA4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6DA6 FFCE     
0101 6DA8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6DAA 2026     
0102                       ;------------------------------------------------------
0103                       ; Keylist fastmode on
0104                       ;------------------------------------------------------
0105               fm.fastmode.on.1:
0106 6DAC 0204  20         li    tmp0,txt.keys.load2
     6DAE 7128     
0107 6DB0 1008  14         jmp   fm.fastmode.keylist
0108               fm.fastmode.on.2:
0109 6DB2 0204  20         li    tmp0,txt.keys.insert2
     6DB4 7128     
0110 6DB6 1005  14         jmp   fm.fastmode.keylist
0111               fm.fastmode.on.3:
0112 6DB8 0204  20         li    tmp0,txt.keys.clipboard2
     6DBA 7404     
0113 6DBC 1002  14         jmp   fm.fastmode.keylist
0114               fm.fastmode.on.4:
0115 6DBE 0204  20         li    tmp0,txt.keys.append2
     6DC0 7128     
0116                       ;------------------------------------------------------
0117                       ; Set keylist
0118                       ;------------------------------------------------------
0119               fm.fastmode.keylist:
0120 6DC2 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6DC4 A72A     
0121               *--------------------------------------------------------------
0122               * Exit
0123               *--------------------------------------------------------------
0124               fm.fastmode.exit:
0125 6DC6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0126 6DC8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0127 6DCA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0128 6DCC C2F9  30         mov   *stack+,r11           ; Pop R11
0129 6DCE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0108                       copy  "fm.lineterm.asm"         ; Toggle line termination mode
     **** ****     > fm.lineterm.asm
0001               * FILE......: fm.lineterm
0002               * Purpose...: Toggle line termination mode
0003               
0004               ***************************************************************
0005               * fm.lineterm
0006               * Toggle line termination mode
0007               ***************************************************************
0008               * bl  @fm.lineterm
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *---------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0, tmp1, tmp2
0018               ********|*****|*********************|**************************
0019               fm.lineterm:
0020 6DD0 0649  14         dect  stack
0021 6DD2 C64B  30         mov   r11,*stack            ; Save return address
0022 6DD4 0649  14         dect  stack
0023 6DD6 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 6DD8 0649  14         dect  stack
0025 6DDA C645  30         mov   tmp1,*stack           ; Push tmp1
0026 6DDC 0649  14         dect  stack
0027 6DDE C646  30         mov   tmp2,*stack           ; Push tmp2
0028                       ;-------------------------------------------------------
0029                       ; Toggle line termination mode
0030                       ;-------------------------------------------------------
0031 6DE0 C160  34         mov   @cmdb.dialog,tmp1     ; Get ID of current dialog
     6DE2 A71C     
0032               
0033 6DE4 C120  34         mov   @edb.lineterm,tmp0    ; Get line termination mode + char
     6DE6 A524     
0034 6DE8 0544  14         inv   tmp0                  ; Toggle on/off (MSB is of interest)
0035 6DEA D820  46         movb  @edb.lineterm+1,@tmp0lb
     6DEC A525     
     6DEE 8309     
0036                                                   ; Restore line termination character (LSB)
0037 6DF0 C804  38         mov   tmp0,@edb.lineterm    ; Save variable
     6DF2 A524     
0038                       ;-------------------------------------------------------
0039                       ; Set keylist in status line
0040                       ;-------------------------------------------------------
0041 6DF4 0984  32         srl   tmp0,8                ; \
0042 6DF6 132B  14         jeq   !                     ; / Line termination mode is off
0043                       ;-------------------------------------------------------
0044                       ; Line termination mode is on
0045                       ;-------------------------------------------------------
0046 6DF8 0204  20         li    tmp0,ram.msg2         ;
     6DFA F0A0     
0047 6DFC C804  38         mov   tmp0,@cmdb.panhint2   ; Extra hint to display
     6DFE A726     
0048                       ;-------------------------------------------------------
0049                       ; Print ASCII of line termination character(s)
0050                       ;-------------------------------------------------------
0051 6E00 04E0  34         clr   @ram.msg2 + 38        ; \ Remove any previous number
     6E02 F0C6     
0052 6E04 04E0  34         clr   @ram.msg2 + 40        ; /
     6E06 F0C8     
0053               
0054 6E08 C120  34         mov   @edb.lineterm,tmp0    ; Get line termination character
     6E0A A524     
0055 6E0C 0244  22         andi  tmp0,>00ff            ; Get rid of MSB
     6E0E 00FF     
0056 6E10 C804  38         mov   tmp0,@rambuf          ; Prepare for processing
     6E12 A100     
0057               
0058 6E14 0242  22         andi  config,>7fff          ; Do not print number
     6E16 7FFF     
0059                                                   ; (Reset bit 0 in config register)
0060               
0061 6E18 06A0  32         bl    @mknum                ; Convert unsigned number to string
     6E1A 2A56     
0062 6E1C A100                   data rambuf           ; \ i  p1    = Source
0063 6E1E A102                   data rambuf+2         ; | i  p2    = Destination
0064 6E20 30                     byte 48               ; | i  p3MSB = ASCII offset
0065 6E21   20                   byte 32               ; / i  p3LSB = Padding character
0066               
0067 6E22 06A0  32         bl    @trimnum              ; Trim number to the left
     6E24 2AAE     
0068 6E26 A102                   data  rambuf+2,ram.msg2 + 37,32
     6E28 F0C5     
     6E2A 0020     
0069               
0070 6E2C D820  54         movb  @const.0,@ram.msg2 + 37
     6E2E 2000     
     6E30 F0C5     
0071                                                   ; \ Overwrite length-byte prefix in
0072                                                   ; / trimmed number
0073                       ;-------------------------------------------------------
0074                       ; Dialog switch
0075                       ;-------------------------------------------------------
0076 6E32 C160  34         mov   @cmdb.dialog,tmp1     ; Get ID of current dialog
     6E34 A71C     
0077               
0078 6E36 0206  20         li    tmp2,id.dialog.save   ; \
     6E38 000F     
0079 6E3A 8185  18         c     tmp1,tmp2             ; |  Save dialog?
0080 6E3C 131C  14         jeq   fm.lineterm.on.1      ; /
0081               
0082 6E3E 0206  20         li    tmp2,id.dialog.print  ; \
     6E40 0011     
0083 6E42 8185  18         c     tmp1,tmp2             ; |  Print dialog?
0084 6E44 131B  14         jeq   fm.lineterm.on.2      ; /
0085                       ;------------------------------------------------------
0086                       ; Assert
0087                       ;------------------------------------------------------
0088 6E46 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6E48 FFCE     
0089 6E4A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6E4C 2026     
0090                       ;-------------------------------------------------------
0091                       ; Line termination mode is off
0092                       ;-------------------------------------------------------
0093 6E4E 04E0  34 !       clr   @cmdb.panhint2        ; No extra hint to display
     6E50 A726     
0094               
0095 6E52 0206  20         li    tmp2,id.dialog.save   ; \
     6E54 000F     
0096 6E56 8185  18         c     tmp1,tmp2             ; |  Save dialog?
0097 6E58 1308  14         jeq   fm.lineterm.off.1     ; /
0098               
0099 6E5A 0206  20         li    tmp2,id.dialog.print  ; \
     6E5C 0011     
0100 6E5E 8185  18         c     tmp1,tmp2             ; |  Print dialog?
0101 6E60 1307  14         jeq   fm.lineterm.off.2     ; /
0102                       ;------------------------------------------------------
0103                       ; Assert
0104                       ;------------------------------------------------------
0105 6E62 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6E64 FFCE     
0106 6E66 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6E68 2026     
0107                       ;------------------------------------------------------
0108                       ; Keylist line termination off
0109                       ;------------------------------------------------------
0110               fm.lineterm.off.1:
0111 6E6A 0204  20         li    tmp0,txt.keys.save1
     6E6C 72A9     
0112 6E6E 1009  14         jmp   fm.lineterm.keylist
0113               fm.lineterm.off.2:
0114 6E70 0204  20         li    tmp0,txt.keys.print1
     6E72 72A9     
0115 6E74 1006  14         jmp   fm.lineterm.keylist
0116                       ;------------------------------------------------------
0117                       ; Keylist line termination on
0118                       ;------------------------------------------------------
0119               fm.lineterm.on.1:
0120 6E76 0204  20         li    tmp0,txt.keys.save2
     6E78 72DE     
0121 6E7A 1003  14         jmp   fm.lineterm.keylist
0122               fm.lineterm.on.2:
0123 6E7C 0204  20         li    tmp0,txt.keys.print2
     6E7E 72DE     
0124 6E80 1000  14         jmp   fm.lineterm.keylist
0125                       ;------------------------------------------------------
0126                       ; Set keylist
0127                       ;------------------------------------------------------
0128               fm.lineterm.keylist:
0129 6E82 C804  38         mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6E84 A72A     
0130                       ;-------------------------------------------------------
0131                       ; Exit
0132                       ;-------------------------------------------------------
0133               fm.lineterm.exit:
0134 6E86 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0135 6E88 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 6E8A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 6E8C C2F9  30         mov   *stack+,r11           ; Pop R11
0138 6E8E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0109                       copy  "tib.dialog.helper.asm"   ; Helper functions for TI Basic dialog
     **** ****     > tib.dialog.helper.asm
0001               * FILE......: tib.dialog.helper.asm
0002               * Purpose...: TI Basic dialog helper functions
0003               
0004               
0005               
0006               ***************************************************************
0007               * tibasic.am.toggle
0008               * Toggle TI Basic AutoUnpack
0009               ***************************************************************
0010               * bl   @tibasic.am.toggle
0011               *--------------------------------------------------------------
0012               * INPUT
0013               * none
0014               *
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               tibasic.am.toggle:
0025 6E90 0649  14         dect  stack
0026 6E92 C64B  30         mov   r11,*stack            ; Save return address
0027 6E94 0649  14         dect  stack
0028 6E96 C644  30         mov   tmp0,*stack           ; Push tmp0
0029                       ;------------------------------------------------------
0030                       ; Toggle AutoUnpack display
0031                       ;------------------------------------------------------
0032 6E98 0560  34         inv   @tib.autounpk         ; Toggle 'AutoUnpack'
     6E9A A0C0     
0033 6E9C 1303  14         jeq   tibasic.am.off
0034 6E9E 0204  20         li    tmp0,txt.keys.basic2
     6EA0 791C     
0035 6EA2 1002  14         jmp   !
0036               tibasic.am.off:
0037 6EA4 0204  20         li    tmp0,txt.keys.basic
     6EA6 78EF     
0038 6EA8 C804  38 !       mov   tmp0,@cmdb.pankeys    ; Keylist in status line
     6EAA A72A     
0039                       ;------------------------------------------------------
0040                       ; Exit
0041                       ;------------------------------------------------------
0042               tibasic.am.exit:
0043 6EAC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0044 6EAE C2F9  30         mov   *stack+,r11           ; Pop r11
0045 6EB0 045B  20         b     *r11                  ; Return
0046               
0047               
0048               
0049               
0050               ***************************************************************
0051               * tibasic.buildstr
0052               * Build session picker string for TI Basic dialog
0053               ***************************************************************
0054               * bl   @tibasic.buildstr
0055               *--------------------------------------------------------------
0056               * INPUT
0057               * none
0058               *
0059               * OUTPUT
0060               * none
0061               *--------------------------------------------------------------
0062               * Register usage
0063               * tmp0
0064               *--------------------------------------------------------------
0065               * Remarks
0066               * none
0067               ********|*****|*********************|**************************
0068               tibasic.buildstr:
0069 6EB2 0649  14         dect  stack
0070 6EB4 C64B  30         mov   r11,*stack            ; Save return address
0071 6EB6 0649  14         dect  stack
0072 6EB8 C644  30         mov   tmp0,*stack           ; Push tmp0
0073 6EBA 0649  14         dect  stack
0074 6EBC C645  30         mov   tmp1,*stack           ; Push tmp1
0075 6EBE 0649  14         dect  stack
0076 6EC0 C646  30         mov   tmp2,*stack           ; Push tmp2
0077 6EC2 0649  14         dect  stack
0078 6EC4 C647  30         mov   tmp3,*stack           ; Push tmp3
0079 6EC6 0649  14         dect  stack
0080 6EC8 C648  30         mov   tmp4,*stack           ; Push tmp4
0081                       ;-------------------------------------------------------
0082                       ; Build session selection string
0083                       ;-------------------------------------------------------
0084 6ECA 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6ECC A71A     
0085               
0086 6ECE 06A0  32         bl    @cpym2m
     6ED0 253A     
0087 6ED2 7847                   data txt.info.basic,rambuf+200,30
     6ED4 A1C8     
     6ED6 001E     
0088                                                   ; Copy string from rom to ram buffer
0089               
0090 6ED8 0204  20         li    tmp0,rambuf + 200     ; \
     6EDA A1C8     
0091 6EDC C804  38         mov   tmp0,@cmdb.paninfo    ; / Set pointer to session selection string
     6EDE A722     
0092               
0093 6EE0 0204  20         li    tmp0,tib.status1      ; First TI Basic session to check
     6EE2 A0B6     
0094 6EE4 0206  20         li    tmp2,tib.status5      ; Last TI Basic session to check
     6EE6 A0BE     
0095 6EE8 0207  20         li    tmp3,rambuf + 212     ; Position in session selection string
     6EEA A1D4     
0096 6EEC 0208  20         li    tmp4,1                ; Session counter
     6EEE 0001     
0097                       ;-------------------------------------------------------
0098                       ; Loop over TI Basic sessions and check if active
0099                       ;-------------------------------------------------------
0100               tibasic.buildstr.loop:
0101 6EF0 C174  30         mov   *tmp0+,tmp1           ; Session active?
0102 6EF2 130E  14         jeq   tibasic.buildstr.next
0103                                                   ; No, check next session
0104                       ;-------------------------------------------------------
0105                       ; Current session?
0106                       ;-------------------------------------------------------
0107               tibasic.buildstr.current:
0108 6EF4 8808  34         c     tmp4,@tib.session     ; Matches current session?
     6EF6 A0B4     
0109 6EF8 1606  14         jne   tibasic.buildstr.active
0110               
0111 6EFA DDE0  48         movb  @tibasic.heart.solid,*tmp3+
     6EFC 6F2A     
0112 6EFE D5E0  46         movb  @tibasic.heart.solid+1,*tmp3
     6F00 6F2B     
0113                                                   ; Set marker
0114 6F02 0607  14         dec   tmp3                  ; Adjustment
0115               
0116 6F04 1005  14         jmp   tibasic.buildstr.next ; Next entry
0117                       ;-------------------------------------------------------
0118                       ; Set Basic session active marker
0119                       ;-------------------------------------------------------
0120               tibasic.buildstr.active:
0121 6F06 DDE0  48         movb  @tibasic.heart.open,*tmp3+
     6F08 6F2C     
0122 6F0A D5E0  46         movb  @tibasic.heart.open+1,*tmp3
     6F0C 6F2D     
0123                                                   ; Set marker
0124 6F0E 0607  14         dec   tmp3                  ; Adjustment
0125                       ;-------------------------------------------------------
0126                       ; Next entry
0127                       ;-------------------------------------------------------
0128               tibasic.buildstr.next:
0129 6F10 0227  22         ai    tmp3,4                ; Next position
     6F12 0004     
0130 6F14 8184  18         c     tmp0,tmp2             ; All sessions checked?
0131 6F16 1502  14         jgt   tibasic.buildstr.exit ; Yes, exit loop
0132 6F18 0588  14         inc   tmp4                  ; Next session
0133 6F1A 10EA  14         jmp   tibasic.buildstr.loop ; No, next iteration
0134                       ;-------------------------------------------------------
0135                       ; Exit
0136                       ;-------------------------------------------------------
0137               tibasic.buildstr.exit:
0138 6F1C C239  30         mov   *stack+,tmp4          ; Pop tmp4
0139 6F1E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0140 6F20 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0141 6F22 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0142 6F24 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0143 6F26 C2F9  30         mov   *stack+,r11           ; Pop R11
0144 6F28 045B  20         b     *r11                  ; Return to caller
0145               
0146               tibasic.heart.solid:
0147 6F2A 0203             byte  2,3                   ; ASCII 2-3 (heart solid)
0148               tibasic.heart.open:
0149 6F2C 1D1E             byte  29,30                 ; ASCII 29-30 (heart open)
                   < stevie_b3.asm
0110                       ;-----------------------------------------------------------------------
0111                       ; Stubs
0112                       ;-----------------------------------------------------------------------
0113                       copy  "rom.stubs.bank3.asm"     ; Bank specific stubs
     **** ****     > rom.stubs.bank3.asm
0001               * FILE......: rom.stubs.bank3.asm
0002               * Purpose...: Bank 3 stubs for functions in other banks
0003               
0004               
0005               ***************************************************************
0006               * Stub for "edb.line.pack"
0007               * bank1 vec.10
0008               ********|*****|*********************|**************************
0009               edb.line.pack:
0010 6F2E 0649  14         dect  stack
0011 6F30 C64B  30         mov   r11,*stack            ; Save return address
0012                       ;------------------------------------------------------
0013                       ; Call function in bank 1
0014                       ;------------------------------------------------------
0015 6F32 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F34 3084     
0016 6F36 6002                   data bank1.rom        ; | i  p0 = bank address
0017 6F38 7F82                   data vec.10           ; | i  p1 = Vector with target address
0018 6F3A 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0019                       ;------------------------------------------------------
0020                       ; Exit
0021                       ;------------------------------------------------------
0022 6F3C C2F9  30         mov   *stack+,r11           ; Pop r11
0023 6F3E 045B  20         b     *r11                  ; Return to caller
0024               
0025               
0026               ***************************************************************
0027               * Stub for "edkey.action.cmdb.show"
0028               * bank1 vec.15
0029               ********|*****|*********************|**************************
0030               edkey.action.cmdb.show:
0031 6F40 0649  14         dect  stack
0032 6F42 C64B  30         mov   r11,*stack            ; Save return address
0033                       ;------------------------------------------------------
0034                       ; Call function in bank 1
0035                       ;------------------------------------------------------
0036 6F44 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F46 3084     
0037 6F48 6002                   data bank1.rom        ; | i  p0 = bank address
0038 6F4A 7F8C                   data vec.15           ; | i  p1 = Vector with target address
0039 6F4C 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043 6F4E C2F9  30         mov   *stack+,r11           ; Pop r11
0044 6F50 045B  20         b     *r11                  ; Return to caller
0045               
0046               
0047               ***************************************************************
0048               * Stub for "fb.refresh"
0049               * bank1 vec.20
0050               ********|*****|*********************|**************************
0051               fb.refresh:
0052 6F52 0649  14         dect  stack
0053 6F54 C64B  30         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Call function in bank 1
0056                       ;------------------------------------------------------
0057 6F56 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F58 3084     
0058 6F5A 6002                   data bank1.rom        ; | i  p0 = bank address
0059 6F5C 7F96                   data vec.20           ; | i  p1 = Vector with target address
0060 6F5E 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0061                       ;------------------------------------------------------
0062                       ; Exit
0063                       ;------------------------------------------------------
0064 6F60 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 6F62 045B  20         b     *r11                  ; Return to caller
0066               
0067               
0068               ***************************************************************
0069               * Stub for "pane.errline.hide"
0070               * bank1 vec.27
0071               ********|*****|*********************|**************************
0072               pane.errline.hide:
0073 6F64 0649  14         dect  stack
0074 6F66 C64B  30         mov   r11,*stack            ; Save return address
0075                       ;------------------------------------------------------
0076                       ; Call function in bank 1
0077                       ;------------------------------------------------------
0078 6F68 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F6A 3084     
0079 6F6C 6002                   data bank1.rom        ; | i  p0 = bank address
0080 6F6E 7FA4                   data vec.27           ; | i  p1 = Vector with target address
0081 6F70 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085 6F72 C2F9  30         mov   *stack+,r11           ; Pop r11
0086 6F74 045B  20         b     *r11                  ; Return to caller
0087               
0088               
0089               
0090               ***************************************************************
0091               * Stub for "pane.cursor.blink"
0092               * bank1 vec.28
0093               ********|*****|*********************|**************************
0094               pane.cursor.blink:
0095 6F76 0649  14         dect  stack
0096 6F78 C64B  30         mov   r11,*stack            ; Save return address
0097                       ;------------------------------------------------------
0098                       ; Call function in bank 1
0099                       ;------------------------------------------------------
0100 6F7A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F7C 3084     
0101 6F7E 6002                   data bank1.rom        ; | i  p0 = bank address
0102 6F80 7FA6                   data vec.28           ; | i  p1 = Vector with target address
0103 6F82 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107 6F84 C2F9  30         mov   *stack+,r11           ; Pop r11
0108 6F86 045B  20         b     *r11                  ; Return to caller
0109               
0110               
0111               ***************************************************************
0112               * Stub for "pane.cursor.hide"
0113               * bank1 vec.29
0114               ********|*****|*********************|**************************
0115               pane.cursor.hide:
0116 6F88 0649  14         dect  stack
0117 6F8A C64B  30         mov   r11,*stack            ; Save return address
0118                       ;------------------------------------------------------
0119                       ; Call function in bank 1
0120                       ;------------------------------------------------------
0121 6F8C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6F8E 3084     
0122 6F90 6002                   data bank1.rom        ; | i  p0 = bank address
0123 6F92 7FA8                   data vec.29           ; | i  p1 = Vector with target address
0124 6F94 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0125                       ;------------------------------------------------------
0126                       ; Exit
0127                       ;------------------------------------------------------
0128 6F96 C2F9  30         mov   *stack+,r11           ; Pop r11
0129 6F98 045B  20         b     *r11                  ; Return to caller
0130               
0131               
0132               ***************************************************************
0133               * Stub for "pane.errline.show"
0134               * bank1 vec.30
0135               ********|*****|*********************|**************************
0136               pane.errline.show:
0137 6F9A 0649  14         dect  stack
0138 6F9C C64B  30         mov   r11,*stack            ; Save return address
0139                       ;------------------------------------------------------
0140                       ; Call function in bank 1
0141                       ;------------------------------------------------------
0142 6F9E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FA0 3084     
0143 6FA2 6002                   data bank1.rom        ; | i  p0 = bank address
0144 6FA4 7FAA                   data vec.30           ; | i  p1 = Vector with target address
0145 6FA6 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0146                       ;------------------------------------------------------
0147                       ; Exit
0148                       ;------------------------------------------------------
0149 6FA8 C2F9  30         mov   *stack+,r11           ; Pop r11
0150 6FAA 045B  20         b     *r11                  ; Return to caller
0151               
0152               
0153               ***************************************************************
0154               * Stub for "pane.colorscheme.load"
0155               * bank1 vec.31
0156               ********|*****|*********************|**************************
0157               pane.colorscheme.load:
0158 6FAC 0649  14         dect  stack
0159 6FAE C64B  30         mov   r11,*stack            ; Save return address
0160                       ;------------------------------------------------------
0161                       ; Call function in bank 1
0162                       ;------------------------------------------------------
0163 6FB0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FB2 3084     
0164 6FB4 6002                   data bank1.rom        ; | i  p0 = bank address
0165 6FB6 7FAC                   data vec.31           ; | i  p1 = Vector with target address
0166 6FB8 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0167                       ;------------------------------------------------------
0168                       ; Exit
0169                       ;------------------------------------------------------
0170 6FBA C2F9  30         mov   *stack+,r11           ; Pop r11
0171 6FBC 045B  20         b     *r11                  ; Return to caller
0172               
0173               
0174               ***************************************************************
0175               * Stub for "fm.directory"
0176               * bank2 vec.6
0177               ********|*****|*********************|**************************
0178               fm.directory:
0179 6FBE 0649  14         dect  stack
0180 6FC0 C64B  30         mov   r11,*stack            ; Save return address
0181                       ;------------------------------------------------------
0182                       ; Call function in bank 2
0183                       ;------------------------------------------------------
0184 6FC2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FC4 3084     
0185 6FC6 6004                   data bank2.rom        ; | i  p0 = bank address
0186 6FC8 7F7A                   data vec.6            ; | i  p1 = Vector with target address
0187 6FCA 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0188                       ;------------------------------------------------------
0189                       ; Exit
0190                       ;------------------------------------------------------
0191 6FCC C2F9  30         mov   *stack+,r11           ; Pop r11
0192 6FCE 045B  20         b     *r11                  ; Return to caller
0193               
0194               
0195               ***************************************************************
0196               * Stub for "fm.browse.fname.set"
0197               * bank2 vec.12
0198               ********|*****|*********************|**************************
0199               fm.browse.fname.set:
0200 6FD0 0649  14         dect  stack
0201 6FD2 C64B  30         mov   r11,*stack            ; Save return address
0202                       ;------------------------------------------------------
0203                       ; Call function in bank 2
0204                       ;------------------------------------------------------
0205 6FD4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FD6 3084     
0206 6FD8 6004                   data bank2.rom        ; | i  p0 = bank address
0207 6FDA 7F86                   data vec.12           ; | i  p1 = Vector with target address
0208 6FDC 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0209                       ;------------------------------------------------------
0210                       ; Exit
0211                       ;------------------------------------------------------
0212 6FDE C2F9  30         mov   *stack+,r11           ; Pop r11
0213 6FE0 045B  20         b     *r11                  ; Return to caller
0214               
0215               ***************************************************************
0216               * Stub for "fb.scan.fname"
0217               * bank4 vec.5
0218               ********|*****|*********************|**************************
0219               fb.scan.fname:
0220 6FE2 0649  14         dect  stack
0221 6FE4 C64B  30         mov   r11,*stack            ; Save return address
0222                       ;------------------------------------------------------
0223                       ; Call function in bank 4
0224                       ;------------------------------------------------------
0225 6FE6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FE8 3084     
0226 6FEA 6008                   data bank4.rom        ; | i  p0 = bank address
0227 6FEC 7F78                   data vec.5            ; | i  p1 = Vector with target address
0228 6FEE 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0229                       ;------------------------------------------------------
0230                       ; Exit
0231                       ;------------------------------------------------------
0232 6FF0 C2F9  30         mov   *stack+,r11           ; Pop r11
0233 6FF2 045B  20         b     *r11                  ; Return to caller
0234               
0235               ***************************************************************
0236               * Stub for "pane.filebrowser"
0237               * bank4 vec.50
0238               ********|*****|*********************|**************************
0239               pane.filebrowser:
0240 6FF4 0649  14         dect  stack
0241 6FF6 C64B  30         mov   r11,*stack            ; Save return address
0242                       ;------------------------------------------------------
0243                       ; Call function in bank 4
0244                       ;------------------------------------------------------
0245 6FF8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     6FFA 3084     
0246 6FFC 6008                   data bank4.rom        ; | i  p0 = bank address
0247 6FFE 7FD2                   data vec.50           ; | i  p1 = Vector with target address
0248 7000 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0249                       ;------------------------------------------------------
0250                       ; Exit
0251                       ;------------------------------------------------------
0252 7002 C2F9  30         mov   *stack+,r11           ; Pop r11
0253 7004 045B  20         b     *r11                  ; Return to caller
0254               
0255               ***************************************************************
0256               * Stub for "pane.filebrowser.hilight"
0257               * bank4 vec.51
0258               ********|*****|*********************|**************************
0259               pane.filebrowser.hilight:
0260 7006 0649  14         dect  stack
0261 7008 C64B  30         mov   r11,*stack            ; Save return address
0262                       ;------------------------------------------------------
0263                       ; Call function in bank 4
0264                       ;------------------------------------------------------
0265 700A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     700C 3084     
0266 700E 6008                   data bank4.rom        ; | i  p0 = bank address
0267 7010 7FD4                   data vec.51           ; | i  p1 = Vector with target address
0268 7012 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0269                       ;------------------------------------------------------
0270                       ; Exit
0271                       ;------------------------------------------------------
0272 7014 C2F9  30         mov   *stack+,r11           ; Pop r11
0273 7016 045B  20         b     *r11                  ; Return to caller
0274               
0275               ***************************************************************
0276               * Stub for "pane.filebrowser.colbar"
0277               * bank4 vec.52
0278               ********|*****|*********************|**************************
0279               pane.filebrowser.colbar:
0280 7018 0649  14         dect  stack
0281 701A C64B  30         mov   r11,*stack            ; Save return address
0282                       ;------------------------------------------------------
0283                       ; Call function in bank 4
0284                       ;------------------------------------------------------
0285 701C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     701E 3084     
0286 7020 6008                   data bank4.rom        ; | i  p0 = bank address
0287 7022 7FD6                   data vec.52           ; | i  p1 = Vector with target address
0288 7024 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0289                       ;------------------------------------------------------
0290                       ; Exit
0291                       ;------------------------------------------------------
0292 7026 C2F9  30         mov   *stack+,r11           ; Pop r11
0293 7028 045B  20         b     *r11                  ; Return to caller
0294               
0295               ***************************************************************
0296               * Stub for "pane.filebrowser.colbar.exit"
0297               * bank4 vec.53
0298               ********|*****|*********************|**************************
0299               pane.filebrowser.colbar.remove:
0300 702A 0649  14         dect  stack
0301 702C C64B  30         mov   r11,*stack            ; Save return address
0302                       ;------------------------------------------------------
0303                       ; Call function in bank 4
0304                       ;------------------------------------------------------
0305 702E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7030 3084     
0306 7032 6008                   data bank4.rom        ; | i  p0 = bank address
0307 7034 7FD8                   data vec.53           ; | i  p1 = Vector with target address
0308 7036 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0309                       ;------------------------------------------------------
0310                       ; Exit
0311                       ;------------------------------------------------------
0312 7038 C2F9  30         mov   *stack+,r11           ; Pop r11
0313 703A 045B  20         b     *r11                  ; Return to caller
0314               
0315               ***************************************************************
0316               * Stub for "dialog.help.content"
0317               * bank4 vec.64
0318               ********|*****|*********************|**************************
0319               dialog.help.content:
0320 703C 0649  14         dect  stack
0321 703E C64B  30         mov   r11,*stack            ; Save return address
0322                       ;------------------------------------------------------
0323                       ; Call function in bank 4
0324                       ;------------------------------------------------------
0325 7040 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7042 3084     
0326 7044 6008                   data bank4.rom        ; | i  p0 = bank address
0327 7046 7FEE                   data vec.64           ; | i  p1 = Vector with target address
0328 7048 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0329                       ;------------------------------------------------------
0330                       ; Exit
0331                       ;------------------------------------------------------
0332 704A C2F9  30         mov   *stack+,r11           ; Pop r11
0333 704C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b3.asm
0114                       copy  "rom.stubs.bankx.asm"     ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0006               ***************************************************************
0007               * Stub for "mem.sams.setup.stevie"
0008               * Exclude: bank0, bank1
0009               * bank1 vec.1
0010               ********|*****|*********************|**************************
0011               mem.sams.setup.stevie:
0012 704E 0649  14         dect  stack
0013 7050 C64B  30         mov   r11,*stack            ; Save return address
0014                       ;------------------------------------------------------
0015                       ; Call function in bank 1
0016                       ;------------------------------------------------------
0017 7052 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7054 3084     
0018 7056 6002                   data bank1.rom        ; | i  p0 = bank address
0019 7058 7F70                   data vec.1            ; | i  p1 = Vector with target address
0020 705A 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0021                       ;------------------------------------------------------
0022                       ; Exit
0023                       ;------------------------------------------------------
0024 705C C2F9  30         mov   *stack+,r11           ; Pop r11
0025 705E 045B  20         b     *r11                  ; Return to caller
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 7060 0649  14         dect  stack
0038 7062 C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 7064 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7066 3084     
0043 7068 600E                   data bank7.rom        ; | i  p0 = bank address
0044 706A 7F70                   data vec.1            ; | i  p1 = Vector with target address
0045 706C 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 706E C2F9  30         mov   *stack+,r11           ; Pop r11
0050 7070 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 7072 0649  14         dect  stack
0060 7074 C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 7076 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7078 3084     
0065 707A 600E                   data bank7.rom        ; | i  p0 = bank address
0066 707C 7F72                   data vec.2            ; | i  p1 = Vector with target address
0067 707E 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 7080 C2F9  30         mov   *stack+,r11           ; Pop r11
0072 7082 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7084 0649  14         dect  stack
0081 7086 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7088 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     708A 3084     
0086 708C 600E                   data bank7.rom        ; | i  p0 = bank address
0087 708E 7F74                   data vec.3            ; | i  p1 = Vector with target address
0088 7090 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7092 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7094 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 7096 0649  14         dect  stack
0102 7098 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 709A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     709C 3084     
0107 709E 600E                   data bank7.rom        ; | i  p0 = bank address
0108 70A0 7F96                   data vec.20           ; | i  p1 = Vector with target address
0109 70A2 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 70A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0114 70A6 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 70A8 0649  14         dect  stack
0123 70AA C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 70AC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70AE 3084     
0128 70B0 600E                   data bank7.rom        ; | i  p0 = bank address
0129 70B2 7F98                   data vec.21           ; | i  p1 = Vector with target address
0130 70B4 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 70B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0135 70B8 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 70BA 0649  14         dect  stack
0144 70BC C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 70BE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     70C0 3084     
0149 70C2 600E                   data bank7.rom        ; | i  p0 = bank address
0150 70C4 7F9A                   data vec.22           ; | i  p1 = Vector with target address
0151 70C6 6006                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 70C8 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 70CA 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b3.asm
0115                       ;-----------------------------------------------------------------------
0116                       ; Program data
0117                       ;-----------------------------------------------------------------------
0118                       copy  "data.dialogs.asm"        ; Dialog strings used in bank 3
     **** ****     > data.dialogs.asm
0001               * FILE......: data.dialogs.asm
0002               * Purpose...: Strings used in dialogs
0003               
0004               
0005               ***************************************************************
0006               *                       Strings
0007               ***************************************************************
0008               
0009               txt.stevie:
0011 70CC 2020                 text '  Stevie 1.6.3   '
     70CE 5374     
     70D0 6576     
     70D2 6965     
     70D4 2031     
     70D6 2E36     
     70D8 2E33     
     70DA 2020     
     70DC 20       
0012                           even
0014               
0019               
0024               
0029               
0030               ;--------------------------------------------------------------
0031               ; Default key strings used in multiple dialogs
0032               ;--------------------------------------------------------------
0033 70DE 4946     txt.keys.default1  stri 'F9-Back  F3-Clear  F5-FMIO  FH-Home  FL-EOL  ^1-9=CAT DSK1-9  SPACE-UpDir'
     70E0 392D     
     70E2 4261     
     70E4 636B     
     70E6 2020     
     70E8 4633     
     70EA 2D43     
     70EC 6C65     
     70EE 6172     
     70F0 2020     
     70F2 4635     
     70F4 2D46     
     70F6 4D49     
     70F8 4F20     
     70FA 2046     
     70FC 482D     
     70FE 486F     
     7100 6D65     
     7102 2020     
     7104 464C     
     7106 2D45     
     7108 4F4C     
     710A 2020     
     710C 5E31     
     710E 2D39     
     7110 3D43     
     7112 4154     
     7114 2044     
     7116 534B     
     7118 312D     
     711A 3920     
     711C 2053     
     711E 5041     
     7120 4345     
     7122 2D55     
     7124 7044     
     7126 6972     
0034                                  even
0035 7128 4A46     txt.keys.default2  stri 'F9-Back  F3-Clear  *F5-FMIO  FH-Home  FL-EOL  ^1-9=CAT DSK1-9  SPACE-UpDir'
     712A 392D     
     712C 4261     
     712E 636B     
     7130 2020     
     7132 4633     
     7134 2D43     
     7136 6C65     
     7138 6172     
     713A 2020     
     713C 2A46     
     713E 352D     
     7140 464D     
     7142 494F     
     7144 2020     
     7146 4648     
     7148 2D48     
     714A 6F6D     
     714C 6520     
     714E 2046     
     7150 4C2D     
     7152 454F     
     7154 4C20     
     7156 205E     
     7158 312D     
     715A 393D     
     715C 4341     
     715E 5420     
     7160 4453     
     7162 4B31     
     7164 2D39     
     7166 2020     
     7168 5350     
     716A 4143     
     716C 452D     
     716E 5570     
     7170 4469     
     7172 72       
0036                                  even
0037               
0038               ;--------------------------------------------------------------
0039               ; Shared strings used in multiple dialogs
0040               ;--------------------------------------------------------------
0041 7174 1853     txt.hint.memstat   stri 'SAMS free/total: .../...'
     7176 414D     
     7178 5320     
     717A 6672     
     717C 6565     
     717E 2F74     
     7180 6F74     
     7182 616C     
     7184 3A20     
     7186 2E2E     
     7188 2E2F     
     718A 2E2E     
     718C 2E       
0042                                  even
0043               
0044 718E 294C     txt.hint.lineterm  stri 'Line termination character (ASCII) = ....'
     7190 696E     
     7192 6520     
     7194 7465     
     7196 726D     
     7198 696E     
     719A 6174     
     719C 696F     
     719E 6E20     
     71A0 6368     
     71A2 6172     
     71A4 6163     
     71A6 7465     
     71A8 7220     
     71AA 2841     
     71AC 5343     
     71AE 4949     
     71B0 2920     
     71B2 3D20     
     71B4 2E2E     
     71B6 2E2E     
0045                                  even
0046               
0047               txt.hint.filepicker:
0048 71B8 3846                        stri 'FE/X-up/down  ^E/X-prev/next page  ^S/D-prev/next column'
     71BA 452F     
     71BC 582D     
     71BE 7570     
     71C0 2F64     
     71C2 6F77     
     71C4 6E20     
     71C6 205E     
     71C8 452F     
     71CA 582D     
     71CC 7072     
     71CE 6576     
     71D0 2F6E     
     71D2 6578     
     71D4 7420     
     71D6 7061     
     71D8 6765     
     71DA 2020     
     71DC 5E53     
     71DE 2F44     
     71E0 2D70     
     71E2 7265     
     71E4 762F     
     71E6 6E65     
     71E8 7874     
     71EA 2063     
     71EC 6F6C     
     71EE 756D     
     71F0 6E       
0049                                  even
0050               
0051               ;--------------------------------------------------------------
0052               ; Dialog "Load file"
0053               ;--------------------------------------------------------------
0054 71F2 0E01     txt.head.load      byte 14,1,1
     71F4 01       
0055 71F5   20                        text ' Open file '
     71F6 4F70     
     71F8 656E     
     71FA 2066     
     71FC 696C     
     71FE 6520     
0056 7200 01                          byte 1
0057      71B8     txt.hint.load      equ  txt.hint.filepicker
0058 7201   29     txt.hint.load2     stri 'Enter filename or pick file from catalog.'
     7202 456E     
     7204 7465     
     7206 7220     
     7208 6669     
     720A 6C65     
     720C 6E61     
     720E 6D65     
     7210 206F     
     7212 7220     
     7214 7069     
     7216 636B     
     7218 2066     
     721A 696C     
     721C 6520     
     721E 6672     
     7220 6F6D     
     7222 2063     
     7224 6174     
     7226 616C     
     7228 6F67     
     722A 2E       
0059               
0060      70DE     txt.keys.load      equ txt.keys.default1
0061      7128     txt.keys.load2     equ txt.keys.default2
0062               
0063               
0064               ;--------------------------------------------------------------
0065               ; Dialog "run file"
0066               ;--------------------------------------------------------------
0067 722B   1C     txt.head.run       byte 28,1,1
     722C 0101     
0068 722E 2052                        text ' Run program image (EA5) '
     7230 756E     
     7232 2070     
     7234 726F     
     7236 6772     
     7238 616D     
     723A 2069     
     723C 6D61     
     723E 6765     
     7240 2028     
     7242 4541     
     7244 3529     
     7246 20       
0069 7247   01                        byte 1
0070      71B8     txt.hint.run       equ  txt.hint.filepicker
0071 7248 2945     txt.hint.run2      stri 'Enter filename or pick file from catalog.'
     724A 6E74     
     724C 6572     
     724E 2066     
     7250 696C     
     7252 656E     
     7254 616D     
     7256 6520     
     7258 6F72     
     725A 2070     
     725C 6963     
     725E 6B20     
     7260 6669     
     7262 6C65     
     7264 2066     
     7266 726F     
     7268 6D20     
     726A 6361     
     726C 7461     
     726E 6C6F     
     7270 672E     
0072               
0073      70DE     txt.keys.run       equ txt.keys.default1
0074      7128     txt.keys.run2      equ txt.keys.default2
0075               
0076               
0077               ;--------------------------------------------------------------
0078               ; Dialog "Save file"
0079               ;--------------------------------------------------------------
0080 7272 0E01     txt.head.save      byte 14,1,1
     7274 01       
0081 7275   20                        text ' Save file '
     7276 5361     
     7278 7665     
     727A 2066     
     727C 696C     
     727E 6520     
0082 7280 01                          byte 1
0083 7281   16     txt.head.save2     byte 22,1,1
     7282 0101     
0084 7284 2053                        text ' Save block to file '
     7286 6176     
     7288 6520     
     728A 626C     
     728C 6F63     
     728E 6B20     
     7290 746F     
     7292 2066     
     7294 696C     
     7296 6520     
0085 7298 01                          byte 1
0086 7299   0F     txt.hint.save      stri 'Enter filename.'
     729A 456E     
     729C 7465     
     729E 7220     
     72A0 6669     
     72A2 6C65     
     72A4 6E61     
     72A6 6D65     
     72A8 2E       
0087 72A9   34     txt.keys.save1     stri 'F9-Back  F3-Clear  F6-Line term=off  FH-Home  FL-EOL'
     72AA 4639     
     72AC 2D42     
     72AE 6163     
     72B0 6B20     
     72B2 2046     
     72B4 332D     
     72B6 436C     
     72B8 6561     
     72BA 7220     
     72BC 2046     
     72BE 362D     
     72C0 4C69     
     72C2 6E65     
     72C4 2074     
     72C6 6572     
     72C8 6D3D     
     72CA 6F66     
     72CC 6620     
     72CE 2046     
     72D0 482D     
     72D2 486F     
     72D4 6D65     
     72D6 2020     
     72D8 464C     
     72DA 2D45     
     72DC 4F4C     
0088 72DE 3446     txt.keys.save2     stri 'F9-Back  F3-Clear  *F6-Line term=on  FH-Home  FL-EOL'
     72E0 392D     
     72E2 4261     
     72E4 636B     
     72E6 2020     
     72E8 4633     
     72EA 2D43     
     72EC 6C65     
     72EE 6172     
     72F0 2020     
     72F2 2A46     
     72F4 362D     
     72F6 4C69     
     72F8 6E65     
     72FA 2074     
     72FC 6572     
     72FE 6D3D     
     7300 6F6E     
     7302 2020     
     7304 4648     
     7306 2D48     
     7308 6F6D     
     730A 6520     
     730C 2046     
     730E 4C2D     
     7310 454F     
     7312 4C       
0089               
0090               
0091               ;--------------------------------------------------------------
0092               ; Dialog "Append file"
0093               ;--------------------------------------------------------------
0094 7313   10     txt.head.append    byte 16,1,1
     7314 0101     
0095 7316 2041                        text ' Append file '
     7318 7070     
     731A 656E     
     731C 6420     
     731E 6669     
     7320 6C65     
     7322 20       
0096 7323   01                        byte 1
0097      71B8     txt.hint.append    equ  txt.hint.filepicker
0098      7201     txt.hint.append2   equ  txt.hint.load2
0099               
0100      70DE     txt.keys.append    equ txt.keys.default1
0101      7128     txt.keys.append2   equ txt.keys.default2
0102               
0103               
0104               ;--------------------------------------------------------------
0105               ; Dialog "Insert file"
0106               ;--------------------------------------------------------------
0107 7324 1801     txt.head.insert    byte 24,1,1
     7326 01       
0108 7327   20                        text ' Insert file at line '
     7328 496E     
     732A 7365     
     732C 7274     
     732E 2066     
     7330 696C     
     7332 6520     
     7334 6174     
     7336 206C     
     7338 696E     
     733A 6520     
0109 733C 01                          byte 1
0110      71B8     txt.hint.insert    equ  txt.hint.filepicker
0111      7201     txt.hint.insert2   equ  txt.hint.load2
0112               
0113      70DE     txt.keys.insert    equ txt.keys.default1
0114      7128     txt.keys.insert2   equ txt.keys.default2
0115               
0116               
0117               ;--------------------------------------------------------------
0118               ; Dialog "Catalog"
0119               ;--------------------------------------------------------------
0120 733D   0C     txt.head.dir       byte 12,1,1
     733E 0101     
0121 7340 2043                        text ' Catalog '
     7342 6174     
     7344 616C     
     7346 6F67     
     7348 20       
0122 7349   01                        byte 1
0123      71B8     txt.hint.dir       equ  txt.hint.filepicker
0124 734A 3645     txt.hint.dir2      stri 'Enter device name and path. Last character must be "."'
     734C 6E74     
     734E 6572     
     7350 2064     
     7352 6576     
     7354 6963     
     7356 6520     
     7358 6E61     
     735A 6D65     
     735C 2061     
     735E 6E64     
     7360 2070     
     7362 6174     
     7364 682E     
     7366 204C     
     7368 6173     
     736A 7420     
     736C 6368     
     736E 6172     
     7370 6163     
     7372 7465     
     7374 7220     
     7376 6D75     
     7378 7374     
     737A 2062     
     737C 6520     
     737E 222E     
     7380 22       
0125               
0126      70DE     txt.keys.dir       equ txt.keys.default1
0127      7128     txt.keys.dir2      equ txt.keys.default2
0128               
0129               ;--------------------------------------------------------------
0130               ; Dialog "Copy clipboard"
0131               ;--------------------------------------------------------------
0132 7381   1B     txt.head.clipboard byte 27,1,1
     7382 0101     
0133 7384 2043                        text ' Copy clipboard to line '
     7386 6F70     
     7388 7920     
     738A 636C     
     738C 6970     
     738E 626F     
     7390 6172     
     7392 6420     
     7394 746F     
     7396 206C     
     7398 696E     
     739A 6520     
0134 739C 01                          byte 1
0135 739D   10     txt.info.clipboard stri 'Clipboard [1-5]?'
     739E 436C     
     73A0 6970     
     73A2 626F     
     73A4 6172     
     73A6 6420     
     73A8 5B31     
     73AA 2D35     
     73AC 5D3F     
0136 73AE 3650     txt.hint.clipboard stri 'Press 1 to 5 to copy clipboard, press F7 to configure.'
     73B0 7265     
     73B2 7373     
     73B4 2031     
     73B6 2074     
     73B8 6F20     
     73BA 3520     
     73BC 746F     
     73BE 2063     
     73C0 6F70     
     73C2 7920     
     73C4 636C     
     73C6 6970     
     73C8 626F     
     73CA 6172     
     73CC 642C     
     73CE 2070     
     73D0 7265     
     73D2 7373     
     73D4 2046     
     73D6 3720     
     73D8 746F     
     73DA 2063     
     73DC 6F6E     
     73DE 6669     
     73E0 6775     
     73E2 7265     
     73E4 2E       
0137               
0138 73E5   1E     txt.keys.clipboard  stri 'F9-Back  F5-FMIO  F7-Configure'
     73E6 4639     
     73E8 2D42     
     73EA 6163     
     73EC 6B20     
     73EE 2046     
     73F0 352D     
     73F2 464D     
     73F4 494F     
     73F6 2020     
     73F8 4637     
     73FA 2D43     
     73FC 6F6E     
     73FE 6669     
     7400 6775     
     7402 7265     
0139 7404 1F46     txt.keys.clipboard2 stri 'F9-Back  *F5-FMIO  F7-Configure'
     7406 392D     
     7408 4261     
     740A 636B     
     740C 2020     
     740E 2A46     
     7410 352D     
     7412 464D     
     7414 494F     
     7416 2020     
     7418 4637     
     741A 2D43     
     741C 6F6E     
     741E 6669     
     7420 6775     
     7422 7265     
0140               
0141               
0142               ;--------------------------------------------------------------
0143               ; Dialog "Print file"
0144               ;--------------------------------------------------------------
0145 7424 0F01     txt.head.print     byte 15,1,1
     7426 01       
0146 7427   20                        text ' Print file '
     7428 5072     
     742A 696E     
     742C 7420     
     742E 6669     
     7430 6C65     
     7432 20       
0147 7433   01                        byte 1
0148 7434 1001     txt.head.print2    byte 16,1,1
     7436 01       
0149 7437   20                        text ' Print block '
     7438 5072     
     743A 696E     
     743C 7420     
     743E 626C     
     7440 6F63     
     7442 6B20     
0150 7444 01                          byte 1
0151 7445   2C     txt.hint.print     stri 'Enter printer device name (PIO, PI.PIO, ...)'
     7446 456E     
     7448 7465     
     744A 7220     
     744C 7072     
     744E 696E     
     7450 7465     
     7452 7220     
     7454 6465     
     7456 7669     
     7458 6365     
     745A 206E     
     745C 616D     
     745E 6520     
     7460 2850     
     7462 494F     
     7464 2C20     
     7466 5049     
     7468 2E50     
     746A 494F     
     746C 2C20     
     746E 2E2E     
     7470 2E29     
0152      72A9     txt.keys.print1    equ  txt.keys.save1
0153      72DE     txt.keys.print2    equ  txt.keys.save2
0154               
0155               
0156               ;--------------------------------------------------------------
0157               ; Dialog "Goto line"
0158               ;--------------------------------------------------------------
0159 7472 0E01     txt.head.goto      byte 14,1,1
     7474 01       
0160 7475   20                        text ' Goto line '
     7476 476F     
     7478 746F     
     747A 206C     
     747C 696E     
     747E 6520     
0161 7480 01                          byte 1
0162 7481   3C     txt.hint.goto      stri 'Type destination line number (or 0 for EOF) and press ENTER.'
     7482 5479     
     7484 7065     
     7486 2064     
     7488 6573     
     748A 7469     
     748C 6E61     
     748E 7469     
     7490 6F6E     
     7492 206C     
     7494 696E     
     7496 6520     
     7498 6E75     
     749A 6D62     
     749C 6572     
     749E 2028     
     74A0 6F72     
     74A2 2030     
     74A4 2066     
     74A6 6F72     
     74A8 2045     
     74AA 4F46     
     74AC 2920     
     74AE 616E     
     74B0 6420     
     74B2 7072     
     74B4 6573     
     74B6 7320     
     74B8 454E     
     74BA 5445     
     74BC 522E     
0163 74BE 2246     txt.keys.goto      stri 'F9-Back  F3-Clear  ENTER-Goto line'
     74C0 392D     
     74C2 4261     
     74C4 636B     
     74C6 2020     
     74C8 4633     
     74CA 2D43     
     74CC 6C65     
     74CE 6172     
     74D0 2020     
     74D2 454E     
     74D4 5445     
     74D6 522D     
     74D8 476F     
     74DA 746F     
     74DC 206C     
     74DE 696E     
     74E0 65       
0164               
0165               
0166               ;--------------------------------------------------------------
0167               ; Dialog "Unsaved changes"
0168               ;--------------------------------------------------------------
0169 74E1   14     txt.head.unsaved   byte 20,1,1
     74E2 0101     
0170 74E4 2055                        text ' Unsaved changes '
     74E6 6E73     
     74E8 6176     
     74EA 6564     
     74EC 2063     
     74EE 6861     
     74F0 6E67     
     74F2 6573     
     74F4 20       
0171 74F5   01                        byte 1
0172 74F6 2157     txt.info.unsaved   stri 'Warning! Unsaved changes in file.'
     74F8 6172     
     74FA 6E69     
     74FC 6E67     
     74FE 2120     
     7500 556E     
     7502 7361     
     7504 7665     
     7506 6420     
     7508 6368     
     750A 616E     
     750C 6765     
     750E 7320     
     7510 696E     
     7512 2066     
     7514 696C     
     7516 652E     
0173 7518 3750     txt.hint.unsaved   stri 'Press F6 or SPACE to proceed. Press ENTER to save file.'
     751A 7265     
     751C 7373     
     751E 2046     
     7520 3620     
     7522 6F72     
     7524 2053     
     7526 5041     
     7528 4345     
     752A 2074     
     752C 6F20     
     752E 7072     
     7530 6F63     
     7532 6565     
     7534 642E     
     7536 2050     
     7538 7265     
     753A 7373     
     753C 2045     
     753E 4E54     
     7540 4552     
     7542 2074     
     7544 6F20     
     7546 7361     
     7548 7665     
     754A 2066     
     754C 696C     
     754E 652E     
0174 7550 2546     txt.keys.unsaved   stri 'F9-Back  F6/SPACE-Proceed  ENTER-Save'
     7552 392D     
     7554 4261     
     7556 636B     
     7558 2020     
     755A 4636     
     755C 2F53     
     755E 5041     
     7560 4345     
     7562 2D50     
     7564 726F     
     7566 6365     
     7568 6564     
     756A 2020     
     756C 454E     
     756E 5445     
     7570 522D     
     7572 5361     
     7574 7665     
0175               
0176               
0177               ;--------------------------------------------------------------
0178               ; Dialog "Help"
0179               ;--------------------------------------------------------------
0180 7576 0901     txt.head.about     byte 9,1,1
     7578 01       
0181 7579   20                        text ' Help '
     757A 4865     
     757C 6C70     
     757E 20       
0182 757F   01                        byte 1
0183               
0184 7580 0100     txt.info.about     stri ''
0185 7582 4D4C     txt.hint.about2    stri 'Licensed under GPLv3 or later. This program comes with ABSOLUTELY NO WARRANTY'
     7584 6963     
     7586 656E     
     7588 7365     
     758A 6420     
     758C 756E     
     758E 6465     
     7590 7220     
     7592 4750     
     7594 4C76     
     7596 3320     
     7598 6F72     
     759A 206C     
     759C 6174     
     759E 6572     
     75A0 2E20     
     75A2 5468     
     75A4 6973     
     75A6 2070     
     75A8 726F     
     75AA 6772     
     75AC 616D     
     75AE 2063     
     75B0 6F6D     
     75B2 6573     
     75B4 2077     
     75B6 6974     
     75B8 6820     
     75BA 4142     
     75BC 534F     
     75BE 4C55     
     75C0 5445     
     75C2 4C59     
     75C4 204E     
     75C6 4F20     
     75C8 5741     
     75CA 5252     
     75CC 414E     
     75CE 5459     
0186 75D0 4F54     txt.hint.about     stri 'This is free software, you are welcome to redistribute under certain conditions'
     75D2 6869     
     75D4 7320     
     75D6 6973     
     75D8 2066     
     75DA 7265     
     75DC 6520     
     75DE 736F     
     75E0 6674     
     75E2 7761     
     75E4 7265     
     75E6 2C20     
     75E8 796F     
     75EA 7520     
     75EC 6172     
     75EE 6520     
     75F0 7765     
     75F2 6C63     
     75F4 6F6D     
     75F6 6520     
     75F8 746F     
     75FA 2072     
     75FC 6564     
     75FE 6973     
     7600 7472     
     7602 6962     
     7604 7574     
     7606 6520     
     7608 756E     
     760A 6465     
     760C 7220     
     760E 6365     
     7610 7274     
     7612 6169     
     7614 6E20     
     7616 636F     
     7618 6E64     
     761A 6974     
     761C 696F     
     761E 6E73     
0187 7620 2746     txt.keys.about     stri 'F9-Back   ENTER-Close   SPACE-Next Page'
     7622 392D     
     7624 4261     
     7626 636B     
     7628 2020     
     762A 2045     
     762C 4E54     
     762E 4552     
     7630 2D43     
     7632 6C6F     
     7634 7365     
     7636 2020     
     7638 2053     
     763A 5041     
     763C 4345     
     763E 2D4E     
     7640 6578     
     7642 7420     
     7644 5061     
     7646 6765     
0188               
0189 7648 45       txt.about.build    byte 69
0190 7649   42                        text 'Build: '
     764A 7569     
     764C 6C64     
     764E 3A20     
0191                                  copy "buildstr.asm"
     **** ****     > buildstr.asm
0001 7650 3234                        text '240915-2123500'
     7652 3039     
     7654 3135     
     7656 2D32     
     7658 3132     
     765A 3335     
     765C 3030     
                   < data.dialogs.asm
0192 765E 202D                        text ' - Stevie 1.6.3  - (c)2018-2024 Filip Van Vooren'
     7660 2053     
     7662 7465     
     7664 7669     
     7666 6520     
     7668 312E     
     766A 362E     
     766C 3320     
     766E 202D     
     7670 2028     
     7672 6329     
     7674 3230     
     7676 3138     
     7678 2D32     
     767A 3032     
     767C 3420     
     767E 4669     
     7680 6C69     
     7682 7020     
     7684 5661     
     7686 6E20     
     7688 566F     
     768A 6F72     
     768C 656E     
0193                                  even
0194               
0195               
0196               ;--------------------------------------------------------------
0197               ; Dialog "Main Menu"
0198               ;--------------------------------------------------------------
0199 768E 0E01     txt.head.menu      byte 14,1,1
     7690 01       
0200 7691   20                        text ' Main Menu '
     7692 4D61     
     7694 696E     
     7696 204D     
     7698 656E     
     769A 7520     
0201 769C 01                          byte 1
0202               
0203 769D   3C     txt.info.menu      stri 'File   Basic   Cartridge   Shortcuts   Options   Help   Quit'
     769E 4669     
     76A0 6C65     
     76A2 2020     
     76A4 2042     
     76A6 6173     
     76A8 6963     
     76AA 2020     
     76AC 2043     
     76AE 6172     
     76B0 7472     
     76B2 6964     
     76B4 6765     
     76B6 2020     
     76B8 2053     
     76BA 686F     
     76BC 7274     
     76BE 6375     
     76C0 7473     
     76C2 2020     
     76C4 204F     
     76C6 7074     
     76C8 696F     
     76CA 6E73     
     76CC 2020     
     76CE 2048     
     76D0 656C     
     76D2 7020     
     76D4 2020     
     76D6 5175     
     76D8 6974     
0204 76DA 0007     pos.info.menu      byte 0,7,15,27,39,49,56,>ff
     76DC 0F1B     
     76DE 2731     
     76E0 38FF     
0205 76E2 0100     txt.hint.menu      stri ''
0206 76E4 1F46     txt.keys.menu      stri 'F9-Close menu  SPACE-Close menu'
     76E6 392D     
     76E8 436C     
     76EA 6F73     
     76EC 6520     
     76EE 6D65     
     76F0 6E75     
     76F2 2020     
     76F4 5350     
     76F6 4143     
     76F8 452D     
     76FA 436C     
     76FC 6F73     
     76FE 6520     
     7700 6D65     
     7702 6E75     
0207 7704 1F46     txt.keys.menu2     stri 'F9-Close menu  SPACE-Close menu'
     7706 392D     
     7708 436C     
     770A 6F73     
     770C 6520     
     770E 6D65     
     7710 6E75     
     7712 2020     
     7714 5350     
     7716 4143     
     7718 452D     
     771A 436C     
     771C 6F73     
     771E 6520     
     7720 6D65     
     7722 6E75     
0208               
0209               ;--------------------------------------------------------------
0210               ; Dialog "File"
0211               ;--------------------------------------------------------------
0212 7724 0901     txt.head.file      byte 9,1,1
     7726 01       
0213 7727   20                        text ' File '
     7728 4669     
     772A 6C65     
     772C 20       
0214 772D   01                        byte 1
0215               
0216 772E 3B4E     txt.info.file      stri 'New   Open   Run   Save   Insert   Append   Catalog   Print'
     7730 6577     
     7732 2020     
     7734 204F     
     7736 7065     
     7738 6E20     
     773A 2020     
     773C 5275     
     773E 6E20     
     7740 2020     
     7742 5361     
     7744 7665     
     7746 2020     
     7748 2049     
     774A 6E73     
     774C 6572     
     774E 7420     
     7750 2020     
     7752 4170     
     7754 7065     
     7756 6E64     
     7758 2020     
     775A 2043     
     775C 6174     
     775E 616C     
     7760 6F67     
     7762 2020     
     7764 2050     
     7766 7269     
     7768 6E74     
0217 776A 0006     pos.info.file      byte 0,6,13,19,26,35,44,54,>ff
     776C 0D13     
     776E 1A23     
     7770 2C36     
     7772 FF       
0218 7773   01     txt.hint.file      stri ' '
     7774 20       
0219 7775   19     txt.keys.file      stri 'F9-Back  SPACE-Close menu'
     7776 4639     
     7778 2D42     
     777A 6163     
     777C 6B20     
     777E 2053     
     7780 5041     
     7782 4345     
     7784 2D43     
     7786 6C6F     
     7788 7365     
     778A 206D     
     778C 656E     
     778E 75       
0220               
0221               ;--------------------------------------------------------------
0222               ; Dialog "Cartridge"
0223               ;--------------------------------------------------------------
0224 778F   0E     txt.head.cartridge byte 14,1,1
     7790 0101     
0225 7792 2043                        text ' Cartridge '
     7794 6172     
     7796 7472     
     7798 6964     
     779A 6765     
     779C 20       
0226 779D   01                        byte 1
0227               
0228               
0229 779E 1758     txt.info.cartridge stri 'XB-GEM   FCMD   fbForth'
     77A0 422D     
     77A2 4745     
     77A4 4D20     
     77A6 2020     
     77A8 4643     
     77AA 4D44     
     77AC 2020     
     77AE 2066     
     77B0 6246     
     77B2 6F72     
     77B4 7468     
0230 77B6 0009     pos.info.cartridge byte 0,9,16,>ff
     77B8 10FF     
0231 77BA 3644     txt.hint.cartridg2 stri 'Danger zone! FinalGROM with prepared SD card required:'
     77BC 616E     
     77BE 6765     
     77C0 7220     
     77C2 7A6F     
     77C4 6E65     
     77C6 2120     
     77C8 4669     
     77CA 6E61     
     77CC 6C47     
     77CE 524F     
     77D0 4D20     
     77D2 7769     
     77D4 7468     
     77D6 2070     
     77D8 7265     
     77DA 7061     
     77DC 7265     
     77DE 6420     
     77E0 5344     
     77E2 2063     
     77E4 6172     
     77E6 6420     
     77E8 7265     
     77EA 7175     
     77EC 6972     
     77EE 6564     
     77F0 3A       
0232 77F1   2D     txt.hint.cartridge stri 'XB29GEM[C,G].bin  FCMD[C,G].bin  FBFORTHC.bin'
     77F2 5842     
     77F4 3239     
     77F6 4745     
     77F8 4D5B     
     77FA 432C     
     77FC 475D     
     77FE 2E62     
     7800 696E     
     7802 2020     
     7804 4643     
     7806 4D44     
     7808 5B43     
     780A 2C47     
     780C 5D2E     
     780E 6269     
     7810 6E20     
     7812 2046     
     7814 4246     
     7816 4F52     
     7818 5448     
     781A 432E     
     781C 6269     
     781E 6E       
0233 781F   19     txt.keys.cartridge stri 'F9-Back  SPACE-Close menu'
     7820 4639     
     7822 2D42     
     7824 6163     
     7826 6B20     
     7828 2053     
     782A 5041     
     782C 4345     
     782E 2D43     
     7830 6C6F     
     7832 7365     
     7834 206D     
     7836 656E     
     7838 75       
0234               
0235               
0236               ;--------------------------------------------------------------
0237               ; Dialog "TI Basic"
0238               ;--------------------------------------------------------------
0239 7839   0D     txt.head.basic     byte 13,1,1
     783A 0101     
0240 783C 2054                        text ' TI Basic '
     783E 4920     
     7840 4261     
     7842 7369     
     7844 6320     
0241 7846 01                          byte 1
0242               
0243 7847   15     txt.info.basic     stri 'Session:  1   2   3  '
     7848 5365     
     784A 7373     
     784C 696F     
     784E 6E3A     
     7850 2020     
     7852 3120     
     7854 2020     
     7856 3220     
     7858 2020     
     785A 3320     
     785C 20       
0244 785D   0A     pos.info.basic     byte 10,14,18,>ff
     785E 0E12     
     7860 FF       
0245 7861   48     txt.hint.basic2    stri 'Press SPACE to retrieve TI Basic program. Session: Current=',>02,>03,' Visited=',>1d,>1e
     7862 5072     
     7864 6573     
     7866 7320     
     7868 5350     
     786A 4143     
     786C 4520     
     786E 746F     
     7870 2072     
     7872 6574     
     7874 7269     
     7876 6576     
     7878 6520     
     787A 5449     
     787C 2042     
     787E 6173     
     7880 6963     
     7882 2070     
     7884 726F     
     7886 6772     
     7888 616D     
     788A 2E20     
     788C 5365     
     788E 7373     
     7890 696F     
     7892 6E3A     
     7894 2043     
     7896 7572     
     7898 7265     
     789A 6E74     
     789C 3D02     
     789E 0320     
     78A0 5669     
     78A2 7369     
     78A4 7465     
     78A6 643D     
     78A8 1D1E     
0246 78AA 4450     txt.hint.basic     stri 'Pick session 1-3. Press F9 (or type END) in TI Basic to return here.'
     78AC 6963     
     78AE 6B20     
     78B0 7365     
     78B2 7373     
     78B4 696F     
     78B6 6E20     
     78B8 312D     
     78BA 332E     
     78BC 2050     
     78BE 7265     
     78C0 7373     
     78C2 2046     
     78C4 3920     
     78C6 286F     
     78C8 7220     
     78CA 7479     
     78CC 7065     
     78CE 2045     
     78D0 4E44     
     78D2 2920     
     78D4 696E     
     78D6 2054     
     78D8 4920     
     78DA 4261     
     78DC 7369     
     78DE 6320     
     78E0 746F     
     78E2 2072     
     78E4 6574     
     78E6 7572     
     78E8 6E20     
     78EA 6865     
     78EC 7265     
     78EE 2E       
0247 78EF   2C     txt.keys.basic     stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     78F0 4639     
     78F2 2D42     
     78F4 6163     
     78F6 6B20     
     78F8 2046     
     78FA 352D     
     78FC 4175     
     78FE 746F     
     7900 556E     
     7902 7061     
     7904 636B     
     7906 2020     
     7908 5350     
     790A 4143     
     790C 452D     
     790E 556E     
     7910 7061     
     7912 636B     
     7914 2070     
     7916 726F     
     7918 6772     
     791A 616D     
0248 791C 1746     txt.keys.basic2    stri 'F9-Back  *F5-AutoUnpack'
     791E 392D     
     7920 4261     
     7922 636B     
     7924 2020     
     7926 2A46     
     7928 352D     
     792A 4175     
     792C 746F     
     792E 556E     
     7930 7061     
     7932 636B     
0249               
0250               ;--------------------------------------------------------------
0251               ; Dialog "Options"
0252               ;--------------------------------------------------------------
0253 7934 0C01     txt.head.config    byte 12,1,1
     7936 01       
0254 7937   20                        text ' Options '
     7938 4F70     
     793A 7469     
     793C 6F6E     
     793E 7320     
0255 7940 01                          byte 1
0256               
0257 7941   10     txt.info.config    stri 'Clipboard   Font'
     7942 436C     
     7944 6970     
     7946 626F     
     7948 6172     
     794A 6420     
     794C 2020     
     794E 466F     
     7950 6E74     
0258 7952 000C     pos.info.config    byte 0,12,>ff
     7954 FF       
0259 7955   19     txt.keys.config    stri 'F9-Back  SPACE-Close menu'
     7956 4639     
     7958 2D42     
     795A 6163     
     795C 6B20     
     795E 2053     
     7960 5041     
     7962 4345     
     7964 2D43     
     7966 6C6F     
     7968 7365     
     796A 206D     
     796C 656E     
     796E 75       
0260               
0261               ;--------------------------------------------------------------
0262               ; Dialog "Configure clipboard"
0263               ;--------------------------------------------------------------
0264 796F   18     txt.head.clipdev   byte 24,1,1
     7970 0101     
0265 7972 2043                        text ' Configure clipboard '
     7974 6F6E     
     7976 6669     
     7978 6775     
     797A 7265     
     797C 2063     
     797E 6C69     
     7980 7062     
     7982 6F61     
     7984 7264     
     7986 20       
0266 7987   01                        byte 1
0267 7988 3847     txt.hint.clipdev   stri 'Give device, path and filename prefix of clipboard file.'
     798A 6976     
     798C 6520     
     798E 6465     
     7990 7669     
     7992 6365     
     7994 2C20     
     7996 7061     
     7998 7468     
     799A 2061     
     799C 6E64     
     799E 2066     
     79A0 696C     
     79A2 656E     
     79A4 616D     
     79A6 6520     
     79A8 7072     
     79AA 6566     
     79AC 6978     
     79AE 206F     
     79B0 6620     
     79B2 636C     
     79B4 6970     
     79B6 626F     
     79B8 6172     
     79BA 6420     
     79BC 6669     
     79BE 6C65     
     79C0 2E       
0268 79C1   3B     txt.keys.clipdev   stri 'F9-Back  F3-Clear  ^A=DSK1.CLIP  ^B=DSK2.CLIP  ^C=TIPI.CLIP'
     79C2 4639     
     79C4 2D42     
     79C6 6163     
     79C8 6B20     
     79CA 2046     
     79CC 332D     
     79CE 436C     
     79D0 6561     
     79D2 7220     
     79D4 205E     
     79D6 413D     
     79D8 4453     
     79DA 4B31     
     79DC 2E43     
     79DE 4C49     
     79E0 5020     
     79E2 205E     
     79E4 423D     
     79E6 4453     
     79E8 4B32     
     79EA 2E43     
     79EC 4C49     
     79EE 5020     
     79F0 205E     
     79F2 433D     
     79F4 5449     
     79F6 5049     
     79F8 2E43     
     79FA 4C49     
     79FC 50       
0269               
0270               ;--------------------------------------------------------------
0271               ; Dialog "Configure font"
0272               ;--------------------------------------------------------------
0273 79FD   13     txt.head.font      byte 19,1,1
     79FE 0101     
0274 7A00 2043                        text ' Configure font '
     7A02 6F6E     
     7A04 6669     
     7A06 6775     
     7A08 7265     
     7A0A 2066     
     7A0C 6F6E     
     7A0E 7420     
0275 7A10 01                          byte 1
0276 7A11   18     txt.info.font      stri 'Font:  1   2   3   4   5'
     7A12 466F     
     7A14 6E74     
     7A16 3A20     
     7A18 2031     
     7A1A 2020     
     7A1C 2032     
     7A1E 2020     
     7A20 2033     
     7A22 2020     
     7A24 2034     
     7A26 2020     
     7A28 2035     
0277 7A2A 070B     pos.info.font      byte 7,11,15,19,23,>ff
     7A2C 0F13     
     7A2E 17FF     
0278               
0279 7A30 2950     txt.hint.font      stri 'Pick desired font 1-5. Default font is 1.'
     7A32 6963     
     7A34 6B20     
     7A36 6465     
     7A38 7369     
     7A3A 7265     
     7A3C 6420     
     7A3E 666F     
     7A40 6E74     
     7A42 2031     
     7A44 2D35     
     7A46 2E20     
     7A48 4465     
     7A4A 6661     
     7A4C 756C     
     7A4E 7420     
     7A50 666F     
     7A52 6E74     
     7A54 2069     
     7A56 7320     
     7A58 312E     
0280 7A5A 1946     txt.keys.font      stri 'F9-Back  SPACE-Close menu'
     7A5C 392D     
     7A5E 4261     
     7A60 636B     
     7A62 2020     
     7A64 5350     
     7A66 4143     
     7A68 452D     
     7A6A 436C     
     7A6C 6F73     
     7A6E 6520     
     7A70 6D65     
     7A72 6E75     
0281               
0282               ;--------------------------------------------------------------
0283               ; Dialog "Shortcuts"
0284               ;--------------------------------------------------------------
0285 7A74 0E01     txt.head.shortcuts byte 14,1,1
     7A76 01       
0286 7A77   20                        text ' Shortcuts '
     7A78 5368     
     7A7A 6F72     
     7A7C 7463     
     7A7E 7574     
     7A80 7320     
0287 7A82 01                          byte 1
0288               
0289 7A83   2A     txt.info.shortcuts stri 'Colors   Ruler   Autoinsert   Goto   M1-M2'
     7A84 436F     
     7A86 6C6F     
     7A88 7273     
     7A8A 2020     
     7A8C 2052     
     7A8E 756C     
     7A90 6572     
     7A92 2020     
     7A94 2041     
     7A96 7574     
     7A98 6F69     
     7A9A 6E73     
     7A9C 6572     
     7A9E 7420     
     7AA0 2020     
     7AA2 476F     
     7AA4 746F     
     7AA6 2020     
     7AA8 204D     
     7AAA 312D     
     7AAC 4D32     
0290                                  even
0291 7AAE 0009     pos.info.shortcuts byte 0,9,17,30,38,41,>ff
     7AB0 111E     
     7AB2 2629     
     7AB4 FF       
0292                                  even
0293 7AB6 0120     txt.hint.shortcuts stri ' '
0294                                  even
0295 7AB8 1946     txt.keys.shortcuts stri 'F9-Back  SPACE-Close menu'
     7ABA 392D     
     7ABC 4261     
     7ABE 636B     
     7AC0 2020     
     7AC2 5350     
     7AC4 4143     
     7AC6 452D     
     7AC8 436C     
     7ACA 6F73     
     7ACC 6520     
     7ACE 6D65     
     7AD0 6E75     
0296                                  even
                   < stevie_b3.asm
0119                       copy  "data.keymap.presets.asm" ; Shortcut presets in dialogs
     **** ****     > data.keymap.presets.asm
0001               * FILE......: data.keymap.presets.asm
0002               * Purpose...: Shortcut presets in dialogs
0003               
0004               *---------------------------------------------------------------
0005               * Shorcut presets for dialogs
0006               *-------------|---------------------|---------------------------
0007               cmdb.cmd.preset.data:
0008                       ;-------------------------------------------------------
0009                       ; Dialog "Configure clipboard"
0010                       ;-------------------------------------------------------
0011 7AD2 0013             data  id.dialog.cfg.clip, key.ctrl.a, def.clip.fname.a
     7AD4 0081     
     7AD6 3DA3     
0012 7AD8 0013             data  id.dialog.cfg.clip, key.ctrl.b, def.clip.fname.b
     7ADA 0082     
     7ADC 3DAD     
0013 7ADE 0013             data  id.dialog.cfg.clip, key.ctrl.c, def.clip.fname.C
     7AE0 0083     
     7AE2 3DB7     
0014                       ;-------------------------------------------------------
0015                       ; End of list
0016                       ;-------------------------------------------------------
0017 7AE4 FFFF             data  EOL                   ; EOL
                   < stevie_b3.asm
0120                       ;-----------------------------------------------------------------------
0121                       ; Bank full check
0122                       ;-----------------------------------------------------------------------
0126                       ;-----------------------------------------------------------------------
0127                       ; Show ROM bank in CPU crash screen
0128                       ;-----------------------------------------------------------------------
0129                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7FF0 06A0  32         bl    @putat
     7FF2 2442     
0010 7FF4 0314                   byte 3,20
0011 7FF6 7F64                   data cpu.crash.showbank.bankstr
0012 7FF8 10FF  14         jmp   $
                   < stevie_b3.asm
0130                       ;-----------------------------------------------------------------------
0131                       ; Table for VDP modes
0132                       ;-----------------------------------------------------------------------
0133                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0980  (>26 * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1800  (>03 * >800)
0029               * ; VDP#5 SAT (sprite attribute table)   at >1300  (>26 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F50 04F0             byte  >04,>f0,>00,>26,>03,>26,>03,SPFCLR,0,80
     7F52 0026     
     7F54 0326     
     7F56 03F4     
     7F58 0050     
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 7F5A 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F5C 000C     
     7F5E 0006     
     7F60 0007     
     7F62 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
                   < stevie_b3.asm
0134                       ;-----------------------------------------------------------------------
0135                       ; Vector table
0136                       ;-----------------------------------------------------------------------
0137                       copy  "rom.vectors.bank3.asm"
     **** ****     > rom.vectors.bank3.asm
0001               * FILE......: rom.vectors.bank3.asm
0002               * Purpose...: Bank 3 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F64 0552             stri 'ROM#3'
     7F66 4F4D     
     7F68 2333     
0009               
0010               *--------------------------------------------------------------
0011               * ROM 3: Vectors 1-32
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014 7F70 61B4     vec.1   data  dialog.help           ; Dialog "Help"
0015 7F72 61F8     vec.2   data  dialog.load           ; Dialog "Load file"
0016 7F74 6296     vec.3   data  dialog.save           ; Dialog "Save file"
0017 7F76 641C     vec.4   data  dialog.insert         ; Dialog "Insert file at line ..."
0018 7F78 6322     vec.5   data  dialog.print          ; Dialog "Print file"
0019 7F7A 6124     vec.6   data  dialog.file           ; Dialog "File"
0020 7F7C 672A     vec.7   data  dialog.unsaved        ; Dialog "Unsaved changes"
0021 7F7E 669C     vec.8   data  dialog.clipboard      ; Dialog "Copy clipboard to line ..."
0022 7F80 660A     vec.9   data  dialog.cfg.clip       ; Dialog "Configure clipboard"
0023 7F82 65C8     vec.10  data  dialog.cfg            ; Dialog "Configure"
0024 7F84 63AA     vec.11  data  dialog.append         ; Dialog "Append file"
0025 7F86 616A     vec.12  data  dialog.cartridge      ; Dialog "Cartridge"
0026 7F88 676C     vec.13  data  dialog.basic          ; Dialog "TI Basic"
0027 7F8A 67CA     vec.14  data  dialog.shortcuts      ; Dialog "Shortcuts"
0028 7F8C 656C     vec.15  data  dialog.cat            ; Dialog "Catalog"
0029 7F8E 6810     vec.16  data  dialog.goto           ; Dialog "Go to line"
0030 7F90 665A     vec.17  data  dialog.font           ; Dialog "Configure font"
0031 7F92 64CE     vec.18  data  dialog.run            ; Dialog "Run file"
0032 7F94 6862     vec.19  data  pane.show_hintx       ; Show or hide hint (register version)
0033 7F96 6932     vec.20  data  pane.cmdb.show        ; Show command buffer pane (=dialog)
0034 7F98 69A0     vec.21  data  pane.cmdb.hide        ; Hide command buffer pane
0035 7F9A 6A14     vec.22  data  pane.cmdb.draw        ; Draw content in command
0036 7F9C 6EB2     vec.23  data  tibasic.buildstr      ; Build TI Basic session identifier string
0037 7F9E 6B8C     vec.24  data  cmdb.refresh          ;
0038 7FA0 6BD6     vec.25  data  cmdb.cmd.clear        ;
0039 7FA2 6C08     vec.26  data  cmdb.cmd.getlength    ;
0040 7FA4 6C6C     vec.27  data  cmdb.cmd.preset       ;
0041 7FA6 6C1E     vec.28  data  cmdb.cmd.set          ;
0042 7FA8 68CC     vec.29  data  dialog.hearts.tat     ; Dump color for hearts in TI-Basic dialog
0043 7FAA 6078     vec.30  data  dialog.menu           ; Dialog "Main Menu"
0044 7FAC 6E90     vec.31  data  tibasic.am.toggle     ; Toggle AutoUnpack in Run TI-Basic dialog
0045 7FAE 6D1E     vec.32  data  fm.fastmode           ; Toggle FastMode on/off in Load
0046               *--------------------------------------------------------------
0047               * ROM 3: Vectors 33-64
0048               *--------------------------------------------------------------
0049 7FB0 6CAE     vec.33  data  cmdb.cfg.fname        ; Configure filename
0050 7FB2 6DD0     vec.34  data  fm.lineterm           ; Toggle line term on/off in Save/Print
0051 7FB4 2026     vec.35  data  cpu.crash             ;
0052 7FB6 2026     vec.36  data  cpu.crash             ;
0053 7FB8 2026     vec.37  data  cpu.crash             ;
0054 7FBA 2026     vec.38  data  cpu.crash             ;
0055 7FBC 2026     vec.39  data  cpu.crash             ;
0056 7FBE 2026     vec.40  data  cpu.crash             ;
0057 7FC0 2026     vec.41  data  cpu.crash             ;
0058 7FC2 604A     vec.42  data  dialog                ; Dialog initialisation code
0059 7FC4 2026     vec.43  data  cpu.crash             ;
0060 7FC6 2026     vec.44  data  cpu.crash             ;
0061 7FC8 2026     vec.45  data  cpu.crash             ;
0062 7FCA 2026     vec.46  data  cpu.crash             ;
0063 7FCC 2026     vec.47  data  cpu.crash             ;
0064 7FCE 6B5A     vec.48  data  error.display         ; Show error message
0065 7FD0 2026     vec.49  data  cpu.crash             ;
0066 7FD2 2026     vec.50  data  cpu.crash             ;
0067 7FD4 2026     vec.51  data  cpu.crash             ;
0068 7FD6 2026     vec.52  data  cpu.crash             ;
0069 7FD8 2026     vec.53  data  cpu.crash             ;
0070 7FDA 2026     vec.54  data  cpu.crash             ;
0071 7FDC 2026     vec.55  data  cpu.crash             ;
0072 7FDE 2026     vec.56  data  cpu.crash             ;
0073 7FE0 2026     vec.57  data  cpu.crash             ;
0074 7FE2 2026     vec.58  data  cpu.crash             ;
0075 7FE4 2026     vec.59  data  cpu.crash             ;
0076 7FE6 2026     vec.60  data  cpu.crash             ;
0077 7FE8 2026     vec.61  data  cpu.crash             ;
0078 7FEA 2026     vec.62  data  cpu.crash             ;
0079 7FEC 2026     vec.63  data  cpu.crash             ;
0080 7FEE 2026     vec.64  data  cpu.crash             ;
                   < stevie_b3.asm
0138                                                   ; Vector table bank 3

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6006 :     
    BANKX.CRASH.SHOWBANK >7FF0 :     
    BANKX.VDPTAB........ >7F50 :     
    BANKX.VECTAB........ >7F70 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CAT.BARCOL.......... >E376 :     
    CAT.BARPOS.......... >E374 :     
    CAT.CURRENTPAGE..... >E00C :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E378 :     
    CAT.FSLIST.......... >E1F4 :     
    CAT.FTLIST.......... >E174 :     
    CAT.FULLFNAME....... >E016 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESCOL...... >E00A :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E014 :     
    CAT.PREVIOUSPAGE.... >E010 :     
    CAT.PTRLIST......... >E076 :     
    CAT.RSLIST.......... >E2F4 :     
    CAT.SHORTCUT.IDX.... >E012 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00E :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E066 :     
    CAT.VAR2............ >E068 :     
    CAT.VAR3............ >E06A :     
    CAT.VAR4............ >E06C :     
    CAT.VAR5............ >E06E :     
    CAT.VAR6............ >E070 :     
    CAT.VAR7............ >E072 :     
    CAT.VAR8............ >E074 :     
    CAT.VOLNAME......... >E3BA :     
    CLHOOK.............. >2F7C :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2FA4 :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CFG.FNAME...... >6CAE :     
    CMDB.CFG.FNAME.EXIT. >6D14 :     
    CMDB.CFG.FNAME.MESSAGE >6CF0 :     
    CMDB.CMD............ >A72F :     
    CMDB.CMD.CLEAR...... >6BD6 :     
    CMDB.CMD.CLEAR.EXIT. >6BFE :     
    CMDB.CMD.GETLENGTH.. >6C08 :     
    CMDB.CMD.GETLENGTH.EXIT >6C1A :     
    CMDB.CMD.PRESET..... >6C6C :     
    CMDB.CMD.PRESET.DATA >7AD2 :     
    CMDB.CMD.PRESET.EXIT >6CA4 :     
    CMDB.CMD.PRESET.LOOP >6C84 :     
    CMDB.CMD.PRESET.NEXT >6C98 :     
    CMDB.CMD.SET........ >6C1E :     
    CMDB.CMD.SET.EXIT... >6C62 :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >334C :     
    CMDB.INIT.EXIT...... >33A0 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.REFRESH........ >6B8C :     
    CMDB.REFRESH.EXIT... >6BC8 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >39B6 :     
    CONST.11............ >39B8 :     
    CONST.12............ >39BA :     
    CONST.13............ >39BC :     
    CONST.14............ >39BE :     
    CONST.15............ >39C0 :     
    CONST.2............. >2004 :     
    CONST.3............. >39AC :     
    CONST.32............ >39C2 :     
    CONST.4............. >2006 :     
    CONST.5............. >39AE :     
    CONST.6............. >39B0 :     
    CONST.7............. >39B2 :     
    CONST.8............. >2008 :     
    CONST.80............ >39C4 :     
    CONST.9............. >39B4 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7FF0 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F64 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3DA3 :     
    DEF.CLIP.FNAME.B.... >3DAD :     
    DEF.CLIP.FNAME.C.... >3DB7 :     
    DEF.DEVICES......... >3DC1 :     
    DEF.PRINTER.FNAME... >3D9C :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.............. >604A :     
    DIALOG.APPEND....... >63AA :     
    DIALOG.APPEND.CURSOR >6406 :     
    DIALOG.APPEND.EXIT.. >6414 :     
    DIALOG.APPEND.KEYLIST >63F2 :     
    DIALOG.APPEND.SETUP. >63B6 :     
    DIALOG.BASIC........ >676C :     
    DIALOG.BASIC.AMONLY. >67B4 :     
    DIALOG.BASIC.DONE... >67B8 :     
    DIALOG.BASIC.EXIT... >67C4 :     
    DIALOG.CARTRIDGE.... >616A :     
    DIALOG.CARTRIDGE.EXIT >61AE :     
    DIALOG.CAT.......... >656C :     
    DIALOG.CAT.CURSOR... >65B4 :     
    DIALOG.CAT.EXIT..... >65C2 :     
    DIALOG.CAT.KEYLIST.. >65A0 :     
    DIALOG.CAT.SET.FILENAME1 >65A4 :     
    DIALOG.CFG.......... >65C8 :     
    DIALOG.CFG.CLIP..... >660A :     
    DIALOG.CFG.CLIP.EXIT >6654 :     
    DIALOG.CFG.EXIT..... >6604 :     
    DIALOG.CLIPBOARD.... >669C :     
    DIALOG.CLIPBOARD.EXIT >6724 :     
    DIALOG.CLIPBOARD.KEYLIST >671C :     
    DIALOG.CLIPBOARD.SETUP >66A4 :     
    DIALOG.EXIT......... >606E :     
    DIALOG.FILE......... >6124 :     
    DIALOG.FILE.EXIT.... >6164 :     
    DIALOG.FILE.KEYLIST. >6158 :     
    DIALOG.FONT......... >665A :     
    DIALOG.FONT.EXIT.... >6696 :     
    DIALOG.FONT.KEYLIST. >668A :     
    DIALOG.FONT.SETUP... >6662 :     
    DIALOG.GOTO......... >6810 :     
    DIALOG.GOTO.CURSOR.. >6852 :     
    DIALOG.GOTO.EXIT.... >685C :     
    DIALOG.HEARTS.TAT... >68CC :     
    DIALOG.HEARTS.TAT.EXIT >6928 :     
    DIALOG.HEARTS.TAT.LOOP >6906 :     
    DIALOG.HELP......... >61B4 :     
    DIALOG.HELP.CONTENT. >703C :     
    DIALOG.HELP.EXIT.... >61F4 :     
    DIALOG.INSERT....... >641C :     
    DIALOG.INSERT.CURSOR >64B8 :     
    DIALOG.INSERT.EXIT.. >64C6 :     
    DIALOG.INSERT.KEYLIST >64A4 :     
    DIALOG.INSERT.SETUP. >6428 :     
    DIALOG.LOAD......... >61F8 :     
    DIALOG.LOAD.CLEARCMD >6272 :     
    DIALOG.LOAD.CURSOR.. >6280 :     
    DIALOG.LOAD.EXIT.... >628E :     
    DIALOG.LOAD.KEYLIST. >624C :     
    DIALOG.LOAD.SET.FILENAME1 >6250 :     
    DIALOG.LOAD.SET.FILENAME2 >6262 :     
    DIALOG.LOAD.SETUP... >6210 :     
    DIALOG.MENU......... >6078 :     
    DIALOG.MENU.EXIT.... >6116 :     
    DIALOG.PRINT........ >6322 :     
    DIALOG.PRINT.CMDLINE >6394 :     
    DIALOG.PRINT.DEFAULT >6350 :     
    DIALOG.PRINT.EXIT... >63A4 :     
    DIALOG.PRINT.HEADER. >635C :     
    DIALOG.RUN.......... >64CE :     
    DIALOG.RUN.CLEARCMD. >6548 :     
    DIALOG.RUN.CURSOR... >6556 :     
    DIALOG.RUN.EXIT..... >6564 :     
    DIALOG.RUN.KEYLIST.. >6522 :     
    DIALOG.RUN.SET.FILENAME1 >6526 :     
    DIALOG.RUN.SET.FILENAME2 >6538 :     
    DIALOG.RUN.SETUP.... >64E6 :     
    DIALOG.SAVE......... >6296 :     
    DIALOG.SAVE.CURSORSHAPE >6314 :     
    DIALOG.SAVE.DEFAULT. >62CC :     
    DIALOG.SAVE.EXIT.... >631C :     
    DIALOG.SAVE.HEADER.. >62E8 :     
    DIALOG.SHORTCUTS.... >67CA :     
    DIALOG.SHORTCUTS.EXIT >680A :     
    DIALOG.UNSAVED...... >672A :     
    DIALOG.UNSAVED.EXIT. >6766 :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A576 :     
    EDB.HIPAGE.ALLOC.... >37D2 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37DE :     
    EDB.HIPAGE.ALLOC.CRASH >3808 :     
    EDB.HIPAGE.ALLOC.EXIT >3810 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37FA :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3300 :     
    EDB.INIT.EXIT....... >3346 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.GETLENGTH.. >376A :     
    EDB.LINE.GETLENGTH.EXIT >37A6 :     
    EDB.LINE.GETLENGTH.NULL >37A2 :     
    EDB.LINE.GETLENGTH2. >37AE :     
    EDB.LINE.GETLENGTH2.EXIT >37CC :     
    EDB.LINE.MAPPAGE.... >3720 :     
    EDB.LINE.MAPPAGE.EXIT >3762 :     
    EDB.LINE.MAPPAGE.LOOKUP >373A :     
    EDB.LINE.PACK....... >6F2E :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.CMDB.SHOW >6F40 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >6B5A :     
    ERROR.DISPLAY.EXIT.. >6B82 :     
    ERRPANE.EXIT........ >33CE :     
    ERRPANE.INIT........ >33A8 :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >31A8 :     
    FB.CALC.POINTER.EXIT >31C8 :     
    FB.CALC.SCRROWS..... >31D0 :     
    FB.CALC.SCRROWS.EXIT >31FC :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31F0 :     
    FB.CALC.SCRROWS.HANDLE.MC >31E4 :     
    FB.CALC.SCRROWS.HANDLE.RULER >31DA :     
    FB.COLORIZE......... >A312 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.INIT............. >3134 :     
    FB.INIT.EXIT........ >3186 :     
    FB.REFRESH.......... >6F52 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >318E :     
    FB.ROW2LINE.EXIT.... >31A2 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCAN.FNAME....... >6FE2 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2E7E :     
    FG99.CART.FBFORTH... >3E2E :     
    FG99.CART.FCMD...... >3DF2 :     
    FG99.CART.RXB....... >3E1A :     
    FG99.CART.XBGEM..... >3E06 :     
    FG99.EXIT........... >2EB8 :     
    FG99.RUN............ >3838 :     
    FG99.SEND.LOOP...... >2E8E :     
    FG99.WAIT........... >2EA6 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILEBUF.......... >2000 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BA :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46A :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.SEGMENTS......... >A43C :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0960 :     
    FH.VRECBUF.......... >2000 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E22 :     
    FILE.IMAGE.SAVE..... >2E20 :     
    FILE.LOAD........... >2E12 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E1E :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E24 :     
    FILE.STATUS......... >2E26 :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.SET. >6FD0 :     
    FM.DIRECTORY........ >6FBE :     
    FM.FASTMODE......... >6D1E :     
    FM.FASTMODE.EXIT.... >6DC6 :     
    FM.FASTMODE.KEYLIST. >6DC2 :     
    FM.FASTMODE.OFF..... >6D38 :     
    FM.FASTMODE.OFF.1... >6D64 :     
    FM.FASTMODE.OFF.2... >6D6A :     
    FM.FASTMODE.OFF.3... >6D70 :     
    FM.FASTMODE.OFF.4... >6D76 :     
    FM.FASTMODE.ON...... >6D7C :     
    FM.FASTMODE.ON.1.... >6DAC :     
    FM.FASTMODE.ON.2.... >6DB2 :     
    FM.FASTMODE.ON.3.... >6DB8 :     
    FM.FASTMODE.ON.4.... >6DBE :     
    FM.LINETERM......... >6DD0 :     
    FM.LINETERM.EXIT.... >6E86 :     
    FM.LINETERM.KEYLIST. >6E82 :     
    FM.LINETERM.OFF.1... >6E6A :     
    FM.LINETERM.OFF.2... >6E70 :     
    FM.LINETERM.ON.1.... >6E76 :     
    FM.LINETERM.ON.2.... >6E7C :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1900 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EC2 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CAT....... >000D :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0013 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >0011 :     
    ID.DIALOG.PRINTBLOCK >0012 :     
    ID.DIALOG.RUN....... >000E :     
    ID.DIALOG.SAVE...... >000F :     
    ID.DIALOG.SAVEBLOCK. >0010 :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3626 :     
    IDX.ENTRY.DELETE.EXIT >367E :     
    IDX.ENTRY.DELETE.LASTLINE >3652 :     
    IDX.ENTRY.DELETE.REORG >365A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3664 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3678 :     
    IDX.ENTRY.INSERT.... >36C8 :     
    IDX.ENTRY.INSERT.EXIT >3714 :     
    IDX.ENTRY.INSERT.REORG >36E6 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36F0 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3704 :     
    IDX.ENTRY.UPDATE.... >3578 :     
    IDX.ENTRY.UPDATE.CLEAR >35B2 :     
    IDX.ENTRY.UPDATE.EXIT >35C2 :     
    IDX.ENTRY.UPDATE.SAVE >35A0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3200 :     
    IDX.INIT.EXIT....... >323C :     
    IDX.POINTER.GET..... >35CA :     
    IDX.POINTER.GET.EXIT >360C :     
    IDX.POINTER.GET.PARM >35FA :     
    IDX.POINTER.GET.PARM.NULL >3604 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F5C :     
    KTHREAD_EXIT........ >2F6E :     
    KTHREAD_KB.......... >2F6A :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >70BA :     
    MAGIC.CLEAR......... >70A8 :     
    MAGIC.SET........... >7096 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7072 :     
    MEM.SAMS.SET.LEGACY. >7060 :     
    MEM.SAMS.SET.STEVIE. >7084 :     
    MEM.SAMS.SETUP.STEVIE >704E :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F7A :     
    MKHOOK.............. >2F72 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2FA0 :     
    MKSLOT.............. >2F86 :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3932 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >6A14 :     
    PANE.CMDB.DRAW.ALPHA.DOWN >6B2A :     
    PANE.CMDB.DRAW.CLEAR >6AA2 :     
    PANE.CMDB.DRAW.EXIT. >6B52 :     
    PANE.CMDB.DRAW.EXTRAHINT >6AE8 :     
    PANE.CMDB.DRAW.HEARTS >6B3C :     
    PANE.CMDB.DRAW.HINT. >6AD2 :     
    PANE.CMDB.DRAW.KEYS. >6B04 :     
    PANE.CMDB.DRAW.MARKER.LOOP >6AB2 :     
    PANE.CMDB.DRAW.PROMPTCMD >6B32 :     
    PANE.CMDB.HIDE...... >69A0 :     
    PANE.CMDB.HIDE.EXIT. >69FE :     
    PANE.CMDB.SHOW...... >6932 :     
    PANE.CMDB.SHOW.EXIT. >6996 :     
    PANE.CMDB.SHOW.REST. >6950 :     
    PANE.COLORSCHEME.LOAD >6FAC :     
    PANE.CURSOR.BLINK... >6F76 :     
    PANE.CURSOR.HIDE.... >6F88 :     
    PANE.ERRLINE.HIDE... >6F64 :     
    PANE.ERRLINE.SHOW... >6F9A :     
    PANE.FILEBROWSER.... >6FF4 :     
    PANE.FILEBROWSER.COLBAR >7018 :     
    PANE.FILEBROWSER.COLBAR.REMOVE >702A :     
    PANE.FILEBROWSER.HILIGHT >7006 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINT...... >68B8 :     
    PANE.SHOW_HINT.EXIT. >68C8 :     
    PANE.SHOW_HINTX..... >6862 :     
    PANE.SHOW_HINTX.EXIT >68AC :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3818 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3830 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    POS.INFO.BASIC...... >785D :     
    POS.INFO.CARTRIDGE.. >77B6 :     
    POS.INFO.CONFIG..... >7952 :     
    POS.INFO.FILE....... >776A :     
    POS.INFO.FONT....... >7A2A :     
    POS.INFO.MENU....... >76DA :     
    POS.INFO.SHORTCUTS.. >7AAE :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >3084 :     
    ROM.FARJUMP.ASSERT.CART >30F6 :     
    ROM.FARJUMP.ASSERT.LOWMEM >3104 :     
    ROM.FARJUMP.BANKSWITCH.CALL >30E6 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30DE :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3122 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3114 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30C2 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30C6 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30CE :     
    ROM.FARJUMP.EXIT.... >312A :     
    ROM.FARJUMP.RETURN.. >30E8 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3926 :     
    RSSLOT.............. >2FB2 :     
    RUNLI1.............. >2FCA :     
    RUNLI2.............. >2FD6 :     
    RUNLI3.............. >2FDA :     
    RUNLI3A............. >2FE2 :     
    RUNLI4.............. >2FEC :     
    RUNLI5.............. >2FF6 :     
    RUNLI6.............. >3004 :     
    RUNLI7.............. >3012 :     
    RUNLI9.............. >3016 :     
    RUNLIA.............. >3038 :     
    RUNLIB.............. >2FC6 :     
    RUNLIC.............. >305C :     
    RUNLID.............. >3072 :     
    RUNLIE.............. >307C :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F3E :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >1800 :     
    SPRSAT.............. >1300 :     
    SPVMOD.............. >7F50 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F50 :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >391A :     
    TASK.ONESHOT.EXIT... >3922 :     
    TASK.VDP.COPY.SAT... >3864 :     
    TASK.VDP.COPY.SAT.CMDB >388C :     
    TASK.VDP.COPY.SAT.EXIT >38FA :     
    TASK.VDP.COPY.SAT.FB >389C :     
    TASK.VDP.COPY.SAT.FB.NORULER >38B0 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38E6 :     
    TASK.VDP.COPY.SAT.WRITE >38B4 :     
    TASK.VDP.COPY.SAT.WRITE2 >38F0 :     
    TASK.VDP.CURSOR..... >3906 :     
    TASK.VDP.CURSOR.EXIT >3914 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC.32X24....... >7F5A :     
    TIBASIC.AM.EXIT..... >6EAC :     
    TIBASIC.AM.OFF...... >6EA4 :     
    TIBASIC.AM.TOGGLE... >6E90 :     
    TIBASIC.BUILDSTR.... >6EB2 :     
    TIBASIC.BUILDSTR.ACTIVE >6F06 :     
    TIBASIC.BUILDSTR.CURRENT >6EF4 :     
    TIBASIC.BUILDSTR.EXIT >6F1C :     
    TIBASIC.BUILDSTR.LOOP >6EF0 :     
    TIBASIC.BUILDSTR.NEXT >6F10 :     
    TIBASIC.HEART.OPEN.. >6F2C :     
    TIBASIC.HEART.SOLID. >6F2A :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F5A :     
    TMGR................ >2EBE :     
    TMGR1............... >2EC2 :     
    TMGR10.............. >2F42 :     
    TMGR11.............. >2F50 :     
    TMGR12.............. >2F54 :     
    TMGR1A.............. >2ED0 :     
    TMGR2............... >2ED6 :     
    TMGR3............... >2EE6 :     
    TMGR4............... >2EF8 :     
    TMGR5............... >2F0E :     
    TMGR6............... >2F12 :     
    TMGR7............... >2F16 :     
    TMGR8............... >2F18 :     
    TMGR9............... >2F20 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >3934 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >33D8 :     
    TV.INIT.EXIT........ >3424 :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3500 :     
    TV.PAD.STRING.EXIT.. >356C :     
    TV.PAD.STRING.LOOP.. >3556 :     
    TV.PAD.STRING.PANIC. >3564 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >342E :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >3994 :     
    TV.TABS.TABLE.RL.... >39A0 :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >34CA :     
    TV.UINT16.PACK...... >343C :     
    TV.UINT16.PACK.DONE. >34B6 :     
    TV.UINT16.PACK.ERROR >34AE :     
    TV.UINT16.PACK.EXIT. >34BA :     
    TV.UINT16.PACK.LOOP. >3484 :     
    TV.UINT16.UNPACK.... >34D4 :     
    TV.UINT16.UNPACK.EXIT >34FA :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ABOUT.BUILD..... >7648 :     
    TXT.ALPHA.DOWN...... >3CB8 :     
    TXT.AUTOINS.OFF..... >3B52 :     
    TXT.AUTOINS.ON...... >3B42 :     
    TXT.AUTOINSERT...... >39DA :     
    TXT.BLOCK.CLIP...... >3A58 :     
    TXT.BLOCK.COPY...... >3A22 :     
    TXT.BLOCK.DEL....... >3A0E :     
    TXT.BLOCK.INSIDE.... >3D5E :     
    TXT.BLOCK.MOVE...... >3A34 :     
    TXT.BLOCK.PRINT..... >3A72 :     
    TXT.BLOCK.SAVE...... >3A46 :     
    TXT.BOTTOM.......... >39C8 :     
    TXT.CLEARMEM........ >3A86 :     
    TXT.CMDB.PROMPT..... >3D8C :     
    TXT.COLORSCHEME..... >3D8E :     
    TXT.DELIM........... >39C6 :     
    TXT.DONE.APPEND..... >3AD0 :     
    TXT.DONE.CLIPBOARD.. >3B24 :     
    TXT.DONE.CLIPDEV.... >3B34 :     
    TXT.DONE.COPY....... >3AF2 :     
    TXT.DONE.DELETE..... >3B12 :     
    TXT.DONE.INSERT..... >3ABE :     
    TXT.DONE.LOAD....... >3AAE :     
    TXT.DONE.PRINT...... >3B02 :     
    TXT.DONE.SAVE....... >3AE2 :     
    TXT.FASTMODE........ >3B62 :     
    TXT.FILETYPE.DV80... >3BFC :     
    TXT.FILETYPE.NONE... >3CC6 :     
    TXT.HEAD.ABOUT...... >7576 :     
    TXT.HEAD.APPEND..... >7313 :     
    TXT.HEAD.BASIC...... >7839 :     
    TXT.HEAD.CARTRIDGE.. >778F :     
    TXT.HEAD.CLIPBOARD.. >7381 :     
    TXT.HEAD.CLIPDEV.... >796F :     
    TXT.HEAD.CONFIG..... >7934 :     
    TXT.HEAD.DIR........ >733D :     
    TXT.HEAD.FILE....... >7724 :     
    TXT.HEAD.FONT....... >79FD :     
    TXT.HEAD.GOTO....... >7472 :     
    TXT.HEAD.INSERT..... >7324 :     
    TXT.HEAD.LOAD....... >71F2 :     
    TXT.HEAD.MENU....... >768E :     
    TXT.HEAD.PRINT...... >7424 :     
    TXT.HEAD.PRINT2..... >7434 :     
    TXT.HEAD.RUN........ >722B :     
    TXT.HEAD.SAVE....... >7272 :     
    TXT.HEAD.SAVE2...... >7281 :     
    TXT.HEAD.SHORTCUTS.. >7A74 :     
    TXT.HEAD.UNSAVED.... >74E1 :     
    TXT.HINT.ABOUT...... >75D0 :     
    TXT.HINT.ABOUT2..... >7582 :     
    TXT.HINT.APPEND..... >71B8 :     
    TXT.HINT.APPEND2.... >7201 :     
    TXT.HINT.BASIC...... >78AA :     
    TXT.HINT.BASIC2..... >7861 :     
    TXT.HINT.CARTRIDG2.. >77BA :     
    TXT.HINT.CARTRIDGE.. >77F1 :     
    TXT.HINT.CLIPBOARD.. >73AE :     
    TXT.HINT.CLIPDEV.... >7988 :     
    TXT.HINT.DIR........ >71B8 :     
    TXT.HINT.DIR2....... >734A :     
    TXT.HINT.FILE....... >7773 :     
    TXT.HINT.FILEPICKER. >71B8 :     
    TXT.HINT.FONT....... >7A30 :     
    TXT.HINT.GOTO....... >7481 :     
    TXT.HINT.INSERT..... >71B8 :     
    TXT.HINT.INSERT2.... >7201 :     
    TXT.HINT.LINETERM... >718E :     
    TXT.HINT.LOAD....... >71B8 :     
    TXT.HINT.LOAD2...... >7201 :     
    TXT.HINT.MEMSTAT.... >7174 :     
    TXT.HINT.MENU....... >76E2 :     
    TXT.HINT.PRINT...... >7445 :     
    TXT.HINT.RUN........ >71B8 :     
    TXT.HINT.RUN2....... >7248 :     
    TXT.HINT.SAVE....... >7299 :     
    TXT.HINT.SHORTCUTS.. >7AB6 :     
    TXT.HINT.UNSAVED.... >7518 :     
    TXT.INFO.ABOUT...... >7580 :     
    TXT.INFO.BASIC...... >7847 :     
    TXT.INFO.CARTRIDGE.. >779E :     
    TXT.INFO.CLIPBOARD.. >739D :     
    TXT.INFO.CONFIG..... >7941 :     
    TXT.INFO.FILE....... >772E :     
    TXT.INFO.FONT....... >7A11 :     
    TXT.INFO.MENU....... >769D :     
    TXT.INFO.SHORTCUTS.. >7A83 :     
    TXT.INFO.UNSAVED.... >74F6 :     
    TXT.INSERT.......... >39D4 :     
    TXT.IO.NOFILE....... >3D2A :     
    TXT.IOERR.LOAD...... >3CE2 :     
    TXT.IOERR.PRINT..... >3D0E :     
    TXT.IOERR.SAVE...... >3CF8 :     
    TXT.KB.............. >3BA0 :     
    TXT.KEYMARKER....... >3CBE :     
    TXT.KEYS.ABOUT...... >7620 :     
    TXT.KEYS.APPEND..... >70DE :     
    TXT.KEYS.APPEND2.... >7128 :     
    TXT.KEYS.BASIC...... >78EF :     
    TXT.KEYS.BASIC1..... >3C8A :     
    TXT.KEYS.BASIC2..... >791C :     
    TXT.KEYS.BLOCK...... >3C54 :     
    TXT.KEYS.CARTRIDGE.. >781F :     
    TXT.KEYS.CLIPBOARD.. >73E5 :     
    TXT.KEYS.CLIPBOARD2. >7404 :     
    TXT.KEYS.CLIPDEV.... >79C1 :     
    TXT.KEYS.CONFIG..... >7955 :     
    TXT.KEYS.DEFAULT.... >3C0A :     
    TXT.KEYS.DEFAULT1... >70DE :     
    TXT.KEYS.DEFAULT2... >7128 :     
    TXT.KEYS.DEFAULTB... >3C2A :     
    TXT.KEYS.DIR........ >70DE :     
    TXT.KEYS.DIR2....... >7128 :     
    TXT.KEYS.FILE....... >7775 :     
    TXT.KEYS.FONT....... >7A5A :     
    TXT.KEYS.GOTO....... >74BE :     
    TXT.KEYS.INSERT..... >70DE :     
    TXT.KEYS.INSERT2.... >7128 :     
    TXT.KEYS.LOAD....... >70DE :     
    TXT.KEYS.LOAD2...... >7128 :     
    TXT.KEYS.MENU....... >76E4 :     
    TXT.KEYS.MENU2...... >7704 :     
    TXT.KEYS.PRINT1..... >72A9 :     
    TXT.KEYS.PRINT2..... >72DE :     
    TXT.KEYS.RUN........ >70DE :     
    TXT.KEYS.RUN2....... >7128 :     
    TXT.KEYS.SAVE1...... >72A9 :     
    TXT.KEYS.SAVE2...... >72DE :     
    TXT.KEYS.SHORTCUTS.. >7AB8 :     
    TXT.KEYS.UNSAVED.... >7550 :     
    TXT.LINES........... >3BA4 :     
    TXT.LOADING......... >39E2 :     
    TXT.M1.............. >3C02 :     
    TXT.M2.............. >3C06 :     
    TXT.MEMFULL.LOAD.... >3D42 :     
    TXT.MSG.TIBASIC..... >3CCC :     
    TXT.NEWFILE......... >3BAA :     
    TXT.NODISK.......... >3B6E :     
    TXT.OVRWRITE........ >39CE :     
    TXT.PRINTING........ >39FA :     
    TXT.READDIR......... >3A9A :     
    TXT.SAVING.......... >39EE :     
    TXT.STAR............ >39E0 :     
    TXT.STEVIE.......... >70CC :     
    TXT.TIB1............ >3BB6 :     
    TXT.TIB2............ >3BC4 :     
    TXT.TIB3............ >3BD2 :     
    TXT.TIB4............ >3BE0 :     
    TXT.TIB5............ >3BEE :     
    TXT.UNCRUNCHING..... >3B82 :     
    TXT.VERTLINE........ >3CBC :     
    TXT.WS1............. >3CC0 :     
    TXT.WS2............. >3CC2 :     
    TXT.WS4............. >3CC6 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >09D0 :     
    VDP.PDT.BASE........ >1800 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >0980 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F70 :     
    VEC.10.............. >7F82 :     
    VEC.11.............. >7F84 :     
    VEC.12.............. >7F86 :     
    VEC.13.............. >7F88 :     
    VEC.14.............. >7F8A :     
    VEC.15.............. >7F8C :     
    VEC.16.............. >7F8E :     
    VEC.17.............. >7F90 :     
    VEC.18.............. >7F92 :     
    VEC.19.............. >7F94 :     
    VEC.2............... >7F72 :     
    VEC.20.............. >7F96 :     
    VEC.21.............. >7F98 :     
    VEC.22.............. >7F9A :     
    VEC.23.............. >7F9C :     
    VEC.24.............. >7F9E :     
    VEC.25.............. >7FA0 :     
    VEC.26.............. >7FA2 :     
    VEC.27.............. >7FA4 :     
    VEC.28.............. >7FA6 :     
    VEC.29.............. >7FA8 :     
    VEC.3............... >7F74 :     
    VEC.30.............. >7FAA :     
    VEC.31.............. >7FAC :     
    VEC.32.............. >7FAE :     
    VEC.33.............. >7FB0 :     
    VEC.34.............. >7FB2 :     
    VEC.35.............. >7FB4 :     
    VEC.36.............. >7FB6 :     
    VEC.37.............. >7FB8 :     
    VEC.38.............. >7FBA :     
    VEC.39.............. >7FBC :     
    VEC.4............... >7F76 :     
    VEC.40.............. >7FBE :     
    VEC.41.............. >7FC0 :     
    VEC.42.............. >7FC2 :     
    VEC.43.............. >7FC4 :     
    VEC.44.............. >7FC6 :     
    VEC.45.............. >7FC8 :     
    VEC.46.............. >7FCA :     
    VEC.47.............. >7FCC :     
    VEC.48.............. >7FCE :     
    VEC.49.............. >7FD0 :     
    VEC.5............... >7F78 :     
    VEC.50.............. >7FD2 :     
    VEC.51.............. >7FD4 :     
    VEC.52.............. >7FD6 :     
    VEC.53.............. >7FD8 :     
    VEC.54.............. >7FDA :     
    VEC.55.............. >7FDC :     
    VEC.56.............. >7FDE :     
    VEC.57.............. >7FE0 :     
    VEC.58.............. >7FE2 :     
    VEC.59.............. >7FE4 :     
    VEC.6............... >7F7A :     
    VEC.60.............. >7FE6 :     
    VEC.61.............. >7FE8 :     
    VEC.62.............. >7FEA :     
    VEC.63.............. >7FEC :     
    VEC.64.............. >7FEE :     
    VEC.7............... >7F7C :     
    VEC.8............... >7F7E :     
    VEC.9............... >7F80 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E80 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.LOAD.......... >2E14 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2FA6 :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >309C :     
    XROM.FARJUMP.PUSH_RETURN >30AC :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _FILE.RECORD.FOP.... >2E28 :     
    _FILE.RECORD.FOP.EXIT >2E7A :     
    _FILE.RECORD.FOP.OPTIMIZED >2E5E :     
    _FILE.RECORD.FOP.PAB >2E62 :     
    _IDX.ENTRY.DELETE.REORG >3616 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >361E :     
    _IDX.ENTRY.INSERT.REORG >368A :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3690 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36B8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3276 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >32A4 :     
    _IDX.SAMS.MAPCOLUMN.ON >3242 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >326C :     
    _IDX.SAMSPAGE.GET... >32B0 :     
    _IDX.SAMSPAGE.GET.EXIT >32F6 :     
