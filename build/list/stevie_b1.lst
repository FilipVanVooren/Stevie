XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2022 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 221230-2254070
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037               
0038               
0039               
0040               *--------------------------------------------------------------
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0070      0000     device.f18a               equ  0       ; F18a GPU
0071      0001     device.9938               equ  1       ; 9938 GPU
0072      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0073      0001     skip_vdp_f18a_support     equ  1       ; Turn off f18a GPU check
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F50     bankx.crash.showbank      equ  >7f50   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       copy  "equates.asm"         ; Equates Stevie configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0072               
0073      0017     pane.botrow               equ  23      ; Bottom row on screen
0074               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0092      0012     id.dialog.goto            equ  18      ; "Goto"
0093               ;-----------------------------------------------------------------
0094               ;   Dialog ID's >= 100 indicate that command prompt should be
0095               ;   hidden and no characters added to CMDB keyboard buffer.
0096               ;-----------------------------------------------------------------
0097      0064     id.dialog.menu            equ  100     ; "Main Menu"
0098      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0099      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0100      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0101      0068     id.dialog.help            equ  104     ; "About"
0102      0069     id.dialog.file            equ  105     ; "File"
0103      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0104      006B     id.dialog.basic           equ  107     ; "TI Basic"
0105      006C     id.dialog.config          equ  108     ; "Configure"
0106      006D     id.dialog.editor          equ  109     ; "Configure editor"
0107      006E     id.dialog.shortcuts       equ  110     ; "Shortcuts"
0108               *--------------------------------------------------------------
0109               * Suffix characters for clipboards
0110               *--------------------------------------------------------------
0111      3100     clip1                     equ  >3100   ; '1'
0112      3200     clip2                     equ  >3200   ; '2'
0113      3300     clip3                     equ  >3300   ; '3'
0114      3400     clip4                     equ  >3400   ; '4'
0115      3500     clip5                     equ  >3500   ; '5'
0116               *--------------------------------------------------------------
0117               * Keyboard flags in Stevie
0118               *--------------------------------------------------------------
0119      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0120               
0121               *--------------------------------------------------------------
0122               * File work mode
0123               *--------------------------------------------------------------
0124      0001     id.file.loadfile          equ  1       ; Load file
0125      0002     id.file.insertfile        equ  2       ; Insert file
0126      0003     id.file.appendfile        equ  3       ; Append file
0127      0004     id.file.savefile          equ  4       ; Save file
0128      0005     id.file.saveblock         equ  5       ; Save block to file
0129      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0130      0007     id.file.printfile         equ  7       ; Print file
0131      0008     id.file.printblock        equ  8       ; Print block
0132               *--------------------------------------------------------------
0133               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0134               *--------------------------------------------------------------
0135      A000     core1.top         equ  >a000           ; Structure begin
0136      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0137      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0138      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0139      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0140      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0141      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0142      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0143      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0144      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0145      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0146      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0147      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0148      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0149      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0150      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0151      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0152      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0153      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0154      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0155      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0156      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0157      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0158      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0159      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0160      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0161      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0162      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0163      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0164                                 ;--------------------------------------------
0165                                 ; TI Basic related
0166                                 ;--------------------------------------------
0167      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0168      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0169      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0170      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0171      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0172      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0173      A0C0     tib.automode      equ  core1.top + 192 ; TI-Basic AutoMode (crunch/uncrunch)
0174      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0175      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0176      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0177      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0178      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0179      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0180      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0181      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0182      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0183      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0184      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0185      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0186      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0187      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0188      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0189      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0190      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0191      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0192      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0193      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0194      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0195      A100     core1.free        equ  core1.top + 256 ; End of structure
0196               *--------------------------------------------------------------
0197               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0198               *--------------------------------------------------------------
0199      A100     core2.top         equ  >a100           ; Structure begin
0200      A100     rambuf            equ  core2.top       ; RAM workbuffer
0201      A200     core2.free        equ  core2.top + 256 ; End of structure
0202               *--------------------------------------------------------------
0203               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0204               *--------------------------------------------------------------
0205      A200     tv.top            equ  >a200           ; Structure begin
0206      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0207      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0208      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0209      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0210      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0211      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0212      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0213      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0214      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0215      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0216      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0217      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0218      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0219      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0220      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0221      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0222      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0223      A222     tv.pane.focus     equ  tv.top + 34     ; Identify pane that has focus
0224      A224     tv.task.oneshot   equ  tv.top + 36     ; Pointer to one-shot routine
0225      A226     tv.fj.stackpnt    equ  tv.top + 38     ; Pointer to farjump return stack
0226      A228     tv.error.visible  equ  tv.top + 40     ; Error pane visible
0227      A22A     tv.error.rows     equ  tv.top + 42     ; Number of rows in error pane
0228      A22C     tv.sp2.conf       equ  tv.top + 44     ; Backup of SP2 config register
0229      A22E     tv.sp2.stack      equ  tv.top + 46     ; Backup of SP2 stack register
0230      A230     tv.fg99.img.ptr   equ  tv.top + 48     ; Pointer to Final GROM cartridge to load
0231      A232     tv.error.msg      equ  tv.top + 50     ; Error message (max. 160 characters)
0232      A2D2     tv.free           equ  tv.top + 210    ; End of structure
0233               *--------------------------------------------------------------
0234               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0235               *--------------------------------------------------------------
0236      A300     fb.struct         equ  >a300           ; Structure begin
0237      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0238      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0239      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0240                                                      ; line X in editor buffer).
0241      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0242                                                      ; (offset 0 .. @fb.scrrows)
0243      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0244      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0245      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0246      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0247      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0248      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0249      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0250      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0251      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0252      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0253      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0254      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0255      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0256      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0257      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0258               *--------------------------------------------------------------
0259               * File handle structure               @>a400-a4ff   (256 bytes)
0260               *--------------------------------------------------------------
0261      A400     fh.struct         equ  >a400           ; stevie file handling structures
0262               ;*******************************************************************************
0263               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0264               ;*******************************************************************************
0265      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0266      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0267      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0268      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0269      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0270      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0271      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0272      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0273      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0274      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0275      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0276      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0277      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0278      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0279      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0280      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0281      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0282      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0283      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0284      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0285      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0286      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0287      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0288      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0289      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0290      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0291      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0292      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0293      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0294      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0295      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0296      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0297      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0298      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0299      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0300      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0301      0960     fh.vrecbuf        equ  >0960           ; VDP address record buffer
0302      0A60     fh.vpab           equ  >0a60           ; VDP address PAB
0303               *--------------------------------------------------------------
0304               * File handle structure for generic   @>a400-a4ff   (256 bytes)
0305               * Overload file handle structure
0306               *--------------------------------------------------------------
0307      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0308      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0309               
0310               *--------------------------------------------------------------
0311               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0312               *--------------------------------------------------------------
0313      A500     edb.struct        equ  >a500           ; Begin structure
0314      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0315      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0316      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0317      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0318      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0319      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0320      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0321      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0322      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0323      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0324      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0325                                                      ; with current filename.
0326      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0327                                                      ; with current file type.
0328      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0329      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0330               
0331      A51C     edb.filename      equ  edb.struct + 28 ; 80 characters inline buffer reserved
0332                                                      ; for filename, but not always used.
0333      A56C     edb.free          equ  edb.struct + 108; End of structure
0334               *--------------------------------------------------------------
0335               * Index structure                     @>a600-a6ff   (256 bytes)
0336               *--------------------------------------------------------------
0337      A600     idx.struct        equ  >a600           ; stevie index structure
0338      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0339      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0340      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0341      A606     idx.free          equ  idx.struct + 6  ; End of structure
0342               *--------------------------------------------------------------
0343               * Command buffer structure            @>a700-a7ff   (256 bytes)
0344               *--------------------------------------------------------------
0345      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0346      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0347      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0348      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0349      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0350      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0351      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0352      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0353      A70E     cmdb.vdptop       equ  cmdb.struct + 14; VDP address of CMDB pane header line
0354      A710     cmdb.yxtop        equ  cmdb.struct + 16; YX position of CMDB pane header line
0355      A712     cmdb.yxprompt     equ  cmdb.struct + 18; YX position of command buffer prompt
0356      A714     cmdb.column       equ  cmdb.struct + 20; Current column in command buffer pane
0357      A716     cmdb.length       equ  cmdb.struct + 22; Length of current row in CMDB
0358      A718     cmdb.lines        equ  cmdb.struct + 24; Total lines in CMDB
0359      A71A     cmdb.dirty        equ  cmdb.struct + 26; Command buffer dirty (Text changed!)
0360      A71C     cmdb.dialog       equ  cmdb.struct + 28; Dialog identifier
0361      A71E     cmdb.dialog.var   equ  cmdb.struct + 30; Dialog private variable or pointer
0362      A720     cmdb.panhead      equ  cmdb.struct + 32; Pointer to string pane header
0363      A722     cmdb.paninfo      equ  cmdb.struct + 34; Pointer to string pane info (1st line)
0364      A724     cmdb.panhint      equ  cmdb.struct + 36; Pointer to string pane hint (2nd line)
0365      A726     cmdb.panhint2     equ  cmdb.struct + 38; Pointer to string pane hint (extra)
0366      A728     cmdb.panmarkers   equ  cmdb.struct + 40; Pointer to key marker list  (3rd line)
0367      A72A     cmdb.pankeys      equ  cmdb.struct + 42; Pointer to string pane keys (stat line)
0368      A72C     cmdb.action.ptr   equ  cmdb.struct + 44; Pointer to function to execute
0369      A72E     cmdb.cmdall       equ  cmdb.struct + 46; Current command including length-byte
0370      A72E     cmdb.cmdlen       equ  cmdb.struct + 46; Length of current command (MSB byte!)
0371      A72F     cmdb.cmd          equ  cmdb.struct + 47; Current command (80 bytes max.)
0372      A780     cmdb.panhead.buf  equ  cmdb.struct +128; String buffer for pane header
0373      A7B2     cmdb.dflt.fname   equ  cmdb.struct +178; Default for filename
0374      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0375               *--------------------------------------------------------------
0376               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0377               *--------------------------------------------------------------
0378      A900     sp2.stktop        equ  >a900           ; \
0379                                                      ; | The stack grows from high memory
0380                                                      ; | towards low memory.
0381                                                      ; |
0382                                                      ; | Stack leaking is checked in SP2
0383                                                      ; | user hook "edkey.keyscan.hook"
0384                                                      ; /
0385               *--------------------------------------------------------------
0386               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0387               *--------------------------------------------------------------
0388      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0389                                                      ; / stored in cartridge ROM bank7.asm
0390               
0391      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0392                                                      ; | scratchpad backup/restore routines.
0393                                                      ; /
0394               
0395      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0396               
0397      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0398                                                      ; calling TI Basic/External programs
0399               *--------------------------------------------------------------
0400               * Farjump return stack                @>af00-afff   (256 bytes)
0401               *--------------------------------------------------------------
0402      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0403                                                      ; Grows downwards from high to low.
0404               *--------------------------------------------------------------
0405               * Index                               @>b000-bfff  (4096 bytes)
0406               *--------------------------------------------------------------
0407      B000     idx.top           equ  >b000           ; Top of index
0408      1000     idx.size          equ  4096            ; Index size
0409               *--------------------------------------------------------------
0410               * Editor buffer                       @>c000-cfff  (4096 bytes)
0411               *--------------------------------------------------------------
0412      C000     edb.top           equ  >c000           ; Editor buffer high memory
0413      1000     edb.size          equ  4096            ; Editor buffer size
0414               *--------------------------------------------------------------
0415               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0416               *--------------------------------------------------------------
0417      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0418      0960     fb.size           equ  80*30           ; Frame buffer size
0419      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0420                                                      ; / >d960->dcff
0421               *--------------------------------------------------------------
0422               * Defaults area                       @>de00-dfff  (3584 bytes)
0423               *--------------------------------------------------------------
0424      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0425      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0426               *--------------------------------------------------------------
0427               * Command buffer history              @>e000-efff  (4096 bytes)
0428               *--------------------------------------------------------------
0429      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0430      1000     cmdb.size         equ  4096            ; Command buffer size
0431               *--------------------------------------------------------------
0432               * Heap                                @>f000-ffff  (4096 bytes)
0433               *--------------------------------------------------------------
0434      F000     heap.top          equ  >f000           ; Top of heap
0435               
0436               
0437               *--------------------------------------------------------------
0438               * Stevie specific equates
0439               *--------------------------------------------------------------
0440      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0441      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0442      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0443      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0444      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0445               
0446      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0447      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0448      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0449      0780     vdp.sit.size              equ  (pane.botrow + 1) * 80
0450                                                      ; VDP SIT size 80 columns, 24/30 rows
0451      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0452      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0453      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b1.asm
0028                       copy  "equates.c99.asm"     ; Equates related to classic99 emulator
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0029                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0030               
0031               ***************************************************************
0032               * BANK 1
0033               ********|*****|*********************|**************************
0034      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0035                       aorg  >6000
0036                       save  >6000,>8000           ; Save bank
0037                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option STEVIE RESET.
0017                       ; That option can be used in the case where we jump to TI Basic,
0018                       ; but resume fails afterwards (because of memory being overwritten).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023                       ; Not sure how many people will use the TI Basic sessions to begin with,
0024                       ; so am turning the menu option off. Having a single menu option on a
0025                       ; FG99 cartridge is better because you don't have to go through the
0026                       ; TI Selection screen when loaded (e.g. from ForceCommand).
0027                       ;
0028 6006 601E             data  rom.program2          ; 6  \ Pointer to program list         >6006
0029                                                   ; 7  /
0030               
0031 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0032                                                   ; 9  /
0033               
0034 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0035                                                   ; 11 /
0036               
0037                       ;-----------------------------------------------------------------------
0038                       ; Program list entry
0039                       ;-----------------------------------------------------------------------
0040               rom.program1:
0041 600C 601E             data  rom.program2          ; 12 \ Next program list entry         >600c
0042                                                   ; 13 / (no more items following)
0043               
0044 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0045                                                   ; 15 /
0046               
0047 6010 0C53             stri 'STEVIE RESET'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 5245     
     601A 5345     
     601C 54       
0048               
0049                       ;-----------------------------------------------------------------------
0050                       ; Program list entry
0051                       ;-----------------------------------------------------------------------
0052               rom.program2:
0053 601E 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0054                                                   ; 13 / (no more items following)
0055               
0056 6020 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0057                                                   ; 15 /
0058               
0062 6022 0E53                 stri 'STEVIE 1.3O-24'
     6024 5445     
     6026 5649     
     6028 4520     
     602A 312E     
     602C 334F     
     602E 2D32     
     6030 34       
                   < stevie_b1.asm
0038               
0039               ***************************************************************
0040               * Step 1: Switch to bank 0 (uniform code accross all banks)
0041               ********|*****|*********************|**************************
0042                       aorg  kickstart.code1       ; >6040
0043 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0044               ***************************************************************
0045               * Step 2: Satisfy assembler, must know relocated code
0046               ********|*****|*********************|**************************
0047                       aorg  >2000                 ; Relocate to >2000
0048                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 299C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 299C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26C6     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29A6     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26DC     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26DC     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29A6     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2918     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26DC     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26DC     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26CC     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F50     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 244A 0649  14         dect  stack
0540 244C C64B  30         mov   r11,*stack            ; Save return address
0541 244E 0649  14         dect  stack
0542 2450 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2454 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2456 0649  14         dect  stack
0551 2458 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 245A 0649  14         dect  stack
0553 245C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 245E 0649  14         dect  stack
0555 2460 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2462 06A0  32         bl    @xutst0               ; Display string
     2464 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2466 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2468 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 246A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 246C 06A0  32         bl    @down                 ; Move cursor down
     246E 26CC     
0566               
0567 2470 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2472 0585  14         inc   tmp1                  ; Consider length byte
0569 2474 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2476 2002     
0570 2478 1301  14         jeq   !                     ; Yes, skip adjustment
0571 247A 0585  14         inc   tmp1                  ; Make address even
0572 247C 0606  14 !       dec   tmp2
0573 247E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 2480 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2482 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2484 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2486 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2488 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 248A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 248C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 248E 1604  14         jne   !                     ; No, continue
0028               
0029 2490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2492 FFCE     
0030 2494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2496 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2498 0264  22 !       ori   tmp0,>4000
     249A 4000     
0035 249C 06C4  14         swpb  tmp0
0036 249E D804  30         movb  tmp0,@vdpa
     24A0 8C02     
0037 24A2 06C4  14         swpb  tmp0
0038 24A4 D804  30         movb  tmp0,@vdpa
     24A6 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24A8 020F  20         li    r15,vdpw              ; Set VDP write address
     24AA 8C00     
0043 24AC C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24AE 24B6     
     24B0 8320     
0044 24B2 0460  24         b     @mcloop               ; Write data to VDP and return
     24B4 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24B6 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24B8 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24BA C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24BC C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24BE 06C4  14 xpyv2m  swpb  tmp0
0027 24C0 D804  30         movb  tmp0,@vdpa
     24C2 8C02     
0028 24C4 06C4  14         swpb  tmp0
0029 24C6 D804  30         movb  tmp0,@vdpa
     24C8 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24CA 020F  20         li    r15,vdpr              ; Set VDP read address
     24CC 8800     
0034 24CE C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24D0 24D8     
     24D2 8320     
0035 24D4 0460  24         b     @mcloop               ; Read data from VDP
     24D6 8320     
0036 24D8 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24DA C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24DC C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24DE C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24E0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24E2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24E6 FFCE     
0034 24E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24EA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24EC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24EE 0001     
0039 24F0 1603  14         jne   cpym0                 ; No, continue checking
0040 24F2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24F4 04C6  14         clr   tmp2                  ; Reset counter
0042 24F6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24F8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24FA 7FFF     
0047 24FC C1C4  18         mov   tmp0,tmp3
0048 24FE 0247  22         andi  tmp3,1
     2500 0001     
0049 2502 1618  14         jne   cpyodd                ; Odd source address handling
0050 2504 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2506 0247  22         andi  tmp3,1
     2508 0001     
0052 250A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 250C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     250E 2020     
0057 2510 1605  14         jne   cpym3
0058 2512 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2514 253A     
     2516 8320     
0059 2518 0460  24         b     @mcloop               ; Copy memory and exit
     251A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 251C C1C6  18 cpym3   mov   tmp2,tmp3
0064 251E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2520 0001     
0065 2522 1301  14         jeq   cpym4
0066 2524 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2526 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2528 0646  14         dect  tmp2
0069 252A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 252C C1C7  18         mov   tmp3,tmp3
0074 252E 1301  14         jeq   cpymz
0075 2530 D554  38         movb  *tmp0,*tmp1
0076 2532 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2534 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2536 8000     
0081 2538 10E9  14         jmp   cpym2
0082 253A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 253C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 253E 0649  14         dect  stack
0065 2540 C64B  30         mov   r11,*stack            ; Push return address
0066 2542 0649  14         dect  stack
0067 2544 C640  30         mov   r0,*stack             ; Push r0
0068 2546 0649  14         dect  stack
0069 2548 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 254A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 254C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 254E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     2550 4000     
0077 2552 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2554 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2556 020C  20         li    r12,>1e00             ; SAMS CRU address
     2558 1E00     
0082 255A 04C0  14         clr   r0
0083 255C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 255E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 2560 D100  18         movb  r0,tmp0
0086 2562 0984  32         srl   tmp0,8                ; Right align
0087 2564 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2566 833C     
0088 2568 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 256A C339  30         mov   *stack+,r12           ; Pop r12
0094 256C C039  30         mov   *stack+,r0            ; Pop r0
0095 256E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 2570 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2572 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2574 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2576 0649  14         dect  stack
0135 2578 C64B  30         mov   r11,*stack            ; Push return address
0136 257A 0649  14         dect  stack
0137 257C C640  30         mov   r0,*stack             ; Push r0
0138 257E 0649  14         dect  stack
0139 2580 C64C  30         mov   r12,*stack            ; Push r12
0140 2582 0649  14         dect  stack
0141 2584 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2586 0649  14         dect  stack
0143 2588 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 258A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 258C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 258E 0284  22         ci    tmp0,255              ; Crash if page > 255
     2590 00FF     
0153 2592 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2594 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2596 001E     
0158 2598 150A  14         jgt   !
0159 259A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     259C 0004     
0160 259E 1107  14         jlt   !
0161 25A0 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25A2 0012     
0162 25A4 1508  14         jgt   sams.page.set.switch_page
0163 25A6 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25A8 0006     
0164 25AA 1501  14         jgt   !
0165 25AC 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25AE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25B0 FFCE     
0170 25B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25B4 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0176 25BA C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25BC 06C0  14         swpb  r0                    ; LSB to MSB
0178 25BE 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25C0 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25C2 4000     
0180 25C4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25CA C339  30         mov   *stack+,r12           ; Pop r12
0188 25CC C039  30         mov   *stack+,r0            ; Pop r0
0189 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25D0 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25D2 0649  14         dect  stack
0205 25D4 C64C  30         mov   r12,*stack            ; Push r12
0206 25D6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D8 1E00     
0207 25DA 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25DC C339  30         mov   *stack+,r12           ; Pop r12
0213 25DE 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25E0 0649  14         dect  stack
0231 25E2 C64C  30         mov   r12,*stack            ; Push r12
0232 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0233 25E8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25EA C339  30         mov   *stack+,r12           ; Pop r12
0239 25EC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25EE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25F0 0649  14         dect  stack
0271 25F2 C64B  30         mov   r11,*stack            ; Save return address
0272 25F4 0649  14         dect  stack
0273 25F6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25F8 0649  14         dect  stack
0275 25FA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25FC 020C  20         li    r12,>1e00             ; SAMS CRU address
     25FE 1E00     
0280 2600 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2602 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2604 4004     
0283 2606 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2608 4006     
0284 260A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     260C 4014     
0285 260E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2610 4016     
0286 2612 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2614 4018     
0287 2616 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2618 401A     
0288 261A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     261C 401C     
0289 261E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2620 401E     
0290               
0291 2622 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2624 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2626 C339  30         mov   *stack+,r12           ; Pop r12
0298 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 262A C2F9  30         mov   *stack+,r11           ; Pop r11
0300 262C 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 262E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 2630 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2632 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2634 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2636 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2638 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 263A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 263C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 263E C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 2640 0649  14         dect  stack
0335 2642 C64B  30         mov   r11,*stack            ; Push return address
0336 2644 0649  14         dect  stack
0337 2646 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2648 0649  14         dect  stack
0339 264A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 264C 0649  14         dect  stack
0341 264E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 2650 0649  14         dect  stack
0343 2652 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2654 0205  20         li    tmp1,sams.layout.copy.data
     2656 2676     
0348 2658 0206  20         li    tmp2,8                ; Set loop counter
     265A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 265C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 265E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     2660 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2662 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2664 833C     
0359               
0360 2666 0606  14         dec   tmp2                  ; Next iteration
0361 2668 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 266A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 266C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 266E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 2670 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2672 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2674 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2676 2000             data  >2000                 ; >2000-2fff
0377 2678 3000             data  >3000                 ; >3000-3fff
0378 267A A000             data  >a000                 ; >a000-afff
0379 267C B000             data  >b000                 ; >b000-bfff
0380 267E C000             data  >c000                 ; >c000-cfff
0381 2680 D000             data  >d000                 ; >d000-dfff
0382 2682 E000             data  >e000                 ; >e000-efff
0383 2684 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2686 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2688 FFBF     
0010 268A 0460  28         b     @putv01
     268C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 268E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     2690 0040     
0018 2692 0460  28         b     @putv01
     2694 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2696 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2698 FFDF     
0026 269A 0460  28         b     @putv01
     269C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 269E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26A0 0020     
0034 26A2 0460  28         b     @putv01
     26A4 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26A6 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26A8 FFFE     
0011 26AA 0460  28         b     @putv01
     26AC 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26AE 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26B0 0001     
0019 26B2 0460  28         b     @putv01
     26B4 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26B6 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26B8 FFFD     
0027 26BA 0460  28         b     @putv01
     26BC 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26BE 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26C0 0002     
0035 26C2 0460  28         b     @putv01
     26C4 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26C6 C83B  42 at      mov   *r11+,@wyx
     26C8 832A     
0019 26CA 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26CC B820  46 down    ab    @hb$01,@wyx
     26CE 2012     
     26D0 832A     
0028 26D2 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26D4 7820  46 up      sb    @hb$01,@wyx
     26D6 2012     
     26D8 832A     
0037 26DA 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26DC C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26DE D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26E0 832A     
0051 26E2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26E4 832A     
0052 26E6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26E8 C120  30 yx2px   mov   @wyx,tmp0
     26EA 832A     
0022 26EC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26EE 06C4  14         swpb  tmp0                  ; Y<->X
0024 26F0 04C5  14         clr   tmp1                  ; Clear before copy
0025 26F2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26F4 20A0  32         coc   @wbit1,config         ; f18a present ?
     26F6 201E     
0030 26F8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26FA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26FC 833A     
     26FE 2728     
0032 2700 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2702 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2704 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2706 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2708 0500     
0037 270A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 270E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2710 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2712 D105  18         movb  tmp1,tmp0
0051 2714 06C4  14         swpb  tmp0                  ; X<->Y
0052 2716 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2718 2020     
0053 271A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 271C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     271E 2012     
0059 2720 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2722 2024     
0060 2724 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2726 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2728 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 272A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 272C 06A0  32         bl    @putvr                ; Write once
     272E 2332     
0015 2730 391C             data  >391c                 ; VR1/57, value 00011100
0016 2732 06A0  32         bl    @putvr                ; Write twice
     2734 2332     
0017 2736 391C             data  >391c                 ; VR1/57, value 00011100
0018 2738 06A0  32         bl    @putvr
     273A 2332     
0019 273C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 273E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 2740 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2742 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2744 2332     
0030 2746 3900             data  >3900
0031 2748 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 274A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 274C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     274E 2332     
0044 2750 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2752 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2754 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2756 06A0  32         bl    @cpym2v
     2758 2486     
0060 275A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     275C 279E     
     275E 0008     
0061 2760 06A0  32         bl    @putvr
     2762 2332     
0062 2764 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2766 06A0  32         bl    @putvr
     2768 2332     
0064 276A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 276C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276E 2332     
0068 2770 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2772 0204  20         li    tmp0,>3f00
     2774 3F00     
0073 2776 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2778 22BA     
0074 277A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     277C 8800     
0075 277E 0984  32         srl   tmp0,8
0076 2780 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2782 8800     
0077 2784 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2786 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2788 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     278A BFFF     
0081 278C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 278E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     2790 4000     
0084               
0085               f18chk_exit:
0086 2792 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2794 228E     
0087 2796 3F00             data  >3f00,>00,6
     2798 0000     
     279A 0006     
0088 279C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 279E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27A0 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27A2 0340             data  >0340                 ; 3f04   0340  idle
0096 27A4 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27A6 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27A8 06A0  32         bl    @putvr
     27AA 2332     
0124 27AC 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27AE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27B0 2332     
0127 27B2 3900             data  >3900                 ; Lock the F18a
0128 27B4 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27B6 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27B8 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27BA 201E     
0149 27BC 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27BE C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27C0 8802     
0154 27C2 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27C4 2332     
0155 27C6 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27C8 04C4  14         clr   tmp0
0157 27CA D120  30         movb  @vdps,tmp0
     27CC 8802     
0158 27CE 0984  32         srl   tmp0,8
0159 27D0 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27D2 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27D4 832A     
0018 27D6 D17B  28         movb  *r11+,tmp1
0019 27D8 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27DA D1BB  28         movb  *r11+,tmp2
0021 27DC 0986  32         srl   tmp2,8                ; Repeat count
0022 27DE C1CB  18         mov   r11,tmp3
0023 27E0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27E2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27E4 020B  20         li    r11,hchar1
     27E6 27EC     
0028 27E8 0460  28         b     @xfilv                ; Draw
     27EA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27EC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27EE 2022     
0033 27F0 1302  14         jeq   hchar2                ; Yes, exit
0034 27F2 C2C7  18         mov   tmp3,r11
0035 27F4 10EE  14         jmp   hchar                 ; Next one
0036 27F6 05C7  14 hchar2  inct  tmp3
0037 27F8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27FA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27FC 8334     
0015 27FE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     2800 2006     
0016 2802 0204  20         li    tmp0,muttab
     2804 2814     
0017 2806 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2808 8400     
0018 280A D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 280C D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 280E D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 2810 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2812 045B  20         b     *r11
0023 2814 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2816 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2818 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     281A 8334     
0044 281C C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     281E 8336     
0045 2820 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2822 FFF8     
0046 2824 E0BB  30         soc   *r11+,config          ; Set options
0047 2826 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2828 2012     
     282A 831B     
0048 282C 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 282E 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     2830 2006     
0060 2832 1301  14         jeq   sdpla1                ; Yes, play
0061 2834 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2836 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2838 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     283A 831B     
     283C 2000     
0067 283E 1301  14         jeq   sdpla3                ; Play next note
0068 2840 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2842 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2844 2002     
0070 2846 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2848 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     284A 8336     
0075 284C 06C4  14         swpb  tmp0
0076 284E D804  30         movb  tmp0,@vdpa
     2850 8C02     
0077 2852 06C4  14         swpb  tmp0
0078 2854 D804  30         movb  tmp0,@vdpa
     2856 8C02     
0079 2858 04C4  14         clr   tmp0
0080 285A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     285C 8800     
0081 285E 131E  14         jeq   sdexit                ; Yes. exit
0082 2860 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2862 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2864 8336     
0084 2866 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2868 8800     
     286A 8400     
0085 286C 0604  14         dec   tmp0
0086 286E 16FB  14         jne   vdpla2
0087 2870 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2872 8800     
     2874 831B     
0088 2876 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2878 8336     
0089 287A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 287C C120  30 mmplay  mov   @wsdtmp,tmp0
     287E 8336     
0094 2880 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2882 130C  14         jeq   sdexit                ; Yes, exit
0096 2884 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2886 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2888 8336     
0098 288A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     288C 8400     
0099 288E 0605  14         dec   tmp1
0100 2890 16FC  14         jne   mmpla2
0101 2892 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2894 831B     
0102 2896 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2898 8336     
0103 289A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 289C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     289E 2004     
0108 28A0 1607  14         jne   sdexi2                ; No, exit
0109 28A2 C820  42         mov   @wsdlst,@wsdtmp
     28A4 8334     
     28A6 8336     
0110 28A8 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28AA 2012     
     28AC 831B     
0111 28AE 045B  20 sdexi1  b     *r11                  ; Exit
0112 28B0 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28B2 FFF8     
0113 28B4 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28B6 0649  14         dect  stack
0038 28B8 C64B  30         mov   r11,*stack            ; Push return address
0039 28BA 0649  14         dect  stack
0040 28BC C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28BE 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28C0 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28C2 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28C4 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28C6 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28C8 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28CA 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28CC E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28CE 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28D0 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28D2 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28D4 2912     
     28D6 83C6     
0074 28D8 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28DA 2914     
     28DC 83FA     
0075 28DE C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28E0 2916     
     28E2 83FE     
0076               
0077 28E4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28E6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28E8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28EA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28EC 83E0     
0084               
0085 28EE 06A0  28         bl    @kscan                ; Call KSCAN
     28F0 000E     
0086 28F2 02E0  18         lwpi  ws1                   ; Activate user workspace
     28F4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28F6 D120  30         movb  @>837c,tmp0           ; Get flag
     28F8 837C     
0091 28FA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28FC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28FE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     2900 8375     
0097 2902 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2904 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2906 A028     
0103 2908 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     290A 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 290C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 290E C2F9  30         mov   *stack+,r11           ; Pop r11
0110 2910 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2912 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2914 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2916 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2918 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 291A C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     291C 8340     
0025 291E 04E0  26         clr   @waux1
     2920 833C     
0026 2922 04E0  26         clr   @waux2
     2924 833E     
0027 2926 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2928 833C     
0028 292A C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 292C 0205  20         li    tmp1,4                ; 4 nibbles
     292E 0004     
0033 2930 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2932 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2934 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2936 0286  22         ci    tmp2,>000a
     2938 000A     
0039 293A 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 293C C21B  26         mov   *r11,tmp4
0045 293E 0988  32         srl   tmp4,8                ; Right justify
0046 2940 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2942 FFF6     
0047 2944 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2946 C21B  26         mov   *r11,tmp4
0054 2948 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     294A 00FF     
0055               
0056 294C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 294E 06C6  14         swpb  tmp2
0058 2950 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2952 0944  24         srl   tmp0,4                ; Next nibble
0060 2954 0605  14         dec   tmp1
0061 2956 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2958 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     295A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 295C C160  30         mov   @waux3,tmp1           ; Get pointer
     295E 8340     
0067 2960 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2962 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2964 C120  30         mov   @waux2,tmp0
     2966 833E     
0070 2968 06C4  14         swpb  tmp0
0071 296A DD44  32         movb  tmp0,*tmp1+
0072 296C 06C4  14         swpb  tmp0
0073 296E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2970 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2972 8340     
0078 2974 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2976 2016     
0079 2978 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 297A C120  30         mov   @waux1,tmp0
     297C 833C     
0084 297E 06C4  14         swpb  tmp0
0085 2980 DD44  32         movb  tmp0,*tmp1+
0086 2982 06C4  14         swpb  tmp0
0087 2984 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2986 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2988 2020     
0092 298A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 298C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 298E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2990 7FFF     
0098 2992 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2994 8340     
0099 2996 0460  28         b     @xutst0               ; Display string
     2998 2420     
0100 299A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 299C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     299E 832A     
0122 29A0 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29A2 8000     
0123 29A4 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29A6 0207  20 mknum   li    tmp3,5                ; Digit counter
     29A8 0005     
0020 29AA C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29AC C155  26         mov   *tmp1,tmp1            ; /
0022 29AE C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29B0 0228  22         ai    tmp4,4                ; Get end of buffer
     29B2 0004     
0024 29B4 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29B6 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29B8 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29BA 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29BC 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29BE B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29C0 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29C2 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29C4 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29C6 0607  14         dec   tmp3                  ; Decrease counter
0036 29C8 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29CA 0207  20         li    tmp3,4                ; Check first 4 digits
     29CC 0004     
0041 29CE 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29D0 C11B  26         mov   *r11,tmp0
0043 29D2 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29D4 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29D6 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29D8 05CB  14 mknum3  inct  r11
0047 29DA 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29DC 2020     
0048 29DE 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29E0 045B  20         b     *r11                  ; Exit
0050 29E2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29E4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29E6 13F8  14         jeq   mknum3                ; Yes, exit
0053 29E8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29EA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29EC 7FFF     
0058 29EE C10B  18         mov   r11,tmp0
0059 29F0 0224  22         ai    tmp0,-4
     29F2 FFFC     
0060 29F4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29F6 0206  20         li    tmp2,>0500            ; String length = 5
     29F8 0500     
0062 29FA 0460  28         b     @xutstr               ; Display string
     29FC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29FE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A00 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A02 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A04 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A06 0207  20         li    tmp3,5                ; Set counter
     2A08 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A0A 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A0C 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A0E 0584  14         inc   tmp0                  ; Next character
0106 2A10 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A12 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A14 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A16 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A18 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A1A 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A1C DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A1E 0607  14         dec   tmp3                  ; Last character ?
0122 2A20 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A22 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A24 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A26 832A     
0141 2A28 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A2A 8000     
0142 2A2C 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A2E 0649  14         dect  stack
0023 2A30 C64B  30         mov   r11,*stack            ; Save return address
0024 2A32 0649  14         dect  stack
0025 2A34 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A36 0649  14         dect  stack
0027 2A38 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A3A 0649  14         dect  stack
0029 2A3C C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A3E 0649  14         dect  stack
0031 2A40 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A42 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A44 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A46 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A48 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A4A 0649  14         dect  stack
0044 2A4C C64B  30         mov   r11,*stack            ; Save return address
0045 2A4E 0649  14         dect  stack
0046 2A50 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A52 0649  14         dect  stack
0048 2A54 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A56 0649  14         dect  stack
0050 2A58 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A5A 0649  14         dect  stack
0052 2A5C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A5E C1D4  26 !       mov   *tmp0,tmp3
0057 2A60 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A62 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A64 00FF     
0059 2A66 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A68 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A6A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A6C 0584  14         inc   tmp0                  ; Next byte
0067 2A6E 0607  14         dec   tmp3                  ; Shorten string length
0068 2A70 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A72 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A74 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A76 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A78 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A7A C187  18         mov   tmp3,tmp2
0078 2A7C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A7E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A80 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A82 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A84 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A86 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A88 FFCE     
0090 2A8A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A8C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A8E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A90 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A92 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A94 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A96 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A98 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A9A 0649  14         dect  stack
0124 2A9C C64B  30         mov   r11,*stack            ; Save return address
0125 2A9E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AA0 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AA2 0649  14         dect  stack
0128 2AA4 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AA6 0649  14         dect  stack
0130 2AA8 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AAA 0649  14         dect  stack
0132 2AAC C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AAE C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2AB0 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AB2 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AB4 0649  14         dect  stack
0144 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0145 2AB8 0649  14         dect  stack
0146 2ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ABC 0649  14         dect  stack
0148 2ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2AC0 0649  14         dect  stack
0150 2AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AC4 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AC6 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AC8 0586  14         inc   tmp2
0161 2ACA 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ACC 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ACE 0286  22         ci    tmp2,255
     2AD0 00FF     
0167 2AD2 1505  14         jgt   string.getlenc.panic
0168 2AD4 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AD6 0606  14         dec   tmp2                  ; One time adjustment
0174 2AD8 C806  30         mov   tmp2,@waux1           ; Store length
     2ADA 833C     
0175 2ADC 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2ADE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AE0 FFCE     
0181 2AE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AE4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AE6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AE8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AEC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AEE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AF0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2AF2 F000     
0024 2AF4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AF6 F002     
0025 2AF8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AFA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AFC 0200  20         li    r0,>8306              ; Scratchpad source address
     2AFE 8306     
0030 2B00 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B02 F006     
0031 2B04 0202  20         li    r2,62                 ; Loop counter
     2B06 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B08 CC70  46         mov   *r0+,*r1+
0037 2B0A CC70  46         mov   *r0+,*r1+
0038 2B0C 0642  14         dect  r2
0039 2B0E 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B10 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B12 83FE     
     2B14 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B16 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B18 F000     
0046 2B1A C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B1C F002     
0047 2B1E C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B20 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B22 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B24 0200  20         li    r0,cpu.scrpad.tgt
     2B26 F000     
0075 2B28 0201  20         li    r1,>8300
     2B2A 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B2C CC70  46         mov   *r0+,*r1+
0081 2B2E CC70  46         mov   *r0+,*r1+
0082 2B30 0281  22         ci    r1,>8400
     2B32 8400     
0083 2B34 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B36 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B38 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B3A CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B3C CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B3E CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B40 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B42 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B44 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B46 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B48 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B4A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B4C 8310     
0055                                                   ;        as of register r8
0056 2B4E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B50 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B52 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B5C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B62 0606  14         dec   tmp2
0069 2B64 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B66 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B68 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B6A 2B70     
0075                                                   ; R14=PC
0076 2B6C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B6E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B70 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B72 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B74 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B76 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B78 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B7A 8300     
0126 2B7C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B7E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B80 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B82 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B84 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B86 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B88 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B8A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B8C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B8E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B90 0606  14         dec   tmp2
0139 2B92 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B94 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B96 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B98 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B9A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B9C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B9E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BA0 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BA2 A428     
0064 2BA4 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BA6 201C     
0065 2BA8 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BAA 8356     
0066 2BAC C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BAE 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BB0 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BB2 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BB4 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BB6 06C0  14         swpb  r0                    ;
0075 2BB8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BBA 8C02     
0076 2BBC 06C0  14         swpb  r0                    ;
0077 2BBE D800  30         movb  r0,@vdpa              ; Send high byte
     2BC0 8C02     
0078 2BC2 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BC4 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BC6 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BC8 0704  14         seto  r4                    ; Init counter
0086 2BCA 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BCC A420     
0087 2BCE 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BD0 0584  14         inc   r4                    ; Increment char counter
0089 2BD2 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BD4 0007     
0090 2BD6 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BD8 80C4  18         c     r4,r3                 ; End of name?
0093 2BDA 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BDC 06C0  14         swpb  r0                    ;
0098 2BDE D800  30         movb  r0,@vdpa              ; Send low byte
     2BE0 8C02     
0099 2BE2 06C0  14         swpb  r0                    ;
0100 2BE4 D800  30         movb  r0,@vdpa              ; Send high byte
     2BE6 8C02     
0101 2BE8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BEA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BEC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BEE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BF0 2D0A     
0109 2BF2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BF4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BF6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BF8 04E0  26         clr   @>83d0
     2BFA 83D0     
0118 2BFC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BFE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C00 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C02 A432     
0121               
0122 2C04 0584  14         inc   r4                    ; Adjust for dot
0123 2C06 A804  30         a     r4,@>8356             ; Point to position after name
     2C08 8356     
0124 2C0A C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C0C 8356     
     2C0E A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C10 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C12 83E0     
0130 2C14 04C1  14         clr   r1                    ; Version found of dsr
0131 2C16 020C  20         li    r12,>0f00             ; Init cru address
     2C18 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C1A C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C1C 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C1E 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C20 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C22 0100     
0145 2C24 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C26 83D0     
0146 2C28 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C2A 2000     
0147 2C2C 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C2E C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C30 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C32 1D00  16         sbo   0                     ; Turn on ROM
0154 2C34 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C36 4000     
0155 2C38 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C3A 2D06     
0156 2C3C 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C3E A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C40 A40A     
0166 2C42 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C44 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C46 83D2     
0172                                                   ; subprogram
0173               
0174 2C48 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C4A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C4C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C4E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C50 83D2     
0183                                                   ; subprogram
0184               
0185 2C52 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C54 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C56 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C58 D160  30         movb  @>8355,r5             ; Get length as counter
     2C5A 8355     
0195 2C5C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C5E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C60 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C62 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C64 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C66 A420     
0206 2C68 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C6A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C6C 0605  14         dec   r5                    ; Update loop counter
0211 2C6E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C70 0581  14         inc   r1                    ; Next version found
0217 2C72 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C74 A42A     
0218 2C76 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C78 A42C     
0219 2C7A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C7C A430     
0220               
0221 2C7E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C80 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C82 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C84 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C86 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C88 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C8A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C8C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C8E A400     
0236 2C90 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C92 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C94 A428     
0242                                                   ; (8 or >a)
0243 2C96 0281  26         ci    r1,8                  ; was it 8?
     2C98 0008     
0244 2C9A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C9C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C9E 8350     
0246                                                   ; Get error byte from @>8350
0247 2CA0 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CA2 06C0  22         swpb  r0                    ;
0255 2CA4 D800  34         movb  r0,@vdpa              ; send low byte
     2CA6 8C02     
0256 2CA8 06C0  22         swpb  r0                    ;
0257 2CAA D800  34         movb  r0,@vdpa              ; send high byte
     2CAC 8C02     
0258 2CAE D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CB0 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CB2 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CB4 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CB6 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CB8 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CBA 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CBC A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CBE 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CC0 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CC2 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CC4 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CC6 201C     
0284                                                   ; / to indicate error
0285 2CC8 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CCA A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CCC 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CCE 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CD0 83E0     
0319               
0320 2CD2 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CD4 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CD6 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CD8 A42A     
0325 2CDA C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CDC C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CDE C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CE0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CE2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CE4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CE6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CE8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CEA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CEC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CEE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CF0 4000     
     2CF2 2D06     
0340 2CF4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CF6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CF8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CFA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CFC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CFE A400     
0358 2D00 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D02 A434     
0359               
0360 2D04 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D06 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D08 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D0A 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D0E C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D10 0649  22         dect  stack
0053 2D12 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D14 0204  24         li    tmp0,dsrlnk.savcru
     2D16 A42A     
0058 2D18 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D1A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D1C 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D1E 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D20 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D22 37D7     
0066 2D24 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D26 8370     
0067                                                   ; / location
0068 2D28 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D2A A44C     
0069 2D2C 04C5  22         clr   tmp1                  ; io.op.open
0070 2D2E 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D30 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D32 0649  22         dect  stack
0098 2D34 C64B  38         mov   r11,*stack            ; Save return address
0099 2D36 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D38 0001     
0100 2D3A 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D3C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D3E 0649  22         dect  stack
0126 2D40 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D42 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D44 0002     
0129 2D46 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D48 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D4A 0649  22         dect  stack
0156 2D4C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D4E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D50 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D52 0005     
0160               
0161 2D54 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D56 A43E     
0162               
0163 2D58 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D5A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D5C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D5E 0003     
0168 2D60 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D62 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D64 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D66 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D68 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D6A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D6C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D6E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D70 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D72 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D74 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D76 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D78 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D7A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D7C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D7E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D80 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D82 A44C     
0246               
0247 2D84 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D86 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D88 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D8A 0009     
0254 2D8C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D8E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D90 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D92 8322     
     2D94 833C     
0259               
0260 2D96 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D98 A42A     
0261 2D9A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D9C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D9E 2B9A     
0268 2DA0 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DA2 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DA4 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DA6 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DA8 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DAA C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DAC 833C     
     2DAE 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DB0 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DB2 A436     
0292 2DB4 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DB6 0005     
0293 2DB8 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DBA 22E4     
0294 2DBC C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DBE C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DC4 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DC6 0649  22         dect  stack
0038 2DC8 C64B  38         mov   r11,*stack            ; Save return address
0039 2DCA 0649  22         dect  stack
0040 2DCC C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DCE C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DD0 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DD2 0014     
0046               fg99.send.loop:
0047 2DD4 04E0  34         clr   @>6000                ; Signal new byte
     2DD6 6000     
0048 2DD8 0201  24         li    r1,>0038              ; >7000 >> 9
     2DDA 0038     
0049 2DDC D070  44         movb  *r0+,r1
0050 2DDE 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DE0 04D1  30         clr   *r1                   ; Send byte
0053 2DE2 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DE4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2DE6 04E0  34         clr   @>6000                ; Done sending filename
     2DE8 6000     
0057 2DEA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2DEC 0200  24         li    r0,>6000              ; check >6000->6200
     2DEE 6000     
0063 2DF0 0202  24         li    r2,>100
     2DF2 0100     
0064 2DF4 C070  46 !       mov   *r0+, r1
0065 2DF6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2DF8 0602  22         dec   r2
0067 2DFA 16FC  14         jne   -!
0068 2DFC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2DFE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E00 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E02 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E04 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E06 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E08 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E0A 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E0C 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E0E 201C     
0029 2E10 1602  14         jne   tmgr1a                ; No, so move on
0030 2E12 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E14 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E16 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E18 2020     
0035 2E1A 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E1C 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E1E 2010     
0048 2E20 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E22 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E24 200E     
0050 2E26 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E28 0460  28         b     @kthread              ; Run kernel thread
     2E2A 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E2C 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E2E 2014     
0056 2E30 13EB  14         jeq   tmgr1
0057 2E32 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E34 2012     
0058 2E36 16E8  14         jne   tmgr1
0059 2E38 C120  38         mov   @wtiusr,tmp0
     2E3A 832E     
0060 2E3C 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E3E 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E40 2EA0     
0065 2E42 C10A  30         mov   r10,tmp0
0066 2E44 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E46 00FF     
0067 2E48 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E4A 201C     
0068 2E4C 1303  14         jeq   tmgr5
0069 2E4E 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E50 003C     
0070 2E52 1002  14         jmp   tmgr6
0071 2E54 0284  26 tmgr5   ci    tmp0,50
     2E56 0032     
0072 2E58 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E5A 1001  14         jmp   tmgr8
0074 2E5C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E5E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E60 832C     
0079 2E62 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E64 FF00     
0080 2E66 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E68 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E6A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E6C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E6E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E70 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E72 830C     
     2E74 830D     
0089 2E76 1608  14         jne   tmgr10                ; No, get next slot
0090 2E78 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E7A FF00     
0091 2E7C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E7E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E80 8330     
0096 2E82 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E84 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E86 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E88 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E8A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E8C 8315     
     2E8E 8314     
0103 2E90 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E92 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E94 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E96 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E98 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E9A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E9C FF00     
0109 2E9E 10B4  14         jmp   tmgr1
0110 2EA0 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EA2 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EA4 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EA6 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EA8 2006     
0023 2EAA 1602  14         jne   kthread_kb
0024 2EAC 06A0  36         bl    @sdpla1               ; Run sound player
     2EAE 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2EB0 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2EB2 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2EB4 0460  28         b     @tmgr3                ; Exit
     2EB6 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2EB8 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2EBA 832E     
0018 2EBC E0A0  42         soc   @wbit7,config         ; Enable user hook
     2EBE 2012     
0019 2EC0 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EC2 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EC4 832E     
0029 2EC6 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EC8 FEFF     
0030 2ECA 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2ECC C13B  46 mkslot  mov   *r11+,tmp0
0018 2ECE C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2ED0 C184  30         mov   tmp0,tmp2
0023 2ED2 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2ED4 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2ED6 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2ED8 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EDA 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EDC C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EDE 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EE0 2022     
0035 2EE2 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EE4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EE6 05CB  22 mkslo1  inct  r11
0041 2EE8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EEA C13B  46 clslot  mov   *r11+,tmp0
0053 2EEC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EEE A120  38         a     @wtitab,tmp0          ; Add table base
     2EF0 832C     
0055 2EF2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EF4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EF6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EF8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EFA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2EFC A120  38         a     @wtitab,tmp0          ; Add table base
     2EFE 832C     
0071 2F00 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F02 C154  38         mov   *tmp0,tmp1
0073 2F04 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F06 FF00     
0074 2F08 C505  38         mov   tmp1,*tmp0
0075 2F0A 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 2F0C 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F0E 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 2F10 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F12 0000     
0283 2F14 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F16 8300     
0284 2F18 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F1A 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 2F1C 0202  20 runli2  li    r2,>8308
     2F1E 8308     
0289 2F20 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 2F22 0282  22         ci    r2,>8400
     2F24 8400     
0291 2F26 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 2F28 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F2A FFFF     
0296 2F2C 1602  14         jne   runli4                ; No, continue
0297 2F2E 0420  42         blwp  @0                    ; Yes, bye bye
     2F30 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 2F32 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F34 833C     
0302 2F36 04C1  14         clr   r1                    ; Reset counter
0303 2F38 0202  20         li    r2,10                 ; We test 10 times
     2F3A 000A     
0304 2F3C C0E0  30 runli5  mov   @vdps,r3
     2F3E 8802     
0305 2F40 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F42 2020     
0306 2F44 1302  14         jeq   runli6
0307 2F46 0581  14         inc   r1                    ; Increase counter
0308 2F48 10F9  14         jmp   runli5
0309 2F4A 0602  14 runli6  dec   r2                    ; Next test
0310 2F4C 16F7  14         jne   runli5
0311 2F4E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F50 1250     
0312 2F52 1202  14         jle   runli7                ; No, so it must be NTSC
0313 2F54 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F56 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 2F58 06A0  32 runli7  bl    @loadmc
     2F5A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 2F5C 04C1  14 runli9  clr   r1
0322 2F5E 04C2  14         clr   r2
0323 2F60 04C3  14         clr   r3
0324 2F62 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F64 A900     
0325 2F66 020F  20         li    r15,vdpw              ; Set VDP write address
     2F68 8C00     
0327 2F6A 06A0  32         bl    @mute                 ; Mute sound generators
     2F6C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 2F6E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F70 4A4A     
0334 2F72 1605  14         jne   runlia
0335 2F74 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F76 228E     
0336 2F78 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F7A 0000     
     2F7C 3000     
0341 2F7E 06A0  32 runlia  bl    @filv
     2F80 228E     
0342 2F82 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F84 00F4     
     2F86 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0347               *       <<skipped>>
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 2F88 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2F8A 22F8     
0370 2F8C 37E6             data  spvmod                ; Equate selected video mode table
0371 2F8E 0204  20         li    tmp0,spfont           ; Get font option
     2F90 000C     
0372 2F92 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 2F94 1304  14         jeq   runlid                ; Yes, skip it
0374 2F96 06A0  32         bl    @ldfnt
     2F98 2360     
0375 2F9A 1100             data  fntadr,spfont         ; Load specified font
     2F9C 000C     
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 2F9E 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FA0 4A4A     
0380 2FA2 1602  14         jne   runlie                ; No, continue
0381 2FA4 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FA6 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 2FA8 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FAA 0040     
0386 2FAC 0460  28         b     @main                 ; Give control to main program
     2FAE 6046     
                   < stevie_b1.asm
0049                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2FB0 C13B  30         mov   *r11+,tmp0            ; P0
0022 2FB2 C17B  30         mov   *r11+,tmp1            ; P1
0023 2FB4 C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2FB6 0649  14         dect  stack
0029 2FB8 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FBA 0649  14         dect  stack
0031 2FBC C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FBE 0649  14         dect  stack
0033 2FC0 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FC2 0649  14         dect  stack
0035 2FC4 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Push to farjump return stack
0038                       ;------------------------------------------------------
0039 2FC6 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FC8 6000     
0040 2FCA 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2FCC C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FCE A226     
0044 2FD0 0647  14         dect  tmp3
0045 2FD2 C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2FD4 0647  14         dect  tmp3
0047 2FD6 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2FD8 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2FDA A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2FDC 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2FDE 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2FE0 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2FE2 0224  22         ai    tmp0,>0800
     2FE4 0800     
0066 2FE6 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 2FE8 0285  22         ci    tmp1,>ffff
     2FEA FFFF     
0075 2FEC 1602  14         jne   !
0076 2FEE C160  34         mov   @trmpvector,tmp1
     2FF0 A034     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 2FF2 C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 2FF4 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 2FF6 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 2FF8 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FFA FFCE     
0091 2FFC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FFE 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 3000 0694  24         bl    *tmp0                 ; Call function
0097                       ;------------------------------------------------------
0098                       ; Bankswitch back to source bank
0099                       ;------------------------------------------------------
0100               rom.farjump.return:
0101 3002 C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     3004 A226     
0102 3006 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 3008 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 300A 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 300C C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 300E 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 3010 028B  22         ci    r11,>6000
     3012 6000     
0115 3014 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 3016 028B  22         ci    r11,>7fff
     3018 7FFF     
0117 301A 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 301C C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     301E A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 3020 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 3022 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 3024 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 3026 0225  22         ai    tmp1,>0800
     3028 0800     
0137 302A 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 302C 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 302E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3030 FFCE     
0144 3032 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3034 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 3036 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 3038 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 303A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 303C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 303E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3040 0649  14         dect  stack
0021 3042 C64B  30         mov   r11,*stack            ; Save return address
0022 3044 0649  14         dect  stack
0023 3046 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3048 0649  14         dect  stack
0025 304A C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 304C 0204  20         li    tmp0,fb.top
     304E D000     
0030 3050 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     3052 A300     
0031 3054 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3056 A304     
0032 3058 04E0  34         clr   @fb.row               ; Current row=0
     305A A306     
0033 305C 04E0  34         clr   @fb.column            ; Current column=0
     305E A30C     
0034               
0035 3060 0204  20         li    tmp0,colrow
     3062 0050     
0036 3064 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3066 A30E     
0037 3068 04E0  34         clr   @fb.vwco              ; Set view window column offset
     306A A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 306C C160  34         mov   @tv.ruler.visible,tmp1
     306E A210     
0042 3070 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 3072 0204  20         li    tmp0,pane.botrow-2
     3074 0015     
0044 3076 1002  14         jmp   fb.init.cont
0045 3078 0204  20 !       li    tmp0,pane.botrow-1
     307A 0016     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 307C C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     307E A31C     
0051 3080 C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     3082 A31E     
0052               
0053 3084 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3086 A222     
0054 3088 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     308A A312     
0055 308C 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     308E A318     
0056 3090 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3092 A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 3094 06A0  32         bl    @film
     3096 2236     
0061 3098 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     309A 0000     
     309C 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 309E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 30A0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 30A2 C2F9  30         mov   *stack+,r11           ; Pop r11
0069 30A4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.utils.asm"           ; Framebuffer utilities
     **** ****     > fb.utils.asm
0001               * FILE......: fb.utils.asm
0002               * Purpose...: Stevie Editor - Framebuffer utilities
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 30A6 0649  14         dect  stack
0025 30A8 C64B  30         mov   r11,*stack            ; Save return address
0026 30AA 0649  14         dect  stack
0027 30AC C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30AE C120  34         mov   @parm1,tmp0
     30B0 A006     
0032 30B2 A120  34         a     @fb.topline,tmp0
     30B4 A304     
0033 30B6 C804  38         mov   tmp0,@outparm1
     30B8 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30BC C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30BE 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 30C0 0649  14         dect  stack
0069 30C2 C64B  30         mov   r11,*stack            ; Save return address
0070 30C4 0649  14         dect  stack
0071 30C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0072 30C8 0649  14         dect  stack
0073 30CA C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 30CC C120  34         mov   @fb.row,tmp0
     30CE A306     
0078 30D0 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30D2 A30E     
0079 30D4 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     30D6 A30C     
0080 30D8 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     30DA A300     
0081 30DC C805  38         mov   tmp1,@fb.current
     30DE A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 30E0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 30E2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 30E4 C2F9  30         mov   *stack+,r11           ; Pop r11
0089 30E6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 30E8 0649  14         dect  stack
0052 30EA C64B  30         mov   r11,*stack            ; Save return address
0053 30EC 0649  14         dect  stack
0054 30EE C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 30F0 0204  20         li    tmp0,idx.top
     30F2 B000     
0059 30F4 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     30F6 A502     
0060               
0061 30F8 C120  34         mov   @tv.sams.b000,tmp0
     30FA A206     
0062 30FC C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     30FE A600     
0063 3100 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     3102 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3104 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3106 0004     
0068 3108 C804  38         mov   tmp0,@idx.sams.hipage ; /
     310A A604     
0069               
0070 310C 06A0  32         bl    @_idx.sams.mapcolumn.on
     310E 312A     
0071                                                   ; Index in continuous memory region
0072               
0073 3110 06A0  32         bl    @film
     3112 2236     
0074 3114 B000                   data idx.top,>00,idx.size * 5
     3116 0000     
     3118 5000     
0075                                                   ; Clear index
0076               
0077 311A 06A0  32         bl    @_idx.sams.mapcolumn.off
     311C 315E     
0078                                                   ; Restore memory window layout
0079               
0080 311E C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3120 A602     
     3122 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3124 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3126 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3128 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 312A 0649  14         dect  stack
0102 312C C64B  30         mov   r11,*stack            ; Push return address
0103 312E 0649  14         dect  stack
0104 3130 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3132 0649  14         dect  stack
0106 3134 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3136 0649  14         dect  stack
0108 3138 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 313A C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     313C A602     
0113 313E 0205  20         li    tmp1,idx.top
     3140 B000     
0114 3142 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3144 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3146 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3148 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 314A 0584  14         inc   tmp0                  ; Next SAMS index page
0123 314C 0225  22         ai    tmp1,>1000            ; Next memory region
     314E 1000     
0124 3150 0606  14         dec   tmp2                  ; Update loop counter
0125 3152 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3154 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3156 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3158 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 315A C2F9  30         mov   *stack+,r11           ; Pop return address
0134 315C 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 315E 0649  14         dect  stack
0151 3160 C64B  30         mov   r11,*stack            ; Push return address
0152 3162 0649  14         dect  stack
0153 3164 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3166 0649  14         dect  stack
0155 3168 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 316A 0649  14         dect  stack
0157 316C C646  30         mov   tmp2,*stack           ; Push tmp2
0158 316E 0649  14         dect  stack
0159 3170 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3172 0205  20         li    tmp1,idx.top
     3174 B000     
0164 3176 0206  20         li    tmp2,5                ; Always 5 pages
     3178 0005     
0165 317A 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     317C A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 317E C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3180 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3182 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3184 0225  22         ai    tmp1,>1000            ; Next memory region
     3186 1000     
0176 3188 0606  14         dec   tmp2                  ; Update loop counter
0177 318A 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 318C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 318E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 3190 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 3192 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 3194 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 3196 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3198 0649  14         dect  stack
0212 319A C64B  30         mov   r11,*stack            ; Save return address
0213 319C 0649  14         dect  stack
0214 319E C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31A0 0649  14         dect  stack
0216 31A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 31A4 0649  14         dect  stack
0218 31A6 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 31A8 C184  18         mov   tmp0,tmp2             ; Line number
0223 31AA 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 31AC 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     31AE 0800     
0225               
0226 31B0 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 31B2 0A16  18         sla   tmp2,1                ; line number * 2
0231 31B4 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     31B6 A018     
0232               
0233 31B8 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31BA A602     
0234 31BC 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31BE A600     
0235               
0236 31C0 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 31C2 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31C4 A600     
0242 31C6 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31C8 A206     
0243 31CA C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31CC 0205  20         li    tmp1,>b000            ; Memory window for index page
     31CE B000     
0246               
0247 31D0 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31D2 2576     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 31D4 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     31D6 A604     
0254 31D8 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 31DA C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     31DC A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 31DE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 31E0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 31E2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 31E4 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 31E6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 31E8 0649  14         dect  stack
0023 31EA C64B  30         mov   r11,*stack            ; Save return address
0024 31EC 0649  14         dect  stack
0025 31EE C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 31F0 0204  20         li    tmp0,edb.top          ; \
     31F2 C000     
0030 31F4 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     31F6 A500     
0031 31F8 C804  38         mov   tmp0,@edb.next_free.ptr
     31FA A508     
0032                                                   ; Set pointer to next free line
0033               
0034 31FC 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     31FE A50A     
0035               
0036 3200 0204  20         li    tmp0,1
     3202 0001     
0037 3204 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3206 A504     
0038               
0039 3208 0720  34         seto  @edb.block.m1         ; Reset block start line
     320A A50E     
0040 320C 0720  34         seto  @edb.block.m2         ; Reset block end line
     320E A510     
0041               
0042 3210 0204  20         li    tmp0,txt.newfile      ; "New file"
     3212 3A48     
0043 3214 C804  38         mov   tmp0,@edb.filename.ptr
     3216 A514     
0044               
0045 3218 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     321A A440     
0046 321C 04E0  34         clr   @fh.kilobytes.prev    ; /
     321E A45C     
0047               
0048 3220 0204  20         li    tmp0,txt.filetype.none
     3222 3BBC     
0049 3224 C804  38         mov   tmp0,@edb.filetype.ptr
     3226 A516     
0050               
0051               
0052               edb.init.exit:
0053                       ;------------------------------------------------------
0054                       ; Exit
0055                       ;------------------------------------------------------
0056 3228 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 322A C2F9  30         mov   *stack+,r11           ; Pop r11
0058 322C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 322E 0649  14         dect  stack
0023 3230 C64B  30         mov   r11,*stack            ; Save return address
0024 3232 0649  14         dect  stack
0025 3234 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3236 0649  14         dect  stack
0027 3238 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 323A 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     323C E000     
0032 323E C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3240 A700     
0033               
0034 3242 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3244 A702     
0035 3246 0204  20         li    tmp0,6
     3248 0006     
0036 324A C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     324C A706     
0037 324E C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3250 A708     
0038               
0039 3252 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3254 A718     
0040 3256 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3258 A71A     
0041 325A 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     325C A72C     
0042 325E 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     3260 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row
0045                       ;------------------------------------------------------
0046 3262 0204  20         li    tmp0,pane.botrow      ; \
     3264 0017     
0047 3266 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3268 A706     
0048 326A 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     326C 833A     
0049 326E C105  18         mov   tmp1,tmp0             ; | Get result
0050 3270 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3272 1800     
0051 3274 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3276 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 3278 06A0  32         bl    @film
     327A 2236     
0056 327C E000                   data  cmdb.top,>00,cmdb.size
     327E 0000     
     3280 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3282 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3284 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 3286 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 3288 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 328A 0649  14         dect  stack
0023 328C C64B  30         mov   r11,*stack            ; Save return address
0024 328E 0649  14         dect  stack
0025 3290 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3292 0649  14         dect  stack
0027 3294 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3296 0649  14         dect  stack
0029 3298 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 329A 04E0  34         clr   @tv.error.visible     ; Set to hidden
     329C A228     
0034 329E 0204  20         li    tmp0,3
     32A0 0003     
0035 32A2 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     32A4 A22A     
0036               
0037 32A6 06A0  32         bl    @film
     32A8 2236     
0038 32AA A232                   data tv.error.msg,0,160
     32AC 0000     
     32AE 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 32B0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 32B2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 32B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 32B6 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 32B8 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0014                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 32BA 0649  14         dect  stack
0023 32BC C64B  30         mov   r11,*stack            ; Save return address
0024 32BE 0649  14         dect  stack
0025 32C0 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32C2 0649  14         dect  stack
0027 32C4 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32C6 0649  14         dect  stack
0029 32C8 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32CA 0204  20         li    tmp0,1                ; \ Set default color scheme
     32CC 0001     
0034 32CE C804  38         mov   tmp0,@tv.colorscheme  ; /
     32D0 A212     
0035               
0036 32D2 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     32D4 A224     
0037 32D6 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     32D8 200C     
0038               
0039 32DA 0204  20         li    tmp0,fj.bottom
     32DC B000     
0040 32DE C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     32E0 A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 32E2 06A0  32         bl    @cpym2m
     32E4 24DA     
0045 32E6 3C94                   data def.printer.fname,tv.printer.fname,7
     32E8 DE00     
     32EA 0007     
0046               
0047 32EC 06A0  32         bl    @cpym2m
     32EE 24DA     
0048 32F0 3C9B                   data def.clip.fname,tv.clip.fname,10
     32F2 DE50     
     32F4 000A     
0049               
0050 32F6 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     32F8 A50C     
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               tv.init.exit:
0055 32FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 32FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 32FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 3300 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 3302 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3304 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3306 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3308 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     330A 2FB0     
0028 330C 600E                   data bank7.rom        ; | i  p0 = bank address
0029 330E 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3310 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0016                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 3312 0649  14         dect  stack
0024 3314 C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 3316 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     3318 322E     
0029 331A 06A0  32         bl    @edb.init             ; Initialize editor buffer
     331C 31E8     
0030 331E 06A0  32         bl    @idx.init             ; Initialize index
     3320 30E8     
0031 3322 06A0  32         bl    @fb.init              ; Initialize framebuffer
     3324 3040     
0032 3326 06A0  32         bl    @errpane.init         ; Initialize error pane
     3328 328A     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 332A 06A0  32         bl    @hchar
     332C 27D2     
0037 332E 0034                   byte 0,52,32,18       ; Remove markers
     3330 2012     
0038 3332 1700                   byte pane.botrow,0,32,51
     3334 2033     
0039 3336 FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 3338 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 333A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 333C 0649  14         dect  stack
0025 333E C64B  30         mov   r11,*stack            ; Push return address
0026 3340 0649  14         dect  stack
0027 3342 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3344 0649  14         dect  stack
0029 3346 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3348 0649  14         dect  stack
0031 334A C646  30         mov   tmp2,*stack           ; Push tmp2
0032 334C 0649  14         dect  stack
0033 334E C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3350 0649  14         dect  stack
0035 3352 C640  30         mov   r0,*stack             ; Push r0
0036 3354 0649  14         dect  stack
0037 3356 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3358 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     335A A006     
0042 335C 04C5  14         clr   tmp1                  ; Termination character >00
0043 335E 04E0  34         clr   @outparm1             ; Reset output parameters
     3360 A018     
0044 3362 04E0  34         clr   @outparm2             ; Reset output parameters
     3364 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3366 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3368 2AB4     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 336A C1A0  30         mov   @waux1,tmp2           ; Get string length
     336C 833C     
0056 336E 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3370 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3372 0005     
0058 3374 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3376 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3378 A006     
0063               
0064 337A A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 337C 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     337E FFF6     
0066 3380 0746  18         abs   tmp2                  ; /
0067               
0068 3382 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 3384 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3386 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3388 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 338A 0285  22         ci    tmp1,32               ; Blank ?
     338C 0020     
0080 338E 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3390 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3392 FFD0     
0085 3394 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3396 0285  22         ci    tmp1,9
     3398 0009     
0087 339A 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 339C C026  34         mov   @tv.uint16.mpy(tmp2),r0
     339E 33CA     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 33A0 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 33A2 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 33A4 05C6  14         inct  tmp2                  ; Update loop counter
0102 33A6 0286  22         ci    tmp2,8                ; Last digit done?
     33A8 0008     
0103 33AA 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 33AC 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 33AE 04E0  34         clr   @outparm1             ; Empty uint16
     33B0 A018     
0110 33B2 0720  34         seto  @outparm2             ; Invalid input string
     33B4 A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 33B6 C807  38         mov   tmp3,@outparm1
     33B8 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 33BA C079  30         mov   *stack+,r1            ; Pop r1
0121 33BC C039  30         mov   *stack+,r0            ; Pop r0
0122 33BE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 33C0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 33C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 33C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 33C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 33C8 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 33CA 2710             data  10000,1000,100,10,1
     33CC 03E8     
     33CE 0064     
     33D0 000A     
     33D2 0001     
0133               
                   < ram.resident.asm
0018                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 33D4 0649  14         dect  stack
0022 33D6 C64B  30         mov   r11,*stack            ; Save return address
0023 33D8 0649  14         dect  stack
0024 33DA C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 33DC 06A0  32         bl    @mknum                ; Convert unsigned number to string
     33DE 29A6     
0029 33E0 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 33E2 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 33E4 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 33E5   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 33E6 0204  20         li    tmp0,uint16.unpacked
     33E8 A02C     
0035 33EA 04F4  30         clr   *tmp0+                ; Clear string 01
0036 33EC 04F4  30         clr   *tmp0+                ; Clear string 23
0037 33EE 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 33F0 06A0  32         bl    @trimnum              ; Trim unsigned number string
     33F2 29FE     
0040 33F4 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 33F6 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 33F8 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 33FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 33FC C2F9  30         mov   *stack+,r11           ; Pop r11
0049 33FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 3400 0649  14         dect  stack
0025 3402 C64B  30         mov   r11,*stack            ; Push return address
0026 3404 0649  14         dect  stack
0027 3406 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3408 0649  14         dect  stack
0029 340A C645  30         mov   tmp1,*stack           ; Push tmp1
0030 340C 0649  14         dect  stack
0031 340E C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3410 0649  14         dect  stack
0033 3412 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3414 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3416 A006     
0038 3418 D194  26         movb  *tmp0,tmp2            ; /
0039 341A 0986  32         srl   tmp2,8                ; Right align
0040 341C C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 341E 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3420 A008     
0043 3422 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3424 C120  34         mov   @parm1,tmp0           ; Get source address
     3426 A006     
0048 3428 C160  34         mov   @parm4,tmp1           ; Get destination address
     342A A00C     
0049 342C 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 342E 0649  14         dect  stack
0052 3430 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3432 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3434 24E0     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3436 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3438 C120  34         mov   @parm2,tmp0           ; Get requested length
     343A A008     
0064 343C 0A84  32         sla   tmp0,8                ; Left align
0065 343E C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3440 A00C     
0066 3442 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3444 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3446 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3448 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     344A A008     
0073 344C 6187  18         s     tmp3,tmp2             ; |
0074 344E 0586  14         inc   tmp2                  ; /
0075               
0076 3450 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3452 A00A     
0077 3454 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3456 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3458 0606  14         dec   tmp2                  ; Update loop counter
0084 345A 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 345C C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     345E A00C     
     3460 A018     
0087 3462 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3464 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3466 FFCE     
0093 3468 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     346A 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 346C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 346E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 3470 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 3472 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 3474 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 3476 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0020                       ;-----------------------------------------------------------------------
0021                       ; Logic for Index management
0022                       ;-----------------------------------------------------------------------
0023                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 3478 0649  14         dect  stack
0023 347A C64B  30         mov   r11,*stack            ; Save return address
0024 347C 0649  14         dect  stack
0025 347E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3480 0649  14         dect  stack
0027 3482 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 3484 C120  34         mov   @parm1,tmp0           ; Get line number
     3486 A006     
0032 3488 C160  34         mov   @parm2,tmp1           ; Get pointer
     348A A008     
0033 348C 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 348E 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3490 0FFF     
0039 3492 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 3494 06E0  34         swpb  @parm3
     3496 A00A     
0044 3498 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     349A A00A     
0045 349C 06E0  34         swpb  @parm3                ; \ Restore original order again,
     349E A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 34A0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34A2 3198     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 34A4 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     34A6 A018     
0056 34A8 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     34AA B000     
0057 34AC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34AE A018     
0058 34B0 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 34B2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34B4 3198     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 34B6 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     34B8 A018     
0068 34BA 04E4  34         clr   @idx.top(tmp0)        ; /
     34BC B000     
0069 34BE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34C0 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 34C2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 34C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 34C6 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 34C8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 34CA 0649  14         dect  stack
0022 34CC C64B  30         mov   r11,*stack            ; Save return address
0023 34CE 0649  14         dect  stack
0024 34D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 34D2 0649  14         dect  stack
0026 34D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 34D6 0649  14         dect  stack
0028 34D8 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 34DA C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     34DC A006     
0033               
0034 34DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     34E0 3198     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 34E2 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     34E4 A018     
0039 34E6 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     34E8 B000     
0040               
0041 34EA 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 34EC C185  18         mov   tmp1,tmp2             ; \
0047 34EE 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 34F0 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     34F2 00FF     
0052 34F4 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 34F6 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     34F8 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 34FA C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     34FC A018     
0059 34FE C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3500 A01A     
0060 3502 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3504 04E0  34         clr   @outparm1
     3506 A018     
0066 3508 04E0  34         clr   @outparm2
     350A A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 350C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 350E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3510 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3512 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3514 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3516 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3518 B000     
0018 351A C144  18         mov   tmp0,tmp1             ; a = current slot
0019 351C 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 351E CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3520 0606  14         dec   tmp2                  ; tmp2--
0026 3522 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3524 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3526 0649  14         dect  stack
0047 3528 C64B  30         mov   r11,*stack            ; Save return address
0048 352A 0649  14         dect  stack
0049 352C C644  30         mov   tmp0,*stack           ; Push tmp0
0050 352E 0649  14         dect  stack
0051 3530 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3532 0649  14         dect  stack
0053 3534 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3536 0649  14         dect  stack
0055 3538 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 353A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     353C A006     
0060               
0061 353E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3540 3198     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3542 C120  34         mov   @outparm1,tmp0        ; Index offset
     3544 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3546 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3548 A008     
0070 354A 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 354C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     354E A006     
0074 3550 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3552 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3554 B000     
0081 3556 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3558 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 355A C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     355C A008     
0088 355E 0287  22         ci    tmp3,2048
     3560 0800     
0089 3562 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3564 06A0  32         bl    @_idx.sams.mapcolumn.on
     3566 312A     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3568 C120  34         mov   @parm1,tmp0           ; Restore line number
     356A A006     
0103 356C 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 356E 06A0  32         bl    @_idx.entry.delete.reorg
     3570 3516     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3572 06A0  32         bl    @_idx.sams.mapcolumn.off
     3574 315E     
0111                                                   ; Restore memory window layout
0112               
0113 3576 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 3578 06A0  32         bl    @_idx.entry.delete.reorg
     357A 3516     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 357C 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 357E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3580 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3582 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 3584 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3586 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3588 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 358A 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     358C 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 358E 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3590 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3592 FFCE     
0027 3594 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3596 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3598 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     359A B000     
0032 359C C144  18         mov   tmp0,tmp1             ; a = current slot
0033 359E 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 35A0 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 35A2 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 35A4 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 35A6 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 35A8 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 35AA 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     35AC AFFC     
0043 35AE 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 35B0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35B2 FFCE     
0049 35B4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35B6 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 35B8 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 35BA 0644  14         dect  tmp0                  ; Move pointer up
0056 35BC 0645  14         dect  tmp1                  ; Move pointer up
0057 35BE 0606  14         dec   tmp2                  ; Next index entry
0058 35C0 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 35C2 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 35C4 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 35C6 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 35C8 0649  14         dect  stack
0089 35CA C64B  30         mov   r11,*stack            ; Save return address
0090 35CC 0649  14         dect  stack
0091 35CE C644  30         mov   tmp0,*stack           ; Push tmp0
0092 35D0 0649  14         dect  stack
0093 35D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 35D4 0649  14         dect  stack
0095 35D6 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 35D8 0649  14         dect  stack
0097 35DA C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 35DC C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     35DE A008     
0102 35E0 61A0  34         s     @parm1,tmp2           ; Calculate loop
     35E2 A006     
0103 35E4 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 35E6 C1E0  34         mov   @parm2,tmp3
     35E8 A008     
0110 35EA 0287  22         ci    tmp3,2048
     35EC 0800     
0111 35EE 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 35F0 06A0  32         bl    @_idx.sams.mapcolumn.on
     35F2 312A     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 35F4 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     35F6 A008     
0123 35F8 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 35FA 06A0  32         bl    @_idx.entry.insert.reorg
     35FC 358A     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 35FE 06A0  32         bl    @_idx.sams.mapcolumn.off
     3600 315E     
0131                                                   ; Restore memory window layout
0132               
0133 3602 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3604 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3606 A008     
0139               
0140 3608 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     360A 3198     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 360C C120  34         mov   @outparm1,tmp0        ; Index offset
     360E A018     
0145               
0146 3610 06A0  32         bl    @_idx.entry.insert.reorg
     3612 358A     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3614 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3616 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3618 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 361A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 361C C2F9  30         mov   *stack+,r11           ; Pop r11
0160 361E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Logic for editor buffer
0029                       ;-----------------------------------------------------------------------
0030                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3620 0649  14         dect  stack
0022 3622 C64B  30         mov   r11,*stack            ; Push return address
0023 3624 0649  14         dect  stack
0024 3626 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3628 0649  14         dect  stack
0026 362A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 362C 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     362E A504     
0031 3630 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3632 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3634 FFCE     
0037 3636 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3638 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 363A C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     363C A006     
0043               
0044 363E 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3640 34CA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3642 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3644 A01A     
0050 3646 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3648 A018     
0051 364A 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 364C 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     364E A208     
0057 3650 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3652 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3654 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3656 C820  54         mov   @outparm2,@tv.sams.c000
     3658 A01A     
     365A A208     
0066                                                   ; Set page in shadow registers
0067               
0068 365C C820  54         mov   @outparm2,@edb.sams.page
     365E A01A     
     3660 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3662 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3664 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3666 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3668 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 366A 0649  14         dect  stack
0022 366C C64B  30         mov   r11,*stack            ; Push return address
0023 366E 0649  14         dect  stack
0024 3670 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3672 0649  14         dect  stack
0026 3674 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3676 04E0  34         clr   @outparm1             ; Reset length
     3678 A018     
0031 367A 04E0  34         clr   @outparm2             ; Reset SAMS bank
     367C A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 367E C120  34         mov   @parm1,tmp0           ; \
     3680 A006     
0036 3682 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 3684 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3686 A504     
0039 3688 1101  14         jlt   !                     ; No, continue processing
0040 368A 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 368C C120  34 !       mov   @parm1,tmp0           ; Get line
     368E A006     
0046               
0047 3690 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3692 3620     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 3694 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3696 A018     
0053 3698 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 369A C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 369C C805  38         mov   tmp1,@outparm1        ; Save length
     369E A018     
0060 36A0 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 36A2 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     36A4 A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 36A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 36A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 36AA C2F9  30         mov   *stack+,r11           ; Pop r11
0073 36AC 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 36AE 0649  14         dect  stack
0094 36B0 C64B  30         mov   r11,*stack            ; Save return address
0095 36B2 0649  14         dect  stack
0096 36B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 36B6 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     36B8 A304     
0101 36BA A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     36BC A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 36BE C804  38         mov   tmp0,@parm1
     36C0 A006     
0106 36C2 06A0  32         bl    @edb.line.getlength
     36C4 366A     
0107 36C6 C820  54         mov   @outparm1,@fb.row.length
     36C8 A018     
     36CA A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 36CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 36CE C2F9  30         mov   *stack+,r11           ; Pop R11
0115 36D0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 36D2 0649  14         dect  stack
0021 36D4 C64B  30         mov   r11,*stack            ; Save return address
0022 36D6 0649  14         dect  stack
0023 36D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 36DA 0649  14         dect  stack
0025 36DC C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 36DE C120  34         mov   @edb.next_free.ptr,tmp0
     36E0 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 36E2 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     36E4 0FFF     
0035 36E6 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     36E8 0052     
0036 36EA 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     36EC 0FF0     
0037 36EE 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 36F0 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     36F2 A51A     
0043 36F4 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     36F6 A500     
     36F8 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 36FA C120  34         mov   @edb.sams.hipage,tmp0
     36FC A51A     
0050 36FE C160  34         mov   @edb.top.ptr,tmp1
     3700 A500     
0051 3702 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3704 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3706 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3708 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     370A FFCE     
0061 370C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     370E 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3710 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3712 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3714 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3716 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0033                       ;-----------------------------------------------------------------------
0034                       ; Utility functions
0035                       ;-----------------------------------------------------------------------
0036                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3718 0649  14         dect  stack
0022 371A C64B  30         mov   r11,*stack            ; Push return address
0023 371C 0649  14         dect  stack
0024 371E C660  42         mov   @wyx,*stack           ; Push cursor position
     3720 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3722 06A0  32         bl    @hchar
     3724 27D2     
0029 3726 0034                   byte 0,52,32,18
     3728 2012     
0030 372A FFFF                   data EOL              ; Clear message
0031               
0032 372C 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     372E A224     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3730 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3732 832A     
0038 3734 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3736 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0037                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 3738 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     373A 27A6     
0028               
0029 373C 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     373E 22F8     
0030 3740 37F0                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 3742 06A0  32         bl    @scroff               ; Turn off screen
     3744 2686     
0033                       ;-------------------------------------------------------
0034                       ; Load FG99 cartridge, but do not start cartridge yet
0035                       ;-------------------------------------------------------
0036 3746 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3748 A230     
0037 374A 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     374C 2DC6     
0038                                                   ; \ i tmp0 = Pointer to cartridge image
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Turn SAMS mapper off and exit to monitor
0042                       ;-------------------------------------------------------
0043                       ;li    r12,>1e00             ; SAMS CRU address
0044                       ;sbz   1                     ; Disable SAMS mapper
0045                                                   ; \ We keep the mapper off while
0046                                                   ; | running TI Basic or other external
0047                                                   ; / programs.
0048               
0049 374E 0420  42         blwp @0                     ; Return to monitor
     3750 0000     
                   < ram.resident.asm
0038                       ;-----------------------------------------------------------------------
0039                       ; Background tasks
0040                       ;-----------------------------------------------------------------------
0045                       copy  "task.vdp.cursor.char.asm"    ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.char.asm
0001               * FILE......: task.vdp.cursor.char.asm
0002               * Purpose...: VDP cursor shape (character version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 3752 0649  14         dect  stack
0009 3754 C64B  30         mov   r11,*stack            ; Save return address
0010 3756 0649  14         dect  stack
0011 3758 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 375A 0649  14         dect  stack
0013 375C C645  30         mov   tmp1,*stack           ; Push tmp1
0014 375E 0649  14         dect  stack
0015 3760 C646  30         mov   tmp2,*stack           ; Push tmp2
0016 3762 0649  14         dect  stack
0017 3764 C660  42         mov   @wyx,*stack           ; Push cursor position
     3766 832A     
0018                       ;------------------------------------------------------
0019                       ; Get pane with focus
0020                       ;------------------------------------------------------
0021 3768 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     376A A222     
0022               
0023 376C 0284  22         ci    tmp0,pane.focus.fb
     376E 0000     
0024 3770 1310  14         jeq   task.vdp.cursor.fb    ; Frame buffer has focus
0025               
0026 3772 0284  22         ci    tmp0,pane.focus.cmdb
     3774 0001     
0027 3776 1304  14         jeq   task.vdp.cursor.cmdb  ; CMDB buffer has focus
0028                       ;------------------------------------------------------
0029                       ; Assert failed. Invalid value
0030                       ;------------------------------------------------------
0031 3778 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     377A FFCE     
0032 377C 06A0  32         bl    @cpu.crash            ; / Halt system.
     377E 2026     
0033                       ;------------------------------------------------------
0034                       ; CMDB buffer has focus, position CMDB cursor
0035                       ;------------------------------------------------------
0036               task.vdp.cursor.cmdb:
0037 3780 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3782 A70A     
     3784 832A     
0038 3786 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     3788 A314     
0039 378A 1319  14         jeq   task.vdp.cursor.dump  ; Show CMDB cursor
0040                       ;------------------------------------------------------
0041                       ; Hide CMDB cursor
0042                       ;------------------------------------------------------
0043               task.vdp.cursor.cmdb.hide:
0044 378C 0720  34         seto  @cmdb.dirty
     378E A71A     
0045 3790 101C  14         jmp   task.vdp.cursor.exit
0046                       ;------------------------------------------------------
0047                       ; Frame buffer has focus, position FB cursor
0048                       ;------------------------------------------------------
0049               task.vdp.cursor.fb:
0050 3792 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     3794 A314     
0051 3796 1303  14         jeq   task.vdp.cursor.fb.visible
0052                                                   ; Show FB cursor
0053                       ;------------------------------------------------------
0054                       ; Hide FB cursor
0055                       ;------------------------------------------------------
0056 3798 0720  34         seto  @fb.dirty             ; Trigger refresh
     379A A318     
0057 379C 1016  14         jmp   task.vdp.cursor.exit
0058                       ;------------------------------------------------------
0059                       ; Show FB cursor
0060                       ;------------------------------------------------------
0061               task.vdp.cursor.fb.visible:
0062 379E C120  34         mov   @tv.ruler.visible,tmp0
     37A0 A210     
0063 37A2 1307  14         jeq   task.vdp.cursor.fb.visible.noruler
0064                       ;------------------------------------------------------
0065                       ; Cursor position adjustment, ruler visible
0066                       ;------------------------------------------------------
0067 37A4 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37A6 832A     
0068 37A8 0224  22         ai    tmp0,>0200            ; Topline + ruler adjustment
     37AA 0200     
0069 37AC C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37AE 832A     
0070 37B0 1006  14         jmp   task.vdp.cursor.dump
0071                       ;------------------------------------------------------
0072                       ; Cursor position adjustment, ruler hidden
0073                       ;------------------------------------------------------
0074               task.vdp.cursor.fb.visible.noruler:
0075 37B2 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37B4 832A     
0076 37B6 0224  22         ai    tmp0,>0100            ; Topline adjustment
     37B8 0100     
0077 37BA C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37BC 832A     
0078                       ;------------------------------------------------------
0079                       ; Dump cursor to VDP
0080                       ;------------------------------------------------------
0081               task.vdp.cursor.dump:
0082 37BE 06A0  32         bl    @yx2pnt               ; Calculate VDP address from @WYX
     37C0 23FA     
0083                                                   ; \ i  @wyx = Cursor position
0084                                                   ; / o  tmp0 = VDP address
0085               
0086 37C2 0205  20         li    tmp1,26               ; Cursor character
     37C4 001A     
0087               
0088 37C6 06A0  32         bl    @xvputb               ; VDP put single byte
     37C8 22CC     
0089                                                   ; \ i  tmp0 = VDP write address
0090                                                   ; / i  tmp1 = Byte to write
0091                       ;------------------------------------------------------
0092                       ; Exit
0093                       ;------------------------------------------------------
0094               task.vdp.cursor.exit:
0095 37CA C839  42         mov   *stack+,@wyx          ; Pop cursor position
     37CC 832A     
0096 37CE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 37D0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 37D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 37D4 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 37D6 0460  28         b     @slotok               ; Exit task
     37D8 2E84     
                   < ram.resident.asm
0047               
0048                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 37DA C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     37DC A224     
0010 37DE 1301  14         jeq   task.oneshot.exit
0011               
0012 37E0 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 37E2 0460  28         b     @slotok                ; Exit task
     37E4 2E84     
                   < ram.resident.asm
0049                       ;------------------------------------------------------
0050                       ; Program data
0051                       ;------------------------------------------------------
0052                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 37E6 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     37E8 003F     
     37EA 0243     
     37EC 05F4     
     37EE 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 37F0 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     37F2 000C     
     37F4 0006     
     37F6 0007     
     37F8 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 37FA 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     37FC 000C     
     37FE 0006     
     3800 0007     
     3802 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3804 0000             data  >0000,>0001           ; Cursor
     3806 0001     
0099 3808 0000             data  >0000,>0101           ; Current line indicator     <
     380A 0101     
0100 380C 0820             data  >0820,>0201           ; Current column indicator   v
     380E 0201     
0101               nosprite:
0102 3810 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3812 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3814 F171     
     3816 1B1F     
     3818 71B1     
0158 381A A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     381C F0FF     
     381E 1F1A     
     3820 F1FF     
0159 3822 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3824 F0FF     
     3826 1F12     
     3828 F1F6     
0160 382A F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     382C 1E11     
     382E 1A17     
     3830 1E11     
0161 3832 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     3834 E1FF     
     3836 1F1E     
     3838 E1FF     
0162 383A 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     383C 1016     
     383E 1B71     
     3840 1711     
0163 3842 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     3844 1011     
     3846 F1F1     
     3848 1F11     
0164 384A 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     384C A1FF     
     384E 1F1F     
     3850 F11F     
0165 3852 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     3854 12FF     
     3856 1B12     
     3858 12FF     
0166 385A F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     385C E1FF     
     385E 1B1F     
     3860 F131     
0167                       even
0168               
0169               tv.tabs.table.lr:
0170 3862 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3864 0C19     
0171 3866 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3868 3B4F     
0172 386A FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     386C 0000     
0173                                                   ; /   >ff means end-of-list.
0174               
0175               tv.tabs.table.rl:
0176 386E 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3870 2D1E     
0177 3872 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3874 0700     
0178 3876 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3878 0000     
0179                                                   ; /   >ff means end-of-list.
0180               
0181               ***************************************************************
0182               * Constants for numbers 0-10
0183               ********|*****|*********************|**************************
0184      2000     const.0       equ   w$0000          ; 0
0185      2002     const.1       equ   w$0001          ; 1
0186      2004     const.2       equ   w$0002          ; 2
0187 387A 0003     const.3       data  3               ; 3
0188      2006     const.4       equ   w$0004          ; 4
0189 387C 0005     const.5       data  5               ; 5
0190 387E 0006     const.6       data  6               ; 6
0191 3880 0007     const.7       data  7               ; 7
0192      2008     const.8       equ   w$0008          ; 8
0193 3882 0009     const.9       data  9               ; 9
0194 3884 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0053                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 3886 012C     txt.delim          stri ','
0009                                  even
0010 3888 0520     txt.bottom         stri '  BOT'
     388A 2042     
     388C 4F54     
0011                                  even
0012 388E 044F     txt.ovrwrite       stri 'OVR '
     3890 5652     
     3892 20       
0013                                  even
0014 3894 0449     txt.insert         stri 'INS '
     3896 4E53     
     3898 20       
0015                                  even
0016 389A 0449     txt.autoinsert     stri 'INS+'
     389C 4E53     
     389E 2B       
0017                                  even
0018 38A0 012A     txt.star           stri '*'
0019                                  even
0020 38A2 0A4C     txt.loading        stri 'Loading...'
     38A4 6F61     
     38A6 6469     
     38A8 6E67     
     38AA 2E2E     
     38AC 2E       
0021                                  even
0022 38AE 0A53     txt.saving         stri 'Saving....'
     38B0 6176     
     38B2 696E     
     38B4 672E     
     38B6 2E2E     
     38B8 2E       
0023                                  even
0024 38BA 1250     txt.printing       stri 'Printing file.....'
     38BC 7269     
     38BE 6E74     
     38C0 696E     
     38C2 6720     
     38C4 6669     
     38C6 6C65     
     38C8 2E2E     
     38CA 2E2E     
     38CC 2E       
0025                                  even
0026 38CE 1244     txt.block.del      stri 'Deleting block....'
     38D0 656C     
     38D2 6574     
     38D4 696E     
     38D6 6720     
     38D8 626C     
     38DA 6F63     
     38DC 6B2E     
     38DE 2E2E     
     38E0 2E       
0027                                  even
0028 38E2 1143     txt.block.copy     stri 'Copying block....'
     38E4 6F70     
     38E6 7969     
     38E8 6E67     
     38EA 2062     
     38EC 6C6F     
     38EE 636B     
     38F0 2E2E     
     38F2 2E2E     
0029                                  even
0030 38F4 104D     txt.block.move     stri 'Moving block....'
     38F6 6F76     
     38F8 696E     
     38FA 6720     
     38FC 626C     
     38FE 6F63     
     3900 6B2E     
     3902 2E2E     
     3904 2E       
0031                                  even
0032 3906 1853     txt.block.save     stri 'Saving block to file....'
     3908 6176     
     390A 696E     
     390C 6720     
     390E 626C     
     3910 6F63     
     3912 6B20     
     3914 746F     
     3916 2066     
     3918 696C     
     391A 652E     
     391C 2E2E     
     391E 2E       
0033                                  even
0034 3920 1843     txt.block.clip     stri 'Copying to clipboard....'
     3922 6F70     
     3924 7969     
     3926 6E67     
     3928 2074     
     392A 6F20     
     392C 636C     
     392E 6970     
     3930 626F     
     3932 6172     
     3934 642E     
     3936 2E2E     
     3938 2E       
0035                                  even
0036 393A 1250     txt.block.print    stri 'Printing block....'
     393C 7269     
     393E 6E74     
     3940 696E     
     3942 6720     
     3944 626C     
     3946 6F63     
     3948 6B2E     
     394A 2E2E     
     394C 2E       
0037                                  even
0038 394E 1343     txt.clearmem       stri 'Clearing memory....'
     3950 6C65     
     3952 6172     
     3954 696E     
     3956 6720     
     3958 6D65     
     395A 6D6F     
     395C 7279     
     395E 2E2E     
     3960 2E2E     
0039                                  even
0040 3962 0E4C     txt.done.load      stri 'Load completed'
     3964 6F61     
     3966 6420     
     3968 636F     
     396A 6D70     
     396C 6C65     
     396E 7465     
     3970 64       
0041                                  even
0042 3972 1049     txt.done.insert    stri 'Insert completed'
     3974 6E73     
     3976 6572     
     3978 7420     
     397A 636F     
     397C 6D70     
     397E 6C65     
     3980 7465     
     3982 64       
0043                                  even
0044 3984 1041     txt.done.append    stri 'Append completed'
     3986 7070     
     3988 656E     
     398A 6420     
     398C 636F     
     398E 6D70     
     3990 6C65     
     3992 7465     
     3994 64       
0045                                  even
0046 3996 0E53     txt.done.save      stri 'Save completed'
     3998 6176     
     399A 6520     
     399C 636F     
     399E 6D70     
     39A0 6C65     
     39A2 7465     
     39A4 64       
0047                                  even
0048 39A6 0E43     txt.done.copy      stri 'Copy completed'
     39A8 6F70     
     39AA 7920     
     39AC 636F     
     39AE 6D70     
     39B0 6C65     
     39B2 7465     
     39B4 64       
0049                                  even
0050 39B6 0F50     txt.done.print     stri 'Print completed'
     39B8 7269     
     39BA 6E74     
     39BC 2063     
     39BE 6F6D     
     39C0 706C     
     39C2 6574     
     39C4 6564     
0051                                  even
0052 39C6 1044     txt.done.delete    stri 'Delete completed'
     39C8 656C     
     39CA 6574     
     39CC 6520     
     39CE 636F     
     39D0 6D70     
     39D2 6C65     
     39D4 7465     
     39D6 64       
0053                                  even
0054 39D8 0F43     txt.done.clipboard stri 'Clipboard saved'
     39DA 6C69     
     39DC 7062     
     39DE 6F61     
     39E0 7264     
     39E2 2073     
     39E4 6176     
     39E6 6564     
0055                                  even
0056 39E8 0D43     txt.done.clipdev   stri 'Clipboard set'
     39EA 6C69     
     39EC 7062     
     39EE 6F61     
     39F0 7264     
     39F2 2073     
     39F4 6574     
0057                                  even
0058 39F6 0E41     txt.autoins.on     stri 'Autoinsert: on'
     39F8 7574     
     39FA 6F69     
     39FC 6E73     
     39FE 6572     
     3A00 743A     
     3A02 206F     
     3A04 6E       
0059                                  even
0060 3A06 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3A08 7574     
     3A0A 6F69     
     3A0C 6E73     
     3A0E 6572     
     3A10 743A     
     3A12 206F     
     3A14 6666     
0061                                  even
0062 3A16 0B46     txt.fastmode       stri 'Fastmode IO'
     3A18 6173     
     3A1A 746D     
     3A1C 6F64     
     3A1E 6520     
     3A20 494F     
0063                                  even
0064 3A22 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     3A24 7870     
     3A26 616E     
     3A28 6469     
     3A2A 6E67     
     3A2C 2054     
     3A2E 4920     
     3A30 4261     
     3A32 7369     
     3A34 6320     
     3A36 6C69     
     3A38 6E65     
     3A3A 2E2E     
     3A3C 2E2E     
0065                                  even
0066 3A3E 026B     txt.kb             stri 'kb'
     3A40 62       
0067                                  even
0068 3A42 054C     txt.lines          stri 'Lines'
     3A44 696E     
     3A46 6573     
0069                                  even
0070 3A48 0A5B     txt.newfile        stri '[New file]'
     3A4A 4E65     
     3A4C 7720     
     3A4E 6669     
     3A50 6C65     
     3A52 5D       
0071                                  even
0072 3A54 0D5B     txt.tib1           stri '[TI Basic #1]'
     3A56 5449     
     3A58 2042     
     3A5A 6173     
     3A5C 6963     
     3A5E 2023     
     3A60 315D     
0073                                  even
0074 3A62 0D5B     txt.tib2           stri '[TI Basic #2]'
     3A64 5449     
     3A66 2042     
     3A68 6173     
     3A6A 6963     
     3A6C 2023     
     3A6E 325D     
0075                                  even
0076 3A70 0D5B     txt.tib3           stri '[TI Basic #3]'
     3A72 5449     
     3A74 2042     
     3A76 6173     
     3A78 6963     
     3A7A 2023     
     3A7C 335D     
0077                                  even
0078 3A7E 0D5B     txt.tib4           stri '[TI Basic #4]'
     3A80 5449     
     3A82 2042     
     3A84 6173     
     3A86 6963     
     3A88 2023     
     3A8A 345D     
0079                                  even
0080 3A8C 0D5B     txt.tib5           stri '[TI Basic #5]'
     3A8E 5449     
     3A90 2042     
     3A92 6173     
     3A94 6963     
     3A96 2023     
     3A98 355D     
0081                                  even
0082 3A9A 0444     txt.filetype.dv80  stri 'DV80'
     3A9C 5638     
     3A9E 30       
0083                                  even
0084 3AA0 034D     txt.m1             stri 'M1='
     3AA2 313D     
0085                                  even
0086 3AA4 034D     txt.m2             stri 'M2='
     3AA6 323D     
0087                                  even
0088 3AA8 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3AAA 392D     
     3AAC 4D65     
     3AAE 6E75     
     3AB0 2020     
     3AB2 5E48     
     3AB4 2D48     
     3AB6 656C     
     3AB8 7020     
     3ABA 205E     
     3ABC 552D     
     3ABE 5368     
     3AC0 6F72     
     3AC2 7463     
     3AC4 7574     
     3AC6 73       
0089                                  even
0090 3AC8 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3ACA 392D     
     3ACC 4D65     
     3ACE 6E75     
     3AD0 2020     
     3AD2 5E48     
     3AD4 2D48     
     3AD6 656C     
     3AD8 7020     
     3ADA 205E     
     3ADC 552D     
     3ADE 5368     
     3AE0 6F72     
     3AE2 7463     
     3AE4 7574     
     3AE6 7320     
     3AE8 2046     
     3AEA 302D     
     3AEC 4261     
     3AEE 7369     
     3AF0 6323     
0091                                  even
0092 3AF2 3446     txt.keys.block     stri 'F9-Back  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3AF4 392D     
     3AF6 4261     
     3AF8 636B     
     3AFA 2020     
     3AFC 5E43     
     3AFE 6F70     
     3B00 7920     
     3B02 5E4D     
     3B04 6F76     
     3B06 6520     
     3B08 5E44     
     3B0A 656C     
     3B0C 205E     
     3B0E 5361     
     3B10 7665     
     3B12 205E     
     3B14 5072     
     3B16 696E     
     3B18 7420     
     3B1A 5E5B     
     3B1C 312D     
     3B1E 335D     
     3B20 436C     
     3B22 6970     
     3B24 6272     
     3B26 64       
0093                                  even
0094 3B28 3046     txt.keys.basic1    stri 'F9-Back  ENTER-Back  F5-AutoMode  SPACE-Uncrunch'
     3B2A 392D     
     3B2C 4261     
     3B2E 636B     
     3B30 2020     
     3B32 454E     
     3B34 5445     
     3B36 522D     
     3B38 4261     
     3B3A 636B     
     3B3C 2020     
     3B3E 4635     
     3B40 2D41     
     3B42 7574     
     3B44 6F4D     
     3B46 6F64     
     3B48 6520     
     3B4A 2053     
     3B4C 5041     
     3B4E 4345     
     3B50 2D55     
     3B52 6E63     
     3B54 7275     
     3B56 6E63     
     3B58 68       
0095                                  even
0096 3B5A 2E2E     txt.ruler          text    '.........'
     3B5C 2E2E     
     3B5E 2E2E     
     3B60 2E2E     
     3B62 2E       
0097 3B63   12                        byte    18
0098 3B64 2E2E                        text    '.........'
     3B66 2E2E     
     3B68 2E2E     
     3B6A 2E2E     
     3B6C 2E       
0099 3B6D   13                        byte    19
0100 3B6E 2E2E                        text    '.........'
     3B70 2E2E     
     3B72 2E2E     
     3B74 2E2E     
     3B76 2E       
0101 3B77   14                        byte    20
0102 3B78 2E2E                        text    '.........'
     3B7A 2E2E     
     3B7C 2E2E     
     3B7E 2E2E     
     3B80 2E       
0103 3B81   15                        byte    21
0104 3B82 2E2E                        text    '.........'
     3B84 2E2E     
     3B86 2E2E     
     3B88 2E2E     
     3B8A 2E       
0105 3B8B   16                        byte    22
0106 3B8C 2E2E                        text    '.........'
     3B8E 2E2E     
     3B90 2E2E     
     3B92 2E2E     
     3B94 2E       
0107 3B95   17                        byte    23
0108 3B96 2E2E                        text    '.........'
     3B98 2E2E     
     3B9A 2E2E     
     3B9C 2E2E     
     3B9E 2E       
0109 3B9F   18                        byte    24
0110 3BA0 2E2E                        text    '.........'
     3BA2 2E2E     
     3BA4 2E2E     
     3BA6 2E2E     
     3BA8 2E       
0111 3BA9   19                        byte    25
0112                                  even
0113 3BAA 020E     txt.alpha.down     data >020e,>0f00
     3BAC 0F00     
0114 3BAE 0110     txt.vertline       data >0110
0115 3BB0 011C     txt.keymarker      byte 1,28
0116               
0117 3BB2 0120     txt.ws1            stri ' '
0118                                  even
0119 3BB4 0220     txt.ws2            stri '  '
     3BB6 20       
0120                                  even
0121 3BB8 0320     txt.ws3            stri '   '
     3BBA 2020     
0122                                  even
0123 3BBC 0420     txt.ws4            stri '    '
     3BBE 2020     
     3BC0 20       
0124                                  even
0125 3BC2 0520     txt.ws5            stri '     '
     3BC4 2020     
     3BC6 2020     
0126                                  even
0127      3BBC     txt.filetype.none  equ txt.ws4
0128               
0129               
0130               ;--------------------------------------------------------------
0131               ; Strings for error line pane
0132               ;--------------------------------------------------------------
0133 3BC8 1546     txt.ioerr.load     stri 'Failed loading file: '
     3BCA 6169     
     3BCC 6C65     
     3BCE 6420     
     3BD0 6C6F     
     3BD2 6164     
     3BD4 696E     
     3BD6 6720     
     3BD8 6669     
     3BDA 6C65     
     3BDC 3A20     
0134                                  even
0135 3BDE 1446     txt.ioerr.save     stri 'Failed saving file: '
     3BE0 6169     
     3BE2 6C65     
     3BE4 6420     
     3BE6 7361     
     3BE8 7669     
     3BEA 6E67     
     3BEC 2066     
     3BEE 696C     
     3BF0 653A     
     3BF2 20       
0136                                  even
0137 3BF4 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3BF6 6169     
     3BF8 6C65     
     3BFA 6420     
     3BFC 7072     
     3BFE 696E     
     3C00 7469     
     3C02 6E67     
     3C04 2074     
     3C06 6F20     
     3C08 6465     
     3C0A 7669     
     3C0C 6365     
     3C0E 3A20     
0138                                  even
0139 3C10 164E     txt.io.nofile      stri 'No filename specified.'
     3C12 6F20     
     3C14 6669     
     3C16 6C65     
     3C18 6E61     
     3C1A 6D65     
     3C1C 2073     
     3C1E 7065     
     3C20 6369     
     3C22 6669     
     3C24 6564     
     3C26 2E       
0140                                  even
0141 3C28 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3C2A 6E64     
     3C2C 6578     
     3C2E 2066     
     3C30 756C     
     3C32 6C2E     
     3C34 2046     
     3C36 696C     
     3C38 6520     
     3C3A 746F     
     3C3C 6F20     
     3C3E 6C61     
     3C40 7267     
     3C42 6520     
     3C44 666F     
     3C46 7220     
     3C48 6564     
     3C4A 6974     
     3C4C 6F72     
     3C4E 2062     
     3C50 7566     
     3C52 6665     
     3C54 722E     
0142                                  even
0143 3C56 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3C58 6F70     
     3C5A 792F     
     3C5C 4D6F     
     3C5E 7665     
     3C60 2074     
     3C62 6172     
     3C64 6765     
     3C66 7420     
     3C68 6D75     
     3C6A 7374     
     3C6C 2062     
     3C6E 6520     
     3C70 6F75     
     3C72 7473     
     3C74 6964     
     3C76 6520     
     3C78 4D31     
     3C7A 2D4D     
     3C7C 3220     
     3C7E 7261     
     3C80 6E67     
     3C82 652E     
0144                                  even
0145               
0146               ;--------------------------------------------------------------
0147               ; Strings for command buffer
0148               ;--------------------------------------------------------------
0149 3C84 013E     txt.cmdb.prompt    stri '>'
0150                                  even
0151 3C86 0D43     txt.colorscheme    stri 'Color scheme:'
     3C88 6F6C     
     3C8A 6F72     
     3C8C 2073     
     3C8E 6368     
     3C90 656D     
     3C92 653A     
0152                                  even
                   < ram.resident.asm
0054                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3C94 0650     def.printer.fname   stri 'PI.PIO'
     3C96 492E     
     3C98 5049     
     3C9A 4F       
0008 3C9B   09     def.clip.fname      stri 'DSK1.CLIP'
     3C9C 4453     
     3C9E 4B31     
     3CA0 2E43     
     3CA2 4C49     
     3CA4 50       
0009 3CA5   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3CA6 4453     
     3CA8 4B32     
     3CAA 2E43     
     3CAC 4C49     
     3CAE 50       
0010 3CAF   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3CB0 5449     
     3CB2 5049     
     3CB4 2E43     
     3CB6 4C49     
     3CB8 50       
0011 3CB9   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3CBA 2C44     
     3CBC 534B     
     3CBE 2C48     
     3CC0 4458     
     3CC2 2C49     
     3CC4 4445     
     3CC6 2C50     
     3CC8 492E     
     3CCA 2C50     
     3CCC 494F     
     3CCE 2C54     
     3CD0 4950     
     3CD2 492E     
     3CD4 2C52     
     3CD6 442C     
     3CD8 5343     
     3CDA 532C     
     3CDC 5344     
     3CDE 442C     
     3CE0 5744     
     3CE2 532C     
     3CE4 5253     
     3CE6 3233     
     3CE8 32       
                   < ram.resident.asm
0055                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3CEA 99              byte   >99                   ; \
0013 3CEB   4F            text   'OKFG99'              ; | Send this to reload
     3CEC 4B46     
     3CEE 4739     
     3CF0 39       
0014 3CF1   99            byte   >99                   ; /
0015 3CF2 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3CF4 4D44     
     3CF6 47       
0016 3CF7   00            byte   >00, >00, >00         ; /
     3CF8 0000     
0017 3CFA 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3CFC 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3CFE 99              byte   >99                   ; \
0026 3CFF   4F            text   'OKFG99'              ; | Send this to reload
     3D00 4B46     
     3D02 4739     
     3D04 39       
0027 3D05   99            byte   >99                   ; /
0028 3D06 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3D08 3239     
     3D0A 4745     
     3D0C 4D47     
0029                      ;                            ; /
0030 3D0E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3D10 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3D12 99              byte   >99                   ; \
0039 3D13   4F            text   'OKFG99'              ; | Send this to reload
     3D14 4B46     
     3D16 4739     
     3D18 39       
0040 3D19   99            byte   >99                   ; /
0041 3D1A 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3D1C 4247     
0042 3D1E 0000            byte   >00, >00, >00, >00    ; /
     3D20 0000     
0043 3D22 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3D24 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3D26 99              byte   >99                   ; \
0052 3D27   4F            text   'OKFG99'              ; | Send this to reload
     3D28 4B46     
     3D2A 4739     
     3D2C 39       
0053 3D2D   99            byte   >99                   ; /
0054 3D2E 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3D30 464F     
     3D32 5254     
     3D34 4843     
0055                      ;                            ; /
0056 3D36 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3D38 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b1.asm
0050                       ;------------------------------------------------------
0051                       ; Activate bank 1 and branch to  >6036
0052                       ;------------------------------------------------------
0053 3D3A 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3D3C 6002     
0054               
0058               
0059 3D3E 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3D40 6046     
0060               ***************************************************************
0061               * Step 3: Include main editor modules
0062               ********|*****|*********************|**************************
0063               main:
0064                       aorg  kickstart.code2       ; >6046
0065 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0066                       ;-----------------------------------------------------------------------
0067                       ; Include files
0068                       ;-----------------------------------------------------------------------
0069                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 27FA     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 2686     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 272A     
0043               
0050               
0051 605E 06A0  32         bl    @putvr                ; Turn on position based attributes
     6060 2332     
0052 6062 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 6064 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     6066 2332     
0055 6068 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 606A 06A0  32         bl    @filv
     606C 228E     
0060 606E 0000                   data >0000,32,vdp.sit.size
     6070 0020     
     6072 0780     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 6074 06A0  32         bl    @film
     6076 2236     
0066 6078 A000                   data >a000,00,20000   ; Clear a000-eedf
     607A 0000     
     607C 4E20     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 607E 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6080 26A6     
0071 6082 06A0  32         bl    @s8x8                 ; Small sprite
     6084 26B6     
0072               
0073 6086 06A0  32         bl    @cpym2m
     6088 24DA     
0074 608A 3804                   data romsat,ramsat,14 ; Load sprite SAT
     608C A056     
     608E 000E     
0075               
0076 6090 C820  54         mov   @romsat+2,@tv.curshape
     6092 3806     
     6094 A214     
0077                                                   ; Save cursor shape & color
0078               
0079 6096 06A0  32         bl    @vdp.patterns.dump    ; Load sprite and character patterns
     6098 7BC6     
0080               *--------------------------------------------------------------
0081               * Initialize
0082               *--------------------------------------------------------------
0083 609A 06A0  32         bl    @mem.sams.setup.stevie
     609C 60F6     
0084                                                   ; Load SAMS pages for stevie
0085               
0086 609E 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60A0 32BA     
0087 60A2 06A0  32         bl    @tv.reset             ; Reset editor
     60A4 3312     
0088                       ;------------------------------------------------------
0089                       ; Load colorscheme amd turn on screen
0090                       ;------------------------------------------------------
0091 60A6 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60A8 A006     
0092 60AA 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60AC A008     
0093 60AE 04E0  34         clr   @parm3                ; Colorize all panes
     60B0 A00A     
0094               
0095 60B2 06A0  32         bl    @pane.action.colorscheme.load
     60B4 725A     
0096                                                   ; Reload color scheme
0097                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0098                                                   ; | i  @parm2 = Skip colorizing marked lines
0099                                                   ; |             if >FFFF
0100                                                   ; | i  @parm3 = Only colorize CMDB pane
0101                                                   ; /             if >FFFF
0102               
0103                       ;-------------------------------------------------------
0104                       ; Setup editor tasks
0105                       ;-------------------------------------------------------
0106 60B6 06A0  32         bl    @at
     60B8 26C6     
0107 60BA 0000                   data  >0000           ; Cursor YX position = >0000
0108               
0109 60BC 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60BE A064     
0110 60C0 C804  30         mov   tmp0,@wtitab          ; /
     60C2 832C     
0111               
0122               
0123 60C4 06A0  32         bl    @mkslot
     60C6 2ECC     
0124 60C8 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60CA 71EE     
0125 60CC 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60CE 3752     
0126 60D0 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60D2 37DA     
0127 60D4 FFFF                   data eol
0128               
0130               
0131 60D6 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60D8 0300     
0132 60DA C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60DC 8314     
0133                       ;-------------------------------------------------------
0134                       ; Setup keyboard scanning and start kernel/timers
0135                       ;-------------------------------------------------------
0136 60DE 06A0  32         bl    @mkhook
     60E0 2EB8     
0137 60E2 6114                   data edkey.keyscan.hook
0138                                                   ; Setup keyboard scanning hook
0139                       ;-------------------------------------------------------
0140                       ; Initialisation complete
0141                       ;-------------------------------------------------------
0142 60E4 06A0  32         bl    @magic.set            ; Set magic string
     60E6 7CAA     
0143               
0144 60E8 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     60EA 37D7     
0145 60EC C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     60EE 8370     
0146 60F0 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0147                       ;-------------------------------------------------------
0148                       ; Start kernel
0149                       ;-------------------------------------------------------
0150 60F2 0460  28         b     @tmgr                 ; Run kernel and timers
     60F4 2E04     
                   < stevie_b1.asm
0070                       ;-----------------------------------------------------------------------
0071                       ; Low-level modules
0072                       ;-----------------------------------------------------------------------
0073                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 60F6 0649  14         dect  stack
0018 60F8 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 60FA 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     60FC 7C86     
0023               
0024 60FE 06A0  32         bl    @sams.layout.copy
     6100 263E     
0025 6102 A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026               
0027 6104 C820  54         mov   @tv.sams.c000,@edb.sams.page
     6106 A208     
     6108 A518     
0028 610A C820  54         mov   @edb.sams.page,@edb.sams.hipage
     610C A518     
     610E A51A     
0029                                                   ; Track editor buffer SAMS page
0030                       ;------------------------------------------------------
0031                       ; Exit
0032                       ;------------------------------------------------------
0033               mem.sams.setup.stevie.exit:
0034 6110 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 6112 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Keyboard actions
0076                       ;-----------------------------------------------------------------------
0077                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 6114 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6116 A900     
0013                                                   ; on the stack anymore.
0014               
0015 6118 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 611A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     611C FFCE     
0020 611E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6120 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 6122 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     6124 200A     
0025 6126 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 6128 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     612A 200A     
0031 612C 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     612E 2002     
     6130 A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 6132 C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     6134 A028     
     6136 A02A     
0036 6138 0460  28         b     @edkey.key.process    ; Process key
     613A 615C     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 613C C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     613E A026     
0042 6140 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     6142 2002     
0043 6144 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6146 04E0  34         clr   @keycode1             ; \
     6148 A028     
0047 614A 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     614C A02A     
0048 614E 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     6150 0001     
0049 6152 C804  38         mov   tmp0,@kbflags         ; /
     6154 A026     
0050                       ;------------------------------------------------------
0051                       ; Keyboard debounce
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.debounce:
0054 6156 1000  14         nop                         ; No purpose anymore, but branched to
0055                                                   ; from several subroutines.
0056                                                   ; Needs to be refactored.
0057                       ;------------------------------------------------------
0058                       ; Exit keyboard hook
0059                       ;------------------------------------------------------
0060               edkey.keyscan.hook.exit:
0061 6158 0460  28         b     @hookok               ; Return
     615A 2E08     
                   < stevie_b1.asm
0078                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 615C C160  34         mov   @keycode1,tmp1        ; Get key pressed
     615E A028     
0009 6160 0A85  32         sla   tmp1,8                ; Move to MSB
0010 6162 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 6164 C1A0  34         mov   @tv.pane.focus,tmp2
     6166 A222     
0015 6168 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     616A 0000     
0016 616C 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 616E 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     6170 0001     
0020 6172 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 6174 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6176 FFCE     
0026 6178 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     617A 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 617C 0285  22         ci    tmp1,>2000            ; Space key pressed?
     617E 2000     
0032 6180 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 6182 0649  14         dect  stack
0038 6184 C644  30         mov   tmp0,*stack           ; Push tmp0
0039 6186 0649  14         dect  stack
0040 6188 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 618A 0649  14         dect  stack
0042 618C C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 618E 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 6190 020C  20         li    r12,>0024             ; CRU address decoder
     6192 0024     
0046 6194 30C4  30         ldcr  tmp0,3                ; Select column
0047 6196 020C  20         li    r12,>0006             ; Address of the first row
     6198 0006     
0048 619A 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 619C 0245  22         andi  tmp1,>4000            ; Test ctrl key
     619E 4000     
0050 61A0 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61A2 C339  30         mov   *stack+,r12           ; Pop r12
0056 61A4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61A6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61A8 0460  28         b     @edkey.action.block.mark
     61AA 68E0     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61AC C339  30         mov   *stack+,r12           ; Pop r12
0065 61AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61B2 0206  20         li    tmp2,keymap_actions.editor
     61B4 7CE0     
0072 61B6 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61B8 0206  20         li    tmp2,keymap_actions.cmdb
     61BA 7DB6     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 61BC 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61BE 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 61C0 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61C2 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 61C4 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61C6 6100     
0096 61C8 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61CA 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61CC 7A00     
0099 61CE 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61D0 0225  22         ai    tmp1,->2000           ; Make uppercase
     61D2 E000     
0102 61D4 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61D6 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 61D8 0225  22         ai    tmp1,>2000            ; Make lowercase
     61DA 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61DC 0226  22         ai    tmp2,4                ; Skip current entry
     61DE 0004     
0112 61E0 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 61E2 0586  14         inc   tmp2                  ; Move to scope
0118 61E4 9816  42         cb    *tmp2,@tv.pane.focus+1
     61E6 A223     
0119                                                   ; (1) Process key if scope matches pane
0120 61E8 1309  14         jeq   edkey.key.process.action
0121               
0122 61EA 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     61EC A71D     
0123 61EE 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 61F0 0226  22         ai    tmp2,3                ; Skip current entry
     61F2 0003     
0128 61F4 C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     61F6 A028     
0129 61F8 0A85  32         sla   tmp1,8                ; Move to MSB
0130 61FA 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 61FC 0586  14         inc   tmp2                  ; Move to action address
0136 61FE C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 6200 0204  20         li    tmp0,id.dialog.unsaved
     6202 0065     
0139 6204 8120  34         c     @cmdb.dialog,tmp0
     6206 A71C     
0140 6208 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 620A C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     620C A72C     
0143 620E 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 6210 C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     6212 A222     
0149 6214 1602  14         jne   !                     ; No, skip frame buffer
0150 6216 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6218 67CA     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 621A 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     621C 0001     
0155 621E 1607  14         jne   edkey.key.process.crash
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
0160 6220 C120  34         mov   @cmdb.dialog,tmp0
     6222 A71C     
0161 6224 0284  22         ci    tmp0,99
     6226 0063     
0162 6228 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 622A 0460  28         b     @edkey.action.cmdb.char
     622C 6A62     
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
0172 622E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6230 FFCE     
0173 6232 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6234 2026     
0174                       ;-------------------------------------------------------
0175                       ; Check ENTER key if ID >= 100 and close pane if match
0176                       ;-------------------------------------------------------
0177               edkey.key.process.enter:
0178 6236 C120  34         mov   @keycode1,tmp0        ; Get key
     6238 A028     
0179 623A 0284  22         ci    tmp0,key.space        ; SPACE ?
     623C 0020     
0180 623E 1602  14         jne   edkey.key.process.exit
0181 6240 0460  28         b     @edkey.action.cmdb.close.dialog
     6242 6E20     
0182                       ;-------------------------------------------------------
0183                       ; Exit
0184                       ;-------------------------------------------------------
0185               edkey.key.process.exit:
0186 6244 0460  28         b     @edkey.keyscan.hook.debounce
     6246 6156     
0187                                                   ; Back to editor main
                   < stevie_b1.asm
0079                       ;-----------------------------------------------------------------------
0080                       ; Keyboard actions - Framebuffer (1)
0081                       ;-----------------------------------------------------------------------
0082                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 6248 C120  34         mov   @fb.column,tmp0
     624A A30C     
0009 624C 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 624E 0620  34         dec   @fb.column            ; Column-- in screen buffer
     6250 A30C     
0014 6252 0620  26         dec   @wyx                  ; Column-- VDP cursor
     6254 832A     
0015 6256 0620  34         dec   @fb.current
     6258 A302     
0016 625A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     625C A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 625E 0460  28 !       b     @edkey.keyscan.hook.debounce
     6260 6156     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 6262 8820  50         c     @fb.column,@fb.row.length
     6264 A30C     
     6266 A308     
0029 6268 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 626A 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     626C A30C     
0034 626E 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6270 832A     
0035 6272 05A0  34         inc   @fb.current
     6274 A302     
0036 6276 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6278 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 627A 0460  28 !       b     @edkey.keyscan.hook.debounce
     627C 6156     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 627E 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     6280 6F8C     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 6282 0460  28         b     @edkey.keyscan.hook.debounce
     6284 6156     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 6286 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6288 A31A     
0061 628A C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     628C A308     
0062 628E 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     6290 0050     
0063 6292 1102  14         jlt   !                     ; | is right of last character on line,
0064 6294 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     6296 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 6298 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     629A A30C     
0069 629C 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     629E 26DE     
0070 62A0 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62A2 30C0     
0071                       ;-------------------------------------------------------
0072                       ; Exit
0073                       ;-------------------------------------------------------
0074 62A4 0460  28         b     @edkey.keyscan.hook.debounce
     62A6 6156     
0075                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 62A8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62AA A31A     
0009 62AC C120  34         mov   @fb.column,tmp0
     62AE A30C     
0010 62B0 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62B2 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62B4 A302     
0015 62B6 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62B8 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 62BA 0605  14         dec   tmp1
0022 62BC 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62BE 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 62C0 D195  26         movb  *tmp1,tmp2            ; Get character
0030 62C2 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62C4 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62C6 0986  32         srl   tmp2,8                ; Right justify
0033 62C8 0286  22         ci    tmp2,32               ; Space character found?
     62CA 0020     
0034 62CC 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 62CE 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62D0 2020     
0040 62D2 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62D4 0287  22         ci    tmp3,>20ff            ; First character is space
     62D6 20FF     
0043 62D8 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62DA C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62DC A30C     
0048 62DE 61C4  18         s     tmp0,tmp3
0049 62E0 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62E2 0002     
0050 62E4 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 62E6 0585  14         inc   tmp1
0056 62E8 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 62EA C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     62EC A30C     
0062 62EE 06A0  32         bl    @xsetx                ; Set VDP cursor X
     62F0 26DE     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 62F2 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62F4 30C0     
0068 62F6 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     62F8 6156     
0069               
0070               
0071               
0072               *---------------------------------------------------------------
0073               * Cursor next word
0074               *---------------------------------------------------------------
0075               edkey.action.nword:
0076 62FA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62FC A31A     
0077 62FE 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0078 6300 C120  34         mov   @fb.column,tmp0
     6302 A30C     
0079 6304 8804  34         c     tmp0,@fb.row.length
     6306 A308     
0080 6308 1426  14         jhe   !                     ; column=last char ? Skip further processing
0081                       ;-------------------------------------------------------
0082                       ; Prepare 2 char buffer
0083                       ;-------------------------------------------------------
0084 630A C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     630C A302     
0085 630E 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0086 6310 1006  14         jmp   edkey.action.nword_scan_char
0087                       ;-------------------------------------------------------
0088                       ; Multiple spaces mode
0089                       ;-------------------------------------------------------
0090               edkey.action.nword_ms:
0091 6312 0708  14         seto  tmp4                  ; Set multiple spaces mode
0092                       ;-------------------------------------------------------
0093                       ; Scan forward to first character following space
0094                       ;-------------------------------------------------------
0095               edkey.action.nword_scan
0096 6314 0585  14         inc   tmp1
0097 6316 0584  14         inc   tmp0                  ; Column++ in screen buffer
0098 6318 8804  34         c     tmp0,@fb.row.length
     631A A308     
0099 631C 1316  14         jeq   edkey.action.nword_done
0100                                                   ; Column=last char ? Skip further processing
0101                       ;-------------------------------------------------------
0102                       ; Check character
0103                       ;-------------------------------------------------------
0104               edkey.action.nword_scan_char
0105 631E D195  26         movb  *tmp1,tmp2            ; Get character
0106 6320 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0107 6322 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0108 6324 0986  32         srl   tmp2,8                ; Right justify
0109               
0110 6326 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6328 FFFF     
0111 632A 1604  14         jne   edkey.action.nword_scan_char_other
0112                       ;-------------------------------------------------------
0113                       ; Special handling if multiple spaces found
0114                       ;-------------------------------------------------------
0115               edkey.action.nword_scan_char_ms:
0116 632C 0286  22         ci    tmp2,32
     632E 0020     
0117 6330 160C  14         jne   edkey.action.nword_done
0118                                                   ; Exit if non-space found
0119 6332 10F0  14         jmp   edkey.action.nword_scan
0120                       ;-------------------------------------------------------
0121                       ; Normal handling
0122                       ;-------------------------------------------------------
0123               edkey.action.nword_scan_char_other:
0124 6334 0286  22         ci    tmp2,32               ; Space character found?
     6336 0020     
0125 6338 16ED  14         jne   edkey.action.nword_scan
0126                                                   ; No space found, try again
0127                       ;-------------------------------------------------------
0128                       ; Space found, now look closer
0129                       ;-------------------------------------------------------
0130 633A 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     633C 2020     
0131 633E 13E9  14         jeq   edkey.action.nword_ms
0132                                                   ; Yes, so continue scanning
0133 6340 0287  22         ci    tmp3,>20ff            ; First characer is space?
     6342 20FF     
0134 6344 13E7  14         jeq   edkey.action.nword_scan
0135                       ;--------------------------------------------------------
0136                       ; Set cursor following space
0137                       ;--------------------------------------------------------
0138 6346 0585  14         inc   tmp1
0139 6348 0584  14         inc   tmp0                  ; Column++ in screen buffer
0140                       ;-------------------------------------------------------
0141                       ; Save position and position hardware cursor
0142                       ;-------------------------------------------------------
0143               edkey.action.nword_done:
0144 634A C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     634C A30C     
0145 634E 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6350 26DE     
0146                       ;-------------------------------------------------------
0147                       ; Exit
0148                       ;-------------------------------------------------------
0149               edkey.action.nword.exit:
0150 6352 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6354 30C0     
0151 6356 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6358 6156     
0152               
0153               
                   < stevie_b1.asm
0084                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 635A C120  34         mov   @fb.vwco,tmp0
     635C A310     
0009 635E 0284  22         ci    tmp0,16
     6360 0010     
0010 6362 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 6364 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6366 04E0  34         clr   @parm1
     6368 A006     
0016 636A 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 636C 0224  22 !       ai    tmp0,-16              ; Scroll left
     636E FFF0     
0021 6370 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     6372 A006     
0022               
0023 6374 0204  20         li    tmp0,16               ; Temporary constant
     6376 0010     
0024 6378 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     637A A30C     
     637C 200E     
0025 637E 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 6380 A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     6382 A30C     
0030 6384 A804  30         a     tmp0,@wyx             ; VDP Cursor
     6386 832A     
0031 6388 A804  38         a     tmp0,@fb.current
     638A A302     
0032 638C 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 638E C120  34         mov   @fb.vwco,tmp0
     6390 A310     
0040 6392 0284  22         ci    tmp0,175
     6394 00AF     
0041 6396 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 6398 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 639A 04E0  34         clr   @parm1
     639C A006     
0047 639E 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63A0 0224  22 !       ai    tmp0,16               ; Scroll right
     63A2 0010     
0052 63A4 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63A6 A006     
0053               
0054 63A8 0204  20         li    tmp0,16               ; Temporary constant
     63AA 0010     
0055 63AC 8120  34         c     @fb.column,tmp0
     63AE A30C     
0056 63B0 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63B2 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63B4 A30C     
0061 63B6 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63B8 832A     
0062 63BA 6804  38         s     tmp0,@fb.current
     63BC A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 63BE 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63C0 7AEE     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 63C2 0460  28         b     @edkey.keyscan.hook.debounce
     63C4 6156     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0085                       copy  "edkey.fb.mov.updown.asm"     ; Move line up / down
     **** ****     > edkey.fb.mov.updown.asm
0001               * FILE......: edkey.fb.mov.updown.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor up
0006               *---------------------------------------------------------------
0007               edkey.action.up:
0008 63C6 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     63C8 6EB6     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012               edkey.action.up.exit:
0013 63CA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63CC 6156     
0014               
0015               
0016               
0017               *---------------------------------------------------------------
0018               * Cursor down
0019               *---------------------------------------------------------------
0020               edkey.action.down:
0021 63CE 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     63D0 6F14     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.down.exit:
0026 63D2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63D4 6156     
                   < stevie_b1.asm
0086                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 63D6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63D8 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63DA 8820  50         c     @fb.row.dirty,@w$ffff
     63DC A30A     
     63DE 2022     
0013 63E0 1604  14         jne   edkey.action.ppage.sanity
0014 63E2 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63E4 7050     
0015 63E6 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63E8 A30A     
0016                       ;-------------------------------------------------------
0017                       ; Assert
0018                       ;-------------------------------------------------------
0019               edkey.action.ppage.sanity:
0020 63EA C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63EC A304     
0021 63EE 130F  14         jeq   edkey.action.ppage.exit
0022                       ;-------------------------------------------------------
0023                       ; Special treatment top page
0024                       ;-------------------------------------------------------
0025 63F0 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63F2 A31C     
0026 63F4 1503  14         jgt   edkey.action.ppage.topline
0027 63F6 04E0  34         clr   @fb.topline           ; topline = 0
     63F8 A304     
0028 63FA 1003  14         jmp   edkey.action.ppage.refresh
0029                       ;-------------------------------------------------------
0030                       ; Adjust topline
0031                       ;-------------------------------------------------------
0032               edkey.action.ppage.topline:
0033 63FC 6820  54         s     @fb.scrrows,@fb.topline
     63FE A31C     
     6400 A304     
0034                       ;-------------------------------------------------------
0035                       ; Refresh page
0036                       ;-------------------------------------------------------
0037               edkey.action.ppage.refresh:
0038 6402 C820  54         mov   @fb.topline,@parm1
     6404 A304     
     6406 A006     
0039 6408 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     640A A312     
0040               
0041 640C 1078  14         jmp   edkey.fb.goto.toprow  ; \ Position cursor and exit
0042                                                   ; / i  @parm1 = Line in editor buffer
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               edkey.action.ppage.exit:
0047 640E 0460  28         b     @edkey.keyscan.hook.debounce
     6410 6156     
0048                                                   ; Back to editor main
0049               
0050               
0051               
0052               
0053               *---------------------------------------------------------------
0054               * Next page
0055               *---------------------------------------------------------------
0056               edkey.action.npage:
0057 6412 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6414 A31A     
0058                       ;-------------------------------------------------------
0059                       ; Crunch current row if dirty
0060                       ;-------------------------------------------------------
0061 6416 8820  50         c     @fb.row.dirty,@w$ffff
     6418 A30A     
     641A 2022     
0062 641C 1604  14         jne   edkey.action.npage.sanity
0063 641E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6420 7050     
0064 6422 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6424 A30A     
0065                       ;-------------------------------------------------------
0066                       ; Assert
0067                       ;-------------------------------------------------------
0068               edkey.action.npage.sanity:
0069 6426 C120  34         mov   @fb.topline,tmp0
     6428 A304     
0070 642A A120  34         a     @fb.scrrows,tmp0
     642C A31C     
0071 642E 0584  14         inc   tmp0                  ; Base 1 offset !
0072 6430 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     6432 A504     
0073 6434 1509  14         jgt   edkey.action.npage.exit
0074                       ;-------------------------------------------------------
0075                       ; Adjust topline
0076                       ;-------------------------------------------------------
0077               edkey.action.npage.topline:
0078 6436 A820  54         a     @fb.scrrows,@fb.topline
     6438 A31C     
     643A A304     
0079                       ;-------------------------------------------------------
0080                       ; Refresh page
0081                       ;-------------------------------------------------------
0082               edkey.action.npage.refresh:
0083 643C C820  54         mov   @fb.topline,@parm1
     643E A304     
     6440 A006     
0084 6442 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6444 A312     
0085               
0086 6446 105B  14         jmp   edkey.fb.goto.toprow  ; \ Position cursor and exit
0087                                                   ; / i  @parm1 = Line in editor buffer
0088                       ;-------------------------------------------------------
0089                       ; Exit
0090                       ;-------------------------------------------------------
0091               edkey.action.npage.exit:
0092 6448 0460  28         b     @edkey.keyscan.hook.debounce
     644A 6156     
0093                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008                       ;-------------------------------------------------------
0009                       ; Crunch current row if dirty
0010                       ;-------------------------------------------------------
0011 644C 8820  50         c     @fb.row.dirty,@w$ffff
     644E A30A     
     6450 2022     
0012 6452 1604  14         jne   edkey.action.top.refresh
0013 6454 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6456 7050     
0014 6458 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     645A A30A     
0015                       ;-------------------------------------------------------
0016                       ; Refresh page
0017                       ;-------------------------------------------------------
0018               edkey.action.top.refresh:
0019 645C 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     645E A006     
0020 6460 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6462 A312     
0021               
0022 6464 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6466 64FE     
0023                                                   ; / i  @parm1 = Line in editor buffer
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Goto top of screen
0028               *---------------------------------------------------------------
0029               edkey.action.topscr:
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6468 8820  50         c     @fb.row.dirty,@w$ffff
     646A A30A     
     646C 2022     
0034 646E 1604  14         jne   edkey.action.topscr.refresh
0035 6470 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6472 7050     
0036 6474 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6476 A30A     
0037               edkey.action.topscr.refresh:
0038 6478 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     647A A304     
     647C A006     
0039 647E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6480 64FE     
0040                                                   ; / i  @parm1 = Line in editor buffer
0041               
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Goto bottom of file
0046               *---------------------------------------------------------------
0047               edkey.action.bot:
0048                       ;-------------------------------------------------------
0049                       ; Crunch current row if dirty
0050                       ;-------------------------------------------------------
0051 6482 8820  50         c     @fb.row.dirty,@w$ffff
     6484 A30A     
     6486 2022     
0052 6488 1604  14         jne   edkey.action.bot.refresh
0053 648A 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     648C 7050     
0054 648E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6490 A30A     
0055                       ;-------------------------------------------------------
0056                       ; Refresh page
0057                       ;-------------------------------------------------------
0058               edkey.action.bot.refresh:
0059 6492 8820  50         c     @edb.lines,@fb.scrrows
     6494 A504     
     6496 A31C     
0060 6498 120A  14         jle   edkey.action.bot.exit ; Skip if whole editor buffer on screen
0061               
0062 649A C120  34         mov   @edb.lines,tmp0
     649C A504     
0063 649E 6120  34         s     @fb.scrrows,tmp0
     64A0 A31C     
0064 64A2 C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     64A4 A006     
0065 64A6 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64A8 A312     
0066               
0067 64AA 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64AC 64FE     
0068                                                   ; / i  @parm1 = Line in editor buffer
0069                       ;-------------------------------------------------------
0070                       ; Exit
0071                       ;-------------------------------------------------------
0072               edkey.action.bot.exit:
0073 64AE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64B0 6156     
0074               
0075               
0076               
0077               *---------------------------------------------------------------
0078               * Goto bottom of screen
0079               *---------------------------------------------------------------
0080               edkey.action.botscr:
0081 64B2 0649  14         dect  stack
0082 64B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0083                       ;-------------------------------------------------------
0084                       ; Crunch current row if dirty
0085                       ;-------------------------------------------------------
0086 64B6 8820  50         c     @fb.row.dirty,@w$ffff
     64B8 A30A     
     64BA 2022     
0087 64BC 1604  14         jne   edkey.action.botscr.cursor
0088 64BE 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64C0 7050     
0089 64C2 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64C4 A30A     
0090                       ;-------------------------------------------------------
0091                       ; Position cursor
0092                       ;-------------------------------------------------------
0093               edkey.action.botscr.cursor:
0094 64C6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64C8 A31A     
0095               
0096 64CA 8820  50         c     @fb.scrrows,@edb.lines
     64CC A31C     
     64CE A504     
0097 64D0 1503  14         jgt   edkey.action.botscr.eof
0098 64D2 C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     64D4 A31C     
0099 64D6 1002  14         jmp   !
0100                       ;-------------------------------------------------------
0101                       ; Cursor at EOF
0102                       ;-------------------------------------------------------
0103               edkey.action.botscr.eof:
0104 64D8 C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     64DA A504     
0105                       ;-------------------------------------------------------
0106                       ; Position cursor
0107                       ;-------------------------------------------------------
0108 64DC 0604  14 !       dec   tmp0                  ; Base 0
0109 64DE C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     64E0 A306     
0110 64E2 04E0  34         clr   @fb.column            ; Frame buffer column 0
     64E4 A30C     
0111               
0112 64E6 C120  34         mov   @fb.row,tmp0          ;
     64E8 A306     
0113 64EA 0A84  32         sla   tmp0,8                ; Position cursor
0114 64EC C804  30         mov   tmp0,@wyx             ;
     64EE 832A     
0115               
0116 64F0 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     64F2 30C0     
0117               
0118 64F4 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     64F6 36AE     
0119                                                   ; | i  @fb.row        = Row in frame buffer
0120                                                   ; / o  @fb.row.length = Length of row
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               edkey.action.botscr.exit:
0125 64F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 64FA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64FC 6156     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Position cursor on first row in frame buffer and
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               *
0018               * Register usage
0019               * none
0020               ********|*****|*********************|**************************
0021               edkey.fb.goto.toprow:
0022 64FE 0649  14         dect  stack
0023 6500 C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;-------------------------------------------------------
0025                       ; Assert
0026                       ;-------------------------------------------------------
0027 6502 C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     6504 A006     
0028 6506 8120  34         c     @edb.lines,tmp0       ; /
     6508 A504     
0029 650A 1B05  14         jh    !                     ; No, keep on going
0030 650C C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     650E A504     
     6510 A006     
0031 6512 0620  34         dec   @parm1                ; / Base 0
     6514 A006     
0032                       ;-------------------------------------------------------
0033                       ; Goto line
0034                       ;-------------------------------------------------------
0035 6516 0720  34 !       seto  @fb.status.dirty      ; Trigger refresh of status lines
     6518 A31A     
0036               
0037 651A 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     651C 7B12     
0038                                                   ; | i  @parm1 = Line to start with
0039                                                   ; /             (becomes @fb.topline)
0040               
0041 651E 04E0  34         clr   @fb.row               ; Frame buffer line 0
     6520 A306     
0042 6522 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6524 A30C     
0043 6526 04E0  26         clr   @wyx                  ; Position VDP cursor
     6528 832A     
0044 652A 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     652C 30C0     
0045               
0046 652E 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6530 36AE     
0047                                                   ; | i  @fb.row        = Row in frame buffer
0048                                                   ; / o  @fb.row.length = Length of row
0049               
0050                       ;-------------------------------------------------------
0051                       ; Exit
0052                       ;-------------------------------------------------------
0053 6532 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 6534 0460  28         b     @edkey.keyscan.hook.debounce
     6536 6156     
0055                                                   ; Back to editor main
0056               
0057               
0058               *---------------------------------------------------------------
0059               * Goto specified line (@parm1) in editor buffer
0060               *---------------------------------------------------------------
0061               edkey.action.goto:
0062                       ;-------------------------------------------------------
0063                       ; Crunch current row if dirty
0064                       ;-------------------------------------------------------
0065 6538 8820  50         c     @fb.row.dirty,@w$ffff
     653A A30A     
     653C 2022     
0066 653E 1609  14         jne   edkey.action.goto.refresh
0067               
0068 6540 0649  14         dect  stack
0069 6542 C660  46         mov   @parm1,*stack         ; Push parm1
     6544 A006     
0070 6546 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6548 7050     
0071 654A C839  50         mov   *stack+,@parm1        ; Pop parm1
     654C A006     
0072               
0073 654E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6550 A30A     
0074                       ;-------------------------------------------------------
0075                       ; Refresh page
0076                       ;-------------------------------------------------------
0077               edkey.action.goto.refresh:
0078 6552 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6554 A312     
0079               
0080 6556 0460  28         b     @edkey.fb.goto.toprow ; Position cursor and exit
     6558 64FE     
0081                                                   ; \ i  @parm1 = Line in editor buffer
0082                                                   ; /
                   < stevie_b1.asm
0089                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008 655A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     655C A506     
0009 655E 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6560 30C0     
0010                       ;-------------------------------------------------------
0011                       ; Assert 1 - Empty line
0012                       ;-------------------------------------------------------
0013               edkey.action.del_char.sanity1:
0014 6562 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6564 A308     
0015 6566 1336  14         jeq   edkey.action.del_char.exit
0016                                                   ; Exit if empty line
0017               
0018 6568 C120  34         mov   @fb.current,tmp0      ; Get pointer
     656A A302     
0019                       ;-------------------------------------------------------
0020                       ; Assert 2 - Already at EOL
0021                       ;-------------------------------------------------------
0022               edkey.action.del_char.sanity2:
0023 656C C1C6  18         mov   tmp2,tmp3             ; \
0024 656E 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0025 6570 81E0  34         c     @fb.column,tmp3
     6572 A30C     
0026 6574 110A  14         jlt   edkey.action.del_char.sanity3
0027               
0028                       ;------------------------------------------------------
0029                       ; At EOL - clear current character
0030                       ;------------------------------------------------------
0031 6576 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0032 6578 D505  30         movb  tmp1,*tmp0            ; /
0033 657A C820  54         mov   @fb.column,@fb.row.length
     657C A30C     
     657E A308     
0034                                                   ; Row length - 1
0035 6580 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6582 A30A     
0036 6584 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6586 A318     
0037 6588 1025  14         jmp  edkey.action.del_char.exit
0038                       ;-------------------------------------------------------
0039                       ; Assert 3 - Abort if row length > 80
0040                       ;-------------------------------------------------------
0041               edkey.action.del_char.sanity3:
0042 658A 0286  22         ci    tmp2,colrow
     658C 0050     
0043 658E 1204  14         jle   edkey.action.del_char.prep
0044                                                   ; Continue if row length <= 80
0045                       ;-----------------------------------------------------------------------
0046                       ; CPU crash
0047                       ;-----------------------------------------------------------------------
0048 6590 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6592 FFCE     
0049 6594 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6596 2026     
0050                       ;-------------------------------------------------------
0051                       ; Calculate number of characters to move
0052                       ;-------------------------------------------------------
0053               edkey.action.del_char.prep:
0054 6598 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0055 659A 61E0  34         s     @fb.column,tmp3
     659C A30C     
0056 659E 0607  14         dec   tmp3                  ; Remove base 1 offset
0057 65A0 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0058 65A2 C144  18         mov   tmp0,tmp1
0059 65A4 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0060 65A6 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     65A8 A30C     
0061                       ;-------------------------------------------------------
0062                       ; Setup pointers
0063                       ;-------------------------------------------------------
0064 65AA C120  34         mov   @fb.current,tmp0      ; Get pointer
     65AC A302     
0065 65AE C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0066 65B0 0585  14         inc   tmp1                  ; / tmp1 = Next character
0067                       ;-------------------------------------------------------
0068                       ; Loop from current character until end of line
0069                       ;-------------------------------------------------------
0070               edkey.action.del_char.loop:
0071 65B2 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0072 65B4 0606  14         dec   tmp2
0073 65B6 16FD  14         jne   edkey.action.del_char.loop
0074                       ;-------------------------------------------------------
0075                       ; Special treatment if line 80 characters long
0076                       ;-------------------------------------------------------
0077 65B8 0206  20         li    tmp2,colrow
     65BA 0050     
0078 65BC 81A0  34         c     @fb.row.length,tmp2
     65BE A308     
0079 65C0 1603  14         jne   edkey.action.del_char.save
0080 65C2 0604  14         dec   tmp0                  ; One time adjustment
0081 65C4 04C5  14         clr   tmp1
0082 65C6 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0083                       ;-------------------------------------------------------
0084                       ; Save variables
0085                       ;-------------------------------------------------------
0086               edkey.action.del_char.save:
0087 65C8 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65CA A30A     
0088 65CC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65CE A318     
0089 65D0 0620  34         dec   @fb.row.length        ; @fb.row.length--
     65D2 A308     
0090                       ;-------------------------------------------------------
0091                       ; Exit
0092                       ;-------------------------------------------------------
0093               edkey.action.del_char.exit:
0094 65D4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65D6 6156     
0095               
0096               
0097               *---------------------------------------------------------------
0098               * Delete until end of line
0099               *---------------------------------------------------------------
0100               edkey.action.del_eol:
0101 65D8 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     65DA A506     
0102 65DC 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     65DE 30C0     
0103 65E0 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     65E2 A308     
0104 65E4 1311  14         jeq   edkey.action.del_eol.exit
0105                                                   ; Exit if empty line
0106                       ;-------------------------------------------------------
0107                       ; Prepare for erase operation
0108                       ;-------------------------------------------------------
0109 65E6 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65E8 A302     
0110 65EA C1A0  34         mov   @fb.colsline,tmp2
     65EC A30E     
0111 65EE 61A0  34         s     @fb.column,tmp2
     65F0 A30C     
0112 65F2 04C5  14         clr   tmp1
0113                       ;-------------------------------------------------------
0114                       ; Loop until last column in frame buffer
0115                       ;-------------------------------------------------------
0116               edkey.action.del_eol_loop:
0117 65F4 DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0118 65F6 0606  14         dec   tmp2
0119 65F8 16FD  14         jne   edkey.action.del_eol_loop
0120                       ;-------------------------------------------------------
0121                       ; Save variables
0122                       ;-------------------------------------------------------
0123 65FA 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65FC A30A     
0124 65FE 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6600 A318     
0125               
0126 6602 C820  54         mov   @fb.column,@fb.row.length
     6604 A30C     
     6606 A308     
0127                                                   ; Set new row length
0128                       ;-------------------------------------------------------
0129                       ; Exit
0130                       ;-------------------------------------------------------
0131               edkey.action.del_eol.exit:
0132 6608 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     660A 6156     
0133               
0134               
0135               *---------------------------------------------------------------
0136               * Delete current line
0137               *---------------------------------------------------------------
0138               edkey.action.del_line:
0139                       ;-------------------------------------------------------
0140                       ; Get current line in editor buffer
0141                       ;-------------------------------------------------------
0142 660C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     660E 30C0     
0143 6610 04E0  34         clr   @fb.row.dirty         ; Discard current line
     6612 A30A     
0144               
0145 6614 C820  54         mov   @fb.topline,@parm1    ; \
     6616 A304     
     6618 A006     
0146 661A A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     661C A306     
     661E A006     
0147 6620 05A0  34         inc   @parm1                ; /
     6622 A006     
0148               
0149                       ;-------------------------------------------------------
0150                       ; Special handling if at BOT (no real line)
0151                       ;-------------------------------------------------------
0152 6624 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     6626 A006     
     6628 A504     
0153 662A 1207  14         jle   edkey.action.del_line.doit
0154                                                   ; No, is real line. Continue with delete.
0155               
0156 662C C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     662E A304     
     6630 A006     
0157 6632 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6634 7B12     
0158                                                   ; \ i  @parm1 = Line to start with
0159                                                   ; /
0160 6636 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6638 63C6     
0161                       ;-------------------------------------------------------
0162                       ; Delete line in editor buffer
0163                       ;-------------------------------------------------------
0164               edkey.action.del_line.doit:
0165 663A 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     663C 7BAA     
0166                                                   ; \ i  @parm1 = Line number to delete
0167                                                   ; /
0168               
0169 663E 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     6640 A006     
     6642 A504     
0170 6644 1302  14         jeq   edkey.action.del_line.refresh
0171                                                   ; Yes, skip get length. No need for garbage.
0172                       ;-------------------------------------------------------
0173                       ; Get length of current row in frame buffer
0174                       ;-------------------------------------------------------
0175 6646 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     6648 36AE     
0176                                                   ; \ i  @fb.row        = Current row
0177                                                   ; / o  @fb.row.length = Length of row
0178                       ;-------------------------------------------------------
0179                       ; Refresh frame buffer
0180                       ;-------------------------------------------------------
0181               edkey.action.del_line.refresh:
0182 664A C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     664C A304     
     664E A006     
0183               
0184 6650 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6652 7B12     
0185                                                   ; \ i  @parm1 = Line to start with
0186                                                   ; /
0187               
0188 6654 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6656 A506     
0189                       ;-------------------------------------------------------
0190                       ; Special treatment if current line was last line
0191                       ;-------------------------------------------------------
0192 6658 C120  34         mov   @fb.topline,tmp0
     665A A304     
0193 665C A120  34         a     @fb.row,tmp0
     665E A306     
0194               
0195 6660 8804  34         c     tmp0,@edb.lines       ; Was last line?
     6662 A504     
0196 6664 1102  14         jlt   edkey.action.del_line.exit
0197               
0198 6666 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6668 63C6     
0199                       ;-------------------------------------------------------
0200                       ; Exit
0201                       ;-------------------------------------------------------
0202               edkey.action.del_line.exit:
0203 666A 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     666C 627E     
                   < stevie_b1.asm
0090                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010 666E 0204  20         li    tmp0,>2000            ; White space
     6670 2000     
0011 6672 C804  38         mov   tmp0,@parm1
     6674 A006     
0012               edkey.action.ins_char:
0013 6676 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6678 A506     
0014 667A 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     667C 30C0     
0015                       ;-------------------------------------------------------
0016                       ; Check 1 - Empty line
0017                       ;-------------------------------------------------------
0018               edkey.actions.ins.char.empty_line:
0019 667E C120  34         mov   @fb.current,tmp0      ; Get pointer
     6680 A302     
0020 6682 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6684 A308     
0021 6686 1342  14         jeq   edkey.action.ins_char.append
0022                                                   ; Add character in append mode
0023                       ;-------------------------------------------------------
0024                       ; Check 2 - line-wrap if at character 80
0025                       ;-------------------------------------------------------
0026 6688 C160  34         mov   @fb.column,tmp1
     668A A30C     
0027 668C 0285  22         ci    tmp1,colrow-1         ; At 80th character?
     668E 004F     
0028 6690 1118  14         jlt   !
0029 6692 C160  34         mov   @fb.row.length,tmp1
     6694 A308     
0030 6696 0285  22         ci    tmp1,colrow
     6698 0050     
0031 669A 1613  14         jne   !
0032                       ;-------------------------------------------------------
0033                       ; Wrap to new line
0034                       ;-------------------------------------------------------
0035 669C 0649  14         dect  Stack
0036 669E C660  46         mov   @parm1,*stack         ; Save character to add
     66A0 A006     
0037               
0038 66A2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66A4 A506     
0039 66A6 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     66A8 7050     
0040 66AA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     66AC A30A     
0041               
0042 66AE 0720  34         seto  @parm1                ; Insert on following line
     66B0 A006     
0043 66B2 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66B4 6FB6     
0044                                                   ; \ i  @parm1 = 0 for insert current line
0045                                                   ; /            >0 for insert following line
0046               
0047 66B6 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     66B8 6F14     
0048 66BA 04C6  14         clr   tmp2                  ; Clear line length
0049 66BC C839  50         mov   *stack+,@parm1        ; Restore character to add
     66BE A006     
0050 66C0 1025  14         jmp   edkey.action.ins_char.append
0051                       ;-------------------------------------------------------
0052                       ; Check 3 - EOL
0053                       ;-------------------------------------------------------
0054 66C2 8820  50 !       c     @fb.column,@fb.row.length
     66C4 A30C     
     66C6 A308     
0055 66C8 1321  14         jeq   edkey.action.ins_char.append
0056                                                   ; Add character in append mode
0057                       ;-------------------------------------------------------
0058                       ; Check 4 - Insert only until line length reaches 80th column
0059                       ;-------------------------------------------------------
0060 66CA C160  34         mov   @fb.row.length,tmp1
     66CC A308     
0061 66CE 0285  22         ci    tmp1,colrow
     66D0 0050     
0062 66D2 1101  14         jlt   edkey.action.ins_char.prep
0063 66D4 101D  14         jmp   edkey.action.ins_char.exit
0064                       ;-------------------------------------------------------
0065                       ; Calculate number of characters to move
0066                       ;-------------------------------------------------------
0067               edkey.action.ins_char.prep:
0068 66D6 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0069 66D8 61E0  34         s     @fb.column,tmp3
     66DA A30C     
0070 66DC 0607  14         dec   tmp3                  ; Remove base 1 offset
0071 66DE A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0072 66E0 C144  18         mov   tmp0,tmp1
0073 66E2 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0074 66E4 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     66E6 A30C     
0075                       ;-------------------------------------------------------
0076                       ; Loop from end of line until current character
0077                       ;-------------------------------------------------------
0078               edkey.action.ins_char.loop:
0079 66E8 D554  38         movb  *tmp0,*tmp1           ; Move char to the right
0080 66EA 0604  14         dec   tmp0
0081 66EC 0605  14         dec   tmp1
0082 66EE 0606  14         dec   tmp2
0083 66F0 16FB  14         jne   edkey.action.ins_char.loop
0084                       ;-------------------------------------------------------
0085                       ; Insert specified character at current position
0086                       ;-------------------------------------------------------
0087 66F2 D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     66F4 A006     
0088                       ;-------------------------------------------------------
0089                       ; Save variables and exit
0090                       ;-------------------------------------------------------
0091 66F6 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     66F8 A30A     
0092 66FA 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     66FC A318     
0093 66FE 05A0  34         inc   @fb.column
     6700 A30C     
0094 6702 05A0  26         inc   @wyx
     6704 832A     
0095 6706 05A0  34         inc   @fb.row.length        ; @fb.row.length
     6708 A308     
0096 670A 1002  14         jmp   edkey.action.ins_char.exit
0097                       ;-------------------------------------------------------
0098                       ; Add character in append mode
0099                       ;-------------------------------------------------------
0100               edkey.action.ins_char.append:
0101 670C 0460  28         b     @edkey.action.char.overwrite
     670E 67F0     
0102                       ;-------------------------------------------------------
0103                       ; Exit
0104                       ;-------------------------------------------------------
0105               edkey.action.ins_char.exit:
0106 6710 0460  28         b     @edkey.keyscan.hook.debounce
     6712 6156     
0107                                                   ; Back to editor main
0108               
0109               
0110               
0111               
0112               *---------------------------------------------------------------
0113               * Insert new line on current line
0114               *---------------------------------------------------------------
0115               edkey.action.ins_line:
0116 6714 04E0  34         clr   @parm1                ; Insert new line on curren line
     6716 A006     
0117 6718 06A0  32         bl    @fb.insert.line       ; Insert new line
     671A 6FB6     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_line.exit:
0122 671C 0460  28         b     @edkey.keyscan.hook.debounce
     671E 6156     
0123                                                   ; Back to editor main
0124               
0125               
0126               *---------------------------------------------------------------
0127               * Insert new line on following line
0128               *---------------------------------------------------------------
0129               edkey.action.ins_line_after:
0130 6720 0720  34         seto  @parm1                ; Insert new line on following line
     6722 A006     
0131 6724 06A0  32         bl    @fb.insert.line       ; Insert new line
     6726 6FB6     
0132                       ;-------------------------------------------------------
0133                       ; Exit
0134                       ;-------------------------------------------------------
0135               edkey.action.ins_line_after.exit:
0136 6728 0460  28         b     @edkey.keyscan.hook.debounce
     672A 6156     
0137                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 672C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     672E A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 6730 8820  50         c     @fb.row.dirty,@w$ffff
     6732 A30A     
     6734 2022     
0013 6736 1606  14         jne   edkey.action.enter.newline
0014 6738 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     673A A506     
0015 673C 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     673E 7050     
0016 6740 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6742 A30A     
0017                       ;-------------------------------------------------------
0018                       ; Insert a new line if insert mode is on
0019                       ;-------------------------------------------------------
0020               edkey.action.enter.newline:
0021 6744 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6746 A50A     
0022 6748 1307  14         jeq   edkey.action.enter.upd_counter
0023                                                   ; Overwrite mode, skip insert
0024               
0025 674A C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     674C A50C     
0026 674E 1304  14         jeq   edkey.action.enter.upd_counter
0027                                                   ; Autoinsert off, skip insert
0028               
0029 6750 0720  34         seto  @parm1                ; Insert line on following line
     6752 A006     
0030 6754 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6756 6FB6     
0031                                                   ; \  i  @parm1 = current/following line
0032                                                   ; /
0033                       ;-------------------------------------------------------
0034                       ; Update line counter
0035                       ;-------------------------------------------------------
0036               edkey.action.enter.upd_counter:
0037 6758 C120  34         mov   @fb.topline,tmp0
     675A A304     
0038 675C A120  34         a     @fb.row,tmp0
     675E A306     
0039 6760 0584  14         inc   tmp0
0040 6762 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     6764 A504     
0041 6766 1102  14         jlt   edkey.action.newline  ; No, continue newline
0042 6768 05A0  34         inc   @edb.lines            ; Total lines++
     676A A504     
0043                       ;-------------------------------------------------------
0044                       ; Process newline
0045                       ;-------------------------------------------------------
0046               edkey.action.newline:
0047                       ;-------------------------------------------------------
0048                       ; Scroll 1 line if cursor at bottom row of screen
0049                       ;-------------------------------------------------------
0050 676C C120  34         mov   @fb.scrrows,tmp0
     676E A31C     
0051 6770 0604  14         dec   tmp0
0052 6772 8120  34         c     @fb.row,tmp0
     6774 A306     
0053 6776 110C  14         jlt   edkey.action.newline.down
0054                       ;-------------------------------------------------------
0055                       ; Scroll
0056                       ;-------------------------------------------------------
0057 6778 C120  34         mov   @fb.scrrows,tmp0
     677A A31C     
0058 677C C820  54         mov   @fb.topline,@parm1
     677E A304     
     6780 A006     
0059 6782 05A0  34         inc   @parm1
     6784 A006     
0060 6786 06A0  32         bl    @fb.refresh
     6788 7B12     
0061 678A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     678C A312     
0062 678E 1004  14         jmp   edkey.action.newline.rest
0063                       ;-------------------------------------------------------
0064                       ; Move cursor down a row, there are still rows left
0065                       ;-------------------------------------------------------
0066               edkey.action.newline.down:
0067 6790 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     6792 A306     
0068 6794 06A0  32         bl    @down                 ; Row++ VDP cursor
     6796 26CC     
0069                       ;-------------------------------------------------------
0070                       ; Set VDP cursor and save variables
0071                       ;-------------------------------------------------------
0072               edkey.action.newline.rest:
0073 6798 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     679A 7B24     
0074                                                   ; | o  @outparm1 = Matching column
0075                                                   ; / o  @outparm2 = Char on matching column
0076               
0077 679C C120  34         mov   @outparm1,tmp0
     679E A018     
0078 67A0 C804  38         mov   tmp0,@fb.column
     67A2 A30C     
0079 67A4 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     67A6 26DE     
0080 67A8 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     67AA 36AE     
0081 67AC 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67AE 30C0     
0082 67B0 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     67B2 A318     
0083                       ;-------------------------------------------------------
0084                       ; Exit
0085                       ;-------------------------------------------------------
0086               edkey.action.newline.exit:
0087 67B4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67B6 6156     
0088               
0089               
0090               
0091               
0092               *---------------------------------------------------------------
0093               * Toggle insert/overwrite mode
0094               *---------------------------------------------------------------
0095               edkey.action.ins_onoff:
0096 67B8 0649  14         dect  stack
0097 67BA C64B  30         mov   r11,*stack            ; Save return address
0098               
0099 67BC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67BE A31A     
0100 67C0 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     67C2 A50A     
0101                       ;-------------------------------------------------------
0102                       ; Exit
0103                       ;-------------------------------------------------------
0104               edkey.action.ins_onoff.exit:
0105 67C4 C2F9  30         mov   *stack+,r11           ; Pop r11
0106 67C6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67C8 6156     
0107               
0108               
0109               
0110               *---------------------------------------------------------------
0111               * Add character (frame buffer)
0112               *---------------------------------------------------------------
0113               edkey.action.char:
0114 67CA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67CC A31A     
0115                       ;-------------------------------------------------------
0116                       ; Asserts
0117                       ;-------------------------------------------------------
0118 67CE D105  18         movb  tmp1,tmp0             ; Get keycode
0119 67D0 0984  32         srl   tmp0,8                ; MSB to LSB
0120               
0121 67D2 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     67D4 0020     
0122 67D6 112B  14         jlt   edkey.action.char.exit
0123                                                   ; Yes, skip
0124               
0125 67D8 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     67DA 007E     
0126 67DC 1528  14         jgt   edkey.action.char.exit
0127                                                   ; Yes, skip
0128                       ;-------------------------------------------------------
0129                       ; Setup
0130                       ;-------------------------------------------------------
0131 67DE 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     67E0 A506     
0132 67E2 D805  38         movb  tmp1,@parm1           ; Store character for insert
     67E4 A006     
0133 67E6 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     67E8 A50A     
0134 67EA 1302  14         jeq   edkey.action.char.overwrite
0135                       ;-------------------------------------------------------
0136                       ; Insert mode
0137                       ;-------------------------------------------------------
0138               edkey.action.char.insert:
0139 67EC 0460  28         b     @edkey.action.ins_char
     67EE 6676     
0140                       ;-------------------------------------------------------
0141                       ; Overwrite mode - Write character
0142                       ;-------------------------------------------------------
0143               edkey.action.char.overwrite:
0144 67F0 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67F2 30C0     
0145 67F4 C120  34         mov   @fb.current,tmp0      ; Get pointer
     67F6 A302     
0146               
0147 67F8 D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     67FA A006     
0148 67FC 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     67FE A30A     
0149 6800 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6802 A318     
0150                       ;-------------------------------------------------------
0151                       ; Last column on screen reached?
0152                       ;-------------------------------------------------------
0153 6804 C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79.
     6806 A30C     
0154 6808 0285  22         ci    tmp1,colrow - 1       ; / Last column on screen?
     680A 004F     
0155 680C 1105  14         jlt   edkey.action.char.overwrite.incx
0156                                                   ; No, increase X position
0157               
0158 680E 0205  20         li    tmp1,colrow           ; \
     6810 0050     
0159 6812 C805  38         mov   tmp1,@fb.row.length   ; / Yes, Set row length and exit.
     6814 A308     
0160 6816 100B  14         jmp   edkey.action.char.exit
0161                       ;-------------------------------------------------------
0162                       ; Increase column
0163                       ;-------------------------------------------------------
0164               edkey.action.char.overwrite.incx:
0165 6818 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     681A A30C     
0166 681C 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     681E 832A     
0167                       ;-------------------------------------------------------
0168                       ; Update line length in frame buffer
0169                       ;-------------------------------------------------------
0170 6820 8820  50         c     @fb.column,@fb.row.length
     6822 A30C     
     6824 A308     
0171                                                   ; column < line length ?
0172 6826 1103  14         jlt   edkey.action.char.exit
0173                                                   ; Yes, don't update row length
0174 6828 C820  54         mov   @fb.column,@fb.row.length
     682A A30C     
     682C A308     
0175                                                   ; Set row length
0176                       ;-------------------------------------------------------
0177                       ; Exit
0178                       ;-------------------------------------------------------
0179               edkey.action.char.exit:
0180 682E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6830 6156     
                   < stevie_b1.asm
0092                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 6832 0649  14         dect  stack
0009 6834 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6836 0649  14         dect  stack
0011 6838 C660  42         mov   @wyx,*stack           ; Push cursor YX
     683A 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 683C C120  34         mov   @tv.ruler.visible,tmp0
     683E A210     
0016                                                   ; Ruler currently off?
0017 6840 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 6842 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6844 A318     
0024 6846 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     6848 A210     
0025 684A 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 684C C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     684E A31C     
0031 6850 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 6852 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     6854 A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 6856 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 6858 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     685A A318     
0038 685C 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     685E A210     
0039 6860 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     6862 7AB8     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 6864 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     6866 7A42     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 6868 C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     686A 832A     
0050 686C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 686E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6870 6156     
                   < stevie_b1.asm
0093                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 6872 C120  34         mov   @edb.dirty,tmp0
     6874 A506     
0012 6876 1302  14         jeq   !
0013 6878 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     687A 7994     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 687C 0460  28 !       b     @tv.quit
     687E 3304     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 6880 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6882 A50E     
     6884 2022     
0025 6886 1302  14         jeq   !
0026 6888 0460  28         b     @edkey.action.block.copy
     688A 6904     
0027                                                   ; Copy code block
0028 688C 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     688E 79A2     
                   < stevie_b1.asm
0094                       copy  "edkey.fb.file.asm"           ; File related actions
     **** ****     > edkey.fb.file.asm
0001               * FILE......: edkey.fb.fíle.asm
0002               * Purpose...: File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load next or previous file based on last char in suffix
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.fname.inc.load
0008               * b   @edkey.action.fb.fname.dec.load
0009               *---------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.cmdlen
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.fb.fname.dec.load:
0017 6890 0649  14         dect  stack
0018 6892 C644  30         mov   tmp0,*stack           ; Push tmp0
0019                       ;------------------------------------------------------
0020                       ; Adjust filename
0021                       ;------------------------------------------------------
0022 6894 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     6896 A008     
0023               
0024 6898 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     689A 6890     
0025 689C C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     689E A72C     
0026                                                   ; in "Unsaved changes" dialog
0027               
0028 68A0 1008  14         jmp   edkey.action.fb.fname.doit
0029               
0030               
0031               edkey.action.fb.fname.inc.load:
0032 68A2 0649  14         dect  stack
0033 68A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0034                       ;------------------------------------------------------
0035                       ; Adjust filename
0036                       ;------------------------------------------------------
0037 68A6 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     68A8 A008     
0038               
0039 68AA 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     68AC 68A2     
0040 68AE C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68B0 A72C     
0041                                                   ; in "Unsaved changes" dialog
0042               
0043                       ;------------------------------------------------------
0044                       ; Process filename
0045                       ;------------------------------------------------------
0046               edkey.action.fb.fname.doit:
0047 68B2 C120  34         mov   @edb.filename.ptr,tmp0
     68B4 A514     
0048 68B6 1311  14         jeq   edkey.action.fb.fname.exit
0049                                                   ; Exit early if new file.
0050               
0051 68B8 0284  22         ci    tmp0,txt.newfile
     68BA 3A48     
0052 68BC 130E  14         jeq   edkey.action.fb.fname.exit
0053                                                   ; Exit early if "[New file]"
0054               
0055 68BE C804  38         mov   tmp0,@parm1           ; Set filename
     68C0 A006     
0056                       ;------------------------------------------------------
0057                       ; Show dialog "Unsaved changed" if editor buffer dirty
0058                       ;------------------------------------------------------
0059 68C2 C120  34         mov   @edb.dirty,tmp0
     68C4 A506     
0060 68C6 1303  14         jeq   !
0061 68C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 68CA 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     68CC 7994     
0063                       ;------------------------------------------------------
0064                       ; Update suffix
0065                       ;------------------------------------------------------
0066 68CE 06A0  32 !       bl    @fm.browse.fname.suffix
     68D0 790E     
0067                                                   ; Filename suffix adjust
0068                                                   ; i  \ parm1 = Pointer to filename
0069                                                   ; i  / parm2 = >FFFF or >0000
0070                       ;------------------------------------------------------
0071                       ; Load file
0072                       ;------------------------------------------------------
0073               edkey.action.fb.fname.doit.loadfile:
0074 68D2 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     68D4 7A42     
0075               
0076 68D6 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     68D8 78D0     
0077                                                   ; \ i  parm1 = Pointer to length-prefixed
0078                                                   ; /            device/filename string
0079               
0080               
0081                       ;------------------------------------------------------
0082                       ; Exit
0083                       ;------------------------------------------------------
0084               edkey.action.fb.fname.exit:
0085 68DA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 68DC 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     68DE 644C     
                   < stevie_b1.asm
0095                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 68E0 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     68E2 7B64     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 68E4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68E6 6156     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 68E8 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     68EA 7B6E     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 68EC 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     68EE 6E20     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 68F0 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     68F2 7B78     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 68F4 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     68F6 6E20     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 68F8 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     68FA 764A     
0042 68FC 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     68FE 7B8C     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 6900 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6902 6156     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 6904 0649  14         dect  stack
0054 6906 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 6908 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     690A A510     
     690C 2022     
0059 690E 1315  14         jeq   edkey.action.block.copy.exit
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
0064 6910 C120  30         mov   @wyx,tmp0             ; Get cursor position
     6912 832A     
0065 6914 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     6916 FF00     
0066 6918 C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     691A A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 691C 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     691E 764A     
0071               
0072 6920 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     6922 A006     
0073 6924 06A0  32         bl    @edb.block.copy       ; Copy code block
     6926 7BA0     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 6928 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     692A A018     
     692C 2000     
0078 692E 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 6930 C820  54         mov   @fb.yxsave,@parm1
     6932 A316     
     6934 A006     
0082 6936 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     6938 7B00     
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
0089 693A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 693C 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     693E 6156     
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
0102 6940 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6942 A510     
     6944 2022     
0103 6946 130F  14         jeq   edkey.action.block.delete.exit
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
0108 6948 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     694A 764A     
0109               
0110 694C 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     694E A006     
0111 6950 06A0  32         bl    @edb.block.delete     ; Delete code block
     6952 7B96     
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
0117 6954 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6956 A018     
     6958 2000     
0118 695A 1305  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 695C C820  54         mov   @fb.topline,@parm1
     695E A304     
     6960 A006     
0122 6962 0460  28         b     @edkey.fb.goto.toprow ; Position on top row in frame buffer
     6964 64FE     
0123                                                   ; \ i  @parm1 = Line to display as top row
0124                                                   ; /
0125                       ;-------------------------------------------------------
0126                       ; Exit
0127                       ;-------------------------------------------------------
0128               edkey.action.block.delete.exit:
0129 6966 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6968 6156     
0130               
0131               
0132               *---------------------------------------------------------------
0133               * Move code block
0134               ********|*****|*********************|**************************
0135               edkey.action.block.move:
0136                       ;-------------------------------------------------------
0137                       ; Exit early if nothing to do
0138                       ;-------------------------------------------------------
0139 696A 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     696C A510     
     696E 2022     
0140 6970 1313  14         jeq   edkey.action.block.move.exit
0141                                                   ; Yes, exit early
0142                       ;-------------------------------------------------------
0143                       ; Delete
0144                       ;-------------------------------------------------------
0145 6972 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6974 764A     
0146               
0147 6976 0720  34         seto  @parm1                ; Set message to "Moving block..."
     6978 A006     
0148 697A 06A0  32         bl    @edb.block.copy       ; Copy code block
     697C 7BA0     
0149                                                   ; \ i  @parm1    = Message flag
0150                                                   ; / o  @outparm1 = >ffff if success
0151               
0152 697E 0720  34         seto  @parm1                ; Don't display delete message
     6980 A006     
0153 6982 06A0  32         bl    @edb.block.delete     ; Delete code block
     6984 7B96     
0154                                                   ; \ i  @parm1    = Display message Yes/No
0155                                                   ; / o  @outparm1 = >ffff if success
0156                       ;-------------------------------------------------------
0157                       ; Reposition in frame buffer
0158                       ;-------------------------------------------------------
0159 6986 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6988 A018     
     698A 2000     
0160 698C 13EC  14         jeq   edkey.action.block.delete.exit
0161                                                   ; If yes, exit early
0162               
0163 698E C820  54         mov   @fb.topline,@parm1
     6990 A304     
     6992 A006     
0164 6994 0460  28         b     @edkey.fb.goto.toprow ; Position on top row in frame buffer
     6996 64FE     
0165                                                   ; \ i  @parm1 = Line to display as top row
0166                                                   ; /
0167                       ;-------------------------------------------------------
0168                       ; Exit
0169                       ;-------------------------------------------------------
0170               edkey.action.block.move.exit:
0171 6998 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     699A 6156     
0172               
0173               
0174               *---------------------------------------------------------------
0175               * Goto marker M1
0176               ********|*****|*********************|**************************
0177               edkey.action.block.goto.m1:
0178 699C 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     699E A50E     
     69A0 2022     
0179 69A2 1307  14         jeq   edkey.action.block.goto.m1.exit
0180                                                   ; Yes, exit early
0181                       ;-------------------------------------------------------
0182                       ; Goto marker M1
0183                       ;-------------------------------------------------------
0184 69A4 C820  54         mov   @edb.block.m1,@parm1
     69A6 A50E     
     69A8 A006     
0185 69AA 0620  34         dec   @parm1                ; Base 0 offset
     69AC A006     
0186               
0187 69AE 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     69B0 6538     
0188                                                   ; \ i @parm1 = Target line in EB
0189                                                   ; /
0190                       ;-------------------------------------------------------
0191                       ; Exit
0192                       ;-------------------------------------------------------
0193               edkey.action.block.goto.m1.exit:
0194 69B2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69B4 6156     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
0008 69B6 0649  14         dect  stack
0009 69B8 C64B  30         mov   r11,*stack            ; Save return address
0010 69BA 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     69BC 7B36     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
0015 69BE C2F9  30         mov   *stack+,r11           ; Pop r11
0016 69C0 0460  28         b     @edkey.keyscan.hook.debounce
     69C2 6156     
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
0024 69C4 0649  14         dect  stack
0025 69C6 C64B  30         mov   r11,*stack            ; Save return address
0026 69C8 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     69CA 7B48     
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
0031 69CC C2F9  30         mov   *stack+,r11           ; Pop r11
0032 69CE 0460  28         b     @edkey.keyscan.hook.debounce
     69D0 6156     
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0097                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 69D2 0649  14         dect  stack
0017 69D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0018 69D6 0204  20         li    tmp0,clip1
     69D8 3100     
0019 69DA 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 69DC 0649  14         dect  stack
0022 69DE C644  30         mov   tmp0,*stack           ; Push tmp0
0023 69E0 0204  20         li    tmp0,clip2
     69E2 3200     
0024 69E4 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 69E6 0649  14         dect  stack
0027 69E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 69EA 0204  20         li    tmp0,clip3
     69EC 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 69EE C804  38 !       mov   tmp0,@parm1
     69F0 A006     
0033 69F2 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     69F4 7B82     
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
0040 69F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 69F8 C820  54         mov   @fb.topline,@parm1    ; Get topline
     69FA A304     
     69FC A006     
0043 69FE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A00 64FE     
0044                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0098                       ;-----------------------------------------------------------------------
0099                       ; Keyboard actions - Command Buffer
0100                       ;-----------------------------------------------------------------------
0101                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
0008 6A02 C120  34         mov   @cmdb.column,tmp0
     6A04 A714     
0009 6A06 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6A08 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     6A0A A714     
0014 6A0C 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6A0E A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 6A10 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6A12 6156     
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
0025 6A14 06A0  32         bl    @cmdb.cmd.getlength
     6A16 7A6A     
0026 6A18 8820  50         c     @cmdb.column,@outparm1
     6A1A A714     
     6A1C A018     
0027 6A1E 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 6A20 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6A22 A714     
0032 6A24 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6A26 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 6A28 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6A2A 6156     
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
0044 6A2C 04C4  14         clr   tmp0
0045 6A2E C804  38         mov   tmp0,@cmdb.column      ; First column
     6A30 A714     
0046 6A32 0584  14         inc   tmp0
0047 6A34 D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     6A36 A70A     
0048 6A38 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     6A3A A70A     
0049               
0050 6A3C 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A3E 6156     
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
0056 6A40 D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     6A42 A72E     
0057 6A44 0984  32         srl   tmp0,8                 ; Right justify
0058 6A46 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     6A48 A714     
0059 6A4A 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 6A4C 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 6A4E D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     6A50 A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 6A52 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A54 6156     
                   < stevie_b1.asm
0102                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 6A56 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6A58 7A60     
0026 6A5A 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A5C A71A     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 6A5E 0460  28         b     @edkey.action.cmdb.home
     6A60 6A2C     
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
0057 6A62 0649  14         dect  stack
0058 6A64 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6A66 0649  14         dect  stack
0060 6A68 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6A6A C120  34         mov   @keycode1,tmp0        ; Get keycode
     6A6C A028     
0065 6A6E 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6A70 0020     
0066 6A72 111C  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6A74 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6A76 007E     
0070 6A78 1519  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073 6A7A 0284  22         ci    tmp0,96               ; ASCII 97 'a'
     6A7C 0060     
0074 6A7E 1102  14         jlt   !
0075 6A80 0224  22         ai    tmp0,-32              ; Make uppercase
     6A82 FFE0     
0076                       ;-------------------------------------------------------
0077                       ; Add character
0078                       ;-------------------------------------------------------
0079 6A84 C144  18 !       mov   tmp0,tmp1             ; \
0080 6A86 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0081               
0082 6A88 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A8A A71A     
0083               
0084 6A8C 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6A8E A72F     
0085 6A90 A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6A92 A714     
0086 6A94 D505  30         movb  tmp1,*tmp0            ; Add character
0087 6A96 05A0  34         inc   @cmdb.column          ; Next column
     6A98 A714     
0088 6A9A 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6A9C A70A     
0089               
0090 6A9E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6AA0 7A6A     
0091                                                   ; \ i  @cmdb.cmd = Command string
0092                                                   ; / o  @outparm1 = Length of command
0093                       ;-------------------------------------------------------
0094                       ; Addjust length
0095                       ;-------------------------------------------------------
0096 6AA2 C120  34         mov   @outparm1,tmp0
     6AA4 A018     
0097 6AA6 0A84  32         sla   tmp0,8               ; Move to MSB
0098 6AA8 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6AAA A72E     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.cmdb.char.exit:
0103 6AAC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0104 6AAE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0105 6AB0 0460  28         b     @edkey.keyscan.hook.debounce
     6AB2 6156     
0106                                                   ; Back to editor main
                   < stevie_b1.asm
0103                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6AB4 C120  34         mov   @cmdb.visible,tmp0
     6AB6 A702     
0009 6AB8 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6ABA 04E0  34         clr   @cmdb.column          ; Column = 0
     6ABC A714     
0015 6ABE 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6AC0 7A38     
0016 6AC2 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6AC4 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6AC6 7A42     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6AC8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6ACA 6156     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0104                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6ACC 0649  14         dect  stack
0012 6ACE C64B  30         mov   r11,*stack            ; Save return address
0013 6AD0 0649  14         dect  stack
0014 6AD2 C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6AD4 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6AD6 A506     
0019 6AD8 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6ADA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6ADC C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6ADE 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6AE0 7994     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6AE2 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AE4 7A42     
0028 6AE6 06A0  32         bl    @fm.newfile           ; New file in editor
     6AE8 7932     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6AEC C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6AEE 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6AF0 644C     
                   < stevie_b1.asm
0105                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008                       ;-------------------------------------------------------
0009                       ; Load file
0010                       ;-------------------------------------------------------
0011 6AF2 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AF4 7A42     
0012               
0013 6AF6 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6AF8 7A6A     
0014 6AFA C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6AFC A018     
0015 6AFE 1607  14         jne   !                     ; No, prepare for load
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6B00 0204  20         li    tmp0,txt.io.nofile    ; \
     6B02 3C10     
0020 6B04 C804  38         mov   tmp0,@parm1           ; / Error message
     6B06 A006     
0021               
0022 6B08 06A0  32         bl    @error.display        ; Show error message
     6B0A 7A24     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6B0C 1012  14         jmp   edkey.action.cmdb.load.exit
0027                       ;-------------------------------------------------------
0028                       ; Get filename
0029                       ;-------------------------------------------------------
0030 6B0E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6B10 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B12 A72E     
0032               
0033 6B14 06A0  32         bl    @cpym2m
     6B16 24DA     
0034 6B18 A72E                   data cmdb.cmdlen,heap.top,80
     6B1A F000     
     6B1C 0050     
0035                                                   ; Copy filename from command line to buffer
0036                       ;-------------------------------------------------------
0037                       ; Pass filename as parm1
0038                       ;-------------------------------------------------------
0039 6B1E 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B20 F000     
0040 6B22 C804  38         mov   tmp0,@parm1
     6B24 A006     
0041                       ;-------------------------------------------------------
0042                       ; Load file
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.load.file:
0045 6B26 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B28 F000     
0046 6B2A C804  38         mov   tmp0,@parm1
     6B2C A006     
0047               
0048 6B2E 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6B30 78D0     
0049                                                   ; \ i  parm1 = Pointer to length-prefixed
0050                                                   ; /            device/filename string
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               edkey.action.cmdb.load.exit:
0055 6B32 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6B34 644C     
                   < stevie_b1.asm
0106                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6B36 0649  14         dect  stack
0009 6B38 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B3A 0649  14         dect  stack
0011 6B3C C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B3E A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6B40 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B42 7A42     
0016               
0017 6B44 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B46 7A6A     
0018 6B48 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B4A A018     
0019 6B4C 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6B4E 0204  20         li    tmp0,txt.io.nofile    ; \
     6B50 3C10     
0024 6B52 C804  38         mov   tmp0,@parm1           ; / Error message
     6B54 A006     
0025               
0026 6B56 06A0  32         bl    @error.display        ; Show error message
     6B58 7A24     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6B5A 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6B5C 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6B5E D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B60 A72E     
0036               
0037 6B62 06A0  32         bl    @cpym2m
     6B64 24DA     
0038 6B66 A72E                   data cmdb.cmdall,heap.top,80
     6B68 F000     
     6B6A 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6B6C 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B6E F000     
0044 6B70 C804  38         mov   tmp0,@parm1
     6B72 A006     
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
0052 6B74 C820  54         mov   @fb.row,@parm1
     6B76 A306     
     6B78 A006     
0053 6B7A 06A0  32         bl    @fb.row2line          ; Row to editor line
     6B7C 30A6     
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
0058 6B7E C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6B80 A018     
     6B82 A008     
0059 6B84 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6B86 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6B88 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B8A F000     
0064 6B8C C804  38         mov   tmp0,@parm1
     6B8E A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6B90 0204  20         li    tmp0,id.file.insertfile
     6B92 0002     
0069 6B94 C804  38         mov   tmp0,@parm3           ; Set work mode
     6B96 A00A     
0070               
0071 6B98 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6B9A 78F6     
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
0079 6B9C 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6B9E A318     
0080 6BA0 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6BA2 A506     
0081               
0082 6BA4 C820  54         mov   @fb.topline,@parm1
     6BA6 A304     
     6BA8 A006     
0083 6BAA 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6BAC 7B12     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
0091 6BAE C839  50         mov   *stack+,@parm1        ; Pop top row
     6BB0 A006     
0092 6BB2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6BB4 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6BB6 64FE     
0094                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0107                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6BB8 0649  14         dect  stack
0009 6BBA C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6BBC 0649  14         dect  stack
0011 6BBE C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6BC0 A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6BC2 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6BC4 7A42     
0016               
0017 6BC6 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6BC8 7A6A     
0018 6BCA C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6BCC A018     
0019 6BCE 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6BD0 0204  20         li    tmp0,txt.io.nofile    ; \
     6BD2 3C10     
0024 6BD4 C804  38         mov   tmp0,@parm1           ; / Error message
     6BD6 A006     
0025               
0026 6BD8 06A0  32         bl    @error.display        ; Show error message
     6BDA 7A24     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6BDC 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6BDE 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6BE0 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BE2 A72E     
0036               
0037 6BE4 06A0  32         bl    @cpym2m
     6BE6 24DA     
0038 6BE8 A72E                   data cmdb.cmdall,heap.top,80
     6BEA F000     
     6BEC 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6BEE 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BF0 F000     
0044 6BF2 C804  38         mov   tmp0,@parm1
     6BF4 A006     
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
0049 6BF6 C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6BF8 A504     
     6BFA A008     
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
0054 6BFC 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BFE F000     
0055 6C00 C804  38         mov   tmp0,@parm1
     6C02 A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6C04 0204  20         li    tmp0,id.file.appendfile
     6C06 0003     
0060 6C08 C804  38         mov   tmp0,@parm3           ; Set work mode
     6C0A A00A     
0061               
0062 6C0C 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6C0E 78F6     
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
0070 6C10 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6C12 A318     
0071 6C14 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6C16 A506     
0072               
0073 6C18 C820  54         mov   @fb.topline,@parm1
     6C1A A304     
     6C1C A006     
0074 6C1E 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6C20 7B12     
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
0082 6C22 C839  50         mov   *stack+,@parm1        ; Pop top row
     6C24 A006     
0083 6C26 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084 6C28 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6C2A 64FE     
0085                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6C2C 0204  20         li    tmp0,clip1
     6C2E 3100     
0009 6C30 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6C32 0204  20         li    tmp0,clip2
     6C34 3200     
0013 6C36 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6C38 0204  20         li    tmp0,clip3
     6C3A 3300     
0017 6C3C 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6C3E 0204  20         li    tmp0,clip4
     6C40 3400     
0021 6C42 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6C44 0204  20         li    tmp0,clip5
     6C46 3500     
0025 6C48 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6C4A C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6C4C A006     
0030               
0031 6C4E 06A0  32         bl    @film
     6C50 2236     
0032 6C52 A72E                   data cmdb.cmdall,>00,80
     6C54 0000     
     6C56 0050     
0033               
0034 6C58 06A0  32         bl    @cpym2m
     6C5A 24DA     
0035 6C5C DE50                   data tv.clip.fname,cmdb.cmdall,80
     6C5E A72E     
     6C60 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6C62 C120  34         mov   @tv.clip.fname,tmp0
     6C64 DE50     
0040 6C66 C144  18         mov   tmp0,tmp1
0041 6C68 0984  32         srl   tmp0,8                ; Get string length
0042 6C6A 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6C6C A72E     
0043 6C6E 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6C70 D520  46         movb  @parm1,*tmp0          ; Append suffix
     6C72 A006     
0045               
0046 6C74 0460  28         b     @edkey.action.cmdb.insert
     6C76 6B36     
0047                                                   ; Insert file
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.file.clipdev.asm" ; Configure clipboard device
     **** ****     > edkey.cmdb.file.clipdev.asm
0001               * FILE......: edkey.cmdb.fíle.clipdev.asm
0002               * Purpose...: Configure clipboard device
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard device
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clipdev.configure:
0008                       ;-------------------------------------------------------
0009                       ; Configure
0010                       ;-------------------------------------------------------
0011 6C78 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C7A 7A42     
0012               
0013 6C7C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C7E 7A6A     
0014 6C80 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C82 A018     
0015 6C84 1607  14         jne   !                     ; No, set clipboard device and filename
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6C86 0204  20         li    tmp0,txt.io.nofile    ; \
     6C88 3C10     
0020 6C8A C804  38         mov   tmp0,@parm1           ; / Error message
     6C8C A006     
0021               
0022 6C8E 06A0  32         bl    @error.display        ; Show error message
     6C90 7A24     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6C92 1018  14         jmp   edkey.action.cmdb.clipdev.configure.exit
0027                       ;-------------------------------------------------------
0028                       ; Set clipboard device and filename
0029                       ;-------------------------------------------------------
0030 6C94 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6C96 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C98 A72E     
0032               
0033 6C9A 06A0  32         bl    @cpym2m
     6C9C 24DA     
0034 6C9E A72E                   data cmdb.cmdall,tv.clip.fname,80
     6CA0 DE50     
     6CA2 0050     
0035                                                   ; Copy filename from command line to buffer
0036               
0037                       ;-------------------------------------------------------
0038                       ; Show message
0039                       ;-------------------------------------------------------
0040               edkey.action.cmdb.clipdev.configure.message:
0041 6CA4 06A0  32         bl    @hchar
     6CA6 27D2     
0042 6CA8 0034                   byte 0,52,32,20
     6CAA 2014     
0043 6CAC FFFF                   data EOL              ; Erase any previous message
0044               
0045 6CAE 06A0  32         bl    @putat
     6CB0 2442     
0046 6CB2 0034                   byte 0,52
0047 6CB4 39E8                   data txt.done.clipdev
0048                       ;-------------------------------------------------------
0049                       ; Setup one shot task for removing overlay message
0050                       ;-------------------------------------------------------
0051 6CB6 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6CB8 3718     
0052 6CBA C804  38         mov   tmp0,@tv.task.oneshot
     6CBC A224     
0053               
0054 6CBE 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6CC0 2EF8     
0055 6CC2 0003                   data 3                ; / for getting consistent delay
0056                       ;-------------------------------------------------------
0057                       ; Exit
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.clipdev.configure.exit:
0060 6CC4 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6CC6 644C     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6CC8 0649  14         dect  stack
0009 6CCA C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6CCC 0649  14         dect  stack
0011 6CCE C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6CD0 A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6CD2 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6CD4 7A42     
0016               
0017 6CD6 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6CD8 7A6A     
0018 6CDA C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6CDC A018     
0019 6CDE 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6CE0 0204  20         li    tmp0,txt.io.nofile    ; \
     6CE2 3C10     
0024 6CE4 C804  38         mov   tmp0,@parm1           ; / Error message
     6CE6 A006     
0025               
0026 6CE8 06A0  32         bl    @error.display        ; Show error message
     6CEA 7A24     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6CEC 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6CEE 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CF0 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CF2 A72E     
0036               
0037 6CF4 06A0  32         bl    @cpym2m
     6CF6 24DA     
0038 6CF8 A72E                   data cmdb.cmdlen,heap.top,80
     6CFA F000     
     6CFC 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6CFE 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D00 F000     
0044 6D02 C804  38         mov   tmp0,@parm1
     6D04 A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D06 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D08 A510     
     6D0A 2022     
0049 6D0C 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6D0E C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D10 A50E     
     6D12 A008     
0055 6D14 0620  34         dec   @parm2                ; /
     6D16 A008     
0056               
0057 6D18 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D1A A510     
     6D1C A00A     
0058               
0059 6D1E 0204  20         li    tmp0,id.file.saveblock
     6D20 0005     
0060 6D22 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6D24 04E0  34         clr   @parm2                ; First line to save
     6D26 A008     
0066 6D28 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D2A A504     
     6D2C A00A     
0067               
0068 6D2E 0204  20         li    tmp0,id.file.savefile
     6D30 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6D32 C804  38         mov   tmp0,@parm4           ; Set work mode
     6D34 A00C     
0074               
0075 6D36 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D38 7920     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6D3A C839  50         mov   *stack+,@parm1        ; Pop top row
     6D3C A006     
0087 6D3E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6D40 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D42 64FE     
0089                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6D44 0649  14         dect  stack
0009 6D46 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D48 0649  14         dect  stack
0011 6D4A C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D4C A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6D4E 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D50 7A42     
0016               
0017 6D52 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D54 7A6A     
0018 6D56 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D58 A018     
0019 6D5A 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D5C 0204  20         li    tmp0,txt.io.nofile    ; \
     6D5E 3C10     
0024 6D60 C804  38         mov   tmp0,@parm1           ; / Error message
     6D62 A006     
0025               
0026 6D64 06A0  32         bl    @error.display        ; Show error message
     6D66 7A24     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D68 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D6A 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D6C D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D6E A72E     
0036               
0037 6D70 06A0  32         bl    @cpym2m
     6D72 24DA     
0038 6D74 A72E                   data cmdb.cmdlen,heap.top,80
     6D76 F000     
     6D78 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6D7A 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D7C F000     
0044 6D7E C804  38         mov   tmp0,@parm1
     6D80 A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D82 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D84 A510     
     6D86 2022     
0049 6D88 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6D8A C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D8C A50E     
     6D8E A008     
0055 6D90 0620  34         dec   @parm2                ; /
     6D92 A008     
0056               
0057 6D94 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D96 A510     
     6D98 A00A     
0058               
0059 6D9A 0204  20         li    tmp0,id.file.printblock
     6D9C 0008     
0060 6D9E 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6DA0 04E0  34         clr   @parm2                ; First line to save
     6DA2 A008     
0066 6DA4 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6DA6 A504     
     6DA8 A00A     
0067               
0068 6DAA 0204  20         li    tmp0,id.file.printfile
     6DAC 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6DAE C804  38         mov   tmp0,@parm4           ; Set work mode
     6DB0 A00C     
0074               
0075 6DB2 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6DB4 7920     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6DB6 C839  50         mov   *stack+,@parm1        ; Pop top row
     6DB8 A006     
0087 6DBA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6DBC 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6DBE 64FE     
0089                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6DC0 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6DC2 A506     
0021 6DC4 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6DC6 74A6     
0022 6DC8 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6DCA 7A60     
0023 6DCC C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6DCE A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6DD0 0284  22         ci    tmp0,>2000
     6DD2 2000     
0028 6DD4 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6DD6 0284  22         ci    tmp0,>7fff
     6DD8 7FFF     
0031 6DDA 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6DDC 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6DDE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6DE0 FFCE     
0040 6DE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6DE4 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6DE6 0460  28         b     @edkey.keyscan.hook.debounce
     6DE8 6156     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6DEA 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6DEC 7A9C     
0065 6DEE 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DF0 A71A     
0066 6DF2 0460  28        b     @edkey.keyscan.hook.debounce
     6DF4 6156     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.am.toggle
0072               * Toggle 'AutoMode' on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.am.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.am.toggle:
0083 6DF6 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoMode
     6DF8 7A92     
0084 6DFA 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DFC A71A     
0085 6DFE 0460  28        b     @edkey.keyscan.hook.debounce
     6E00 6156     
0086                                                   ; Back to editor main
0087               
0088               
0089               
0090               ***************************************************************
0091               * edkey.action.cmdb.preset
0092               * Set command value to preset
0093               ***************************************************************
0094               * b   @edkey.action.cmdb.preset
0095               *--------------------------------------------------------------
0096               * INPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * none
0101               ********|*****|*********************|**************************
0102               edkey.action.cmdb.preset:
0103 6E02 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6E04 7A74     
0104 6E06 0460  28        b     @edkey.keyscan.hook.debounce
     6E08 6156     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * dialog.close
0111               * Close dialog "Help"
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.close.about
0114               *--------------------------------------------------------------
0115               * OUTPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.close.about:
0122 6E0A 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6E0C A71E     
0123                       ;------------------------------------------------------
0124                       ; Erase header line
0125                       ;------------------------------------------------------
0126 6E0E 06A0  32         bl    @hchar
     6E10 27D2     
0127 6E12 0000                   byte 0,0,32,80*2
     6E14 20A0     
0128 6E16 FFFF                   data EOL
0129               
0130 6E18 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E1A 6EA2     
0131                       ;-------------------------------------------------------
0132                       ; Exit
0133                       ;-------------------------------------------------------
0134 6E1C 0460  28         b     @edkey.keyscan.hook.debounce
     6E1E 6156     
0135                                                   ; Back to editor main
0136               
0137               
0138               
0139               ***************************************************************
0140               * edkey.action.cmdb.close.dialog
0141               * Close dialog
0142               ***************************************************************
0143               * b   @edkey.action.cmdb.close.dialog
0144               *--------------------------------------------------------------
0145               * OUTPUT
0146               * none
0147               *--------------------------------------------------------------
0148               * Register usage
0149               * none
0150               ********|*****|*********************|**************************
0151               edkey.action.cmdb.close.dialog:
0152 6E20 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E22 6EA2     
0153                       ;-------------------------------------------------------
0154                       ; Exit
0155                       ;-------------------------------------------------------
0156               edkey.action.cmdb.close.dialog.exit:
0157 6E24 0460  28         b     @edkey.keyscan.hook.debounce
     6E26 6156     
0158                                                   ; Back to editor main
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 6E28 06A0  32         bl    @hchar
     6E2A 27D2     
0009 6E2C 0034                   byte 0,52,32,20
     6E2E 2014     
0010 6E30 FFFF                   data EOL              ; Erase any previous message
0011               
0012 6E32 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6E34 A50C     
0013 6E36 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6E38 06A0  32         bl    @putat
     6E3A 2442     
0018 6E3C 0034                   byte 0,52
0019 6E3E 39F6                   data txt.autoins.on   ; AutoInsert on
0020 6E40 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6E42 06A0  32 !       bl    @putat
     6E44 2442     
0025 6E46 0034                   byte 0,52
0026 6E48 3A06                   data txt.autoins.off   ; AutoInsert off
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
0031 6E4A 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6E4C 3718     
0032 6E4E C804  38         mov   tmp0,@tv.task.oneshot
     6E50 A224     
0033               
0034 6E52 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6E54 2EF8     
0035 6E56 0003                   data 3                ; / for getting consistent delay
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
0040 6E58 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E5A 6EA2     
0041 6E5C 0460  28         b     @edkey.keyscan.hook.debounce
     6E5E 6156     
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
0011 6E60 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6E62 7A6A     
0012 6E64 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6E66 A018     
0013 6E68 131A  14         jeq   edkey.action.cmdb.goto.exit
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
0018 6E6A 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6E6C A72F     
0019 6E6E C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6E70 A006     
0020               
0021 6E72 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6E74 333C     
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
0032 6E76 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6E78 A01A     
     6E7A 2022     
0033 6E7C 1310  14         jeq   edkey.action.cmdb.goto.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Assert - Line number is invalid
0037                       ;-------------------------------------------------------
0038 6E7E C120  34         mov   @outparm1,tmp0
     6E80 A018     
0039 6E82 130D  14         jeq   edkey.action.cmdb.goto.exit
0040                                                   ; Yes, exit
0041                       ;-------------------------------------------------------
0042                       ; Goto line
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.goto.line:
0045 6E84 0649  14         dect  stack
0046 6E86 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6E88 A018     
0047               
0048 6E8A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E8C 6EA2     
0049               
0050 6E8E C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6E90 A006     
0051 6E92 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6E94 A006     
0052               
0053 6E96 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6E98 A312     
0054               
0055 6E9A 0460  28         b     @edkey.fb.goto.toprow ; Position cursor and exit
     6E9C 64FE     
0056                                                   ; \ i  @parm1 = Line in editor buffer
0057                                                   ; /
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               edkey.action.cmdb.goto.exit:
0062 6E9E 0460  28         b     @edkey.keyscan.hook.debounce
     6EA0 6156     
0063                                                   ; Back to editor main
                   < stevie_b1.asm
0115                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 6EA2 0649  14         dect  stack
0018 6EA4 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6EA6 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6EA8 A71C     
0023 6EAA 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6EAC 7A42     
0024 6EAE 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6EB0 A31A     
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
0029 6EB2 C2F9  30         mov   *stack+,r11           ; Pop r11
0030 6EB4 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0116                       ;-----------------------------------------------------------------------
0117                       ; Logic for Framebuffer (1)
0118                       ;-----------------------------------------------------------------------
0119                       copy  "fb.cursor.up.asm"            ; Cursor up
     **** ****     > fb.cursor.up.asm
0001               * FILE......: fb.cursor.up.asm
0002               * Purpose...: Move the cursor up 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.up
0007               * Logic for moving cursor up 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.up
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.up
0021 6EB6 0649  14         dect  stack
0022 6EB8 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current line if dirty
0025                       ;-------------------------------------------------------
0026 6EBA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6EBC A31A     
0027 6EBE 8820  50         c     @fb.row.dirty,@w$ffff
     6EC0 A30A     
     6EC2 2022     
0028 6EC4 1604  14         jne   fb.cursor.up.cursor
0029 6EC6 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6EC8 7050     
0030 6ECA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6ECC A30A     
0031                       ;-------------------------------------------------------
0032                       ; Move cursor
0033                       ;-------------------------------------------------------
0034               fb.cursor.up.cursor:
0035 6ECE C120  34         mov   @fb.row,tmp0
     6ED0 A306     
0036 6ED2 150B  14         jgt   fb.cursor.up.cursor_up
0037                                                   ; Move cursor up if fb.row > 0
0038 6ED4 C120  34         mov   @fb.topline,tmp0      ; Do we need to scroll?
     6ED6 A304     
0039 6ED8 130C  14         jeq   fb.cursor.up.set_cursorx
0040                                                   ; At top, only position cursor X
0041                       ;-------------------------------------------------------
0042                       ; Scroll 1 line
0043                       ;-------------------------------------------------------
0044 6EDA 0604  14         dec   tmp0                  ; fb.topline--
0045 6EDC C804  38         mov   tmp0,@parm1           ; Scroll one line up
     6EDE A006     
0046               
0047 6EE0 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6EE2 7B12     
0048                                                   ; | i  @parm1 = Line to start with
0049                                                   ; /             (becomes @fb.topline)
0050               
0051 6EE4 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6EE6 A312     
0052 6EE8 1004  14         jmp   fb.cursor.up.set_cursorx
0053                       ;-------------------------------------------------------
0054                       ; Move cursor up
0055                       ;-------------------------------------------------------
0056               fb.cursor.up.cursor_up:
0057 6EEA 0620  34         dec   @fb.row               ; Row-- in screen buffer
     6EEC A306     
0058 6EEE 06A0  32         bl    @up                   ; Row-- VDP cursor
     6EF0 26D4     
0059                       ;-------------------------------------------------------
0060                       ; Check line length and position cursor
0061                       ;-------------------------------------------------------
0062               fb.cursor.up.set_cursorx:
0063 6EF2 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6EF4 36AE     
0064                                                   ; | i  @fb.row        = Row in frame buffer
0065                                                   ; / o  @fb.row.length = Length of row
0066               
0067 6EF6 8820  50         c     @fb.column,@fb.row.length
     6EF8 A30C     
     6EFA A308     
0068 6EFC 1207  14         jle   fb.cursor.up.exit
0069                       ;-------------------------------------------------------
0070                       ; Adjust cursor column position
0071                       ;-------------------------------------------------------
0072 6EFE C820  54         mov   @fb.row.length,@fb.column
     6F00 A308     
     6F02 A30C     
0073 6F04 C120  34         mov   @fb.column,tmp0
     6F06 A30C     
0074 6F08 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6F0A 26DE     
0075                       ;-------------------------------------------------------
0076                       ; Exit
0077                       ;-------------------------------------------------------
0078               fb.cursor.up.exit:
0079 6F0C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F0E 30C0     
0080 6F10 C2F9  30         mov   *stack+,r11           ; Pop r11
0081 6F12 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0120                       copy  "fb.cursor.down.asm"          ; Cursor down
     **** ****     > fb.cursor.down.asm
0001               * FILE......: fb.cursor.down.asm
0002               * Purpose...: Move the cursor down 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.down
0007               * Logic for moving cursor down 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.down
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.down:
0021 6F14 0649  14         dect  stack
0022 6F16 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Last line?
0025                       ;------------------------------------------------------
0026 6F18 8820  50         c     @fb.row,@edb.lines    ; Last line in editor buffer ?
     6F1A A306     
     6F1C A504     
0027 6F1E 1332  14         jeq   fb.cursor.down.exit
0028                                                   ; Yes, skip further processing
0029 6F20 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6F22 A31A     
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6F24 8820  50         c     @fb.row.dirty,@w$ffff
     6F26 A30A     
     6F28 2022     
0034 6F2A 1604  14         jne   fb.cursor.down.move
0035 6F2C 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F2E 7050     
0036 6F30 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F32 A30A     
0037                       ;-------------------------------------------------------
0038                       ; Move cursor
0039                       ;-------------------------------------------------------
0040               fb.cursor.down.move:
0041                       ;-------------------------------------------------------
0042                       ; EOF reached?
0043                       ;-------------------------------------------------------
0044 6F34 C120  34         mov   @fb.topline,tmp0
     6F36 A304     
0045 6F38 A120  34         a     @fb.row,tmp0
     6F3A A306     
0046 6F3C 8120  34         c     @edb.lines,tmp0       ; fb.topline + fb.row = edb.lines ?
     6F3E A504     
0047 6F40 1314  14         jeq   fb.cursor.down.set_cursorx
0048                                                   ; Yes, only position cursor X
0049                       ;-------------------------------------------------------
0050                       ; Check if scrolling required
0051                       ;-------------------------------------------------------
0052 6F42 C120  34         mov   @fb.scrrows,tmp0
     6F44 A31C     
0053 6F46 0604  14         dec   tmp0
0054 6F48 8120  34         c     @fb.row,tmp0
     6F4A A306     
0055 6F4C 110A  14         jlt   fb.cursor.down.cursor
0056                       ;-------------------------------------------------------
0057                       ; Scroll 1 line
0058                       ;-------------------------------------------------------
0059 6F4E C820  54         mov   @fb.topline,@parm1
     6F50 A304     
     6F52 A006     
0060 6F54 05A0  34         inc   @parm1
     6F56 A006     
0061               
0062 6F58 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6F5A 7B12     
0063                                                   ; | i  @parm1 = Line to start with
0064                                                   ; /             (becomes @fb.topline)
0065               
0066 6F5C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6F5E A312     
0067 6F60 1004  14         jmp   fb.cursor.down.set_cursorx
0068                       ;-------------------------------------------------------
0069                       ; Move cursor down a row, there are still rows left
0070                       ;-------------------------------------------------------
0071               fb.cursor.down.cursor:
0072 6F62 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     6F64 A306     
0073 6F66 06A0  32         bl    @down                 ; Row++ VDP cursor
     6F68 26CC     
0074                       ;-------------------------------------------------------
0075                       ; Check line length and position cursor
0076                       ;-------------------------------------------------------
0077               fb.cursor.down.set_cursorx:
0078 6F6A 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6F6C 36AE     
0079                                                   ; | i  @fb.row        = Row in frame buffer
0080                                                   ; / o  @fb.row.length = Length of row
0081               
0082 6F6E 8820  50         c     @fb.column,@fb.row.length
     6F70 A30C     
     6F72 A308     
0083 6F74 1207  14         jle   fb.cursor.down.exit
0084                                                   ; Exit
0085                       ;-------------------------------------------------------
0086                       ; Adjust cursor column position
0087                       ;-------------------------------------------------------
0088 6F76 C820  54         mov   @fb.row.length,@fb.column
     6F78 A308     
     6F7A A30C     
0089 6F7C C120  34         mov   @fb.column,tmp0
     6F7E A30C     
0090 6F80 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6F82 26DE     
0091                       ;-------------------------------------------------------
0092                       ; Exit
0093                       ;-------------------------------------------------------
0094               fb.cursor.down.exit:
0095 6F84 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F86 30C0     
0096 6F88 C2F9  30         mov   *stack+,r11           ; Pop r11
0097 6F8A 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0121                       copy  "fb.cursor.home.asm"          ; Cursor home
     **** ****     > fb.cursor.home.asm
0001               * FILE......: fb.cursor.home.asm
0002               * Purpose...: Move the cursor home
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.home
0007               * Logic for moving cursor home
0008               ***************************************************************
0009               * bl @fb.cursor.home
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ********|*****|*********************|**************************
0020               fb.cursor.home:
0021 6F8C 0649  14         dect  stack
0022 6F8E C64B  30         mov   r11,*stack            ; Save return address
0023 6F90 0649  14         dect  stack
0024 6F92 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Cursor home
0027                       ;------------------------------------------------------
0028 6F94 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6F96 A31A     
0029 6F98 C120  30         mov   @wyx,tmp0
     6F9A 832A     
0030 6F9C 0244  22         andi  tmp0,>ff00            ; Reset cursor X position to 0
     6F9E FF00     
0031 6FA0 C804  30         mov   tmp0,@wyx             ; VDP cursor column=0
     6FA2 832A     
0032 6FA4 04E0  34         clr   @fb.column
     6FA6 A30C     
0033 6FA8 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6FAA 30C0     
0034 6FAC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6FAE A31A     
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               fb.cursor.home.exit:
0039 6FB0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0040 6FB2 C2F9  30         mov   *stack+,r11           ; Pop r11
0041 6FB4 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0122                       copy  "fb.insert.line.asm"          ; Insert new line
     **** ****     > fb.insert.line.asm
0001               * FILE......: fb.insert.line.asm
0002               * Purpose...: Insert a new line
0003               
0004               ***************************************************************
0005               * fb.insert.line.asm
0006               * Insert a new line
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Insert line on current line or on following line.
0012               *          @parm1  = 0  -> current line
0013               *          @parm1 <> 0  -> following line
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1
0020               ********|*****|*********************|**************************
0021               fb.insert.line:
0022 6FB6 0649  14         dect  stack
0023 6FB8 C64B  30         mov   r11,*stack            ; Save return address
0024 6FBA 0649  14         dect  stack
0025 6FBC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6FBE 0649  14         dect  stack
0027 6FC0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Initialisation
0030                       ;-------------------------------------------------------
0031 6FC2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6FC4 A506     
0032 6FC6 04C5  14         clr   tmp1                  ; Offset current line
0033 6FC8 C120  34         mov   @parm1,tmp0           ; Insert on current line or following line?
     6FCA A006     
0034 6FCC 1301  14         jeq   !                     ; Current line
0035 6FCE 0585  14         inc   tmp1                  ; Following line
0036                       ;-------------------------------------------------------
0037                       ; Crunch current line if dirty
0038                       ;-------------------------------------------------------
0039 6FD0 8820  50 !       c     @fb.row.dirty,@w$ffff
     6FD2 A30A     
     6FD4 2022     
0040 6FD6 1604  14         jne   fb.insert.line.insert
0041 6FD8 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6FDA 7050     
0042 6FDC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6FDE A30A     
0043                       ;-------------------------------------------------------
0044                       ; Insert entry in index
0045                       ;-------------------------------------------------------
0046               fb.insert.line.insert:
0047 6FE0 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6FE2 30C0     
0048 6FE4 C820  54         mov   @fb.topline,@parm1
     6FE6 A304     
     6FE8 A006     
0049 6FEA A820  54         a     @fb.row,@parm1        ; Line number to insert
     6FEC A306     
     6FEE A006     
0050 6FF0 A805  38         a     tmp1,@parm1           ; Add optional offset (for following line)
     6FF2 A006     
0051 6FF4 C820  54         mov   @edb.lines,@parm2     ; Last line to reorganize
     6FF6 A504     
     6FF8 A008     
0052               
0053 6FFA 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     6FFC 35C8     
0054                                                   ; \ i  parm1 = Line for insert
0055                                                   ; / i  parm2 = Last line to reorg
0056               
0057 6FFE 05A0  34         inc   @edb.lines            ; One line added to editor buffer
     7000 A504     
0058 7002 04E0  34         clr   @fb.row.length        ; Current row length = 0
     7004 A308     
0059                       ;-------------------------------------------------------
0060                       ; Check/Adjust marker M1
0061                       ;-------------------------------------------------------
0062               fb.insert.line.m1:
0063 7006 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     7008 A50E     
     700A 2022     
0064 700C 1308  14         jeq   fb.insert.line.m2
0065                                                   ; Yes, skip to M2 check
0066               
0067 700E 8820  50         c     @parm1,@edb.block.m1
     7010 A006     
     7012 A50E     
0068 7014 1504  14         jgt   fb.insert.line.m2
0069 7016 05A0  34         inc   @edb.block.m1         ; M1++
     7018 A50E     
0070 701A 0720  34         seto  @fb.colorize          ; Set colorize flag
     701C A312     
0071                       ;-------------------------------------------------------
0072                       ; Check/Adjust marker M2
0073                       ;-------------------------------------------------------
0074               fb.insert.line.m2:
0075 701E 8820  50         c     @edb.block.m2,@w$ffff ; Marker M1 unset?
     7020 A510     
     7022 2022     
0076 7024 1308  14         jeq   fb.insert.line.refresh
0077                                                   ; Yes, skip to refresh frame buffer
0078               
0079 7026 8820  50         c     @parm1,@edb.block.m2
     7028 A006     
     702A A510     
0080 702C 1504  14         jgt   fb.insert.line.refresh
0081 702E 05A0  34         inc   @edb.block.m2         ; M2++
     7030 A510     
0082 7032 0720  34         seto  @fb.colorize          ; Set colorize flag
     7034 A312     
0083                       ;-------------------------------------------------------
0084                       ; Refresh frame buffer and physical screen
0085                       ;-------------------------------------------------------
0086               fb.insert.line.refresh:
0087 7036 C820  54         mov   @fb.topline,@parm1
     7038 A304     
     703A A006     
0088               
0089 703C 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     703E 7B12     
0090                                                   ; | i  @parm1 = Line to start with
0091                                                   ; /             (becomes @fb.topline)
0092               
0093 7040 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     7042 A318     
0094 7044 06A0  32         bl    @fb.cursor.home       ; Move cursor home
     7046 6F8C     
0095                       ;-------------------------------------------------------
0096                       ; Exit
0097                       ;-------------------------------------------------------
0098               fb.insert.line.exit:
0099 7048 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0100 704A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0101 704C C2F9  30         mov   *stack+,r11           ; Pop r11
0102 704E 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0123                       ;-----------------------------------------------------------------------
0124                       ; Logic for Editor Buffer
0125                       ;-----------------------------------------------------------------------
0126                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 7050 0649  14         dect  stack
0028 7052 C64B  30         mov   r11,*stack            ; Save return address
0029 7054 0649  14         dect  stack
0030 7056 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 7058 0649  14         dect  stack
0032 705A C645  30         mov   tmp1,*stack           ; Push tmp1
0033 705C 0649  14         dect  stack
0034 705E C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7060 0649  14         dect  stack
0036 7062 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7064 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     7066 A30C     
     7068 A100     
0041 706A 04E0  34         clr   @fb.column
     706C A30C     
0042 706E 06A0  32         bl    @fb.calc_pointer      ; Beginning of row
     7070 30C0     
0043                       ;------------------------------------------------------
0044                       ; Prepare scan
0045                       ;------------------------------------------------------
0046 7072 04C4  14         clr   tmp0                  ; Counter
0047 7074 C160  34         mov   @fb.current,tmp1      ; Get position
     7076 A302     
0048 7078 C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     707A A102     
0049 707C 04C7  14         clr   tmp3                  ; Counter for whitespace
0050                       ;------------------------------------------------------
0051                       ; 1. Scan line for >00 byte termination
0052                       ;------------------------------------------------------
0053               edb.line.pack.fb.scan:
0054 707E D1B5  28         movb  *tmp1+,tmp2           ; Get char
0055 7080 0986  32         srl   tmp2,8                ; Right justify
0056 7082 130D  14         jeq   edb.line.pack.fb.check_setpage
0057                                                   ; Stop scan if >00 found
0058 7084 0584  14         inc   tmp0                  ; Increase string length
0059                       ;------------------------------------------------------
0060                       ; Check for trailing whitespace
0061                       ;------------------------------------------------------
0062 7086 0286  22         ci    tmp2,32               ; Was it a space character?
     7088 0020     
0063 708A 1301  14         jeq   edb.line.pack.fb.check80
0064 708C C1C4  18         mov   tmp0,tmp3
0065                       ;------------------------------------------------------
0066                       ; Not more than 80 characters
0067                       ;------------------------------------------------------
0068               edb.line.pack.fb.check80:
0069 708E 0284  22         ci    tmp0,colrow
     7090 0050     
0070 7092 1305  14         jeq   edb.line.pack.fb.check_setpage
0071                                                   ; Stop scan if 80 characters processed
0072 7094 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0073                       ;------------------------------------------------------
0074                       ; Check failed, crash CPU!
0075                       ;------------------------------------------------------
0076               edb.line.pack.fb.crash:
0077 7096 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     7098 FFCE     
0078 709A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     709C 2026     
0079                       ;------------------------------------------------------
0080                       ; Check if highest SAMS page needs to be increased
0081                       ;------------------------------------------------------
0082               edb.line.pack.fb.check_setpage:
0083 709E 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0084 70A0 1103  14         jlt   edb.line.pack.fb.rtrim
0085 70A2 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     70A4 A104     
0086 70A6 100C  14         jmp   !
0087               edb.line.pack.fb.rtrim:
0088                       ;------------------------------------------------------
0089                       ; Remove trailing blanks from line
0090                       ;------------------------------------------------------
0091 70A8 C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     70AA A104     
0092               
0093 70AC 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0094               
0095 70AE C184  18         mov   tmp0,tmp2             ; \
0096 70B0 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0097 70B2 0586  14         inc   tmp2                  ; /
0098               
0099 70B4 C107  18         mov   tmp3,tmp0             ; \
0100 70B6 A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     70B8 A102     
0101               
0102               edb.line.pack.fb.rtrim.loop:
0103 70BA DD05  32         movb  tmp1,*tmp0+
0104 70BC 0606  14         dec   tmp2
0105 70BE 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0106                       ;------------------------------------------------------
0107                       ; Check and increase highest SAMS page
0108                       ;------------------------------------------------------
0109 70C0 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     70C2 36D2     
0110                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0111                                                   ; /                         free line
0112                       ;------------------------------------------------------
0113                       ; 2. Prepare for storing line
0114                       ;------------------------------------------------------
0115               edb.line.pack.fb.prepare:
0116 70C4 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     70C6 A304     
     70C8 A006     
0117 70CA A820  54         a     @fb.row,@parm1        ; /
     70CC A306     
     70CE A006     
0118                       ;------------------------------------------------------
0119                       ; 2a. Update index
0120                       ;------------------------------------------------------
0121               edb.line.pack.fb.update_index:
0122 70D0 C820  54         mov   @edb.next_free.ptr,@parm2
     70D2 A508     
     70D4 A008     
0123                                                   ; Pointer to new line
0124 70D6 C820  54         mov   @edb.sams.hipage,@parm3
     70D8 A51A     
     70DA A00A     
0125                                                   ; SAMS page to use
0126               
0127 70DC 06A0  32         bl    @idx.entry.update     ; Update index
     70DE 3478     
0128                                                   ; \ i  parm1 = Line number in editor buffer
0129                                                   ; | i  parm2 = pointer to line in
0130                                                   ; |            editor buffer
0131                                                   ; / i  parm3 = SAMS page
0132                       ;------------------------------------------------------
0133                       ; 3. Set line prefix in editor buffer
0134                       ;------------------------------------------------------
0135 70E0 C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     70E2 A102     
0136 70E4 C160  34         mov   @edb.next_free.ptr,tmp1
     70E6 A508     
0137                                                   ; Address of line in editor buffer
0138               
0139 70E8 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     70EA A508     
0140               
0141 70EC C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     70EE A104     
0142 70F0 CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0143 70F2 1317  14         jeq   edb.line.pack.fb.prepexit
0144                                                   ; Nothing to copy if empty line
0145                       ;------------------------------------------------------
0146                       ; 4. Copy line from framebuffer to editor buffer
0147                       ;------------------------------------------------------
0148               edb.line.pack.fb.copyline:
0149 70F4 0286  22         ci    tmp2,2
     70F6 0002     
0150 70F8 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0151 70FA DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0152 70FC DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0153 70FE 1007  14         jmp   edb.line.pack.fb.copyline.align16
0154               
0155               edb.line.pack.fb.copyline.checkbyte:
0156 7100 0286  22         ci    tmp2,1
     7102 0001     
0157 7104 1602  14         jne   edb.line.pack.fb.copyline.block
0158 7106 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0159 7108 1002  14         jmp   edb.line.pack.fb.copyline.align16
0160               
0161               edb.line.pack.fb.copyline.block:
0162 710A 06A0  32         bl    @xpym2m               ; Copy memory block
     710C 24E0     
0163                                                   ; \ i  tmp0 = source
0164                                                   ; | i  tmp1 = destination
0165                                                   ; / i  tmp2 = bytes to copy
0166                       ;------------------------------------------------------
0167                       ; 5: Align pointer to multiple of 16 memory address
0168                       ;------------------------------------------------------
0169               edb.line.pack.fb.copyline.align16:
0170 710E A820  54         a     @rambuf+4,@edb.next_free.ptr
     7110 A104     
     7112 A508     
0171                                                      ; Add length of line
0172               
0173 7114 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     7116 A508     
0174 7118 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0175 711A 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     711C 000F     
0176 711E A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     7120 A508     
0177                       ;------------------------------------------------------
0178                       ; 6: Restore SAMS page and prepare for exit
0179                       ;------------------------------------------------------
0180               edb.line.pack.fb.prepexit:
0181 7122 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     7124 A100     
     7126 A30C     
0182               
0183 7128 8820  50         c     @edb.sams.hipage,@edb.sams.page
     712A A51A     
     712C A518     
0184 712E 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0185               
0186 7130 C120  34         mov   @edb.sams.page,tmp0
     7132 A518     
0187 7134 C160  34         mov   @edb.top.ptr,tmp1
     7136 A500     
0188 7138 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     713A 2576     
0189                                                   ; \ i  tmp0 = SAMS page number
0190                                                   ; / i  tmp1 = Memory address
0191                       ;------------------------------------------------------
0192                       ; Exit
0193                       ;------------------------------------------------------
0194               edb.line.pack.fb.exit:
0195 713C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0196 713E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0197 7140 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0198 7142 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0199 7144 C2F9  30         mov   *stack+,r11           ; Pop R11
0200 7146 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0127                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 7148 0649  14         dect  stack
0031 714A C64B  30         mov   r11,*stack            ; Save return address
0032 714C 0649  14         dect  stack
0033 714E C644  30         mov   tmp0,*stack           ; Push tmp0
0034 7150 0649  14         dect  stack
0035 7152 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 7154 0649  14         dect  stack
0037 7156 C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 7158 C820  54         mov   @parm1,@rambuf
     715A A006     
     715C A100     
0042 715E C820  54         mov   @parm2,@rambuf+2
     7160 A008     
     7162 A102     
0043 7164 C820  54         mov   @parm3,@rambuf+4
     7166 A00A     
     7168 A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 716A C120  34         mov   @fb.colsline,tmp0
     716C A30E     
0048 716E 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     7170 A008     
0049 7172 C1A0  34         mov   @fb.top.ptr,tmp2
     7174 A300     
0050 7176 A146  18         a     tmp2,tmp1             ; Add base to offset
0051 7178 C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     717A A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 717C 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     717E A006     
     7180 A504     
0056 7182 1103  14         jlt   !                     ; No, continue processing
0057               
0058 7184 04E0  34         clr   @rambuf+10            ; Set line length = 0
     7186 A10A     
0059 7188 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 718A C120  34 !       mov   @parm1,tmp0
     718C A006     
0064 718E 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     7190 3620     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 7192 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     7194 A018     
0072 7196 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 7198 04E0  34         clr   @rambuf+10            ; Set length=0
     719A A10A     
0076 719C 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 719E C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     71A0 A10A     
0082 71A2 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     71A4 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 71A6 C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     71A8 A108     
0088 71AA 04C5  14         clr   tmp1                  ; | Fill with >00
0089 71AC 0206  20         li    tmp2,80               ; /
     71AE 0050     
0090               
0091 71B0 06A0  32         bl    @xfilm                ; Fill CPU memory
     71B2 223C     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 71B4 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     71B6 A10A     
0100 71B8 C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     71BA A018     
0101 71BC 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 71BE 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     71C0 A104     
0105 71C2 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 71C4 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     71C6 A108     
0109 71C8 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     71CA A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 71CC 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 71CE 0286  22         ci    tmp2,80               ; Check line length
     71D0 0050     
0117 71D2 1202  14         jle   edb.line.unpack.fb.copy
0118 71D4 0206  20         li    tmp2,80               ; Only process first 80 characters
     71D6 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 71D8 C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     71DA A106     
0124 71DC A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     71DE A104     
0125               
0126               
0127 71E0 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     71E2 24E0     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 71E4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 71E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 71E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 71EA C2F9  30         mov   *stack+,r11           ; Pop r11
0139 71EC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0128                       ;-----------------------------------------------------------------------
0129                       ; Background tasks
0130                       ;-----------------------------------------------------------------------
0131                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 71EE 0649  14         dect  stack
0009 71F0 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 71F2 06A0  32         bl    @pane.vdpdump
     71F4 780E     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 71F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0019 71F8 0460  28         b     @slotok
     71FA 2E84     
                   < stevie_b1.asm
0132                       ;-----------------------------------------------------------------------
0133                       ; Screen pane utilities
0134                       ;-----------------------------------------------------------------------
0135                       copy  "pane.utils.colorscheme.asm"  ; Colorscheme handling in panes
     **** ****     > pane.utils.colorscheme.asm
0001               
0002               
0003               
0004               * FILE......: pane.utils.colorscheme.asm
0005               * Purpose...: Stevie Editor - Color scheme for panes
0006               
0007               ***************************************************************
0008               * pane.action.colorscheme.cycle
0009               * Cycle through available color scheme
0010               ***************************************************************
0011               * bl  @pane.action.colorscheme.cycle
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.action.colorscheme.cycle:
0020 71FC 0649  14         dect  stack
0021 71FE C64B  30         mov   r11,*stack            ; Push return address
0022 7200 0649  14         dect  stack
0023 7202 C644  30         mov   tmp0,*stack           ; Push tmp0
0024               
0025 7204 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     7206 A212     
0026 7208 0284  22         ci    tmp0,tv.colorscheme.entries
     720A 000A     
0027                                                   ; Last entry reached?
0028 720C 1103  14         jlt   !
0029 720E 0204  20         li    tmp0,1                ; Reset color scheme index
     7210 0001     
0030 7212 1001  14         jmp   pane.action.colorscheme.switch
0031 7214 0584  14 !       inc   tmp0
0032                       ;-------------------------------------------------------
0033                       ; Switch to new color scheme
0034                       ;-------------------------------------------------------
0035               pane.action.colorscheme.switch:
0036 7216 C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     7218 A212     
0037               
0038 721A 06A0  32         bl    @pane.action.colorscheme.load
     721C 725A     
0039                                                   ; Load current color scheme
0040                       ;-------------------------------------------------------
0041                       ; Show current color palette message
0042                       ;-------------------------------------------------------
0043 721E C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     7220 832A     
     7222 833C     
0044               
0045 7224 06A0  32         bl    @putnum
     7226 2A24     
0046 7228 003E                   byte 0,62
0047 722A A212                   data tv.colorscheme,rambuf,>3020
     722C A100     
     722E 3020     
0048               
0049 7230 06A0  32         bl    @putat
     7232 2442     
0050 7234 0034                   byte 0,52
0051 7236 3C86                   data txt.colorscheme  ; Show color palette message
0052               
0053 7238 C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     723A 833C     
     723C 832A     
0054                       ;-------------------------------------------------------
0055                       ; Delay
0056                       ;-------------------------------------------------------
0057 723E 0204  20         li    tmp0,6000
     7240 1770     
0058 7242 0604  14 !       dec   tmp0
0059 7244 16FE  14         jne   -!
0060                       ;-------------------------------------------------------
0061                       ; Setup one shot task for removing message
0062                       ;-------------------------------------------------------
0063 7246 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     7248 3718     
0064 724A C804  38         mov   tmp0,@tv.task.oneshot
     724C A224     
0065               
0066 724E 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7250 2EF8     
0067 7252 0003                   data 3                ; / for getting consistent delay
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               pane.action.colorscheme.cycle.exit:
0072 7254 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 7256 C2F9  30         mov   *stack+,r11           ; Pop R11
0074 7258 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * pane.action.colorscheme.load
0080               * Load color scheme
0081               ***************************************************************
0082               * bl  @pane.action.colorscheme.load
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * @tv.colorscheme = Index into color scheme table
0086               * @parm1          = Skip screen off if >FFFF
0087               * @parm2          = Skip colorizing marked lines if >FFFF
0088               * @parm3          = Only colorize CMDB pane if >FFFF
0089               *--------------------------------------------------------------
0090               * OUTPUT
0091               * none
0092               *--------------------------------------------------------------
0093               * Register usage
0094               * tmp0,tmp1,tmp2,tmp3,tmp4
0095               ********|*****|*********************|**************************
0096               pane.action.colorscheme.load:
0097 725A 0649  14         dect  stack
0098 725C C64B  30         mov   r11,*stack            ; Save return address
0099 725E 0649  14         dect  stack
0100 7260 C644  30         mov   tmp0,*stack           ; Push tmp0
0101 7262 0649  14         dect  stack
0102 7264 C645  30         mov   tmp1,*stack           ; Push tmp1
0103 7266 0649  14         dect  stack
0104 7268 C646  30         mov   tmp2,*stack           ; Push tmp2
0105 726A 0649  14         dect  stack
0106 726C C647  30         mov   tmp3,*stack           ; Push tmp3
0107 726E 0649  14         dect  stack
0108 7270 C648  30         mov   tmp4,*stack           ; Push tmp4
0109 7272 0649  14         dect  stack
0110 7274 C660  46         mov   @parm1,*stack         ; Push parm1
     7276 A006     
0111 7278 0649  14         dect  stack
0112 727A C660  46         mov   @parm2,*stack         ; Push parm2
     727C A008     
0113 727E 0649  14         dect  stack
0114 7280 C660  46         mov   @parm3,*stack         ; Push parm3
     7282 A00A     
0115                       ;-------------------------------------------------------
0116                       ; Turn screen off
0117                       ;-------------------------------------------------------
0118 7284 C120  34         mov   @parm1,tmp0
     7286 A006     
0119 7288 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     728A FFFF     
0120 728C 1302  14         jeq   !                     ; Yes, so skip screen off
0121 728E 06A0  32         bl    @scroff               ; Turn screen off
     7290 2686     
0122                       ;-------------------------------------------------------
0123                       ; Get FG/BG colors framebuffer text
0124                       ;-------------------------------------------------------
0125 7292 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     7294 A212     
0126 7296 0604  14         dec   tmp0                  ; Internally work with base 0
0127               
0128 7298 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0129 729A 0224  22         ai    tmp0,tv.colorscheme.table
     729C 3812     
0130                                                   ; Add base for color scheme data table
0131 729E C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0132 72A0 C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     72A2 A218     
0133                       ;-------------------------------------------------------
0134                       ; Get and save cursor color
0135                       ;-------------------------------------------------------
0136 72A4 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0137 72A6 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     72A8 00FF     
0138 72AA C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     72AC A216     
0139                       ;-------------------------------------------------------
0140                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0141                       ;-------------------------------------------------------
0142 72AE C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0143 72B0 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     72B2 FF00     
0144 72B4 0988  32         srl   tmp4,8                ; MSB to LSB
0145               
0146 72B6 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0147 72B8 C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0148 72BA 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0149 72BC C806  38         mov   tmp2,@tv.busycolor    ; /
     72BE A21C     
0150               
0151 72C0 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     72C2 00FF     
0152 72C4 C805  38         mov   tmp1,@tv.markcolor    ; /
     72C6 A21A     
0153               
0154 72C8 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0155 72CA 0985  32         srl   tmp1,8                ; \ Right align MN and
0156 72CC C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     72CE A220     
0157                       ;-------------------------------------------------------
0158                       ; Check if only CMDB needs to be colorized
0159                       ;-------------------------------------------------------
0160 72D0 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     72D2 A00A     
     72D4 2022     
0161 72D6 1340  14         jeq   pane.action.colorscheme.cmdbpane
0162                                                   ; Yes, shortcut jump to CMDB pane
0163                       ;-------------------------------------------------------
0164                       ; Get FG color for ruler
0165                       ;-------------------------------------------------------
0166 72D8 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0167 72DA 0245  22         andi  tmp1,>000f            ; Only keep P
     72DC 000F     
0168 72DE 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0169 72E0 C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     72E2 A21E     
0170                       ;-------------------------------------------------------
0171                       ; Write sprite color of line and column indicators to SAT
0172                       ;-------------------------------------------------------
0173 72E4 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0174 72E6 0245  22         andi  tmp1,>00f0            ; Only keep O
     72E8 00F0     
0175 72EA 0A45  24         sla   tmp1,4                ; Move O to MSB
0176 72EC D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     72EE A05D     
0177 72F0 D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     72F2 A061     
0178                       ;-------------------------------------------------------
0179                       ; Dump colors to VDP register 7 (text mode)
0180                       ;-------------------------------------------------------
0181 72F4 C147  18         mov   tmp3,tmp1             ; Get work copy
0182 72F6 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0183 72F8 0265  22         ori   tmp1,>0700
     72FA 0700     
0184 72FC C105  18         mov   tmp1,tmp0
0185 72FE 06A0  32         bl    @putvrx               ; Write VDP register
     7300 2334     
0186                       ;-------------------------------------------------------
0187                       ; Dump colors for frame buffer pane (TAT)
0188                       ;-------------------------------------------------------
0189 7302 C120  34         mov   @tv.ruler.visible,tmp0
     7304 A210     
0190 7306 130C  14         jeq   pane.action.colorscheme.fbdump.noruler
0191               
0192 7308 C120  34         mov   @cmdb.dialog,tmp0
     730A A71C     
0193 730C 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     730E 0068     
0194 7310 1307  14         jeq   pane.action.colorscheme.fbdump.noruler
0195                                                   ; Yes, skip ruler
0196                       ;-------------------------------------------------------
0197                       ; Ruler visible on screen (TAT)
0198                       ;-------------------------------------------------------
0199 7312 C120  34         mov   @cmdb.vdptop,tmp0     ;
     7314 A70E     
0200 7316 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     7318 0050     
0201 731A 0206  20         li    tmp2,(pane.botrow-2)*80
     731C 0690     
0202                                                   ; Number of bytes to fill
0203 731E 1004  14         jmp   pane.action.colorscheme.checkcmdb
0204               
0205               pane.action.colorscheme.fbdump.noruler:
0206                       ;-------------------------------------------------------
0207                       ; No ruler visible on screen (TAT)
0208                       ;-------------------------------------------------------
0209 7320 0204  20         li    tmp0,vdp.fb.toprow.tat
     7322 1850     
0210                                                   ; VDP start address (frame buffer area)
0211 7324 0206  20         li    tmp2,(pane.botrow-1)*80
     7326 06E0     
0212                                                   ; Number of bytes to fill
0213                       ;-------------------------------------------------------
0214                       ; Adjust bottom of frame buffer if CMDB visible
0215                       ;-------------------------------------------------------
0216               pane.action.colorscheme.checkcmdb:
0217 7328 C820  54         mov   @cmdb.visible,@cmdb.visible
     732A A702     
     732C A702     
0218 732E 1302  14         jeq   pane.action.colorscheme.fbdump
0219                                                   ; Not visible, skip adjustment
0220 7330 0226  22         ai    tmp2,-320             ; CMDB adjustment
     7332 FEC0     
0221                       ;-------------------------------------------------------
0222                       ; Dump colors to VDP (TAT)
0223                       ;-------------------------------------------------------
0224               pane.action.colorscheme.fbdump:
0225 7334 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0226 7336 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0227               
0228 7338 06A0  32         bl    @xfilv                ; Fill colors
     733A 2294     
0229                                                   ; i \  tmp0 = start address
0230                                                   ; i |  tmp1 = byte to fill
0231                                                   ; i /  tmp2 = number of bytes to fill
0232                       ;-------------------------------------------------------
0233                       ; Colorize marked lines
0234                       ;-------------------------------------------------------
0235 733C C120  34         mov   @cmdb.dialog,tmp0
     733E A71C     
0236 7340 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     7342 0068     
0237 7344 1309  14         jeq   pane.action.colorscheme.cmdbpane
0238                                                   ; Yes, skip marked lines
0239               
0240 7346 C120  34         mov   @parm2,tmp0
     7348 A008     
0241 734A 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     734C FFFF     
0242 734E 1304  14         jeq   pane.action.colorscheme.cmdbpane
0243               
0244 7350 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     7352 A312     
0245 7354 06A0  32         bl    @fb.colorlines
     7356 7ACA     
0246                       ;-------------------------------------------------------
0247                       ; Dump colors for CMDB header line (TAT)
0248                       ;-------------------------------------------------------
0249               pane.action.colorscheme.cmdbpane:
0250 7358 C120  34         mov   @cmdb.visible,tmp0
     735A A702     
0251 735C 1338  14         jeq   pane.action.colorscheme.errpane
0252                                                   ; Skip if CMDB pane is hidden
0253               
0254 735E C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7360 A70E     
0255 7362 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     7364 A220     
0256 7366 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     7368 0040     
0257 736A 06A0  32         bl    @xfilv                ; Fill colors
     736C 2294     
0258                                                   ; i \  tmp0 = start address
0259                                                   ; i |  tmp1 = byte to fill
0260                                                   ; i /  tmp2 = number of bytes to fill
0261                       ;-------------------------------------------------------
0262                       ; Dump colors for CMDB Stevie logo (TAT)
0263                       ;-------------------------------------------------------
0264 736E C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7370 A70E     
0265 7372 0224  22         ai    tmp0,64               ; Add offset for logo
     7374 0040     
0266 7376 C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     7378 A220     
0267 737A D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     737C A221     
0268                                                   ; Copy same value into MSB
0269 737E 0945  24         srl   tmp1,4                ;
0270 7380 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     7382 00FF     
0271               
0272 7384 0206  20         li    tmp2,16               ; Number of bytes to fill
     7386 0010     
0273 7388 06A0  32         bl    @xfilv                ; Fill colors
     738A 2294     
0274                                                   ; i \  tmp0 = start address
0275                                                   ; i |  tmp1 = byte to fill
0276                                                   ; i /  tmp2 = number of bytes to fill
0277                       ;-------------------------------------------------------
0278                       ; Dump colors for CMDB pane content (TAT)
0279                       ;-------------------------------------------------------
0280 738C C120  34         mov   @cmdb.vdptop,tmp0     ; \
     738E A70E     
0281 7390 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     7392 0050     
0282                                                   ;
0283 7394 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0284 7396 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     7398 00A0     
0285 739A 06A0  32         bl    @xfilv                ; Fill colors
     739C 2294     
0286                                                   ; i \  tmp0 = start address
0287                                                   ; i |  tmp1 = byte to fill
0288                                                   ; i /  tmp2 = number of bytes to fill
0289               
0290 739E C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73A0 A70E     
0291 73A2 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     73A4 00F0     
0292                                                   ;
0293 73A6 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     73A8 A220     
0294 73AA 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     73AC 0050     
0295 73AE 06A0  32         bl    @xfilv                ; Fill colors
     73B0 2294     
0296                                                   ; i \  tmp0 = start address
0297                                                   ; i |  tmp1 = byte to fill
0298                                                   ; i /  tmp2 = number of bytes to fill
0299               
0300 73B2 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73B4 A70E     
0301 73B6 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     73B8 0140     
0302                                                   ;
0303 73BA C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0304 73BC 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     73BE 00A0     
0305 73C0 06A0  32         bl    @xfilv                ; Fill colors
     73C2 2294     
0306                                                   ; i \  tmp0 = start address
0307                                                   ; i |  tmp1 = byte to fill
0308                                                   ; i /  tmp2 = number of bytes to fill
0309                       ;-------------------------------------------------------
0310                       ; Exit early if only CMDB needed to be colorized
0311                       ;-------------------------------------------------------
0312 73C4 C120  34         mov   @parm3,tmp0
     73C6 A00A     
0313 73C8 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     73CA FFFF     
0314 73CC 1336  14         jeq   pane.action.colorscheme.cursorcolor.cmdb
0315                                                   ; Yes, shortcut to CMDB cursor color
0316                       ;-------------------------------------------------------
0317                       ; Dump colors for error pane (TAT)
0318                       ;-------------------------------------------------------
0319               pane.action.colorscheme.errpane:
0320 73CE C120  34         mov   @tv.error.visible,tmp0
     73D0 A228     
0321 73D2 1306  14         jeq   pane.action.colorscheme.statline
0322                                                   ; Skip if error pane is hidden
0323               
0324 73D4 0205  20         li    tmp1,>00f6            ; White on dark red
     73D6 00F6     
0325 73D8 C805  38         mov   tmp1,@parm1           ; Pass color combination
     73DA A006     
0326               
0327 73DC 06A0  32         bl    @pane.errline.drawcolor
     73DE 75B6     
0328                                                   ; Draw color on rows in error pane
0329                                                   ; \ i  @tv.error.rows = Number of rows
0330                                                   ; / i  @parm1         = Color combination
0331                       ;-------------------------------------------------------
0332                       ; Dump colors for top line and bottom line (TAT)
0333                       ;-------------------------------------------------------
0334               pane.action.colorscheme.statline:
0335 73E0 C160  34         mov   @tv.color,tmp1
     73E2 A218     
0336 73E4 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     73E6 00FF     
0337 73E8 C805  38         mov   tmp1,@parm1           ; Set color combination
     73EA A006     
0338               
0339               
0340 73EC 04E0  34         clr   @parm2                ; Top row on screen
     73EE A008     
0341 73F0 06A0  32         bl    @colors.line.set      ; Load color combination for line
     73F2 74C2     
0342                                                   ; \ i  @parm1 = Color combination
0343                                                   ; / i  @parm2 = Row on physical screen
0344               
0345 73F4 0205  20         li    tmp1,pane.botrow
     73F6 0017     
0346 73F8 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     73FA A008     
0347 73FC 06A0  32         bl    @colors.line.set      ; Load color combination for line
     73FE 74C2     
0348                                                   ; \ i  @parm1 = Color combination
0349                                                   ; / i  @parm2 = Row on physical screen
0350                       ;-------------------------------------------------------
0351                       ; Dump color for hearts in TI Basic dialog (TAT)
0352                       ;-------------------------------------------------------
0353 7400 C160  34         mov   @cmdb.dialog,tmp1
     7402 A71C     
0354 7404 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     7406 006B     
0355 7408 1602  14         jne   pane.action.colorscheme.ruler
0356               
0357 740A 06A0  32         bl    @tibasic.hearts.tat   ; Dump colors for hearts
     740C 7A88     
0358                       ;-------------------------------------------------------
0359                       ; Dump colors for ruler if visible (TAT)
0360                       ;-------------------------------------------------------
0361               pane.action.colorscheme.ruler:
0362 740E C160  34         mov   @cmdb.dialog,tmp1
     7410 A71C     
0363 7412 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     7414 0068     
0364 7416 130A  14         jeq   pane.action.colorscheme.cursorcolor
0365                                                   ; Yes, skip ruler
0366               
0367 7418 C160  34         mov   @tv.ruler.visible,tmp1
     741A A210     
0368 741C 1307  14         jeq   pane.action.colorscheme.cursorcolor
0369               
0370 741E 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     7420 7AB8     
0371 7422 06A0  32         bl    @cpym2v
     7424 2486     
0372 7426 1850                   data vdp.fb.toprow.tat
0373 7428 A370                   data fb.ruler.tat
0374 742A 0050                   data 80               ; Show ruler colors
0375                       ;-------------------------------------------------------
0376                       ; Dump cursor FG color to sprite table (SAT)
0377                       ;-------------------------------------------------------
0378               pane.action.colorscheme.cursorcolor:
0379 742C C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     742E A216     
0380               
0381 7430 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     7432 A222     
0382 7434 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     7436 0000     
0383 7438 1304  14         jeq   pane.action.colorscheme.cursorcolor.fb
0384                                                   ; Yes, set cursor color
0385               
0386               pane.action.colorscheme.cursorcolor.cmdb:
0387 743A 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     743C 00F0     
0388 743E 0A48  24         sla   tmp4,4                ; Move to MSB
0389 7440 1003  14         jmp   !
0390               
0391               pane.action.colorscheme.cursorcolor.fb:
0392 7442 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     7444 000F     
0393 7446 0A88  32         sla   tmp4,8                ; Move to MSB
0394               
0395 7448 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     744A A059     
0396 744C D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     744E A215     
0397                       ;-------------------------------------------------------
0398                       ; Exit
0399                       ;-------------------------------------------------------
0400               pane.action.colorscheme.load.exit:
0401 7450 06A0  32         bl    @scron                ; Turn screen on
     7452 268E     
0402 7454 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7456 A00A     
0403 7458 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     745A A008     
0404 745C C839  50         mov   *stack+,@parm1        ; Pop @parm1
     745E A006     
0405 7460 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0406 7462 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0407 7464 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0408 7466 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0409 7468 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0410 746A C2F9  30         mov   *stack+,r11           ; Pop R11
0411 746C 045B  20         b     *r11                  ; Return to caller
0412               
0413               
0414               
0415               ***************************************************************
0416               * pane.action.colorscheme.statline
0417               * Set color combination for bottom status line
0418               ***************************************************************
0419               * bl @pane.action.colorscheme.statlines
0420               *--------------------------------------------------------------
0421               * INPUT
0422               * @parm1 = Color combination to set
0423               *--------------------------------------------------------------
0424               * OUTPUT
0425               * none
0426               *--------------------------------------------------------------
0427               * Register usage
0428               * tmp0, tmp1, tmp2
0429               ********|*****|*********************|**************************
0430               pane.action.colorscheme.statlines:
0431 746E 0649  14         dect  stack
0432 7470 C64B  30         mov   r11,*stack            ; Save return address
0433 7472 0649  14         dect  stack
0434 7474 C644  30         mov   tmp0,*stack           ; Push tmp0
0435                       ;------------------------------------------------------
0436                       ; Bottom line
0437                       ;------------------------------------------------------
0438 7476 0204  20         li    tmp0,pane.botrow
     7478 0017     
0439 747A C804  38         mov   tmp0,@parm2           ; Last row on screen
     747C A008     
0440 747E 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7480 74C2     
0441                                                   ; \ i  @parm1 = Color combination
0442                                                   ; / i  @parm2 = Row on physical screen
0443                       ;------------------------------------------------------
0444                       ; Exit
0445                       ;------------------------------------------------------
0446               pane.action.colorscheme.statlines.exit:
0447 7482 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0448 7484 C2F9  30         mov   *stack+,r11           ; Pop R11
0449 7486 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0136                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 7488 0649  14         dect  stack
0021 748A C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 748C 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     748E 228E     
0026 7490 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     7492 0000     
     7494 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 7496 06A0  32         bl    @clslot
     7498 2EEA     
0031 749A 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 749C 06A0  32         bl    @clslot
     749E 2EEA     
0034 74A0 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 74A2 C2F9  30         mov   *stack+,r11           ; Pop R11
0040 74A4 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 74A6 0649  14         dect  stack
0061 74A8 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 74AA 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     74AC 228E     
0066 74AE 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     74B0 0000     
     74B2 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0078               
0079 74B4 06A0  32         bl    @mkslot
     74B6 2ECC     
0080 74B8 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     74BA 3752     
0081 74BC FFFF                   data eol
0082               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 74BE C2F9  30         mov   *stack+,r11           ; Pop R11
0090 74C0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0137                       ;-----------------------------------------------------------------------
0138                       ; Screen panes
0139                       ;-----------------------------------------------------------------------
0140                       copy  "colors.line.set.asm"         ; Set color combination for line
     **** ****     > colors.line.set.asm
0001               * FILE......: colors.line.set
0002               * Purpose...: Set color combination for line
0003               
0004               ***************************************************************
0005               * colors.line.set
0006               * Set color combination for line in VDP TAT
0007               ***************************************************************
0008               * bl  @colors.line.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Foreground / Background color
0012               * @parm2 = Row on physical screen
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               colors.line.set:
0021 74C2 0649  14         dect  stack
0022 74C4 C64B  30         mov   r11,*stack            ; Save return address
0023 74C6 0649  14         dect  stack
0024 74C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 74CA 0649  14         dect  stack
0026 74CC C645  30         mov   tmp1,*stack           ; Push tmp1
0027 74CE 0649  14         dect  stack
0028 74D0 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 74D2 0649  14         dect  stack
0030 74D4 C660  46         mov   @parm1,*stack         ; Push parm1
     74D6 A006     
0031 74D8 0649  14         dect  stack
0032 74DA C660  46         mov   @parm2,*stack         ; Push parm2
     74DC A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 74DE C120  34         mov   @parm2,tmp0           ; Get target line
     74E0 A008     
0037 74E2 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     74E4 0050     
0038 74E6 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 74E8 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 74EA 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     74EC 1800     
0042 74EE C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     74F0 A006     
0043 74F2 0206  20         li    tmp2,80               ; Number of bytes to fill
     74F4 0050     
0044               
0045 74F6 06A0  32         bl    @xfilv                ; Fill colors
     74F8 2294     
0046                                                   ; i \  tmp0 = start address
0047                                                   ; i |  tmp1 = byte to fill
0048                                                   ; i /  tmp2 = number of bytes to fill
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               colors.line.set.exit:
0053 74FA C839  50         mov   *stack+,@parm2        ; Pop @parm2
     74FC A008     
0054 74FE C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7500 A006     
0055 7502 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 7504 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 7506 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 7508 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 750A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0141                       copy  "pane.topline.asm"            ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
0017 750C 0649  14         dect  stack
0018 750E C64B  30         mov   r11,*stack            ; Save return address
0019 7510 0649  14         dect  stack
0020 7512 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7514 0649  14         dect  stack
0022 7516 C660  42         mov   @wyx,*stack           ; Push cursor position
     7518 832A     
0023                       ;------------------------------------------------------
0024                       ; Show current file
0025                       ;------------------------------------------------------
0026               pane.topline.file:
0027 751A 06A0  32         bl    @at
     751C 26C6     
0028 751E 0000                   byte 0,0              ; y=0, x=0
0029               
0030 7520 C820  54         mov   @edb.filename.ptr,@parm1
     7522 A514     
     7524 A006     
0031                                                   ; Get string to display
0032 7526 0204  20         li    tmp0,47
     7528 002F     
0033 752A C804  38         mov   tmp0,@parm2           ; Set requested length
     752C A008     
0034 752E 0204  20         li    tmp0,32
     7530 0020     
0035 7532 C804  38         mov   tmp0,@parm3           ; Set character to fill
     7534 A00A     
0036 7536 0204  20         li    tmp0,rambuf
     7538 A100     
0037 753A C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     753C A00C     
0038               
0039               
0040 753E 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     7540 3400     
0041                                                   ; \ i  @parm1 = Pointer to string
0042                                                   ; | i  @parm2 = Requested length
0043                                                   ; | i  @parm3 = Fill characgter
0044                                                   ; | i  @parm4 = Pointer to buffer with
0045                                                   ; /             output string
0046               
0047 7542 C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     7544 A018     
0048 7546 06A0  32         bl    @xutst0               ; /
     7548 2420     
0049                       ;------------------------------------------------------
0050                       ; Check if M1/M2 markers need to be shown
0051                       ;------------------------------------------------------
0052               pane.topline.showmarkers:
0053 754A C120  34         mov   @edb.block.m1,tmp0    ; \
     754C A50E     
0054 754E 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     7550 FFFF     
0055 7552 132C  14         jeq   pane.topline.exit     ; /
0056               
0057 7554 C120  34         mov   @tv.task.oneshot,tmp0 ; \
     7556 A224     
0058 7558 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     755A 3718     
0059                                                   ; | Exit early if overlay message visible
0060 755C 1327  14         jeq   pane.topline.exit     ; /
0061                       ;------------------------------------------------------
0062                       ; Show M1 marker
0063                       ;------------------------------------------------------
0064 755E 06A0  32         bl    @putat
     7560 2442     
0065 7562 0034                   byte 0,52
0066 7564 3AA0                   data txt.m1           ; Show M1 marker message
0067               
0068 7566 C820  54         mov   @edb.block.m1,@parm1
     7568 A50E     
     756A A006     
0069 756C 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     756E 33D4     
0070                                                   ; \ i @parm1           = uint16
0071                                                   ; / o @uint16.unpacked = Output string
0072               
0073 7570 0204  20         li    tmp0,>0500
     7572 0500     
0074 7574 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     7576 A02C     
0075               
0076 7578 06A0  32         bl    @putat
     757A 2442     
0077 757C 0037                   byte 0,55
0078 757E A02C                   data uint16.unpacked  ; Show M1 value
0079                       ;------------------------------------------------------
0080                       ; Show M2 marker
0081                       ;------------------------------------------------------
0082 7580 C120  34         mov   @edb.block.m2,tmp0    ; \
     7582 A510     
0083 7584 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     7586 FFFF     
0084 7588 1311  14         jeq   pane.topline.exit     ; /
0085               
0086 758A 06A0  32         bl    @putat
     758C 2442     
0087 758E 003E                   byte 0,62
0088 7590 3AA4                   data txt.m2           ; Show M2 marker message
0089               
0090 7592 C820  54         mov   @edb.block.m2,@parm1
     7594 A510     
     7596 A006     
0091 7598 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     759A 33D4     
0092                                                   ; \ i @parm1           = uint16
0093                                                   ; / o @uint16.unpacked = Output string
0094               
0095 759C 0204  20         li    tmp0,>0500
     759E 0500     
0096 75A0 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     75A2 A02C     
0097               
0098 75A4 06A0  32         bl    @putat
     75A6 2442     
0099 75A8 0041                   byte 0,65
0100 75AA A02C                   data uint16.unpacked  ; Show M2 value
0101                       ;------------------------------------------------------
0102                       ; Exit
0103                       ;------------------------------------------------------
0104               pane.topline.exit:
0105 75AC C839  42         mov   *stack+,@wyx          ; Pop cursor position
     75AE 832A     
0106 75B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0107 75B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0108 75B4 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0142                       copy  "pane.errline.asm"            ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
0023 75B6 0649  14         dect  stack
0024 75B8 C64B  30         mov   r11,*stack            ; Save return address
0025 75BA 0649  14         dect  stack
0026 75BC C644  30         mov   tmp0,*stack           ; Push tmp0
0027 75BE 0649  14         dect  stack
0028 75C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 75C2 0649  14         dect  stack
0030 75C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 75C6 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     75C8 0017     
0035 75CA C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 75CC 6160  34         s     @tv.error.rows,tmp1   ; /
     75CE A22A     
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
0041 75D0 C805  38         mov   tmp1,@parm2           ; Row on physical screen
     75D2 A008     
0042               
0043 75D4 06A0  32         bl    @colors.line.set      ; Load color combination for line
     75D6 74C2     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 75D8 0585  14         inc   tmp1                  ; Next row
0048 75DA 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 75DC 11F9  14         jlt   pane.errline.drawcolor.loop
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
0055 75DE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 75E0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 75E2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 75E4 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 75E6 045B  20         b     *r11                  ; Return to caller
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
0082 75E8 0649  14         dect  stack
0083 75EA C64B  30         mov   r11,*stack            ; Save return address
0084 75EC 0649  14         dect  stack
0085 75EE C644  30         mov   tmp0,*stack           ; Push tmp0
0086 75F0 0649  14         dect  stack
0087 75F2 C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 75F4 0205  20         li    tmp1,>00f6            ; White on dark red
     75F6 00F6     
0090 75F8 C805  38         mov   tmp1,@parm1
     75FA A006     
0091               
0092 75FC 06A0  32         bl    @pane.errline.drawcolor
     75FE 75B6     
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
0099 7600 0204  20         li    tmp0,tv.error.msg
     7602 A232     
0100 7604 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     7606 A006     
0101               
0102 7608 0204  20         li    tmp0,240
     760A 00F0     
0103 760C C804  38         mov   tmp0,@parm2           ; Set requested length
     760E A008     
0104               
0105 7610 0204  20         li    tmp0,32
     7612 0020     
0106 7614 C804  38         mov   tmp0,@parm3           ; Set character to fill
     7616 A00A     
0107               
0108 7618 0204  20         li    tmp0,rambuf
     761A A100     
0109 761C C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     761E A00C     
0110               
0111 7620 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     7622 3400     
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
0120 7624 06A0  32         bl    @at
     7626 26C6     
0121 7628 1400                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 762A C160  34         mov   @outparm1,tmp1        ; \ Display error message
     762C A018     
0124 762E 06A0  32         bl    @xutst0               ; /
     7630 2420     
0125               
0126 7632 C120  34         mov   @fb.scrrows.max,tmp0  ; \
     7634 A31E     
0127 7636 6120  34         s     @tv.error.rows,tmp0   ; | Adjust number of rows in frame buffer
     7638 A22A     
0128 763A C804  38         mov   tmp0,@fb.scrrows      ; /
     763C A31C     
0129               
0130 763E 0720  34         seto  @tv.error.visible     ; Error line is visible
     7640 A228     
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               pane.errline.show.exit:
0135 7642 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 7644 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 7646 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 7648 045B  20         b     *r11                  ; Return to caller
0139               
0140               
0141               
0142               ***************************************************************
0143               * pane.errline.hide
0144               * Hide error line
0145               ***************************************************************
0146               * bl @pane.errline.hide
0147               *--------------------------------------------------------------
0148               * INPUT
0149               * none
0150               *--------------------------------------------------------------
0151               * OUTPUT
0152               * none
0153               *--------------------------------------------------------------
0154               * Register usage
0155               * none
0156               *--------------------------------------------------------------
0157               * Hiding the error line passes pane focus to frame buffer.
0158               ********|*****|*********************|**************************
0159               pane.errline.hide:
0160 764A 0649  14         dect  stack
0161 764C C64B  30         mov   r11,*stack            ; Save return address
0162 764E 0649  14         dect  stack
0163 7650 C644  30         mov   tmp0,*stack           ; Push tmp0
0164                       ;------------------------------------------------------
0165                       ; Get color combination
0166                       ;------------------------------------------------------
0167 7652 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     7654 328A     
0168               
0169 7656 C120  34         mov   @cmdb.visible,tmp0
     7658 A702     
0170 765A 1303  14         jeq   pane.errline.hide.fbcolor
0171                       ;------------------------------------------------------
0172                       ; CMDB pane color
0173                       ;------------------------------------------------------
0174 765C C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     765E A220     
0175 7660 1003  14         jmp   !
0176                       ;------------------------------------------------------
0177                       ; Frame buffer color
0178                       ;------------------------------------------------------
0179               pane.errline.hide.fbcolor:
0180 7662 C120  34         mov   @tv.color,tmp0        ; Get colors
     7664 A218     
0181 7666 0984  32         srl   tmp0,8                ; Get rid of status line colors
0182                       ;------------------------------------------------------
0183                       ; Dump colors
0184                       ;------------------------------------------------------
0185 7668 C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     766A A006     
0186               
0187 766C 06A0  32         bl    @pane.errline.drawcolor
     766E 75B6     
0188                                                   ; Draw color on rows in error pane
0189                                                   ; \ i  @tv.error.rows = Number of rows
0190                                                   ; / i  @parm1         = Color combination
0191               
0192 7670 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     7672 A228     
0193 7674 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     7676 A31E     
     7678 A31C     
0194                                                   ; Set frame buffer to full size again
0195                       ;------------------------------------------------------
0196                       ; Exit
0197                       ;------------------------------------------------------
0198               pane.errline.hide.exit:
0199 767A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0200 767C C2F9  30         mov   *stack+,r11           ; Pop r11
0201 767E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0143                       copy  "pane.botline.asm"            ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.botline:
0017 7680 0649  14         dect  stack
0018 7682 C64B  30         mov   r11,*stack            ; Save return address
0019 7684 0649  14         dect  stack
0020 7686 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7688 0649  14         dect  stack
0022 768A C660  42         mov   @wyx,*stack           ; Push cursor position
     768C 832A     
0023                       ;------------------------------------------------------
0024                       ; Show block shortcuts if set
0025                       ;------------------------------------------------------
0026 768E C120  34         mov   @edb.block.m2,tmp0    ; \
     7690 A510     
0027 7692 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0028                                                   ; /
0029 7694 1305  14         jeq   pane.botline.show_keys
0030               
0031 7696 06A0  32         bl    @putat
     7698 2442     
0032 769A 1700                   byte pane.botrow,0
0033 769C 3AF2                   data txt.keys.block   ; Show block shortcuts
0034               
0035 769E 1015  14         jmp   pane.botline.show_mode
0036                       ;------------------------------------------------------
0037                       ; Show default message
0038                       ;------------------------------------------------------
0039               pane.botline.show_keys:
0040 76A0 C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     76A2 A0B4     
0041 76A4 130E  14         jeq   !
0042                       ;------------------------------------------------------
0043                       ; Show TI Basic session ID
0044                       ;------------------------------------------------------
0045 76A6 06A0  32         bl    @putat
     76A8 2442     
0046 76AA 1700                   byte pane.botrow,0
0047 76AC 3AC8                   data txt.keys.defaultb
0048                                                   ; Show defaults + TI Basic
0049               
0050 76AE C120  34         mov   @tib.session,tmp0     ; Get Session ID
     76B0 A0B4     
0051 76B2 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     76B4 0130     
0052                                                   ; | length-byte prefix and
0053                                                   ; / ASCII offset 48 (>30)
0054               
0055 76B6 C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     76B8 A100     
0056               
0057 76BA 06A0  32         bl    @putat                ; \
     76BC 2442     
0058 76BE 171B                   byte pane.botrow,27   ; | Display session-ID string
0059 76C0 A100                   data rambuf           ; / Y=bottom row, X=27
0060                       ;------------------------------------------------------
0061                       ; Show default keys
0062                       ;------------------------------------------------------
0063 76C2 06A0  32 !       bl    @putat
     76C4 2442     
0064 76C6 1700                   byte pane.botrow,0
0065 76C8 3AA8                   data txt.keys.default ; Show default keys
0066                       ;------------------------------------------------------
0067                       ; Show text editing mode
0068                       ;------------------------------------------------------
0069               pane.botline.show_mode:
0070 76CA C120  34         mov   @edb.insmode,tmp0
     76CC A50A     
0071 76CE 1605  14         jne   pane.botline.show_mode.insert
0072                       ;------------------------------------------------------
0073                       ; Overwrite mode
0074                       ;------------------------------------------------------
0075 76D0 06A0  32         bl    @putat
     76D2 2442     
0076 76D4 1736                   byte  pane.botrow,54
0077 76D6 388E                   data  txt.ovrwrite
0078 76D8 100C  14         jmp   pane.botline.show_dirty
0079                       ;------------------------------------------------------
0080                       ; Insert mode
0081                       ;------------------------------------------------------
0082               pane.botline.show_mode.insert:
0083 76DA C120  34         mov   @edb.autoinsert,tmp0
     76DC A50C     
0084 76DE 1305  14         jeq   pane.botline.show_mode.insert.noauto
0085                       ;------------------------------------------------------
0086                       ; Auto-Insert
0087                       ;------------------------------------------------------
0088 76E0 06A0  32         bl    @putat
     76E2 2442     
0089 76E4 1736                   byte  pane.botrow,54
0090 76E6 389A                   data  txt.autoinsert
0091 76E8 1004  14         jmp   pane.botline.show_dirty
0092                       ;------------------------------------------------------
0093                       ; No Auto-Insert
0094                       ;------------------------------------------------------
0095               pane.botline.show_mode.insert.noauto:
0096 76EA 06A0  32         bl    @putat
     76EC 2442     
0097 76EE 1736                   byte  pane.botrow,54
0098 76F0 3894                   data  txt.insert
0099                       ;------------------------------------------------------
0100                       ; Show if text was changed in editor buffer
0101                       ;------------------------------------------------------
0102               pane.botline.show_dirty:
0103 76F2 C120  34         mov   @edb.dirty,tmp0
     76F4 A506     
0104 76F6 1305  14         jeq   pane.botline.nochange
0105                       ;------------------------------------------------------
0106                       ; Show "*"
0107                       ;------------------------------------------------------
0108 76F8 06A0  32         bl    @putat
     76FA 2442     
0109 76FC 173A                   byte pane.botrow,58
0110 76FE 38A0                   data txt.star
0111 7700 1004  14         jmp   pane.botline.show_linecol
0112                       ;------------------------------------------------------
0113                       ; Show " "
0114                       ;------------------------------------------------------
0115               pane.botline.nochange:
0116 7702 06A0  32         bl    @putat
     7704 2442     
0117 7706 173A                   byte pane.botrow,58
0118 7708 3BB2                   data txt.ws1          ; Single white space
0119                       ;------------------------------------------------------
0120                       ; Show "line,column"
0121                       ;------------------------------------------------------
0122               pane.botline.show_linecol:
0123 770A C820  54         mov   @fb.row,@parm1
     770C A306     
     770E A006     
0124 7710 06A0  32         bl    @fb.row2line          ; Row to editor line
     7712 30A6     
0125                                                   ; \ i @fb.topline = Top line in frame buffer
0126                                                   ; | i @parm1      = Row in frame buffer
0127                                                   ; / o @outparm1   = Matching line in EB
0128               
0129 7714 05A0  34         inc   @outparm1             ; Add base 1
     7716 A018     
0130                       ;------------------------------------------------------
0131                       ; Show line
0132                       ;------------------------------------------------------
0133 7718 06A0  32         bl    @putnum
     771A 2A24     
0134 771C 173B                   byte  pane.botrow,59  ; YX
0135 771E A018                   data  outparm1,rambuf
     7720 A100     
0136 7722 30                     byte  48              ; ASCII offset
0137 7723   20                   byte  32              ; Padding character
0138                       ;------------------------------------------------------
0139                       ; Show comma
0140                       ;------------------------------------------------------
0141 7724 06A0  32         bl    @putat
     7726 2442     
0142 7728 1740                   byte  pane.botrow,64
0143 772A 3886                   data  txt.delim
0144                       ;------------------------------------------------------
0145                       ; Show column
0146                       ;------------------------------------------------------
0147 772C 06A0  32         bl    @film
     772E 2236     
0148 7730 A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     7732 0020     
     7734 000C     
0149               
0150 7736 C120  34         mov   @fb.column,tmp0       ; Get column
     7738 A30C     
0151 773A A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     773C A310     
0152 773E 0584  14         inc   tmp0                  ; Offset 1
0153 7740 C804  30         mov   tmp0,@waux1           ; Save in temporary
     7742 833C     
0154               
0155 7744 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7746 29A6     
0156 7748 833C                   data  waux1,rambuf
     774A A100     
0157 774C 30                     byte  48              ; ASCII offset
0158 774D   20                   byte  32              ; Fill character
0159               
0160 774E 06A0  32         bl    @trimnum              ; Trim number to the left
     7750 29FE     
0161 7752 A100                   data  rambuf,rambuf+5,32
     7754 A105     
     7756 0020     
0162               
0163 7758 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     775A 0600     
0164 775C D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     775E A105     
0165               
0166                       ;------------------------------------------------------
0167                       ; Decide if row length is to be shown
0168                       ;------------------------------------------------------
0169 7760 C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     7762 A30C     
0170 7764 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7766 A310     
0171 7768 0584  14         inc   tmp0                  ; /
0172 776A 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     776C A308     
0173 776E 1101  14         jlt   pane.botline.show_linecol.linelen
0174 7770 102E  14         jmp   pane.botline.show_linecol.colstring
0175                                                   ; Yes, skip showing row length
0176                       ;------------------------------------------------------
0177                       ; Add ',' delimiter and length of line to string
0178                       ;------------------------------------------------------
0179               pane.botline.show_linecol.linelen:
0180 7772 C120  34         mov   @fb.column,tmp0       ; \
     7774 A30C     
0181 7776 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7778 A310     
0182 777A 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     777C A107     
0183 777E 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     7780 0009     
0184 7782 1101  14         jlt   !                     ; | column.
0185 7784 0585  14         inc   tmp1                  ; /
0186               
0187 7786 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     7788 2F00     
0188 778A DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0189               
0190 778C C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     778E 833C     
0191               
0192 7790 06A0  32         bl    @mknum
     7792 29A6     
0193 7794 A308                   data  fb.row.length,rambuf
     7796 A100     
0194 7798 30                     byte  48              ; ASCII offset
0195 7799   20                   byte  32              ; Padding character
0196               
0197 779A C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     779C 833C     
0198               
0199 779E C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     77A0 A308     
0200 77A2 0284  22         ci    tmp0,10               ; /
     77A4 000A     
0201 77A6 110C  14         jlt   pane.botline.show_line.1digit
0202                       ;------------------------------------------------------
0203                       ; Assert
0204                       ;------------------------------------------------------
0205 77A8 0284  22         ci    tmp0,99
     77AA 0063     
0206 77AC 1205  14         jle   pane.botline.show_line.2digits
0207                       ;------------------------------------------------------
0208                       ; Show length of line (3 digits)
0209                       ;------------------------------------------------------
0210               pane.botline.show_line.3digits:
0211 77AE 0204  20         li    tmp0,rambuf+2
     77B0 A102     
0212 77B2 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0213 77B4 DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0214 77B6 1006  14         jmp   pane.botline.show_line.rest
0215                       ;------------------------------------------------------
0216                       ; Show length of line (2 digits)
0217                       ;------------------------------------------------------
0218               pane.botline.show_line.2digits:
0219 77B8 0204  20         li    tmp0,rambuf+3
     77BA A103     
0220 77BC DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0221 77BE 1002  14         jmp   pane.botline.show_line.rest
0222                       ;------------------------------------------------------
0223                       ; Show length of line (1 digit)
0224                       ;------------------------------------------------------
0225               pane.botline.show_line.1digit:
0226 77C0 0204  20         li    tmp0,rambuf+4
     77C2 A104     
0227               pane.botline.show_line.rest:
0228 77C4 DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0229 77C6 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     77C8 A100     
0230 77CA DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     77CC A100     
0231                       ;------------------------------------------------------
0232                       ; Show column string
0233                       ;------------------------------------------------------
0234               pane.botline.show_linecol.colstring:
0235 77CE 06A0  32         bl    @putat
     77D0 2442     
0236 77D2 1741                   byte pane.botrow,65
0237 77D4 A105                   data rambuf+5         ; Show string
0238                       ;------------------------------------------------------
0239                       ; Show lines in buffer unless on last line in file
0240                       ;------------------------------------------------------
0241 77D6 C820  54         mov   @fb.row,@parm1
     77D8 A306     
     77DA A006     
0242 77DC 06A0  32         bl    @fb.row2line
     77DE 30A6     
0243 77E0 8820  50         c     @edb.lines,@outparm1
     77E2 A504     
     77E4 A018     
0244 77E6 1605  14         jne   pane.botline.show_lines_in_buffer
0245               
0246 77E8 06A0  32         bl    @putat
     77EA 2442     
0247 77EC 1748                   byte pane.botrow,72
0248 77EE 3888                   data txt.bottom
0249               
0250 77F0 1009  14         jmp   pane.botline.exit
0251                       ;------------------------------------------------------
0252                       ; Show lines in buffer
0253                       ;------------------------------------------------------
0254               pane.botline.show_lines_in_buffer:
0255 77F2 C820  46         mov   @edb.lines,@waux1
     77F4 A504     
     77F6 833C     
0256               
0257 77F8 06A0  32         bl    @putnum
     77FA 2A24     
0258 77FC 1748                   byte pane.botrow,72   ; YX
0259 77FE 833C                   data waux1,rambuf
     7800 A100     
0260 7802 30                     byte 48
0261 7803   20                   byte 32
0262                       ;------------------------------------------------------
0263                       ; Exit
0264                       ;------------------------------------------------------
0265               pane.botline.exit:
0266 7804 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7806 832A     
0267 7808 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0268 780A C2F9  30         mov   *stack+,r11           ; Pop r11
0269 780C 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0144                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 780E 0649  14         dect  stack
0025 7810 C64B  30         mov   r11,*stack            ; Save return address
0026 7812 0649  14         dect  stack
0027 7814 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7816 0649  14         dect  stack
0029 7818 C660  42         mov   @wyx,*stack           ; Push cursor position
     781A 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 781C 20A0  32         coc   @wbit10,config
     781E 200C     
0035 7820 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 7822 06A0  32         bl    @putat
     7824 2442     
0040 7826 174E                   byte pane.botrow,78
0041 7828 3BBC                   data txt.ws4
0042 782A 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 782C 06A0  32         bl    @putat
     782E 2442     
0048 7830 174E                   byte pane.botrow,78
0049 7832 3BAA                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 7834 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     7836 A702     
0055 7838 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 783A C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     783C A71A     
0061 783E 1343  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 7840 0284  22         ci    tmp0,tv.1timeonly
     7842 00FE     
0066 7844 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 7846 0649  14         dect  stack
0073 7848 C660  46         mov   @parm1,*stack         ; Push @parm1
     784A A006     
0074 784C 0649  14         dect  stack
0075 784E C660  46         mov   @parm2,*stack         ; Push @parm2
     7850 A008     
0076 7852 0649  14         dect  stack
0077 7854 C660  46         mov   @parm3,*stack         ; Push @parm3
     7856 A00A     
0078               
0079 7858 0720  34         seto  @parm1                ; Do not turn screen off
     785A A006     
0080 785C 0720  34         seto  @parm2                ; Skip colorzing marked lines
     785E A008     
0081 7860 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7862 A00A     
0082               
0083 7864 06A0  32         bl    @pane.action.colorscheme.load
     7866 725A     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 7868 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     786A A00A     
0092 786C C839  50         mov   *stack+,@parm2        ; Pop @parm2
     786E A008     
0093 7870 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7872 A006     
0094               
0095 7874 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7876 A71A     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 7878 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     787A 7A4C     
0101 787C 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     787E A71A     
0102 7880 1022  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7882 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7884 A318     
0107 7886 130E  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109 7888 C820  54         mov   @fb.scrrows,@parm1    ; Number of lines to dump
     788A A31C     
     788C A006     
0110               
0111               pane.vdpdump.dump:
0112 788E 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     7890 7ADC     
0113                                                   ; \ i  @parm1 = number of lines to dump
0114                                                   ; /
0115                       ;------------------------------------------------------
0116                       ; Color the lines in the framebuffer (TAT)
0117                       ;------------------------------------------------------
0118 7892 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7894 A312     
0119 7896 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0120               
0121 7898 06A0  32         bl    @fb.colorlines        ; Colorize lines M1/M2
     789A 7ACA     
0122                       ;-------------------------------------------------------
0123                       ; Finished with frame buffer
0124                       ;-------------------------------------------------------
0125               pane.vdpdump.dumped:
0126 789C 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     789E A318     
0127 78A0 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     78A2 A31A     
0128                       ;-------------------------------------------------------
0129                       ; Refresh top and bottom line
0130                       ;-------------------------------------------------------
0131               pane.vdpdump.statlines:
0132 78A4 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     78A6 A31A     
0133 78A8 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0134               
0135 78AA 06A0  32         bl    @pane.topline         ; Draw top line
     78AC 750C     
0136 78AE 06A0  32         bl    @pane.botline         ; Draw bottom line
     78B0 7680     
0137 78B2 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     78B4 A31A     
0138                       ;------------------------------------------------------
0139                       ; Show ruler with tab positions
0140                       ;------------------------------------------------------
0141 78B6 C120  34         mov   @tv.ruler.visible,tmp0
     78B8 A210     
0142                                                   ; Should ruler be visible?
0143 78BA 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0144               
0145 78BC 06A0  32         bl    @cpym2v
     78BE 2486     
0146 78C0 0050                   data vdp.fb.toprow.sit
0147 78C2 A320                   data fb.ruler.sit
0148 78C4 0050                   data 80               ; Show ruler
0149                       ;------------------------------------------------------
0150                       ; Exit task
0151                       ;------------------------------------------------------
0152               pane.vdpdump.exit:
0153 78C6 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     78C8 832A     
0154 78CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0155 78CC C2F9  30         mov   *stack+,r11           ; Pop r11
0156 78CE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0145                       ;-----------------------------------------------------------------------
0146                       ; Stubs
0147                       ;-----------------------------------------------------------------------
0148                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 78D0 0649  14         dect  stack
0010 78D2 C64B  30         mov   r11,*stack            ; Save return address
0011 78D4 0649  14         dect  stack
0012 78D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 78D8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78DA 2FB0     
0017 78DC 6004                   data bank2.rom        ; | i  p0 = bank address
0018 78DE 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 78E0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 78E2 C120  34         mov   @outparm1,tmp0
     78E4 A018     
0024 78E6 1304  14         jeq   fm.loadfile.exit
0025               
0026 78E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 78EA C2F9  30         mov   *stack+,r11           ; Pop r11
0028 78EC 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     78EE 7994     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 78F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 78F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 78F4 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 78F6 0649  14         dect  stack
0044 78F8 C64B  30         mov   r11,*stack            ; Save return address
0045 78FA 0649  14         dect  stack
0046 78FC C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 78FE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7900 2FB0     
0051 7902 6004                   data bank2.rom        ; | i  p0 = bank address
0052 7904 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0053 7906 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 7908 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 790A C2F9  30         mov   *stack+,r11           ; Pop r11
0060 790C 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               **************************************************************
0064               * Stub for "fm.browse.fname.suffix"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.browse.fname.suffix:
0068 790E 0649  14         dect  stack
0069 7910 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 7912 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7914 2FB0     
0074 7916 6004                   data bank2.rom        ; | i  p0 = bank address
0075 7918 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0076 791A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 791C C2F9  30         mov   *stack+,r11           ; Pop r11
0081 791E 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
0089 7920 0649  14         dect  stack
0090 7922 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 7924 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7926 2FB0     
0095 7928 6004                   data bank2.rom        ; | i  p0 = bank address
0096 792A 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0097 792C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 792E C2F9  30         mov   *stack+,r11           ; Pop r11
0102 7930 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
0110 7932 0649  14         dect  stack
0111 7934 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 7936 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7938 2FB0     
0116 793A 6004                   data bank2.rom        ; | i  p0 = bank address
0117 793C 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0118 793E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 7940 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 7942 045B  20         b     *r11                  ; Return to caller
0124               
0125               
0126               ***************************************************************
0127               * Stub for dialog "Help"
0128               * bank3 vec.1
0129               ********|*****|*********************|**************************
0130               dialog.help.next:
0131 7944 8820  50         c     @w$0008,@cmdb.dialog.var
     7946 2008     
     7948 A71E     
0132 794A 1304  14         jeq   !
0133 794C A820  54         a     @w$0008,@cmdb.dialog.var
     794E 2008     
     7950 A71E     
0134 7952 1002  14         jmp   dialog.help
0135 7954 04E0  34 !       clr   @cmdb.dialog.var
     7956 A71E     
0136               dialog.help:
0137 7958 C820  54         mov   @dialog.help.vector,@trmpvector
     795A 7960     
     795C A034     
0138 795E 1059  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 7960 7FC0             data  vec.1
0141               
0142               
0143               ***************************************************************
0144               * Stub for dialog "Load file"
0145               * bank3 vec.2
0146               ********|*****|*********************|**************************
0147               dialog.load:
0148 7962 C820  54         mov   @dialog.load.vector,@trmpvector
     7964 796A     
     7966 A034     
0149 7968 1054  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 796A 7FC2             data  vec.2
0152               
0153               
0154               ***************************************************************
0155               * Stub for dialog "Save file"
0156               * bank3 vec.3
0157               ********|*****|*********************|**************************
0158               dialog.save:
0159 796C C820  54         mov   @dialog.save.vector,@trmpvector
     796E 7974     
     7970 A034     
0160 7972 104F  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 7974 7FC4             data  vec.3
0163               
0164               
0165               ***************************************************************
0166               * Stub for dialog "Insert file at line"
0167               * bank3 vec.4
0168               ********|*****|*********************|**************************
0169               dialog.insert:
0170 7976 C820  54         mov   @dialog.insert.vector,@trmpvector
     7978 797E     
     797A A034     
0171 797C 104A  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 797E 7FC6             data  vec.4
0174               
0175               
0176               ***************************************************************
0177               * Stub for dialog "Print file"
0178               * bank3 vec.5
0179               ********|*****|*********************|**************************
0180               dialog.print:
0181 7980 C820  54         mov   @dialog.print.vector,@trmpvector
     7982 7988     
     7984 A034     
0182 7986 1045  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 7988 7FC8             data  vec.5
0185               
0186               
0187               ***************************************************************
0188               * Stub for dialog "File"
0189               * bank3 vec.6
0190               ********|*****|*********************|**************************
0191               dialog.file:
0192 798A C820  54         mov   @dialog.file.vector,@trmpvector
     798C 7992     
     798E A034     
0193 7990 1040  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 7992 7FCA             data  vec.6
0196               
0197               
0198               ***************************************************************
0199               * Stub for dialog "Unsaved Changes"
0200               * bank3 vec.7
0201               ********|*****|*********************|**************************
0202               dialog.unsaved:
0203 7994 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     7996 A728     
0204 7998 C820  54         mov   @dialog.unsaved.vector,@trmpvector
     799A 79A0     
     799C A034     
0205 799E 1039  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 79A0 7FCC             data  vec.7
0208               
0209               
0210               ***************************************************************
0211               * Stub for dialog "Copy clipboard to line ..."
0212               * bank3 vec.8
0213               ********|*****|*********************|**************************
0214               dialog.clipboard:
0215 79A2 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     79A4 79AA     
     79A6 A034     
0216 79A8 1034  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 79AA 7FCE             data  vec.8
0219               
0220               
0221               ***************************************************************
0222               * Stub for dialog "Configure clipboard device"
0223               * bank3 vec.9
0224               ********|*****|*********************|**************************
0225               dialog.clipdev:
0226 79AC C820  54         mov   @dialog.clipdev.vector,@trmpvector
     79AE 79B4     
     79B0 A034     
0227 79B2 102F  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 79B4 7FD0             data  vec.9
0230               
0231               
0232               ***************************************************************
0233               * Stub for dialog "Configure"
0234               * bank3 vec.10
0235               ********|*****|*********************|**************************
0236               dialog.config:
0237 79B6 C820  54         mov   @dialog.config.vector,@trmpvector
     79B8 79BE     
     79BA A034     
0238 79BC 102A  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 79BE 7FD2             data  vec.10
0241               
0242               
0243               ***************************************************************
0244               * Stub for dialog "Append file"
0245               * bank3 vec.11
0246               ********|*****|*********************|**************************
0247               dialog.append:
0248 79C0 C820  54         mov   @dialog.append.vector,@trmpvector
     79C2 79C8     
     79C4 A034     
0249 79C6 1025  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 79C8 7FD4             data  vec.11
0252               
0253               
0254               ***************************************************************
0255               * Stub for dialog "Cartridge"
0256               * bank3 vec.12
0257               ********|*****|*********************|**************************
0258               dialog.cartridge:
0259 79CA C820  54         mov   @dialog.cartridge.vector,@trmpvector
     79CC 79D2     
     79CE A034     
0260 79D0 1020  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 79D2 7FD6             data  vec.12
0263               
0264               
0265               ***************************************************************
0266               * Stub for dialog "Basic"
0267               * bank3 vec.13
0268               ********|*****|*********************|**************************
0269               dialog.basic:
0270 79D4 C820  54         mov   @dialog.basic.vector,@trmpvector
     79D6 79DC     
     79D8 A034     
0271 79DA 101B  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 79DC 7FD8             data  vec.13
0274               
0275               
0276               ***************************************************************
0277               * Stub for dialog "Shortcuts"
0278               * bank3 vec.14
0279               ********|*****|*********************|**************************
0280               dialog.shortcuts:
0281 79DE C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     79E0 79E6     
     79E2 A034     
0282 79E4 1016  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 79E6 7FDA             data  vec.14
0285               
0286               
0287               ***************************************************************
0288               * Stub for dialog "Configure editor"
0289               * bank3 vec.15
0290               ********|*****|*********************|**************************
0291               dialog.editor:
0292 79E8 C820  54         mov   @dialog.editor.vector,@trmpvector
     79EA 79F0     
     79EC A034     
0293 79EE 1011  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.editor.vector:
0295 79F0 7FDC             data  vec.15
0296               
0297               
0298               ***************************************************************
0299               * Stub for dialog "Go to line"
0300               * bank3 vec.16
0301               ********|*****|*********************|**************************
0302               dialog.goto:
0303 79F2 C820  54         mov   @dialog.goto.vector,@trmpvector
     79F4 79FA     
     79F6 A034     
0304 79F8 100C  14         jmp   _trampoline.bank3     ; Show dialog
0305               dialog.goto.vector:
0306 79FA 7FDE             data  vec.16
0307               
0308               
0309               ***************************************************************
0310               * Stub for dialog "Main Menu"
0311               * bank3 vec.30
0312               ********|*****|*********************|**************************
0313               dialog.menu:
0314                       ;------------------------------------------------------
0315                       ; Check if block mode is active
0316                       ;------------------------------------------------------
0317 79FC C120  34         mov   @edb.block.m2,tmp0    ; \
     79FE A510     
0318 7A00 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0319                                                   ; /
0320 7A02 1302  14         jeq   !                     ; Block mode inactive, show dialog
0321                       ;------------------------------------------------------
0322                       ; Special treatment for block mode
0323                       ;------------------------------------------------------
0324 7A04 0460  28         b     @edkey.action.block.reset
     7A06 68F8     
0325                                                   ; Reset block mode
0326                       ;------------------------------------------------------
0327                       ; Show dialog
0328                       ;------------------------------------------------------
0329 7A08 C820  54 !       mov   @dialog.menu.vector,@trmpvector
     7A0A 7A10     
     7A0C A034     
0330 7A0E 1001  14         jmp   _trampoline.bank3     ; Show dialog
0331               dialog.menu.vector:
0332 7A10 7FFA             data  vec.30
0333               
0334               
0335               
0336               ***************************************************************
0337               * Trampoline 1 (bank 3, dialog)
0338               ********|*****|*********************|**************************
0339               _trampoline.bank3:
0340 7A12 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     7A14 7488     
0341                       ;------------------------------------------------------
0342                       ; Call routine in specified bank
0343                       ;------------------------------------------------------
0344 7A16 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A18 2FB0     
0345 7A1A 6006                   data bank3.rom        ; | i  p0 = bank address
0346 7A1C FFFF                   data >ffff            ; | i  p1 = Vector with target address
0347                                                   ; |         (deref @trmpvector)
0348 7A1E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0349                       ;------------------------------------------------------
0350                       ; Exit
0351                       ;------------------------------------------------------
0352 7A20 0460  28         b     @edkey.action.cmdb.show
     7A22 6ABA     
0353                                                   ; Show dialog in CMDB pane
0354               
0355               
0356               ***************************************************************
0357               * Stub for "error.display"
0358               * bank3 vec.18
0359               ********|*****|*********************|**************************
0360               error.display:
0361 7A24 C820  54         mov   @error.display.vector,@trmpvector
     7A26 7A2C     
     7A28 A034     
0362 7A2A 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0363               error.display.vector:
0364 7A2C 7FE2             data  vec.18
0365               
0366               
0367               ***************************************************************
0368               * Stub for "pane.show_hintx"
0369               * bank3 vec.19
0370               ********|*****|*********************|**************************
0371               pane.show_hintx:
0372 7A2E C820  54         mov   @pane.show_hintx.vector,@trmpvector
     7A30 7A36     
     7A32 A034     
0373 7A34 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0374               pane.show_hintx.vector:
0375 7A36 7FE4             data  vec.19
0376               
0377               
0378               ***************************************************************
0379               * Stub for "pane.cmdb.show"
0380               * bank3 vec.20
0381               ********|*****|*********************|**************************
0382               pane.cmdb.show:
0383 7A38 C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     7A3A 7A40     
     7A3C A034     
0384 7A3E 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0385               pane.cmdb.show.vector:
0386 7A40 7FE6             data  vec.20
0387               
0388               
0389               ***************************************************************
0390               * Stub for "pane.cmdb.hide"
0391               * bank3 vec.21
0392               ********|*****|*********************|**************************
0393               pane.cmdb.hide:
0394 7A42 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7A44 7A4A     
     7A46 A034     
0395 7A48 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0396               pane.cmdb.hide.vector:
0397 7A4A 7FE8             data  vec.21
0398               
0399               
0400               ***************************************************************
0401               * Stub for "pane.cmdb.draw"
0402               * bank3 vec.22
0403               ********|*****|*********************|**************************
0404               pane.cmdb.draw:
0405 7A4C C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7A4E 7A54     
     7A50 A034     
0406 7A52 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0407               pane.cmdb.draw.vector:
0408 7A54 7FEA             data  vec.22
0409               
0410               
0411               ***************************************************************
0412               * Stub for "cmdb.refresh"
0413               * bank3 vec.24
0414               ********|*****|*********************|**************************
0415               cmdb.refresh:
0416 7A56 C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7A58 7A5E     
     7A5A A034     
0417 7A5C 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0418               cmdb.refresh.vector:
0419 7A5E 7FEE             data  vec.24
0420               
0421               
0422               ***************************************************************
0423               * Stub for "cmdb.cmd.clear"
0424               * bank3 vec.25
0425               ********|*****|*********************|**************************
0426               cmdb.cmd.clear:
0427 7A60 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7A62 7A68     
     7A64 A034     
0428 7A66 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0429               cmdb.cmd.clear.vector:
0430 7A68 7FF0             data  vec.25
0431               
0432               
0433               ***************************************************************
0434               * Stub for "cmdb.cmdb.getlength"
0435               * bank3 vec.26
0436               ********|*****|*********************|**************************
0437               cmdb.cmd.getlength:
0438 7A6A C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7A6C 7A72     
     7A6E A034     
0439 7A70 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0440               cmdb.cmd.getlength.vector:
0441 7A72 7FF2             data  vec.26
0442               
0443               
0444               ***************************************************************
0445               * Stub for "cmdb.cmdb.preset"
0446               * bank3 vec.27
0447               ********|*****|*********************|**************************
0448               cmdb.cmd.preset:
0449 7A74 C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7A76 7A7C     
     7A78 A034     
0450 7A7A 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0451               cmdb.cmd.preset.vector:
0452 7A7C 7FF4             data  vec.27
0453               
0454               
0455               ***************************************************************
0456               * Stub for "cmdb.cmdb.set"
0457               * bank3 vec.28
0458               ********|*****|*********************|**************************
0459               cmdb.cmd.set:
0460 7A7E C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     7A80 7A86     
     7A82 A034     
0461 7A84 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0462               cmdb.cmd.set.vector:
0463 7A86 7FF6             data  vec.28
0464               
0465               
0466               
0467               ***************************************************************
0468               * Stub for "tibasic.hearts.tat"
0469               * bank3 vec.29
0470               ********|*****|*********************|**************************
0471               tibasic.hearts.tat:
0472 7A88 C820  54         mov   @tibasic.hearts.tat.vector,@trmpvector
     7A8A 7A90     
     7A8C A034     
0473 7A8E 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0474               tibasic.hearts.tat.vector:
0475 7A90 7FF8             data  vec.29
0476               
0477               
0478               
0479               **************************************************************
0480               * Stub for "tibasic.am.toggle"
0481               * bank3 vec.31
0482               ********|*****|*********************|**************************
0483               tibasic.am.toggle:
0484 7A92 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     7A94 7A9A     
     7A96 A034     
0485 7A98 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0486               tibasic.am.toggle.vector:
0487 7A9A 7FFC             data  vec.31
0488               
0489               
0490               **************************************************************
0491               * Stub for "fm.fastmode"
0492               * bank3 vec.32
0493               ********|*****|*********************|**************************
0494               fm.fastmode:
0495 7A9C C820  54         mov   @fm.fastmode.vector,@trmpvector
     7A9E 7AA4     
     7AA0 A034     
0496 7AA2 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0497               fm.fastmode.vector:
0498 7AA4 7FFE             data  vec.32
0499               
0500               
0501               
0502               
0503               ***************************************************************
0504               * Trampoline bank 3 with return
0505               ********|*****|*********************|**************************
0506               _trampoline.bank3.ret:
0507 7AA6 0649  14         dect  stack
0508 7AA8 C64B  30         mov   r11,*stack            ; Save return address
0509                       ;------------------------------------------------------
0510                       ; Call routine in specified bank
0511                       ;------------------------------------------------------
0512 7AAA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AAC 2FB0     
0513 7AAE 6006                   data bank3.rom        ; | i  p0 = bank address
0514 7AB0 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0515                                                   ; |         (deref @trmpvector)
0516 7AB2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0517                       ;------------------------------------------------------
0518                       ; Exit
0519                       ;------------------------------------------------------
0520 7AB4 C2F9  30         mov   *stack+,r11           ; Pop r11
0521 7AB6 045B  20         b     *r11                  ; Return to caller
0522               
0523               
0524               ***************************************************************
0525               * Stub for "fb.ruler.init"
0526               * bank4 vec.2
0527               ********|*****|*********************|**************************
0528               fb.ruler.init:
0529 7AB8 0649  14         dect  stack
0530 7ABA C64B  30         mov   r11,*stack            ; Save return address
0531                       ;------------------------------------------------------
0532                       ; Setup ruler in memory
0533                       ;------------------------------------------------------
0534 7ABC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7ABE 2FB0     
0535 7AC0 6008                   data bank4.rom        ; | i  p0 = bank address
0536 7AC2 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0537 7AC4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0538                       ;------------------------------------------------------
0539                       ; Exit
0540                       ;------------------------------------------------------
0541 7AC6 C2F9  30         mov   *stack+,r11           ; Pop r11
0542 7AC8 045B  20         b     *r11                  ; Return to caller
0543               
0544               
0545               ***************************************************************
0546               * Stub for "fb.colorlines"
0547               * bank4 vec.3
0548               ********|*****|*********************|**************************
0549               fb.colorlines:
0550 7ACA 0649  14         dect  stack
0551 7ACC C64B  30         mov   r11,*stack            ; Save return address
0552                       ;------------------------------------------------------
0553                       ; Colorize frame buffer content
0554                       ;------------------------------------------------------
0555 7ACE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AD0 2FB0     
0556 7AD2 6008                   data bank4.rom        ; | i  p0 = bank address
0557 7AD4 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0558 7AD6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0559                       ;------------------------------------------------------
0560                       ; Exit
0561                       ;------------------------------------------------------
0562 7AD8 C2F9  30         mov   *stack+,r11           ; Pop r11
0563 7ADA 045B  20         b     *r11                  ; Return to caller
0564               
0565               
0566               ***************************************************************
0567               * Stub for "fb.vdpdump"
0568               * bank4 vec.4
0569               ********|*****|*********************|**************************
0570               fb.vdpdump:
0571 7ADC 0649  14         dect  stack
0572 7ADE C64B  30         mov   r11,*stack            ; Save return address
0573                       ;------------------------------------------------------
0574                       ; Colorize frame buffer content
0575                       ;------------------------------------------------------
0576 7AE0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AE2 2FB0     
0577 7AE4 6008                   data bank4.rom        ; | i  p0 = bank address
0578 7AE6 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0579 7AE8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0580                       ;------------------------------------------------------
0581                       ; Exit
0582                       ;------------------------------------------------------
0583 7AEA C2F9  30         mov   *stack+,r11           ; Pop r11
0584 7AEC 045B  20         b     *r11                  ; Return to caller
0585               
0586               
0587               ***************************************************************
0588               * Stub for "fb.hscroll"
0589               * bank4 vec.6
0590               ********|*****|*********************|**************************
0591               fb.hscroll:
0592 7AEE 0649  14         dect  stack
0593 7AF0 C64B  30         mov   r11,*stack            ; Save return address
0594                       ;------------------------------------------------------
0595                       ; Colorize frame buffer content
0596                       ;------------------------------------------------------
0597 7AF2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AF4 2FB0     
0598 7AF6 6008                   data bank4.rom        ; | i  p0 = bank address
0599 7AF8 7FCA                   data vec.6            ; | i  p1 = Vector with target address
0600 7AFA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0601                       ;------------------------------------------------------
0602                       ; Exit
0603                       ;------------------------------------------------------
0604 7AFC C2F9  30         mov   *stack+,r11           ; Pop r11
0605 7AFE 045B  20         b     *r11                  ; Return to caller
0606               
0607               
0608               ***************************************************************
0609               * Stub for "fb.restore"
0610               * bank4 vec.7
0611               ********|*****|*********************|**************************
0612               fb.restore:
0613 7B00 0649  14         dect  stack
0614 7B02 C64B  30         mov   r11,*stack            ; Save return address
0615                       ;------------------------------------------------------
0616                       ; Colorize frame buffer content
0617                       ;------------------------------------------------------
0618 7B04 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B06 2FB0     
0619 7B08 6008                   data bank4.rom        ; | i  p0 = bank address
0620 7B0A 7FCC                   data vec.7            ; | i  p1 = Vector with target address
0621 7B0C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0622                       ;------------------------------------------------------
0623                       ; Exit
0624                       ;------------------------------------------------------
0625 7B0E C2F9  30         mov   *stack+,r11           ; Pop r11
0626 7B10 045B  20         b     *r11                  ; Return to caller
0627               
0628               
0629               ***************************************************************
0630               * Stub for "fb.refresh"
0631               * bank4 vec.8
0632               ********|*****|*********************|**************************
0633               fb.refresh:
0634 7B12 0649  14         dect  stack
0635 7B14 C64B  30         mov   r11,*stack            ; Save return address
0636                       ;------------------------------------------------------
0637                       ; Colorize frame buffer content
0638                       ;------------------------------------------------------
0639 7B16 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B18 2FB0     
0640 7B1A 6008                   data bank4.rom        ; | i  p0 = bank address
0641 7B1C 7FCE                   data vec.8            ; | i  p1 = Vector with target address
0642 7B1E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0643                       ;------------------------------------------------------
0644                       ; Exit
0645                       ;------------------------------------------------------
0646 7B20 C2F9  30         mov   *stack+,r11           ; Pop r11
0647 7B22 045B  20         b     *r11                  ; Return to caller
0648               
0649               
0650               ***************************************************************
0651               * Stub for "fb.get.nonblank"
0652               * bank4 vec.9
0653               ********|*****|*********************|**************************
0654               fb.get.nonblank:
0655 7B24 0649  14         dect  stack
0656 7B26 C64B  30         mov   r11,*stack            ; Save return address
0657                       ;------------------------------------------------------
0658                       ; Colorize frame buffer content
0659                       ;------------------------------------------------------
0660 7B28 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B2A 2FB0     
0661 7B2C 6008                   data bank4.rom        ; | i  p0 = bank address
0662 7B2E 7FD0                   data vec.9            ; | i  p1 = Vector with target address
0663 7B30 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0664                       ;------------------------------------------------------
0665                       ; Exit
0666                       ;------------------------------------------------------
0667 7B32 C2F9  30         mov   *stack+,r11           ; Pop r11
0668 7B34 045B  20         b     *r11                  ; Return to caller
0669               
0670               
0671               ***************************************************************
0672               * Stub for "fb.tab.prev"
0673               * bank4 vec.10
0674               ********|*****|*********************|**************************
0675               fb.tab.prev:
0676 7B36 0649  14         dect  stack
0677 7B38 C64B  30         mov   r11,*stack            ; Save return address
0678                       ;------------------------------------------------------
0679                       ; Put cursor on next tab position
0680                       ;------------------------------------------------------
0681 7B3A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B3C 2FB0     
0682 7B3E 6008                   data bank4.rom        ; | i  p0 = bank address
0683 7B40 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0684 7B42 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0685                       ;------------------------------------------------------
0686                       ; Exit
0687                       ;------------------------------------------------------
0688 7B44 C2F9  30         mov   *stack+,r11           ; Pop r11
0689 7B46 045B  20         b     *r11                  ; Return to caller
0690               
0691               
0692               ***************************************************************
0693               * Stub for "fb.tab.next"
0694               * bank4 vec.11
0695               ********|*****|*********************|**************************
0696               fb.tab.next:
0697 7B48 0649  14         dect  stack
0698 7B4A C64B  30         mov   r11,*stack            ; Save return address
0699                       ;------------------------------------------------------
0700                       ; Put cursor on next tab position
0701                       ;------------------------------------------------------
0702 7B4C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B4E 2FB0     
0703 7B50 6008                   data bank4.rom        ; | i  p0 = bank address
0704 7B52 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0705 7B54 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0706                       ;------------------------------------------------------
0707                       ; Exit
0708                       ;------------------------------------------------------
0709 7B56 C2F9  30         mov   *stack+,r11           ; Pop r11
0710 7B58 045B  20         b     *r11                  ; Return to caller
0711               
0712               **************************************************************
0713               * Stub for "edb.clear.sams"
0714               * bank5 vec.1
0715               ********|*****|*********************|**************************
0716               edb.clear.sams:
0717 7B5A C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7B5C 7B62     
     7B5E A034     
0718 7B60 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0719               edb.clear.sams.vector:
0720 7B62 7FC0             data  vec.1
0721               
0722               
0723               **************************************************************
0724               * Stub for "edb.block.mark"
0725               * bank5 vec.3
0726               ********|*****|*********************|**************************
0727               edb.block.mark:
0728 7B64 C820  54         mov   @edb.block.mark.vector,@trmpvector
     7B66 7B6C     
     7B68 A034     
0729 7B6A 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0730               edb.block.mark.vector:
0731 7B6C 7FC4             data  vec.3
0732               
0733               
0734               **************************************************************
0735               * Stub for "edb.block.mark.m1"
0736               * bank5 vec.4
0737               ********|*****|*********************|**************************
0738               edb.block.mark.m1:
0739 7B6E C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7B70 7B76     
     7B72 A034     
0740 7B74 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0741               edb.block.mark.m1.vector:
0742 7B76 7FC6             data  vec.4
0743               
0744               
0745               **************************************************************
0746               * Stub for "edb.block.mark.m2"
0747               * bank5 vec.5
0748               ********|*****|*********************|**************************
0749               edb.block.mark.m2:
0750 7B78 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7B7A 7B80     
     7B7C A034     
0751 7B7E 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0752               edb.block.mark.m2.vector:
0753 7B80 7FC8             data  vec.5
0754               
0755               
0756               **************************************************************
0757               * Stub for "edb.block.clip"
0758               * bank5 vec.6
0759               ********|*****|*********************|**************************
0760               edb.block.clip:
0761 7B82 C820  54         mov   @edb.block.clip.vector,@trmpvector
     7B84 7B8A     
     7B86 A034     
0762 7B88 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0763               edb.block.clip.vector:
0764 7B8A 7FCA             data  vec.6
0765               
0766               
0767               **************************************************************
0768               * Stub for "edb.block.reset"
0769               * bank5 vec.7
0770               ********|*****|*********************|**************************
0771               edb.block.reset:
0772 7B8C C820  54         mov   @edb.block.reset.vector,@trmpvector
     7B8E 7B94     
     7B90 A034     
0773 7B92 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0774               edb.block.reset.vector:
0775 7B94 7FCC             data  vec.7
0776               
0777               
0778               **************************************************************
0779               * Stub for "edb.block.delete"
0780               * bank5 vec.8
0781               ********|*****|*********************|**************************
0782               edb.block.delete:
0783 7B96 C820  54         mov   @edb.block.delete.vector,@trmpvector
     7B98 7B9E     
     7B9A A034     
0784 7B9C 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0785               edb.block.delete.vector:
0786 7B9E 7FCE             data  vec.8
0787               
0788               
0789               **************************************************************
0790               * Stub for "edb.block.copy"
0791               * bank5 vec.9
0792               ********|*****|*********************|**************************
0793               edb.block.copy:
0794 7BA0 C820  54         mov   @edb.block.copy.vector,@trmpvector
     7BA2 7BA8     
     7BA4 A034     
0795 7BA6 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0796               edb.block.copy.vector:
0797 7BA8 7FD0             data  vec.9
0798               
0799               
0800               **************************************************************
0801               * Stub for "edb.line.del"
0802               * bank5 vec.10
0803               ********|*****|*********************|**************************
0804               edb.line.del:
0805 7BAA C820  54         mov   @edb.line.del.vector,@trmpvector
     7BAC 7BB2     
     7BAE A034     
0806 7BB0 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0807               edb.line.del.vector:
0808 7BB2 7FD2             data  vec.10
0809               
0810               
0811               
0812               ***************************************************************
0813               * Trampoline bank 5 with return
0814               ********|*****|*********************|**************************
0815               _trampoline.bank5.ret:
0816 7BB4 0649  14         dect  stack
0817 7BB6 C64B  30         mov   r11,*stack            ; Save return address
0818                       ;------------------------------------------------------
0819                       ; Call routine in specified bank
0820                       ;------------------------------------------------------
0821 7BB8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BBA 2FB0     
0822 7BBC 600A                   data bank5.rom        ; | i  p0 = bank address
0823 7BBE FFFF                   data >ffff            ; | i  p1 = Vector with target address
0824                                                   ; |         (deref @trmpvector)
0825 7BC0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0826                       ;------------------------------------------------------
0827                       ; Exit
0828                       ;------------------------------------------------------
0829 7BC2 C2F9  30         mov   *stack+,r11           ; Pop r11
0830 7BC4 045B  20         b     *r11                  ; Return to caller
0831               
0832               
0833               ***************************************************************
0834               * Stub for "vdp.patterns.dump"
0835               * bank6 vec.1
0836               ********|*****|*********************|**************************
0837               vdp.patterns.dump:
0838 7BC6 0649  14         dect  stack
0839 7BC8 C64B  30         mov   r11,*stack            ; Save return address
0840                       ;------------------------------------------------------
0841                       ; Dump VDP patterns
0842                       ;------------------------------------------------------
0843 7BCA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BCC 2FB0     
0844 7BCE 600C                   data bank6.rom        ; | i  p0 = bank address
0845 7BD0 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0846 7BD2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0847                       ;------------------------------------------------------
0848                       ; Exit
0849                       ;------------------------------------------------------
0850 7BD4 C2F9  30         mov   *stack+,r11           ; Pop r11
0851 7BD6 045B  20         b     *r11                  ; Return to caller
0852               
0853               
0854               
0855               ***************************************************************
0856               * Stub for "tibasic"
0857               * bank7 vec.10
0858               ********|*****|*********************|**************************
0859               tibasic1:
0860 7BD8 C820  54         mov   @const.1,@tib.session
     7BDA 2002     
     7BDC A0B4     
0861 7BDE 100F  14         jmp   tibasic
0862               tibasic2:
0863 7BE0 C820  54         mov   @const.2,@tib.session
     7BE2 2004     
     7BE4 A0B4     
0864 7BE6 100B  14         jmp   tibasic
0865               tibasic3:
0866 7BE8 C820  54         mov   @const.3,@tib.session
     7BEA 387A     
     7BEC A0B4     
0867 7BEE 1007  14         jmp   tibasic
0868               tibasic4:
0869 7BF0 C820  54         mov   @const.4,@tib.session
     7BF2 2006     
     7BF4 A0B4     
0870 7BF6 1003  14         jmp   tibasic
0871               tibasic5:
0872 7BF8 C820  54         mov   @const.5,@tib.session
     7BFA 387C     
     7BFC A0B4     
0873               tibasic:
0874 7BFE 0649  14         dect  stack
0875 7C00 C64B  30         mov   r11,*stack            ; Save return address
0876 7C02 0649  14         dect  stack
0877 7C04 C644  30         mov   tmp0,*stack           ; Push tmp0
0878                       ;------------------------------------------------------
0879                       ; Exit early if no TI Basic session
0880                       ;------------------------------------------------------
0881 7C06 C120  34         mov   @tib.session,tmp0     ; Get session ID
     7C08 A0B4     
0882 7C0A 130A  14         jeq   tibasic.exit          ; Exit early if no session
0883                       ;------------------------------------------------------
0884                       ; Run TI Basic session
0885                       ;------------------------------------------------------
0886 7C0C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C0E 2FB0     
0887 7C10 600E                   data bank7.rom        ; | i  p0 = bank address
0888 7C12 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0889 7C14 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0890               
0891 7C16 C120  34         mov   @tib.automode,tmp0    ; AutoMode flag set?
     7C18 A0C0     
0892 7C1A 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
0893               
0894 7C1C 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7C1E 7C26     
0895                       ;------------------------------------------------------
0896                       ; Exit
0897                       ;------------------------------------------------------
0898               tibasic.exit:
0899 7C20 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0900 7C22 C2F9  30         mov   *stack+,r11           ; Pop r11
0901 7C24 045B  20         b     *r11                  ; Return to caller
0902               
0903               
0904               
0905               ***************************************************************
0906               * Stub for "tibasic.uncrunch"
0907               * bank7 vec.11
0908               ********|*****|*********************|**************************
0909               tibasic.uncrunch:
0910 7C26 0649  14         dect  stack
0911 7C28 C64B  30         mov   r11,*stack            ; Save return address
0912                       ;------------------------------------------------------
0913                       ; Uncrunch TI basic program
0914                       ;------------------------------------------------------
0915 7C2A C820  54         mov   @tib.session,@parm1   ; Get current session
     7C2C A0B4     
     7C2E A006     
0916 7C30 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
0917               
0918 7C32 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C34 2FB0     
0919 7C36 600E                   data bank7.rom        ; | i  p0 = bank address
0920 7C38 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0921 7C3A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0922                       ;------------------------------------------------------
0923                       ; Exit
0924                       ;------------------------------------------------------
0925               tibasic.uncrunch.exit:
0926 7C3C C2F9  30         mov   *stack+,r11           ; Pop r11
0927 7C3E 045B  20         b     *r11                  ; Return to caller
0928               
0929               
0930               
0931               ***************************************************************
0932               * Stub for "fg99.run"
0933               ********|*****|*********************|**************************
0934               fg99.run.xbgem:
0935 7C40 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7C42 3CFE     
0936 7C44 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C46 A230     
0937 7C48 100F  14         jmp   fg99.run.stub
0938               
0939               fg99.run.rxb:
0940 7C4A 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7C4C 3D12     
0941 7C4E C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C50 A230     
0942 7C52 100A  14         jmp   fg99.run.stub
0943               
0944               fg99.run.fcmd:
0945 7C54 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     7C56 3CEA     
0946 7C58 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C5A A230     
0947 7C5C 1005  14         jmp   fg99.run.stub
0948               
0949               fg99.run.fbforth:
0950 7C5E 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7C60 3D26     
0951 7C62 C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     7C64 A230     
0952 7C66 1000  14         jmp   fg99.run.stub
0953               
0954               fg99.run.stub:
0955 7C68 0649  14         dect  stack
0956 7C6A C64B  30         mov   r11,*stack            ; Save return address
0957                       ;------------------------------------------------------
0958                       ; Run FinalGROM cartridge image
0959                       ;------------------------------------------------------
0960 7C6C 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7C6E 3738     
0961                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
0962                                                   ; /
0963                       ;------------------------------------------------------
0964                       ; Exit
0965                       ;------------------------------------------------------
0966               fg99.run.stub.exit:
0967 7C70 C2F9  30         mov   *stack+,r11           ; Pop r11
0968 7C72 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0149                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 7C74 0649  14         dect  stack
0035 7C76 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7C78 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C7A 2FB0     
0040 7C7C 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7C7E 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 7C80 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7C82 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7C84 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 7C86 0649  14         dect  stack
0058 7C88 C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7C8A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C8C 2FB0     
0063 7C8E 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7C90 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7C92 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7C94 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7C96 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7C98 0649  14         dect  stack
0081 7C9A C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7C9C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C9E 2FB0     
0086 7CA0 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7CA2 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7CA4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7CA6 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7CA8 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 7CAA 0649  14         dect  stack
0104 7CAC C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7CAE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CB0 2FB0     
0109 7CB2 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7CB4 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 7CB6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 7CB8 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 7CBA 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 7CBC 0649  14         dect  stack
0127 7CBE C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7CC0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CC2 2FB0     
0132 7CC4 600E                   data bank7.rom        ; | i  p0 = bank address
0133 7CC6 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 7CC8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 7CCA C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7CCC 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 7CCE 0649  14         dect  stack
0150 7CD0 C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7CD2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CD4 2FB0     
0155 7CD6 600E                   data bank7.rom        ; | i  p0 = bank address
0156 7CD8 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 7CDA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7CDC C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7CDE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0150                       ;-----------------------------------------------------------------------
0151                       ; Program data
0152                       ;-----------------------------------------------------------------------
0153                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 7CE0 0D00             byte  key.enter, pane.focus.fb
0012 7CE2 672C             data  edkey.action.enter
0013               
0014 7CE4 0800             byte  key.fctn.s, pane.focus.fb
0015 7CE6 6248             data  edkey.action.left
0016               
0017 7CE8 0900             byte  key.fctn.d, pane.focus.fb
0018 7CEA 6262             data  edkey.action.right
0019               
0020 7CEC 0B00             byte  key.fctn.e, pane.focus.fb
0021 7CEE 63C6             data  edkey.action.up
0022               
0023 7CF0 0A00             byte  key.fctn.x, pane.focus.fb
0024 7CF2 63CE             data  edkey.action.down
0025               
0026 7CF4 BF00             byte  key.fctn.h, pane.focus.fb
0027 7CF6 627E             data  edkey.action.home
0028               
0029 7CF8 C000             byte  key.fctn.j, pane.focus.fb
0030 7CFA 62A8             data  edkey.action.pword
0031               
0032 7CFC C100             byte  key.fctn.k, pane.focus.fb
0033 7CFE 62FA             data  edkey.action.nword
0034               
0035 7D00 C200             byte  key.fctn.l, pane.focus.fb
0036 7D02 6286             data  edkey.action.end
0037               
0038 7D04 0200             byte  key.fctn.4, pane.focus.fb
0039 7D06 6412             data  edkey.action.npage
0040               
0041 7D08 0E00             byte  key.fctn.5, pane.focus.fb
0042 7D0A 638E             data  edkey.action.scroll.right
0043               
0044 7D0C 0C00             byte  key.fctn.6, pane.focus.fb
0045 7D0E 63D6             data  edkey.action.ppage
0046               
0047 7D10 B700             byte  key.ctrl.7, pane.focus.fb
0048 7D12 69B6             data  edkey.action.fb.tab.prev
0049               
0050 7D14 0100             byte  key.fctn.7, pane.focus.fb
0051 7D16 69C4             data  edkey.action.fb.tab.next
0052               
0053 7D18 8500             byte  key.ctrl.e, pane.focus.fb
0054 7D1A 63D6             data  edkey.action.ppage
0055               
0056 7D1C 8700             byte  key.ctrl.g, pane.focus.fb
0057 7D1E 79F2             data  dialog.goto
0058               
0059 7D20 9800             byte  key.ctrl.x, pane.focus.fb
0060 7D22 6412             data  edkey.action.npage
0061               
0062 7D24 7F00             byte  key.fctn.v, pane.focus.fb
0063 7D26 6468             data  edkey.action.topscr
0064               
0065 7D28 BE00             byte  key.fctn.b, pane.focus.fb
0066 7D2A 64B2             data  edkey.action.botscr
0067               
0068 7D2C 9600             byte  key.ctrl.v, pane.focus.fb
0069 7D2E 644C             data  edkey.action.top
0070               
0071 7D30 8200             byte  key.ctrl.b, pane.focus.fb
0072 7D32 6482             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 7D34 0300             byte  key.fctn.1, pane.focus.fb
0077 7D36 655A             data  edkey.action.del_char
0078               
0079 7D38 0700             byte  key.fctn.3, pane.focus.fb
0080 7D3A 660C             data  edkey.action.del_line
0081               
0082 7D3C 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7D3E 65D8             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7D40 0400             byte  key.fctn.2, pane.focus.fb
0088 7D42 666E             data  edkey.action.ins_char.ws
0089               
0090 7D44 B900             byte  key.fctn.dot, pane.focus.fb
0091 7D46 67B8             data  edkey.action.ins_onoff
0092               
0093 7D48 0600             byte  key.fctn.8, pane.focus.fb
0094 7D4A 6714             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7D4C F000             byte  key.ctrl.space, pane.focus.fb
0099 7D4E 68E0             data  edkey.action.block.mark
0100               
0101 7D50 8300             byte  key.ctrl.c, pane.focus.fb
0102 7D52 6880             data  edkey.action.copyblock_or_clipboard
0103               
0104 7D54 8400             byte  key.ctrl.d, pane.focus.fb
0105 7D56 6940             data  edkey.action.block.delete
0106               
0107 7D58 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7D5A 696A             data  edkey.action.block.move
0109               
0110 7D5C 8700             byte  key.ctrl.g, pane.focus.fb
0111 7D5E 699C             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7D60 B100             byte  key.ctrl.1, pane.focus.fb
0116 7D62 69D2             data  edkey.action.fb.clip.save.1
0117               
0118 7D64 B200             byte  key.ctrl.2, pane.focus.fb
0119 7D66 69DC             data  edkey.action.fb.clip.save.2
0120               
0121 7D68 B300             byte  key.ctrl.3, pane.focus.fb
0122 7D6A 69E6             data  edkey.action.fb.clip.save.3
0123               
0124 7D6C B500             byte  key.ctrl.5, pane.focus.fb
0125 7D6E 635A             data  edkey.action.scroll.left
0126                       ;-------------------------------------------------------
0127                       ; Other action keys
0128                       ;-------------------------------------------------------
0129 7D70 0500             byte  key.fctn.plus, pane.focus.fb
0130 7D72 6872             data  edkey.action.quit
0131               
0132 7D74 9100             byte  key.ctrl.q, pane.focus.fb
0133 7D76 6872             data  edkey.action.quit
0134               
0135 7D78 9200             byte  key.ctrl.r, pane.focus.fb
0136 7D7A 6832             data  edkey.action.toggle.ruler
0137               
0138 7D7C 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7D7E 71FC             data  pane.action.colorscheme.cycle
0140               
0141 7D80 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7D82 6890             data  edkey.action.fb.fname.dec.load
0143               
0144 7D84 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 7D86 68A2             data  edkey.action.fb.fname.inc.load
0146               
0147 7D88 BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7D8A 79D4             data  dialog.basic
0149               
0150 7D8C BC00             byte  key.fctn.0, pane.focus.fb
0151 7D8E 7BFE             data  tibasic
0152                       ;-------------------------------------------------------
0153                       ; Dialog keys
0154                       ;-------------------------------------------------------
0155 7D90 8100             byte  key.ctrl.a, pane.focus.fb
0156 7D92 79C0             data  dialog.append
0157               
0158 7D94 8800             byte  key.ctrl.h, pane.focus.fb
0159 7D96 7958             data  dialog.help
0160               
0161 7D98 8600             byte  key.ctrl.f, pane.focus.fb
0162 7D9A 798A             data  dialog.file
0163               
0164 7D9C 8900             byte  key.ctrl.i, pane.focus.fb
0165 7D9E 7976             data  dialog.insert
0166               
0167 7DA0 9300             byte  key.ctrl.s, pane.focus.fb
0168 7DA2 796C             data  dialog.save
0169               
0170 7DA4 8F00             byte  key.ctrl.o, pane.focus.fb
0171 7DA6 7962             data  dialog.load
0172               
0173 7DA8 9500             byte  key.ctrl.u, pane.focus.fb
0174 7DAA 79DE             data  dialog.shortcuts
0175               
0176 7DAC 9000             byte  key.ctrl.p, pane.focus.fb
0177 7DAE 7980             data  dialog.print
0178               
0179                       ;
0180                       ; FCTN-9 has multiple purposes, if block mode is on
0181                       ; reset block, otherwise show dialog "Main Menu".
0182                       ;
0183 7DB0 0F00             byte  key.fctn.9, pane.focus.fb
0184 7DB2 79FC             data  dialog.menu
0185                       ;-------------------------------------------------------
0186                       ; End of list
0187                       ;-------------------------------------------------------
0188 7DB4 FFFF             data  EOL                           ; EOL
0189               
0190               
0191               *---------------------------------------------------------------
0192               * Action keys mapping table: Command Buffer (CMDB)
0193               *---------------------------------------------------------------
0194               keymap_actions.cmdb:
0195                       ;-------------------------------------------------------
0196                       ; Dialog: Main Menu
0197                       ;-------------------------------------------------------
0198 7DB6 4664             byte  key.uc.f, id.dialog.menu
0199 7DB8 798A             data  dialog.file
0200               
0201 7DBA 4364             byte  key.uc.c, id.dialog.menu
0202 7DBC 79CA             data  dialog.cartridge
0203               
0204 7DBE 4F64             byte  key.uc.o, id.dialog.menu
0205 7DC0 79B6             data  dialog.config
0206               
0207 7DC2 5364             byte  key.uc.s, id.dialog.menu
0208 7DC4 79DE             data  dialog.shortcuts
0209               
0210 7DC6 4864             byte  key.uc.h, id.dialog.menu
0211 7DC8 7958             data  dialog.help
0212               
0213 7DCA 5164             byte  key.uc.q, id.dialog.menu
0214 7DCC 6872             data  edkey.action.quit
0215               
0216 7DCE 0F64             byte  key.fctn.9, id.dialog.menu
0217 7DD0 6E20             data  edkey.action.cmdb.close.dialog
0218                       ;-------------------------------------------------------
0219                       ; Dialog: File
0220                       ;-------------------------------------------------------
0221 7DD2 4E69             byte  key.uc.n, id.dialog.file
0222 7DD4 6ACC             data  edkey.action.cmdb.file.new
0223               
0224 7DD6 5369             byte  key.uc.s, id.dialog.file
0225 7DD8 796C             data  dialog.save
0226               
0227 7DDA 4F69             byte  key.uc.o, id.dialog.file
0228 7DDC 7962             data  dialog.load
0229               
0230 7DDE 4969             byte  key.uc.i, id.dialog.file
0231 7DE0 7976             data  dialog.insert
0232               
0233 7DE2 4169             byte  key.uc.a, id.dialog.file
0234 7DE4 79C0             data  dialog.append
0235               
0236 7DE6 5069             byte  key.uc.p, id.dialog.file
0237 7DE8 7980             data  dialog.print
0238                       ;-------------------------------------------------------
0239                       ; Dialog: Open file
0240                       ;-------------------------------------------------------
0241 7DEA 0E0A             byte  key.fctn.5, id.dialog.load
0242 7DEC 6DEA             data  edkey.action.cmdb.fastmode.toggle
0243               
0244 7DEE 0D0A             byte  key.enter, id.dialog.load
0245 7DF0 6AF2             data  edkey.action.cmdb.load
0246                       ;-------------------------------------------------------
0247                       ; Dialog: Insert file at line ...
0248                       ;-------------------------------------------------------
0249 7DF2 0E0D             byte  key.fctn.5, id.dialog.insert
0250 7DF4 6DEA             data  edkey.action.cmdb.fastmode.toggle
0251               
0252 7DF6 0D0D             byte  key.enter, id.dialog.insert
0253 7DF8 6B36             data  edkey.action.cmdb.insert
0254                       ;-------------------------------------------------------
0255                       ; Dialog: Append file
0256                       ;-------------------------------------------------------
0257 7DFA 0E0E             byte  key.fctn.5, id.dialog.append
0258 7DFC 6DEA             data  edkey.action.cmdb.fastmode.toggle
0259               
0260 7DFE 0D0E             byte  key.enter, id.dialog.append
0261 7E00 6BB8             data  edkey.action.cmdb.append
0262                       ;-------------------------------------------------------
0263                       ; Dialog: Copy clipboard to line ...
0264                       ;-------------------------------------------------------
0265 7E02 0E67             byte  key.fctn.5, id.dialog.clipboard
0266 7E04 6DEA             data  edkey.action.cmdb.fastmode.toggle
0267               
0268 7E06 0167             byte  key.fctn.7, id.dialog.clipboard
0269 7E08 79AC             data  dialog.clipdev
0270               
0271 7E0A 3167             byte  key.num.1, id.dialog.clipboard
0272 7E0C 6C2C             data  edkey.action.cmdb.clip.1
0273               
0274 7E0E 3267             byte  key.num.2, id.dialog.clipboard
0275 7E10 6C32             data  edkey.action.cmdb.clip.2
0276               
0277 7E12 3367             byte  key.num.3, id.dialog.clipboard
0278 7E14 6C38             data  edkey.action.cmdb.clip.3
0279               
0280 7E16 3467             byte  key.num.4, id.dialog.clipboard
0281 7E18 6C3E             data  edkey.action.cmdb.clip.4
0282               
0283 7E1A 3567             byte  key.num.5, id.dialog.clipboard
0284 7E1C 6C44             data  edkey.action.cmdb.clip.5
0285                       ;-------------------------------------------------------
0286                       ; Dialog: Configure clipboard
0287                       ;-------------------------------------------------------
0288 7E1E 0D11             byte  key.enter, id.dialog.clipdev
0289 7E20 6C78             data  edkey.action.cmdb.clipdev.configure
0290                       ;-------------------------------------------------------
0291                       ; Dialog: Configure
0292                       ;-------------------------------------------------------
0293 7E22 436C             byte  key.uc.c, id.dialog.config
0294 7E24 79AC             data  dialog.clipdev
0295                       ;-------------------------------------------------------
0296                       ; Dialog: Save file
0297                       ;-------------------------------------------------------
0298 7E26 0D0B             byte  key.enter, id.dialog.save
0299 7E28 6CC8             data  edkey.action.cmdb.save
0300               
0301 7E2A 0D0C             byte  key.enter, id.dialog.saveblock
0302 7E2C 6CC8             data  edkey.action.cmdb.save
0303                       ;-------------------------------------------------------
0304                       ; Dialog: Print file
0305                       ;-------------------------------------------------------
0306 7E2E 0D0F             byte  key.enter, id.dialog.print
0307 7E30 6D44             data  edkey.action.cmdb.print
0308               
0309 7E32 0D10             byte  key.enter, id.dialog.printblock
0310 7E34 6D44             data  edkey.action.cmdb.print
0311                       ;-------------------------------------------------------
0312                       ; Dialog: Unsaved changes
0313                       ;-------------------------------------------------------
0314 7E36 0C65             byte  key.fctn.6, id.dialog.unsaved
0315 7E38 6DC0             data  edkey.action.cmdb.proceed
0316               
0317 7E3A 2065             byte  key.space, id.dialog.unsaved
0318 7E3C 6DC0             data  edkey.action.cmdb.proceed
0319               
0320 7E3E 0D65             byte  key.enter, id.dialog.unsaved
0321 7E40 796C             data  dialog.save
0322                       ;-------------------------------------------------------
0323                       ; Dialog: Cartridge
0324                       ;-------------------------------------------------------
0325 7E42 426A             byte  key.uc.b, id.dialog.cartridge
0326 7E44 79D4             data  dialog.basic
0327               
0328 7E46 466A             byte  key.uc.f, id.dialog.cartridge
0329 7E48 7C54             data  fg99.run.fcmd
0330               
0331 7E4A 586A             byte  key.uc.x, id.dialog.cartridge
0332 7E4C 7C40             data  fg99.run.xbgem
0333               
0334 7E4E 526A             byte  key.uc.r, id.dialog.cartridge
0335 7E50 7C4A             data  fg99.run.rxb
0336               
0337 7E52 4F6A             byte  key.uc.o, id.dialog.cartridge
0338 7E54 7C5E             data  fg99.run.fbforth
0339                       ;-------------------------------------------------------
0340                       ; Dialog: Basic
0341                       ;-------------------------------------------------------
0342 7E56 316B             byte  key.num.1, id.dialog.basic
0343 7E58 7BD8             data  tibasic1
0344               
0345 7E5A 326B             byte  key.num.2, id.dialog.basic
0346 7E5C 7BE0             data  tibasic2
0347               
0348 7E5E 336B             byte  key.num.3, id.dialog.basic
0349 7E60 7BE8             data  tibasic3
0350               
0351 7E62 346B             byte  key.num.4, id.dialog.basic
0352 7E64 7BF0             data  tibasic4
0353               
0354 7E66 356B             byte  key.num.5, id.dialog.basic
0355 7E68 7BF8             data  tibasic5
0356               
0357 7E6A 0E6B             byte  key.fctn.5, id.dialog.basic
0358 7E6C 6DF6             data  edkey.action.cmdb.am.toggle
0359               
0360 7E6E 206B             byte  key.space, id.dialog.basic
0361 7E70 7C26             data  tibasic.uncrunch
0362                       ;-------------------------------------------------------
0363                       ; Dialog: Shortcuts
0364                       ;-------------------------------------------------------
0365 7E72 436E             byte  key.uc.c, id.dialog.shortcuts
0366 7E74 71FC             data  pane.action.colorscheme.cycle
0367               
0368 7E76 526E             byte  key.uc.r, id.dialog.shortcuts
0369 7E78 6832             data  edkey.action.toggle.ruler
0370               
0371 7E7A 416E             byte  key.uc.a, id.dialog.shortcuts
0372 7E7C 6E28             data  edkey.action.cmdb.autoinsert
0373               
0374 7E7E 316E             byte  key.num.1, id.dialog.shortcuts
0375 7E80 68E8             data  edkey.action.block.m1
0376               
0377 7E82 326E             byte  key.num.2, id.dialog.shortcuts
0378 7E84 68F0             data  edkey.action.block.m2
0379               
0380 7E86 476E             byte  key.uc.g, id.dialog.shortcuts
0381 7E88 79F2             data  dialog.goto
0382                       ;-------------------------------------------------------
0383                       ; Dialog: Goto
0384                       ;-------------------------------------------------------
0385 7E8A 0D12             byte  key.enter, id.dialog.goto
0386 7E8C 6E60             data  edkey.action.cmdb.goto
0387                       ;-------------------------------------------------------
0388                       ; Dialog: Help
0389                       ;-------------------------------------------------------
0390 7E8E 2068             byte  key.space, id.dialog.help
0391 7E90 7944             data  dialog.help.next
0392               
0393 7E92 0F68             byte  key.fctn.9, id.dialog.help
0394 7E94 6E0A             data  edkey.action.cmdb.close.about
0395               
0396 7E96 0D68             byte  key.enter, id.dialog.help
0397 7E98 6E0A             data  edkey.action.cmdb.close.about
0398                       ;-------------------------------------------------------
0399                       ; Movement keys
0400                       ;-------------------------------------------------------
0401 7E9A 0801             byte  key.fctn.s, pane.focus.cmdb
0402 7E9C 6A02             data  edkey.action.cmdb.left
0403               
0404 7E9E 0901             byte  key.fctn.d, pane.focus.cmdb
0405 7EA0 6A14             data  edkey.action.cmdb.right
0406               
0407 7EA2 BF01             byte  key.fctn.h, pane.focus.cmdb
0408 7EA4 6A2C             data  edkey.action.cmdb.home
0409               
0410 7EA6 C201             byte  key.fctn.l, pane.focus.cmdb
0411 7EA8 6A40             data  edkey.action.cmdb.end
0412                       ;-------------------------------------------------------
0413                       ; Modifier keys
0414                       ;-------------------------------------------------------
0415 7EAA 0701             byte  key.fctn.3, pane.focus.cmdb
0416 7EAC 6A56             data  edkey.action.cmdb.clear
0417                       ;-------------------------------------------------------
0418                       ; Other action keys
0419                       ;-------------------------------------------------------
0420 7EAE 0F01             byte  key.fctn.9, pane.focus.cmdb
0421 7EB0 79FC             data  dialog.menu
0422               
0423 7EB2 0501             byte  key.fctn.plus, pane.focus.cmdb
0424 7EB4 6872             data  edkey.action.quit
0425               
0426 7EB6 8101             byte  key.ctrl.a, pane.focus.cmdb
0427 7EB8 6E02             data  edkey.action.cmdb.preset
0428               
0429 7EBA 8201             byte  key.ctrl.b, pane.focus.cmdb
0430 7EBC 6E02             data  edkey.action.cmdb.preset
0431               
0432 7EBE 8301             byte  key.ctrl.c, pane.focus.cmdb
0433 7EC0 6E02             data  edkey.action.cmdb.preset
0434               
0435 7EC2 9A01             byte  key.ctrl.z, pane.focus.cmdb
0436 7EC4 71FC             data  pane.action.colorscheme.cycle
0437                       ;------------------------------------------------------
0438                       ; End of list
0439                       ;-------------------------------------------------------
0440 7EC6 FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0154                       ;-----------------------------------------------------------------------
0155                       ; Bank full check
0156                       ;-----------------------------------------------------------------------
0160                       ;-----------------------------------------------------------------------
0161                       ; Show ROM bank in CPU crash screen
0162                       ;-----------------------------------------------------------------------
0163                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F50 06A0  32         bl    @putat
     7F52 2442     
0010 7F54 0314                   byte 3,20
0011 7F56 7F5A                   data cpu.crash.showbank.bankstr
0012 7F58 10FF  14         jmp   $
                   < stevie_b1.asm
0164                       ;-----------------------------------------------------------------------
0165                       ; Vector table
0166                       ;-----------------------------------------------------------------------
0167                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F5A 0552             stri 'ROM#1'
     7F5C 4F4D     
     7F5E 2331     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 60F6     vec.1   data  mem.sams.setup.stevie ;
0016 7FC2 2026     vec.2   data  cpu.crash             ;
0017 7FC4 2026     vec.3   data  cpu.crash             ;
0018 7FC6 2026     vec.4   data  cpu.crash             ;
0019 7FC8 2026     vec.5   data  cpu.crash             ;
0020 7FCA 2026     vec.6   data  cpu.crash             ;
0021 7FCC 2026     vec.7   data  cpu.crash             ;
0022 7FCE 2026     vec.8   data  cpu.crash             ;
0023 7FD0 2026     vec.9   data  cpu.crash             ;
0024 7FD2 7050     vec.10  data  edb.line.pack.fb      ;
0025 7FD4 7148     vec.11  data  edb.line.unpack.fb    ;
0026 7FD6 7B5A     vec.12  data  edb.clear.sams        ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 6ABA     vec.15  data  edkey.action.cmdb.show
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6EA2     vec.18  data  cmdb.dialog.close     ;
0033 7FE4 7A60     vec.19  data  cmdb.cmd.clear        ;
0034 7FE6 2026     vec.20  data  cpu.crash             ;
0035 7FE8 7ADC     vec.21  data  fb.vdpdump            ;
0036 7FEA 30A6     vec.22  data  fb.row2line           ;
0037 7FEC 2026     vec.23  data  cpu.crash             ;
0038 7FEE 2026     vec.24  data  cpu.crash             ;
0039 7FF0 2026     vec.25  data  cpu.crash             ;
0040 7FF2 2026     vec.26  data  cpu.crash             ;
0041 7FF4 764A     vec.27  data  pane.errline.hide     ;
0042 7FF6 74A6     vec.28  data  pane.cursor.blink     ;
0043 7FF8 7488     vec.29  data  pane.cursor.hide      ;
0044 7FFA 75E8     vec.30  data  pane.errline.show     ;
0045 7FFC 725A     vec.31  data  pane.action.colorscheme.load
0046 7FFE 746E     vec.32  data  pane.action.colorscheme.statlines
                   < stevie_b1.asm
0168                                                   ; Vector table bank 1
0169               *--------------------------------------------------------------
0170               * Video mode configuration
0171               *--------------------------------------------------------------
0172      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0173      0004     spfbck  equ   >04                   ; Screen background color.
0174      37E6     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0175      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0176      0050     colrow  equ   80                    ; Columns per row
0177      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0178      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0179      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0180      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F50 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
    CMDB.CMD.CLEAR...... >7A60 :     
    CMDB.CMD.CLEAR.VECTOR >7A68 :     
    CMDB.CMD.GETLENGTH.. >7A6A :     
    CMDB.CMD.GETLENGTH.VECTOR >7A72 :     
    CMDB.CMD.PRESET..... >7A74 :     
    CMDB.CMD.PRESET.VECTOR >7A7C :     
    CMDB.CMD.SET........ >7A7E :     
    CMDB.CMD.SET.VECTOR. >7A86 :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.CLOSE... >6EA2 :     
    CMDB.DIALOG.CLOSE.EXIT >6EB2 :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >322E :     
    CMDB.INIT.EXIT...... >3282 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.REFRESH........ >7A56 :     
    CMDB.REFRESH.VECTOR. >7A5E :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLORS.LINE.SET..... >74C2 :     
    COLORS.LINE.SET.EXIT >74FA :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3884 :     
    CONST.2............. >2004 :     
    CONST.3............. >387A :     
    CONST.4............. >2006 :     
    CONST.5............. >387C :     
    CONST.6............. >387E :     
    CONST.7............. >3880 :     
    CONST.8............. >2008 :     
    CONST.9............. >3882 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F50 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F5A :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3C9B :     
    DEF.CLIP.FNAME.B.... >3CA5 :     
    DEF.CLIP.FNAME.C.... >3CAF :     
    DEF.DEVICES......... >3CB9 :     
    DEF.PRINTER.FNAME... >3C94 :     
    DEVICE.9938......... >0001 :     
    DEVICE.F18A......... >0000 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >79C0 :     
    DIALOG.APPEND.VECTOR >79C8 :     
    DIALOG.BASIC........ >79D4 :     
    DIALOG.BASIC.VECTOR. >79DC :     
    DIALOG.CARTRIDGE.... >79CA :     
    DIALOG.CARTRIDGE.VECTOR >79D2 :     
    DIALOG.CLIPBOARD.... >79A2 :     
    DIALOG.CLIPBOARD.VECTOR >79AA :     
    DIALOG.CLIPDEV...... >79AC :     
    DIALOG.CLIPDEV.VECTOR >79B4 :     
    DIALOG.CONFIG....... >79B6 :     
    DIALOG.CONFIG.VECTOR >79BE :     
    DIALOG.EDITOR....... >79E8 :     
    DIALOG.EDITOR.VECTOR >79F0 :     
    DIALOG.FILE......... >798A :     
    DIALOG.FILE.VECTOR.. >7992 :     
    DIALOG.GOTO......... >79F2 :     
    DIALOG.GOTO.VECTOR.. >79FA :     
    DIALOG.HELP......... >7958 :     
    DIALOG.HELP.NEXT.... >7944 :     
    DIALOG.HELP.VECTOR.. >7960 :     
    DIALOG.INSERT....... >7976 :     
    DIALOG.INSERT.VECTOR >797E :     
    DIALOG.LOAD......... >7962 :     
    DIALOG.LOAD.VECTOR.. >796A :     
    DIALOG.MENU......... >79FC :     
    DIALOG.MENU.VECTOR.. >7A10 :     
    DIALOG.PRINT........ >7980 :     
    DIALOG.PRINT.VECTOR. >7988 :     
    DIALOG.SAVE......... >796C :     
    DIALOG.SAVE.VECTOR.. >7974 :     
    DIALOG.SHORTCUTS.... >79DE :     
    DIALOG.SHORTCUTS.VECTOR >79E6 :     
    DIALOG.UNSAVED...... >7994 :     
    DIALOG.UNSAVED.VECTOR >79A0 :     
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BLOCK.CLIP...... >7B82 :     
    EDB.BLOCK.CLIP.VECTOR >7B8A :     
    EDB.BLOCK.COPY...... >7BA0 :     
    EDB.BLOCK.COPY.VECTOR >7BA8 :     
    EDB.BLOCK.DELETE.... >7B96 :     
    EDB.BLOCK.DELETE.VECTOR >7B9E :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7B64 :     
    EDB.BLOCK.MARK.M1... >7B6E :     
    EDB.BLOCK.MARK.M1.VECTOR >7B76 :     
    EDB.BLOCK.MARK.M2... >7B78 :     
    EDB.BLOCK.MARK.M2.VECTOR >7B80 :     
    EDB.BLOCK.MARK.VECTOR >7B6C :     
    EDB.BLOCK.RESET..... >7B8C :     
    EDB.BLOCK.RESET.VECTOR >7B94 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7B5A :     
    EDB.CLEAR.SAMS.VECTOR >7B62 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51C :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >36D2 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >36DE :     
    EDB.HIPAGE.ALLOC.CRASH >3708 :     
    EDB.HIPAGE.ALLOC.EXIT >3710 :     
    EDB.HIPAGE.ALLOC.SETPAGE >36FA :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >31E8 :     
    EDB.INIT.EXIT....... >3228 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7BAA :     
    EDB.LINE.DEL.VECTOR. >7BB2 :     
    EDB.LINE.GETLENGTH.. >366A :     
    EDB.LINE.GETLENGTH.EXIT >36A6 :     
    EDB.LINE.GETLENGTH.NULL >36A2 :     
    EDB.LINE.GETLENGTH2. >36AE :     
    EDB.LINE.GETLENGTH2.EXIT >36CC :     
    EDB.LINE.MAPPAGE.... >3620 :     
    EDB.LINE.MAPPAGE.EXIT >3662 :     
    EDB.LINE.MAPPAGE.LOOKUP >363A :     
    EDB.LINE.PACK.FB.... >7050 :     
    EDB.LINE.PACK.FB.CHECK80 >708E :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >709E :     
    EDB.LINE.PACK.FB.COPYLINE >70F4 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >710E :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >710A :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >7100 :     
    EDB.LINE.PACK.FB.CRASH >7096 :     
    EDB.LINE.PACK.FB.EXIT >713C :     
    EDB.LINE.PACK.FB.PREPARE >70C4 :     
    EDB.LINE.PACK.FB.PREPEXIT >7122 :     
    EDB.LINE.PACK.FB.RTRIM >70A8 :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >70BA :     
    EDB.LINE.PACK.FB.SCAN >707E :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >70D0 :     
    EDB.LINE.UNPACK.FB.. >7148 :     
    EDB.LINE.UNPACK.FB.CLEAR >71A6 :     
    EDB.LINE.UNPACK.FB.COPY >71D8 :     
    EDB.LINE.UNPACK.FB.EXIT >71E4 :     
    EDB.LINE.UNPACK.FB.GETLEN >719E :     
    EDB.LINE.UNPACK.FB.PREPARE >71B4 :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.BLOCK.COPY >6904 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >693A :     
    EDKEY.ACTION.BLOCK.DELETE >6940 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >6966 :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >699C :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >69B2 :     
    EDKEY.ACTION.BLOCK.M1 >68E8 :     
    EDKEY.ACTION.BLOCK.M2 >68F0 :     
    EDKEY.ACTION.BLOCK.MARK >68E0 :     
    EDKEY.ACTION.BLOCK.MOVE >696A :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6998 :     
    EDKEY.ACTION.BLOCK.RESET >68F8 :     
    EDKEY.ACTION.BOT.... >6482 :     
    EDKEY.ACTION.BOT.EXIT >64AE :     
    EDKEY.ACTION.BOT.REFRESH >6492 :     
    EDKEY.ACTION.BOTSCR. >64B2 :     
    EDKEY.ACTION.BOTSCR.CURSOR >64C6 :     
    EDKEY.ACTION.BOTSCR.EOF >64D8 :     
    EDKEY.ACTION.BOTSCR.EXIT >64F8 :     
    EDKEY.ACTION.CHAR... >67CA :     
    EDKEY.ACTION.CHAR.EXIT >682E :     
    EDKEY.ACTION.CHAR.INSERT >67EC :     
    EDKEY.ACTION.CHAR.OVERWRITE >67F0 :     
    EDKEY.ACTION.CHAR.OVERWRITE.INCX >6818 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6DF6 :     
    EDKEY.ACTION.CMDB.APPEND >6BB8 :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6C22 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6BF6 :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6E28 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6E58 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6E4A :     
    EDKEY.ACTION.CMDB.CHAR >6A62 :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6AAC :     
    EDKEY.ACTION.CMDB.CLEAR >6A56 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6A5E :     
    EDKEY.ACTION.CMDB.CLIP >6C4A :     
    EDKEY.ACTION.CMDB.CLIP.1 >6C2C :     
    EDKEY.ACTION.CMDB.CLIP.2 >6C32 :     
    EDKEY.ACTION.CMDB.CLIP.3 >6C38 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6C3E :     
    EDKEY.ACTION.CMDB.CLIP.5 >6C44 :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE >6C78 :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.EXIT >6CC4 :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.MESSAGE >6CA4 :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6E0A :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6E20 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6E24 :     
    EDKEY.ACTION.CMDB.END >6A40 :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6DEA :     
    EDKEY.ACTION.CMDB.FILE.NEW >6ACC :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6AEA :     
    EDKEY.ACTION.CMDB.GOTO >6E60 :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6E9E :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6E84 :     
    EDKEY.ACTION.CMDB.HIDE >6AC4 :     
    EDKEY.ACTION.CMDB.HOME >6A2C :     
    EDKEY.ACTION.CMDB.INSERT >6B36 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6BAE :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6B74 :     
    EDKEY.ACTION.CMDB.LEFT >6A02 :     
    EDKEY.ACTION.CMDB.LOAD >6AF2 :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6B32 :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6B26 :     
    EDKEY.ACTION.CMDB.PRESET >6E02 :     
    EDKEY.ACTION.CMDB.PRINT >6D44 :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6DA0 :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6DB6 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6DAE :     
    EDKEY.ACTION.CMDB.PROCEED >6DC0 :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6DE6 :     
    EDKEY.ACTION.CMDB.RIGHT >6A14 :     
    EDKEY.ACTION.CMDB.SAVE >6CC8 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6D24 :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6D3A :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6D32 :     
    EDKEY.ACTION.CMDB.SHOW >6ABA :     
    EDKEY.ACTION.CMDB.TOGGLE >6AB4 :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6AC8 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >6880 :     
    EDKEY.ACTION.DEL_CHAR >655A :     
    EDKEY.ACTION.DEL_CHAR.EXIT >65D4 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >65B2 :     
    EDKEY.ACTION.DEL_CHAR.PREP >6598 :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >6562 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >656C :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >658A :     
    EDKEY.ACTION.DEL_CHAR.SAVE >65C8 :     
    EDKEY.ACTION.DEL_EOL >65D8 :     
    EDKEY.ACTION.DEL_EOL.EXIT >6608 :     
    EDKEY.ACTION.DEL_EOL_LOOP >65F4 :     
    EDKEY.ACTION.DEL_LINE >660C :     
    EDKEY.ACTION.DEL_LINE.DOIT >663A :     
    EDKEY.ACTION.DEL_LINE.EXIT >666A :     
    EDKEY.ACTION.DEL_LINE.REFRESH >664A :     
    EDKEY.ACTION.DOWN... >63CE :     
    EDKEY.ACTION.DOWN.EXIT >63D2 :     
    EDKEY.ACTION.END.... >6286 :     
    EDKEY.ACTION.ENTER.. >672C :     
    EDKEY.ACTION.ENTER.NEWLINE >6744 :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6758 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >69D2 :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >69DC :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >69E6 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >69F6 :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >6890 :     
    EDKEY.ACTION.FB.FNAME.DOIT >68B2 :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >68D2 :     
    EDKEY.ACTION.FB.FNAME.EXIT >68DA :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >68A2 :     
    EDKEY.ACTION.FB.TAB.NEXT >69C4 :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >69CC :     
    EDKEY.ACTION.FB.TAB.PREV >69B6 :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >69BE :     
    EDKEY.ACTION.GOTO... >6538 :     
    EDKEY.ACTION.GOTO.REFRESH >6552 :     
    EDKEY.ACTION.HOME... >627E :     
    EDKEY.ACTION.INS_CHAR >6676 :     
    EDKEY.ACTION.INS_CHAR.APPEND >670C :     
    EDKEY.ACTION.INS_CHAR.EXIT >6710 :     
    EDKEY.ACTION.INS_CHAR.LOOP >66E8 :     
    EDKEY.ACTION.INS_CHAR.PREP >66D6 :     
    EDKEY.ACTION.INS_CHAR.WS >666E :     
    EDKEY.ACTION.INS_LINE >6714 :     
    EDKEY.ACTION.INS_LINE.EXIT >671C :     
    EDKEY.ACTION.INS_LINE_AFTER >6720 :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >6728 :     
    EDKEY.ACTION.INS_ONOFF >67B8 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >67C4 :     
    EDKEY.ACTION.LEFT... >6248 :     
    EDKEY.ACTION.NEWLINE >676C :     
    EDKEY.ACTION.NEWLINE.DOWN >6790 :     
    EDKEY.ACTION.NEWLINE.EXIT >67B4 :     
    EDKEY.ACTION.NEWLINE.REST >6798 :     
    EDKEY.ACTION.NPAGE.. >6412 :     
    EDKEY.ACTION.NPAGE.EXIT >6448 :     
    EDKEY.ACTION.NPAGE.REFRESH >643C :     
    EDKEY.ACTION.NPAGE.SANITY >6426 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6436 :     
    EDKEY.ACTION.NWORD.. >62FA :     
    EDKEY.ACTION.NWORD.EXIT >6352 :     
    EDKEY.ACTION.NWORD_DONE >634A :     
    EDKEY.ACTION.NWORD_MS >6312 :     
    EDKEY.ACTION.NWORD_SCAN >6314 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >631E :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >632C :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >6334 :     
    EDKEY.ACTION.PPAGE.. >63D6 :     
    EDKEY.ACTION.PPAGE.EXIT >640E :     
    EDKEY.ACTION.PPAGE.REFRESH >6402 :     
    EDKEY.ACTION.PPAGE.SANITY >63EA :     
    EDKEY.ACTION.PPAGE.TOPLINE >63FC :     
    EDKEY.ACTION.PWORD.. >62A8 :     
    EDKEY.ACTION.PWORD.EXIT >62F2 :     
    EDKEY.ACTION.PWORD_DONE >62EA :     
    EDKEY.ACTION.PWORD_SCAN >62BA :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62C0 :     
    EDKEY.ACTION.QUIT... >6872 :     
    EDKEY.ACTION.RIGHT.. >6262 :     
    EDKEY.ACTION.SCROLL.LEFT >635A :     
    EDKEY.ACTION.SCROLL.RIGHT >638E :     
    EDKEY.ACTION.TOGGLE.RULER >6832 :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >6868 :     
    EDKEY.ACTION.TOGGLE.RULER.FB >6864 :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >6842 :     
    EDKEY.ACTION.TOGGLE.RULER.ON >684C :     
    EDKEY.ACTION.TOP.... >644C :     
    EDKEY.ACTION.TOP.REFRESH >645C :     
    EDKEY.ACTION.TOPSCR. >6468 :     
    EDKEY.ACTION.TOPSCR.REFRESH >6478 :     
    EDKEY.ACTION.UP..... >63C6 :     
    EDKEY.ACTION.UP.EXIT >63CA :     
    EDKEY.ACTIONS.INS.CHAR.EMPTY_LINE >667E :     
    EDKEY.FB.GOTO.TOPROW >64FE :     
    EDKEY.KEY.CHECK.NEXT >61BC :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61DC :     
    EDKEY.KEY.CHECK.SCOPE >61E2 :     
    EDKEY.KEY.PROCESS... >615C :     
    EDKEY.KEY.PROCESS.ACTION >61FC :     
    EDKEY.KEY.PROCESS.ADDBUFFER >6210 :     
    EDKEY.KEY.PROCESS.CRASH >622E :     
    EDKEY.KEY.PROCESS.ENTER >6236 :     
    EDKEY.KEY.PROCESS.EXIT >6244 :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61B8 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61B2 :     
    EDKEY.KEY.PROCESS.SPECIAL >617C :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61AC :     
    EDKEY.KEYSCAN.HOOK.. >6114 :     
    EDKEY.KEYSCAN.HOOK.CLEAR >613C :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >6156 :     
    EDKEY.KEYSCAN.HOOK.EXIT >6158 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >7A24 :     
    ERROR.DISPLAY.VECTOR >7A2C :     
    ERRPANE.EXIT........ >32B0 :     
    ERRPANE.INIT........ >328A :     
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
    FB.CALC_POINTER..... >30C0 :     
    FB.CALC_POINTER.EXIT >30E0 :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7ACA :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.DOWN...... >6F14 :     
    FB.CURSOR.DOWN.CURSOR >6F62 :     
    FB.CURSOR.DOWN.EXIT. >6F84 :     
    FB.CURSOR.DOWN.MOVE. >6F34 :     
    FB.CURSOR.DOWN.SET_CURSORX >6F6A :     
    FB.CURSOR.HOME...... >6F8C :     
    FB.CURSOR.HOME.EXIT. >6FB0 :     
    FB.CURSOR.UP........ >6EB6 :     
    FB.CURSOR.UP.CURSOR. >6ECE :     
    FB.CURSOR.UP.CURSOR_UP >6EEA :     
    FB.CURSOR.UP.EXIT... >6F0C :     
    FB.CURSOR.UP.SET_CURSORX >6EF2 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >7B24 :     
    FB.HSCROLL.......... >7AEE :     
    FB.INIT............. >3040 :     
    FB.INIT.CONT........ >307C :     
    FB.INIT.EXIT........ >309E :     
    FB.INSERT.LINE...... >6FB6 :     
    FB.INSERT.LINE.EXIT. >7048 :     
    FB.INSERT.LINE.INSERT >6FE0 :     
    FB.INSERT.LINE.M1... >7006 :     
    FB.INSERT.LINE.M2... >701E :     
    FB.INSERT.LINE.REFRESH >7036 :     
    FB.REFRESH.......... >7B12 :     
    FB.RESTORE.......... >7B00 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30A6 :     
    FB.ROW2LINE.EXIT.... >30BA :     
    FB.RULER.INIT....... >7AB8 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >7B48 :     
    FB.TAB.PREV......... >7B36 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >7ADC :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3D26 :     
    FG99.CART.FCMD...... >3CEA :     
    FG99.CART.RXB....... >3D12 :     
    FG99.CART.XBGEM..... >3CFE :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >3738 :     
    FG99.RUN.FBFORTH.... >7C5E :     
    FG99.RUN.FCMD....... >7C54 :     
    FG99.RUN.RXB........ >7C4A :     
    FG99.RUN.STUB....... >7C68 :     
    FG99.RUN.STUB.EXIT.. >7C70 :     
    FG99.RUN.XBGEM...... >7C40 :     
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.SUFFIX >790E :     
    FM.FASTMODE......... >7A9C :     
    FM.FASTMODE.VECTOR.. >7AA4 :     
    FM.INSERTFILE....... >78F6 :     
    FM.INSERTFILE.EXIT.. >7908 :     
    FM.LOADFILE......... >78D0 :     
    FM.LOADFILE.EXIT.... >78F0 :     
    FM.NEWFILE.......... >7932 :     
    FM.SAVEFILE......... >7920 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.GOTO...... >0012 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006E :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3526 :     
    IDX.ENTRY.DELETE.EXIT >357E :     
    IDX.ENTRY.DELETE.LASTLINE >3552 :     
    IDX.ENTRY.DELETE.REORG >355A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3564 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3578 :     
    IDX.ENTRY.INSERT.... >35C8 :     
    IDX.ENTRY.INSERT.EXIT >3614 :     
    IDX.ENTRY.INSERT.REORG >35E6 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >35F0 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3604 :     
    IDX.ENTRY.UPDATE.... >3478 :     
    IDX.ENTRY.UPDATE.CLEAR >34B2 :     
    IDX.ENTRY.UPDATE.EXIT >34C2 :     
    IDX.ENTRY.UPDATE.SAVE >34A0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >30E8 :     
    IDX.INIT.EXIT....... >3124 :     
    IDX.POINTER.GET..... >34CA :     
    IDX.POINTER.GET.EXIT >350C :     
    IDX.POINTER.GET.PARM >34FA :     
    IDX.POINTER.GET.PARM.NULL >3504 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >7DB6 :     
    KEYMAP_ACTIONS.EDITOR >7CE0 :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >7CCE :     
    MAGIC.CLEAR......... >7CBC :     
    MAGIC.SET........... >7CAA :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7C86 :     
    MEM.SAMS.SET.LEGACY. >7C74 :     
    MEM.SAMS.SET.STEVIE. >7C98 :     
    MEM.SAMS.SETUP.STEVIE >60F6 :     
    MEM.SAMS.SETUP.STEVIE.EXIT >6110 :     
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3810 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.CHECKCMDB >7328 :     
    PANE.ACTION.COLORSCHEME.CMDBPANE >7358 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR >742C :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.CMDB >743A :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.FB >7442 :     
    PANE.ACTION.COLORSCHEME.CYCLE >71FC :     
    PANE.ACTION.COLORSCHEME.CYCLE.EXIT >7254 :     
    PANE.ACTION.COLORSCHEME.ERRPANE >73CE :     
    PANE.ACTION.COLORSCHEME.FBDUMP >7334 :     
    PANE.ACTION.COLORSCHEME.FBDUMP.NORULER >7320 :     
    PANE.ACTION.COLORSCHEME.LOAD >725A :     
    PANE.ACTION.COLORSCHEME.LOAD.EXIT >7450 :     
    PANE.ACTION.COLORSCHEME.RULER >740E :     
    PANE.ACTION.COLORSCHEME.STATLINE >73E0 :     
    PANE.ACTION.COLORSCHEME.STATLINES >746E :     
    PANE.ACTION.COLORSCHEME.STATLINES.EXIT >7482 :     
    PANE.ACTION.COLORSCHEME.SWITCH >7216 :     
    PANE.BOTLINE........ >7680 :     
    PANE.BOTLINE.EXIT... >7804 :     
    PANE.BOTLINE.NOCHANGE >7702 :     
    PANE.BOTLINE.SHOW_DIRTY >76F2 :     
    PANE.BOTLINE.SHOW_KEYS >76A0 :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >77C0 :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >77B8 :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >77AE :     
    PANE.BOTLINE.SHOW_LINE.REST >77C4 :     
    PANE.BOTLINE.SHOW_LINECOL >770A :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >77CE :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >7772 :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >77F2 :     
    PANE.BOTLINE.SHOW_MODE >76CA :     
    PANE.BOTLINE.SHOW_MODE.INSERT >76DA :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >76EA :     
    PANE.BOTROW......... >0017 :     
    PANE.CMDB.DRAW...... >7A4C :     
    PANE.CMDB.DRAW.VECTOR >7A54 :     
    PANE.CMDB.HIDE...... >7A42 :     
    PANE.CMDB.HIDE.VECTOR >7A4A :     
    PANE.CMDB.SHOW...... >7A38 :     
    PANE.CMDB.SHOW.VECTOR >7A40 :     
    PANE.CURSOR.BLINK... >74A6 :     
    PANE.CURSOR.BLINK.EXIT >74BE :     
    PANE.CURSOR.HIDE.... >7488 :     
    PANE.CURSOR.HIDE.EXIT >74A2 :     
    PANE.ERRLINE.DRAWCOLOR >75B6 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >75DE :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >75D0 :     
    PANE.ERRLINE.HIDE... >764A :     
    PANE.ERRLINE.HIDE.EXIT >767A :     
    PANE.ERRLINE.HIDE.FBCOLOR >7662 :     
    PANE.ERRLINE.SHOW... >75E8 :     
    PANE.ERRLINE.SHOW.EXIT >7642 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >7A2E :     
    PANE.SHOW_HINTX.VECTOR >7A36 :     
    PANE.TOPLINE........ >750C :     
    PANE.TOPLINE.EXIT... >75AC :     
    PANE.TOPLINE.FILE... >751A :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3718 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3730 :     
    PANE.TOPLINE.SHOWMARKERS >754A :     
    PANE.VDPDUMP........ >780E :     
    PANE.VDPDUMP.ALPHA_LOCK >781C :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >782C :     
    PANE.VDPDUMP.CMDB.CHECK >7834 :     
    PANE.VDPDUMP.CMDB.DRAW >783A :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >7846 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >7878 :     
    PANE.VDPDUMP.DUMP... >788E :     
    PANE.VDPDUMP.DUMPED. >789C :     
    PANE.VDPDUMP.EXIT... >78C6 :     
    PANE.VDPDUMP.STATLINES >78A4 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FB0 :     
    ROM.FARJUMP.BANKSWITCH.CALL >3000 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >2FF8 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >302E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3024 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3020 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2FDC :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2FE0 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >2FE8 :     
    ROM.FARJUMP.EXIT.... >3036 :     
    ROM.FARJUMP.RETURN.. >3002 :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >601E :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3804 :     
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2F88 :     
    RUNLID.............. >2F9E :     
    RUNLIE.............. >2FA8 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_F18A_SUPPORT >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >37E6 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >37E6 :     
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >37DA :     
    TASK.ONESHOT.EXIT... >37E2 :     
    TASK.VDP.CURSOR..... >3752 :     
    TASK.VDP.CURSOR.CMDB >3780 :     
    TASK.VDP.CURSOR.CMDB.HIDE >378C :     
    TASK.VDP.CURSOR.DUMP >37BE :     
    TASK.VDP.CURSOR.EXIT >37CA :     
    TASK.VDP.CURSOR.FB.. >3792 :     
    TASK.VDP.CURSOR.FB.VISIBLE >379E :     
    TASK.VDP.CURSOR.FB.VISIBLE.NORULER >37B2 :     
    TASK.VDP.PANES...... >71EE :     
    TASK.VDP.PANES.EXIT. >71F6 :     
    TIB.AUTOMODE........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >7BFE :     
    TIBASIC.32X24....... >37F0 :     
    TIBASIC.32X30....... >37FA :     
    TIBASIC.AM.TOGGLE... >7A92 :     
    TIBASIC.AM.TOGGLE.VECTOR >7A9A :     
    TIBASIC.EXIT........ >7C20 :     
    TIBASIC.HEARTS.TAT.. >7A88 :     
    TIBASIC.HEARTS.TAT.VECTOR >7A90 :     
    TIBASIC.UNCRUNCH.... >7C26 :     
    TIBASIC.UNCRUNCH.EXIT >7C3C :     
    TIBASIC1............ >7BD8 :     
    TIBASIC2............ >7BE0 :     
    TIBASIC3............ >7BE8 :     
    TIBASIC4............ >7BF0 :     
    TIBASIC5............ >7BF8 :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3812 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A232 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FG99.IMG.PTR..... >A230 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D2 :     
    TV.INIT............. >32BA :     
    TV.INIT.EXIT........ >32FA :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3400 :     
    TV.PAD.STRING.EXIT.. >346C :     
    TV.PAD.STRING.LOOP.. >3456 :     
    TV.PAD.STRING.PANIC. >3464 :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3304 :     
    TV.RESET............ >3312 :     
    TV.RESET.EXIT....... >3338 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22E :     
    TV.TABS.TABLE.LR.... >3862 :     
    TV.TABS.TABLE.RL.... >386E :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UINT16.MPY....... >33CA :     
    TV.UINT16.PACK...... >333C :     
    TV.UINT16.PACK.DONE. >33B6 :     
    TV.UINT16.PACK.ERROR >33AE :     
    TV.UINT16.PACK.EXIT. >33BA :     
    TV.UINT16.PACK.LOOP. >3384 :     
    TV.UINT16.UNPACK.... >33D4 :     
    TV.UINT16.UNPACK.EXIT >33FA :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3BAA :     
    TXT.AUTOINS.OFF..... >3A06 :     
    TXT.AUTOINS.ON...... >39F6 :     
    TXT.AUTOINSERT...... >389A :     
    TXT.BLOCK.CLIP...... >3920 :     
    TXT.BLOCK.COPY...... >38E2 :     
    TXT.BLOCK.DEL....... >38CE :     
    TXT.BLOCK.INSIDE.... >3C56 :     
    TXT.BLOCK.MOVE...... >38F4 :     
    TXT.BLOCK.PRINT..... >393A :     
    TXT.BLOCK.SAVE...... >3906 :     
    TXT.BOTTOM.......... >3888 :     
    TXT.CLEARMEM........ >394E :     
    TXT.CMDB.PROMPT..... >3C84 :     
    TXT.COLORSCHEME..... >3C86 :     
    TXT.DELIM........... >3886 :     
    TXT.DONE.APPEND..... >3984 :     
    TXT.DONE.CLIPBOARD.. >39D8 :     
    TXT.DONE.CLIPDEV.... >39E8 :     
    TXT.DONE.COPY....... >39A6 :     
    TXT.DONE.DELETE..... >39C6 :     
    TXT.DONE.INSERT..... >3972 :     
    TXT.DONE.LOAD....... >3962 :     
    TXT.DONE.PRINT...... >39B6 :     
    TXT.DONE.SAVE....... >3996 :     
    TXT.FASTMODE........ >3A16 :     
    TXT.FILETYPE.DV80... >3A9A :     
    TXT.FILETYPE.NONE... >3BBC :     
    TXT.INSERT.......... >3894 :     
    TXT.IO.NOFILE....... >3C10 :     
    TXT.IOERR.LOAD...... >3BC8 :     
    TXT.IOERR.PRINT..... >3BF4 :     
    TXT.IOERR.SAVE...... >3BDE :     
    TXT.KB.............. >3A3E :     
    TXT.KEYMARKER....... >3BB0 :     
    TXT.KEYS.BASIC1..... >3B28 :     
    TXT.KEYS.BLOCK...... >3AF2 :     
    TXT.KEYS.DEFAULT.... >3AA8 :     
    TXT.KEYS.DEFAULTB... >3AC8 :     
    TXT.LINES........... >3A42 :     
    TXT.LOADING......... >38A2 :     
    TXT.M1.............. >3AA0 :     
    TXT.M2.............. >3AA4 :     
    TXT.MEMFULL.LOAD.... >3C28 :     
    TXT.NEWFILE......... >3A48 :     
    TXT.OVRWRITE........ >388E :     
    TXT.PRINTING........ >38BA :     
    TXT.RULER........... >3B5A :     
    TXT.SAVING.......... >38AE :     
    TXT.STAR............ >38A0 :     
    TXT.TIB1............ >3A54 :     
    TXT.TIB2............ >3A62 :     
    TXT.TIB3............ >3A70 :     
    TXT.TIB4............ >3A7E :     
    TXT.TIB5............ >3A8C :     
    TXT.UNCRUNCHING..... >3A22 :     
    TXT.VERTLINE........ >3BAE :     
    TXT.WS1............. >3BB2 :     
    TXT.WS2............. >3BB4 :     
    TXT.WS3............. >3BB8 :     
    TXT.WS4............. >3BBC :     
    TXT.WS5............. >3BC2 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PATTERNS.DUMP... >7BC6 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0780 :     
    VDP.TAT.BASE........ >1800 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
    XROM.FARJUMP........ >2FB6 :     
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
    _EDKEY.ACTION.SCROLL >63BE :     
    _EDKEY.ACTION.SCROLL.EXIT >63C2 :     
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
    _IDX.ENTRY.DELETE.REORG >3516 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >351E :     
    _IDX.ENTRY.INSERT.REORG >358A :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3590 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >35B8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >315E :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >318C :     
    _IDX.SAMS.MAPCOLUMN.ON >312A :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3154 :     
    _IDX.SAMSPAGE.GET... >3198 :     
    _IDX.SAMSPAGE.GET.EXIT >31DE :     
    _TRAMPOLINE.BANK3... >7A12 :     
    _TRAMPOLINE.BANK3.RET >7AA6 :     
    _TRAMPOLINE.BANK5.RET >7BB4 :     
