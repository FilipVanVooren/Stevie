XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
<<<<<<< HEAD
0002               * BUILD: 230129-2052460
=======
0002               * BUILD: 230203-0959580
>>>>>>> b9b40bb (WIP optimize build scripts)
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
<<<<<<< HEAD
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F50     bankx.crash.showbank      equ  >7f50   ; Show ROM bank in CPU crash screen
0044      7F60     bankx.vdptab              equ  >7f60   ; VDP mode tables
0045      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
=======
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0059      0001     device.f18a               equ  1       ; F18a GPU
0060      0000     device.9938               equ  0       ; 9938 GPU
0061      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F50     bankx.crash.showbank      equ  >7f50   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equates.vdp.asm"     ; VDP configuration (F18a/9938/...)
     **** ****     > equates.vdp.asm
0001               * FILE......: equates.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0011                   copy 'equates.f18a.2481.asm'        ; Character cursor
     **** ****     > equates.f18a.2481.asm
0001               * FILE......: equates.f18a.2481.chr.asm
0002               * Purpose...: F18a 24x80 mode (no sprite support)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 24x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0780     vdp.sit.size              equ  24*80   ; VDP SIT size 80 columns, 24 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      0017     pane.botrow               equ  23      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0000     spritecursor              equ  0       ; Use chars for cursor
0043               
0044               *--------------------------------------------------------------
0045               * Video mode configuration (spectra2)
0046               *--------------------------------------------------------------
0047      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0048      0004     spfbck  equ   >04                   ; Screen background color.
0049      7F60     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0050      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0051      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0052      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0053      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0054      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0055               
                   < equates.vdp.asm
0013               
0014               ***************************** F18a 30x80 ***************************************
0018               
0019               ***************************** F18a 30x80 ***************************************
0023               
0024               ***************************** F18a 60x80 ***************************************
                   < stevie_b1.asm
0031                       copy  "equates.asm"         ; Stevie main configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
<<<<<<< HEAD
0044               *===============================================================================
0045               
0046               
0047               
0048               *--------------------------------------------------------------
0049               * Stevie Dialog / Pane specific equates
0050               *--------------------------------------------------------------
0051      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0052      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0053               ;-----------------------------------------------------------------
0054               ;   Dialog ID's
0055               ;-----------------------------------------------------------------
0056      000A     id.dialog.load            equ  10      ; "Load file"
0057      000B     id.dialog.save            equ  11      ; "Save file"
0058      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0059      000D     id.dialog.insert          equ  13      ; "Insert file"
0060      000E     id.dialog.append          equ  14      ; "Append file"
0061      000F     id.dialog.print           equ  15      ; "Print file"
0062      0010     id.dialog.printblock      equ  16      ; "Print block"
0063      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0064      0013     id.dialog.goto            equ  19      ; "Goto"
0065               ;-----------------------------------------------------------------
0066               ;   Dialog ID's >= 100 indicate that command prompt should be
0067               ;   hidden and no characters added to CMDB keyboard buffer.
0068               ;-----------------------------------------------------------------
0069      0064     id.dialog.menu            equ  100     ; "Main Menu"
0070      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0071      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0072      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0073      0068     id.dialog.help            equ  104     ; "About"
0074      0069     id.dialog.file            equ  105     ; "File"
0075      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0076      006B     id.dialog.basic           equ  107     ; "TI Basic"
0077      006C     id.dialog.cfg             equ  108     ; "Configure"
0078      006D     id.dialog.editor          equ  109     ; "Configure editor"
0079      006E     id.dialog.font            equ  110     ; "Configure font"
0080      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0081               *--------------------------------------------------------------
0082               * Suffix characters for clipboards
0083               *--------------------------------------------------------------
0084      3100     clip1                     equ  >3100   ; '1'
0085      3200     clip2                     equ  >3200   ; '2'
0086      3300     clip3                     equ  >3300   ; '3'
0087      3400     clip4                     equ  >3400   ; '4'
0088      3500     clip5                     equ  >3500   ; '5'
0089               *--------------------------------------------------------------
0090               * Keyboard flags in Stevie
0091               *--------------------------------------------------------------
0092      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0093               *--------------------------------------------------------------
0094               * File work mode
0095               *--------------------------------------------------------------
0096      0001     id.file.loadfile          equ  1       ; Load file
0097      0002     id.file.insertfile        equ  2       ; Insert file
0098      0003     id.file.appendfile        equ  3       ; Append file
0099      0004     id.file.savefile          equ  4       ; Save file
0100      0005     id.file.saveblock         equ  5       ; Save block to file
0101      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0102      0007     id.file.printfile         equ  7       ; Print file
0103      0008     id.file.printblock        equ  8       ; Print block
0104               *--------------------------------------------------------------
0105               * Special file indicator
0106               *--------------------------------------------------------------
0107      0000     id.special.normal         equ  0       ; Normal file
0108      0001     id.special.mastcat        equ  1       ; Master catalog
0109      0002     id.special.readonly       equ  2       ; Read-only file
=======
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0068               
0069      001D     pane.botrow               equ  29      ; Bottom row on screen
0070               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0092      0012     id.dialog.goto            equ  18      ; "Goto"
0093               ;-----------------------------------------------------------------
0094               ;   Dialog ID's >= 100 indicate that command prompt should be
0095               ;   hidden and no characters added to CMDB keyboard buffer.
0096               ;-----------------------------------------------------------------
0097      0064     id.dialog.menu            equ  100     ; "Main Menu"
0098      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0099      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0100      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0101      0068     id.dialog.help            equ  104     ; "About"
0102      0069     id.dialog.file            equ  105     ; "File"
0103      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0104      006B     id.dialog.basic           equ  107     ; "TI Basic"
0105      006C     id.dialog.config          equ  108     ; "Configure"
0106      006D     id.dialog.editor          equ  109     ; "Configure editor"
0107      006E     id.dialog.shortcuts       equ  110     ; "Shortcuts"
0108               *--------------------------------------------------------------
0109               * Suffix characters for clipboards
>>>>>>> b9b40bb (WIP optimize build scripts)
0110               *--------------------------------------------------------------
0111               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0112               *--------------------------------------------------------------
0113      A000     core1.top         equ  >a000           ; Structure begin
0114      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0115      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0116      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0117      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0118      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0119      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0120      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0121      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0122      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0123      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0124      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0125      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0126      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0127      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0128      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0129      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0130      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0131      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0132      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0133      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0134      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0135      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0136      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0137      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0138      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0139      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0140      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0141      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0142                                 ;--------------------------------------------
0143                                 ; TI Basic related
0144                                 ;--------------------------------------------
0145      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0146      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0147      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0148      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0149      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0150      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0151      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0152      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0153      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0154      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0155      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0156      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0157      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0158      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0159      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0160      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0161      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0162      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0163      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0164      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0165      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0166      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0167      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0168      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0169      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0170      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0171      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0172      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0173      A100     core1.free        equ  core1.top + 256 ; End of structure
0174               *--------------------------------------------------------------
0175               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0176               *--------------------------------------------------------------
0177      A100     core2.top         equ  >a100           ; Structure begin
0178      A100     rambuf            equ  core2.top       ; RAM workbuffer
0179      A200     core2.free        equ  core2.top + 256 ; End of structure
0180               *--------------------------------------------------------------
0181               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0182               *--------------------------------------------------------------
0183      A200     tv.top            equ  >a200           ; Structure begin
0184      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0185      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0186      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0187      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0188      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0189      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0190      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0191      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0192      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0193      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0194      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0195      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0196      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0197      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0198      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0199      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0200      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0201      A222     tv.font.ptr       equ  tv.top + 34     ; Pointer to font (in ROM bank 6 or RAM)
0202      A224     tv.pane.focus     equ  tv.top + 36     ; Identify pane that has focus
0203      A226     tv.task.oneshot   equ  tv.top + 38     ; Pointer to one-shot routine
0204      A228     tv.fj.stackpnt    equ  tv.top + 40     ; Pointer to farjump return stack
0205      A22A     tv.error.visible  equ  tv.top + 42     ; Error pane visible
0206      A22C     tv.error.rows     equ  tv.top + 44     ; Number of rows in error pane
0207      A22E     tv.sp2.conf       equ  tv.top + 46     ; Backup of SP2 config register
0208      A230     tv.sp2.stack      equ  tv.top + 48     ; Backup of SP2 stack register
0209      A232     tv.fg99.img.ptr   equ  tv.top + 50     ; Pointer to Final GROM cartridge to load
0210      A234     tv.error.msg      equ  tv.top + 52     ; Error message (max. 160 characters)
0211      A2D4     tv.free           equ  tv.top + 212    ; End of structure
0212               *--------------------------------------------------------------
0213               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0214               *--------------------------------------------------------------
0215      A300     fb.struct         equ  >a300           ; Structure begin
0216      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0217      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0218      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0219                                                      ; line X in editor buffer).
0220      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0221                                                      ; (offset 0 .. @fb.scrrows)
0222      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0223      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0224      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0225      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0226      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0227      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0228      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0229      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0230      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0231      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0232      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0233      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0234      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0235      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0236      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0237               *--------------------------------------------------------------
0238               * File handle structure               @>a400-a4ff   (256 bytes)
0239               *--------------------------------------------------------------
0240      A400     fh.struct         equ  >a400           ; stevie file handling structures
0241               ;*******************************************************************************
0242               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0243               ;*******************************************************************************
0244      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0245      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0246      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0247      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0248      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0249      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0250      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0251      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0252      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0253      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0254      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0255      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0256      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0257      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0258      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0259      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0260      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0261      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0262      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0263      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0264      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0265      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0266      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0267      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0268      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0269      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0270      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0271      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0272      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0273      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0274      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0275      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0276      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0277      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0278      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0279      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0280               *--------------------------------------------------------------
0281               * File handle structure for generic   @>a400-a4ff   (256 bytes)
0282               * Overload file handle structure
0283               *--------------------------------------------------------------
0284      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0285      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0286               
0287               *--------------------------------------------------------------
0288               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0289               *--------------------------------------------------------------
0290      A500     edb.struct        equ  >a500           ; Begin structure
0291      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0292      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0293      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0294      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0295      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0296      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0297      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0298      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0299      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0300      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0301      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0302                                                      ; with current filename.
0303      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0304                                                      ; with current file type.
0305      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0306      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0307      A51C     edb.bk.fb.topline equ  edb.struct + 28 ; Backup of @fb.topline before opening
0308                                                      ; other file from special file.
0309      A51E     edb.bk.fb.row     equ  edb.struct + 30 ; Backup of @fb.row before opening
0310                                                      ; other file from special file.
0311      A520     edb.special.file  equ  edb.struct + 32 ; Special file in editor buffer
0312      A522     edb.filename      equ  edb.struct + 34 ; 80 characters inline buffer reserved
0313                                                      ; for filename, but not always used.
0314      A572     edb.free          equ  edb.struct + 114; End of structure
0315               *--------------------------------------------------------------
0316               * Index structure                     @>a600-a6ff   (256 bytes)
0317               *--------------------------------------------------------------
0318      A600     idx.struct        equ  >a600           ; stevie index structure
0319      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0320      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0321      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0322      A606     idx.free          equ  idx.struct + 6  ; End of structure
0323               *--------------------------------------------------------------
0324               * Command buffer structure            @>a700-a7ff   (256 bytes)
0325               *--------------------------------------------------------------
0326      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0327      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0328      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0329      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0330      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0331      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0332      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0333      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0334      A70E     cmdb.vdptop       equ  cmdb.struct + 14; VDP address CMDB pane header line (TAT)
0335      A710     cmdb.yxtop        equ  cmdb.struct + 16; YX position CMDB pane header line
0336      A712     cmdb.yxprompt     equ  cmdb.struct + 18; YX position of command buffer prompt
0337      A714     cmdb.column       equ  cmdb.struct + 20; Current column in command buffer pane
0338      A716     cmdb.length       equ  cmdb.struct + 22; Length of current row in CMDB
0339      A718     cmdb.lines        equ  cmdb.struct + 24; Total lines in CMDB
0340      A71A     cmdb.dirty        equ  cmdb.struct + 26; Command buffer dirty (Text changed!)
0341      A71C     cmdb.dialog       equ  cmdb.struct + 28; Dialog identifier
0342      A71E     cmdb.dialog.var   equ  cmdb.struct + 30; Dialog private variable or pointer
0343      A720     cmdb.panhead      equ  cmdb.struct + 32; Pointer to string pane header
0344      A722     cmdb.paninfo      equ  cmdb.struct + 34; Pointer to string pane info (1st line)
0345      A724     cmdb.panhint      equ  cmdb.struct + 36; Pointer to string pane hint (2nd line)
0346      A726     cmdb.panhint2     equ  cmdb.struct + 38; Pointer to string pane hint (extra)
0347      A728     cmdb.panmarkers   equ  cmdb.struct + 40; Pointer to key marker list  (3rd line)
0348      A72A     cmdb.pankeys      equ  cmdb.struct + 42; Pointer to string pane keys (stat line)
0349      A72C     cmdb.action.ptr   equ  cmdb.struct + 44; Pointer to function to execute
0350      A72E     cmdb.cmdall       equ  cmdb.struct + 46; Current command including length-byte
0351      A72E     cmdb.cmdlen       equ  cmdb.struct + 46; Length of current command (MSB byte!)
0352      A72F     cmdb.cmd          equ  cmdb.struct + 47; Current command (80 bytes max.)
0353      A780     cmdb.panhead.buf  equ  cmdb.struct +128; String buffer for pane header
0354      A7B2     cmdb.dflt.fname   equ  cmdb.struct +178; Default for filename
0355      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0356               *--------------------------------------------------------------
0357               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0358               *--------------------------------------------------------------
0359      A900     sp2.stktop        equ  >a900           ; \
0360                                                      ; | The stack grows from high memory
0361                                                      ; | towards low memory.
0362                                                      ; |
0363                                                      ; | Stack leaking is checked in SP2
0364                                                      ; | user hook "edkey.keyscan.hook"
0365                                                      ; /
0366               *--------------------------------------------------------------
0367               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0368               *--------------------------------------------------------------
0369      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0370                                                      ; / stored in cartridge ROM bank7.asm
0371               
0372      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0373                                                      ; | scratchpad backup/restore routines.
0374                                                      ; /
0375               
0376      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0377               
0378      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0379                                                      ; calling TI Basic/External programs
0380               *--------------------------------------------------------------
0381               * Farjump return stack                @>af00-afff   (256 bytes)
0382               *--------------------------------------------------------------
0383      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0384                                                      ; Grows downwards from high to low.
0385               *--------------------------------------------------------------
0386               * Index                               @>b000-bfff  (4096 bytes)
0387               *--------------------------------------------------------------
0388      B000     idx.top           equ  >b000           ; Top of index
0389      1000     idx.size          equ  4096            ; Index size
0390               *--------------------------------------------------------------
0391               * Editor buffer                       @>c000-cfff  (4096 bytes)
0392               *--------------------------------------------------------------
0393      C000     edb.top           equ  >c000           ; Editor buffer high memory
0394      1000     edb.size          equ  4096            ; Editor buffer size
0395               *--------------------------------------------------------------
0396               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0397               *--------------------------------------------------------------
0398      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0399      0F00     fb.size           equ  80*48           ; Frame buffer size
0400      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0401                                                      ; / >d960->dcff
0402               *--------------------------------------------------------------
0403               * Defaults area                       @>de00-dfff  (3584 bytes)
0404               *--------------------------------------------------------------
0405      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0406      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0407               *--------------------------------------------------------------
0408               * Command buffer history              @>e000-efff  (4096 bytes)
0409               *--------------------------------------------------------------
0410      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0411      1000     cmdb.size         equ  4096            ; Command buffer size
0412               *--------------------------------------------------------------
0413               * Heap                                @>f000-ffff  (4096 bytes)
0414               *--------------------------------------------------------------
<<<<<<< HEAD
0415      F000     heap.top          equ  >f000           ; Top of heap
0416               
0417               
0418               *--------------------------------------------------------------
0419               * Stevie specific equates
0420               *--------------------------------------------------------------
0421      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0422      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0423      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0424      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0425      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0426               
0427      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0428      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
=======
0415               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0416               *--------------------------------------------------------------
0417      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0418      0960     fb.size           equ  80*30           ; Frame buffer size
0419      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0420                                                      ; / >d960->dcff
0421               *--------------------------------------------------------------
0422               * Defaults area                       @>de00-dfff  (3584 bytes)
0423               *--------------------------------------------------------------
0424      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0425      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0426               *--------------------------------------------------------------
0427               * Command buffer history              @>e000-efff  (4096 bytes)
0428               *--------------------------------------------------------------
0429      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0430      1000     cmdb.size         equ  4096            ; Command buffer size
0431               *--------------------------------------------------------------
0432               * Heap                                @>f000-ffff  (4096 bytes)
0433               *--------------------------------------------------------------
0434      F000     heap.top          equ  >f000           ; Top of heap
0435               
0436               
0437               *--------------------------------------------------------------
0438               * Stevie specific equates
0439               *--------------------------------------------------------------
0440      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0441      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0442      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0443      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0444      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0445               
0446      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0447      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0448      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0449      0960     vdp.sit.size              equ  (pane.botrow + 1) * 80
0450                                                      ; VDP SIT size 80 columns, 24/30 rows
0451      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0452      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0453      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0032                       copy  "equates.c99.asm"     ; Classic99 emulator configuration
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0033                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0034               
0035               ***************************************************************
0036               * BANK 1
0037               ********|*****|*********************|**************************
0038      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0039                       aorg  >6000
0040                       save  >6000,>8000           ; Save bank
0041                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
<<<<<<< HEAD
0057               
0061               
0065               
0067 6028 0F53                 stri 'STEVIE 1.4E-24*'
=======
0055 6028 0B53                 stri 'STEVIE 1.3Q'
>>>>>>> b9b40bb (WIP optimize build scripts)
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
<<<<<<< HEAD
     6032 3445     
     6034 2D32     
     6036 342A     
0069               
=======
     6032 3351     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0042               
0043               ***************************************************************
0044               * Step 1: Switch to bank 0 (uniform code accross all banks)
0045               ********|*****|*********************|**************************
0046                       aorg  kickstart.code1       ; >6040
0047 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0048               ***************************************************************
0049               * Step 2: Satisfy assembler, must know relocated code
0050               ********|*****|*********************|**************************
0051                       aorg  >2000                 ; Relocate to >2000
0052                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 299C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 299C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26C6     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29A6     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26DC     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26DC     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29A6     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2918     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26DC     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26DC     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26CC     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F50     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 244A 0649  14         dect  stack
0540 244C C64B  30         mov   r11,*stack            ; Save return address
0541 244E 0649  14         dect  stack
0542 2450 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2454 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2456 0649  14         dect  stack
0551 2458 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 245A 0649  14         dect  stack
0553 245C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 245E 0649  14         dect  stack
0555 2460 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2462 06A0  32         bl    @xutst0               ; Display string
     2464 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2466 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2468 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 246A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 246C 06A0  32         bl    @down                 ; Move cursor down
     246E 26CC     
0566               
0567 2470 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2472 0585  14         inc   tmp1                  ; Consider length byte
0569 2474 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2476 2002     
0570 2478 1301  14         jeq   !                     ; Yes, skip adjustment
0571 247A 0585  14         inc   tmp1                  ; Make address even
0572 247C 0606  14 !       dec   tmp2
0573 247E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 2480 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2482 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2484 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2486 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2488 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 248A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 248C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 248E 1604  14         jne   !                     ; No, continue
0028               
0029 2490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2492 FFCE     
0030 2494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2496 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2498 0264  22 !       ori   tmp0,>4000
     249A 4000     
0035 249C 06C4  14         swpb  tmp0
0036 249E D804  30         movb  tmp0,@vdpa
     24A0 8C02     
0037 24A2 06C4  14         swpb  tmp0
0038 24A4 D804  30         movb  tmp0,@vdpa
     24A6 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24A8 020F  20         li    r15,vdpw              ; Set VDP write address
     24AA 8C00     
0043 24AC C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24AE 24B6     
     24B0 8320     
0044 24B2 0460  24         b     @mcloop               ; Write data to VDP and return
     24B4 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24B6 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24B8 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24BA C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24BC C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24BE 06C4  14 xpyv2m  swpb  tmp0
0027 24C0 D804  30         movb  tmp0,@vdpa
     24C2 8C02     
0028 24C4 06C4  14         swpb  tmp0
0029 24C6 D804  30         movb  tmp0,@vdpa
     24C8 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24CA 020F  20         li    r15,vdpr              ; Set VDP read address
     24CC 8800     
0034 24CE C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24D0 24D8     
     24D2 8320     
0035 24D4 0460  24         b     @mcloop               ; Read data from VDP
     24D6 8320     
0036 24D8 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24DA C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24DC C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24DE C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24E0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24E2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24E6 FFCE     
0034 24E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24EA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24EC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24EE 0001     
0039 24F0 1603  14         jne   cpym0                 ; No, continue checking
0040 24F2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24F4 04C6  14         clr   tmp2                  ; Reset counter
0042 24F6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24F8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24FA 7FFF     
0047 24FC C1C4  18         mov   tmp0,tmp3
0048 24FE 0247  22         andi  tmp3,1
     2500 0001     
0049 2502 1618  14         jne   cpyodd                ; Odd source address handling
0050 2504 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2506 0247  22         andi  tmp3,1
     2508 0001     
0052 250A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 250C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     250E 2020     
0057 2510 1605  14         jne   cpym3
0058 2512 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2514 253A     
     2516 8320     
0059 2518 0460  24         b     @mcloop               ; Copy memory and exit
     251A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 251C C1C6  18 cpym3   mov   tmp2,tmp3
0064 251E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2520 0001     
0065 2522 1301  14         jeq   cpym4
0066 2524 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2526 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2528 0646  14         dect  tmp2
0069 252A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 252C C1C7  18         mov   tmp3,tmp3
0074 252E 1301  14         jeq   cpymz
0075 2530 D554  38         movb  *tmp0,*tmp1
0076 2532 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2534 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2536 8000     
0081 2538 10E9  14         jmp   cpym2
0082 253A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 253C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 253E 0649  14         dect  stack
0065 2540 C64B  30         mov   r11,*stack            ; Push return address
0066 2542 0649  14         dect  stack
0067 2544 C640  30         mov   r0,*stack             ; Push r0
0068 2546 0649  14         dect  stack
0069 2548 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 254A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 254C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 254E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     2550 4000     
0077 2552 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2554 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2556 020C  20         li    r12,>1e00             ; SAMS CRU address
     2558 1E00     
0082 255A 04C0  14         clr   r0
0083 255C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 255E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 2560 D100  18         movb  r0,tmp0
0086 2562 0984  32         srl   tmp0,8                ; Right align
0087 2564 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2566 833C     
0088 2568 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 256A C339  30         mov   *stack+,r12           ; Pop r12
0094 256C C039  30         mov   *stack+,r0            ; Pop r0
0095 256E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 2570 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2572 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2574 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2576 0649  14         dect  stack
0135 2578 C64B  30         mov   r11,*stack            ; Push return address
0136 257A 0649  14         dect  stack
0137 257C C640  30         mov   r0,*stack             ; Push r0
0138 257E 0649  14         dect  stack
0139 2580 C64C  30         mov   r12,*stack            ; Push r12
0140 2582 0649  14         dect  stack
0141 2584 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2586 0649  14         dect  stack
0143 2588 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 258A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 258C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 258E 0284  22         ci    tmp0,255              ; Crash if page > 255
     2590 00FF     
0153 2592 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2594 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2596 001E     
0158 2598 150A  14         jgt   !
0159 259A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     259C 0004     
0160 259E 1107  14         jlt   !
0161 25A0 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25A2 0012     
0162 25A4 1508  14         jgt   sams.page.set.switch_page
0163 25A6 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25A8 0006     
0164 25AA 1501  14         jgt   !
0165 25AC 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25AE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25B0 FFCE     
0170 25B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25B4 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0176 25BA C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25BC 06C0  14         swpb  r0                    ; LSB to MSB
0178 25BE 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25C0 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25C2 4000     
0180 25C4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25CA C339  30         mov   *stack+,r12           ; Pop r12
0188 25CC C039  30         mov   *stack+,r0            ; Pop r0
0189 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25D0 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25D2 0649  14         dect  stack
0205 25D4 C64C  30         mov   r12,*stack            ; Push r12
0206 25D6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D8 1E00     
0207 25DA 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25DC C339  30         mov   *stack+,r12           ; Pop r12
0213 25DE 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25E0 0649  14         dect  stack
0231 25E2 C64C  30         mov   r12,*stack            ; Push r12
0232 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0233 25E8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25EA C339  30         mov   *stack+,r12           ; Pop r12
0239 25EC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25EE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25F0 0649  14         dect  stack
0271 25F2 C64B  30         mov   r11,*stack            ; Save return address
0272 25F4 0649  14         dect  stack
0273 25F6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25F8 0649  14         dect  stack
0275 25FA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25FC 020C  20         li    r12,>1e00             ; SAMS CRU address
     25FE 1E00     
0280 2600 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2602 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2604 4004     
0283 2606 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2608 4006     
0284 260A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     260C 4014     
0285 260E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2610 4016     
0286 2612 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2614 4018     
0287 2616 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2618 401A     
0288 261A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     261C 401C     
0289 261E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2620 401E     
0290               
0291 2622 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2624 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2626 C339  30         mov   *stack+,r12           ; Pop r12
0298 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 262A C2F9  30         mov   *stack+,r11           ; Pop r11
0300 262C 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 262E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 2630 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2632 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2634 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2636 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2638 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 263A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 263C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 263E C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 2640 0649  14         dect  stack
0335 2642 C64B  30         mov   r11,*stack            ; Push return address
0336 2644 0649  14         dect  stack
0337 2646 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2648 0649  14         dect  stack
0339 264A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 264C 0649  14         dect  stack
0341 264E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 2650 0649  14         dect  stack
0343 2652 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2654 0205  20         li    tmp1,sams.layout.copy.data
     2656 2676     
0348 2658 0206  20         li    tmp2,8                ; Set loop counter
     265A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 265C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 265E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     2660 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2662 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2664 833C     
0359               
0360 2666 0606  14         dec   tmp2                  ; Next iteration
0361 2668 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 266A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 266C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 266E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 2670 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2672 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2674 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2676 2000             data  >2000                 ; >2000-2fff
0377 2678 3000             data  >3000                 ; >3000-3fff
0378 267A A000             data  >a000                 ; >a000-afff
0379 267C B000             data  >b000                 ; >b000-bfff
0380 267E C000             data  >c000                 ; >c000-cfff
0381 2680 D000             data  >d000                 ; >d000-dfff
0382 2682 E000             data  >e000                 ; >e000-efff
0383 2684 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2686 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2688 FFBF     
0010 268A 0460  28         b     @putv01
     268C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 268E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     2690 0040     
0018 2692 0460  28         b     @putv01
     2694 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2696 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2698 FFDF     
0026 269A 0460  28         b     @putv01
     269C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 269E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26A0 0020     
0034 26A2 0460  28         b     @putv01
     26A4 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26A6 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26A8 FFFE     
0011 26AA 0460  28         b     @putv01
     26AC 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26AE 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26B0 0001     
0019 26B2 0460  28         b     @putv01
     26B4 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26B6 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26B8 FFFD     
0027 26BA 0460  28         b     @putv01
     26BC 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26BE 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26C0 0002     
0035 26C2 0460  28         b     @putv01
     26C4 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26C6 C83B  42 at      mov   *r11+,@wyx
     26C8 832A     
0019 26CA 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26CC B820  46 down    ab    @hb$01,@wyx
     26CE 2012     
     26D0 832A     
0028 26D2 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26D4 7820  46 up      sb    @hb$01,@wyx
     26D6 2012     
     26D8 832A     
0037 26DA 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26DC C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26DE D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26E0 832A     
0051 26E2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26E4 832A     
0052 26E6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26E8 C120  30 yx2px   mov   @wyx,tmp0
     26EA 832A     
0022 26EC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26EE 06C4  14         swpb  tmp0                  ; Y<->X
0024 26F0 04C5  14         clr   tmp1                  ; Clear before copy
0025 26F2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26F4 20A0  32         coc   @wbit1,config         ; f18a present ?
     26F6 201E     
0030 26F8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26FA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26FC 833A     
     26FE 2728     
0032 2700 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2702 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2704 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2706 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2708 0500     
0037 270A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 270E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2710 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2712 D105  18         movb  tmp1,tmp0
0051 2714 06C4  14         swpb  tmp0                  ; X<->Y
0052 2716 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2718 2020     
0053 271A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 271C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     271E 2012     
0059 2720 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2722 2024     
0060 2724 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2726 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2728 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 272A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 272C 06A0  32         bl    @putvr                ; Write once
     272E 2332     
0015 2730 391C             data  >391c                 ; VR1/57, value 00011100
0016 2732 06A0  32         bl    @putvr                ; Write twice
     2734 2332     
0017 2736 391C             data  >391c                 ; VR1/57, value 00011100
0018 2738 06A0  32         bl    @putvr
     273A 2332     
0019 273C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 273E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 2740 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2742 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2744 2332     
0030 2746 3900             data  >3900
0031 2748 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 274A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 274C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     274E 2332     
0044 2750 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2752 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2754 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2756 06A0  32         bl    @cpym2v
     2758 2486     
0060 275A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     275C 279E     
     275E 0008     
0061 2760 06A0  32         bl    @putvr
     2762 2332     
0062 2764 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2766 06A0  32         bl    @putvr
     2768 2332     
0064 276A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 276C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276E 2332     
0068 2770 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2772 0204  20         li    tmp0,>3f00
     2774 3F00     
0073 2776 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2778 22BA     
0074 277A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     277C 8800     
0075 277E 0984  32         srl   tmp0,8
0076 2780 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2782 8800     
0077 2784 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2786 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2788 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     278A BFFF     
0081 278C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 278E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     2790 4000     
0084               
0085               f18chk_exit:
0086 2792 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2794 228E     
0087 2796 3F00             data  >3f00,>00,6
     2798 0000     
     279A 0006     
0088 279C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 279E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27A0 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27A2 0340             data  >0340                 ; 3f04   0340  idle
0096 27A4 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27A6 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27A8 06A0  32         bl    @putvr
     27AA 2332     
0124 27AC 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27AE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27B0 2332     
0127 27B2 3900             data  >3900                 ; Lock the F18a
0128 27B4 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27B6 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27B8 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27BA 201E     
0149 27BC 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27BE C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27C0 8802     
0154 27C2 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27C4 2332     
0155 27C6 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27C8 04C4  14         clr   tmp0
0157 27CA D120  30         movb  @vdps,tmp0
     27CC 8802     
0158 27CE 0984  32         srl   tmp0,8
0159 27D0 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27D2 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27D4 832A     
0018 27D6 D17B  28         movb  *r11+,tmp1
0019 27D8 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27DA D1BB  28         movb  *r11+,tmp2
0021 27DC 0986  32         srl   tmp2,8                ; Repeat count
0022 27DE C1CB  18         mov   r11,tmp3
0023 27E0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27E2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27E4 020B  20         li    r11,hchar1
     27E6 27EC     
0028 27E8 0460  28         b     @xfilv                ; Draw
     27EA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27EC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27EE 2022     
0033 27F0 1302  14         jeq   hchar2                ; Yes, exit
0034 27F2 C2C7  18         mov   tmp3,r11
0035 27F4 10EE  14         jmp   hchar                 ; Next one
0036 27F6 05C7  14 hchar2  inct  tmp3
0037 27F8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27FA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27FC 8334     
0015 27FE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     2800 2006     
0016 2802 0204  20         li    tmp0,muttab
     2804 2814     
0017 2806 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2808 8400     
0018 280A D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 280C D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 280E D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 2810 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2812 045B  20         b     *r11
0023 2814 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2816 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2818 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     281A 8334     
0044 281C C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     281E 8336     
0045 2820 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2822 FFF8     
0046 2824 E0BB  30         soc   *r11+,config          ; Set options
0047 2826 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2828 2012     
     282A 831B     
0048 282C 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 282E 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     2830 2006     
0060 2832 1301  14         jeq   sdpla1                ; Yes, play
0061 2834 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2836 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2838 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     283A 831B     
     283C 2000     
0067 283E 1301  14         jeq   sdpla3                ; Play next note
0068 2840 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2842 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2844 2002     
0070 2846 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2848 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     284A 8336     
0075 284C 06C4  14         swpb  tmp0
0076 284E D804  30         movb  tmp0,@vdpa
     2850 8C02     
0077 2852 06C4  14         swpb  tmp0
0078 2854 D804  30         movb  tmp0,@vdpa
     2856 8C02     
0079 2858 04C4  14         clr   tmp0
0080 285A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     285C 8800     
0081 285E 131E  14         jeq   sdexit                ; Yes. exit
0082 2860 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2862 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2864 8336     
0084 2866 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2868 8800     
     286A 8400     
0085 286C 0604  14         dec   tmp0
0086 286E 16FB  14         jne   vdpla2
0087 2870 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2872 8800     
     2874 831B     
0088 2876 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2878 8336     
0089 287A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 287C C120  30 mmplay  mov   @wsdtmp,tmp0
     287E 8336     
0094 2880 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2882 130C  14         jeq   sdexit                ; Yes, exit
0096 2884 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2886 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2888 8336     
0098 288A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     288C 8400     
0099 288E 0605  14         dec   tmp1
0100 2890 16FC  14         jne   mmpla2
0101 2892 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2894 831B     
0102 2896 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2898 8336     
0103 289A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 289C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     289E 2004     
0108 28A0 1607  14         jne   sdexi2                ; No, exit
0109 28A2 C820  42         mov   @wsdlst,@wsdtmp
     28A4 8334     
     28A6 8336     
0110 28A8 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28AA 2012     
     28AC 831B     
0111 28AE 045B  20 sdexi1  b     *r11                  ; Exit
0112 28B0 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28B2 FFF8     
0113 28B4 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28B6 0649  14         dect  stack
0038 28B8 C64B  30         mov   r11,*stack            ; Push return address
0039 28BA 0649  14         dect  stack
0040 28BC C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28BE 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28C0 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28C2 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28C4 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28C6 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28C8 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28CA 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28CC E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28CE 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28D0 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28D2 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28D4 2912     
     28D6 83C6     
0074 28D8 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28DA 2914     
     28DC 83FA     
0075 28DE C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28E0 2916     
     28E2 83FE     
0076               
0077 28E4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28E6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28E8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28EA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28EC 83E0     
0084               
0085 28EE 06A0  28         bl    @kscan                ; Call KSCAN
     28F0 000E     
0086 28F2 02E0  18         lwpi  ws1                   ; Activate user workspace
     28F4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28F6 D120  30         movb  @>837c,tmp0           ; Get flag
     28F8 837C     
0091 28FA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28FC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28FE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     2900 8375     
0097 2902 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2904 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2906 A028     
0103 2908 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     290A 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 290C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 290E C2F9  30         mov   *stack+,r11           ; Pop r11
0110 2910 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2912 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2914 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2916 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2918 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 291A C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     291C 8340     
0025 291E 04E0  26         clr   @waux1
     2920 833C     
0026 2922 04E0  26         clr   @waux2
     2924 833E     
0027 2926 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2928 833C     
0028 292A C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 292C 0205  20         li    tmp1,4                ; 4 nibbles
     292E 0004     
0033 2930 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2932 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2934 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2936 0286  22         ci    tmp2,>000a
     2938 000A     
0039 293A 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 293C C21B  26         mov   *r11,tmp4
0045 293E 0988  32         srl   tmp4,8                ; Right justify
0046 2940 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2942 FFF6     
0047 2944 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2946 C21B  26         mov   *r11,tmp4
0054 2948 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     294A 00FF     
0055               
0056 294C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 294E 06C6  14         swpb  tmp2
0058 2950 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2952 0944  24         srl   tmp0,4                ; Next nibble
0060 2954 0605  14         dec   tmp1
0061 2956 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2958 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     295A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 295C C160  30         mov   @waux3,tmp1           ; Get pointer
     295E 8340     
0067 2960 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2962 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2964 C120  30         mov   @waux2,tmp0
     2966 833E     
0070 2968 06C4  14         swpb  tmp0
0071 296A DD44  32         movb  tmp0,*tmp1+
0072 296C 06C4  14         swpb  tmp0
0073 296E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2970 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2972 8340     
0078 2974 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2976 2016     
0079 2978 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 297A C120  30         mov   @waux1,tmp0
     297C 833C     
0084 297E 06C4  14         swpb  tmp0
0085 2980 DD44  32         movb  tmp0,*tmp1+
0086 2982 06C4  14         swpb  tmp0
0087 2984 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2986 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2988 2020     
0092 298A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 298C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 298E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2990 7FFF     
0098 2992 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2994 8340     
0099 2996 0460  28         b     @xutst0               ; Display string
     2998 2420     
0100 299A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 299C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     299E 832A     
0122 29A0 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29A2 8000     
0123 29A4 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29A6 0207  20 mknum   li    tmp3,5                ; Digit counter
     29A8 0005     
0020 29AA C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29AC C155  26         mov   *tmp1,tmp1            ; /
0022 29AE C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29B0 0228  22         ai    tmp4,4                ; Get end of buffer
     29B2 0004     
0024 29B4 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29B6 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29B8 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29BA 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29BC 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29BE B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29C0 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29C2 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29C4 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29C6 0607  14         dec   tmp3                  ; Decrease counter
0036 29C8 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29CA 0207  20         li    tmp3,4                ; Check first 4 digits
     29CC 0004     
0041 29CE 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29D0 C11B  26         mov   *r11,tmp0
0043 29D2 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29D4 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29D6 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29D8 05CB  14 mknum3  inct  r11
0047 29DA 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29DC 2020     
0048 29DE 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29E0 045B  20         b     *r11                  ; Exit
0050 29E2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29E4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29E6 13F8  14         jeq   mknum3                ; Yes, exit
0053 29E8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29EA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29EC 7FFF     
0058 29EE C10B  18         mov   r11,tmp0
0059 29F0 0224  22         ai    tmp0,-4
     29F2 FFFC     
0060 29F4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29F6 0206  20         li    tmp2,>0500            ; String length = 5
     29F8 0500     
0062 29FA 0460  28         b     @xutstr               ; Display string
     29FC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29FE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A00 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A02 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A04 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A06 0207  20         li    tmp3,5                ; Set counter
     2A08 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A0A 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A0C 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A0E 0584  14         inc   tmp0                  ; Next character
0106 2A10 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A12 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A14 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A16 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A18 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A1A 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A1C DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A1E 0607  14         dec   tmp3                  ; Last character ?
0122 2A20 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A22 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A24 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A26 832A     
0141 2A28 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A2A 8000     
0142 2A2C 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A2E 0649  14         dect  stack
0023 2A30 C64B  30         mov   r11,*stack            ; Save return address
0024 2A32 0649  14         dect  stack
0025 2A34 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A36 0649  14         dect  stack
0027 2A38 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A3A 0649  14         dect  stack
0029 2A3C C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A3E 0649  14         dect  stack
0031 2A40 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A42 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A44 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A46 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A48 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A4A 0649  14         dect  stack
0044 2A4C C64B  30         mov   r11,*stack            ; Save return address
0045 2A4E 0649  14         dect  stack
0046 2A50 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A52 0649  14         dect  stack
0048 2A54 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A56 0649  14         dect  stack
0050 2A58 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A5A 0649  14         dect  stack
0052 2A5C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A5E C1D4  26 !       mov   *tmp0,tmp3
0057 2A60 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A62 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A64 00FF     
0059 2A66 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A68 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A6A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A6C 0584  14         inc   tmp0                  ; Next byte
0067 2A6E 0607  14         dec   tmp3                  ; Shorten string length
0068 2A70 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A72 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A74 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A76 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A78 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A7A C187  18         mov   tmp3,tmp2
0078 2A7C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A7E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A80 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A82 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A84 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A86 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A88 FFCE     
0090 2A8A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A8C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A8E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A90 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A92 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A94 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A96 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A98 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A9A 0649  14         dect  stack
0124 2A9C C64B  30         mov   r11,*stack            ; Save return address
0125 2A9E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AA0 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AA2 0649  14         dect  stack
0128 2AA4 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AA6 0649  14         dect  stack
0130 2AA8 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AAA 0649  14         dect  stack
0132 2AAC C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AAE C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2AB0 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AB2 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AB4 0649  14         dect  stack
0144 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0145 2AB8 0649  14         dect  stack
0146 2ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ABC 0649  14         dect  stack
0148 2ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2AC0 0649  14         dect  stack
0150 2AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AC4 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AC6 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AC8 0586  14         inc   tmp2
0161 2ACA 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ACC 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ACE 0286  22         ci    tmp2,255
     2AD0 00FF     
0167 2AD2 1505  14         jgt   string.getlenc.panic
0168 2AD4 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AD6 0606  14         dec   tmp2                  ; One time adjustment
0174 2AD8 C806  30         mov   tmp2,@waux1           ; Store length
     2ADA 833C     
0175 2ADC 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2ADE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AE0 FFCE     
0181 2AE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AE4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AE6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AE8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AEC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AEE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AF0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2AF2 F000     
0024 2AF4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AF6 F002     
0025 2AF8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AFA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AFC 0200  20         li    r0,>8306              ; Scratchpad source address
     2AFE 8306     
0030 2B00 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B02 F006     
0031 2B04 0202  20         li    r2,62                 ; Loop counter
     2B06 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B08 CC70  46         mov   *r0+,*r1+
0037 2B0A CC70  46         mov   *r0+,*r1+
0038 2B0C 0642  14         dect  r2
0039 2B0E 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B10 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B12 83FE     
     2B14 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B16 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B18 F000     
0046 2B1A C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B1C F002     
0047 2B1E C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B20 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B22 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B24 0200  20         li    r0,cpu.scrpad.tgt
     2B26 F000     
0075 2B28 0201  20         li    r1,>8300
     2B2A 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B2C CC70  46         mov   *r0+,*r1+
0081 2B2E CC70  46         mov   *r0+,*r1+
0082 2B30 0281  22         ci    r1,>8400
     2B32 8400     
0083 2B34 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B36 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B38 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B3A CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B3C CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B3E CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B40 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B42 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B44 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B46 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B48 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B4A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B4C 8310     
0055                                                   ;        as of register r8
0056 2B4E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B50 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B52 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B5C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B62 0606  14         dec   tmp2
0069 2B64 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B66 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B68 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B6A 2B70     
0075                                                   ; R14=PC
0076 2B6C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B6E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B70 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B72 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B74 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B76 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B78 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B7A 8300     
0126 2B7C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B7E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B80 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B82 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B84 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B86 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B88 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B8A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B8C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B8E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B90 0606  14         dec   tmp2
0139 2B92 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B94 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B96 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B98 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B9A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B9C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B9E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BA0 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BA2 A428     
0064 2BA4 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BA6 201C     
0065 2BA8 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BAA 8356     
0066 2BAC C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BAE 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BB0 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BB2 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BB4 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BB6 06C0  14         swpb  r0                    ;
0075 2BB8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BBA 8C02     
0076 2BBC 06C0  14         swpb  r0                    ;
0077 2BBE D800  30         movb  r0,@vdpa              ; Send high byte
     2BC0 8C02     
0078 2BC2 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BC4 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BC6 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BC8 0704  14         seto  r4                    ; Init counter
0086 2BCA 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BCC A420     
0087 2BCE 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BD0 0584  14         inc   r4                    ; Increment char counter
0089 2BD2 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BD4 0007     
0090 2BD6 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BD8 80C4  18         c     r4,r3                 ; End of name?
0093 2BDA 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BDC 06C0  14         swpb  r0                    ;
0098 2BDE D800  30         movb  r0,@vdpa              ; Send low byte
     2BE0 8C02     
0099 2BE2 06C0  14         swpb  r0                    ;
0100 2BE4 D800  30         movb  r0,@vdpa              ; Send high byte
     2BE6 8C02     
0101 2BE8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BEA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BEC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BEE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BF0 2D0A     
0109 2BF2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BF4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BF6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BF8 04E0  26         clr   @>83d0
     2BFA 83D0     
0118 2BFC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BFE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C00 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C02 A432     
0121               
0122 2C04 0584  14         inc   r4                    ; Adjust for dot
0123 2C06 A804  30         a     r4,@>8356             ; Point to position after name
     2C08 8356     
0124 2C0A C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C0C 8356     
     2C0E A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C10 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C12 83E0     
0130 2C14 04C1  14         clr   r1                    ; Version found of dsr
0131 2C16 020C  20         li    r12,>0f00             ; Init cru address
     2C18 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C1A C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C1C 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C1E 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C20 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C22 0100     
0145 2C24 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C26 83D0     
0146 2C28 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C2A 2000     
0147 2C2C 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C2E C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C30 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C32 1D00  16         sbo   0                     ; Turn on ROM
0154 2C34 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C36 4000     
0155 2C38 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C3A 2D06     
0156 2C3C 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C3E A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C40 A40A     
0166 2C42 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C44 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C46 83D2     
0172                                                   ; subprogram
0173               
0174 2C48 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C4A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C4C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C4E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C50 83D2     
0183                                                   ; subprogram
0184               
0185 2C52 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C54 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C56 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C58 D160  30         movb  @>8355,r5             ; Get length as counter
     2C5A 8355     
0195 2C5C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C5E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C60 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C62 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C64 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C66 A420     
0206 2C68 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C6A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C6C 0605  14         dec   r5                    ; Update loop counter
0211 2C6E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C70 0581  14         inc   r1                    ; Next version found
0217 2C72 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C74 A42A     
0218 2C76 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C78 A42C     
0219 2C7A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C7C A430     
0220               
0221 2C7E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C80 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C82 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C84 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C86 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C88 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C8A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C8C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C8E A400     
0236 2C90 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C92 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C94 A428     
0242                                                   ; (8 or >a)
0243 2C96 0281  26         ci    r1,8                  ; was it 8?
     2C98 0008     
0244 2C9A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C9C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C9E 8350     
0246                                                   ; Get error byte from @>8350
0247 2CA0 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CA2 06C0  22         swpb  r0                    ;
0255 2CA4 D800  34         movb  r0,@vdpa              ; send low byte
     2CA6 8C02     
0256 2CA8 06C0  22         swpb  r0                    ;
0257 2CAA D800  34         movb  r0,@vdpa              ; send high byte
     2CAC 8C02     
0258 2CAE D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CB0 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CB2 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CB4 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CB6 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CB8 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CBA 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CBC A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CBE 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CC0 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CC2 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CC4 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CC6 201C     
0284                                                   ; / to indicate error
0285 2CC8 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CCA A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CCC 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CCE 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CD0 83E0     
0319               
0320 2CD2 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CD4 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CD6 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CD8 A42A     
0325 2CDA C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CDC C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CDE C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CE0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CE2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CE4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CE6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CE8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CEA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CEC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CEE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CF0 4000     
     2CF2 2D06     
0340 2CF4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CF6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CF8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CFA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CFC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CFE A400     
0358 2D00 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D02 A434     
0359               
0360 2D04 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D06 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D08 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D0A 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D0E C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D10 0649  22         dect  stack
0053 2D12 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D14 0204  24         li    tmp0,dsrlnk.savcru
     2D16 A42A     
0058 2D18 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D1A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D1C 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D1E 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D20 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D22 37D7     
0066 2D24 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D26 8370     
0067                                                   ; / location
0068 2D28 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D2A A44C     
0069 2D2C 04C5  22         clr   tmp1                  ; io.op.open
0070 2D2E 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D30 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D32 0649  22         dect  stack
0098 2D34 C64B  38         mov   r11,*stack            ; Save return address
0099 2D36 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D38 0001     
0100 2D3A 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D3C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D3E 0649  22         dect  stack
0126 2D40 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D42 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D44 0002     
0129 2D46 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D48 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D4A 0649  22         dect  stack
0156 2D4C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D4E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D50 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D52 0005     
0160               
0161 2D54 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D56 A43E     
0162               
0163 2D58 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D5A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D5C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D5E 0003     
0168 2D60 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D62 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D64 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D66 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D68 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D6A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D6C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D6E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D70 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D72 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D74 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D76 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D78 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D7A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D7C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D7E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D80 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D82 A44C     
0246               
0247 2D84 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D86 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D88 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D8A 0009     
0254 2D8C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D8E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D90 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D92 8322     
     2D94 833C     
0259               
0260 2D96 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D98 A42A     
0261 2D9A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D9C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D9E 2B9A     
0268 2DA0 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DA2 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DA4 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DA6 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DA8 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DAA C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DAC 833C     
     2DAE 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DB0 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DB2 A436     
0292 2DB4 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DB6 0005     
0293 2DB8 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DBA 22E4     
0294 2DBC C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DBE C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DC4 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DC6 0649  22         dect  stack
0038 2DC8 C64B  38         mov   r11,*stack            ; Save return address
0039 2DCA 0649  22         dect  stack
0040 2DCC C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DCE C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DD0 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DD2 0014     
0046               fg99.send.loop:
0047 2DD4 04E0  34         clr   @>6000                ; Signal new byte
     2DD6 6000     
0048 2DD8 0201  24         li    r1,>0038              ; >7000 >> 9
     2DDA 0038     
0049 2DDC D070  44         movb  *r0+,r1
0050 2DDE 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DE0 04D1  30         clr   *r1                   ; Send byte
0053 2DE2 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DE4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2DE6 04E0  34         clr   @>6000                ; Done sending filename
     2DE8 6000     
0057 2DEA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2DEC 0200  24         li    r0,>6000              ; check >6000->6200
     2DEE 6000     
0063 2DF0 0202  24         li    r2,>100
     2DF2 0100     
0064 2DF4 C070  46 !       mov   *r0+, r1
0065 2DF6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2DF8 0602  22         dec   r2
0067 2DFA 16FC  14         jne   -!
0068 2DFC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2DFE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E00 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E02 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E04 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E06 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E08 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E0A 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E0C 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E0E 201C     
0029 2E10 1602  14         jne   tmgr1a                ; No, so move on
0030 2E12 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E14 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E16 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E18 2020     
0035 2E1A 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E1C 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E1E 2010     
0048 2E20 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E22 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E24 200E     
0050 2E26 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E28 0460  28         b     @kthread              ; Run kernel thread
     2E2A 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E2C 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E2E 2014     
0056 2E30 13EB  14         jeq   tmgr1
0057 2E32 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E34 2012     
0058 2E36 16E8  14         jne   tmgr1
0059 2E38 C120  38         mov   @wtiusr,tmp0
     2E3A 832E     
0060 2E3C 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E3E 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E40 2EA0     
0065 2E42 C10A  30         mov   r10,tmp0
0066 2E44 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E46 00FF     
0067 2E48 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E4A 201C     
0068 2E4C 1303  14         jeq   tmgr5
0069 2E4E 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E50 003C     
0070 2E52 1002  14         jmp   tmgr6
0071 2E54 0284  26 tmgr5   ci    tmp0,50
     2E56 0032     
0072 2E58 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E5A 1001  14         jmp   tmgr8
0074 2E5C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E5E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E60 832C     
0079 2E62 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E64 FF00     
0080 2E66 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E68 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E6A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E6C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E6E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E70 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E72 830C     
     2E74 830D     
0089 2E76 1608  14         jne   tmgr10                ; No, get next slot
0090 2E78 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E7A FF00     
0091 2E7C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E7E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E80 8330     
0096 2E82 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E84 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E86 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E88 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E8A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E8C 8315     
     2E8E 8314     
0103 2E90 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E92 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E94 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E96 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E98 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E9A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E9C FF00     
0109 2E9E 10B4  14         jmp   tmgr1
0110 2EA0 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EA2 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EA4 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EA6 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EA8 2006     
0023 2EAA 1602  14         jne   kthread_kb
0024 2EAC 06A0  36         bl    @sdpla1               ; Run sound player
     2EAE 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2EB0 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2EB2 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2EB4 0460  28         b     @tmgr3                ; Exit
     2EB6 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2EB8 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2EBA 832E     
0018 2EBC E0A0  42         soc   @wbit7,config         ; Enable user hook
     2EBE 2012     
0019 2EC0 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EC2 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EC4 832E     
0029 2EC6 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EC8 FEFF     
0030 2ECA 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2ECC C13B  46 mkslot  mov   *r11+,tmp0
0018 2ECE C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2ED0 C184  30         mov   tmp0,tmp2
0023 2ED2 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2ED4 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2ED6 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2ED8 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EDA 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EDC C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EDE 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EE0 2022     
0035 2EE2 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EE4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EE6 05CB  22 mkslo1  inct  r11
0041 2EE8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EEA C13B  46 clslot  mov   *r11+,tmp0
0053 2EEC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EEE A120  38         a     @wtitab,tmp0          ; Add table base
     2EF0 832C     
0055 2EF2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EF4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EF6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EF8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EFA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2EFC A120  38         a     @wtitab,tmp0          ; Add table base
     2EFE 832C     
0071 2F00 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F02 C154  38         mov   *tmp0,tmp1
0073 2F04 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F06 FF00     
0074 2F08 C505  38         mov   tmp1,*tmp0
0075 2F0A 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 2F0C 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F0E 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 2F10 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F12 0000     
0283 2F14 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F16 8300     
0284 2F18 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F1A 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 2F1C 0202  20 runli2  li    r2,>8308
     2F1E 8308     
0289 2F20 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 2F22 0282  22         ci    r2,>8400
     2F24 8400     
0291 2F26 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 2F28 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F2A FFFF     
0296 2F2C 1602  14         jne   runli4                ; No, continue
0297 2F2E 0420  42         blwp  @0                    ; Yes, bye bye
     2F30 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 2F32 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F34 833C     
0302 2F36 04C1  14         clr   r1                    ; Reset counter
0303 2F38 0202  20         li    r2,10                 ; We test 10 times
     2F3A 000A     
0304 2F3C C0E0  30 runli5  mov   @vdps,r3
     2F3E 8802     
0305 2F40 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F42 2020     
0306 2F44 1302  14         jeq   runli6
0307 2F46 0581  14         inc   r1                    ; Increase counter
0308 2F48 10F9  14         jmp   runli5
0309 2F4A 0602  14 runli6  dec   r2                    ; Next test
0310 2F4C 16F7  14         jne   runli5
0311 2F4E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F50 1250     
0312 2F52 1202  14         jle   runli7                ; No, so it must be NTSC
0313 2F54 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F56 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 2F58 06A0  32 runli7  bl    @loadmc
     2F5A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 2F5C 04C1  14 runli9  clr   r1
0322 2F5E 04C2  14         clr   r2
0323 2F60 04C3  14         clr   r3
0324 2F62 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F64 A900     
0325 2F66 020F  20         li    r15,vdpw              ; Set VDP write address
     2F68 8C00     
0327 2F6A 06A0  32         bl    @mute                 ; Mute sound generators
     2F6C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 2F6E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F70 4A4A     
0334 2F72 1605  14         jne   runlia
0335 2F74 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F76 228E     
0336 2F78 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F7A 0000     
     2F7C 3000     
0341 2F7E 06A0  32 runlia  bl    @filv
     2F80 228E     
0342 2F82 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F84 00F4     
     2F86 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0349 2F88 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F8A 272A     
0350 2F8C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F8E 2754     
0351 2F90 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F92 2754     
0352 2F94 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F96 2754     
0353 2F98 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F9A 2740     
0354               
0355 2F9C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F9E 2332     
0356 2FA0 3201                   data >3201            ; F18a VR50 (>32), bit 1
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 2FA2 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2FA4 22F8     
<<<<<<< HEAD
0370 2FA6 7F60             data  spvmod                ; Equate selected video mode table
0371 2FA8 0204  20         li    tmp0,spfont           ; Get font option
     2FAA 0000     
=======
0370 2FA6 385A             data  spvmod                ; Equate selected video mode table
0371 2FA8 0204  20         li    tmp0,spfont           ; Get font option
     2FAA 000C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0372 2FAC 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 2FAE 1304  14         jeq   runlid                ; Yes, skip it
0374 2FB0 06A0  32         bl    @ldfnt
     2FB2 2360     
0375 2FB4 1100             data  fntadr,spfont         ; Load specified font
<<<<<<< HEAD
     2FB6 0000     
=======
     2FB6 000C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 2FB8 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FBA 4A4A     
0380 2FBC 1602  14         jne   runlie                ; No, continue
0381 2FBE 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FC0 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 2FC2 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FC4 0040     
0386 2FC6 0460  28         b     @main                 ; Give control to main program
     2FC8 6046     
                   < stevie_b1.asm
0053                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
<<<<<<< HEAD
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 2FCA 0649  14         dect  stack
0029 2FCC C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FCE 0649  14         dect  stack
0031 2FD0 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FD2 0649  14         dect  stack
0033 2FD4 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FD6 0649  14         dect  stack
0035 2FD8 C647  30         mov   tmp3,*stack           ; Push tmp3
=======
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2FCA C13B  30         mov   *r11+,tmp0            ; P0
0022 2FCC C17B  30         mov   *r11+,tmp1            ; P1
0023 2FCE C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2FD0 0649  14         dect  stack
0029 2FD2 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FD4 0649  14         dect  stack
0031 2FD6 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FD8 0649  14         dect  stack
0033 2FDA C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FDC 0649  14         dect  stack
0035 2FDE C647  30         mov   tmp3,*stack           ; Push tmp3
>>>>>>> b9b40bb (WIP optimize build scripts)
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
<<<<<<< HEAD
0039 2FDA C13B  30         mov   *r11+,tmp0            ; P0
0040 2FDC C17B  30         mov   *r11+,tmp1            ; P1
0041 2FDE C1BB  30         mov   *r11+,tmp2            ; P2
0042 2FE0 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 2FE2 0649  14         dect  stack
0048 2FE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 2FE6 0649  14         dect  stack
0050 2FE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 2FEA 0649  14         dect  stack
0052 2FEC C646  30         mov   tmp2,*stack           ; Push tmp2
0053 2FEE 0649  14         dect  stack
0054 2FF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 2FF2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FF4 6000     
0060 2FF6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 2FF8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FFA A228     
0064 2FFC 0647  14         dect  tmp3
0065 2FFE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 3000 0647  14         dect  tmp3
0067 3002 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 3004 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3006 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3008 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 300A 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 300C 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 300E 0224  22         ai    tmp0,>0800
     3010 0800     
0086 3012 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 3014 0285  22         ci    tmp1,>ffff
     3016 FFFF     
0095 3018 1602  14         jne   !
0096 301A C160  34         mov   @trmpvector,tmp1
     301C A034     
=======
0039 2FE0 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FE2 6000     
0040 2FE4 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2FE6 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FE8 A226     
0044 2FEA 0647  14         dect  tmp3
0045 2FEC C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2FEE 0647  14         dect  tmp3
0047 2FF0 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2FF2 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2FF4 A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2FF6 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2FF8 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2FFA 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2FFC 0224  22         ai    tmp0,>0800
     2FFE 0800     
0066 3000 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 3002 0285  22         ci    tmp1,>ffff
     3004 FFFF     
0075 3006 1602  14         jne   !
0076 3008 C160  34         mov   @trmpvector,tmp1
     300A A034     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 300C C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 300E 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 3010 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 3012 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3014 FFCE     
0091 3016 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3018 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 301A 0694  24         bl    *tmp0                 ; Call function
>>>>>>> b9b40bb (WIP optimize build scripts)
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
<<<<<<< HEAD
0100 301E C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 3020 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 3022 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 3024 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3026 FFCE     
0111 3028 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     302A 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 302C 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 302E C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     3030 A228     
0122 3032 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 3034 1312  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 3036 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 3038 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 303A 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134 303C 028B  22         ci    r11,>6000
     303E 6000     
0135 3040 110C  14         jlt   rom.farjump.bankswitch.failed2
0136 3042 028B  22         ci    r11,>7fff
     3044 7FFF     
0137 3046 1509  14         jgt   rom.farjump.bankswitch.failed2
0138               
0139 3048 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     304A A228     
0140               
0144               
0145                       ;------------------------------------------------------
0146                       ; Bankswitch to source 8K ROM bank
0147                       ;------------------------------------------------------
0148               rom.farjump.bankswitch.src.rom8k:
0149 304C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0150 304E 1009  14         jmp   rom.farjump.exit
0151                       ;------------------------------------------------------
0152                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0153                       ;------------------------------------------------------
0154               rom.farjump.bankswitch.src.advfg99:
0155 3050 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0156 3052 0225  22         ai    tmp1,>0800
     3054 0800     
0157 3056 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0158 3058 1004  14         jmp   rom.farjump.exit
0159                       ;------------------------------------------------------
0160                       ; Assert 2 failed after bank-switch
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.failed2:
0163 305A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     305C FFCE     
0164 305E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3060 2026     
0165                       ;-------------------------------------------------------
0166                       ; Exit
0167                       ;-------------------------------------------------------
0168               rom.farjump.exit:
0169 3062 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0170 3064 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0171 3066 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0172 3068 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0173                       ;
0174                       ; Attention!
0175                       ; r11 was popped from farjump stack, not from value stack!
0176                       ; See rom.farjump.return
0177                       ;
0178 306A 045B  20         b     *r11                  ; Return to caller
=======
0100               rom.farjump.return:
0101 301C C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     301E A226     
0102 3020 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 3022 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 3024 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 3026 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 3028 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 302A 028B  22         ci    r11,>6000
     302C 6000     
0115 302E 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 3030 028B  22         ci    r11,>7fff
     3032 7FFF     
0117 3034 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 3036 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3038 A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 303A 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 303C 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 303E 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 3040 0225  22         ai    tmp1,>0800
     3042 0800     
0137 3044 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 3046 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 3048 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     304A FFCE     
0144 304C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     304E 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 3050 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 3052 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 3054 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 3056 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 3058 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
<<<<<<< HEAD
0020 306C 0649  14         dect  stack
0021 306E C64B  30         mov   r11,*stack            ; Save return address
0022 3070 0649  14         dect  stack
0023 3072 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3074 0649  14         dect  stack
0025 3076 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3078 0204  20         li    tmp0,fb.top
     307A D000     
0030 307C C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     307E A300     
0031 3080 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3082 A304     
0032 3084 04E0  34         clr   @fb.row               ; Current row=0
     3086 A306     
0033 3088 04E0  34         clr   @fb.column            ; Current column=0
     308A A30C     
0034               
0035 308C 0204  20         li    tmp0,colrow
     308E 0050     
0036 3090 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3092 A30E     
0037 3094 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3096 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3098 C160  34         mov   @tv.ruler.visible,tmp1
     309A A210     
0042 309C 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 309E 0204  20         li    tmp0,pane.botrow-2
     30A0 0015     
0044 30A2 1002  14         jmp   fb.init.cont
0045 30A4 0204  20 !       li    tmp0,pane.botrow-1
     30A6 0016     
=======
0020 305A 0649  14         dect  stack
0021 305C C64B  30         mov   r11,*stack            ; Save return address
0022 305E 0649  14         dect  stack
0023 3060 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3062 0649  14         dect  stack
0025 3064 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3066 0204  20         li    tmp0,fb.top
     3068 D000     
0030 306A C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     306C A300     
0031 306E 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3070 A304     
0032 3072 04E0  34         clr   @fb.row               ; Current row=0
     3074 A306     
0033 3076 04E0  34         clr   @fb.column            ; Current column=0
     3078 A30C     
0034               
0035 307A 0204  20         li    tmp0,colrow
     307C 0050     
0036 307E C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3080 A30E     
0037 3082 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3084 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3086 C160  34         mov   @tv.ruler.visible,tmp1
     3088 A210     
0042 308A 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 308C 0204  20         li    tmp0,pane.botrow-2
     308E 001B     
0044 3090 1002  14         jmp   fb.init.cont
0045 3092 0204  20 !       li    tmp0,pane.botrow-1
     3094 001C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
<<<<<<< HEAD
0050 30A8 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     30AA A31C     
0051 30AC C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     30AE A31E     
0052               
0053 30B0 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30B2 A224     
0054 30B4 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30B6 A312     
0055 30B8 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30BA A318     
0056 30BC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30BE A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 30C0 06A0  32         bl    @film
     30C2 2236     
0061 30C4 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30C6 0000     
     30C8 0F00     
=======
0050 3096 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     3098 A31C     
0051 309A C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     309C A31E     
0052               
0053 309E 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30A0 A222     
0054 30A2 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30A4 A312     
0055 30A6 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30A8 A318     
0056 30AA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30AC A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 30AE 06A0  32         bl    @film
     30B0 2236     
0061 30B2 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30B4 0000     
     30B6 0960     
>>>>>>> b9b40bb (WIP optimize build scripts)
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
<<<<<<< HEAD
0066 30CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 30CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 30CE C2F9  30         mov   *stack+,r11           ; Pop r11
0069 30D0 045B  20         b     *r11                  ; Return to caller
=======
0066 30B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 30BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 30BC C2F9  30         mov   *stack+,r11           ; Pop r11
0069 30BE 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0009                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
<<<<<<< HEAD
0024 30D2 0649  14         dect  stack
0025 30D4 C64B  30         mov   r11,*stack            ; Save return address
0026 30D6 0649  14         dect  stack
0027 30D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30DA C120  34         mov   @parm1,tmp0
     30DC A006     
0032 30DE A120  34         a     @fb.topline,tmp0
     30E0 A304     
0033 30E2 C804  38         mov   tmp0,@outparm1
     30E4 A018     
=======
0024 30C0 0649  14         dect  stack
0025 30C2 C64B  30         mov   r11,*stack            ; Save return address
0026 30C4 0649  14         dect  stack
0027 30C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30C8 C120  34         mov   @parm1,tmp0
     30CA A006     
0032 30CC A120  34         a     @fb.topline,tmp0
     30CE A304     
0033 30D0 C804  38         mov   tmp0,@outparm1
     30D2 A018     
>>>>>>> b9b40bb (WIP optimize build scripts)
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
<<<<<<< HEAD
0038 30E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30E8 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30EA 045B  20         b     *r11                  ; Return to caller
=======
0038 30D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30D8 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 30DA 0649  14         dect  stack
0069 30DC C64B  30         mov   r11,*stack            ; Save return address
0070 30DE 0649  14         dect  stack
0071 30E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0072 30E2 0649  14         dect  stack
0073 30E4 C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 30E6 C120  34         mov   @fb.row,tmp0
     30E8 A306     
0078 30EA 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30EC A30E     
0079 30EE A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     30F0 A30C     
0080 30F2 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     30F4 A300     
0081 30F6 C805  38         mov   tmp1,@fb.current
     30F8 A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 30FA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 30FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 30FE C2F9  30         mov   *stack+,r11           ; Pop r11
0089 3100 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0010                       copy  "fb.calc_pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc_pointer.asm
0001               * FILE......: fb.calc_pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc_pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc_pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc_pointer:
0027 30EC 0649  14         dect  stack
0028 30EE C64B  30         mov   r11,*stack            ; Save return address
0029 30F0 0649  14         dect  stack
0030 30F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 30F4 0649  14         dect  stack
0032 30F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 30F8 C120  34         mov   @fb.row,tmp0
     30FA A306     
0037 30FC 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30FE A30E     
0038 3100 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     3102 A30C     
0039 3104 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3106 A300     
0040 3108 C805  38         mov   tmp1,@fb.current
     310A A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc_pointer.exit:
0045 310C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 310E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 3110 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3112 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
<<<<<<< HEAD
0051 3114 0649  14         dect  stack
0052 3116 C64B  30         mov   r11,*stack            ; Save return address
0053 3118 0649  14         dect  stack
0054 311A C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 311C 0204  20         li    tmp0,idx.top
     311E B000     
0059 3120 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3122 A502     
0060               
0061 3124 C120  34         mov   @tv.sams.b000,tmp0
     3126 A206     
0062 3128 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     312A A600     
0063 312C C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     312E A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3130 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3132 0004     
0068 3134 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3136 A604     
0069               
0070 3138 06A0  32         bl    @_idx.sams.mapcolumn.on
     313A 3156     
0071                                                   ; Index in continuous memory region
0072               
0073 313C 06A0  32         bl    @film
     313E 2236     
0074 3140 B000                   data idx.top,>00,idx.size * 5
     3142 0000     
     3144 5000     
0075                                                   ; Clear index
0076               
0077 3146 06A0  32         bl    @_idx.sams.mapcolumn.off
     3148 318A     
0078                                                   ; Restore memory window layout
0079               
0080 314A C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     314C A602     
     314E A604     
=======
0051 3102 0649  14         dect  stack
0052 3104 C64B  30         mov   r11,*stack            ; Save return address
0053 3106 0649  14         dect  stack
0054 3108 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 310A 0204  20         li    tmp0,idx.top
     310C B000     
0059 310E C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3110 A502     
0060               
0061 3112 C120  34         mov   @tv.sams.b000,tmp0
     3114 A206     
0062 3116 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     3118 A600     
0063 311A C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     311C A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 311E 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3120 0004     
0068 3122 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3124 A604     
0069               
0070 3126 06A0  32         bl    @_idx.sams.mapcolumn.on
     3128 3144     
0071                                                   ; Index in continuous memory region
0072               
0073 312A 06A0  32         bl    @film
     312C 2236     
0074 312E B000                   data idx.top,>00,idx.size * 5
     3130 0000     
     3132 5000     
0075                                                   ; Clear index
0076               
0077 3134 06A0  32         bl    @_idx.sams.mapcolumn.off
     3136 3178     
0078                                                   ; Restore memory window layout
0079               
0080 3138 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     313A A602     
     313C A604     
>>>>>>> b9b40bb (WIP optimize build scripts)
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
<<<<<<< HEAD
0086 3150 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3152 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3154 045B  20         b     *r11                  ; Return to caller
=======
0086 313E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3140 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3142 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
<<<<<<< HEAD
0101 3156 0649  14         dect  stack
0102 3158 C64B  30         mov   r11,*stack            ; Push return address
0103 315A 0649  14         dect  stack
0104 315C C644  30         mov   tmp0,*stack           ; Push tmp0
0105 315E 0649  14         dect  stack
0106 3160 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3162 0649  14         dect  stack
0108 3164 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3166 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3168 A602     
0113 316A 0205  20         li    tmp1,idx.top
     316C B000     
0114 316E 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3170 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3172 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3174 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3176 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3178 0225  22         ai    tmp1,>1000            ; Next memory region
     317A 1000     
0124 317C 0606  14         dec   tmp2                  ; Update loop counter
0125 317E 15F9  14         jgt   -!                    ; Next iteration
=======
0101 3144 0649  14         dect  stack
0102 3146 C64B  30         mov   r11,*stack            ; Push return address
0103 3148 0649  14         dect  stack
0104 314A C644  30         mov   tmp0,*stack           ; Push tmp0
0105 314C 0649  14         dect  stack
0106 314E C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3150 0649  14         dect  stack
0108 3152 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3154 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3156 A602     
0113 3158 0205  20         li    tmp1,idx.top
     315A B000     
0114 315C 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     315E 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3160 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3162 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3164 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3166 0225  22         ai    tmp1,>1000            ; Next memory region
     3168 1000     
0124 316A 0606  14         dec   tmp2                  ; Update loop counter
0125 316C 15F9  14         jgt   -!                    ; Next iteration
>>>>>>> b9b40bb (WIP optimize build scripts)
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
<<<<<<< HEAD
0130 3180 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3182 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3184 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3186 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3188 045B  20         b     *r11                  ; Return to caller
=======
0130 316E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3170 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3172 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3174 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3176 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
<<<<<<< HEAD
0150 318A 0649  14         dect  stack
0151 318C C64B  30         mov   r11,*stack            ; Push return address
0152 318E 0649  14         dect  stack
0153 3190 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3192 0649  14         dect  stack
0155 3194 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3196 0649  14         dect  stack
0157 3198 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 319A 0649  14         dect  stack
0159 319C C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 319E 0205  20         li    tmp1,idx.top
     31A0 B000     
0164 31A2 0206  20         li    tmp2,5                ; Always 5 pages
     31A4 0005     
0165 31A6 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     31A8 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 31AA C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 31AC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     31AE 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 31B0 0225  22         ai    tmp1,>1000            ; Next memory region
     31B2 1000     
0176 31B4 0606  14         dec   tmp2                  ; Update loop counter
0177 31B6 15F9  14         jgt   -!                    ; Next iteration
=======
0150 3178 0649  14         dect  stack
0151 317A C64B  30         mov   r11,*stack            ; Push return address
0152 317C 0649  14         dect  stack
0153 317E C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3180 0649  14         dect  stack
0155 3182 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3184 0649  14         dect  stack
0157 3186 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3188 0649  14         dect  stack
0159 318A C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 318C 0205  20         li    tmp1,idx.top
     318E B000     
0164 3190 0206  20         li    tmp2,5                ; Always 5 pages
     3192 0005     
0165 3194 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3196 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3198 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 319A 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     319C 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 319E 0225  22         ai    tmp1,>1000            ; Next memory region
     31A0 1000     
0176 31A2 0606  14         dec   tmp2                  ; Update loop counter
0177 31A4 15F9  14         jgt   -!                    ; Next iteration
>>>>>>> b9b40bb (WIP optimize build scripts)
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
<<<<<<< HEAD
0182 31B8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 31BA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 31BC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 31BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 31C0 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 31C2 045B  20         b     *r11                  ; Return to caller
=======
0182 31A6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 31A8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 31AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 31AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 31AE C2F9  30         mov   *stack+,r11           ; Pop return address
0187 31B0 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
<<<<<<< HEAD
0211 31C4 0649  14         dect  stack
0212 31C6 C64B  30         mov   r11,*stack            ; Save return address
0213 31C8 0649  14         dect  stack
0214 31CA C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31CC 0649  14         dect  stack
0216 31CE C645  30         mov   tmp1,*stack           ; Push tmp1
0217 31D0 0649  14         dect  stack
0218 31D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 31D4 C184  18         mov   tmp0,tmp2             ; Line number
0223 31D6 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 31D8 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     31DA 0800     
0225               
0226 31DC 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 31DE 0A16  18         sla   tmp2,1                ; line number * 2
0231 31E0 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     31E2 A018     
0232               
0233 31E4 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31E6 A602     
0234 31E8 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31EA A600     
0235               
0236 31EC 130E  14         jeq   _idx.samspage.get.exit
=======
0211 31B2 0649  14         dect  stack
0212 31B4 C64B  30         mov   r11,*stack            ; Save return address
0213 31B6 0649  14         dect  stack
0214 31B8 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31BA 0649  14         dect  stack
0216 31BC C645  30         mov   tmp1,*stack           ; Push tmp1
0217 31BE 0649  14         dect  stack
0218 31C0 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 31C2 C184  18         mov   tmp0,tmp2             ; Line number
0223 31C4 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 31C6 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     31C8 0800     
0225               
0226 31CA 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 31CC 0A16  18         sla   tmp2,1                ; line number * 2
0231 31CE C806  38         mov   tmp2,@outparm1        ; Offset index entry
     31D0 A018     
0232               
0233 31D2 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31D4 A602     
0234 31D6 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31D8 A600     
0235               
0236 31DA 130E  14         jeq   _idx.samspage.get.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
<<<<<<< HEAD
0241 31EE C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31F0 A600     
0242 31F2 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31F4 A206     
0243 31F6 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31F8 0205  20         li    tmp1,>b000            ; Memory window for index page
     31FA B000     
0246               
0247 31FC 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31FE 2576     
=======
0241 31DC C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31DE A600     
0242 31E0 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31E2 A206     
0243 31E4 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31E6 0205  20         li    tmp1,>b000            ; Memory window for index page
     31E8 B000     
0246               
0247 31EA 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31EC 2576     
>>>>>>> b9b40bb (WIP optimize build scripts)
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
<<<<<<< HEAD
0253 3200 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     3202 A604     
0254 3204 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3206 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     3208 A604     
=======
0253 31EE 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     31F0 A604     
0254 31F2 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 31F4 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     31F6 A604     
>>>>>>> b9b40bb (WIP optimize build scripts)
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
<<<<<<< HEAD
0261 320A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 320C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 320E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 3210 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 3212 045B  20         b     *r11                  ; Return to caller
=======
0261 31F8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 31FA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 31FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 31FE C2F9  30         mov   *stack+,r11           ; Pop r11
0265 3200 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0012                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
<<<<<<< HEAD
0022 3214 0649  14         dect  stack
0023 3216 C64B  30         mov   r11,*stack            ; Save return address
0024 3218 0649  14         dect  stack
0025 321A C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 321C 0204  20         li    tmp0,edb.top          ; \
     321E C000     
0030 3220 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3222 A500     
0031 3224 C804  38         mov   tmp0,@edb.next_free.ptr
     3226 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3228 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     322A A50A     
0035               
0036 322C 0204  20         li    tmp0,1
     322E 0001     
0037 3230 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3232 A504     
0038               
0039 3234 0720  34         seto  @edb.block.m1         ; Reset block start line
     3236 A50E     
0040 3238 0720  34         seto  @edb.block.m2         ; Reset block end line
     323A A510     
0041               
0042 323C 0204  20         li    tmp0,txt.newfile      ; "New file"
     323E 3A68     
0043 3240 C804  38         mov   tmp0,@edb.filename.ptr
     3242 A514     
0044               
0045 3244 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3246 A440     
0046 3248 04E0  34         clr   @fh.kilobytes.prev    ; /
     324A A45C     
0047               
0048 324C 0204  20         li    tmp0,txt.filetype.none
     324E 3BD8     
0049 3250 C804  38         mov   tmp0,@edb.filetype.ptr
     3252 A516     
0050               
0051               edb.init.exit:
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055 3254 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 3256 C2F9  30         mov   *stack+,r11           ; Pop r11
0057 3258 045B  20         b     *r11                  ; Return to caller
=======
0022 3202 0649  14         dect  stack
0023 3204 C64B  30         mov   r11,*stack            ; Save return address
0024 3206 0649  14         dect  stack
0025 3208 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 320A 0204  20         li    tmp0,edb.top          ; \
     320C C000     
0030 320E C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3210 A500     
0031 3212 C804  38         mov   tmp0,@edb.next_free.ptr
     3214 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3216 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     3218 A50A     
0035               
0036 321A 0204  20         li    tmp0,1
     321C 0001     
0037 321E C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3220 A504     
0038               
0039 3222 0720  34         seto  @edb.block.m1         ; Reset block start line
     3224 A50E     
0040 3226 0720  34         seto  @edb.block.m2         ; Reset block end line
     3228 A510     
0041               
0042 322A 0204  20         li    tmp0,txt.newfile      ; "New file"
     322C 3ABC     
0043 322E C804  38         mov   tmp0,@edb.filename.ptr
     3230 A514     
0044               
0045 3232 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3234 A440     
0046 3236 04E0  34         clr   @fh.kilobytes.prev    ; /
     3238 A45C     
0047               
0048 323A 0204  20         li    tmp0,txt.filetype.none
     323C 3C2C     
0049 323E C804  38         mov   tmp0,@edb.filetype.ptr
     3240 A516     
0050               
0051               
0052               edb.init.exit:
0053                       ;------------------------------------------------------
0054                       ; Exit
0055                       ;------------------------------------------------------
0056 3242 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0057 3244 C2F9  30         mov   *stack+,r11           ; Pop r11
0058 3246 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0013                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
<<<<<<< HEAD
0022 325A 0649  14         dect  stack
0023 325C C64B  30         mov   r11,*stack            ; Save return address
0024 325E 0649  14         dect  stack
0025 3260 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3262 0649  14         dect  stack
0027 3264 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3266 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3268 E000     
0032 326A C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     326C A700     
0033               
0034 326E 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3270 A702     
0035 3272 0204  20         li    tmp0,6
     3274 0006     
0036 3276 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3278 A706     
0037 327A C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     327C A708     
0038               
0039 327E 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3280 A718     
0040 3282 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3284 A71A     
0041 3286 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3288 A72C     
0042 328A 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     328C A704     
=======
0022 3248 0649  14         dect  stack
0023 324A C64B  30         mov   r11,*stack            ; Save return address
0024 324C 0649  14         dect  stack
0025 324E C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3250 0649  14         dect  stack
0027 3252 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3254 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3256 E000     
0032 3258 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     325A A700     
0033               
0034 325C 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     325E A702     
0035 3260 0204  20         li    tmp0,6
     3262 0006     
0036 3264 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3266 A706     
0037 3268 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     326A A708     
0038               
0039 326C 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     326E A718     
0040 3270 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3272 A71A     
0041 3274 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3276 A72C     
0042 3278 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     327A A704     
>>>>>>> b9b40bb (WIP optimize build scripts)
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
<<<<<<< HEAD
0046 328E 0204  20         li    tmp0,pane.botrow      ; \
     3290 0017     
0047 3292 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3294 A706     
0048 3296 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3298 833A     
0049 329A C105  18         mov   tmp1,tmp0             ; | Get result
0050 329C 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     329E 1800     
0051 32A0 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     32A2 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 32A4 06A0  32         bl    @film
     32A6 2236     
0056 32A8 E000                   data  cmdb.top,>00,cmdb.size
     32AA 0000     
     32AC 1000     
=======
0046 327C 0204  20         li    tmp0,pane.botrow      ; \
     327E 001D     
0047 3280 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3282 A706     
0048 3284 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3286 833A     
0049 3288 C105  18         mov   tmp1,tmp0             ; | Get result
0050 328A 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     328C 1800     
0051 328E C804  38         mov   tmp0,@cmdb.vdptop     ; /
     3290 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 3292 06A0  32         bl    @film
     3294 2236     
0056 3296 E000                   data  cmdb.top,>00,cmdb.size
     3298 0000     
     329A 1000     
>>>>>>> b9b40bb (WIP optimize build scripts)
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
<<<<<<< HEAD
0062 32AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 32B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 32B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 32B4 045B  20         b     *r11                  ; Return to caller
=======
0062 329C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 329E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 32A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 32A2 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0014                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
<<<<<<< HEAD
0022 32B6 0649  14         dect  stack
0023 32B8 C64B  30         mov   r11,*stack            ; Save return address
0024 32BA 0649  14         dect  stack
0025 32BC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32BE 0649  14         dect  stack
0027 32C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32C2 0649  14         dect  stack
0029 32C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32C6 04E0  34         clr   @tv.error.visible     ; Set to hidden
     32C8 A22A     
0034 32CA 0204  20         li    tmp0,3
     32CC 0003     
0035 32CE C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     32D0 A22C     
0036               
0037 32D2 06A0  32         bl    @film
     32D4 2236     
0038 32D6 A234                   data tv.error.msg,0,160
     32D8 0000     
     32DA 00A0     
=======
0022 32A4 0649  14         dect  stack
0023 32A6 C64B  30         mov   r11,*stack            ; Save return address
0024 32A8 0649  14         dect  stack
0025 32AA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32AC 0649  14         dect  stack
0027 32AE C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32B0 0649  14         dect  stack
0029 32B2 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32B4 04E0  34         clr   @tv.error.visible     ; Set to hidden
     32B6 A228     
0034 32B8 0204  20         li    tmp0,3
     32BA 0003     
0035 32BC C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     32BE A22A     
0036               
0037 32C0 06A0  32         bl    @film
     32C2 2236     
0038 32C4 A232                   data tv.error.msg,0,160
     32C6 0000     
     32C8 00A0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
<<<<<<< HEAD
0043 32DC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 32DE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 32E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 32E2 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 32E4 045B  20         b     *r11                  ; Return to caller
=======
0043 32CA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 32CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 32CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 32D0 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 32D2 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0048               
                   < ram.resident.asm
0015                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
<<<<<<< HEAD
0022 32E6 0649  14         dect  stack
0023 32E8 C64B  30         mov   r11,*stack            ; Save return address
0024 32EA 0649  14         dect  stack
0025 32EC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32EE 0649  14         dect  stack
0027 32F0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32F2 0649  14         dect  stack
0029 32F4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32F6 0204  20         li    tmp0,1                ; \ Set default color scheme
     32F8 0001     
0034 32FA C804  38         mov   tmp0,@tv.colorscheme  ; /
     32FC A212     
0035               
0036 32FE 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3300 A226     
0037 3302 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     3304 200C     
0038               
0039 3306 0204  20         li    tmp0,fj.bottom
     3308 B000     
0040 330A C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     330C A228     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 330E 06A0  32         bl    @cpym2m
     3310 24DA     
0045 3312 3CB0                   data def.printer.fname,tv.printer.fname,7
     3314 DE00     
     3316 0007     
0046               
0047 3318 06A0  32         bl    @cpym2m
     331A 24DA     
0048 331C 3CB7                   data def.clip.fname.a,tv.clip.fname,10
     331E DE50     
     3320 000A     
0049               
0050 3322 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3324 A50C     
=======
0022 32D4 0649  14         dect  stack
0023 32D6 C64B  30         mov   r11,*stack            ; Save return address
0024 32D8 0649  14         dect  stack
0025 32DA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32DC 0649  14         dect  stack
0027 32DE C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32E0 0649  14         dect  stack
0029 32E2 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32E4 0204  20         li    tmp0,1                ; \ Set default color scheme
     32E6 0001     
0034 32E8 C804  38         mov   tmp0,@tv.colorscheme  ; /
     32EA A212     
0035               
0036 32EC 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     32EE A224     
0037 32F0 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     32F2 200C     
0038               
0039 32F4 0204  20         li    tmp0,fj.bottom
     32F6 B000     
0040 32F8 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     32FA A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 32FC 06A0  32         bl    @cpym2m
     32FE 24DA     
0045 3300 3D04                   data def.printer.fname,tv.printer.fname,7
     3302 DE00     
     3304 0007     
0046               
0047 3306 06A0  32         bl    @cpym2m
     3308 24DA     
0048 330A 3D0B                   data def.clip.fname,tv.clip.fname,10
     330C DE50     
     330E 000A     
0049               
0050 3310 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3312 A50C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               tv.init.exit:
<<<<<<< HEAD
0055 3326 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 3328 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 332A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 332C C2F9  30         mov   *stack+,r11           ; Pop R11
0059 332E 045B  20         b     *r11                  ; Return to caller
=======
0055 3314 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 3316 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 3318 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 331A C2F9  30         mov   *stack+,r11           ; Pop R11
0059 331C 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0016                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
<<<<<<< HEAD
0023 3330 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3332 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3334 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3336 2FCA     
0028 3338 600E                   data bank7.rom        ; | i  p0 = bank address
0029 333A 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 333C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
=======
0023 331E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3320 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3322 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3324 2FCA     
0028 3326 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3328 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 332A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
>>>>>>> b9b40bb (WIP optimize build scripts)
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0017                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
<<<<<<< HEAD
0023 333E 0649  14         dect  stack
0024 3340 C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 3342 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     3344 325A     
0029 3346 06A0  32         bl    @edb.init             ; Initialize editor buffer
     3348 3214     
0030 334A 06A0  32         bl    @idx.init             ; Initialize index
     334C 3114     
0031 334E 06A0  32         bl    @fb.init              ; Initialize framebuffer
     3350 306C     
0032 3352 06A0  32         bl    @errpane.init         ; Initialize error pane
     3354 32B6     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 3356 06A0  32         bl    @hchar
     3358 27D2     
0037 335A 0034                   byte 0,52,32,18       ; Remove markers
     335C 2012     
0038 335E 1700                   byte pane.botrow,0,32,51
     3360 2033     
0039 3362 FFFF                   data eol              ; Remove block shortcuts
=======
0023 332C 0649  14         dect  stack
0024 332E C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 3330 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     3332 3248     
0029 3334 06A0  32         bl    @edb.init             ; Initialize editor buffer
     3336 3202     
0030 3338 06A0  32         bl    @idx.init             ; Initialize index
     333A 3102     
0031 333C 06A0  32         bl    @fb.init              ; Initialize framebuffer
     333E 305A     
0032 3340 06A0  32         bl    @errpane.init         ; Initialize error pane
     3342 32A4     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 3344 06A0  32         bl    @hchar
     3346 27D2     
0037 3348 0034                   byte 0,52,32,18       ; Remove markers
     334A 2012     
0038 334C 1D00                   byte pane.botrow,0,32,51
     334E 2033     
0039 3350 FFFF                   data eol              ; Remove block shortcuts
>>>>>>> b9b40bb (WIP optimize build scripts)
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
<<<<<<< HEAD
0044 3364 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3366 045B  20         b     *r11                  ; Return to caller
=======
0044 3352 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3354 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0018                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
<<<<<<< HEAD
0024 3368 0649  14         dect  stack
0025 336A C64B  30         mov   r11,*stack            ; Push return address
0026 336C 0649  14         dect  stack
0027 336E C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3370 0649  14         dect  stack
0029 3372 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3374 0649  14         dect  stack
0031 3376 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3378 0649  14         dect  stack
0033 337A C647  30         mov   tmp3,*stack           ; Push tmp3
0034 337C 0649  14         dect  stack
0035 337E C640  30         mov   r0,*stack             ; Push r0
0036 3380 0649  14         dect  stack
0037 3382 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3384 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3386 A006     
0042 3388 04C5  14         clr   tmp1                  ; Termination character >00
0043 338A 04E0  34         clr   @outparm1             ; Reset output parameters
     338C A018     
0044 338E 04E0  34         clr   @outparm2             ; Reset output parameters
     3390 A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3392 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3394 2AB4     
=======
0024 3356 0649  14         dect  stack
0025 3358 C64B  30         mov   r11,*stack            ; Push return address
0026 335A 0649  14         dect  stack
0027 335C C644  30         mov   tmp0,*stack           ; Push tmp0
0028 335E 0649  14         dect  stack
0029 3360 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3362 0649  14         dect  stack
0031 3364 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3366 0649  14         dect  stack
0033 3368 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 336A 0649  14         dect  stack
0035 336C C640  30         mov   r0,*stack             ; Push r0
0036 336E 0649  14         dect  stack
0037 3370 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 3372 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3374 A006     
0042 3376 04C5  14         clr   tmp1                  ; Termination character >00
0043 3378 04E0  34         clr   @outparm1             ; Reset output parameters
     337A A018     
0044 337C 04E0  34         clr   @outparm2             ; Reset output parameters
     337E A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 3380 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     3382 2AB4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
<<<<<<< HEAD
0055 3396 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3398 833C     
0056 339A 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 339C 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     339E 0005     
0058 33A0 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 33A2 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33A4 A006     
0063               
0064 33A6 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 33A8 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     33AA FFF6     
0066 33AC 0746  18         abs   tmp2                  ; /
0067               
0068 33AE 04C7  14         clr   tmp3                  ; Clear final uint16
=======
0055 3384 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3386 833C     
0056 3388 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 338A 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     338C 0005     
0058 338E 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 3390 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3392 A006     
0063               
0064 3394 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 3396 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     3398 FFF6     
0066 339A 0746  18         abs   tmp2                  ; /
0067               
0068 339C 04C7  14         clr   tmp3                  ; Clear final uint16
>>>>>>> b9b40bb (WIP optimize build scripts)
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
<<<<<<< HEAD
0073 33B0 D174  28         movb  *tmp0+,tmp1           ; Get character
0074 33B2 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 33B4 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 33B6 0285  22         ci    tmp1,32               ; Blank ?
     33B8 0020     
0080 33BA 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 33BC 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     33BE FFD0     
0085 33C0 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 33C2 0285  22         ci    tmp1,9
     33C4 0009     
0087 33C6 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 33C8 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     33CA 33F6     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 33CC 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 33CE A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 33D0 05C6  14         inct  tmp2                  ; Update loop counter
0102 33D2 0286  22         ci    tmp2,8                ; Last digit done?
     33D4 0008     
0103 33D6 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 33D8 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
=======
0073 339E D174  28         movb  *tmp0+,tmp1           ; Get character
0074 33A0 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 33A2 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 33A4 0285  22         ci    tmp1,32               ; Blank ?
     33A6 0020     
0080 33A8 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 33AA 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     33AC FFD0     
0085 33AE 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 33B0 0285  22         ci    tmp1,9
     33B2 0009     
0087 33B4 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 33B6 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     33B8 33E4     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 33BA 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 33BC A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 33BE 05C6  14         inct  tmp2                  ; Update loop counter
0102 33C0 0286  22         ci    tmp2,8                ; Last digit done?
     33C2 0008     
0103 33C4 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 33C6 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
<<<<<<< HEAD
0109 33DA 04E0  34         clr   @outparm1             ; Empty uint16
     33DC A018     
0110 33DE 0720  34         seto  @outparm2             ; Invalid input string
     33E0 A01A     
=======
0109 33C8 04E0  34         clr   @outparm1             ; Empty uint16
     33CA A018     
0110 33CC 0720  34         seto  @outparm2             ; Invalid input string
     33CE A01A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
<<<<<<< HEAD
0115 33E2 C807  38         mov   tmp3,@outparm1
     33E4 A018     
=======
0115 33D0 C807  38         mov   tmp3,@outparm1
     33D2 A018     
>>>>>>> b9b40bb (WIP optimize build scripts)
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
<<<<<<< HEAD
0120 33E6 C079  30         mov   *stack+,r1            ; Pop r1
0121 33E8 C039  30         mov   *stack+,r0            ; Pop r0
0122 33EA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 33EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 33EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 33F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 33F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 33F4 045B  20         b     *r11                  ; Return to caller
=======
0120 33D4 C079  30         mov   *stack+,r1            ; Pop r1
0121 33D6 C039  30         mov   *stack+,r0            ; Pop r0
0122 33D8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 33DA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 33DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 33DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 33E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 33E2 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
<<<<<<< HEAD
0132 33F6 2710             data  10000,1000,100,10,1
     33F8 03E8     
     33FA 0064     
     33FC 000A     
     33FE 0001     
=======
0132 33E4 2710             data  10000,1000,100,10,1
     33E6 03E8     
     33E8 0064     
     33EA 000A     
     33EC 0001     
>>>>>>> b9b40bb (WIP optimize build scripts)
0133               
                   < ram.resident.asm
0019                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
<<<<<<< HEAD
0021 3400 0649  14         dect  stack
0022 3402 C64B  30         mov   r11,*stack            ; Save return address
0023 3404 0649  14         dect  stack
0024 3406 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 3408 06A0  32         bl    @mknum                ; Convert unsigned number to string
     340A 29A6     
0029 340C A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 340E A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 3410 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 3411   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 3412 0204  20         li    tmp0,uint16.unpacked
     3414 A02C     
0035 3416 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3418 04F4  30         clr   *tmp0+                ; Clear string 23
0037 341A 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 341C 06A0  32         bl    @trimnum              ; Trim unsigned number string
     341E 29FE     
0040 3420 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 3422 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 3424 0020                   data 32               ; / i p2  = Padding char to match against
=======
0021 33EE 0649  14         dect  stack
0022 33F0 C64B  30         mov   r11,*stack            ; Save return address
0023 33F2 0649  14         dect  stack
0024 33F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 33F6 06A0  32         bl    @mknum                ; Convert unsigned number to string
     33F8 29A6     
0029 33FA A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 33FC A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 33FE 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 33FF   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 3400 0204  20         li    tmp0,uint16.unpacked
     3402 A02C     
0035 3404 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3406 04F4  30         clr   *tmp0+                ; Clear string 23
0037 3408 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 340A 06A0  32         bl    @trimnum              ; Trim unsigned number string
     340C 29FE     
0040 340E A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 3410 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 3412 0020                   data 32               ; / i p2  = Padding char to match against
>>>>>>> b9b40bb (WIP optimize build scripts)
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
<<<<<<< HEAD
0047 3426 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3428 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 342A 045B  20         b     *r11                  ; Return to caller
=======
0047 3414 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3416 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 3418 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0020                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
<<<<<<< HEAD
0024 342C 0649  14         dect  stack
0025 342E C64B  30         mov   r11,*stack            ; Push return address
0026 3430 0649  14         dect  stack
0027 3432 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3434 0649  14         dect  stack
0029 3436 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3438 0649  14         dect  stack
0031 343A C646  30         mov   tmp2,*stack           ; Push tmp2
0032 343C 0649  14         dect  stack
0033 343E C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3440 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3442 A006     
0038 3444 D194  26         movb  *tmp0,tmp2            ; /
0039 3446 0986  32         srl   tmp2,8                ; Right align
0040 3448 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 344A 8806  34         c     tmp2,@parm2           ; String length > requested length?
     344C A008     
0043 344E 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3450 C120  34         mov   @parm1,tmp0           ; Get source address
     3452 A006     
0048 3454 C160  34         mov   @parm4,tmp1           ; Get destination address
     3456 A00C     
0049 3458 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 345A 0649  14         dect  stack
0052 345C C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 345E 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3460 24E0     
=======
0024 341A 0649  14         dect  stack
0025 341C C64B  30         mov   r11,*stack            ; Push return address
0026 341E 0649  14         dect  stack
0027 3420 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3422 0649  14         dect  stack
0029 3424 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3426 0649  14         dect  stack
0031 3428 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 342A 0649  14         dect  stack
0033 342C C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 342E C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3430 A006     
0038 3432 D194  26         movb  *tmp0,tmp2            ; /
0039 3434 0986  32         srl   tmp2,8                ; Right align
0040 3436 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 3438 8806  34         c     tmp2,@parm2           ; String length > requested length?
     343A A008     
0043 343C 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 343E C120  34         mov   @parm1,tmp0           ; Get source address
     3440 A006     
0048 3442 C160  34         mov   @parm4,tmp1           ; Get destination address
     3444 A00C     
0049 3446 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 3448 0649  14         dect  stack
0052 344A C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 344C 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     344E 24E0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
<<<<<<< HEAD
0059 3462 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3464 C120  34         mov   @parm2,tmp0           ; Get requested length
     3466 A008     
0064 3468 0A84  32         sla   tmp0,8                ; Left align
0065 346A C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     346C A00C     
0066 346E D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3470 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3472 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3474 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3476 A008     
0073 3478 6187  18         s     tmp3,tmp2             ; |
0074 347A 0586  14         inc   tmp2                  ; /
0075               
0076 347C C120  34         mov   @parm3,tmp0           ; Get byte to padd
     347E A00A     
0077 3480 0A84  32         sla   tmp0,8                ; Left align
=======
0059 3450 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3452 C120  34         mov   @parm2,tmp0           ; Get requested length
     3454 A008     
0064 3456 0A84  32         sla   tmp0,8                ; Left align
0065 3458 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     345A A00C     
0066 345C D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 345E A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3460 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3462 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3464 A008     
0073 3466 6187  18         s     tmp3,tmp2             ; |
0074 3468 0586  14         inc   tmp2                  ; /
0075               
0076 346A C120  34         mov   @parm3,tmp0           ; Get byte to padd
     346C A00A     
0077 346E 0A84  32         sla   tmp0,8                ; Left align
>>>>>>> b9b40bb (WIP optimize build scripts)
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
<<<<<<< HEAD
0082 3482 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3484 0606  14         dec   tmp2                  ; Update loop counter
0084 3486 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 3488 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     348A A00C     
     348C A018     
0087 348E 1004  14         jmp   tv.pad.string.exit    ; Exit
=======
0082 3470 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3472 0606  14         dec   tmp2                  ; Update loop counter
0084 3474 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 3476 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3478 A00C     
     347A A018     
0087 347C 1004  14         jmp   tv.pad.string.exit    ; Exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
<<<<<<< HEAD
0092 3490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3492 FFCE     
0093 3494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3496 2026     
=======
0092 347E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3480 FFCE     
0093 3482 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3484 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
<<<<<<< HEAD
0098 3498 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 349A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 349C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 349E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 34A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 34A2 045B  20         b     *r11                  ; Return to caller
=======
0098 3486 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 3488 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 348A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 348C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 348E C2F9  30         mov   *stack+,r11           ; Pop r11
0103 3490 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0021                       ;-----------------------------------------------------------------------
0022                       ; Logic for Index management
0023                       ;-----------------------------------------------------------------------
0024                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
<<<<<<< HEAD
0022 34A4 0649  14         dect  stack
0023 34A6 C64B  30         mov   r11,*stack            ; Save return address
0024 34A8 0649  14         dect  stack
0025 34AA C644  30         mov   tmp0,*stack           ; Push tmp0
0026 34AC 0649  14         dect  stack
0027 34AE C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 34B0 C120  34         mov   @parm1,tmp0           ; Get line number
     34B2 A006     
0032 34B4 C160  34         mov   @parm2,tmp1           ; Get pointer
     34B6 A008     
0033 34B8 1312  14         jeq   idx.entry.update.clear
=======
0022 3492 0649  14         dect  stack
0023 3494 C64B  30         mov   r11,*stack            ; Save return address
0024 3496 0649  14         dect  stack
0025 3498 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 349A 0649  14         dect  stack
0027 349C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 349E C120  34         mov   @parm1,tmp0           ; Get line number
     34A0 A006     
0032 34A2 C160  34         mov   @parm2,tmp1           ; Get pointer
     34A4 A008     
0033 34A6 1312  14         jeq   idx.entry.update.clear
>>>>>>> b9b40bb (WIP optimize build scripts)
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
<<<<<<< HEAD
0038 34BA 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     34BC 0FFF     
0039 34BE 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 34C0 06E0  34         swpb  @parm3
     34C2 A00A     
0044 34C4 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     34C6 A00A     
0045 34C8 06E0  34         swpb  @parm3                ; \ Restore original order again,
     34CA A00A     
=======
0038 34A8 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     34AA 0FFF     
0039 34AC 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 34AE 06E0  34         swpb  @parm3
     34B0 A00A     
0044 34B2 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     34B4 A00A     
0045 34B6 06E0  34         swpb  @parm3                ; \ Restore original order again,
     34B8 A00A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
<<<<<<< HEAD
0051 34CC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34CE 31C4     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 34D0 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     34D2 A018     
0056 34D4 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     34D6 B000     
0057 34D8 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34DA A018     
0058 34DC 1008  14         jmp   idx.entry.update.exit
=======
0051 34BA 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34BC 31B2     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 34BE C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     34C0 A018     
0056 34C2 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     34C4 B000     
0057 34C6 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34C8 A018     
0058 34CA 1008  14         jmp   idx.entry.update.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
<<<<<<< HEAD
0063 34DE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34E0 31C4     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 34E2 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     34E4 A018     
0068 34E6 04E4  34         clr   @idx.top(tmp0)        ; /
     34E8 B000     
0069 34EA C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34EC A018     
=======
0063 34CC 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34CE 31B2     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 34D0 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     34D2 A018     
0068 34D4 04E4  34         clr   @idx.top(tmp0)        ; /
     34D6 B000     
0069 34D8 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34DA A018     
>>>>>>> b9b40bb (WIP optimize build scripts)
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
<<<<<<< HEAD
0074 34EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 34F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 34F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 34F4 045B  20         b     *r11                  ; Return to caller
=======
0074 34DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 34DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 34E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 34E2 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0025                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
<<<<<<< HEAD
0021 34F6 0649  14         dect  stack
0022 34F8 C64B  30         mov   r11,*stack            ; Save return address
0023 34FA 0649  14         dect  stack
0024 34FC C644  30         mov   tmp0,*stack           ; Push tmp0
0025 34FE 0649  14         dect  stack
0026 3500 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3502 0649  14         dect  stack
0028 3504 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3506 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3508 A006     
0033               
0034 350A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     350C 31C4     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 350E C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     3510 A018     
0039 3512 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3514 B000     
0040               
0041 3516 130C  14         jeq   idx.pointer.get.parm.null
=======
0021 34E4 0649  14         dect  stack
0022 34E6 C64B  30         mov   r11,*stack            ; Save return address
0023 34E8 0649  14         dect  stack
0024 34EA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 34EC 0649  14         dect  stack
0026 34EE C645  30         mov   tmp1,*stack           ; Push tmp1
0027 34F0 0649  14         dect  stack
0028 34F2 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 34F4 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     34F6 A006     
0033               
0034 34F8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     34FA 31B2     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 34FC C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     34FE A018     
0039 3500 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3502 B000     
0040               
0041 3504 130C  14         jeq   idx.pointer.get.parm.null
>>>>>>> b9b40bb (WIP optimize build scripts)
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
<<<<<<< HEAD
0046 3518 C185  18         mov   tmp1,tmp2             ; \
0047 351A 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 351C 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     351E 00FF     
0052 3520 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3522 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3524 C000     
=======
0046 3506 C185  18         mov   tmp1,tmp2             ; \
0047 3508 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 350A 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     350C 00FF     
0052 350E 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3510 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3512 C000     
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
<<<<<<< HEAD
0058 3526 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3528 A018     
0059 352A C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     352C A01A     
0060 352E 1004  14         jmp   idx.pointer.get.exit
=======
0058 3514 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3516 A018     
0059 3518 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     351A A01A     
0060 351C 1004  14         jmp   idx.pointer.get.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
<<<<<<< HEAD
0065 3530 04E0  34         clr   @outparm1
     3532 A018     
0066 3534 04E0  34         clr   @outparm2
     3536 A01A     
=======
0065 351E 04E0  34         clr   @outparm1
     3520 A018     
0066 3522 04E0  34         clr   @outparm2
     3524 A01A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
<<<<<<< HEAD
0071 3538 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 353A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 353C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 353E C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3540 045B  20         b     *r11                  ; Return to caller
=======
0071 3526 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3528 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 352A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 352C C2F9  30         mov   *stack+,r11           ; Pop r11
0075 352E 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0026                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
<<<<<<< HEAD
0017 3542 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3544 B000     
0018 3546 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3548 05C5  14         inct  tmp1                  ; b = current slot + 2
=======
0017 3530 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3532 B000     
0018 3534 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3536 05C5  14         inct  tmp1                  ; b = current slot + 2
>>>>>>> b9b40bb (WIP optimize build scripts)
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
<<<<<<< HEAD
0024 354A CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 354C 0606  14         dec   tmp2                  ; tmp2--
0026 354E 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3550 045B  20         b     *r11                  ; Return to caller
=======
0024 3538 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 353A 0606  14         dec   tmp2                  ; tmp2--
0026 353C 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 353E 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
<<<<<<< HEAD
0046 3552 0649  14         dect  stack
0047 3554 C64B  30         mov   r11,*stack            ; Save return address
0048 3556 0649  14         dect  stack
0049 3558 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 355A 0649  14         dect  stack
0051 355C C645  30         mov   tmp1,*stack           ; Push tmp1
0052 355E 0649  14         dect  stack
0053 3560 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3562 0649  14         dect  stack
0055 3564 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3566 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3568 A006     
0060               
0061 356A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     356C 31C4     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 356E C120  34         mov   @outparm1,tmp0        ; Index offset
     3570 A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3572 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3574 A008     
0070 3576 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3578 61A0  34         s     @parm1,tmp2           ; Calculate loop
     357A A006     
0074 357C 1504  14         jgt   idx.entry.delete.reorg
=======
0046 3540 0649  14         dect  stack
0047 3542 C64B  30         mov   r11,*stack            ; Save return address
0048 3544 0649  14         dect  stack
0049 3546 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3548 0649  14         dect  stack
0051 354A C645  30         mov   tmp1,*stack           ; Push tmp1
0052 354C 0649  14         dect  stack
0053 354E C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3550 0649  14         dect  stack
0055 3552 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3554 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3556 A006     
0060               
0061 3558 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     355A 31B2     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 355C C120  34         mov   @outparm1,tmp0        ; Index offset
     355E A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3560 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3562 A008     
0070 3564 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3566 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3568 A006     
0074 356A 1504  14         jgt   idx.entry.delete.reorg
>>>>>>> b9b40bb (WIP optimize build scripts)
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
<<<<<<< HEAD
0080 357E 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3580 B000     
0081 3582 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3584 1012  14         jmp   idx.entry.delete.exit ; Exit early
=======
0080 356C 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     356E B000     
0081 3570 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3572 1012  14         jmp   idx.entry.delete.exit ; Exit early
>>>>>>> b9b40bb (WIP optimize build scripts)
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
<<<<<<< HEAD
0087 3586 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3588 A008     
0088 358A 0287  22         ci    tmp3,2048
     358C 0800     
0089 358E 120A  14         jle   idx.entry.delete.reorg.simple
=======
0087 3574 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3576 A008     
0088 3578 0287  22         ci    tmp3,2048
     357A 0800     
0089 357C 120A  14         jle   idx.entry.delete.reorg.simple
>>>>>>> b9b40bb (WIP optimize build scripts)
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
<<<<<<< HEAD
0096 3590 06A0  32         bl    @_idx.sams.mapcolumn.on
     3592 3156     
=======
0096 357E 06A0  32         bl    @_idx.sams.mapcolumn.on
     3580 3144     
>>>>>>> b9b40bb (WIP optimize build scripts)
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
<<<<<<< HEAD
0102 3594 C120  34         mov   @parm1,tmp0           ; Restore line number
     3596 A006     
0103 3598 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 359A 06A0  32         bl    @_idx.entry.delete.reorg
     359C 3542     
=======
0102 3582 C120  34         mov   @parm1,tmp0           ; Restore line number
     3584 A006     
0103 3586 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3588 06A0  32         bl    @_idx.entry.delete.reorg
     358A 3530     
>>>>>>> b9b40bb (WIP optimize build scripts)
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
<<<<<<< HEAD
0110 359E 06A0  32         bl    @_idx.sams.mapcolumn.off
     35A0 318A     
0111                                                   ; Restore memory window layout
0112               
0113 35A2 1002  14         jmp   !
=======
0110 358C 06A0  32         bl    @_idx.sams.mapcolumn.off
     358E 3178     
0111                                                   ; Restore memory window layout
0112               
0113 3590 1002  14         jmp   !
>>>>>>> b9b40bb (WIP optimize build scripts)
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
<<<<<<< HEAD
0118 35A4 06A0  32         bl    @_idx.entry.delete.reorg
     35A6 3542     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 35A8 04D4  26 !       clr   *tmp0                 ; Clear index entry
=======
0118 3592 06A0  32         bl    @_idx.entry.delete.reorg
     3594 3530     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 3596 04D4  26 !       clr   *tmp0                 ; Clear index entry
>>>>>>> b9b40bb (WIP optimize build scripts)
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
<<<<<<< HEAD
0127 35AA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 35AC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 35AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 35B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 35B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 35B4 045B  20         b     *r11                  ; Return to caller
=======
0127 3598 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 359A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 359C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 359E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 35A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 35A2 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0027                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
<<<<<<< HEAD
0017 35B6 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     35B8 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 35BA 1204  14         jle   !                     ; Continue if ok
=======
0017 35A4 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     35A6 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 35A8 1204  14         jle   !                     ; Continue if ok
>>>>>>> b9b40bb (WIP optimize build scripts)
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
<<<<<<< HEAD
0026 35BC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35BE FFCE     
0027 35C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35C2 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 35C4 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     35C6 B000     
0032 35C8 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 35CA 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 35CC 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 35CE C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 35D0 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 35D2 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 35D4 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 35D6 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     35D8 AFFC     
0043 35DA 1504  14         jgt   _idx.entry.insert.reorg.loop
=======
0026 35AA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35AC FFCE     
0027 35AE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35B0 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 35B2 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     35B4 B000     
0032 35B6 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 35B8 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 35BA 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 35BC C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 35BE 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 35C0 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 35C2 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 35C4 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     35C6 AFFC     
0043 35C8 1504  14         jgt   _idx.entry.insert.reorg.loop
>>>>>>> b9b40bb (WIP optimize build scripts)
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
<<<<<<< HEAD
0048 35DC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35DE FFCE     
0049 35E0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35E2 2026     
=======
0048 35CA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35CC FFCE     
0049 35CE 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35D0 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
<<<<<<< HEAD
0054 35E4 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 35E6 0644  14         dect  tmp0                  ; Move pointer up
0056 35E8 0645  14         dect  tmp1                  ; Move pointer up
0057 35EA 0606  14         dec   tmp2                  ; Next index entry
0058 35EC 15FB  14         jgt   _idx.entry.insert.reorg.loop
=======
0054 35D2 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 35D4 0644  14         dect  tmp0                  ; Move pointer up
0056 35D6 0645  14         dect  tmp1                  ; Move pointer up
0057 35D8 0606  14         dec   tmp2                  ; Next index entry
0058 35DA 15FB  14         jgt   _idx.entry.insert.reorg.loop
>>>>>>> b9b40bb (WIP optimize build scripts)
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
<<<<<<< HEAD
0063 35EE 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 35F0 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 35F2 045B  20         b     *r11                  ; Return to caller
=======
0063 35DC 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 35DE 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 35E0 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
<<<<<<< HEAD
0088 35F4 0649  14         dect  stack
0089 35F6 C64B  30         mov   r11,*stack            ; Save return address
0090 35F8 0649  14         dect  stack
0091 35FA C644  30         mov   tmp0,*stack           ; Push tmp0
0092 35FC 0649  14         dect  stack
0093 35FE C645  30         mov   tmp1,*stack           ; Push tmp1
0094 3600 0649  14         dect  stack
0095 3602 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3604 0649  14         dect  stack
0097 3606 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 3608 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     360A A008     
0102 360C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     360E A006     
0103 3610 130F  14         jeq   idx.entry.insert.reorg.simple
=======
0088 35E2 0649  14         dect  stack
0089 35E4 C64B  30         mov   r11,*stack            ; Save return address
0090 35E6 0649  14         dect  stack
0091 35E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 35EA 0649  14         dect  stack
0093 35EC C645  30         mov   tmp1,*stack           ; Push tmp1
0094 35EE 0649  14         dect  stack
0095 35F0 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 35F2 0649  14         dect  stack
0097 35F4 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 35F6 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     35F8 A008     
0102 35FA 61A0  34         s     @parm1,tmp2           ; Calculate loop
     35FC A006     
0103 35FE 130F  14         jeq   idx.entry.insert.reorg.simple
>>>>>>> b9b40bb (WIP optimize build scripts)
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
<<<<<<< HEAD
0109 3612 C1E0  34         mov   @parm2,tmp3
     3614 A008     
0110 3616 0287  22         ci    tmp3,2048
     3618 0800     
0111 361A 110A  14         jlt   idx.entry.insert.reorg.simple
=======
0109 3600 C1E0  34         mov   @parm2,tmp3
     3602 A008     
0110 3604 0287  22         ci    tmp3,2048
     3606 0800     
0111 3608 110A  14         jlt   idx.entry.insert.reorg.simple
>>>>>>> b9b40bb (WIP optimize build scripts)
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
<<<<<<< HEAD
0118 361C 06A0  32         bl    @_idx.sams.mapcolumn.on
     361E 3156     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 3620 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3622 A008     
0123 3624 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3626 06A0  32         bl    @_idx.entry.insert.reorg
     3628 35B6     
=======
0118 360A 06A0  32         bl    @_idx.sams.mapcolumn.on
     360C 3144     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 360E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3610 A008     
0123 3612 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3614 06A0  32         bl    @_idx.entry.insert.reorg
     3616 35A4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
<<<<<<< HEAD
0130 362A 06A0  32         bl    @_idx.sams.mapcolumn.off
     362C 318A     
0131                                                   ; Restore memory window layout
0132               
0133 362E 1008  14         jmp   idx.entry.insert.exit
=======
0130 3618 06A0  32         bl    @_idx.sams.mapcolumn.off
     361A 3178     
0131                                                   ; Restore memory window layout
0132               
0133 361C 1008  14         jmp   idx.entry.insert.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
<<<<<<< HEAD
0138 3630 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3632 A008     
0139               
0140 3634 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3636 31C4     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3638 C120  34         mov   @outparm1,tmp0        ; Index offset
     363A A018     
0145               
0146 363C 06A0  32         bl    @_idx.entry.insert.reorg
     363E 35B6     
=======
0138 361E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3620 A008     
0139               
0140 3622 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3624 31B2     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3626 C120  34         mov   @outparm1,tmp0        ; Index offset
     3628 A018     
0145               
0146 362A 06A0  32         bl    @_idx.entry.insert.reorg
     362C 35A4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
<<<<<<< HEAD
0155 3640 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3642 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3644 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3646 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3648 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 364A 045B  20         b     *r11                  ; Return to caller
=======
0155 362E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3630 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3632 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3634 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3636 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3638 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0028                       ;-----------------------------------------------------------------------
0029                       ; Logic for editor buffer
0030                       ;-----------------------------------------------------------------------
0031                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
<<<<<<< HEAD
0021 364C 0649  14         dect  stack
0022 364E C64B  30         mov   r11,*stack            ; Push return address
0023 3650 0649  14         dect  stack
0024 3652 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3654 0649  14         dect  stack
0026 3656 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3658 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     365A A504     
0031 365C 1204  14         jle   edb.line.mappage.lookup
=======
0021 363A 0649  14         dect  stack
0022 363C C64B  30         mov   r11,*stack            ; Push return address
0023 363E 0649  14         dect  stack
0024 3640 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3642 0649  14         dect  stack
0026 3644 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3646 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3648 A504     
0031 364A 1204  14         jle   edb.line.mappage.lookup
>>>>>>> b9b40bb (WIP optimize build scripts)
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
<<<<<<< HEAD
0036 365E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3660 FFCE     
0037 3662 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3664 2026     
=======
0036 364C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     364E FFCE     
0037 3650 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3652 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
<<<<<<< HEAD
0042 3666 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3668 A006     
0043               
0044 366A 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     366C 34F6     
=======
0042 3654 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3656 A006     
0043               
0044 3658 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     365A 34E4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
<<<<<<< HEAD
0049 366E C120  34         mov   @outparm2,tmp0        ; SAMS page
     3670 A01A     
0050 3672 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3674 A018     
0051 3676 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
=======
0049 365C C120  34         mov   @outparm2,tmp0        ; SAMS page
     365E A01A     
0050 3660 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3662 A018     
0051 3664 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
>>>>>>> b9b40bb (WIP optimize build scripts)
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
<<<<<<< HEAD
0056 3678 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     367A A208     
0057 367C 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 367E 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3680 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3682 C820  54         mov   @outparm2,@tv.sams.c000
     3684 A01A     
     3686 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3688 C820  54         mov   @outparm2,@edb.sams.page
     368A A01A     
     368C A518     
=======
0056 3666 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3668 A208     
0057 366A 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 366C 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     366E 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3670 C820  54         mov   @outparm2,@tv.sams.c000
     3672 A01A     
     3674 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3676 C820  54         mov   @outparm2,@edb.sams.page
     3678 A01A     
     367A A518     
>>>>>>> b9b40bb (WIP optimize build scripts)
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
<<<<<<< HEAD
0074 368E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3690 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3692 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3694 045B  20         b     *r11                  ; Return to caller
=======
0074 367C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 367E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3680 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3682 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0032                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
<<<<<<< HEAD
0021 3696 0649  14         dect  stack
0022 3698 C64B  30         mov   r11,*stack            ; Push return address
0023 369A 0649  14         dect  stack
0024 369C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 369E 0649  14         dect  stack
0026 36A0 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 36A2 04E0  34         clr   @outparm1             ; Reset length
     36A4 A018     
0031 36A6 04E0  34         clr   @outparm2             ; Reset SAMS bank
     36A8 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 36AA C120  34         mov   @parm1,tmp0           ; \
     36AC A006     
0036 36AE 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 36B0 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     36B2 A504     
0039 36B4 1101  14         jlt   !                     ; No, continue processing
0040 36B6 100B  14         jmp   edb.line.getlength.null
=======
0021 3684 0649  14         dect  stack
0022 3686 C64B  30         mov   r11,*stack            ; Push return address
0023 3688 0649  14         dect  stack
0024 368A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 368C 0649  14         dect  stack
0026 368E C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 3690 04E0  34         clr   @outparm1             ; Reset length
     3692 A018     
0031 3694 04E0  34         clr   @outparm2             ; Reset SAMS bank
     3696 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3698 C120  34         mov   @parm1,tmp0           ; \
     369A A006     
0036 369C 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 369E 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     36A0 A504     
0039 36A2 1101  14         jlt   !                     ; No, continue processing
0040 36A4 100B  14         jmp   edb.line.getlength.null
>>>>>>> b9b40bb (WIP optimize build scripts)
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
<<<<<<< HEAD
0045 36B8 C120  34 !       mov   @parm1,tmp0           ; Get line
     36BA A006     
0046               
0047 36BC 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     36BE 364C     
=======
0045 36A6 C120  34 !       mov   @parm1,tmp0           ; Get line
     36A8 A006     
0046               
0047 36AA 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     36AC 363A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
<<<<<<< HEAD
0052 36C0 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     36C2 A018     
0053 36C4 1304  14         jeq   edb.line.getlength.null
=======
0052 36AE C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     36B0 A018     
0053 36B2 1304  14         jeq   edb.line.getlength.null
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
<<<<<<< HEAD
0058 36C6 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 36C8 C805  38         mov   tmp1,@outparm1        ; Save length
     36CA A018     
0060 36CC 1002  14         jmp   edb.line.getlength.exit
=======
0058 36B4 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 36B6 C805  38         mov   tmp1,@outparm1        ; Save length
     36B8 A018     
0060 36BA 1002  14         jmp   edb.line.getlength.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
<<<<<<< HEAD
0065 36CE 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     36D0 A018     
=======
0065 36BC 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     36BE A018     
>>>>>>> b9b40bb (WIP optimize build scripts)
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
<<<<<<< HEAD
0070 36D2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 36D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 36D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 36D8 045B  20         b     *r11                  ; Return to caller
=======
0070 36C0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 36C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 36C4 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 36C6 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
<<<<<<< HEAD
0093 36DA 0649  14         dect  stack
0094 36DC C64B  30         mov   r11,*stack            ; Save return address
0095 36DE 0649  14         dect  stack
0096 36E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 36E2 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     36E4 A304     
0101 36E6 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     36E8 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 36EA C804  38         mov   tmp0,@parm1
     36EC A006     
0106 36EE 06A0  32         bl    @edb.line.getlength
     36F0 3696     
0107 36F2 C820  54         mov   @outparm1,@fb.row.length
     36F4 A018     
     36F6 A308     
=======
0093 36C8 0649  14         dect  stack
0094 36CA C64B  30         mov   r11,*stack            ; Save return address
0095 36CC 0649  14         dect  stack
0096 36CE C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 36D0 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     36D2 A304     
0101 36D4 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     36D6 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 36D8 C804  38         mov   tmp0,@parm1
     36DA A006     
0106 36DC 06A0  32         bl    @edb.line.getlength
     36DE 3684     
0107 36E0 C820  54         mov   @outparm1,@fb.row.length
     36E2 A018     
     36E4 A308     
>>>>>>> b9b40bb (WIP optimize build scripts)
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
<<<<<<< HEAD
0113 36F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 36FA C2F9  30         mov   *stack+,r11           ; Pop R11
0115 36FC 045B  20         b     *r11                  ; Return to caller
=======
0113 36E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 36E8 C2F9  30         mov   *stack+,r11           ; Pop R11
0115 36EA 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0033                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
<<<<<<< HEAD
0020 36FE 0649  14         dect  stack
0021 3700 C64B  30         mov   r11,*stack            ; Save return address
0022 3702 0649  14         dect  stack
0023 3704 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3706 0649  14         dect  stack
0025 3708 C645  30         mov   tmp1,*stack           ; Push tmp1
=======
0020 36EC 0649  14         dect  stack
0021 36EE C64B  30         mov   r11,*stack            ; Save return address
0022 36F0 0649  14         dect  stack
0023 36F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 36F4 0649  14         dect  stack
0025 36F6 C645  30         mov   tmp1,*stack           ; Push tmp1
>>>>>>> b9b40bb (WIP optimize build scripts)
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
<<<<<<< HEAD
0030 370A C120  34         mov   @edb.next_free.ptr,tmp0
     370C A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 370E 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     3710 0FFF     
0035 3712 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3714 0052     
0036 3716 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3718 0FF0     
0037 371A 1105  14         jlt   edb.hipage.alloc.setpage
=======
0030 36F8 C120  34         mov   @edb.next_free.ptr,tmp0
     36FA A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 36FC 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     36FE 0FFF     
0035 3700 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3702 0052     
0036 3704 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3706 0FF0     
0037 3708 1105  14         jlt   edb.hipage.alloc.setpage
>>>>>>> b9b40bb (WIP optimize build scripts)
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
<<<<<<< HEAD
0042 371C 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     371E A51A     
0043 3720 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3722 A500     
     3724 A508     
=======
0042 370A 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     370C A51A     
0043 370E C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3710 A500     
     3712 A508     
>>>>>>> b9b40bb (WIP optimize build scripts)
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
<<<<<<< HEAD
0049 3726 C120  34         mov   @edb.sams.hipage,tmp0
     3728 A51A     
0050 372A C160  34         mov   @edb.top.ptr,tmp1
     372C A500     
0051 372E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3730 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3732 1004  14         jmp   edb.hipage.alloc.exit
=======
0049 3714 C120  34         mov   @edb.sams.hipage,tmp0
     3716 A51A     
0050 3718 C160  34         mov   @edb.top.ptr,tmp1
     371A A500     
0051 371C 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     371E 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3720 1004  14         jmp   edb.hipage.alloc.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
<<<<<<< HEAD
0060 3734 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3736 FFCE     
0061 3738 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     373A 2026     
=======
0060 3722 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3724 FFCE     
0061 3726 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3728 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
<<<<<<< HEAD
0066 373C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 373E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3740 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3742 045B  20         b     *r11                  ; Return to caller
=======
0066 372A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 372C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 372E C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3730 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0034                       ;-----------------------------------------------------------------------
0035                       ; Utility functions
0036                       ;-----------------------------------------------------------------------
0037                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
<<<<<<< HEAD
0021 3744 0649  14         dect  stack
0022 3746 C64B  30         mov   r11,*stack            ; Push return address
0023 3748 0649  14         dect  stack
0024 374A C660  42         mov   @wyx,*stack           ; Push cursor position
     374C 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 374E 06A0  32         bl    @hchar
     3750 27D2     
0029 3752 0034                   byte 0,52,32,18
     3754 2012     
0030 3756 FFFF                   data EOL              ; Clear message
0031               
0032 3758 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     375A A226     
=======
0021 3732 0649  14         dect  stack
0022 3734 C64B  30         mov   r11,*stack            ; Push return address
0023 3736 0649  14         dect  stack
0024 3738 C660  42         mov   @wyx,*stack           ; Push cursor position
     373A 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 373C 06A0  32         bl    @hchar
     373E 27D2     
0029 3740 0034                   byte 0,52,32,18
     3742 2012     
0030 3744 FFFF                   data EOL              ; Clear message
0031               
0032 3746 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3748 A224     
>>>>>>> b9b40bb (WIP optimize build scripts)
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
<<<<<<< HEAD
0037 375C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     375E 832A     
0038 3760 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3762 045B  20         b     *r11                  ; Return to task
=======
0037 374A C839  42         mov   *stack+,@wyx          ; Pop cursor position
     374C 832A     
0038 374E C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3750 045B  20         b     *r11                  ; Return to task
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0038                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
<<<<<<< HEAD
0027 3764 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3766 27A6     
0028               
0029 3768 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     376A 22F8     
0030 376C 7F74                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 376E 06A0  32         bl    @scroff               ; Turn off screen
     3770 2686     
=======
0027 3752 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3754 27A6     
0028               
0029 3756 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3758 22F8     
0030 375A 3864                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 375C 06A0  32         bl    @scroff               ; Turn off screen
     375E 2686     
>>>>>>> b9b40bb (WIP optimize build scripts)
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
<<<<<<< HEAD
0039 3772 04E0  34         clr   @magic.str.w1
     3774 A000     
0040 3776 04E0  34         clr   @magic.str.w2
     3778 A002     
0041 377A 04E0  34         clr   @magic.str.w3
     377C A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 377E C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     3780 A232     
0046 3782 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     3784 2DC6     
=======
0039 3760 04E0  34         clr   @magic.str.w1
     3762 A000     
0040 3764 04E0  34         clr   @magic.str.w2
     3766 A002     
0041 3768 04E0  34         clr   @magic.str.w3
     376A A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 376C C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     376E A230     
0046 3770 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     3772 2DC6     
>>>>>>> b9b40bb (WIP optimize build scripts)
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
<<<<<<< HEAD
0052 3786 020C  20         li    r12,>1e00             ; SAMS CRU address
     3788 1E00     
0053 378A 1E01  16         sbz   1                     ; Disable SAMS mapper
=======
0052 3774 020C  20         li    r12,>1e00             ; SAMS CRU address
     3776 1E00     
0053 3778 1E01  16         sbz   1                     ; Disable SAMS mapper
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
<<<<<<< HEAD
0058 378C 0420  42         blwp @0                     ; Return to monitor
     378E 0000     
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Background tasks
0041                       ;-----------------------------------------------------------------------
0046                       copy  "task.vdp.cursor.char.asm"    ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.char.asm
0001               * FILE......: task.vdp.cursor.char.asm
0002               * Purpose...: VDP cursor shape (character version)
=======
0058 377A 0420  42         blwp @0                     ; Return to monitor
     377C 0000     
                   < ram.resident.asm
0038                       ;-----------------------------------------------------------------------
0039                       ; Background tasks
0040                       ;-----------------------------------------------------------------------
0042                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 377E 0649  14         dect  stack
0009 3780 C64B  30         mov   r11,*stack            ; Save return address
0010 3782 0649  14         dect  stack
0011 3784 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3786 0649  14         dect  stack
0013 3788 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 378A 0649  14         dect  stack
0015 378C C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 378E C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     3790 A222     
0020               
0021 3792 0284  22         ci    tmp0,pane.focus.fb
     3794 0000     
0022 3796 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 3798 0284  22         ci    tmp0,pane.focus.cmdb
     379A 0001     
0025 379C 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 379E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37A0 FFCE     
0031 37A2 06A0  32         bl    @cpu.crash            ; / Halt system.
     37A4 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 37A6 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     37A8 A70A     
     37AA 832A     
0037 37AC E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     37AE 2020     
0038 37B0 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     37B2 26E8     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 37B4 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 37B6 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     37B8 2020     
0048 37BA 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     37BC 26E8     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 37BE C160  34         mov   @tv.ruler.visible,tmp1
     37C0 A210     
0056 37C2 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 37C4 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     37C6 1000     
0058 37C8 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 37CA 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     37CC 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 37CE C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     37D0 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 37D2 C160  34         mov   @tv.ruler.visible,tmp1
     37D4 A210     
0071                                                   ; Ruler visible?
0072 37D6 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 37D8 C160  34         mov   @cmdb.visible,tmp1
     37DA A702     
0076 37DC 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     37DE FFFF     
0077 37E0 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 37E2 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     37E4 FF00     
0081 37E6 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     37E8 00F0     
0082 37EA C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     37EC A05A     
0083               
0084 37EE C120  34         mov   @ramsat,tmp0
     37F0 A056     
0085 37F2 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     37F4 00FF     
0086 37F6 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     37F8 0800     
0087 37FA C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     37FC A05E     
0088               
0089 37FE 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 3800 04C5  14         clr   tmp1
0095 3802 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     3804 A05D     
0096                                                   ; / by transparant color
0097 3806 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     3808 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 380A 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     380C 2486     
0104 380E 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     3810 A056     
     3812 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 3814 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 3816 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 3818 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 381A C2F9  30         mov   *stack+,r11           ; Pop r11
0115 381C 0460  28         b     @slotok               ; Exit task
     381E 2E84     
                   < ram.resident.asm
0043                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
>>>>>>> b9b40bb (WIP optimize build scripts)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
<<<<<<< HEAD
0008 3790 0649  14         dect  stack
0009 3792 C64B  30         mov   r11,*stack            ; Save return address
0010 3794 0649  14         dect  stack
0011 3796 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3798 0649  14         dect  stack
0013 379A C645  30         mov   tmp1,*stack           ; Push tmp1
0014 379C 0649  14         dect  stack
0015 379E C646  30         mov   tmp2,*stack           ; Push tmp2
0016 37A0 0649  14         dect  stack
0017 37A2 C660  42         mov   @wyx,*stack           ; Push cursor position
     37A4 832A     
0018                       ;------------------------------------------------------
0019                       ; Get pane with focus
0020                       ;------------------------------------------------------
0021 37A6 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     37A8 A224     
0022               
0023 37AA 0284  22         ci    tmp0,pane.focus.fb
     37AC 0000     
0024 37AE 1310  14         jeq   task.vdp.cursor.fb    ; Frame buffer has focus
0025               
0026 37B0 0284  22         ci    tmp0,pane.focus.cmdb
     37B2 0001     
0027 37B4 1304  14         jeq   task.vdp.cursor.cmdb  ; CMDB buffer has focus
0028                       ;------------------------------------------------------
0029                       ; Assert failed. Invalid value
0030                       ;------------------------------------------------------
0031 37B6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37B8 FFCE     
0032 37BA 06A0  32         bl    @cpu.crash            ; / Halt system.
     37BC 2026     
0033                       ;------------------------------------------------------
0034                       ; CMDB buffer has focus, position CMDB cursor
0035                       ;------------------------------------------------------
0036               task.vdp.cursor.cmdb:
0037 37BE C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     37C0 A70A     
     37C2 832A     
0038 37C4 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     37C6 A314     
0039 37C8 1319  14         jeq   task.vdp.cursor.dump  ; Show CMDB cursor
0040                       ;------------------------------------------------------
0041                       ; Hide CMDB cursor
0042                       ;------------------------------------------------------
0043               task.vdp.cursor.cmdb.hide:
0044 37CA 0720  34         seto  @cmdb.dirty
     37CC A71A     
0045 37CE 101C  14         jmp   task.vdp.cursor.exit
0046                       ;------------------------------------------------------
0047                       ; Frame buffer has focus, position FB cursor
0048                       ;------------------------------------------------------
0049               task.vdp.cursor.fb:
0050 37D0 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     37D2 A314     
0051 37D4 1303  14         jeq   task.vdp.cursor.fb.visible
0052                                                   ; Show FB cursor
0053                       ;------------------------------------------------------
0054                       ; Hide FB cursor
0055                       ;------------------------------------------------------
0056 37D6 0720  34         seto  @fb.dirty             ; Trigger refresh
     37D8 A318     
0057 37DA 1016  14         jmp   task.vdp.cursor.exit
0058                       ;------------------------------------------------------
0059                       ; Show FB cursor
0060                       ;------------------------------------------------------
0061               task.vdp.cursor.fb.visible:
0062 37DC C120  34         mov   @tv.ruler.visible,tmp0
     37DE A210     
0063 37E0 1307  14         jeq   task.vdp.cursor.fb.visible.noruler
0064                       ;------------------------------------------------------
0065                       ; Cursor position adjustment, ruler visible
0066                       ;------------------------------------------------------
0067 37E2 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37E4 832A     
0068 37E6 0224  22         ai    tmp0,>0200            ; Topline + ruler adjustment
     37E8 0200     
0069 37EA C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37EC 832A     
0070 37EE 1006  14         jmp   task.vdp.cursor.dump
0071                       ;------------------------------------------------------
0072                       ; Cursor position adjustment, ruler hidden
0073                       ;------------------------------------------------------
0074               task.vdp.cursor.fb.visible.noruler:
0075 37F0 C120  30         mov   @wyx,tmp0             ; Get cursor YX
     37F2 832A     
0076 37F4 0224  22         ai    tmp0,>0100            ; Topline adjustment
     37F6 0100     
0077 37F8 C804  30         mov   tmp0,@wyx             ; Save cursor YX
     37FA 832A     
0078                       ;------------------------------------------------------
0079                       ; Dump cursor to VDP
0080                       ;------------------------------------------------------
0081               task.vdp.cursor.dump:
0082 37FC 06A0  32         bl    @yx2pnt               ; Calculate VDP address from @WYX
     37FE 23FA     
0083                                                   ; \ i  @wyx = Cursor position
0084                                                   ; / o  tmp0 = VDP address
0085               
0086 3800 0205  20         li    tmp1,26               ; Cursor character
     3802 001A     
0087               
0088 3804 06A0  32         bl    @xvputb               ; VDP put single byte
     3806 22CC     
0089                                                   ; \ i  tmp0 = VDP write address
0090                                                   ; / i  tmp1 = Byte to write
0091                       ;------------------------------------------------------
0092                       ; Exit
0093                       ;------------------------------------------------------
0094               task.vdp.cursor.exit:
0095 3808 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     380A 832A     
0096 380C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 380E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 3810 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 3812 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 3814 0460  28         b     @slotok               ; Exit task
     3816 2E84     
=======
0008 3820 0649  14         dect  stack
0009 3822 C64B  30         mov   r11,*stack            ; Save return address
0010 3824 0649  14         dect  stack
0011 3826 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;------------------------------------------------------
0013                       ; Toggle cursor
0014                       ;------------------------------------------------------
0015 3828 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     382A A314     
0016 382C 1304  14         jeq   task.vdp.cursor.visible
0017                       ;------------------------------------------------------
0018                       ; Hide cursor
0019                       ;------------------------------------------------------
0020 382E 04C4  14         clr   tmp0
0021 3830 D804  38         movb  tmp0,@ramsat+3        ; Hide cursor
     3832 A059     
0022 3834 1003  14         jmp   task.vdp.cursor.copy.sat
0023                                                   ; Update VDP SAT and exit task
0024                       ;------------------------------------------------------
0025                       ; Show cursor
0026                       ;------------------------------------------------------
0027               task.vdp.cursor.visible:
0028 3836 C820  54         mov   @tv.curshape,@ramsat+2
     3838 A214     
     383A A058     
0029                                                   ; Get cursor shape and color
0030                       ;------------------------------------------------------
0031                       ; Copy SAT
0032                       ;------------------------------------------------------
0033               task.vdp.cursor.copy.sat:
0034 383C 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     383E 2486     
0035 3840 2180                   data sprsat,ramsat,4  ; \ i  p0 = VDP destination
     3842 A056     
     3844 0004     
0036                                                   ; | i  p1 = ROM/RAM source
0037                                                   ; / i  p2 = Number of bytes to write
0038                       ;------------------------------------------------------
0039                       ; Exit
0040                       ;------------------------------------------------------
0041               task.vdp.cursor.exit:
0042 3846 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0043 3848 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 384A 0460  28         b     @slotok               ; Exit task
     384C 2E84     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0048               
0049                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
<<<<<<< HEAD
0009 3818 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     381A A226     
0010 381C 1301  14         jeq   task.oneshot.exit
0011               
0012 381E 0694  24         bl    *tmp0                  ; Execute one-shot task
=======
0009 384E C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3850 A224     
0010 3852 1301  14         jeq   task.oneshot.exit
0011               
0012 3854 0694  24         bl    *tmp0                  ; Execute one-shot task
>>>>>>> b9b40bb (WIP optimize build scripts)
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
<<<<<<< HEAD
0017 3820 0460  28         b     @slotok                ; Exit task
     3822 2E84     
=======
0017 3856 0460  28         b     @slotok                ; Exit task
     3858 2E84     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0050                       ;------------------------------------------------------
0051                       ; Program data
0052                       ;------------------------------------------------------
0053                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
<<<<<<< HEAD
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3824 0000             data  >0000,>0001           ; Cursor
     3826 0001     
0014 3828 0000             data  >0000,>0101           ; Current line indicator     <
     382A 0101     
0015 382C 0820             data  >0820,>0201           ; Current column indicator   v
     382E 0201     
0016               nosprite:
0017 3830 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               
0021               
0022               ***************************************************************
0023               * Stevie color schemes table
0024               *--------------------------------------------------------------
0025               * Word 1
0026               * A  MSB  high-nibble    Foreground color text line in frame buffer
0027               * B  MSB  low-nibble     Background color text line in frame buffer
0028               * C  LSB  high-nibble    Foreground color top/bottom line
0029               * D  LSB  low-nibble     Background color top/bottom line
0030               *
0031               * Word 2
0032               * E  MSB  high-nibble    Foreground color cmdb pane
0033               * F  MSB  low-nibble     Background color cmdb pane
0034               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0035               * H  LSB  low-nibble     Cursor foreground color frame buffer
0036               *
0037               * Word 3
0038               * I  MSB  high-nibble    Foreground color busy top/bottom line
0039               * J  MSB  low-nibble     Background color busy top/bottom line
0040               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0041               * L  LSB  low-nibble     Background color marked line in frame buffer
0042               *
0043               * Word 4
0044               * M  MSB  high-nibble    Foreground color command buffer header line
0045               * N  MSB  low-nibble     Background color command buffer header line
0046               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0047               * P  LSB  low-nibble     Foreground color ruler frame buffer
0048               *
0049               * Colors
0050               * 0  Transparant
0051               * 1  black
0052               * 2  Green
0053               * 3  Light Green
0054               * 4  Blue
0055               * 5  Light Blue
0056               * 6  Dark Red
0057               * 7  Cyan
0058               * 8  Red
0059               * 9  Light Red
0060               * A  Yellow
0061               * B  Light Yellow
0062               * C  Dark Green
0063               * D  Magenta
0064               * E  Grey
0065               * F  White
0066               *--------------------------------------------------------------
0067      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0068               
0069               tv.colorscheme.table:
0070                       ;                             ; #
0071                       ;      ABCD  EFGH  IJKL  MNOP ; -
0072 3832 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     3834 F171     
     3836 1B1F     
     3838 7111     
0073 383A A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     383C F0FF     
     383E 1F1A     
     3840 F1FF     
0074 3842 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3844 F0FF     
     3846 1F12     
     3848 F1F6     
0075 384A F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     384C 1E11     
     384E 1A17     
     3850 1E11     
0076 3852 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     3854 E1FF     
     3856 1F1E     
     3858 E1FF     
0077 385A 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     385C 1016     
     385E 1B71     
     3860 1711     
0078 3862 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     3864 1011     
     3866 F1F1     
     3868 1F11     
0079 386A 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     386C A1FF     
     386E 1F1F     
     3870 F11F     
0080 3872 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     3874 12FF     
     3876 1B12     
     3878 12FF     
0081 387A F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     387C E1FF     
     387E 1B1F     
     3880 F131     
0082                       even
0083               
0084               tv.tabs.table.lr:
0085 3882 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3884 0C19     
0086 3886 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3888 3B4F     
0087 388A FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     388C 0000     
0088                                                   ; /   >ff means end-of-list.
0089               
0090               tv.tabs.table.rl:
0091 388E 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3890 2D1E     
0092 3892 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3894 0700     
0093 3896 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3898 0000     
0094                                                   ; /   >ff means end-of-list.
0095               
0096               ***************************************************************
0097               * Constants for numbers 0-10
0098               ********|*****|*********************|**************************
0099      2000     const.0       equ   w$0000          ; 0
0100      2002     const.1       equ   w$0001          ; 1
0101      2004     const.2       equ   w$0002          ; 2
0102 389A 0003     const.3       data  3               ; 3
0103      2006     const.4       equ   w$0004          ; 4
0104 389C 0005     const.5       data  5               ; 5
0105 389E 0006     const.6       data  6               ; 6
0106 38A0 0007     const.7       data  7               ; 7
0107      2008     const.8       equ   w$0008          ; 8
0108 38A2 0009     const.9       data  9               ; 9
0109 38A4 000A     const.10      data  10              ; 10
=======
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 385A 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     385C 003F     
     385E 0243     
     3860 05F4     
     3862 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 3864 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3866 000C     
     3868 0006     
     386A 0007     
     386C 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 386E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3870 000C     
     3872 0006     
     3874 0007     
     3876 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3878 0000             data  >0000,>0001           ; Cursor
     387A 0001     
0099 387C 0000             data  >0000,>0101           ; Current line indicator     <
     387E 0101     
0100 3880 0820             data  >0820,>0201           ; Current column indicator   v
     3882 0201     
0101               nosprite:
0102 3884 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3886 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3888 F171     
     388A 1B1F     
     388C 71B1     
0158 388E A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     3890 F0FF     
     3892 1F1A     
     3894 F1FF     
0159 3896 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     3898 F0FF     
     389A 1F12     
     389C F1F6     
0160 389E F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     38A0 1E11     
     38A2 1A17     
     38A4 1E11     
0161 38A6 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     38A8 E1FF     
     38AA 1F1E     
     38AC E1FF     
0162 38AE 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     38B0 1016     
     38B2 1B71     
     38B4 1711     
0163 38B6 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     38B8 1011     
     38BA F1F1     
     38BC 1F11     
0164 38BE 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     38C0 A1FF     
     38C2 1F1F     
     38C4 F11F     
0165 38C6 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     38C8 12FF     
     38CA 1B12     
     38CC 12FF     
0166 38CE F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     38D0 E1FF     
     38D2 1B1F     
     38D4 F131     
0167                       even
0168               
0169               tv.tabs.table.lr:
0170 38D6 0007             byte  0,7,12,25             ; \   Default tab positions as used
     38D8 0C19     
0171 38DA 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     38DC 3B4F     
0172 38DE FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     38E0 0000     
0173                                                   ; /   >ff means end-of-list.
0174               
0175               tv.tabs.table.rl:
0176 38E2 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     38E4 2D1E     
0177 38E6 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     38E8 0700     
0178 38EA FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     38EC 0000     
0179                                                   ; /   >ff means end-of-list.
0180               
0181               ***************************************************************
0182               * Constants for numbers 0-10
0183               ********|*****|*********************|**************************
0184      2000     const.0       equ   w$0000          ; 0
0185      2002     const.1       equ   w$0001          ; 1
0186      2004     const.2       equ   w$0002          ; 2
0187 38EE 0003     const.3       data  3               ; 3
0188      2006     const.4       equ   w$0004          ; 4
0189 38F0 0005     const.5       data  5               ; 5
0190 38F2 0006     const.6       data  6               ; 6
0191 38F4 0007     const.7       data  7               ; 7
0192      2008     const.8       equ   w$0008          ; 8
0193 38F6 0009     const.9       data  9               ; 9
0194 38F8 000A     const.10      data  10              ; 10
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0054                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
<<<<<<< HEAD
0008 38A6 012C     txt.delim          stri ','
0009                                  even
0010 38A8 0520     txt.bottom         stri '  BOT'
     38AA 2042     
     38AC 4F54     
0011                                  even
0012 38AE 044F     txt.ovrwrite       stri 'OVR '
     38B0 5652     
     38B2 20       
0013                                  even
0014 38B4 0449     txt.insert         stri 'INS '
     38B6 4E53     
     38B8 20       
0015                                  even
0016 38BA 0449     txt.autoinsert     stri 'INS+'
     38BC 4E53     
     38BE 2B       
0017                                  even
0018 38C0 012A     txt.star           stri '*'
0019                                  even
0020 38C2 0A4C     txt.loading        stri 'Loading...'
     38C4 6F61     
     38C6 6469     
     38C8 6E67     
     38CA 2E2E     
     38CC 2E       
0021                                  even
0022 38CE 0A53     txt.saving         stri 'Saving....'
     38D0 6176     
     38D2 696E     
     38D4 672E     
     38D6 2E2E     
     38D8 2E       
0023                                  even
0024 38DA 1250     txt.printing       stri 'Printing file.....'
     38DC 7269     
     38DE 6E74     
     38E0 696E     
     38E2 6720     
     38E4 6669     
     38E6 6C65     
     38E8 2E2E     
     38EA 2E2E     
     38EC 2E       
0025                                  even
0026 38EE 1244     txt.block.del      stri 'Deleting block....'
     38F0 656C     
     38F2 6574     
     38F4 696E     
     38F6 6720     
     38F8 626C     
     38FA 6F63     
     38FC 6B2E     
     38FE 2E2E     
     3900 2E       
0027                                  even
0028 3902 1143     txt.block.copy     stri 'Copying block....'
     3904 6F70     
     3906 7969     
     3908 6E67     
     390A 2062     
     390C 6C6F     
     390E 636B     
     3910 2E2E     
     3912 2E2E     
0029                                  even
0030 3914 104D     txt.block.move     stri 'Moving block....'
     3916 6F76     
     3918 696E     
     391A 6720     
     391C 626C     
     391E 6F63     
     3920 6B2E     
     3922 2E2E     
     3924 2E       
0031                                  even
0032 3926 1853     txt.block.save     stri 'Saving block to file....'
     3928 6176     
     392A 696E     
     392C 6720     
     392E 626C     
     3930 6F63     
     3932 6B20     
     3934 746F     
     3936 2066     
     3938 696C     
     393A 652E     
     393C 2E2E     
     393E 2E       
0033                                  even
0034 3940 1843     txt.block.clip     stri 'Copying to clipboard....'
     3942 6F70     
     3944 7969     
     3946 6E67     
     3948 2074     
     394A 6F20     
     394C 636C     
     394E 6970     
     3950 626F     
     3952 6172     
     3954 642E     
     3956 2E2E     
     3958 2E       
0035                                  even
0036 395A 1250     txt.block.print    stri 'Printing block....'
     395C 7269     
     395E 6E74     
     3960 696E     
     3962 6720     
     3964 626C     
     3966 6F63     
     3968 6B2E     
     396A 2E2E     
     396C 2E       
0037                                  even
0038 396E 1343     txt.clearmem       stri 'Clearing memory....'
     3970 6C65     
     3972 6172     
     3974 696E     
     3976 6720     
     3978 6D65     
     397A 6D6F     
     397C 7279     
     397E 2E2E     
     3980 2E2E     
0039                                  even
0040 3982 0E4C     txt.done.load      stri 'Load completed'
     3984 6F61     
     3986 6420     
     3988 636F     
     398A 6D70     
     398C 6C65     
     398E 7465     
     3990 64       
0041                                  even
0042 3992 1049     txt.done.insert    stri 'Insert completed'
     3994 6E73     
     3996 6572     
     3998 7420     
     399A 636F     
     399C 6D70     
     399E 6C65     
     39A0 7465     
     39A2 64       
0043                                  even
0044 39A4 1041     txt.done.append    stri 'Append completed'
     39A6 7070     
     39A8 656E     
     39AA 6420     
     39AC 636F     
     39AE 6D70     
     39B0 6C65     
     39B2 7465     
     39B4 64       
0045                                  even
0046 39B6 0E53     txt.done.save      stri 'Save completed'
     39B8 6176     
     39BA 6520     
     39BC 636F     
     39BE 6D70     
     39C0 6C65     
     39C2 7465     
     39C4 64       
0047                                  even
0048 39C6 0E43     txt.done.copy      stri 'Copy completed'
     39C8 6F70     
     39CA 7920     
     39CC 636F     
     39CE 6D70     
     39D0 6C65     
     39D2 7465     
     39D4 64       
0049                                  even
0050 39D6 0F50     txt.done.print     stri 'Print completed'
     39D8 7269     
     39DA 6E74     
     39DC 2063     
     39DE 6F6D     
     39E0 706C     
     39E2 6574     
     39E4 6564     
0051                                  even
0052 39E6 1044     txt.done.delete    stri 'Delete completed'
     39E8 656C     
     39EA 6574     
     39EC 6520     
     39EE 636F     
     39F0 6D70     
     39F2 6C65     
     39F4 7465     
     39F6 64       
0053                                  even
0054 39F8 0F43     txt.done.clipboard stri 'Clipboard saved'
     39FA 6C69     
     39FC 7062     
     39FE 6F61     
     3A00 7264     
     3A02 2073     
     3A04 6176     
     3A06 6564     
0055                                  even
0056 3A08 0D43     txt.done.clipdev   stri 'Clipboard set'
     3A0A 6C69     
     3A0C 7062     
     3A0E 6F61     
     3A10 7264     
     3A12 2073     
     3A14 6574     
0057                                  even
0058 3A16 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3A18 7574     
     3A1A 6F69     
     3A1C 6E73     
     3A1E 6572     
     3A20 743A     
     3A22 206F     
     3A24 6E       
0059                                  even
0060 3A26 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3A28 7574     
     3A2A 6F69     
     3A2C 6E73     
     3A2E 6572     
     3A30 743A     
     3A32 206F     
     3A34 6666     
0061                                  even
0062 3A36 0B46     txt.fastmode       stri 'Fastmode IO'
     3A38 6173     
     3A3A 746D     
     3A3C 6F64     
     3A3E 6520     
     3A40 494F     
0063                                  even
0064 3A42 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     3A44 7870     
     3A46 616E     
     3A48 6469     
     3A4A 6E67     
     3A4C 2054     
     3A4E 4920     
     3A50 4261     
     3A52 7369     
     3A54 6320     
     3A56 6C69     
     3A58 6E65     
     3A5A 2E2E     
     3A5C 2E2E     
0065                                  even
0066 3A5E 026B     txt.kb             stri 'kb'
     3A60 62       
0067                                  even
0068 3A62 054C     txt.lines          stri 'Lines'
     3A64 696E     
     3A66 6573     
0069                                  even
0070 3A68 0A5B     txt.newfile        stri '[New file]'
     3A6A 4E65     
     3A6C 7720     
     3A6E 6669     
     3A70 6C65     
     3A72 5D       
0071                                  even
0072 3A74 0D5B     txt.tib1           stri '[TI Basic #1]'
     3A76 5449     
     3A78 2042     
     3A7A 6173     
     3A7C 6963     
     3A7E 2023     
     3A80 315D     
0073                                  even
0074 3A82 0D5B     txt.tib2           stri '[TI Basic #2]'
     3A84 5449     
     3A86 2042     
     3A88 6173     
     3A8A 6963     
     3A8C 2023     
     3A8E 325D     
0075                                  even
0076 3A90 0D5B     txt.tib3           stri '[TI Basic #3]'
     3A92 5449     
     3A94 2042     
     3A96 6173     
     3A98 6963     
     3A9A 2023     
     3A9C 335D     
0077                                  even
0078 3A9E 0D5B     txt.tib4           stri '[TI Basic #4]'
     3AA0 5449     
     3AA2 2042     
     3AA4 6173     
     3AA6 6963     
     3AA8 2023     
     3AAA 345D     
0079                                  even
0080 3AAC 0D5B     txt.tib5           stri '[TI Basic #5]'
     3AAE 5449     
     3AB0 2042     
     3AB2 6173     
     3AB4 6963     
     3AB6 2023     
     3AB8 355D     
0081                                  even
0082 3ABA 0444     txt.filetype.dv80  stri 'DV80'
     3ABC 5638     
     3ABE 30       
0083                                  even
0084 3AC0 034D     txt.m1             stri 'M1='
     3AC2 313D     
0085                                  even
0086 3AC4 034D     txt.m2             stri 'M2='
     3AC6 323D     
0087                                  even
0088 3AC8 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3ACA 392D     
     3ACC 4D65     
     3ACE 6E75     
     3AD0 2020     
     3AD2 5E48     
     3AD4 2D48     
     3AD6 656C     
     3AD8 7020     
     3ADA 205E     
     3ADC 552D     
     3ADE 5368     
     3AE0 6F72     
     3AE2 7463     
     3AE4 7574     
     3AE6 73       
0089                                  even
0090 3AE8 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3AEA 392D     
     3AEC 4D65     
     3AEE 6E75     
     3AF0 2020     
     3AF2 5E48     
     3AF4 2D48     
     3AF6 656C     
     3AF8 7020     
     3AFA 205E     
     3AFC 552D     
     3AFE 5368     
     3B00 6F72     
     3B02 7463     
     3B04 7574     
     3B06 7320     
     3B08 2046     
     3B0A 302D     
     3B0C 4261     
     3B0E 7369     
     3B10 6323     
0091                                  even
0092 3B12 3446     txt.keys.block     stri 'F9-Back  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3B14 392D     
     3B16 4261     
     3B18 636B     
     3B1A 2020     
     3B1C 5E43     
     3B1E 6F70     
     3B20 7920     
     3B22 5E4D     
     3B24 6F76     
     3B26 6520     
     3B28 5E44     
     3B2A 656C     
     3B2C 205E     
     3B2E 5361     
     3B30 7665     
     3B32 205E     
     3B34 5072     
     3B36 696E     
     3B38 7420     
     3B3A 5E5B     
     3B3C 312D     
     3B3E 335D     
     3B40 436C     
     3B42 6970     
     3B44 6272     
     3B46 64       
0093                                  even
0094 3B48 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3B4A 392D     
     3B4C 4261     
     3B4E 636B     
     3B50 2020     
     3B52 4635     
     3B54 2D41     
     3B56 7574     
     3B58 6F55     
     3B5A 6E70     
     3B5C 6163     
     3B5E 6B20     
     3B60 2053     
     3B62 5041     
     3B64 4345     
     3B66 2D55     
     3B68 6E70     
     3B6A 6163     
     3B6C 6B20     
     3B6E 7072     
     3B70 6F67     
     3B72 7261     
     3B74 6D       
0095                                  even
0096 3B76 2E2E     txt.ruler          text    '.........'
     3B78 2E2E     
     3B7A 2E2E     
     3B7C 2E2E     
     3B7E 2E       
0097 3B7F   12                        byte    18
0098 3B80 2E2E                        text    '.........'
     3B82 2E2E     
     3B84 2E2E     
     3B86 2E2E     
     3B88 2E       
0099 3B89   13                        byte    19
0100 3B8A 2E2E                        text    '.........'
     3B8C 2E2E     
     3B8E 2E2E     
     3B90 2E2E     
     3B92 2E       
0101 3B93   14                        byte    20
0102 3B94 2E2E                        text    '.........'
     3B96 2E2E     
     3B98 2E2E     
     3B9A 2E2E     
     3B9C 2E       
0103 3B9D   15                        byte    21
0104 3B9E 2E2E                        text    '.........'
     3BA0 2E2E     
     3BA2 2E2E     
     3BA4 2E2E     
     3BA6 2E       
0105 3BA7   16                        byte    22
0106 3BA8 2E2E                        text    '.........'
     3BAA 2E2E     
     3BAC 2E2E     
     3BAE 2E2E     
     3BB0 2E       
0107 3BB1   17                        byte    23
0108 3BB2 2E2E                        text    '.........'
     3BB4 2E2E     
     3BB6 2E2E     
     3BB8 2E2E     
     3BBA 2E       
0109 3BBB   18                        byte    24
0110 3BBC 2E2E                        text    '.........'
     3BBE 2E2E     
     3BC0 2E2E     
     3BC2 2E2E     
     3BC4 2E       
0111 3BC5   19                        byte    25
0112                                  even
0113 3BC6 020E     txt.alpha.down     data >020e,>0f00
     3BC8 0F00     
0114 3BCA 0110     txt.vertline       data >0110
0115 3BCC 011C     txt.keymarker      byte 1,28
0116               
0117 3BCE 0120     txt.ws1            stri ' '
0118                                  even
0119 3BD0 0220     txt.ws2            stri '  '
     3BD2 20       
0120                                  even
0121 3BD4 0320     txt.ws3            stri '   '
     3BD6 2020     
0122                                  even
0123 3BD8 0420     txt.ws4            stri '    '
     3BDA 2020     
     3BDC 20       
0124                                  even
0125 3BDE 0520     txt.ws5            stri '     '
     3BE0 2020     
     3BE2 2020     
0126                                  even
0127      3BD8     txt.filetype.none  equ txt.ws4
=======
0008 38FA 012C     txt.delim          stri ','
0009                                  even
0010 38FC 0520     txt.bottom         stri '  BOT'
     38FE 2042     
     3900 4F54     
0011                                  even
0012 3902 044F     txt.ovrwrite       stri 'OVR '
     3904 5652     
     3906 20       
0013                                  even
0014 3908 0449     txt.insert         stri 'INS '
     390A 4E53     
     390C 20       
0015                                  even
0016 390E 0449     txt.autoinsert     stri 'INS+'
     3910 4E53     
     3912 2B       
0017                                  even
0018 3914 012A     txt.star           stri '*'
0019                                  even
0020 3916 0A4C     txt.loading        stri 'Loading...'
     3918 6F61     
     391A 6469     
     391C 6E67     
     391E 2E2E     
     3920 2E       
0021                                  even
0022 3922 0A53     txt.saving         stri 'Saving....'
     3924 6176     
     3926 696E     
     3928 672E     
     392A 2E2E     
     392C 2E       
0023                                  even
0024 392E 1250     txt.printing       stri 'Printing file.....'
     3930 7269     
     3932 6E74     
     3934 696E     
     3936 6720     
     3938 6669     
     393A 6C65     
     393C 2E2E     
     393E 2E2E     
     3940 2E       
0025                                  even
0026 3942 1244     txt.block.del      stri 'Deleting block....'
     3944 656C     
     3946 6574     
     3948 696E     
     394A 6720     
     394C 626C     
     394E 6F63     
     3950 6B2E     
     3952 2E2E     
     3954 2E       
0027                                  even
0028 3956 1143     txt.block.copy     stri 'Copying block....'
     3958 6F70     
     395A 7969     
     395C 6E67     
     395E 2062     
     3960 6C6F     
     3962 636B     
     3964 2E2E     
     3966 2E2E     
0029                                  even
0030 3968 104D     txt.block.move     stri 'Moving block....'
     396A 6F76     
     396C 696E     
     396E 6720     
     3970 626C     
     3972 6F63     
     3974 6B2E     
     3976 2E2E     
     3978 2E       
0031                                  even
0032 397A 1853     txt.block.save     stri 'Saving block to file....'
     397C 6176     
     397E 696E     
     3980 6720     
     3982 626C     
     3984 6F63     
     3986 6B20     
     3988 746F     
     398A 2066     
     398C 696C     
     398E 652E     
     3990 2E2E     
     3992 2E       
0033                                  even
0034 3994 1843     txt.block.clip     stri 'Copying to clipboard....'
     3996 6F70     
     3998 7969     
     399A 6E67     
     399C 2074     
     399E 6F20     
     39A0 636C     
     39A2 6970     
     39A4 626F     
     39A6 6172     
     39A8 642E     
     39AA 2E2E     
     39AC 2E       
0035                                  even
0036 39AE 1250     txt.block.print    stri 'Printing block....'
     39B0 7269     
     39B2 6E74     
     39B4 696E     
     39B6 6720     
     39B8 626C     
     39BA 6F63     
     39BC 6B2E     
     39BE 2E2E     
     39C0 2E       
0037                                  even
0038 39C2 1343     txt.clearmem       stri 'Clearing memory....'
     39C4 6C65     
     39C6 6172     
     39C8 696E     
     39CA 6720     
     39CC 6D65     
     39CE 6D6F     
     39D0 7279     
     39D2 2E2E     
     39D4 2E2E     
0039                                  even
0040 39D6 0E4C     txt.done.load      stri 'Load completed'
     39D8 6F61     
     39DA 6420     
     39DC 636F     
     39DE 6D70     
     39E0 6C65     
     39E2 7465     
     39E4 64       
0041                                  even
0042 39E6 1049     txt.done.insert    stri 'Insert completed'
     39E8 6E73     
     39EA 6572     
     39EC 7420     
     39EE 636F     
     39F0 6D70     
     39F2 6C65     
     39F4 7465     
     39F6 64       
0043                                  even
0044 39F8 1041     txt.done.append    stri 'Append completed'
     39FA 7070     
     39FC 656E     
     39FE 6420     
     3A00 636F     
     3A02 6D70     
     3A04 6C65     
     3A06 7465     
     3A08 64       
0045                                  even
0046 3A0A 0E53     txt.done.save      stri 'Save completed'
     3A0C 6176     
     3A0E 6520     
     3A10 636F     
     3A12 6D70     
     3A14 6C65     
     3A16 7465     
     3A18 64       
0047                                  even
0048 3A1A 0E43     txt.done.copy      stri 'Copy completed'
     3A1C 6F70     
     3A1E 7920     
     3A20 636F     
     3A22 6D70     
     3A24 6C65     
     3A26 7465     
     3A28 64       
0049                                  even
0050 3A2A 0F50     txt.done.print     stri 'Print completed'
     3A2C 7269     
     3A2E 6E74     
     3A30 2063     
     3A32 6F6D     
     3A34 706C     
     3A36 6574     
     3A38 6564     
0051                                  even
0052 3A3A 1044     txt.done.delete    stri 'Delete completed'
     3A3C 656C     
     3A3E 6574     
     3A40 6520     
     3A42 636F     
     3A44 6D70     
     3A46 6C65     
     3A48 7465     
     3A4A 64       
0053                                  even
0054 3A4C 0F43     txt.done.clipboard stri 'Clipboard saved'
     3A4E 6C69     
     3A50 7062     
     3A52 6F61     
     3A54 7264     
     3A56 2073     
     3A58 6176     
     3A5A 6564     
0055                                  even
0056 3A5C 0D43     txt.done.clipdev   stri 'Clipboard set'
     3A5E 6C69     
     3A60 7062     
     3A62 6F61     
     3A64 7264     
     3A66 2073     
     3A68 6574     
0057                                  even
0058 3A6A 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3A6C 7574     
     3A6E 6F69     
     3A70 6E73     
     3A72 6572     
     3A74 743A     
     3A76 206F     
     3A78 6E       
0059                                  even
0060 3A7A 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3A7C 7574     
     3A7E 6F69     
     3A80 6E73     
     3A82 6572     
     3A84 743A     
     3A86 206F     
     3A88 6666     
0061                                  even
0062 3A8A 0B46     txt.fastmode       stri 'Fastmode IO'
     3A8C 6173     
     3A8E 746D     
     3A90 6F64     
     3A92 6520     
     3A94 494F     
0063                                  even
0064 3A96 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     3A98 7870     
     3A9A 616E     
     3A9C 6469     
     3A9E 6E67     
     3AA0 2054     
     3AA2 4920     
     3AA4 4261     
     3AA6 7369     
     3AA8 6320     
     3AAA 6C69     
     3AAC 6E65     
     3AAE 2E2E     
     3AB0 2E2E     
0065                                  even
0066 3AB2 026B     txt.kb             stri 'kb'
     3AB4 62       
0067                                  even
0068 3AB6 054C     txt.lines          stri 'Lines'
     3AB8 696E     
     3ABA 6573     
0069                                  even
0070 3ABC 0A5B     txt.newfile        stri '[New file]'
     3ABE 4E65     
     3AC0 7720     
     3AC2 6669     
     3AC4 6C65     
     3AC6 5D       
0071                                  even
0072 3AC8 0D5B     txt.tib1           stri '[TI Basic #1]'
     3ACA 5449     
     3ACC 2042     
     3ACE 6173     
     3AD0 6963     
     3AD2 2023     
     3AD4 315D     
0073                                  even
0074 3AD6 0D5B     txt.tib2           stri '[TI Basic #2]'
     3AD8 5449     
     3ADA 2042     
     3ADC 6173     
     3ADE 6963     
     3AE0 2023     
     3AE2 325D     
0075                                  even
0076 3AE4 0D5B     txt.tib3           stri '[TI Basic #3]'
     3AE6 5449     
     3AE8 2042     
     3AEA 6173     
     3AEC 6963     
     3AEE 2023     
     3AF0 335D     
0077                                  even
0078 3AF2 0D5B     txt.tib4           stri '[TI Basic #4]'
     3AF4 5449     
     3AF6 2042     
     3AF8 6173     
     3AFA 6963     
     3AFC 2023     
     3AFE 345D     
0079                                  even
0080 3B00 0D5B     txt.tib5           stri '[TI Basic #5]'
     3B02 5449     
     3B04 2042     
     3B06 6173     
     3B08 6963     
     3B0A 2023     
     3B0C 355D     
0081                                  even
0082 3B0E 0444     txt.filetype.dv80  stri 'DV80'
     3B10 5638     
     3B12 30       
0083                                  even
0084 3B14 034D     txt.m1             stri 'M1='
     3B16 313D     
0085                                  even
0086 3B18 034D     txt.m2             stri 'M2='
     3B1A 323D     
0087                                  even
0088 3B1C 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3B1E 392D     
     3B20 4D65     
     3B22 6E75     
     3B24 2020     
     3B26 5E48     
     3B28 2D48     
     3B2A 656C     
     3B2C 7020     
     3B2E 205E     
     3B30 552D     
     3B32 5368     
     3B34 6F72     
     3B36 7463     
     3B38 7574     
     3B3A 73       
0089                                  even
0090 3B3C 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3B3E 392D     
     3B40 4D65     
     3B42 6E75     
     3B44 2020     
     3B46 5E48     
     3B48 2D48     
     3B4A 656C     
     3B4C 7020     
     3B4E 205E     
     3B50 552D     
     3B52 5368     
     3B54 6F72     
     3B56 7463     
     3B58 7574     
     3B5A 7320     
     3B5C 2046     
     3B5E 302D     
     3B60 4261     
     3B62 7369     
     3B64 6323     
0091                                  even
0092 3B66 3446     txt.keys.block     stri 'F9-Back  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3B68 392D     
     3B6A 4261     
     3B6C 636B     
     3B6E 2020     
     3B70 5E43     
     3B72 6F70     
     3B74 7920     
     3B76 5E4D     
     3B78 6F76     
     3B7A 6520     
     3B7C 5E44     
     3B7E 656C     
     3B80 205E     
     3B82 5361     
     3B84 7665     
     3B86 205E     
     3B88 5072     
     3B8A 696E     
     3B8C 7420     
     3B8E 5E5B     
     3B90 312D     
     3B92 335D     
     3B94 436C     
     3B96 6970     
     3B98 6272     
     3B9A 64       
0093                                  even
0094 3B9C 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3B9E 392D     
     3BA0 4261     
     3BA2 636B     
     3BA4 2020     
     3BA6 4635     
     3BA8 2D41     
     3BAA 7574     
     3BAC 6F55     
     3BAE 6E70     
     3BB0 6163     
     3BB2 6B20     
     3BB4 2053     
     3BB6 5041     
     3BB8 4345     
     3BBA 2D55     
     3BBC 6E70     
     3BBE 6163     
     3BC0 6B20     
     3BC2 7072     
     3BC4 6F67     
     3BC6 7261     
     3BC8 6D       
0095                                  even
0096 3BCA 2E2E     txt.ruler          text    '.........'
     3BCC 2E2E     
     3BCE 2E2E     
     3BD0 2E2E     
     3BD2 2E       
0097 3BD3   12                        byte    18
0098 3BD4 2E2E                        text    '.........'
     3BD6 2E2E     
     3BD8 2E2E     
     3BDA 2E2E     
     3BDC 2E       
0099 3BDD   13                        byte    19
0100 3BDE 2E2E                        text    '.........'
     3BE0 2E2E     
     3BE2 2E2E     
     3BE4 2E2E     
     3BE6 2E       
0101 3BE7   14                        byte    20
0102 3BE8 2E2E                        text    '.........'
     3BEA 2E2E     
     3BEC 2E2E     
     3BEE 2E2E     
     3BF0 2E       
0103 3BF1   15                        byte    21
0104 3BF2 2E2E                        text    '.........'
     3BF4 2E2E     
     3BF6 2E2E     
     3BF8 2E2E     
     3BFA 2E       
0105 3BFB   16                        byte    22
0106 3BFC 2E2E                        text    '.........'
     3BFE 2E2E     
     3C00 2E2E     
     3C02 2E2E     
     3C04 2E       
0107 3C05   17                        byte    23
0108 3C06 2E2E                        text    '.........'
     3C08 2E2E     
     3C0A 2E2E     
     3C0C 2E2E     
     3C0E 2E       
0109 3C0F   18                        byte    24
0110 3C10 2E2E                        text    '.........'
     3C12 2E2E     
     3C14 2E2E     
     3C16 2E2E     
     3C18 2E       
0111 3C19   19                        byte    25
0112                                  even
0113 3C1A 020E     txt.alpha.down     data >020e,>0f00
     3C1C 0F00     
0114 3C1E 0110     txt.vertline       data >0110
0115 3C20 011C     txt.keymarker      byte 1,28
0116               
0117 3C22 0120     txt.ws1            stri ' '
0118                                  even
0119 3C24 0220     txt.ws2            stri '  '
     3C26 20       
0120                                  even
0121 3C28 0320     txt.ws3            stri '   '
     3C2A 2020     
0122                                  even
0123 3C2C 0420     txt.ws4            stri '    '
     3C2E 2020     
     3C30 20       
0124                                  even
0125 3C32 0520     txt.ws5            stri '     '
     3C34 2020     
     3C36 2020     
0126                                  even
0127      3C2C     txt.filetype.none  equ txt.ws4
>>>>>>> b9b40bb (WIP optimize build scripts)
0128               
0129               
0130               ;--------------------------------------------------------------
0131               ; Strings for error line pane
0132               ;--------------------------------------------------------------
<<<<<<< HEAD
0133 3BE4 1546     txt.ioerr.load     stri 'Failed loading file: '
     3BE6 6169     
     3BE8 6C65     
     3BEA 6420     
     3BEC 6C6F     
     3BEE 6164     
     3BF0 696E     
     3BF2 6720     
     3BF4 6669     
     3BF6 6C65     
     3BF8 3A20     
0134                                  even
0135 3BFA 1446     txt.ioerr.save     stri 'Failed saving file: '
     3BFC 6169     
     3BFE 6C65     
     3C00 6420     
     3C02 7361     
     3C04 7669     
     3C06 6E67     
     3C08 2066     
     3C0A 696C     
     3C0C 653A     
     3C0E 20       
0136                                  even
0137 3C10 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3C12 6169     
     3C14 6C65     
     3C16 6420     
     3C18 7072     
     3C1A 696E     
     3C1C 7469     
     3C1E 6E67     
     3C20 2074     
     3C22 6F20     
     3C24 6465     
     3C26 7669     
     3C28 6365     
     3C2A 3A20     
0138                                  even
0139 3C2C 164E     txt.io.nofile      stri 'No filename specified.'
     3C2E 6F20     
     3C30 6669     
     3C32 6C65     
     3C34 6E61     
     3C36 6D65     
     3C38 2073     
     3C3A 7065     
     3C3C 6369     
     3C3E 6669     
     3C40 6564     
     3C42 2E       
0140                                  even
0141 3C44 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3C46 6E64     
     3C48 6578     
     3C4A 2066     
     3C4C 756C     
     3C4E 6C2E     
     3C50 2046     
     3C52 696C     
     3C54 6520     
     3C56 746F     
     3C58 6F20     
     3C5A 6C61     
     3C5C 7267     
     3C5E 6520     
     3C60 666F     
     3C62 7220     
     3C64 6564     
     3C66 6974     
     3C68 6F72     
     3C6A 2062     
     3C6C 7566     
     3C6E 6665     
     3C70 722E     
0142                                  even
0143 3C72 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3C74 6F70     
     3C76 792F     
     3C78 4D6F     
     3C7A 7665     
     3C7C 2074     
     3C7E 6172     
     3C80 6765     
     3C82 7420     
     3C84 6D75     
     3C86 7374     
     3C88 2062     
     3C8A 6520     
     3C8C 6F75     
     3C8E 7473     
     3C90 6964     
     3C92 6520     
     3C94 4D31     
     3C96 2D4D     
     3C98 3220     
     3C9A 7261     
     3C9C 6E67     
     3C9E 652E     
=======
0133 3C38 1546     txt.ioerr.load     stri 'Failed loading file: '
     3C3A 6169     
     3C3C 6C65     
     3C3E 6420     
     3C40 6C6F     
     3C42 6164     
     3C44 696E     
     3C46 6720     
     3C48 6669     
     3C4A 6C65     
     3C4C 3A20     
0134                                  even
0135 3C4E 1446     txt.ioerr.save     stri 'Failed saving file: '
     3C50 6169     
     3C52 6C65     
     3C54 6420     
     3C56 7361     
     3C58 7669     
     3C5A 6E67     
     3C5C 2066     
     3C5E 696C     
     3C60 653A     
     3C62 20       
0136                                  even
0137 3C64 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3C66 6169     
     3C68 6C65     
     3C6A 6420     
     3C6C 7072     
     3C6E 696E     
     3C70 7469     
     3C72 6E67     
     3C74 2074     
     3C76 6F20     
     3C78 6465     
     3C7A 7669     
     3C7C 6365     
     3C7E 3A20     
0138                                  even
0139 3C80 164E     txt.io.nofile      stri 'No filename specified.'
     3C82 6F20     
     3C84 6669     
     3C86 6C65     
     3C88 6E61     
     3C8A 6D65     
     3C8C 2073     
     3C8E 7065     
     3C90 6369     
     3C92 6669     
     3C94 6564     
     3C96 2E       
0140                                  even
0141 3C98 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3C9A 6E64     
     3C9C 6578     
     3C9E 2066     
     3CA0 756C     
     3CA2 6C2E     
     3CA4 2046     
     3CA6 696C     
     3CA8 6520     
     3CAA 746F     
     3CAC 6F20     
     3CAE 6C61     
     3CB0 7267     
     3CB2 6520     
     3CB4 666F     
     3CB6 7220     
     3CB8 6564     
     3CBA 6974     
     3CBC 6F72     
     3CBE 2062     
     3CC0 7566     
     3CC2 6665     
     3CC4 722E     
0142                                  even
0143 3CC6 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3CC8 6F70     
     3CCA 792F     
     3CCC 4D6F     
     3CCE 7665     
     3CD0 2074     
     3CD2 6172     
     3CD4 6765     
     3CD6 7420     
     3CD8 6D75     
     3CDA 7374     
     3CDC 2062     
     3CDE 6520     
     3CE0 6F75     
     3CE2 7473     
     3CE4 6964     
     3CE6 6520     
     3CE8 4D31     
     3CEA 2D4D     
     3CEC 3220     
     3CEE 7261     
     3CF0 6E67     
     3CF2 652E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0144                                  even
0145               
0146               ;--------------------------------------------------------------
0147               ; Strings for command buffer
0148               ;--------------------------------------------------------------
<<<<<<< HEAD
0149 3CA0 013E     txt.cmdb.prompt    stri '>'
0150                                  even
0151 3CA2 0D43     txt.colorscheme    stri 'Color scheme:'
     3CA4 6F6C     
     3CA6 6F72     
     3CA8 2073     
     3CAA 6368     
     3CAC 656D     
     3CAE 653A     
=======
0149 3CF4 013E     txt.cmdb.prompt    stri '>'
0150                                  even
0151 3CF6 0D43     txt.colorscheme    stri 'Color scheme:'
     3CF8 6F6C     
     3CFA 6F72     
     3CFC 2073     
     3CFE 6368     
     3D00 656D     
     3D02 653A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0152                                  even
                   < ram.resident.asm
0055                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
<<<<<<< HEAD
0007 3CB0 0650     def.printer.fname   stri 'PI.PIO'
     3CB2 492E     
     3CB4 5049     
     3CB6 4F       
0008 3CB7   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3CB8 4453     
     3CBA 4B31     
     3CBC 2E43     
     3CBE 4C49     
     3CC0 50       
0009 3CC1   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3CC2 4453     
     3CC4 4B32     
     3CC6 2E43     
     3CC8 4C49     
     3CCA 50       
0010 3CCB   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3CCC 5449     
     3CCE 5049     
     3CD0 2E43     
     3CD2 4C49     
     3CD4 50       
0011 3CD5   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3CD6 2C44     
     3CD8 534B     
     3CDA 2C48     
     3CDC 4458     
     3CDE 2C49     
     3CE0 4445     
     3CE2 2C50     
     3CE4 492E     
     3CE6 2C50     
     3CE8 494F     
     3CEA 2C54     
     3CEC 4950     
     3CEE 492E     
     3CF0 2C52     
     3CF2 442C     
     3CF4 5343     
     3CF6 532C     
     3CF8 5344     
     3CFA 442C     
     3CFC 5744     
     3CFE 532C     
     3D00 5253     
     3D02 3233     
     3D04 32       
0012 3D05   0C     def.mastcat         stri 'DSK6.MASTCAT'
     3D06 4453     
     3D08 4B36     
     3D0A 2E4D     
     3D0C 4153     
     3D0E 5443     
     3D10 4154     
=======
0007 3D04 0650     def.printer.fname   stri 'PI.PIO'
     3D06 492E     
     3D08 5049     
     3D0A 4F       
0008 3D0B   09     def.clip.fname      stri 'DSK1.CLIP'
     3D0C 4453     
     3D0E 4B31     
     3D10 2E43     
     3D12 4C49     
     3D14 50       
0009 3D15   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3D16 4453     
     3D18 4B32     
     3D1A 2E43     
     3D1C 4C49     
     3D1E 50       
0010 3D1F   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3D20 5449     
     3D22 5049     
     3D24 2E43     
     3D26 4C49     
     3D28 50       
0011 3D29   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3D2A 2C44     
     3D2C 534B     
     3D2E 2C48     
     3D30 4458     
     3D32 2C49     
     3D34 4445     
     3D36 2C50     
     3D38 492E     
     3D3A 2C50     
     3D3C 494F     
     3D3E 2C54     
     3D40 4950     
     3D42 492E     
     3D44 2C52     
     3D46 442C     
     3D48 5343     
     3D4A 532C     
     3D4C 5344     
     3D4E 442C     
     3D50 5744     
     3D52 532C     
     3D54 5253     
     3D56 3233     
     3D58 32       
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < ram.resident.asm
0056                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
<<<<<<< HEAD
0012 3D12 99              byte   >99                   ; \
0013 3D13   4F            text   'OKFG99'              ; | Send this to reload
     3D14 4B46     
     3D16 4739     
     3D18 39       
0014 3D19   99            byte   >99                   ; /
0015 3D1A 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3D1C 4D44     
     3D1E 47       
0016 3D1F   00            byte   >00, >00, >00         ; /
     3D20 0000     
0017 3D22 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3D24 0000            data   >0000                 ; Start address
=======
0012 3D5A 99              byte   >99                   ; \
0013 3D5B   4F            text   'OKFG99'              ; | Send this to reload
     3D5C 4B46     
     3D5E 4739     
     3D60 39       
0014 3D61   99            byte   >99                   ; /
0015 3D62 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3D64 4D44     
     3D66 47       
0016 3D67   00            byte   >00, >00, >00         ; /
     3D68 0000     
0017 3D6A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3D6C 0000            data   >0000                 ; Start address
>>>>>>> b9b40bb (WIP optimize build scripts)
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
<<<<<<< HEAD
0025 3D26 99              byte   >99                   ; \
0026 3D27   4F            text   'OKFG99'              ; | Send this to reload
     3D28 4B46     
     3D2A 4739     
     3D2C 39       
0027 3D2D   99            byte   >99                   ; /
0028 3D2E 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3D30 3239     
     3D32 4745     
     3D34 4D47     
0029                      ;                            ; /
0030 3D36 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3D38 0000            data   >0000                 ; Start address
=======
0025 3D6E 99              byte   >99                   ; \
0026 3D6F   4F            text   'OKFG99'              ; | Send this to reload
     3D70 4B46     
     3D72 4739     
     3D74 39       
0027 3D75   99            byte   >99                   ; /
0028 3D76 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3D78 3239     
     3D7A 4745     
     3D7C 4D47     
0029                      ;                            ; /
0030 3D7E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3D80 0000            data   >0000                 ; Start address
>>>>>>> b9b40bb (WIP optimize build scripts)
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
<<<<<<< HEAD
0038 3D3A 99              byte   >99                   ; \
0039 3D3B   4F            text   'OKFG99'              ; | Send this to reload
     3D3C 4B46     
     3D3E 4739     
     3D40 39       
0040 3D41   99            byte   >99                   ; /
0041 3D42 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3D44 4247     
0042 3D46 0000            byte   >00, >00, >00, >00    ; /
     3D48 0000     
0043 3D4A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3D4C 0000            data   >0000                 ; Start address
=======
0038 3D82 99              byte   >99                   ; \
0039 3D83   4F            text   'OKFG99'              ; | Send this to reload
     3D84 4B46     
     3D86 4739     
     3D88 39       
0040 3D89   99            byte   >99                   ; /
0041 3D8A 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3D8C 4247     
0042 3D8E 0000            byte   >00, >00, >00, >00    ; /
     3D90 0000     
0043 3D92 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3D94 0000            data   >0000                 ; Start address
>>>>>>> b9b40bb (WIP optimize build scripts)
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
<<<<<<< HEAD
0051 3D4E 99              byte   >99                   ; \
0052 3D4F   4F            text   'OKFG99'              ; | Send this to reload
     3D50 4B46     
     3D52 4739     
     3D54 39       
0053 3D55   99            byte   >99                   ; /
0054 3D56 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3D58 464F     
     3D5A 5254     
     3D5C 4843     
0055                      ;                            ; /
0056 3D5E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3D60 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b1.asm
0054                       ;------------------------------------------------------
0055                       ; Activate bank 1 and branch to  >6036
0056                       ;------------------------------------------------------
0057 3D62 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3D64 6002     
0058               
0062               
0063 3D66 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3D68 6046     
0064               ***************************************************************
0065               * Step 3: Include main editor modules
0066               ********|*****|*********************|**************************
0067               main:
0068                       aorg  kickstart.code2       ; >6046
0069 6046 0460  28         b     @main.stevie          ; Start editor
=======
0051 3D96 99              byte   >99                   ; \
0052 3D97   4F            text   'OKFG99'              ; | Send this to reload
     3D98 4B46     
     3D9A 4739     
     3D9C 39       
0053 3D9D   99            byte   >99                   ; /
0054 3D9E 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3DA0 464F     
     3DA2 5254     
     3DA4 4843     
0055                      ;                            ; /
0056 3DA6 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3DA8 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b1.asm
0050                       ;------------------------------------------------------
0051                       ; Activate bank 1 and branch to  >6036
0052                       ;------------------------------------------------------
0053 3DAA 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3DAC 6002     
0054               
0058               
0059 3DAE 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3DB0 6046     
0060               ***************************************************************
0061               * Step 3: Include main editor modules
0062               ********|*****|*********************|**************************
0063               main:
0064                       aorg  kickstart.code2       ; >6046
0065 6046 0460  28         b     @main.stevie          ; Start editor
>>>>>>> b9b40bb (WIP optimize build scripts)
     6048 604A     
0070                       ;-----------------------------------------------------------------------
0071                       ; Include files
0072                       ;-----------------------------------------------------------------------
0073                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 27FA     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 2686     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 272A     
0043               
0045               
0046 605E 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6060 2332     
0047 6062 3140                   data >3140            ; F18a VR49 (>31), bit 40
0048               
0050               
0051 6064 06A0  32         bl    @putvr                ; Turn on position based attributes
     6066 2332     
0052 6068 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 606A 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     606C 2332     
0055 606E 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 6070 06A0  32         bl    @filv
     6072 228E     
0060 6074 0000                   data >0000,32,vdp.sit.size
     6076 0020     
     6078 0960     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 607A 06A0  32         bl    @film
     607C 2236     
0066 607E A000                   data >a000,00,20000   ; Clear a000-eedf
     6080 0000     
     6082 4E20     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 6084 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6086 26A6     
0071 6088 06A0  32         bl    @s8x8                 ; Small sprite
     608A 26B6     
0072               
<<<<<<< HEAD
0073 6086 06A0  32         bl    @cpym2m
     6088 24DA     
0074 608A 3824                   data romsat,ramsat,14 ; Load sprite SAT
     608C A056     
     608E 000E     
0075               
0076 6090 C820  54         mov   @romsat+2,@tv.curshape
     6092 3826     
     6094 A214     
0077                                                   ; Save cursor shape & color
0078               
0079 6096 06A0  32         bl    @vdp.dump.patterns    ; Dump sprite and character patterns to VDP
     6098 7B6E     
0080               
0081 609A 04E0  34         clr   @parm1                ; Pick font 0
     609C A006     
0082 609E 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     60A0 7B82     
0083                                                   ; \ i  @parm1       = Font index (0-5)
0084                                                   ; / o  @tv.font.ptr = Pointer to font
0085               *--------------------------------------------------------------
0086               * Initialize
0087               *--------------------------------------------------------------
0088 60A2 06A0  32         bl    @mem.sams.setup.stevie
     60A4 60FE     
0089                                                   ; Load SAMS pages for stevie
0090               
0091 60A6 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60A8 32E6     
0092 60AA 06A0  32         bl    @tv.reset             ; Reset editor
     60AC 333E     
0093                       ;------------------------------------------------------
0094                       ; Load colorscheme amd turn on screen
0095                       ;------------------------------------------------------
0096 60AE 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60B0 A006     
0097 60B2 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60B4 A008     
0098 60B6 04E0  34         clr   @parm3                ; Colorize all panes
     60B8 A00A     
0099               
0100 60BA 06A0  32         bl    @pane.action.colorscheme.load
     60BC 71FE     
0101                                                   ; Reload color scheme
0102                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0103                                                   ; | i  @parm2 = Skip colorizing marked lines
0104                                                   ; |             if >FFFF
0105                                                   ; | i  @parm3 = Only colorize CMDB pane
0106                                                   ; /             if >FFFF
0107               
0108                       ;-------------------------------------------------------
0109                       ; Setup editor tasks
0110                       ;-------------------------------------------------------
0111 60BE 06A0  32         bl    @at
     60C0 26C6     
0112 60C2 0000                   data  >0000           ; Cursor YX position = >0000
0113               
0114 60C4 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60C6 A064     
0115 60C8 C804  30         mov   tmp0,@wtitab          ; /
     60CA 832C     
0116               
0127               
0128 60CC 06A0  32         bl    @mkslot
     60CE 2ECC     
0129 60D0 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60D2 7192     
0130 60D4 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60D6 3790     
0131 60D8 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60DA 3818     
0132 60DC FFFF                   data eol
0133               
0135               
0136 60DE 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60E0 0300     
0137 60E2 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60E4 8314     
0138                       ;-------------------------------------------------------
0139                       ; Setup keyboard scanning and start kernel/timers
0140                       ;-------------------------------------------------------
0141 60E6 06A0  32         bl    @mkhook
     60E8 2EB8     
0142 60EA 611C                   data edkey.keyscan.hook
0143                                                   ; Setup keyboard scanning hook
0144                       ;-------------------------------------------------------
0145                       ; Initialisation complete
0146                       ;-------------------------------------------------------
0147 60EC 06A0  32         bl    @magic.set            ; Set magic string
     60EE 7C74     
0148               
0149 60F0 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     60F2 37D7     
0150 60F4 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     60F6 8370     
0151 60F8 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0152                       ;-------------------------------------------------------
0153                       ; Start kernel
0154                       ;-------------------------------------------------------
0155 60FA 0460  28         b     @tmgr                 ; Run kernel and timers
     60FC 2E04     
=======
0073 608C 06A0  32         bl    @cpym2m
     608E 24DA     
0074 6090 3878                   data romsat,ramsat,14 ; Load sprite SAT
     6092 A056     
     6094 000E     
0075               
0076 6096 C820  54         mov   @romsat+2,@tv.curshape
     6098 387A     
     609A A214     
0077                                                   ; Save cursor shape & color
0078               
0079 609C 06A0  32         bl    @vdp.patterns.dump    ; Load sprite and character patterns
     609E 7BD4     
0080               *--------------------------------------------------------------
0081               * Initialize
0082               *--------------------------------------------------------------
0083 60A0 06A0  32         bl    @mem.sams.setup.stevie
     60A2 6100     
0084                                                   ; Load SAMS pages for stevie
0085               
0086 60A4 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60A6 32D4     
0087 60A8 06A0  32         bl    @tv.reset             ; Reset editor
     60AA 332C     
0088                       ;------------------------------------------------------
0089                       ; Load colorscheme amd turn on screen
0090                       ;------------------------------------------------------
0091 60AC 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60AE A006     
0092 60B0 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60B2 A008     
0093 60B4 04E0  34         clr   @parm3                ; Colorize all panes
     60B6 A00A     
0094               
0095 60B8 06A0  32         bl    @pane.action.colorscheme.load
     60BA 7264     
0096                                                   ; Reload color scheme
0097                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0098                                                   ; | i  @parm2 = Skip colorizing marked lines
0099                                                   ; |             if >FFFF
0100                                                   ; | i  @parm3 = Only colorize CMDB pane
0101                                                   ; /             if >FFFF
0102               
0103                       ;-------------------------------------------------------
0104                       ; Setup editor tasks
0105                       ;-------------------------------------------------------
0106 60BC 06A0  32         bl    @at
     60BE 26C6     
0107 60C0 0000                   data  >0000           ; Cursor YX position = >0000
0108               
0109 60C2 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60C4 A064     
0110 60C6 C804  30         mov   tmp0,@wtitab          ; /
     60C8 832C     
0111               
0113               
0114 60CA 06A0  32         bl    @mkslot
     60CC 2ECC     
0115 60CE 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60D0 71F8     
0116 60D2 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60D4 377E     
0117 60D6 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60D8 3820     
0118 60DA 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60DC 384E     
0119 60DE FFFF                   data eol
0120               
0130               
0131 60E0 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60E2 0300     
0132 60E4 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60E6 8314     
0133                       ;-------------------------------------------------------
0134                       ; Setup keyboard scanning and start kernel/timers
0135                       ;-------------------------------------------------------
0136 60E8 06A0  32         bl    @mkhook
     60EA 2EB8     
0137 60EC 611E                   data edkey.keyscan.hook
0138                                                   ; Setup keyboard scanning hook
0139                       ;-------------------------------------------------------
0140                       ; Initialisation complete
0141                       ;-------------------------------------------------------
0142 60EE 06A0  32         bl    @magic.set            ; Set magic string
     60F0 7CBC     
0143               
0144 60F2 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     60F4 37D7     
0145 60F6 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     60F8 8370     
0146 60FA 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0147                       ;-------------------------------------------------------
0148                       ; Start kernel
0149                       ;-------------------------------------------------------
0150 60FC 0460  28         b     @tmgr                 ; Run kernel and timers
     60FE 2E04     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Low-level modules
0076                       ;-----------------------------------------------------------------------
0077                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
<<<<<<< HEAD
0017 60FE 0649  14         dect  stack
0018 6100 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 6102 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     6104 7C50     
0023               
0024 6106 06A0  32         bl    @sams.layout.copy
     6108 263E     
0025 610A A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026               
0027 610C C820  54         mov   @tv.sams.c000,@edb.sams.page
     610E A208     
     6110 A518     
0028 6112 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6114 A518     
     6116 A51A     
=======
0017 6100 0649  14         dect  stack
0018 6102 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 6104 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     6106 7C98     
0023               
0024 6108 06A0  32         bl    @sams.layout.copy
     610A 263E     
0025 610C A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026               
0027 610E C820  54         mov   @tv.sams.c000,@edb.sams.page
     6110 A208     
     6112 A518     
0028 6114 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6116 A518     
     6118 A51A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0029                                                   ; Track editor buffer SAMS page
0030                       ;------------------------------------------------------
0031                       ; Exit
0032                       ;------------------------------------------------------
0033               mem.sams.setup.stevie.exit:
<<<<<<< HEAD
0034 6118 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 611A 045B  20         b     *r11                  ; Return to caller
=======
0034 611A C2F9  30         mov   *stack+,r11           ; Pop r11
0035 611C 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Keyboard actions
0080                       ;-----------------------------------------------------------------------
0081                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
<<<<<<< HEAD
0012 611C 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     611E A900     
0013                                                   ; on the stack anymore.
0014               
0015 6120 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6122 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6124 FFCE     
0020 6126 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6128 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 612A 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     612C 200A     
0025 612E 160A  14         jne   edkey.keyscan.hook.clear
=======
0012 611E 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6120 A900     
0013                                                   ; on the stack anymore.
0014               
0015 6122 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6124 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6126 FFCE     
0020 6128 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     612A 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 612C 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     612E 200A     
0025 6130 160A  14         jne   edkey.keyscan.hook.clear
>>>>>>> b9b40bb (WIP optimize build scripts)
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
<<<<<<< HEAD
0030 6130 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6132 200A     
0031 6134 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     6136 2002     
     6138 A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 613A C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     613C A028     
     613E A02A     
0036 6140 0460  28         b     @edkey.key.process    ; Process key
     6142 6164     
=======
0030 6132 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6134 200A     
0031 6136 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     6138 2002     
     613A A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 613C C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     613E A028     
     6140 A02A     
0036 6142 0460  28         b     @edkey.key.process    ; Process key
     6144 6166     
>>>>>>> b9b40bb (WIP optimize build scripts)
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
<<<<<<< HEAD
0041 6144 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     6146 A026     
0042 6148 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     614A 2002     
0043 614C 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 614E 04E0  34         clr   @keycode1             ; \
     6150 A028     
0047 6152 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6154 A02A     
0048 6156 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     6158 0001     
0049 615A C804  38         mov   tmp0,@kbflags         ; /
     615C A026     
=======
0041 6146 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     6148 A026     
0042 614A 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     614C 2002     
0043 614E 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6150 04E0  34         clr   @keycode1             ; \
     6152 A028     
0047 6154 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6156 A02A     
0048 6158 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     615A 0001     
0049 615C C804  38         mov   tmp0,@kbflags         ; /
     615E A026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                       ;------------------------------------------------------
0051                       ; Keyboard debounce
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.debounce:
<<<<<<< HEAD
0054 615E 1000  14         nop                         ; No purpose anymore, but branched to
=======
0054 6160 1000  14         nop                         ; No purpose anymore, but branched to
>>>>>>> b9b40bb (WIP optimize build scripts)
0055                                                   ; from several subroutines.
0056                                                   ; Needs to be refactored.
0057                       ;------------------------------------------------------
0058                       ; Exit keyboard hook
0059                       ;------------------------------------------------------
0060               edkey.keyscan.hook.exit:
<<<<<<< HEAD
0061 6160 0460  28         b     @hookok               ; Return
     6162 2E08     
=======
0061 6162 0460  28         b     @hookok               ; Return
     6164 2E08     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0082                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
<<<<<<< HEAD
0008 6164 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     6166 A028     
0009 6168 0A85  32         sla   tmp1,8                ; Move to MSB
0010 616A 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 616C C1A0  34         mov   @tv.pane.focus,tmp2
     616E A224     
0015 6170 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     6172 0000     
0016 6174 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 6176 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     6178 0001     
0020 617A 1322  14         jeq   edkey.key.process.loadmap.cmdb
=======
0008 6166 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     6168 A028     
0009 616A 0A85  32         sla   tmp1,8                ; Move to MSB
0010 616C 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 616E C1A0  34         mov   @tv.pane.focus,tmp2
     6170 A222     
0015 6172 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     6174 0000     
0016 6176 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 6178 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     617A 0001     
0020 617C 1322  14         jeq   edkey.key.process.loadmap.cmdb
>>>>>>> b9b40bb (WIP optimize build scripts)
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
<<<<<<< HEAD
0025 617C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     617E FFCE     
0026 6180 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6182 2026     
=======
0025 617E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6180 FFCE     
0026 6182 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6184 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
<<<<<<< HEAD
0031 6184 0285  22         ci    tmp1,>2000            ; Space key pressed?
     6186 2000     
0032 6188 1618  14         jne   edkey.key.process.loadmap.editor
=======
0031 6186 0285  22         ci    tmp1,>2000            ; Space key pressed?
     6188 2000     
0032 618A 1618  14         jne   edkey.key.process.loadmap.editor
>>>>>>> b9b40bb (WIP optimize build scripts)
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
<<<<<<< HEAD
0037 618A 0649  14         dect  stack
0038 618C C644  30         mov   tmp0,*stack           ; Push tmp0
0039 618E 0649  14         dect  stack
0040 6190 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 6192 0649  14         dect  stack
0042 6194 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 6196 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 6198 020C  20         li    r12,>0024             ; CRU address decoder
     619A 0024     
0046 619C 30C4  30         ldcr  tmp0,3                ; Select column
0047 619E 020C  20         li    r12,>0006             ; Address of the first row
     61A0 0006     
0048 61A2 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61A4 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61A6 4000     
0050 61A8 1605  14         jne   edkey.key.process.special.postprocess
=======
0037 618C 0649  14         dect  stack
0038 618E C644  30         mov   tmp0,*stack           ; Push tmp0
0039 6190 0649  14         dect  stack
0040 6192 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 6194 0649  14         dect  stack
0042 6196 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 6198 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 619A 020C  20         li    r12,>0024             ; CRU address decoder
     619C 0024     
0046 619E 30C4  30         ldcr  tmp0,3                ; Select column
0047 61A0 020C  20         li    r12,>0006             ; Address of the first row
     61A2 0006     
0048 61A4 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61A6 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61A8 4000     
0050 61AA 1605  14         jne   edkey.key.process.special.postprocess
>>>>>>> b9b40bb (WIP optimize build scripts)
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
<<<<<<< HEAD
0055 61AA C339  30         mov   *stack+,r12           ; Pop r12
0056 61AC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61AE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61B0 0460  28         b     @edkey.action.block.mark
     61B2 69B4     
=======
0055 61AC C339  30         mov   *stack+,r12           ; Pop r12
0056 61AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61B2 0460  28         b     @edkey.action.block.mark
     61B4 68EA     
>>>>>>> b9b40bb (WIP optimize build scripts)
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
<<<<<<< HEAD
0064 61B4 C339  30         mov   *stack+,r12           ; Pop r12
0065 61B6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61B8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
=======
0064 61B6 C339  30         mov   *stack+,r12           ; Pop r12
0065 61B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
>>>>>>> b9b40bb (WIP optimize build scripts)
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
<<<<<<< HEAD
0071 61BA 0206  20         li    tmp2,keymap_actions.editor
     61BC 7CAA     
0072 61BE 1002  14         jmp   edkey.key.check.next
=======
0071 61BC 0206  20         li    tmp2,keymap_actions.editor
     61BE 7CF2     
0072 61C0 1002  14         jmp   edkey.key.check.next
>>>>>>> b9b40bb (WIP optimize build scripts)
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
<<<<<<< HEAD
0077 61C0 0206  20         li    tmp2,keymap_actions.cmdb
     61C2 7D84     
=======
0077 61C2 0206  20         li    tmp2,keymap_actions.cmdb
     61C4 7DC8     
>>>>>>> b9b40bb (WIP optimize build scripts)
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
<<<<<<< HEAD
0082 61C4 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61C6 1328  14         jeq   edkey.key.process.addbuffer
=======
0082 61C6 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61C8 1328  14         jeq   edkey.key.process.addbuffer
>>>>>>> b9b40bb (WIP optimize build scripts)
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
<<<<<<< HEAD
0089 61C8 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61CA 130F  14         jeq   edkey.key.check.scope
=======
0089 61CA 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61CC 130F  14         jeq   edkey.key.check.scope
>>>>>>> b9b40bb (WIP optimize build scripts)
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
<<<<<<< HEAD
0095 61CC 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61CE 6100     
0096 61D0 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61D2 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61D4 7A00     
0099 61D6 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61D8 0225  22         ai    tmp1,->2000           ; Make uppercase
     61DA E000     
0102 61DC 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61DE 1305  14         jeq   edkey.key.check.scope
=======
0095 61CE 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61D0 6100     
0096 61D2 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61D4 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61D6 7A00     
0099 61D8 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61DA 0225  22         ai    tmp1,->2000           ; Make uppercase
     61DC E000     
0102 61DE 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61E0 1305  14         jeq   edkey.key.check.scope
>>>>>>> b9b40bb (WIP optimize build scripts)
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
<<<<<<< HEAD
0108 61E0 0225  22         ai    tmp1,>2000            ; Make lowercase
     61E2 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61E4 0226  22         ai    tmp2,4                ; Skip current entry
     61E6 0004     
0112 61E8 10ED  14         jmp   edkey.key.check.next  ; Check next entry
=======
0108 61E2 0225  22         ai    tmp1,>2000            ; Make lowercase
     61E4 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61E6 0226  22         ai    tmp2,4                ; Skip current entry
     61E8 0004     
0112 61EA 10ED  14         jmp   edkey.key.check.next  ; Check next entry
>>>>>>> b9b40bb (WIP optimize build scripts)
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
<<<<<<< HEAD
0117 61EA 0586  14         inc   tmp2                  ; Move to scope
0118 61EC 9816  42         cb    *tmp2,@tv.pane.focus+1
     61EE A225     
0119                                                   ; (1) Process key if scope matches pane
0120 61F0 1309  14         jeq   edkey.key.process.action
0121               
0122 61F2 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     61F4 A71D     
0123 61F6 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 61F8 0226  22         ai    tmp2,3                ; Skip current entry
     61FA 0003     
0128 61FC C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     61FE A028     
0129 6200 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6202 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
=======
0117 61EC 0586  14         inc   tmp2                  ; Move to scope
0118 61EE 9816  42         cb    *tmp2,@tv.pane.focus+1
     61F0 A223     
0119                                                   ; (1) Process key if scope matches pane
0120 61F2 1309  14         jeq   edkey.key.process.action
0121               
0122 61F4 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     61F6 A71D     
0123 61F8 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 61FA 0226  22         ai    tmp2,3                ; Skip current entry
     61FC 0003     
0128 61FE C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     6200 A028     
0129 6202 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6204 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
>>>>>>> b9b40bb (WIP optimize build scripts)
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
<<<<<<< HEAD
0135 6204 0586  14         inc   tmp2                  ; Move to action address
0136 6206 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 6208 0204  20         li    tmp0,id.dialog.unsaved
     620A 0065     
0139 620C 8120  34         c     @cmdb.dialog,tmp0
     620E A71C     
0140 6210 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6212 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6214 A72C     
0143 6216 0456  20 !       b     *tmp2                 ; Process key action
=======
0135 6206 0586  14         inc   tmp2                  ; Move to action address
0136 6208 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 620A 0204  20         li    tmp0,id.dialog.unsaved
     620C 0065     
0139 620E 8120  34         c     @cmdb.dialog,tmp0
     6210 A71C     
0140 6212 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6214 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6216 A72C     
0143 6218 0456  20 !       b     *tmp2                 ; Process key action
>>>>>>> b9b40bb (WIP optimize build scripts)
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
<<<<<<< HEAD
0148 6218 C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     621A A224     
0149 621C 1602  14         jne   !                     ; No, skip frame buffer
0150 621E 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6220 6806     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 6222 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     6224 0001     
0155 6226 1607  14         jne   edkey.key.process.crash
=======
0148 621A C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     621C A222     
0149 621E 1602  14         jne   !                     ; No, skip frame buffer
0150 6220 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6222 67D4     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 6224 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     6226 0001     
0155 6228 1607  14         jne   edkey.key.process.crash
>>>>>>> b9b40bb (WIP optimize build scripts)
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
<<<<<<< HEAD
0160 6228 C120  34         mov   @cmdb.dialog,tmp0
     622A A71C     
0161 622C 0284  22         ci    tmp0,99
     622E 0063     
0162 6230 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 6232 0460  28         b     @edkey.action.cmdb.char
     6234 6B42     
=======
0160 622A C120  34         mov   @cmdb.dialog,tmp0
     622C A71C     
0161 622E 0284  22         ci    tmp0,99
     6230 0063     
0162 6232 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 6234 0460  28         b     @edkey.action.cmdb.char
     6236 6A6C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
<<<<<<< HEAD
0172 6236 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6238 FFCE     
0173 623A 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     623C 2026     
=======
0172 6238 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     623A FFCE     
0173 623C 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     623E 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0174                       ;-------------------------------------------------------
0175                       ; Check ENTER key if ID >= 100 and close pane if match
0176                       ;-------------------------------------------------------
0177               edkey.key.process.enter:
<<<<<<< HEAD
0178 623E C120  34         mov   @keycode1,tmp0        ; Get key
     6240 A028     
0179 6242 0284  22         ci    tmp0,key.space        ; SPACE ?
     6244 0020     
0180 6246 1602  14         jne   edkey.key.process.exit
0181 6248 0460  28         b     @edkey.action.cmdb.close.dialog
     624A 6F22     
=======
0178 6240 C120  34         mov   @keycode1,tmp0        ; Get key
     6242 A028     
0179 6244 0284  22         ci    tmp0,key.space        ; SPACE ?
     6246 0020     
0180 6248 1602  14         jne   edkey.key.process.exit
0181 624A 0460  28         b     @edkey.action.cmdb.close.dialog
     624C 6E2A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0182                       ;-------------------------------------------------------
0183                       ; Exit
0184                       ;-------------------------------------------------------
0185               edkey.key.process.exit:
<<<<<<< HEAD
0186 624C 0460  28         b     @edkey.keyscan.hook.debounce
     624E 615E     
=======
0186 624E 0460  28         b     @edkey.keyscan.hook.debounce
     6250 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0187                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; Keyboard actions - Framebuffer (1)
0085                       ;-----------------------------------------------------------------------
0086                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
<<<<<<< HEAD
0008 6250 C120  34         mov   @fb.column,tmp0
     6252 A30C     
0009 6254 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6256 0620  34         dec   @fb.column            ; Column-- in screen buffer
     6258 A30C     
0014 625A 0620  26         dec   @wyx                  ; Column-- VDP cursor
     625C 832A     
0015 625E 0620  34         dec   @fb.current
     6260 A302     
0016 6262 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6264 A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 6266 0460  28 !       b     @edkey.keyscan.hook.debounce
     6268 615E     
=======
0008 6252 C120  34         mov   @fb.column,tmp0
     6254 A30C     
0009 6256 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6258 0620  34         dec   @fb.column            ; Column-- in screen buffer
     625A A30C     
0014 625C 0620  26         dec   @wyx                  ; Column-- VDP cursor
     625E 832A     
0015 6260 0620  34         dec   @fb.current
     6262 A302     
0016 6264 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6266 A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 6268 0460  28 !       b     @edkey.keyscan.hook.debounce
     626A 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
<<<<<<< HEAD
0028 626A 8820  50         c     @fb.column,@fb.row.length
     626C A30C     
     626E A308     
0029 6270 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 6272 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6274 A30C     
0034 6276 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6278 832A     
0035 627A 05A0  34         inc   @fb.current
     627C A302     
0036 627E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6280 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 6282 0460  28 !       b     @edkey.keyscan.hook.debounce
     6284 615E     
=======
0028 626C 8820  50         c     @fb.column,@fb.row.length
     626E A30C     
     6270 A308     
0029 6272 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 6274 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6276 A30C     
0034 6278 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     627A 832A     
0035 627C 05A0  34         inc   @fb.current
     627E A302     
0036 6280 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6282 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 6284 0460  28 !       b     @edkey.keyscan.hook.debounce
     6286 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
<<<<<<< HEAD
0048 6286 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     6288 7ADC     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 628A 0460  28         b     @edkey.keyscan.hook.debounce
     628C 615E     
=======
0048 6288 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     628A 6F96     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 628C 0460  28         b     @edkey.keyscan.hook.debounce
     628E 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
<<<<<<< HEAD
0060 628E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6290 A31A     
0061 6292 C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     6294 A308     
0062 6296 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     6298 0050     
0063 629A 1102  14         jlt   !                     ; | is right of last character on line,
0064 629C 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     629E 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 62A0 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     62A2 A30C     
0069 62A4 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     62A6 26DE     
0070               
0071 62A8 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62AA 30EC     
0072                                                   ; \ i   @fb.top      = Address top row in FB
0073                                                   ; | i   @fb.topline  = Top line in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; |                  (offset 0..@fb.scrrows)
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; | i   @fb.colsline = Columns per line FB
0078                                                   ; |
0079                                                   ; / o   @fb.current  = Updated pointer
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083 62AC 0460  28         b     @edkey.keyscan.hook.debounce
     62AE 615E     
0084                                                   ; Back to editor main
=======
0060 6290 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6292 A31A     
0061 6294 C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     6296 A308     
0062 6298 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     629A 0050     
0063 629C 1102  14         jlt   !                     ; | is right of last character on line,
0064 629E 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     62A0 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 62A2 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     62A4 A30C     
0069 62A6 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     62A8 26DE     
0070 62AA 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62AC 30DA     
0071                       ;-------------------------------------------------------
0072                       ; Exit
0073                       ;-------------------------------------------------------
0074 62AE 0460  28         b     @edkey.keyscan.hook.debounce
     62B0 6160     
0075                                                   ; Back to editor main
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
<<<<<<< HEAD
0008 62B0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62B2 A31A     
0009 62B4 C120  34         mov   @fb.column,tmp0
     62B6 A30C     
0010 62B8 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62BA C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62BC A302     
0015 62BE 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62C0 1003  14         jmp   edkey.action.pword_scan_char
=======
0008 62B2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62B4 A31A     
0009 62B6 C120  34         mov   @fb.column,tmp0
     62B8 A30C     
0010 62BA 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62BC C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62BE A302     
0015 62C0 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62C2 1003  14         jmp   edkey.action.pword_scan_char
>>>>>>> b9b40bb (WIP optimize build scripts)
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
<<<<<<< HEAD
0021 62C2 0605  14         dec   tmp1
0022 62C4 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62C6 1315  14         jeq   edkey.action.pword_done
=======
0021 62C4 0605  14         dec   tmp1
0022 62C6 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62C8 1315  14         jeq   edkey.action.pword_done
>>>>>>> b9b40bb (WIP optimize build scripts)
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
<<<<<<< HEAD
0029 62C8 D195  26         movb  *tmp1,tmp2            ; Get character
0030 62CA 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62CC D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62CE 0986  32         srl   tmp2,8                ; Right justify
0033 62D0 0286  22         ci    tmp2,32               ; Space character found?
     62D2 0020     
0034 62D4 16F6  14         jne   edkey.action.pword_scan
=======
0029 62CA D195  26         movb  *tmp1,tmp2            ; Get character
0030 62CC 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62CE D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62D0 0986  32         srl   tmp2,8                ; Right justify
0033 62D2 0286  22         ci    tmp2,32               ; Space character found?
     62D4 0020     
0034 62D6 16F6  14         jne   edkey.action.pword_scan
>>>>>>> b9b40bb (WIP optimize build scripts)
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
<<<<<<< HEAD
0039 62D6 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62D8 2020     
0040 62DA 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62DC 0287  22         ci    tmp3,>20ff            ; First character is space
     62DE 20FF     
0043 62E0 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62E2 C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62E4 A30C     
0048 62E6 61C4  18         s     tmp0,tmp3
0049 62E8 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62EA 0002     
0050 62EC 11EA  14         jlt   edkey.action.pword_scan
=======
0039 62D8 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62DA 2020     
0040 62DC 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62DE 0287  22         ci    tmp3,>20ff            ; First character is space
     62E0 20FF     
0043 62E2 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62E4 C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62E6 A30C     
0048 62E8 61C4  18         s     tmp0,tmp3
0049 62EA 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62EC 0002     
0050 62EE 11EA  14         jlt   edkey.action.pword_scan
>>>>>>> b9b40bb (WIP optimize build scripts)
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
<<<<<<< HEAD
0055 62EE 0585  14         inc   tmp1
0056 62F0 0584  14         inc   tmp0                  ; Column++ in screen buffer
=======
0055 62F0 0585  14         inc   tmp1
0056 62F2 0584  14         inc   tmp0                  ; Column++ in screen buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
<<<<<<< HEAD
0061 62F2 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     62F4 A30C     
0062 62F6 06A0  32         bl    @xsetx                ; Set VDP cursor X
     62F8 26DE     
=======
0061 62F4 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     62F6 A30C     
0062 62F8 06A0  32         bl    @xsetx                ; Set VDP cursor X
     62FA 26DE     
>>>>>>> b9b40bb (WIP optimize build scripts)
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
<<<<<<< HEAD
0067 62FA 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62FC 30EC     
0068                                                   ; \ i   @fb.top      = Address top row in FB
0069                                                   ; | i   @fb.topline  = Top line in FB
0070                                                   ; | i   @fb.row      = Current row in FB
0071                                                   ; |                  (offset 0..@fb.scrrows)
0072                                                   ; | i   @fb.column   = Current column in FB
0073                                                   ; | i   @fb.colsline = Columns per line FB
0074                                                   ; |
0075                                                   ; / o   @fb.current  = Updated pointer
0076               
0077 62FE 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6300 615E     
0078               
0079               
0080               
0081               *---------------------------------------------------------------
0082               * Cursor next word
0083               *---------------------------------------------------------------
0084               edkey.action.nword:
0085 6302 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6304 A31A     
0086 6306 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0087 6308 C120  34         mov   @fb.column,tmp0
     630A A30C     
0088 630C 8804  34         c     tmp0,@fb.row.length
     630E A308     
0089 6310 1426  14         jhe   !                     ; column=last char ? Skip further processing
0090                       ;-------------------------------------------------------
0091                       ; Prepare 2 char buffer
0092                       ;-------------------------------------------------------
0093 6312 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6314 A302     
0094 6316 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0095 6318 1006  14         jmp   edkey.action.nword_scan_char
0096                       ;-------------------------------------------------------
0097                       ; Multiple spaces mode
0098                       ;-------------------------------------------------------
0099               edkey.action.nword_ms:
0100 631A 0708  14         seto  tmp4                  ; Set multiple spaces mode
=======
0067 62FC 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62FE 30DA     
0068 6300 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6302 6160     
0069               
0070               
0071               
0072               *---------------------------------------------------------------
0073               * Cursor next word
0074               *---------------------------------------------------------------
0075               edkey.action.nword:
0076 6304 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6306 A31A     
0077 6308 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0078 630A C120  34         mov   @fb.column,tmp0
     630C A30C     
0079 630E 8804  34         c     tmp0,@fb.row.length
     6310 A308     
0080 6312 1426  14         jhe   !                     ; column=last char ? Skip further processing
0081                       ;-------------------------------------------------------
0082                       ; Prepare 2 char buffer
0083                       ;-------------------------------------------------------
0084 6314 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6316 A302     
0085 6318 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0086 631A 1006  14         jmp   edkey.action.nword_scan_char
0087                       ;-------------------------------------------------------
0088                       ; Multiple spaces mode
0089                       ;-------------------------------------------------------
0090               edkey.action.nword_ms:
0091 631C 0708  14         seto  tmp4                  ; Set multiple spaces mode
0092                       ;-------------------------------------------------------
0093                       ; Scan forward to first character following space
0094                       ;-------------------------------------------------------
0095               edkey.action.nword_scan
0096 631E 0585  14         inc   tmp1
0097 6320 0584  14         inc   tmp0                  ; Column++ in screen buffer
0098 6322 8804  34         c     tmp0,@fb.row.length
     6324 A308     
0099 6326 1316  14         jeq   edkey.action.nword_done
0100                                                   ; Column=last char ? Skip further processing
>>>>>>> b9b40bb (WIP optimize build scripts)
0101                       ;-------------------------------------------------------
0102                       ; Scan forward to first character following space
0103                       ;-------------------------------------------------------
<<<<<<< HEAD
0104               edkey.action.nword_scan
0105 631C 0585  14         inc   tmp1
0106 631E 0584  14         inc   tmp0                  ; Column++ in screen buffer
0107 6320 8804  34         c     tmp0,@fb.row.length
     6322 A308     
0108 6324 1316  14         jeq   edkey.action.nword_done
0109                                                   ; Column=last char ? Skip further processing
0110                       ;-------------------------------------------------------
0111                       ; Check character
0112                       ;-------------------------------------------------------
0113               edkey.action.nword_scan_char
0114 6326 D195  26         movb  *tmp1,tmp2            ; Get character
0115 6328 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0116 632A D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0117 632C 0986  32         srl   tmp2,8                ; Right justify
0118               
0119 632E 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6330 FFFF     
0120 6332 1604  14         jne   edkey.action.nword_scan_char_other
0121                       ;-------------------------------------------------------
0122                       ; Special handling if multiple spaces found
0123                       ;-------------------------------------------------------
0124               edkey.action.nword_scan_char_ms:
0125 6334 0286  22         ci    tmp2,32
     6336 0020     
0126 6338 160C  14         jne   edkey.action.nword_done
0127                                                   ; Exit if non-space found
0128 633A 10F0  14         jmp   edkey.action.nword_scan
0129                       ;-------------------------------------------------------
0130                       ; Normal handling
0131                       ;-------------------------------------------------------
0132               edkey.action.nword_scan_char_other:
0133 633C 0286  22         ci    tmp2,32               ; Space character found?
     633E 0020     
0134 6340 16ED  14         jne   edkey.action.nword_scan
0135                                                   ; No space found, try again
0136                       ;-------------------------------------------------------
0137                       ; Space found, now look closer
0138                       ;-------------------------------------------------------
0139 6342 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6344 2020     
0140 6346 13E9  14         jeq   edkey.action.nword_ms
0141                                                   ; Yes, so continue scanning
0142 6348 0287  22         ci    tmp3,>20ff            ; First characer is space?
     634A 20FF     
0143 634C 13E7  14         jeq   edkey.action.nword_scan
0144                       ;--------------------------------------------------------
0145                       ; Set cursor following space
0146                       ;--------------------------------------------------------
0147 634E 0585  14         inc   tmp1
0148 6350 0584  14         inc   tmp0                  ; Column++ in screen buffer
0149                       ;-------------------------------------------------------
0150                       ; Save position and position hardware cursor
0151                       ;-------------------------------------------------------
0152               edkey.action.nword_done:
0153 6352 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6354 A30C     
0154 6356 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6358 26DE     
0155                       ;-------------------------------------------------------
0156                       ; Exit
0157                       ;-------------------------------------------------------
0158               edkey.action.nword.exit:
0159 635A 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     635C 30EC     
0160                                                   ; \ i   @fb.top      = Address top row in FB
0161                                                   ; | i   @fb.topline  = Top line in FB
0162                                                   ; | i   @fb.row      = Current row in FB
0163                                                   ; |                  (offset 0..@fb.scrrows)
0164                                                   ; | i   @fb.column   = Current column in FB
0165                                                   ; | i   @fb.colsline = Columns per line FB
0166                                                   ; |
0167                                                   ; / o   @fb.current  = Updated pointer
0168               
0169 635E 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6360 615E     
=======
0104               edkey.action.nword_scan_char
0105 6328 D195  26         movb  *tmp1,tmp2            ; Get character
0106 632A 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0107 632C D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0108 632E 0986  32         srl   tmp2,8                ; Right justify
0109               
0110 6330 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6332 FFFF     
0111 6334 1604  14         jne   edkey.action.nword_scan_char_other
0112                       ;-------------------------------------------------------
0113                       ; Special handling if multiple spaces found
0114                       ;-------------------------------------------------------
0115               edkey.action.nword_scan_char_ms:
0116 6336 0286  22         ci    tmp2,32
     6338 0020     
0117 633A 160C  14         jne   edkey.action.nword_done
0118                                                   ; Exit if non-space found
0119 633C 10F0  14         jmp   edkey.action.nword_scan
0120                       ;-------------------------------------------------------
0121                       ; Normal handling
0122                       ;-------------------------------------------------------
0123               edkey.action.nword_scan_char_other:
0124 633E 0286  22         ci    tmp2,32               ; Space character found?
     6340 0020     
0125 6342 16ED  14         jne   edkey.action.nword_scan
0126                                                   ; No space found, try again
0127                       ;-------------------------------------------------------
0128                       ; Space found, now look closer
0129                       ;-------------------------------------------------------
0130 6344 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6346 2020     
0131 6348 13E9  14         jeq   edkey.action.nword_ms
0132                                                   ; Yes, so continue scanning
0133 634A 0287  22         ci    tmp3,>20ff            ; First characer is space?
     634C 20FF     
0134 634E 13E7  14         jeq   edkey.action.nword_scan
0135                       ;--------------------------------------------------------
0136                       ; Set cursor following space
0137                       ;--------------------------------------------------------
0138 6350 0585  14         inc   tmp1
0139 6352 0584  14         inc   tmp0                  ; Column++ in screen buffer
0140                       ;-------------------------------------------------------
0141                       ; Save position and position hardware cursor
0142                       ;-------------------------------------------------------
0143               edkey.action.nword_done:
0144 6354 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6356 A30C     
0145 6358 06A0  32         bl    @xsetx                ; Set VDP cursor X
     635A 26DE     
0146                       ;-------------------------------------------------------
0147                       ; Exit
0148                       ;-------------------------------------------------------
0149               edkey.action.nword.exit:
0150 635C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     635E 30DA     
0151 6360 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6362 6160     
0152               
0153               
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
<<<<<<< HEAD
0008 6362 C120  34         mov   @fb.vwco,tmp0
     6364 A310     
0009 6366 0284  22         ci    tmp0,16
     6368 0010     
0010 636A 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 636C 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 636E 04E0  34         clr   @parm1
     6370 A006     
0016 6372 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 6374 0224  22 !       ai    tmp0,-16              ; Scroll left
     6376 FFF0     
0021 6378 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     637A A006     
0022               
0023 637C 0204  20         li    tmp0,16               ; Temporary constant
     637E 0010     
0024 6380 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     6382 A30C     
     6384 200E     
0025 6386 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 6388 A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     638A A30C     
0030 638C A804  30         a     tmp0,@wyx             ; VDP Cursor
     638E 832A     
0031 6390 A804  38         a     tmp0,@fb.current
     6392 A302     
0032 6394 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
=======
0008 6364 C120  34         mov   @fb.vwco,tmp0
     6366 A310     
0009 6368 0284  22         ci    tmp0,16
     636A 0010     
0010 636C 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 636E 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6370 04E0  34         clr   @parm1
     6372 A006     
0016 6374 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 6376 0224  22 !       ai    tmp0,-16              ; Scroll left
     6378 FFF0     
0021 637A C804  38         mov   tmp0,@parm1           ; View Window Column offset
     637C A006     
0022               
0023 637E 0204  20         li    tmp0,16               ; Temporary constant
     6380 0010     
0024 6382 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     6384 A30C     
     6386 200E     
0025 6388 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 638A A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     638C A30C     
0030 638E A804  30         a     tmp0,@wyx             ; VDP Cursor
     6390 832A     
0031 6392 A804  38         a     tmp0,@fb.current
     6394 A302     
0032 6396 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
>>>>>>> b9b40bb (WIP optimize build scripts)
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
<<<<<<< HEAD
0039 6396 C120  34         mov   @fb.vwco,tmp0
     6398 A310     
0040 639A 0284  22         ci    tmp0,175
     639C 00AF     
0041 639E 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 63A0 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 63A2 04E0  34         clr   @parm1
     63A4 A006     
0047 63A6 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63A8 0224  22 !       ai    tmp0,16               ; Scroll right
     63AA 0010     
0052 63AC C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63AE A006     
0053               
0054 63B0 0204  20         li    tmp0,16               ; Temporary constant
     63B2 0010     
0055 63B4 8120  34         c     @fb.column,tmp0
     63B6 A30C     
0056 63B8 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63BA 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63BC A30C     
0061 63BE 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63C0 832A     
0062 63C2 6804  38         s     tmp0,@fb.current
     63C4 A302     
=======
0039 6398 C120  34         mov   @fb.vwco,tmp0
     639A A310     
0040 639C 0284  22         ci    tmp0,175
     639E 00AF     
0041 63A0 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 63A2 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 63A4 04E0  34         clr   @parm1
     63A6 A006     
0047 63A8 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63AA 0224  22 !       ai    tmp0,16               ; Scroll right
     63AC 0010     
0052 63AE C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63B0 A006     
0053               
0054 63B2 0204  20         li    tmp0,16               ; Temporary constant
     63B4 0010     
0055 63B6 8120  34         c     @fb.column,tmp0
     63B8 A30C     
0056 63BA 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63BC 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63BE A30C     
0061 63C0 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63C2 832A     
0062 63C4 6804  38         s     tmp0,@fb.current
     63C6 A302     
>>>>>>> b9b40bb (WIP optimize build scripts)
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
<<<<<<< HEAD
0071 63C6 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63C8 7A8C     
=======
0071 63C8 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63CA 7AFC     
>>>>>>> b9b40bb (WIP optimize build scripts)
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
<<<<<<< HEAD
0077 63CA 0460  28         b     @edkey.keyscan.hook.debounce
     63CC 615E     
=======
0077 63CC 0460  28         b     @edkey.keyscan.hook.debounce
     63CE 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0089                       copy  "edkey.fb.mov.updown.asm"     ; Move line up / down
     **** ****     > edkey.fb.mov.updown.asm
0001               * FILE......: edkey.fb.mov.updown.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor up
0006               *---------------------------------------------------------------
0007               edkey.action.up:
<<<<<<< HEAD
0008 63CE 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     63D0 7AC8     
=======
0008 63D0 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     63D2 6EC0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012               edkey.action.up.exit:
<<<<<<< HEAD
0013 63D2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63D4 615E     
=======
0013 63D4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63D6 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0014               
0015               
0016               
0017               *---------------------------------------------------------------
0018               * Cursor down
0019               *---------------------------------------------------------------
0020               edkey.action.down:
<<<<<<< HEAD
0021 63D6 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     63D8 7AD2     
=======
0021 63D8 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     63DA 6F1E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.down.exit:
<<<<<<< HEAD
0026 63DA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63DC 615E     
=======
0026 63DC 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63DE 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0090                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
<<<<<<< HEAD
0008 63DE 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63E0 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63E2 8820  50         c     @fb.row.dirty,@w$ffff
     63E4 A30A     
     63E6 2022     
0013 63E8 1604  14         jne   edkey.action.ppage.sanity
0014               
0015 63EA 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63EC 6FF4     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.row      = Current row in FB
0018                                                   ; | i   @fb.column   = Current column in FB
0019                                                   ; / i   @fb.colsline = Cols per line in FB
0020               
0021 63EE 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63F0 A30A     
=======
0008 63E0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63E2 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63E4 8820  50         c     @fb.row.dirty,@w$ffff
     63E6 A30A     
     63E8 2022     
0013 63EA 1604  14         jne   edkey.action.ppage.sanity
0014 63EC 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63EE 705A     
0015 63F0 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63F2 A30A     
0016                       ;-------------------------------------------------------
0017                       ; Assert
0018                       ;-------------------------------------------------------
0019               edkey.action.ppage.sanity:
0020 63F4 C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63F6 A304     
0021 63F8 130F  14         jeq   edkey.action.ppage.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0022                       ;-------------------------------------------------------
0023                       ; Assert
0024                       ;-------------------------------------------------------
<<<<<<< HEAD
0025               edkey.action.ppage.sanity:
0026 63F2 C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63F4 A304     
0027 63F6 1312  14         jeq   edkey.action.ppage.exit
0028                       ;-------------------------------------------------------
0029                       ; Special treatment top page
0030                       ;-------------------------------------------------------
0031 63F8 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63FA A31C     
0032 63FC 1503  14         jgt   edkey.action.ppage.topline
0033 63FE 04E0  34         clr   @fb.topline           ; topline = 0
     6400 A304     
0034 6402 1003  14         jmp   edkey.action.ppage.refresh
0035                       ;-------------------------------------------------------
0036                       ; Adjust topline
0037                       ;-------------------------------------------------------
0038               edkey.action.ppage.topline:
0039 6404 6820  54         s     @fb.scrrows,@fb.topline
     6406 A31C     
     6408 A304     
0040                       ;-------------------------------------------------------
0041                       ; Refresh page
0042                       ;-------------------------------------------------------
0043               edkey.action.ppage.refresh:
0044 640A C820  54         mov   @fb.topline,@parm1
     640C A304     
     640E A006     
0045 6410 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6412 A312     
0046               
0047 6414 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6416 A008     
0048               
0049 6418 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     641A 651E     
0050                                                   ; | i  @parm1 = Top line in editor buffer
0051                                                   ; / i  @parm2 = Row offset in frame buffer
0052                       ;-------------------------------------------------------
0053                       ; Exit
0054                       ;-------------------------------------------------------
0055               edkey.action.ppage.exit:
0056 641C 0460  28         b     @edkey.keyscan.hook.debounce
     641E 615E     
0057                                                   ; Back to editor main
0058               
0059               
0060               
0061               
0062               *---------------------------------------------------------------
0063               * Next page
0064               *---------------------------------------------------------------
0065               edkey.action.npage:
0066 6420 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6422 A31A     
0067                       ;-------------------------------------------------------
0068                       ; Crunch current row if dirty
0069                       ;-------------------------------------------------------
0070 6424 8820  50         c     @fb.row.dirty,@w$ffff
     6426 A30A     
     6428 2022     
0071 642A 1604  14         jne   edkey.action.npage.sanity
0072               
0073 642C 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     642E 6FF4     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.row      = Current row in FB
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; / i   @fb.colsline = Cols per line in FB
0078               
0079 6430 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6432 A30A     
0080                       ;-------------------------------------------------------
0081                       ; Assert
0082                       ;-------------------------------------------------------
0083               edkey.action.npage.sanity:
0084 6434 C120  34         mov   @fb.topline,tmp0
     6436 A304     
0085 6438 A120  34         a     @fb.scrrows,tmp0
     643A A31C     
0086 643C 0584  14         inc   tmp0                  ; Base 1 offset !
0087 643E 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     6440 A504     
0088 6442 150C  14         jgt   edkey.action.npage.exit
0089                       ;-------------------------------------------------------
0090                       ; Adjust topline
0091                       ;-------------------------------------------------------
0092               edkey.action.npage.topline:
0093 6444 A820  54         a     @fb.scrrows,@fb.topline
     6446 A31C     
     6448 A304     
0094                       ;-------------------------------------------------------
0095                       ; Refresh page
0096                       ;-------------------------------------------------------
0097               edkey.action.npage.refresh:
0098 644A C820  54         mov   @fb.topline,@parm1
     644C A304     
     644E A006     
0099 6450 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6452 A312     
0100               
0101 6454 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6456 A008     
0102               
0103 6458 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     645A 651E     
0104                                                   ; | i  @parm1 = Top line in editor buffer
0105                                                   ; / i  @parm2 = Row offset in frame buffer
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               edkey.action.npage.exit:
0110 645C 0460  28         b     @edkey.keyscan.hook.debounce
     645E 615E     
0111                                                   ; Back to editor main
=======
0025 63FA 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63FC A31C     
0026 63FE 1503  14         jgt   edkey.action.ppage.topline
0027 6400 04E0  34         clr   @fb.topline           ; topline = 0
     6402 A304     
0028 6404 1003  14         jmp   edkey.action.ppage.refresh
0029                       ;-------------------------------------------------------
0030                       ; Adjust topline
0031                       ;-------------------------------------------------------
0032               edkey.action.ppage.topline:
0033 6406 6820  54         s     @fb.scrrows,@fb.topline
     6408 A31C     
     640A A304     
0034                       ;-------------------------------------------------------
0035                       ; Refresh page
0036                       ;-------------------------------------------------------
0037               edkey.action.ppage.refresh:
0038 640C C820  54         mov   @fb.topline,@parm1
     640E A304     
     6410 A006     
0039 6412 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6414 A312     
0040               
0041 6416 1078  14         jmp   edkey.fb.goto.toprow  ; \ Position cursor and exit
0042                                                   ; / i  @parm1 = Line in editor buffer
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               edkey.action.ppage.exit:
0047 6418 0460  28         b     @edkey.keyscan.hook.debounce
     641A 6160     
0048                                                   ; Back to editor main
0049               
0050               
0051               
0052               
0053               *---------------------------------------------------------------
0054               * Next page
0055               *---------------------------------------------------------------
0056               edkey.action.npage:
0057 641C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     641E A31A     
0058                       ;-------------------------------------------------------
0059                       ; Crunch current row if dirty
0060                       ;-------------------------------------------------------
0061 6420 8820  50         c     @fb.row.dirty,@w$ffff
     6422 A30A     
     6424 2022     
0062 6426 1604  14         jne   edkey.action.npage.sanity
0063 6428 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     642A 705A     
0064 642C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     642E A30A     
0065                       ;-------------------------------------------------------
0066                       ; Assert
0067                       ;-------------------------------------------------------
0068               edkey.action.npage.sanity:
0069 6430 C120  34         mov   @fb.topline,tmp0
     6432 A304     
0070 6434 A120  34         a     @fb.scrrows,tmp0
     6436 A31C     
0071 6438 0584  14         inc   tmp0                  ; Base 1 offset !
0072 643A 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     643C A504     
0073 643E 1509  14         jgt   edkey.action.npage.exit
0074                       ;-------------------------------------------------------
0075                       ; Adjust topline
0076                       ;-------------------------------------------------------
0077               edkey.action.npage.topline:
0078 6440 A820  54         a     @fb.scrrows,@fb.topline
     6442 A31C     
     6444 A304     
0079                       ;-------------------------------------------------------
0080                       ; Refresh page
0081                       ;-------------------------------------------------------
0082               edkey.action.npage.refresh:
0083 6446 C820  54         mov   @fb.topline,@parm1
     6448 A304     
     644A A006     
0084 644C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     644E A312     
0085               
0086 6450 105B  14         jmp   edkey.fb.goto.toprow  ; \ Position cursor and exit
0087                                                   ; / i  @parm1 = Line in editor buffer
0088                       ;-------------------------------------------------------
0089                       ; Exit
0090                       ;-------------------------------------------------------
0091               edkey.action.npage.exit:
0092 6452 0460  28         b     @edkey.keyscan.hook.debounce
     6454 6160     
0093                                                   ; Back to editor main
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0091                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008                       ;-------------------------------------------------------
0009                       ; Crunch current row if dirty
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 6460 8820  50         c     @fb.row.dirty,@w$ffff
     6462 A30A     
     6464 2022     
0012 6466 1604  14         jne   edkey.action.top.refresh
0013               
0014 6468 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     646A 6FF4     
0015                                                   ; \ i   @fb.top      = Address top row in FB
0016                                                   ; | i   @fb.row      = Current row in FB
0017                                                   ; | i   @fb.column   = Current column in FB
0018                                                   ; / i   @fb.colsline = Cols per line in FB
0019               
0020 646C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     646E A30A     
0021                       ;-------------------------------------------------------
0022                       ; Refresh page
0023                       ;-------------------------------------------------------
0024               edkey.action.top.refresh:
0025 6470 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     6472 A006     
0026 6474 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6476 A312     
0027               
0028 6478 04E0  34         clr   @parm2                ; No row offset in frame buffer
     647A A008     
0029               
0030 647C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     647E 651E     
0031                                                   ; | i  @parm1 = Top line in editor buffer
0032                                                   ; / i  @parm2 = Row offset in frame buffer
0033               
0034               *---------------------------------------------------------------
0035               * Goto top of screen
0036               *---------------------------------------------------------------
0037               edkey.action.topscr:
0038                       ;-------------------------------------------------------
0039                       ; Crunch current row if dirty
0040                       ;-------------------------------------------------------
0041 6480 8820  50         c     @fb.row.dirty,@w$ffff
     6482 A30A     
     6484 2022     
0042 6486 1604  14         jne   edkey.action.topscr.refresh
0043               
0044 6488 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     648A 6FF4     
0045                                                   ; \ i   @fb.top      = Address top row in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; | i   @fb.column   = Current column in FB
0048                                                   ; / i   @fb.colsline = Cols per line in FB
0049               
0050 648C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     648E A30A     
0051                       ;-------------------------------------------------------
0052                       ; Refresh screen
0053                       ;-------------------------------------------------------
0054               edkey.action.topscr.refresh:
0055 6490 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     6492 A304     
     6494 A006     
0056 6496 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6498 A008     
0057               
0058 649A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     649C 651E     
0059                                                   ; | i  @parm1 = Top line in editor buffer
0060                                                   ; / i  @parm2 = Row offset in frame buffer
0061               
0062               *---------------------------------------------------------------
0063               * Goto bottom of file
0064               *---------------------------------------------------------------
0065               edkey.action.bot:
0066                       ;-------------------------------------------------------
0067                       ; Crunch current row if dirty
0068                       ;-------------------------------------------------------
0069 649E 8820  50         c     @fb.row.dirty,@w$ffff
     64A0 A30A     
     64A2 2022     
0070 64A4 1604  14         jne   edkey.action.bot.refresh
0071               
0072 64A6 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64A8 6FF4     
0073                                                   ; \ i   @fb.top      = Address top row in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; | i   @fb.column   = Current column in FB
0076                                                   ; / i   @fb.colsline = Cols per line in FB
0077               
0078 64AA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64AC A30A     
0079                       ;-------------------------------------------------------
0080                       ; Refresh page
0081                       ;-------------------------------------------------------
0082               edkey.action.bot.refresh:
0083 64AE 8820  50         c     @edb.lines,@fb.scrrows
     64B0 A504     
     64B2 A31C     
0084 64B4 120C  14         jle   edkey.action.bot.exit ; Skip if whole editor buffer on screen
0085               
0086 64B6 C120  34         mov   @edb.lines,tmp0
     64B8 A504     
0087 64BA 6120  34         s     @fb.scrrows,tmp0
     64BC A31C     
0088 64BE C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     64C0 A006     
0089 64C2 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64C4 A312     
0090               
0091 64C6 04E0  34         clr   @parm2                ; No row offset in frame buffer
     64C8 A008     
0092               
0093 64CA 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64CC 651E     
0094                                                   ; | i  @parm1 = Top line in editor buffer
0095                                                   ; / i  @parm2 = Row offset in frame buffer
0096               
0097                       ;-------------------------------------------------------
0098                       ; Exit
0099                       ;-------------------------------------------------------
0100               edkey.action.bot.exit:
0101 64CE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64D0 615E     
0102               
0103               
0104               
0105               *---------------------------------------------------------------
0106               * Goto bottom of screen
0107               *---------------------------------------------------------------
0108               edkey.action.botscr:
0109 64D2 0649  14         dect  stack
0110 64D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0111                       ;-------------------------------------------------------
0112                       ; Crunch current row if dirty
0113                       ;-------------------------------------------------------
0114 64D6 8820  50         c     @fb.row.dirty,@w$ffff
     64D8 A30A     
     64DA 2022     
0115 64DC 1604  14         jne   edkey.action.botscr.cursor
0116               
0117 64DE 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64E0 6FF4     
0118                                                   ; \ i   @fb.top      = Address top row in FB
0119                                                   ; | i   @fb.row      = Current row in FB
0120                                                   ; | i   @fb.column   = Current column in FB
0121                                                   ; / i   @fb.colsline = Cols per line in FB
0122               
0123 64E2 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64E4 A30A     
0124                       ;-------------------------------------------------------
0125                       ; Position cursor
0126                       ;-------------------------------------------------------
0127               edkey.action.botscr.cursor:
0128 64E6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64E8 A31A     
0129               
0130 64EA 8820  50         c     @fb.scrrows,@edb.lines
     64EC A31C     
     64EE A504     
0131 64F0 1503  14         jgt   edkey.action.botscr.eof
0132 64F2 C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     64F4 A31C     
0133 64F6 1002  14         jmp   !
0134                       ;-------------------------------------------------------
0135                       ; Cursor at EOF
0136                       ;-------------------------------------------------------
0137               edkey.action.botscr.eof:
0138 64F8 C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     64FA A504     
0139                       ;-------------------------------------------------------
0140                       ; Position cursor
0141                       ;-------------------------------------------------------
0142 64FC 0604  14 !       dec   tmp0                  ; Base 0
0143 64FE C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     6500 A306     
0144 6502 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6504 A30C     
0145               
0146 6506 C120  34         mov   @fb.row,tmp0          ;
     6508 A306     
0147 650A 0A84  32         sla   tmp0,8                ; Position cursor
0148 650C C804  30         mov   tmp0,@wyx             ;
     650E 832A     
0149               
0150 6510 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6512 30EC     
0151                                                   ; \ i   @fb.top      = Address top row in FB
0152                                                   ; | i   @fb.topline  = Top line in FB
0153                                                   ; | i   @fb.row      = Current row in FB
0154                                                   ; |                  (offset 0..@fb.scrrows)
0155                                                   ; | i   @fb.column   = Current column in FB
0156                                                   ; | i   @fb.colsline = Columns per line FB
0157                                                   ; |
0158                                                   ; / o   @fb.current  = Updated pointer
0159               
0160 6514 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6516 36DA     
0161                                                   ; | i  @fb.row        = Row in frame buffer
0162                                                   ; / o  @fb.row.length = Length of row
0163                       ;-------------------------------------------------------
0164                       ; Exit
0165                       ;-------------------------------------------------------
0166               edkey.action.botscr.exit:
0167 6518 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0168 651A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     651C 615E     
=======
0011 6456 8820  50         c     @fb.row.dirty,@w$ffff
     6458 A30A     
     645A 2022     
0012 645C 1604  14         jne   edkey.action.top.refresh
0013 645E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6460 705A     
0014 6462 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6464 A30A     
0015                       ;-------------------------------------------------------
0016                       ; Refresh page
0017                       ;-------------------------------------------------------
0018               edkey.action.top.refresh:
0019 6466 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     6468 A006     
0020 646A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     646C A312     
0021               
0022 646E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6470 6508     
0023                                                   ; / i  @parm1 = Line in editor buffer
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Goto top of screen
0028               *---------------------------------------------------------------
0029               edkey.action.topscr:
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6472 8820  50         c     @fb.row.dirty,@w$ffff
     6474 A30A     
     6476 2022     
0034 6478 1604  14         jne   edkey.action.topscr.refresh
0035 647A 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     647C 705A     
0036 647E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6480 A30A     
0037               edkey.action.topscr.refresh:
0038 6482 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     6484 A304     
     6486 A006     
0039 6488 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     648A 6508     
0040                                                   ; / i  @parm1 = Line in editor buffer
0041               
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Goto bottom of file
0046               *---------------------------------------------------------------
0047               edkey.action.bot:
0048                       ;-------------------------------------------------------
0049                       ; Crunch current row if dirty
0050                       ;-------------------------------------------------------
0051 648C 8820  50         c     @fb.row.dirty,@w$ffff
     648E A30A     
     6490 2022     
0052 6492 1604  14         jne   edkey.action.bot.refresh
0053 6494 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6496 705A     
0054 6498 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     649A A30A     
0055                       ;-------------------------------------------------------
0056                       ; Refresh page
0057                       ;-------------------------------------------------------
0058               edkey.action.bot.refresh:
0059 649C 8820  50         c     @edb.lines,@fb.scrrows
     649E A504     
     64A0 A31C     
0060 64A2 120A  14         jle   edkey.action.bot.exit ; Skip if whole editor buffer on screen
0061               
0062 64A4 C120  34         mov   @edb.lines,tmp0
     64A6 A504     
0063 64A8 6120  34         s     @fb.scrrows,tmp0
     64AA A31C     
0064 64AC C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     64AE A006     
0065 64B0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64B2 A312     
0066               
0067 64B4 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64B6 6508     
0068                                                   ; / i  @parm1 = Line in editor buffer
0069                       ;-------------------------------------------------------
0070                       ; Exit
0071                       ;-------------------------------------------------------
0072               edkey.action.bot.exit:
0073 64B8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64BA 6160     
0074               
0075               
0076               
0077               *---------------------------------------------------------------
0078               * Goto bottom of screen
0079               *---------------------------------------------------------------
0080               edkey.action.botscr:
0081 64BC 0649  14         dect  stack
0082 64BE C644  30         mov   tmp0,*stack           ; Push tmp0
0083                       ;-------------------------------------------------------
0084                       ; Crunch current row if dirty
0085                       ;-------------------------------------------------------
0086 64C0 8820  50         c     @fb.row.dirty,@w$ffff
     64C2 A30A     
     64C4 2022     
0087 64C6 1604  14         jne   edkey.action.botscr.cursor
0088 64C8 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64CA 705A     
0089 64CC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64CE A30A     
0090                       ;-------------------------------------------------------
0091                       ; Position cursor
0092                       ;-------------------------------------------------------
0093               edkey.action.botscr.cursor:
0094 64D0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64D2 A31A     
0095               
0096 64D4 8820  50         c     @fb.scrrows,@edb.lines
     64D6 A31C     
     64D8 A504     
0097 64DA 1503  14         jgt   edkey.action.botscr.eof
0098 64DC C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     64DE A31C     
0099 64E0 1002  14         jmp   !
0100                       ;-------------------------------------------------------
0101                       ; Cursor at EOF
0102                       ;-------------------------------------------------------
0103               edkey.action.botscr.eof:
0104 64E2 C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     64E4 A504     
0105                       ;-------------------------------------------------------
0106                       ; Position cursor
0107                       ;-------------------------------------------------------
0108 64E6 0604  14 !       dec   tmp0                  ; Base 0
0109 64E8 C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     64EA A306     
0110 64EC 04E0  34         clr   @fb.column            ; Frame buffer column 0
     64EE A30C     
0111               
0112 64F0 C120  34         mov   @fb.row,tmp0          ;
     64F2 A306     
0113 64F4 0A84  32         sla   tmp0,8                ; Position cursor
0114 64F6 C804  30         mov   tmp0,@wyx             ;
     64F8 832A     
0115               
0116 64FA 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     64FC 30DA     
0117               
0118 64FE 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6500 36C8     
0119                                                   ; | i  @fb.row        = Row in frame buffer
0120                                                   ; / o  @fb.row.length = Length of row
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               edkey.action.botscr.exit:
0125 6502 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 6504 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6506 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0092                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
<<<<<<< HEAD
0017               * @parm2  = Row offset in frame buffer
0018               *
0019               * Register usage
0020               * none
0021               ********|*****|*********************|**************************
0022               edkey.fb.goto.toprow:
0023 651E 0649  14         dect  stack
0024 6520 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Assert on line
0027                       ;-------------------------------------------------------
0028 6522 C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     6524 A006     
0029 6526 8120  34         c     @edb.lines,tmp0       ; /
     6528 A504     
0030 652A 1B05  14         jh    !                     ; No, keep on going
0031 652C C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     652E A504     
     6530 A006     
0032 6532 0620  34         dec   @parm1                ; / Base 0
     6534 A006     
0033                       ;-------------------------------------------------------
0034                       ; Assert on row offset in frame buffer
0035                       ;-------------------------------------------------------
0036 6536 8820  50 !       c     @parm2,@fb.scrrows    ; Row offset off page ?
     6538 A008     
     653A A31C     
0037 653C 1104  14         jlt   edkey.fb.goto.row     ; No, use row offset
0038 653E C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     6540 A31C     
     6542 A306     
0039 6544 1003  14         jmp   edkey.fb.goto.line    ; Goto line
0040               edkey.fb.goto.row:
0041 6546 C820  54         mov   @parm2,@fb.row        ; Set row offset
     6548 A008     
     654A A306     
0042                       ;-------------------------------------------------------
0043                       ; Goto line
0044                       ;-------------------------------------------------------
0045               edkey.fb.goto.line:
0046 654C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     654E A31A     
0047               
0048 6550 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6552 7AA0     
0049                                                   ; | i  @parm1 = Line to start with
0050                                                   ; /             (becomes @fb.topline)
0051               
0052 6554 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6556 A30C     
0053               
0054 6558 C120  34         mov   @fb.row,tmp0          ; \
     655A A306     
0055 655C 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0056 655E C804  30         mov   tmp0,@wyx             ; /
     6560 832A     
0057               
0058 6562 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6564 30EC     
0059                                                   ; \ i   @fb.top      = Address top row in FB
0060                                                   ; | i   @fb.topline  = Top line in FB
0061                                                   ; | i   @fb.row      = Current row in FB
0062                                                   ; |                  (offset 0..@fb.scrrows)
0063                                                   ; | i   @fb.column   = Current column in FB
0064                                                   ; | i   @fb.colsline = Columns per line FB
0065                                                   ; |
0066                                                   ; / o   @fb.current  = Updated pointer
0067               
0068 6566 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6568 36DA     
0069                                                   ; | i  @fb.row        = Row in frame buffer
0070                                                   ; / o  @fb.row.length = Length of row
0071               
0072                       ;-------------------------------------------------------
0073                       ; Exit
0074                       ;-------------------------------------------------------
0075 656A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 656C 0460  28         b     @edkey.keyscan.hook.debounce
     656E 615E     
0077                                                   ; Back to editor main
0078               
0079               
0080               *---------------------------------------------------------------
0081               * Goto specified line (@parm1) in editor buffer
0082               *---------------------------------------------------------------
0083               edkey.action.goto:
0084                       ;-------------------------------------------------------
0085                       ; Crunch current row if dirty
0086                       ;-------------------------------------------------------
0087 6570 8820  50         c     @fb.row.dirty,@w$ffff
     6572 A30A     
     6574 2022     
0088 6576 1609  14         jne   edkey.action.goto.refresh
0089               
0090 6578 0649  14         dect  stack
0091 657A C660  46         mov   @parm1,*stack         ; Push parm1
     657C A006     
0092               
0093 657E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6580 6FF4     
0094                                                   ; \ i   @fb.top      = Address top row in FB
0095                                                   ; | i   @fb.row      = Current row in FB
0096                                                   ; | i   @fb.column   = Current column in FB
0097                                                   ; / i   @fb.colsline = Cols per line in FB
0098               
0099 6582 C839  50         mov   *stack+,@parm1        ; Pop parm1
     6584 A006     
0100 6586 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6588 A30A     
0101                       ;-------------------------------------------------------
0102                       ; Refresh page
0103                       ;-------------------------------------------------------
0104               edkey.action.goto.refresh:
0105 658A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     658C A312     
0106               
0107 658E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6590 A008     
0108               
0109 6592 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6594 651E     
0110                                                   ; | i  @parm1 = Top line in editor buffer
0111                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0017               *
0018               * Register usage
0019               * none
0020               ********|*****|*********************|**************************
0021               edkey.fb.goto.toprow:
0022 6508 0649  14         dect  stack
0023 650A C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;-------------------------------------------------------
0025                       ; Assert
0026                       ;-------------------------------------------------------
0027 650C C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     650E A006     
0028 6510 8120  34         c     @edb.lines,tmp0       ; /
     6512 A504     
0029 6514 1B05  14         jh    !                     ; No, keep on going
0030 6516 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     6518 A504     
     651A A006     
0031 651C 0620  34         dec   @parm1                ; / Base 0
     651E A006     
0032                       ;-------------------------------------------------------
0033                       ; Goto line
0034                       ;-------------------------------------------------------
0035 6520 0720  34 !       seto  @fb.status.dirty      ; Trigger refresh of status lines
     6522 A31A     
0036               
0037 6524 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6526 7B20     
0038                                                   ; | i  @parm1 = Line to start with
0039                                                   ; /             (becomes @fb.topline)
0040               
0041 6528 04E0  34         clr   @fb.row               ; Frame buffer line 0
     652A A306     
0042 652C 04E0  34         clr   @fb.column            ; Frame buffer column 0
     652E A30C     
0043 6530 04E0  26         clr   @wyx                  ; Position VDP cursor
     6532 832A     
0044 6534 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6536 30DA     
0045               
0046 6538 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     653A 36C8     
0047                                                   ; | i  @fb.row        = Row in frame buffer
0048                                                   ; / o  @fb.row.length = Length of row
0049               
0050                       ;-------------------------------------------------------
0051                       ; Exit
0052                       ;-------------------------------------------------------
0053 653C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0054 653E 0460  28         b     @edkey.keyscan.hook.debounce
     6540 6160     
0055                                                   ; Back to editor main
0056               
0057               
0058               *---------------------------------------------------------------
0059               * Goto specified line (@parm1) in editor buffer
0060               *---------------------------------------------------------------
0061               edkey.action.goto:
0062                       ;-------------------------------------------------------
0063                       ; Crunch current row if dirty
0064                       ;-------------------------------------------------------
0065 6542 8820  50         c     @fb.row.dirty,@w$ffff
     6544 A30A     
     6546 2022     
0066 6548 1609  14         jne   edkey.action.goto.refresh
0067               
0068 654A 0649  14         dect  stack
0069 654C C660  46         mov   @parm1,*stack         ; Push parm1
     654E A006     
0070 6550 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6552 705A     
0071 6554 C839  50         mov   *stack+,@parm1        ; Pop parm1
     6556 A006     
0072               
0073 6558 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     655A A30A     
0074                       ;-------------------------------------------------------
0075                       ; Refresh page
0076                       ;-------------------------------------------------------
0077               edkey.action.goto.refresh:
0078 655C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     655E A312     
0079               
0080 6560 0460  28         b     @edkey.fb.goto.toprow ; Position cursor and exit
     6562 6508     
0081                                                   ; \ i  @parm1 = Line in editor buffer
0082                                                   ; /
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0093                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
<<<<<<< HEAD
0008 6596 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6598 A506     
0009               
0010 659A 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     659C 30EC     
0011                                                   ; \ i   @fb.top      = Address top row in FB
0012                                                   ; | i   @fb.topline  = Top line in FB
0013                                                   ; | i   @fb.row      = Current row in FB
0014                                                   ; |                  (offset 0..@fb.scrrows)
0015                                                   ; | i   @fb.column   = Current column in FB
0016                                                   ; | i   @fb.colsline = Columns per line FB
0017                                                   ; |
0018                                                   ; / o   @fb.current  = Updated pointer
=======
0008 6564 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6566 A506     
0009 6568 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     656A 30DA     
0010                       ;-------------------------------------------------------
0011                       ; Assert 1 - Empty line
0012                       ;-------------------------------------------------------
0013               edkey.action.del_char.sanity1:
0014 656C C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     656E A308     
0015 6570 1336  14         jeq   edkey.action.del_char.exit
0016                                                   ; Exit if empty line
0017               
0018 6572 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6574 A302     
>>>>>>> b9b40bb (WIP optimize build scripts)
0019                       ;-------------------------------------------------------
0020                       ; Assert 1 - Empty line
0021                       ;-------------------------------------------------------
<<<<<<< HEAD
0022               edkey.action.del_char.sanity1:
0023 659E C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     65A0 A308     
0024 65A2 1336  14         jeq   edkey.action.del_char.exit
0025                                                   ; Exit if empty line
0026               
0027 65A4 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65A6 A302     
0028                       ;-------------------------------------------------------
0029                       ; Assert 2 - Already at EOL
0030                       ;-------------------------------------------------------
0031               edkey.action.del_char.sanity2:
0032 65A8 C1C6  18         mov   tmp2,tmp3             ; \
0033 65AA 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0034 65AC 81E0  34         c     @fb.column,tmp3
     65AE A30C     
0035 65B0 110A  14         jlt   edkey.action.del_char.sanity3
0036               
0037                       ;------------------------------------------------------
0038                       ; At EOL - clear current character
0039                       ;------------------------------------------------------
0040 65B2 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0041 65B4 D505  30         movb  tmp1,*tmp0            ; /
0042 65B6 C820  54         mov   @fb.column,@fb.row.length
     65B8 A30C     
     65BA A308     
0043                                                   ; Row length - 1
0044 65BC 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65BE A30A     
0045 65C0 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65C2 A318     
0046 65C4 1025  14         jmp  edkey.action.del_char.exit
0047                       ;-------------------------------------------------------
0048                       ; Assert 3 - Abort if row length > 80
0049                       ;-------------------------------------------------------
0050               edkey.action.del_char.sanity3:
0051 65C6 0286  22         ci    tmp2,colrow
     65C8 0050     
0052 65CA 1204  14         jle   edkey.action.del_char.prep
0053                                                   ; Continue if row length <= 80
0054                       ;-----------------------------------------------------------------------
0055                       ; CPU crash
0056                       ;-----------------------------------------------------------------------
0057 65CC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     65CE FFCE     
0058 65D0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65D2 2026     
0059                       ;-------------------------------------------------------
0060                       ; Calculate number of characters to move
0061                       ;-------------------------------------------------------
0062               edkey.action.del_char.prep:
0063 65D4 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0064 65D6 61E0  34         s     @fb.column,tmp3
     65D8 A30C     
0065 65DA 0607  14         dec   tmp3                  ; Remove base 1 offset
0066 65DC A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0067 65DE C144  18         mov   tmp0,tmp1
0068 65E0 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0069 65E2 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     65E4 A30C     
0070                       ;-------------------------------------------------------
0071                       ; Setup pointers
0072                       ;-------------------------------------------------------
0073 65E6 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65E8 A302     
0074 65EA C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0075 65EC 0585  14         inc   tmp1                  ; / tmp1 = Next character
0076                       ;-------------------------------------------------------
0077                       ; Loop from current character until end of line
0078                       ;-------------------------------------------------------
0079               edkey.action.del_char.loop:
0080 65EE DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0081 65F0 0606  14         dec   tmp2
0082 65F2 16FD  14         jne   edkey.action.del_char.loop
0083                       ;-------------------------------------------------------
0084                       ; Special treatment if line 80 characters long
0085                       ;-------------------------------------------------------
0086 65F4 0206  20         li    tmp2,colrow
     65F6 0050     
0087 65F8 81A0  34         c     @fb.row.length,tmp2
     65FA A308     
0088 65FC 1603  14         jne   edkey.action.del_char.save
0089 65FE 0604  14         dec   tmp0                  ; One time adjustment
0090 6600 04C5  14         clr   tmp1
0091 6602 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0092                       ;-------------------------------------------------------
0093                       ; Save variables
0094                       ;-------------------------------------------------------
0095               edkey.action.del_char.save:
0096 6604 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6606 A30A     
0097 6608 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     660A A318     
0098 660C 0620  34         dec   @fb.row.length        ; @fb.row.length--
     660E A308     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.del_char.exit:
0103 6610 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6612 615E     
0104               
0105               
0106               *---------------------------------------------------------------
0107               * Delete until end of line
0108               *---------------------------------------------------------------
0109               edkey.action.del_eol:
0110 6614 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6616 A506     
0111               
0112 6618 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     661A 30EC     
0113                                                   ; \ i   @fb.top      = Address top row in FB
0114                                                   ; | i   @fb.topline  = Top line in FB
0115                                                   ; | i   @fb.row      = Current row in FB
0116                                                   ; |                  (offset 0..@fb.scrrows)
0117                                                   ; | i   @fb.column   = Current column in FB
0118                                                   ; | i   @fb.colsline = Columns per line FB
0119                                                   ; |
0120                                                   ; / o   @fb.current  = Updated pointer
0121               
0122 661C C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     661E A308     
0123 6620 1311  14         jeq   edkey.action.del_eol.exit
0124                                                   ; Exit if empty line
0125                       ;-------------------------------------------------------
0126                       ; Prepare for erase operation
0127                       ;-------------------------------------------------------
0128 6622 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6624 A302     
0129 6626 C1A0  34         mov   @fb.colsline,tmp2
     6628 A30E     
0130 662A 61A0  34         s     @fb.column,tmp2
     662C A30C     
0131 662E 04C5  14         clr   tmp1
0132                       ;-------------------------------------------------------
0133                       ; Loop until last column in frame buffer
0134                       ;-------------------------------------------------------
0135               edkey.action.del_eol_loop:
0136 6630 DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0137 6632 0606  14         dec   tmp2
0138 6634 16FD  14         jne   edkey.action.del_eol_loop
=======
0022               edkey.action.del_char.sanity2:
0023 6576 C1C6  18         mov   tmp2,tmp3             ; \
0024 6578 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0025 657A 81E0  34         c     @fb.column,tmp3
     657C A30C     
0026 657E 110A  14         jlt   edkey.action.del_char.sanity3
0027               
0028                       ;------------------------------------------------------
0029                       ; At EOL - clear current character
0030                       ;------------------------------------------------------
0031 6580 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0032 6582 D505  30         movb  tmp1,*tmp0            ; /
0033 6584 C820  54         mov   @fb.column,@fb.row.length
     6586 A30C     
     6588 A308     
0034                                                   ; Row length - 1
0035 658A 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     658C A30A     
0036 658E 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6590 A318     
0037 6592 1025  14         jmp  edkey.action.del_char.exit
0038                       ;-------------------------------------------------------
0039                       ; Assert 3 - Abort if row length > 80
0040                       ;-------------------------------------------------------
0041               edkey.action.del_char.sanity3:
0042 6594 0286  22         ci    tmp2,colrow
     6596 0050     
0043 6598 1204  14         jle   edkey.action.del_char.prep
0044                                                   ; Continue if row length <= 80
0045                       ;-----------------------------------------------------------------------
0046                       ; CPU crash
0047                       ;-----------------------------------------------------------------------
0048 659A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     659C FFCE     
0049 659E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65A0 2026     
0050                       ;-------------------------------------------------------
0051                       ; Calculate number of characters to move
0052                       ;-------------------------------------------------------
0053               edkey.action.del_char.prep:
0054 65A2 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0055 65A4 61E0  34         s     @fb.column,tmp3
     65A6 A30C     
0056 65A8 0607  14         dec   tmp3                  ; Remove base 1 offset
0057 65AA A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0058 65AC C144  18         mov   tmp0,tmp1
0059 65AE 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0060 65B0 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     65B2 A30C     
0061                       ;-------------------------------------------------------
0062                       ; Setup pointers
0063                       ;-------------------------------------------------------
0064 65B4 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65B6 A302     
0065 65B8 C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0066 65BA 0585  14         inc   tmp1                  ; / tmp1 = Next character
0067                       ;-------------------------------------------------------
0068                       ; Loop from current character until end of line
0069                       ;-------------------------------------------------------
0070               edkey.action.del_char.loop:
0071 65BC DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0072 65BE 0606  14         dec   tmp2
0073 65C0 16FD  14         jne   edkey.action.del_char.loop
0074                       ;-------------------------------------------------------
0075                       ; Special treatment if line 80 characters long
0076                       ;-------------------------------------------------------
0077 65C2 0206  20         li    tmp2,colrow
     65C4 0050     
0078 65C6 81A0  34         c     @fb.row.length,tmp2
     65C8 A308     
0079 65CA 1603  14         jne   edkey.action.del_char.save
0080 65CC 0604  14         dec   tmp0                  ; One time adjustment
0081 65CE 04C5  14         clr   tmp1
0082 65D0 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0083                       ;-------------------------------------------------------
0084                       ; Save variables
0085                       ;-------------------------------------------------------
0086               edkey.action.del_char.save:
0087 65D2 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65D4 A30A     
0088 65D6 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65D8 A318     
0089 65DA 0620  34         dec   @fb.row.length        ; @fb.row.length--
     65DC A308     
0090                       ;-------------------------------------------------------
0091                       ; Exit
0092                       ;-------------------------------------------------------
0093               edkey.action.del_char.exit:
0094 65DE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65E0 6160     
0095               
0096               
0097               *---------------------------------------------------------------
0098               * Delete until end of line
0099               *---------------------------------------------------------------
0100               edkey.action.del_eol:
0101 65E2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     65E4 A506     
0102 65E6 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     65E8 30DA     
0103 65EA C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     65EC A308     
0104 65EE 1311  14         jeq   edkey.action.del_eol.exit
0105                                                   ; Exit if empty line
0106                       ;-------------------------------------------------------
0107                       ; Prepare for erase operation
0108                       ;-------------------------------------------------------
0109 65F0 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65F2 A302     
0110 65F4 C1A0  34         mov   @fb.colsline,tmp2
     65F6 A30E     
0111 65F8 61A0  34         s     @fb.column,tmp2
     65FA A30C     
0112 65FC 04C5  14         clr   tmp1
0113                       ;-------------------------------------------------------
0114                       ; Loop until last column in frame buffer
0115                       ;-------------------------------------------------------
0116               edkey.action.del_eol_loop:
0117 65FE DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0118 6600 0606  14         dec   tmp2
0119 6602 16FD  14         jne   edkey.action.del_eol_loop
0120                       ;-------------------------------------------------------
0121                       ; Save variables
0122                       ;-------------------------------------------------------
0123 6604 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6606 A30A     
0124 6608 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     660A A318     
0125               
0126 660C C820  54         mov   @fb.column,@fb.row.length
     660E A30C     
     6610 A308     
0127                                                   ; Set new row length
0128                       ;-------------------------------------------------------
0129                       ; Exit
0130                       ;-------------------------------------------------------
0131               edkey.action.del_eol.exit:
0132 6612 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6614 6160     
0133               
0134               
0135               *---------------------------------------------------------------
0136               * Delete current line
0137               *---------------------------------------------------------------
0138               edkey.action.del_line:
>>>>>>> b9b40bb (WIP optimize build scripts)
0139                       ;-------------------------------------------------------
0140                       ; Save variables
0141                       ;-------------------------------------------------------
<<<<<<< HEAD
0142 6636 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6638 A30A     
0143 663A 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     663C A318     
0144               
0145 663E C820  54         mov   @fb.column,@fb.row.length
     6640 A30C     
     6642 A308     
0146                                                   ; Set new row length
0147                       ;-------------------------------------------------------
0148                       ; Exit
0149                       ;-------------------------------------------------------
0150               edkey.action.del_eol.exit:
0151 6644 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6646 615E     
0152               
0153               
0154               *---------------------------------------------------------------
0155               * Delete current line
0156               *---------------------------------------------------------------
0157               edkey.action.del_line:
0158                       ;-------------------------------------------------------
0159                       ; Get current line in editor buffer
0160                       ;-------------------------------------------------------
0161 6648 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     664A 30EC     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 664C 04E0  34         clr   @fb.row.dirty         ; Discard current line
     664E A30A     
0172               
0173 6650 C820  54         mov   @fb.topline,@parm1    ; \
     6652 A304     
     6654 A006     
0174 6656 A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     6658 A306     
     665A A006     
0175 665C 05A0  34         inc   @parm1                ; /
     665E A006     
0176               
0177                       ;-------------------------------------------------------
0178                       ; Special handling if at BOT (no real line)
0179                       ;-------------------------------------------------------
0180 6660 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     6662 A006     
     6664 A504     
0181 6666 1207  14         jle   edkey.action.del_line.doit
0182                                                   ; No, is real line. Continue with delete.
0183               
0184 6668 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     666A A304     
     666C A006     
0185 666E 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6670 7AA0     
0186                                                   ; \ i  @parm1 = Line to start with
0187                                                   ; /
0188 6672 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6674 63CE     
=======
0142 6616 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6618 30DA     
0143 661A 04E0  34         clr   @fb.row.dirty         ; Discard current line
     661C A30A     
0144               
0145 661E C820  54         mov   @fb.topline,@parm1    ; \
     6620 A304     
     6622 A006     
0146 6624 A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     6626 A306     
     6628 A006     
0147 662A 05A0  34         inc   @parm1                ; /
     662C A006     
0148               
0149                       ;-------------------------------------------------------
0150                       ; Special handling if at BOT (no real line)
0151                       ;-------------------------------------------------------
0152 662E 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     6630 A006     
     6632 A504     
0153 6634 1207  14         jle   edkey.action.del_line.doit
0154                                                   ; No, is real line. Continue with delete.
0155               
0156 6636 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6638 A304     
     663A A006     
0157 663C 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     663E 7B20     
0158                                                   ; \ i  @parm1 = Line to start with
0159                                                   ; /
0160 6640 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6642 63D0     
0161                       ;-------------------------------------------------------
0162                       ; Delete line in editor buffer
0163                       ;-------------------------------------------------------
0164               edkey.action.del_line.doit:
0165 6644 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     6646 7BB8     
0166                                                   ; \ i  @parm1 = Line number to delete
0167                                                   ; /
0168               
0169 6648 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     664A A006     
     664C A504     
0170 664E 1302  14         jeq   edkey.action.del_line.refresh
0171                                                   ; Yes, skip get length. No need for garbage.
0172                       ;-------------------------------------------------------
0173                       ; Get length of current row in frame buffer
0174                       ;-------------------------------------------------------
0175 6650 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     6652 36C8     
0176                                                   ; \ i  @fb.row        = Current row
0177                                                   ; / o  @fb.row.length = Length of row
0178                       ;-------------------------------------------------------
0179                       ; Refresh frame buffer
0180                       ;-------------------------------------------------------
0181               edkey.action.del_line.refresh:
0182 6654 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6656 A304     
     6658 A006     
0183               
0184 665A 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     665C 7B20     
0185                                                   ; \ i  @parm1 = Line to start with
0186                                                   ; /
0187               
0188 665E 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6660 A506     
>>>>>>> b9b40bb (WIP optimize build scripts)
0189                       ;-------------------------------------------------------
0190                       ; Delete line in editor buffer
0191                       ;-------------------------------------------------------
<<<<<<< HEAD
0192               edkey.action.del_line.doit:
0193 6676 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     6678 7B52     
0194                                                   ; \ i  @parm1 = Line number to delete
0195                                                   ; /
0196               
0197 667A 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     667C A006     
     667E A504     
0198 6680 1302  14         jeq   edkey.action.del_line.refresh
0199                                                   ; Yes, skip get length. No need for garbage.
0200                       ;-------------------------------------------------------
0201                       ; Get length of current row in frame buffer
0202                       ;-------------------------------------------------------
0203 6682 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     6684 36DA     
0204                                                   ; \ i  @fb.row        = Current row
0205                                                   ; / o  @fb.row.length = Length of row
0206                       ;-------------------------------------------------------
0207                       ; Refresh frame buffer
0208                       ;-------------------------------------------------------
0209               edkey.action.del_line.refresh:
0210 6686 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6688 A304     
     668A A006     
0211               
0212 668C 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     668E 7AA0     
0213                                                   ; \ i  @parm1 = Line to start with
0214                                                   ; /
0215               
0216 6690 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6692 A506     
0217                       ;-------------------------------------------------------
0218                       ; Special treatment if current line was last line
0219                       ;-------------------------------------------------------
0220 6694 C120  34         mov   @fb.topline,tmp0
     6696 A304     
0221 6698 A120  34         a     @fb.row,tmp0
     669A A306     
0222               
0223 669C 8804  34         c     tmp0,@edb.lines       ; Was last line?
     669E A504     
0224 66A0 1102  14         jlt   edkey.action.del_line.exit
0225               
0226 66A2 0460  28         b     @edkey.action.up      ; Move cursor one line up
     66A4 63CE     
0227                       ;-------------------------------------------------------
0228                       ; Exit
0229                       ;-------------------------------------------------------
0230               edkey.action.del_line.exit:
0231 66A6 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     66A8 6286     
=======
0192 6662 C120  34         mov   @fb.topline,tmp0
     6664 A304     
0193 6666 A120  34         a     @fb.row,tmp0
     6668 A306     
0194               
0195 666A 8804  34         c     tmp0,@edb.lines       ; Was last line?
     666C A504     
0196 666E 1102  14         jlt   edkey.action.del_line.exit
0197               
0198 6670 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6672 63D0     
0199                       ;-------------------------------------------------------
0200                       ; Exit
0201                       ;-------------------------------------------------------
0202               edkey.action.del_line.exit:
0203 6674 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     6676 6288     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0094                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
<<<<<<< HEAD
0010 66AA 0204  20         li    tmp0,>2000            ; White space
     66AC 2000     
0011 66AE C804  38         mov   tmp0,@parm1
     66B0 A006     
0012               edkey.action.ins_char:
0013 66B2 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66B4 A506     
0014               
0015 66B6 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     66B8 30EC     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.topline  = Top line in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; |                  (offset 0..@fb.scrrows)
0020                                                   ; | i   @fb.column   = Current column in FB
0021                                                   ; | i   @fb.colsline = Columns per line FB
0022                                                   ; |
0023                                                   ; / o   @fb.current  = Updated pointer
0024                       ;-------------------------------------------------------
0025                       ; Check 1 - Empty line
0026                       ;-------------------------------------------------------
0027               edkey.actions.ins.char.empty_line:
0028 66BA C120  34         mov   @fb.current,tmp0      ; Get pointer
     66BC A302     
0029 66BE C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     66C0 A308     
0030 66C2 1342  14         jeq   edkey.action.ins_char.append
0031                                                   ; Add character in append mode
0032                       ;-------------------------------------------------------
0033                       ; Check 2 - line-wrap if at character 80
0034                       ;-------------------------------------------------------
0035 66C4 C160  34         mov   @fb.column,tmp1
     66C6 A30C     
0036 66C8 0285  22         ci    tmp1,colrow-1         ; At 80th character?
     66CA 004F     
0037 66CC 1118  14         jlt   !
0038 66CE C160  34         mov   @fb.row.length,tmp1
     66D0 A308     
0039 66D2 0285  22         ci    tmp1,colrow
     66D4 0050     
0040 66D6 1613  14         jne   !
0041                       ;-------------------------------------------------------
0042                       ; Wrap to new line
0043                       ;-------------------------------------------------------
0044 66D8 0649  14         dect  Stack
0045 66DA C660  46         mov   @parm1,*stack         ; Save character to add
     66DC A006     
0046 66DE 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66E0 A506     
0047               
0048 66E2 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     66E4 6FF4     
0049                                                   ; \ i   @fb.top      = Address top row in FB
0050                                                   ; | i   @fb.row      = Current row in FB
0051                                                   ; | i   @fb.column   = Current column in FB
0052                                                   ; / i   @fb.colsline = Cols per line in FB
0053               
0054 66E6 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     66E8 A30A     
0055 66EA 0720  34         seto  @parm1                ; Insert on following line
     66EC A006     
0056               
0057 66EE 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66F0 7AE6     
0058                                                   ; \ i  @parm1 = 0 for insert current line
0059                                                   ; /            >0 for insert following line
0060               
0061 66F2 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     66F4 7AD2     
0062 66F6 04C6  14         clr   tmp2                  ; Clear line length
0063 66F8 C839  50         mov   *stack+,@parm1        ; Restore character to add
     66FA A006     
0064 66FC 1025  14         jmp   edkey.action.ins_char.append
0065                       ;-------------------------------------------------------
0066                       ; Check 3 - EOL
0067                       ;-------------------------------------------------------
0068 66FE 8820  50 !       c     @fb.column,@fb.row.length
     6700 A30C     
     6702 A308     
0069 6704 1321  14         jeq   edkey.action.ins_char.append
0070                                                   ; Add character in append mode
0071                       ;-------------------------------------------------------
0072                       ; Check 4 - Insert only until line length reaches 80th column
0073                       ;-------------------------------------------------------
0074 6706 C160  34         mov   @fb.row.length,tmp1
     6708 A308     
0075 670A 0285  22         ci    tmp1,colrow
     670C 0050     
0076 670E 1101  14         jlt   edkey.action.ins_char.prep
0077 6710 101D  14         jmp   edkey.action.ins_char.exit
0078                       ;-------------------------------------------------------
0079                       ; Calculate number of characters to move
0080                       ;-------------------------------------------------------
0081               edkey.action.ins_char.prep:
0082 6712 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0083 6714 61E0  34         s     @fb.column,tmp3
     6716 A30C     
0084 6718 0607  14         dec   tmp3                  ; Remove base 1 offset
0085 671A A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0086 671C C144  18         mov   tmp0,tmp1
0087 671E 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0088 6720 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     6722 A30C     
0089                       ;-------------------------------------------------------
0090                       ; Loop from end of line until current character
0091                       ;-------------------------------------------------------
0092               edkey.action.ins_char.loop:
0093 6724 D554  38         movb  *tmp0,*tmp1           ; Move char to the right
0094 6726 0604  14         dec   tmp0
0095 6728 0605  14         dec   tmp1
0096 672A 0606  14         dec   tmp2
0097 672C 16FB  14         jne   edkey.action.ins_char.loop
0098                       ;-------------------------------------------------------
0099                       ; Insert specified character at current position
0100                       ;-------------------------------------------------------
0101 672E D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     6730 A006     
=======
0010 6678 0204  20         li    tmp0,>2000            ; White space
     667A 2000     
0011 667C C804  38         mov   tmp0,@parm1
     667E A006     
0012               edkey.action.ins_char:
0013 6680 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6682 A506     
0014 6684 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6686 30DA     
0015                       ;-------------------------------------------------------
0016                       ; Check 1 - Empty line
0017                       ;-------------------------------------------------------
0018               edkey.actions.ins.char.empty_line:
0019 6688 C120  34         mov   @fb.current,tmp0      ; Get pointer
     668A A302     
0020 668C C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     668E A308     
0021 6690 1342  14         jeq   edkey.action.ins_char.append
0022                                                   ; Add character in append mode
0023                       ;-------------------------------------------------------
0024                       ; Check 2 - line-wrap if at character 80
0025                       ;-------------------------------------------------------
0026 6692 C160  34         mov   @fb.column,tmp1
     6694 A30C     
0027 6696 0285  22         ci    tmp1,colrow-1         ; At 80th character?
     6698 004F     
0028 669A 1118  14         jlt   !
0029 669C C160  34         mov   @fb.row.length,tmp1
     669E A308     
0030 66A0 0285  22         ci    tmp1,colrow
     66A2 0050     
0031 66A4 1613  14         jne   !
0032                       ;-------------------------------------------------------
0033                       ; Wrap to new line
0034                       ;-------------------------------------------------------
0035 66A6 0649  14         dect  Stack
0036 66A8 C660  46         mov   @parm1,*stack         ; Save character to add
     66AA A006     
0037               
0038 66AC 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66AE A506     
0039 66B0 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     66B2 705A     
0040 66B4 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     66B6 A30A     
0041               
0042 66B8 0720  34         seto  @parm1                ; Insert on following line
     66BA A006     
0043 66BC 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66BE 6FC0     
0044                                                   ; \ i  @parm1 = 0 for insert current line
0045                                                   ; /            >0 for insert following line
0046               
0047 66C0 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     66C2 6F1E     
0048 66C4 04C6  14         clr   tmp2                  ; Clear line length
0049 66C6 C839  50         mov   *stack+,@parm1        ; Restore character to add
     66C8 A006     
0050 66CA 1025  14         jmp   edkey.action.ins_char.append
0051                       ;-------------------------------------------------------
0052                       ; Check 3 - EOL
0053                       ;-------------------------------------------------------
0054 66CC 8820  50 !       c     @fb.column,@fb.row.length
     66CE A30C     
     66D0 A308     
0055 66D2 1321  14         jeq   edkey.action.ins_char.append
0056                                                   ; Add character in append mode
0057                       ;-------------------------------------------------------
0058                       ; Check 4 - Insert only until line length reaches 80th column
0059                       ;-------------------------------------------------------
0060 66D4 C160  34         mov   @fb.row.length,tmp1
     66D6 A308     
0061 66D8 0285  22         ci    tmp1,colrow
     66DA 0050     
0062 66DC 1101  14         jlt   edkey.action.ins_char.prep
0063 66DE 101D  14         jmp   edkey.action.ins_char.exit
0064                       ;-------------------------------------------------------
0065                       ; Calculate number of characters to move
0066                       ;-------------------------------------------------------
0067               edkey.action.ins_char.prep:
0068 66E0 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0069 66E2 61E0  34         s     @fb.column,tmp3
     66E4 A30C     
0070 66E6 0607  14         dec   tmp3                  ; Remove base 1 offset
0071 66E8 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0072 66EA C144  18         mov   tmp0,tmp1
0073 66EC 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0074 66EE 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     66F0 A30C     
0075                       ;-------------------------------------------------------
0076                       ; Loop from end of line until current character
0077                       ;-------------------------------------------------------
0078               edkey.action.ins_char.loop:
0079 66F2 D554  38         movb  *tmp0,*tmp1           ; Move char to the right
0080 66F4 0604  14         dec   tmp0
0081 66F6 0605  14         dec   tmp1
0082 66F8 0606  14         dec   tmp2
0083 66FA 16FB  14         jne   edkey.action.ins_char.loop
0084                       ;-------------------------------------------------------
0085                       ; Insert specified character at current position
0086                       ;-------------------------------------------------------
0087 66FC D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     66FE A006     
0088                       ;-------------------------------------------------------
0089                       ; Save variables and exit
0090                       ;-------------------------------------------------------
0091 6700 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6702 A30A     
0092 6704 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6706 A318     
0093 6708 05A0  34         inc   @fb.column
     670A A30C     
0094 670C 05A0  26         inc   @wyx
     670E 832A     
0095 6710 05A0  34         inc   @fb.row.length        ; @fb.row.length
     6712 A308     
0096 6714 1002  14         jmp   edkey.action.ins_char.exit
0097                       ;-------------------------------------------------------
0098                       ; Add character in append mode
0099                       ;-------------------------------------------------------
0100               edkey.action.ins_char.append:
0101 6716 0460  28         b     @edkey.action.char.overwrite
     6718 67FA     
>>>>>>> b9b40bb (WIP optimize build scripts)
0102                       ;-------------------------------------------------------
0103                       ; Save variables and exit
0104                       ;-------------------------------------------------------
<<<<<<< HEAD
0105 6732 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6734 A30A     
0106 6736 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6738 A318     
0107 673A 05A0  34         inc   @fb.column
     673C A30C     
0108 673E 05A0  26         inc   @wyx
     6740 832A     
0109 6742 05A0  34         inc   @fb.row.length        ; @fb.row.length
     6744 A308     
0110 6746 1002  14         jmp   edkey.action.ins_char.exit
0111                       ;-------------------------------------------------------
0112                       ; Add character in append mode
0113                       ;-------------------------------------------------------
0114               edkey.action.ins_char.append:
0115 6748 0460  28         b     @edkey.action.char.overwrite
     674A 682C     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               edkey.action.ins_char.exit:
0120 674C 0460  28         b     @edkey.keyscan.hook.debounce
     674E 615E     
0121                                                   ; Back to editor main
0122               
0123               
=======
0105               edkey.action.ins_char.exit:
0106 671A 0460  28         b     @edkey.keyscan.hook.debounce
     671C 6160     
0107                                                   ; Back to editor main
0108               
0109               
0110               
0111               
0112               *---------------------------------------------------------------
0113               * Insert new line on current line
0114               *---------------------------------------------------------------
0115               edkey.action.ins_line:
0116 671E 04E0  34         clr   @parm1                ; Insert new line on curren line
     6720 A006     
0117 6722 06A0  32         bl    @fb.insert.line       ; Insert new line
     6724 6FC0     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_line.exit:
0122 6726 0460  28         b     @edkey.keyscan.hook.debounce
     6728 6160     
0123                                                   ; Back to editor main
>>>>>>> b9b40bb (WIP optimize build scripts)
0124               
0125               
0126               *---------------------------------------------------------------
0127               * Insert new line on current line
0128               *---------------------------------------------------------------
<<<<<<< HEAD
0129               edkey.action.ins_line:
0130 6750 04E0  34         clr   @parm1                ; Insert new line on curren line
     6752 A006     
0131               
0132 6754 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6756 7AE6     
0133                                                   ; \ i  @parm1 = 0 for insert current line
0134                                                   ; /            >0 for insert following line
0135                       ;-------------------------------------------------------
0136                       ; Exit
0137                       ;-------------------------------------------------------
0138               edkey.action.ins_line.exit:
0139 6758 0460  28         b     @edkey.keyscan.hook.debounce
     675A 615E     
0140                                                   ; Back to editor main
0141               
0142               
0143               *---------------------------------------------------------------
0144               * Insert new line on following line
0145               *---------------------------------------------------------------
0146               edkey.action.ins_line_after:
0147 675C 0720  34         seto  @parm1                ; Insert new line on following line
     675E A006     
0148               
0149 6760 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6762 7AE6     
0150                                                   ; \ i  @parm1 = 0 for insert current line
0151                                                   ; /            >0 for insert following line
0152                       ;-------------------------------------------------------
0153                       ; Exit
0154                       ;-------------------------------------------------------
0155               edkey.action.ins_line_after.exit:
0156 6764 0460  28         b     @edkey.keyscan.hook.debounce
     6766 615E     
0157                                                   ; Back to editor main
=======
0129               edkey.action.ins_line_after:
0130 672A 0720  34         seto  @parm1                ; Insert new line on following line
     672C A006     
0131 672E 06A0  32         bl    @fb.insert.line       ; Insert new line
     6730 6FC0     
0132                       ;-------------------------------------------------------
0133                       ; Exit
0134                       ;-------------------------------------------------------
0135               edkey.action.ins_line_after.exit:
0136 6732 0460  28         b     @edkey.keyscan.hook.debounce
     6734 6160     
0137                                                   ; Back to editor main
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0095                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
<<<<<<< HEAD
0008 6768 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     676A A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 676C 8820  50         c     @fb.row.dirty,@w$ffff
     676E A30A     
     6770 2022     
0013 6772 1606  14         jne   edkey.action.enter.newline
0014 6774 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6776 A506     
0015               
0016 6778 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     677A 6FF4     
0017                                                   ; \ i   @fb.top      = Address top row in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; | i   @fb.column   = Current column in FB
0020                                                   ; / i   @fb.colsline = Cols per line in FB
0021               
0022 677C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     677E A30A     
0023                       ;-------------------------------------------------------
0024                       ; Insert a new line if insert mode is on
0025                       ;-------------------------------------------------------
0026               edkey.action.enter.newline:
0027 6780 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6782 A50A     
0028 6784 1307  14         jeq   edkey.action.enter.upd_counter
0029                                                   ; Overwrite mode, skip insert
0030               
0031 6786 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     6788 A50C     
0032 678A 1304  14         jeq   edkey.action.enter.upd_counter
0033                                                   ; Autoinsert off, skip insert
0034               
0035 678C 0720  34         seto  @parm1                ; Insert line on following line
     678E A006     
0036               
0037 6790 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6792 7AE6     
0038                                                   ; \  i  @parm1 = current/following line
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Update line counter
0042                       ;-------------------------------------------------------
0043               edkey.action.enter.upd_counter:
0044 6794 C120  34         mov   @fb.topline,tmp0
     6796 A304     
0045 6798 A120  34         a     @fb.row,tmp0
     679A A306     
0046 679C 0584  14         inc   tmp0
0047 679E 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     67A0 A504     
0048 67A2 1102  14         jlt   edkey.action.newline  ; No, continue newline
0049 67A4 05A0  34         inc   @edb.lines            ; Total lines++
     67A6 A504     
0050                       ;-------------------------------------------------------
0051                       ; Process newline
0052                       ;-------------------------------------------------------
0053               edkey.action.newline:
=======
0008 6736 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6738 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 673A 8820  50         c     @fb.row.dirty,@w$ffff
     673C A30A     
     673E 2022     
0013 6740 1606  14         jne   edkey.action.enter.newline
0014 6742 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6744 A506     
0015 6746 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6748 705A     
0016 674A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     674C A30A     
0017                       ;-------------------------------------------------------
0018                       ; Insert a new line if insert mode is on
0019                       ;-------------------------------------------------------
0020               edkey.action.enter.newline:
0021 674E C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6750 A50A     
0022 6752 1307  14         jeq   edkey.action.enter.upd_counter
0023                                                   ; Overwrite mode, skip insert
0024               
0025 6754 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     6756 A50C     
0026 6758 1304  14         jeq   edkey.action.enter.upd_counter
0027                                                   ; Autoinsert off, skip insert
0028               
0029 675A 0720  34         seto  @parm1                ; Insert line on following line
     675C A006     
0030 675E 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6760 6FC0     
0031                                                   ; \  i  @parm1 = current/following line
0032                                                   ; /
0033                       ;-------------------------------------------------------
0034                       ; Update line counter
0035                       ;-------------------------------------------------------
0036               edkey.action.enter.upd_counter:
0037 6762 C120  34         mov   @fb.topline,tmp0
     6764 A304     
0038 6766 A120  34         a     @fb.row,tmp0
     6768 A306     
0039 676A 0584  14         inc   tmp0
0040 676C 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     676E A504     
0041 6770 1102  14         jlt   edkey.action.newline  ; No, continue newline
0042 6772 05A0  34         inc   @edb.lines            ; Total lines++
     6774 A504     
0043                       ;-------------------------------------------------------
0044                       ; Process newline
0045                       ;-------------------------------------------------------
0046               edkey.action.newline:
0047                       ;-------------------------------------------------------
0048                       ; Scroll 1 line if cursor at bottom row of screen
0049                       ;-------------------------------------------------------
0050 6776 C120  34         mov   @fb.scrrows,tmp0
     6778 A31C     
0051 677A 0604  14         dec   tmp0
0052 677C 8120  34         c     @fb.row,tmp0
     677E A306     
0053 6780 110C  14         jlt   edkey.action.newline.down
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                       ;-------------------------------------------------------
0055                       ; Scroll 1 line if cursor at bottom row of screen
0056                       ;-------------------------------------------------------
<<<<<<< HEAD
0057 67A8 C120  34         mov   @fb.scrrows,tmp0
     67AA A31C     
0058 67AC 0604  14         dec   tmp0
0059 67AE 8120  34         c     @fb.row,tmp0
     67B0 A306     
0060 67B2 110C  14         jlt   edkey.action.newline.down
0061                       ;-------------------------------------------------------
0062                       ; Scroll
0063                       ;-------------------------------------------------------
0064 67B4 C120  34         mov   @fb.scrrows,tmp0
     67B6 A31C     
0065 67B8 C820  54         mov   @fb.topline,@parm1
     67BA A304     
     67BC A006     
0066 67BE 05A0  34         inc   @parm1
     67C0 A006     
0067 67C2 06A0  32         bl    @fb.refresh
     67C4 7AA0     
0068 67C6 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     67C8 A312     
0069 67CA 1004  14         jmp   edkey.action.newline.rest
0070                       ;-------------------------------------------------------
0071                       ; Move cursor down a row, there are still rows left
0072                       ;-------------------------------------------------------
0073               edkey.action.newline.down:
0074 67CC 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     67CE A306     
0075 67D0 06A0  32         bl    @down                 ; Row++ VDP cursor
     67D2 26CC     
0076                       ;-------------------------------------------------------
0077                       ; Set VDP cursor and save variables
0078                       ;-------------------------------------------------------
0079               edkey.action.newline.rest:
0080 67D4 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     67D6 7AAA     
0081                                                   ; | o  @outparm1 = Matching column
0082                                                   ; / o  @outparm2 = Char on matching column
0083               
0084 67D8 C120  34         mov   @outparm1,tmp0
     67DA A018     
0085 67DC C804  38         mov   tmp0,@fb.column
     67DE A30C     
0086 67E0 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     67E2 26DE     
0087 67E4 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     67E6 36DA     
0088               
0089 67E8 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67EA 30EC     
0090                                                   ; \ i   @fb.top      = Address top row in FB
0091                                                   ; | i   @fb.topline  = Top line in FB
0092                                                   ; | i   @fb.row      = Current row in FB
0093                                                   ; |                  (offset 0..@fb.scrrows)
0094                                                   ; | i   @fb.column   = Current column in FB
0095                                                   ; | i   @fb.colsline = Columns per line FB
0096                                                   ; |
0097                                                   ; / o   @fb.current  = Updated pointer
0098               
0099 67EC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     67EE A318     
0100                       ;-------------------------------------------------------
0101                       ; Exit
0102                       ;-------------------------------------------------------
0103               edkey.action.newline.exit:
0104 67F0 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67F2 615E     
0105               
0106               
0107               
0108               
0109               *---------------------------------------------------------------
0110               * Toggle insert/overwrite mode
0111               *---------------------------------------------------------------
0112               edkey.action.ins_onoff:
0113 67F4 0649  14         dect  stack
0114 67F6 C64B  30         mov   r11,*stack            ; Save return address
0115               
0116 67F8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67FA A31A     
0117 67FC 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     67FE A50A     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_onoff.exit:
0122 6800 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 6802 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6804 615E     
0124               
0125               
0126               
0127               *---------------------------------------------------------------
0128               * Add character (frame buffer)
0129               *---------------------------------------------------------------
0130               edkey.action.char:
0131 6806 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6808 A31A     
0132                       ;-------------------------------------------------------
0133                       ; Asserts
0134                       ;-------------------------------------------------------
0135 680A D105  18         movb  tmp1,tmp0             ; Get keycode
0136 680C 0984  32         srl   tmp0,8                ; MSB to LSB
0137               
0138 680E 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6810 0020     
0139 6812 112B  14         jlt   edkey.action.char.exit
0140                                                   ; Yes, skip
0141               
0142 6814 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6816 007E     
0143 6818 1528  14         jgt   edkey.action.char.exit
0144                                                   ; Yes, skip
0145                       ;-------------------------------------------------------
0146                       ; Setup
0147                       ;-------------------------------------------------------
0148 681A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     681C A506     
0149 681E D805  38         movb  tmp1,@parm1           ; Store character for insert
     6820 A006     
0150 6822 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6824 A50A     
0151 6826 1302  14         jeq   edkey.action.char.overwrite
0152                       ;-------------------------------------------------------
0153                       ; Insert mode
0154                       ;-------------------------------------------------------
0155               edkey.action.char.insert:
0156 6828 0460  28         b     @edkey.action.ins_char
     682A 66B2     
0157                       ;-------------------------------------------------------
0158                       ; Overwrite mode - Write character
0159                       ;-------------------------------------------------------
0160               edkey.action.char.overwrite:
0161 682C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     682E 30EC     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 6830 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6832 A302     
0172               
0173 6834 D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     6836 A006     
0174 6838 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     683A A30A     
0175 683C 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     683E A318     
=======
0057 6782 C120  34         mov   @fb.scrrows,tmp0
     6784 A31C     
0058 6786 C820  54         mov   @fb.topline,@parm1
     6788 A304     
     678A A006     
0059 678C 05A0  34         inc   @parm1
     678E A006     
0060 6790 06A0  32         bl    @fb.refresh
     6792 7B20     
0061 6794 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6796 A312     
0062 6798 1004  14         jmp   edkey.action.newline.rest
0063                       ;-------------------------------------------------------
0064                       ; Move cursor down a row, there are still rows left
0065                       ;-------------------------------------------------------
0066               edkey.action.newline.down:
0067 679A 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     679C A306     
0068 679E 06A0  32         bl    @down                 ; Row++ VDP cursor
     67A0 26CC     
0069                       ;-------------------------------------------------------
0070                       ; Set VDP cursor and save variables
0071                       ;-------------------------------------------------------
0072               edkey.action.newline.rest:
0073 67A2 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     67A4 7B32     
0074                                                   ; | o  @outparm1 = Matching column
0075                                                   ; / o  @outparm2 = Char on matching column
0076               
0077 67A6 C120  34         mov   @outparm1,tmp0
     67A8 A018     
0078 67AA C804  38         mov   tmp0,@fb.column
     67AC A30C     
0079 67AE 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     67B0 26DE     
0080 67B2 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     67B4 36C8     
0081 67B6 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67B8 30DA     
0082 67BA 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     67BC A318     
0083                       ;-------------------------------------------------------
0084                       ; Exit
0085                       ;-------------------------------------------------------
0086               edkey.action.newline.exit:
0087 67BE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67C0 6160     
0088               
0089               
0090               
0091               
0092               *---------------------------------------------------------------
0093               * Toggle insert/overwrite mode
0094               *---------------------------------------------------------------
0095               edkey.action.ins_onoff:
0096 67C2 0649  14         dect  stack
0097 67C4 C64B  30         mov   r11,*stack            ; Save return address
0098               
0099 67C6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67C8 A31A     
0100 67CA 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     67CC A50A     
0101                       ;-------------------------------------------------------
0102                       ; Exit
0103                       ;-------------------------------------------------------
0104               edkey.action.ins_onoff.exit:
0105 67CE C2F9  30         mov   *stack+,r11           ; Pop r11
0106 67D0 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67D2 6160     
0107               
0108               
0109               
0110               *---------------------------------------------------------------
0111               * Add character (frame buffer)
0112               *---------------------------------------------------------------
0113               edkey.action.char:
0114 67D4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67D6 A31A     
0115                       ;-------------------------------------------------------
0116                       ; Asserts
0117                       ;-------------------------------------------------------
0118 67D8 D105  18         movb  tmp1,tmp0             ; Get keycode
0119 67DA 0984  32         srl   tmp0,8                ; MSB to LSB
0120               
0121 67DC 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     67DE 0020     
0122 67E0 112B  14         jlt   edkey.action.char.exit
0123                                                   ; Yes, skip
0124               
0125 67E2 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     67E4 007E     
0126 67E6 1528  14         jgt   edkey.action.char.exit
0127                                                   ; Yes, skip
0128                       ;-------------------------------------------------------
0129                       ; Setup
0130                       ;-------------------------------------------------------
0131 67E8 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     67EA A506     
0132 67EC D805  38         movb  tmp1,@parm1           ; Store character for insert
     67EE A006     
0133 67F0 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     67F2 A50A     
0134 67F4 1302  14         jeq   edkey.action.char.overwrite
0135                       ;-------------------------------------------------------
0136                       ; Insert mode
0137                       ;-------------------------------------------------------
0138               edkey.action.char.insert:
0139 67F6 0460  28         b     @edkey.action.ins_char
     67F8 6680     
0140                       ;-------------------------------------------------------
0141                       ; Overwrite mode - Write character
0142                       ;-------------------------------------------------------
0143               edkey.action.char.overwrite:
0144 67FA 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67FC 30DA     
0145 67FE C120  34         mov   @fb.current,tmp0      ; Get pointer
     6800 A302     
0146               
0147 6802 D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     6804 A006     
0148 6806 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6808 A30A     
0149 680A 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     680C A318     
0150                       ;-------------------------------------------------------
0151                       ; Last column on screen reached?
0152                       ;-------------------------------------------------------
0153 680E C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79.
     6810 A30C     
0154 6812 0285  22         ci    tmp1,colrow - 1       ; / Last column on screen?
     6814 004F     
0155 6816 1105  14         jlt   edkey.action.char.overwrite.incx
0156                                                   ; No, increase X position
0157               
0158 6818 0205  20         li    tmp1,colrow           ; \
     681A 0050     
0159 681C C805  38         mov   tmp1,@fb.row.length   ; / Yes, Set row length and exit.
     681E A308     
0160 6820 100B  14         jmp   edkey.action.char.exit
0161                       ;-------------------------------------------------------
0162                       ; Increase column
0163                       ;-------------------------------------------------------
0164               edkey.action.char.overwrite.incx:
0165 6822 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6824 A30C     
0166 6826 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6828 832A     
0167                       ;-------------------------------------------------------
0168                       ; Update line length in frame buffer
0169                       ;-------------------------------------------------------
0170 682A 8820  50         c     @fb.column,@fb.row.length
     682C A30C     
     682E A308     
0171                                                   ; column < line length ?
0172 6830 1103  14         jlt   edkey.action.char.exit
0173                                                   ; Yes, don't update row length
0174 6832 C820  54         mov   @fb.column,@fb.row.length
     6834 A30C     
     6836 A308     
0175                                                   ; Set row length
>>>>>>> b9b40bb (WIP optimize build scripts)
0176                       ;-------------------------------------------------------
0177                       ; Last column on screen reached?
0178                       ;-------------------------------------------------------
<<<<<<< HEAD
0179 6840 C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79.
     6842 A30C     
0180 6844 0285  22         ci    tmp1,colrow - 1       ; / Last column on screen?
     6846 004F     
0181 6848 1105  14         jlt   edkey.action.char.overwrite.incx
0182                                                   ; No, increase X position
0183               
0184 684A 0205  20         li    tmp1,colrow           ; \
     684C 0050     
0185 684E C805  38         mov   tmp1,@fb.row.length   ; / Yes, Set row length and exit.
     6850 A308     
0186 6852 100B  14         jmp   edkey.action.char.exit
0187                       ;-------------------------------------------------------
0188                       ; Increase column
0189                       ;-------------------------------------------------------
0190               edkey.action.char.overwrite.incx:
0191 6854 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6856 A30C     
0192 6858 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     685A 832A     
0193                       ;-------------------------------------------------------
0194                       ; Update line length in frame buffer
0195                       ;-------------------------------------------------------
0196 685C 8820  50         c     @fb.column,@fb.row.length
     685E A30C     
     6860 A308     
0197                                                   ; column < line length ?
0198 6862 1103  14         jlt   edkey.action.char.exit
0199                                                   ; Yes, don't update row length
0200 6864 C820  54         mov   @fb.column,@fb.row.length
     6866 A30C     
     6868 A308     
0201                                                   ; Set row length
0202                       ;-------------------------------------------------------
0203                       ; Exit
0204                       ;-------------------------------------------------------
0205               edkey.action.char.exit:
0206 686A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     686C 615E     
=======
0179               edkey.action.char.exit:
0180 6838 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     683A 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0096                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
<<<<<<< HEAD
0008 686E 0649  14         dect  stack
0009 6870 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6872 0649  14         dect  stack
0011 6874 C660  42         mov   @wyx,*stack           ; Push cursor YX
     6876 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6878 C120  34         mov   @tv.ruler.visible,tmp0
     687A A210     
0016                                                   ; Ruler currently off?
0017 687C 1305  14         jeq   edkey.action.toggle.ruler.on
=======
0008 683C 0649  14         dect  stack
0009 683E C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6840 0649  14         dect  stack
0011 6842 C660  42         mov   @wyx,*stack           ; Push cursor YX
     6844 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6846 C120  34         mov   @tv.ruler.visible,tmp0
     6848 A210     
0016                                                   ; Ruler currently off?
0017 684A 1305  14         jeq   edkey.action.toggle.ruler.on
>>>>>>> b9b40bb (WIP optimize build scripts)
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
<<<<<<< HEAD
0023 687E 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6880 A318     
0024 6882 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     6884 A210     
0025 6886 100C  14         jmp   edkey.action.toggle.ruler.fb
=======
0023 684C 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     684E A318     
0024 6850 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     6852 A210     
0025 6854 100C  14         jmp   edkey.action.toggle.ruler.fb
>>>>>>> b9b40bb (WIP optimize build scripts)
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
<<<<<<< HEAD
0030 6888 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     688A A31C     
0031 688C 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 688E 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     6890 A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 6892 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 6894 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6896 A318     
0038 6898 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     689A A210     
0039 689C 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     689E 7A6E     
=======
0030 6856 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6858 A31C     
0031 685A 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 685C 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     685E A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 6860 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 6862 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6864 A318     
0038 6866 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     6868 A210     
0039 686A 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     686C 7AC6     
>>>>>>> b9b40bb (WIP optimize build scripts)
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
<<<<<<< HEAD
0044 68A0 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     68A2 79F8     
=======
0044 686E 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     6870 7A50     
>>>>>>> b9b40bb (WIP optimize build scripts)
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
<<<<<<< HEAD
0049 68A4 C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     68A6 832A     
0050 68A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 68AA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68AC 615E     
=======
0049 6872 C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     6874 832A     
0050 6876 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6878 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     687A 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0097                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 68AE C120  34         mov   @edb.dirty,tmp0
     68B0 A506     
0012 68B2 1302  14         jeq   !
0013 68B4 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     68B6 7940     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 68B8 0460  28 !       b     @tv.quit
     68BA 3330     
=======
0011 687C C120  34         mov   @edb.dirty,tmp0
     687E A506     
0012 6880 1302  14         jeq   !
0013 6882 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6884 79A2     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 6886 0460  28 !       b     @tv.quit
     6888 331E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
<<<<<<< HEAD
0024 68BC 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     68BE A50E     
     68C0 2022     
0025 68C2 1302  14         jeq   !
0026 68C4 0460  28         b     @edkey.action.block.copy
     68C6 69D8     
0027                                                   ; Copy code block
0028 68C8 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     68CA 794E     
=======
0024 688A 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     688C A50E     
     688E 2022     
0025 6890 1302  14         jeq   !
0026 6892 0460  28         b     @edkey.action.block.copy
     6894 690E     
0027                                                   ; Copy code block
0028 6896 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     6898 79B0     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0098                       copy  "edkey.fb.file.decinc.asm"    ; Filename increase/decrease suffix
     **** ****     > edkey.fb.file.decinc.asm
0001               * FILE......: edkey.fb.file.decinc.asm
0002               * Purpose...: File loading actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load previous file based on last char in suffix
0006               *---------------------------------------------------------------
<<<<<<< HEAD
0007               * b   @edkey.action.fb.fname.dec.load
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @cmdb.cmdlen
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.fname.dec.load:
0016 68CC 0649  14         dect  stack
0017 68CE C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 68D0 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     68D2 A008     
0022               
0023 68D4 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     68D6 68CC     
0024 68D8 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68DA A72C     
0025                                                   ; in "Unsaved changes" dialog
0026               
0027 68DC 1009  14         jmp   edkey.action.fb.fname.doit
0028                                                   ; Load file
0029               
0030               
0031               *---------------------------------------------------------------
0032               * Load next file based on last char in suffix
0033               *---------------------------------------------------------------
0034               * b   @edkey.action.fb.fname.inc.load
0035               *---------------------------------------------------------------
0036               * INPUT
0037               * @cmdb.cmdlen
0038               *--------------------------------------------------------------
0039               * Register usage
0040               * none
0041               ********|*****|*********************|**************************
0042               edkey.action.fb.fname.inc.load:
0043 68DE 0649  14         dect  stack
0044 68E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0045                       ;------------------------------------------------------
0046                       ; Adjust filename
0047                       ;------------------------------------------------------
0048 68E2 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     68E4 A008     
0049               
0050 68E6 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     68E8 68DE     
0051 68EA C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68EC A72C     
0052                                                   ; in "Unsaved changes" dialog
0053               
0054 68EE 1000  14         jmp   edkey.action.fb.fname.doit
0055                                                   ; Load file
0056               
0057               *---------------------------------------------------------------
0058               * Adjust filename and load file
0059               *---------------------------------------------------------------
0060               * b   @edkey.action.fb.fname.doit
0061               *---------------------------------------------------------------
0062               * INPUT
0063               * @cmdb.cmdlen
0064               *--------------------------------------------------------------
0065               * Register usage
0066               * none
0067               ********|*****|*********************|**************************
0068               edkey.action.fb.fname.doit:
0069                       ;------------------------------------------------------
0070                       ; Process filename
0071                       ;------------------------------------------------------
0072 68F0 C120  34         mov   @edb.filename.ptr,tmp0
     68F2 A514     
0073 68F4 1311  14         jeq   edkey.action.fb.fname.doit.exit
0074                                                   ; Exit early if new file.
0075               
0076 68F6 0284  22         ci    tmp0,txt.newfile
     68F8 3A68     
0077 68FA 130E  14         jeq   edkey.action.fb.fname.doit.exit
0078                                                   ; Exit early if "[New file]"
=======
0007               * b   @edkey.action.fb.fname.inc.load
0008               * b   @edkey.action.fb.fname.dec.load
0009               *---------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.cmdlen
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.fb.fname.dec.load:
0017 689A 0649  14         dect  stack
0018 689C C644  30         mov   tmp0,*stack           ; Push tmp0
0019                       ;------------------------------------------------------
0020                       ; Adjust filename
0021                       ;------------------------------------------------------
0022 689E 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     68A0 A008     
0023               
0024 68A2 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     68A4 689A     
0025 68A6 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68A8 A72C     
0026                                                   ; in "Unsaved changes" dialog
0027               
0028 68AA 1008  14         jmp   edkey.action.fb.fname.doit
0029               
0030               
0031               edkey.action.fb.fname.inc.load:
0032 68AC 0649  14         dect  stack
0033 68AE C644  30         mov   tmp0,*stack           ; Push tmp0
0034                       ;------------------------------------------------------
0035                       ; Adjust filename
0036                       ;------------------------------------------------------
0037 68B0 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     68B2 A008     
0038               
0039 68B4 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     68B6 68AC     
0040 68B8 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68BA A72C     
0041                                                   ; in "Unsaved changes" dialog
0042               
0043                       ;------------------------------------------------------
0044                       ; Process filename
0045                       ;------------------------------------------------------
0046               edkey.action.fb.fname.doit:
0047 68BC C120  34         mov   @edb.filename.ptr,tmp0
     68BE A514     
0048 68C0 1311  14         jeq   edkey.action.fb.fname.exit
0049                                                   ; Exit early if new file.
0050               
0051 68C2 0284  22         ci    tmp0,txt.newfile
     68C4 3ABC     
0052 68C6 130E  14         jeq   edkey.action.fb.fname.exit
0053                                                   ; Exit early if "[New file]"
0054               
0055 68C8 C804  38         mov   tmp0,@parm1           ; Set filename
     68CA A006     
0056                       ;------------------------------------------------------
0057                       ; Show dialog "Unsaved changed" if editor buffer dirty
0058                       ;------------------------------------------------------
0059 68CC C120  34         mov   @edb.dirty,tmp0
     68CE A506     
0060 68D0 1303  14         jeq   !
0061 68D2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 68D4 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     68D6 79A2     
0063                       ;------------------------------------------------------
0064                       ; Update suffix
0065                       ;------------------------------------------------------
0066 68D8 06A0  32 !       bl    @fm.browse.fname.suffix
     68DA 791C     
0067                                                   ; Filename suffix adjust
0068                                                   ; i  \ parm1 = Pointer to filename
0069                                                   ; i  / parm2 = >FFFF or >0000
0070                       ;------------------------------------------------------
0071                       ; Load file
0072                       ;------------------------------------------------------
0073               edkey.action.fb.fname.doit.loadfile:
0074 68DC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     68DE 7A50     
0075               
0076 68E0 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     68E2 78DE     
0077                                                   ; \ i  parm1 = Pointer to length-prefixed
0078                                                   ; /            device/filename string
>>>>>>> b9b40bb (WIP optimize build scripts)
0079               
0080 68FC C804  38         mov   tmp0,@parm1           ; Set filename
     68FE A006     
0081                       ;------------------------------------------------------
0082                       ; Show dialog "Unsaved changed" if editor buffer dirty
0083                       ;------------------------------------------------------
<<<<<<< HEAD
0084 6900 C120  34         mov   @edb.dirty,tmp0
     6902 A506     
0085 6904 1303  14         jeq   !
0086 6906 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 6908 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     690A 7940     
0088                       ;------------------------------------------------------
0089                       ; Update suffix
0090                       ;------------------------------------------------------
0091 690C 06A0  32 !       bl    @fm.browse.fname.suffix
     690E 78BA     
0092                                                   ; Filename suffix adjust
0093                                                   ; i  \ parm1 = Pointer to filename
0094                                                   ; i  / parm2 = >FFFF or >0000
0095                       ;------------------------------------------------------
0096                       ; Load file
0097                       ;------------------------------------------------------
0098               edkey.action.fb.fname.doit.loadfile:
0099 6910 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6912 79F8     
0100               
0101 6914 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6916 787C     
0102                                                   ; \ i  parm1 = Pointer to length-prefixed
0103                                                   ; /            device/filename string
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               edkey.action.fb.fname.doit.exit:
0108 6918 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 691A 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     691C 6460     
=======
0084               edkey.action.fb.fname.exit:
0085 68E4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 68E6 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     68E8 6456     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0099                       copy  "edkey.fb.file.load.asm"      ; Load file into editor
     **** ****     > edkey.fb.file.load.asm
0001               * FILE......: edkey.fb.file.load.asm
0002               * Purpose...: Load file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.file
0006               * Load file into editor
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to filename string
0012               * @parm2 = Type of special file to load
0013               ********|*****|*********************|**************************
0014               edkey.action.fb.load.file:
0015 691E 0649  14         dect  stack
0016 6920 C64B  30         mov   r11,*stack            ; Save return address
0017 6922 0649  14         dect  stack
0018 6924 C644  30         mov   tmp0,*stack           ; Push tmp0
0019 6926 0649  14         dect  stack
0020 6928 C645  30         mov   tmp1,*stack           ; Push tmp1
0021                       ;-------------------------------------------------------
0022                       ; Load file
0023                       ;-------------------------------------------------------
0024 692A C160  34         mov   @parm2,tmp1           ; Backup @parm1
     692C A008     
0025               
0026 692E 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6930 79F8     
0027               
0028 6932 C120  34         mov   @parm1,tmp0           ; Pointer to filename set?
     6934 A006     
0029 6936 1607  14         jne   !                     ; Yes, continue
0030                       ;-------------------------------------------------------
0031                       ; Show error "No filename specified"
0032                       ;-------------------------------------------------------
0033 6938 0204  20         li    tmp0,txt.io.nofile    ; \
     693A 3C2C     
0034 693C C804  38         mov   tmp0,@parm1           ; / Error message
     693E A006     
0035               
0036 6940 06A0  32         bl    @error.display        ; Show error message
     6942 79DA     
0037                                                   ; \ i  @parm1 = Pointer to error message
0038                                                   ; /
0039               
0040 6944 1021  14         jmp   edkey.action.fb.load.file.exit2
0041                       ;------------------------------------------------------
0042                       ; Show dialog "Unsaved changed" if editor buffer dirty
0043                       ;------------------------------------------------------
0044 6946 C120  34 !       mov   @edb.dirty,tmp0
     6948 A506     
0045 694A 1301  14         jeq   edkey.action.fb.load.check.mastcat
0046 694C 1022  14         jmp   edkey.action.fb.load.file.exit3
0047                       ;-------------------------------------------------------
0048                       ; Special handling Master Catalog
0049                       ;-------------------------------------------------------
0050               edkey.action.fb.load.check.mastcat:
0051 694E C120  34         mov   @edb.special.file,tmp0  ; \ Master catalog previously open?
     6950 A520     
0052 6952 0284  22         ci    tmp0,id.special.mastcat ; /
     6954 0001     
0053               
0054 6956 1606  14         jne   edkey.action.fb.load.loadfile
0055                                                     ; No, just load file
0056               
0057 6958 C820  54         mov   @fb.topline,@edb.bk.fb.topline
     695A A304     
     695C A51C     
0058                                                     ; Backup @fb.topline
0059 695E C820  54         mov   @fb.row,@edb.bk.fb.row  ; Backup @fb.row
     6960 A306     
     6962 A51E     
0060                       ;-------------------------------------------------------
0061                       ; Load file
0062                       ;-------------------------------------------------------
0063               edkey.action.fb.load.loadfile:
0064 6964 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6966 787C     
0065                                                   ; \ i  parm1 = Pointer to length-prefixed
0066                                                   ; /            device/filename string
0067                       ;-------------------------------------------------------
0068                       ; Handle special files
0069                       ;-------------------------------------------------------
0070 6968 C805  38         mov   tmp1,@edb.special.file   ; \ Restore @parm2
     696A A520     
0071                                                      ; / Set special file (0=normal file)
0072               
0073 696C 0285  22         ci    tmp1,id.special.mastcat  ; Is master catalog?
     696E 0001     
0074 6970 160B  14         jne   edkey.action.fb.load.file.exit2
0075                                                      ; No, goto top of file and exit
0076                       ;-------------------------------------------------------
0077                       ; Goto line in file and exit
0078                       ;-------------------------------------------------------
0079               edkey.action.fb.load.file.exit1:
0080 6972 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0081 6974 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0082 6976 C2F9  30         mov   *stack+,r11           ; Pop R11
0083               
0084 6978 C820  54         mov   @edb.bk.fb.topline,@parm1
     697A A51C     
     697C A006     
0085 697E C820  54         mov   @edb.bk.fb.row,@parm2
     6980 A51E     
     6982 A008     
0086               
0087 6984 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6986 651E     
0088                                                   ; | i  @parm1 = Top line in editor buffer
0089                                                   ; / i  @parm2 = Row offset in frame buffer
0090                       ;-------------------------------------------------------
0091                       ; Goto top of file (TOF) and exit
0092                       ;-------------------------------------------------------
0093               edkey.action.fb.load.file.exit2:
0094 6988 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0095 698A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0096 698C C2F9  30         mov   *stack+,r11           ; Pop R11
0097 698E 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6990 6460     
0098                       ;-------------------------------------------------------
0099                       ; Show dialog "Unsaved changes" and exit
0100                       ;-------------------------------------------------------
0101               edkey.action.fb.load.file.exit3:
0102 6992 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0103 6994 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0104 6996 C2F9  30         mov   *stack+,r11           ; Pop R11
0105 6998 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     699A 6460     
0106 699C 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     699E 7940     
                   < stevie_b1.asm
0100                       copy  "edkey.fb.file.load.mastcat.asm"
     **** ****     > edkey.fb.file.load.mastcat.asm
0001               * FILE......: edkey.fb.file.load.mastcat.asm
0002               * Purpose...: Load predefined file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.mastcat
0006               * Load master catalog into editor
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.mastcat
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               ********|*****|*********************|**************************
0013               edkey.action.fb.load.mastcat:
0014                       ;-------------------------------------------------------
0015                       ; Set filename
0016                       ;-------------------------------------------------------
0017 69A0 0204  20         li    tmp0,def.mastcat
     69A2 3D05     
0018 69A4 C804  38         mov   tmp0,@parm1
     69A6 A006     
0019                       ;-------------------------------------------------------
0020                       ; About to load special file of type Master Catalog
0021                       ;-------------------------------------------------------
0022 69A8 0204  20         li    tmp0,id.special.mastcat
     69AA 0001     
0023 69AC C804  38         mov   tmp0,@parm2
     69AE A008     
0024                       ;-------------------------------------------------------
0025                       ; Load file
0026                       ;-------------------------------------------------------
0027 69B0 0460  28         b     @edkey.action.fb.load.file
     69B2 691E     
                   < stevie_b1.asm
0101                                                           ; Load master catalog file
0102                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
<<<<<<< HEAD
0008 69B4 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     69B6 7B0C     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 69B8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69BA 615E     
=======
0008 68EA 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     68EC 7B72     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 68EE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68F0 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
<<<<<<< HEAD
0019 69BC 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     69BE 7B16     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 69C0 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     69C2 6F22     
=======
0019 68F2 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     68F4 7B7C     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 68F6 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     68F8 6E2A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
<<<<<<< HEAD
0030 69C4 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     69C6 7B20     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 69C8 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     69CA 6F22     
=======
0030 68FA 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     68FC 7B86     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 68FE 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     6900 6E2A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
<<<<<<< HEAD
0041 69CC 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     69CE 75F6     
0042 69D0 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     69D2 7B34     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 69D4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69D6 615E     
=======
0041 6902 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6904 7658     
0042 6906 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     6908 7B9A     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 690A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     690C 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
<<<<<<< HEAD
0053 69D8 0649  14         dect  stack
0054 69DA C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 69DC 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     69DE A510     
     69E0 2022     
0059 69E2 1315  14         jeq   edkey.action.block.copy.exit
=======
0053 690E 0649  14         dect  stack
0054 6910 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 6912 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6914 A510     
     6916 2022     
0059 6918 1315  14         jeq   edkey.action.block.copy.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
<<<<<<< HEAD
0064 69E4 C120  30         mov   @wyx,tmp0             ; Get cursor position
     69E6 832A     
0065 69E8 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     69EA FF00     
0066 69EC C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     69EE A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 69F0 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     69F2 75F6     
0071               
0072 69F4 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     69F6 A006     
0073 69F8 06A0  32         bl    @edb.block.copy       ; Copy code block
     69FA 7B48     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 69FC 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     69FE A018     
     6A00 2000     
0078 6A02 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 6A04 C820  54         mov   @fb.yxsave,@parm1
     6A06 A316     
     6A08 A006     
0082 6A0A 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     6A0C 7A96     
=======
0064 691A C120  30         mov   @wyx,tmp0             ; Get cursor position
     691C 832A     
0065 691E 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     6920 FF00     
0066 6922 C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     6924 A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 6926 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6928 7658     
0071               
0072 692A 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     692C A006     
0073 692E 06A0  32         bl    @edb.block.copy       ; Copy code block
     6930 7BAE     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 6932 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     6934 A018     
     6936 2000     
0078 6938 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 693A C820  54         mov   @fb.yxsave,@parm1
     693C A316     
     693E A006     
0082 6940 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     6942 7B0E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
<<<<<<< HEAD
0089 6A0E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 6A10 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A12 615E     
=======
0089 6944 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 6946 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6948 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
<<<<<<< HEAD
0102 6A14 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6A16 A510     
     6A18 2022     
0103 6A1A 1311  14         jeq   edkey.action.block.delete.exit
=======
0102 694A 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     694C A510     
     694E 2022     
0103 6950 130F  14         jeq   edkey.action.block.delete.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
<<<<<<< HEAD
0108 6A1C 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6A1E 75F6     
0109               
0110 6A20 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     6A22 A006     
0111 6A24 06A0  32         bl    @edb.block.delete     ; Delete code block
     6A26 7B3E     
=======
0108 6952 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6954 7658     
0109               
0110 6956 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     6958 A006     
0111 695A 06A0  32         bl    @edb.block.delete     ; Delete code block
     695C 7BA4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
<<<<<<< HEAD
0117 6A28 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6A2A A018     
     6A2C 2000     
0118 6A2E 1307  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 6A30 C820  54         mov   @fb.topline,@parm1
     6A32 A304     
     6A34 A006     
0122 6A36 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6A38 A008     
0123               
0124 6A3A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A3C 651E     
0125                                                   ; | i  @parm1 = Top line in editor buffer
0126                                                   ; / i  @parm2 = Row offset in frame buffer
0127                       ;-------------------------------------------------------
0128                       ; Exit
0129                       ;-------------------------------------------------------
0130               edkey.action.block.delete.exit:
0131 6A3E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A40 615E     
0132               
0133               
0134               *---------------------------------------------------------------
0135               * Move code block
0136               ********|*****|*********************|**************************
0137               edkey.action.block.move:
0138                       ;-------------------------------------------------------
0139                       ; Exit early if nothing to do
0140                       ;-------------------------------------------------------
0141 6A42 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6A44 A510     
     6A46 2022     
0142 6A48 1315  14         jeq   edkey.action.block.move.exit
0143                                                   ; Yes, exit early
0144                       ;-------------------------------------------------------
0145                       ; Delete
0146                       ;-------------------------------------------------------
0147 6A4A 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6A4C 75F6     
0148               
0149 6A4E 0720  34         seto  @parm1                ; Set message to "Moving block..."
     6A50 A006     
0150 6A52 06A0  32         bl    @edb.block.copy       ; Copy code block
     6A54 7B48     
0151                                                   ; \ i  @parm1    = Message flag
0152                                                   ; / o  @outparm1 = >ffff if success
0153               
0154 6A56 0720  34         seto  @parm1                ; Don't display delete message
     6A58 A006     
0155 6A5A 06A0  32         bl    @edb.block.delete     ; Delete code block
     6A5C 7B3E     
0156                                                   ; \ i  @parm1    = Display message Yes/No
0157                                                   ; / o  @outparm1 = >ffff if success
0158                       ;-------------------------------------------------------
0159                       ; Reposition in frame buffer
0160                       ;-------------------------------------------------------
0161 6A5E 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6A60 A018     
     6A62 2000     
0162 6A64 13EC  14         jeq   edkey.action.block.delete.exit
0163                                                   ; If yes, exit early
0164               
0165 6A66 C820  54         mov   @fb.topline,@parm1
     6A68 A304     
     6A6A A006     
0166 6A6C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6A6E A008     
0167               
0168 6A70 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A72 651E     
0169                                                   ; | i  @parm1 = Top line in editor buffer
0170                                                   ; / i  @parm2 = Row offset in frame buffer
0171                       ;-------------------------------------------------------
0172                       ; Exit
0173                       ;-------------------------------------------------------
0174               edkey.action.block.move.exit:
0175 6A74 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A76 615E     
0176               
0177               
0178               *---------------------------------------------------------------
0179               * Goto marker M1
0180               ********|*****|*********************|**************************
0181               edkey.action.block.goto.m1:
0182 6A78 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6A7A A50E     
     6A7C 2022     
0183 6A7E 1307  14         jeq   edkey.action.block.goto.m1.exit
0184                                                   ; Yes, exit early
0185                       ;-------------------------------------------------------
0186                       ; Goto marker M1
0187                       ;-------------------------------------------------------
0188 6A80 C820  54         mov   @edb.block.m1,@parm1
     6A82 A50E     
     6A84 A006     
0189 6A86 0620  34         dec   @parm1                ; Base 0 offset
     6A88 A006     
0190               
0191 6A8A 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     6A8C 6570     
0192                                                   ; \ i @parm1 = Target line in EB
0193                                                   ; /
0194                       ;-------------------------------------------------------
0195                       ; Exit
0196                       ;-------------------------------------------------------
0197               edkey.action.block.goto.m1.exit:
0198 6A8E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A90 615E     
=======
0117 695E 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6960 A018     
     6962 2000     
0118 6964 1305  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 6966 C820  54         mov   @fb.topline,@parm1
     6968 A304     
     696A A006     
0122 696C 0460  28         b     @edkey.fb.goto.toprow ; Position on top row in frame buffer
     696E 6508     
0123                                                   ; \ i  @parm1 = Line to display as top row
0124                                                   ; /
0125                       ;-------------------------------------------------------
0126                       ; Exit
0127                       ;-------------------------------------------------------
0128               edkey.action.block.delete.exit:
0129 6970 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6972 6160     
0130               
0131               
0132               *---------------------------------------------------------------
0133               * Move code block
0134               ********|*****|*********************|**************************
0135               edkey.action.block.move:
0136                       ;-------------------------------------------------------
0137                       ; Exit early if nothing to do
0138                       ;-------------------------------------------------------
0139 6974 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6976 A510     
     6978 2022     
0140 697A 1313  14         jeq   edkey.action.block.move.exit
0141                                                   ; Yes, exit early
0142                       ;-------------------------------------------------------
0143                       ; Delete
0144                       ;-------------------------------------------------------
0145 697C 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     697E 7658     
0146               
0147 6980 0720  34         seto  @parm1                ; Set message to "Moving block..."
     6982 A006     
0148 6984 06A0  32         bl    @edb.block.copy       ; Copy code block
     6986 7BAE     
0149                                                   ; \ i  @parm1    = Message flag
0150                                                   ; / o  @outparm1 = >ffff if success
0151               
0152 6988 0720  34         seto  @parm1                ; Don't display delete message
     698A A006     
0153 698C 06A0  32         bl    @edb.block.delete     ; Delete code block
     698E 7BA4     
0154                                                   ; \ i  @parm1    = Display message Yes/No
0155                                                   ; / o  @outparm1 = >ffff if success
0156                       ;-------------------------------------------------------
0157                       ; Reposition in frame buffer
0158                       ;-------------------------------------------------------
0159 6990 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6992 A018     
     6994 2000     
0160 6996 13EC  14         jeq   edkey.action.block.delete.exit
0161                                                   ; If yes, exit early
0162               
0163 6998 C820  54         mov   @fb.topline,@parm1
     699A A304     
     699C A006     
0164 699E 0460  28         b     @edkey.fb.goto.toprow ; Position on top row in frame buffer
     69A0 6508     
0165                                                   ; \ i  @parm1 = Line to display as top row
0166                                                   ; /
0167                       ;-------------------------------------------------------
0168                       ; Exit
0169                       ;-------------------------------------------------------
0170               edkey.action.block.move.exit:
0171 69A2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69A4 6160     
0172               
0173               
0174               *---------------------------------------------------------------
0175               * Goto marker M1
0176               ********|*****|*********************|**************************
0177               edkey.action.block.goto.m1:
0178 69A6 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     69A8 A50E     
     69AA 2022     
0179 69AC 1307  14         jeq   edkey.action.block.goto.m1.exit
0180                                                   ; Yes, exit early
0181                       ;-------------------------------------------------------
0182                       ; Goto marker M1
0183                       ;-------------------------------------------------------
0184 69AE C820  54         mov   @edb.block.m1,@parm1
     69B0 A50E     
     69B2 A006     
0185 69B4 0620  34         dec   @parm1                ; Base 0 offset
     69B6 A006     
0186               
0187 69B8 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     69BA 6542     
0188                                                   ; \ i @parm1 = Target line in EB
0189                                                   ; /
0190                       ;-------------------------------------------------------
0191                       ; Exit
0192                       ;-------------------------------------------------------
0193               edkey.action.block.goto.m1.exit:
0194 69BC 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69BE 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0103                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
<<<<<<< HEAD
0008 6A92 0649  14         dect  stack
0009 6A94 C64B  30         mov   r11,*stack            ; Save return address
0010 6A96 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     6A98 7AB4     
=======
0008 69C0 0649  14         dect  stack
0009 69C2 C64B  30         mov   r11,*stack            ; Save return address
0010 69C4 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     69C6 7B44     
>>>>>>> b9b40bb (WIP optimize build scripts)
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
<<<<<<< HEAD
0015 6A9A C2F9  30         mov   *stack+,r11           ; Pop r11
0016 6A9C 0460  28         b     @edkey.keyscan.hook.debounce
     6A9E 615E     
=======
0015 69C8 C2F9  30         mov   *stack+,r11           ; Pop r11
0016 69CA 0460  28         b     @edkey.keyscan.hook.debounce
     69CC 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
<<<<<<< HEAD
0024 6AA0 0649  14         dect  stack
0025 6AA2 C64B  30         mov   r11,*stack            ; Save return address
0026 6AA4 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     6AA6 7ABE     
=======
0024 69CE 0649  14         dect  stack
0025 69D0 C64B  30         mov   r11,*stack            ; Save return address
0026 69D2 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     69D4 7B56     
>>>>>>> b9b40bb (WIP optimize build scripts)
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
<<<<<<< HEAD
0031 6AA8 C2F9  30         mov   *stack+,r11           ; Pop r11
0032 6AAA 0460  28         b     @edkey.keyscan.hook.debounce
     6AAC 615E     
=======
0031 69D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0032 69D8 0460  28         b     @edkey.keyscan.hook.debounce
     69DA 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0104                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
<<<<<<< HEAD
0016 6AAE 0649  14         dect  stack
0017 6AB0 C644  30         mov   tmp0,*stack           ; Push tmp0
0018 6AB2 0204  20         li    tmp0,clip1
     6AB4 3100     
0019 6AB6 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 6AB8 0649  14         dect  stack
0022 6ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0023 6ABC 0204  20         li    tmp0,clip2
     6ABE 3200     
0024 6AC0 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 6AC2 0649  14         dect  stack
0027 6AC4 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6AC6 0204  20         li    tmp0,clip3
     6AC8 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 6ACA C804  38 !       mov   tmp0,@parm1
     6ACC A006     
0033 6ACE 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     6AD0 7B2A     
=======
0016 69DC 0649  14         dect  stack
0017 69DE C644  30         mov   tmp0,*stack           ; Push tmp0
0018 69E0 0204  20         li    tmp0,clip1
     69E2 3100     
0019 69E4 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 69E6 0649  14         dect  stack
0022 69E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0023 69EA 0204  20         li    tmp0,clip2
     69EC 3200     
0024 69EE 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 69F0 0649  14         dect  stack
0027 69F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 69F4 0204  20         li    tmp0,clip3
     69F6 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 69F8 C804  38 !       mov   tmp0,@parm1
     69FA A006     
0033 69FC 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     69FE 7B90     
>>>>>>> b9b40bb (WIP optimize build scripts)
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
<<<<<<< HEAD
0040 6AD2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 6AD4 C820  54         mov   @fb.topline,@parm1    ; Get topline
     6AD6 A304     
     6AD8 A006     
0043 6ADA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6ADC A008     
0044               
0045 6ADE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6AE0 651E     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0040 6A00 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 6A02 C820  54         mov   @fb.topline,@parm1    ; Get topline
     6A04 A304     
     6A06 A006     
0043 6A08 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A0A 6508     
0044                                                   ; / i  @parm1 = Line in editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0105                       ;-----------------------------------------------------------------------
0106                       ; Keyboard actions - Command Buffer
0107                       ;-----------------------------------------------------------------------
0108                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
<<<<<<< HEAD
0008 6AE2 C120  34         mov   @cmdb.column,tmp0
     6AE4 A714     
0009 6AE6 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6AE8 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     6AEA A714     
0014 6AEC 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6AEE A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 6AF0 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6AF2 615E     
=======
0008 6A0C C120  34         mov   @cmdb.column,tmp0
     6A0E A714     
0009 6A10 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6A12 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     6A14 A714     
0014 6A16 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6A18 A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 6A1A 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6A1C 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
<<<<<<< HEAD
0025 6AF4 06A0  32         bl    @cmdb.cmd.getlength
     6AF6 7A20     
0026 6AF8 8820  50         c     @cmdb.column,@outparm1
     6AFA A714     
     6AFC A018     
0027 6AFE 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 6B00 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6B02 A714     
0032 6B04 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6B06 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 6B08 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6B0A 615E     
=======
0025 6A1E 06A0  32         bl    @cmdb.cmd.getlength
     6A20 7A78     
0026 6A22 8820  50         c     @cmdb.column,@outparm1
     6A24 A714     
     6A26 A018     
0027 6A28 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 6A2A 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6A2C A714     
0032 6A2E 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6A30 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 6A32 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6A34 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
<<<<<<< HEAD
0044 6B0C 04C4  14         clr   tmp0
0045 6B0E C804  38         mov   tmp0,@cmdb.column      ; First column
     6B10 A714     
0046 6B12 0584  14         inc   tmp0
0047 6B14 D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     6B16 A70A     
0048 6B18 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     6B1A A70A     
0049               
0050 6B1C 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6B1E 615E     
=======
0044 6A36 04C4  14         clr   tmp0
0045 6A38 C804  38         mov   tmp0,@cmdb.column      ; First column
     6A3A A714     
0046 6A3C 0584  14         inc   tmp0
0047 6A3E D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     6A40 A70A     
0048 6A42 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     6A44 A70A     
0049               
0050 6A46 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A48 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
<<<<<<< HEAD
0056 6B20 D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     6B22 A72E     
0057 6B24 0984  32         srl   tmp0,8                 ; Right justify
0058 6B26 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     6B28 A714     
0059 6B2A 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 6B2C 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 6B2E D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     6B30 A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 6B32 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6B34 615E     
=======
0056 6A4A D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     6A4C A72E     
0057 6A4E 0984  32         srl   tmp0,8                 ; Right justify
0058 6A50 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     6A52 A714     
0059 6A54 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 6A56 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 6A58 D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     6A5A A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 6A5C 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A5E 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
<<<<<<< HEAD
0025 6B36 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6B38 7A16     
0026 6B3A 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6B3C A71A     
=======
0025 6A60 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6A62 7A6E     
0026 6A64 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A66 A71A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
<<<<<<< HEAD
0031 6B3E 0460  28         b     @edkey.action.cmdb.home
     6B40 6B0C     
=======
0031 6A68 0460  28         b     @edkey.action.cmdb.home
     6A6A 6A36     
>>>>>>> b9b40bb (WIP optimize build scripts)
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
<<<<<<< HEAD
0057 6B42 0649  14         dect  stack
0058 6B44 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6B46 0649  14         dect  stack
0060 6B48 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6B4A C120  34         mov   @keycode1,tmp0        ; Get keycode
     6B4C A028     
0065 6B4E 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6B50 0020     
0066 6B52 111C  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6B54 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6B56 007E     
0070 6B58 1519  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073 6B5A 0284  22         ci    tmp0,96               ; ASCII 97 'a'
     6B5C 0060     
0074 6B5E 1102  14         jlt   !
0075 6B60 0224  22         ai    tmp0,-32              ; Make uppercase
     6B62 FFE0     
0076                       ;-------------------------------------------------------
0077                       ; Add character
0078                       ;-------------------------------------------------------
0079 6B64 C144  18 !       mov   tmp0,tmp1             ; \
0080 6B66 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0081               
0082 6B68 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6B6A A71A     
0083               
0084 6B6C 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6B6E A72F     
0085 6B70 A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6B72 A714     
0086 6B74 D505  30         movb  tmp1,*tmp0            ; Add character
0087 6B76 05A0  34         inc   @cmdb.column          ; Next column
     6B78 A714     
0088 6B7A 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6B7C A70A     
0089               
0090 6B7E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B80 7A20     
=======
0057 6A6C 0649  14         dect  stack
0058 6A6E C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6A70 0649  14         dect  stack
0060 6A72 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6A74 C120  34         mov   @keycode1,tmp0        ; Get keycode
     6A76 A028     
0065 6A78 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6A7A 0020     
0066 6A7C 111C  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6A7E 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6A80 007E     
0070 6A82 1519  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073 6A84 0284  22         ci    tmp0,96               ; ASCII 97 'a'
     6A86 0060     
0074 6A88 1102  14         jlt   !
0075 6A8A 0224  22         ai    tmp0,-32              ; Make uppercase
     6A8C FFE0     
0076                       ;-------------------------------------------------------
0077                       ; Add character
0078                       ;-------------------------------------------------------
0079 6A8E C144  18 !       mov   tmp0,tmp1             ; \
0080 6A90 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0081               
0082 6A92 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A94 A71A     
0083               
0084 6A96 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6A98 A72F     
0085 6A9A A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6A9C A714     
0086 6A9E D505  30         movb  tmp1,*tmp0            ; Add character
0087 6AA0 05A0  34         inc   @cmdb.column          ; Next column
     6AA2 A714     
0088 6AA4 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6AA6 A70A     
0089               
0090 6AA8 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6AAA 7A78     
>>>>>>> b9b40bb (WIP optimize build scripts)
0091                                                   ; \ i  @cmdb.cmd = Command string
0092                                                   ; / o  @outparm1 = Length of command
0093                       ;-------------------------------------------------------
0094                       ; Addjust length
0095                       ;-------------------------------------------------------
<<<<<<< HEAD
0096 6B82 C120  34         mov   @outparm1,tmp0
     6B84 A018     
0097 6B86 0A84  32         sla   tmp0,8               ; Move to MSB
0098 6B88 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B8A A72E     
=======
0096 6AAC C120  34         mov   @outparm1,tmp0
     6AAE A018     
0097 6AB0 0A84  32         sla   tmp0,8               ; Move to MSB
0098 6AB2 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6AB4 A72E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.cmdb.char.exit:
<<<<<<< HEAD
0103 6B8C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0104 6B8E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0105 6B90 0460  28         b     @edkey.keyscan.hook.debounce
     6B92 615E     
=======
0103 6AB6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0104 6AB8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0105 6ABA 0460  28         b     @edkey.keyscan.hook.debounce
     6ABC 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0106                                                   ; Back to editor main
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
<<<<<<< HEAD
0008 6B94 C120  34         mov   @cmdb.visible,tmp0
     6B96 A702     
0009 6B98 1605  14         jne   edkey.action.cmdb.hide
=======
0008 6ABE C120  34         mov   @cmdb.visible,tmp0
     6AC0 A702     
0009 6AC2 1605  14         jne   edkey.action.cmdb.hide
>>>>>>> b9b40bb (WIP optimize build scripts)
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
<<<<<<< HEAD
0014 6B9A 04E0  34         clr   @cmdb.column          ; Column = 0
     6B9C A714     
0015 6B9E 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6BA0 79EE     
0016 6BA2 1002  14         jmp   edkey.action.cmdb.toggle.exit
=======
0014 6AC4 04E0  34         clr   @cmdb.column          ; Column = 0
     6AC6 A714     
0015 6AC8 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6ACA 7A46     
0016 6ACC 1002  14         jmp   edkey.action.cmdb.toggle.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
<<<<<<< HEAD
0021 6BA4 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6BA6 79F8     
=======
0021 6ACE 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6AD0 7A50     
>>>>>>> b9b40bb (WIP optimize build scripts)
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
<<<<<<< HEAD
0026 6BA8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6BAA 615E     
=======
0026 6AD2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6AD4 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.cfg.clip.asm"     ; Configure clipboard
     **** ****     > edkey.cmdb.cfg.clip.asm
0001               * FILE......: edkey.cmdb.cfg.clip.asm
0002               * Purpose...: Configure clipboard
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.clip:
0008                       ;-------------------------------------------------------
0009                       ; Configure
0010                       ;-------------------------------------------------------
0011 6BAC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6BAE 79F8     
0012               
0013 6BB0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6BB2 7A20     
0014 6BB4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6BB6 A018     
0015 6BB8 1607  14         jne   !                     ; No, set clipboard device and filename
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6BBA 0204  20         li    tmp0,txt.io.nofile    ; \
     6BBC 3C2C     
0020 6BBE C804  38         mov   tmp0,@parm1           ; / Error message
     6BC0 A006     
0021               
0022 6BC2 06A0  32         bl    @error.display        ; Show error message
     6BC4 79DA     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6BC6 1018  14         jmp   edkey.action.cmdb.cfg.clip.exit
0027                       ;-------------------------------------------------------
0028                       ; Set clipboard device and filename
0029                       ;-------------------------------------------------------
0030 6BC8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6BCA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BCC A72E     
0032               
0033 6BCE 06A0  32         bl    @cpym2m
     6BD0 24DA     
0034 6BD2 A72E                   data cmdb.cmdall,tv.clip.fname,80
     6BD4 DE50     
     6BD6 0050     
0035                                                   ; Copy filename from command line to buffer
0036               
0037                       ;-------------------------------------------------------
0038                       ; Show message
0039                       ;-------------------------------------------------------
0040               edkey.action.cmdb.cfg.clip.message:
0041 6BD8 06A0  32         bl    @hchar
     6BDA 27D2     
0042 6BDC 0034                   byte 0,52,32,20
     6BDE 2014     
0043 6BE0 FFFF                   data EOL              ; Erase any previous message
0044               
0045 6BE2 06A0  32         bl    @putat
     6BE4 2442     
0046 6BE6 0034                   byte 0,52
0047 6BE8 3A08                   data txt.done.clipdev
0048                       ;-------------------------------------------------------
0049                       ; Setup one shot task for removing overlay message
0050                       ;-------------------------------------------------------
0051 6BEA 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6BEC 3744     
0052 6BEE C804  38         mov   tmp0,@tv.task.oneshot
     6BF0 A226     
0053               
0054 6BF2 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6BF4 2EF8     
0055 6BF6 0003                   data 3                ; / for getting consistent delay
0056                       ;-------------------------------------------------------
0057                       ; Exit
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.cfg.clip.exit:
0060 6BF8 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6BFA 6460     
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 6BFC 0649  14         dect  stack
0012 6BFE C64B  30         mov   r11,*stack            ; Save return address
0013 6C00 0649  14         dect  stack
0014 6C02 C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6C04 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6C06 A506     
0019 6C08 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6C0A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6C0C C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6C0E 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6C10 7940     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6C12 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C14 79F8     
0028 6C16 06A0  32         bl    @fm.newfile           ; New file in editor
     6C18 78DE     
=======
0011 6AD6 0649  14         dect  stack
0012 6AD8 C64B  30         mov   r11,*stack            ; Save return address
0013 6ADA 0649  14         dect  stack
0014 6ADC C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6ADE C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6AE0 A506     
0019 6AE2 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6AE4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6AE6 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6AE8 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6AEA 79A2     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6AEC 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AEE 7A50     
0028 6AF0 06A0  32         bl    @fm.newfile           ; New file in editor
     6AF2 7940     
>>>>>>> b9b40bb (WIP optimize build scripts)
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
<<<<<<< HEAD
0033 6C1A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6C1C C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6C1E 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6C20 6460     
=======
0033 6AF4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6AF6 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6AF8 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6AFA 6456     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008                       ;-------------------------------------------------------
0009                       ; Load file
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 6C22 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C24 79F8     
0012               
0013 6C26 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C28 7A20     
0014 6C2A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C2C A018     
0015 6C2E 1607  14         jne   !                     ; No, prepare for load
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6C30 0204  20         li    tmp0,txt.io.nofile    ; \
     6C32 3C2C     
0020 6C34 C804  38         mov   tmp0,@parm1           ; / Error message
     6C36 A006     
0021               
0022 6C38 06A0  32         bl    @error.display        ; Show error message
     6C3A 79DA     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6C3C 101B  14         jmp   edkey.action.cmdb.load.exit
0027                       ;-------------------------------------------------------
0028                       ; Get filename
0029                       ;-------------------------------------------------------
0030 6C3E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6C40 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C42 A72E     
0032               
0033 6C44 06A0  32         bl    @cpym2m
     6C46 24DA     
0034 6C48 A72E                   data cmdb.cmdlen,heap.top,80
     6C4A F000     
     6C4C 0050     
=======
0011 6AFC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AFE 7A50     
0012               
0013 6B00 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B02 7A78     
0014 6B04 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B06 A018     
0015 6B08 1607  14         jne   !                     ; No, prepare for load
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6B0A 0204  20         li    tmp0,txt.io.nofile    ; \
     6B0C 3C80     
0020 6B0E C804  38         mov   tmp0,@parm1           ; / Error message
     6B10 A006     
0021               
0022 6B12 06A0  32         bl    @error.display        ; Show error message
     6B14 7A32     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6B16 1012  14         jmp   edkey.action.cmdb.load.exit
0027                       ;-------------------------------------------------------
0028                       ; Get filename
0029                       ;-------------------------------------------------------
0030 6B18 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6B1A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B1C A72E     
0032               
0033 6B1E 06A0  32         bl    @cpym2m
     6B20 24DA     
0034 6B22 A72E                   data cmdb.cmdlen,heap.top,80
     6B24 F000     
     6B26 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0035                                                   ; Copy filename from command line to buffer
0036                       ;-------------------------------------------------------
0037                       ; Special handling Master Catalog
0038                       ;-------------------------------------------------------
<<<<<<< HEAD
0039 6C4E C120  34         mov   @edb.special.file,tmp0  ; \ Master catalog previously open?
     6C50 A520     
0040 6C52 0284  22         ci    tmp0,id.special.mastcat ; /
     6C54 0001     
0041               
0042 6C56 1606  14         jne   edkey.action.cmdb.load.file
0043                                                     ; No, just load file
0044               
0045 6C58 C820  54         mov   @fb.topline,@edb.bk.fb.topline
     6C5A A304     
     6C5C A51C     
0046                                                     ; Backup @fb.topline
0047 6C5E C820  54         mov   @fb.row,@edb.bk.fb.row  ; Backup @fb.row
     6C60 A306     
     6C62 A51E     
0048                       ;-------------------------------------------------------
0049                       ; Load file
0050                       ;-------------------------------------------------------
0051               edkey.action.cmdb.load.file:
0052 6C64 04E0  34         clr   @edb.special.file     ; Reset special file flag
     6C66 A520     
0053               
0054 6C68 0204  20         li    tmp0,heap.top         ; Pass filename as parm1
     6C6A F000     
0055 6C6C C804  38         mov   tmp0,@parm1           ; (1st line in heap)
     6C6E A006     
0056               
0057 6C70 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6C72 787C     
0058                                                   ; \ i  parm1 = Pointer to length-prefixed
0059                                                   ; /            device/filename string
0060                       ;-------------------------------------------------------
0061                       ; Exit
0062                       ;-------------------------------------------------------
0063               edkey.action.cmdb.load.exit:
0064 6C74 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6C76 6460     
=======
0039 6B28 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B2A F000     
0040 6B2C C804  38         mov   tmp0,@parm1
     6B2E A006     
0041                       ;-------------------------------------------------------
0042                       ; Load file
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.load.file:
0045 6B30 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B32 F000     
0046 6B34 C804  38         mov   tmp0,@parm1
     6B36 A006     
0047               
0048 6B38 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6B3A 78DE     
0049                                                   ; \ i  parm1 = Pointer to length-prefixed
0050                                                   ; /            device/filename string
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               edkey.action.cmdb.load.exit:
0055 6B3C 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6B3E 6456     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
<<<<<<< HEAD
0008 6C78 0649  14         dect  stack
0009 6C7A C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C7C 0649  14         dect  stack
0011 6C7E C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C80 A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6C82 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C84 79F8     
0016               
0017 6C86 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C88 7A20     
0018 6C8A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C8C A018     
0019 6C8E 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6C90 0204  20         li    tmp0,txt.io.nofile    ; \
     6C92 3C2C     
0024 6C94 C804  38         mov   tmp0,@parm1           ; / Error message
     6C96 A006     
0025               
0026 6C98 06A0  32         bl    @error.display        ; Show error message
     6C9A 79DA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6C9C 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6C9E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CA0 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CA2 A72E     
0036               
0037 6CA4 06A0  32         bl    @cpym2m
     6CA6 24DA     
0038 6CA8 A72E                   data cmdb.cmdall,heap.top,80
     6CAA F000     
     6CAC 0050     
=======
0008 6B40 0649  14         dect  stack
0009 6B42 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B44 0649  14         dect  stack
0011 6B46 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B48 A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6B4A 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B4C 7A50     
0016               
0017 6B4E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B50 7A78     
0018 6B52 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B54 A018     
0019 6B56 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6B58 0204  20         li    tmp0,txt.io.nofile    ; \
     6B5A 3C80     
0024 6B5C C804  38         mov   tmp0,@parm1           ; / Error message
     6B5E A006     
0025               
0026 6B60 06A0  32         bl    @error.display        ; Show error message
     6B62 7A32     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6B64 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6B66 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6B68 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B6A A72E     
0036               
0037 6B6C 06A0  32         bl    @cpym2m
     6B6E 24DA     
0038 6B70 A72E                   data cmdb.cmdall,heap.top,80
     6B72 F000     
     6B74 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
<<<<<<< HEAD
0043 6CAE 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CB0 F000     
0044 6CB2 C804  38         mov   tmp0,@parm1
     6CB4 A006     
=======
0043 6B76 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B78 F000     
0044 6B7A C804  38         mov   tmp0,@parm1
     6B7C A006     
>>>>>>> b9b40bb (WIP optimize build scripts)
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
<<<<<<< HEAD
0052 6CB6 C820  54         mov   @fb.row,@parm1
     6CB8 A306     
     6CBA A006     
0053 6CBC 06A0  32         bl    @fb.row2line          ; Row to editor line
     6CBE 30D2     
=======
0052 6B7E C820  54         mov   @fb.row,@parm1
     6B80 A306     
     6B82 A006     
0053 6B84 06A0  32         bl    @fb.row2line          ; Row to editor line
     6B86 30C0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
<<<<<<< HEAD
0058 6CC0 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6CC2 A018     
     6CC4 A008     
0059 6CC6 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6CC8 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6CCA 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CCC F000     
0064 6CCE C804  38         mov   tmp0,@parm1
     6CD0 A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6CD2 0204  20         li    tmp0,id.file.insertfile
     6CD4 0002     
0069 6CD6 C804  38         mov   tmp0,@parm3           ; Set work mode
     6CD8 A00A     
0070               
0071 6CDA 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6CDC 78A2     
=======
0058 6B88 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6B8A A018     
     6B8C A008     
0059 6B8E 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6B90 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6B92 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B94 F000     
0064 6B96 C804  38         mov   tmp0,@parm1
     6B98 A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6B9A 0204  20         li    tmp0,id.file.insertfile
     6B9C 0002     
0069 6B9E C804  38         mov   tmp0,@parm3           ; Set work mode
     6BA0 A00A     
0070               
0071 6BA2 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6BA4 7904     
>>>>>>> b9b40bb (WIP optimize build scripts)
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
<<<<<<< HEAD
0079 6CDE 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6CE0 A318     
0080 6CE2 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6CE4 A506     
0081               
0082 6CE6 C820  54         mov   @fb.topline,@parm1
     6CE8 A304     
     6CEA A006     
0083 6CEC 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6CEE 7AA0     
=======
0079 6BA6 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6BA8 A318     
0080 6BAA 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6BAC A506     
0081               
0082 6BAE C820  54         mov   @fb.topline,@parm1
     6BB0 A304     
     6BB2 A006     
0083 6BB4 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6BB6 7B20     
>>>>>>> b9b40bb (WIP optimize build scripts)
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
<<<<<<< HEAD
0091 6CF0 C839  50         mov   *stack+,@parm1        ; Pop top row
     6CF2 A006     
0092 6CF4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093               
0094 6CF6 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6CF8 A008     
0095               
0096 6CFA 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6CFC 651E     
0097                                                   ; | i  @parm1 = Top line in editor buffer
0098                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0091 6BB8 C839  50         mov   *stack+,@parm1        ; Pop top row
     6BBA A006     
0092 6BBC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6BBE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6BC0 6508     
0094                                                   ; / i  @parm1 = Line in editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0115                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
<<<<<<< HEAD
0008 6CFE 0649  14         dect  stack
0009 6D00 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D02 0649  14         dect  stack
0011 6D04 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D06 A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6D08 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D0A 79F8     
0016               
0017 6D0C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D0E 7A20     
0018 6D10 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D12 A018     
0019 6D14 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D16 0204  20         li    tmp0,txt.io.nofile    ; \
     6D18 3C2C     
0024 6D1A C804  38         mov   tmp0,@parm1           ; / Error message
     6D1C A006     
0025               
0026 6D1E 06A0  32         bl    @error.display        ; Show error message
     6D20 79DA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D22 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D24 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D26 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D28 A72E     
0036               
0037 6D2A 06A0  32         bl    @cpym2m
     6D2C 24DA     
0038 6D2E A72E                   data cmdb.cmdall,heap.top,80
     6D30 F000     
     6D32 0050     
=======
0008 6BC2 0649  14         dect  stack
0009 6BC4 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6BC6 0649  14         dect  stack
0011 6BC8 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6BCA A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6BCC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6BCE 7A50     
0016               
0017 6BD0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6BD2 7A78     
0018 6BD4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6BD6 A018     
0019 6BD8 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6BDA 0204  20         li    tmp0,txt.io.nofile    ; \
     6BDC 3C80     
0024 6BDE C804  38         mov   tmp0,@parm1           ; / Error message
     6BE0 A006     
0025               
0026 6BE2 06A0  32         bl    @error.display        ; Show error message
     6BE4 7A32     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6BE6 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6BE8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6BEA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BEC A72E     
0036               
0037 6BEE 06A0  32         bl    @cpym2m
     6BF0 24DA     
0038 6BF2 A72E                   data cmdb.cmdall,heap.top,80
     6BF4 F000     
     6BF6 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
<<<<<<< HEAD
0043 6D34 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D36 F000     
0044 6D38 C804  38         mov   tmp0,@parm1
     6D3A A006     
=======
0043 6BF8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BFA F000     
0044 6BFC C804  38         mov   tmp0,@parm1
     6BFE A006     
>>>>>>> b9b40bb (WIP optimize build scripts)
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
<<<<<<< HEAD
0049 6D3C C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6D3E A504     
     6D40 A008     
=======
0049 6C00 C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6C02 A504     
     6C04 A008     
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
<<<<<<< HEAD
0054 6D42 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D44 F000     
0055 6D46 C804  38         mov   tmp0,@parm1
     6D48 A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6D4A 0204  20         li    tmp0,id.file.appendfile
     6D4C 0003     
0060 6D4E C804  38         mov   tmp0,@parm3           ; Set work mode
     6D50 A00A     
0061               
0062 6D52 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6D54 78A2     
=======
0054 6C06 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6C08 F000     
0055 6C0A C804  38         mov   tmp0,@parm1
     6C0C A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6C0E 0204  20         li    tmp0,id.file.appendfile
     6C10 0003     
0060 6C12 C804  38         mov   tmp0,@parm3           ; Set work mode
     6C14 A00A     
0061               
0062 6C16 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6C18 7904     
>>>>>>> b9b40bb (WIP optimize build scripts)
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
<<<<<<< HEAD
0070 6D56 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6D58 A318     
0071 6D5A 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6D5C A506     
0072               
0073 6D5E C820  54         mov   @fb.topline,@parm1
     6D60 A304     
     6D62 A006     
0074 6D64 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6D66 7AA0     
=======
0070 6C1A 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6C1C A318     
0071 6C1E 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6C20 A506     
0072               
0073 6C22 C820  54         mov   @fb.topline,@parm1
     6C24 A304     
     6C26 A006     
0074 6C28 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6C2A 7B20     
>>>>>>> b9b40bb (WIP optimize build scripts)
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
<<<<<<< HEAD
0082 6D68 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D6A A006     
0083 6D6C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084               
0085 6D6E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6D70 A008     
0086               
0087 6D72 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D74 651E     
0088                                                   ; | i  @parm1 = Top line in editor buffer
0089                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0082 6C2C C839  50         mov   *stack+,@parm1        ; Pop top row
     6C2E A006     
0083 6C30 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084 6C32 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6C34 6508     
0085                                                   ; / i  @parm1 = Line in editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0116                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
<<<<<<< HEAD
0008 6D76 0204  20         li    tmp0,clip1
     6D78 3100     
0009 6D7A 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6D7C 0204  20         li    tmp0,clip2
     6D7E 3200     
0013 6D80 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6D82 0204  20         li    tmp0,clip3
     6D84 3300     
0017 6D86 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6D88 0204  20         li    tmp0,clip4
     6D8A 3400     
0021 6D8C 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6D8E 0204  20         li    tmp0,clip5
     6D90 3500     
0025 6D92 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6D94 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6D96 A006     
0030               
0031 6D98 06A0  32         bl    @film
     6D9A 2236     
0032 6D9C A72E                   data cmdb.cmdall,>00,80
     6D9E 0000     
     6DA0 0050     
0033               
0034 6DA2 06A0  32         bl    @cpym2m
     6DA4 24DA     
0035 6DA6 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6DA8 A72E     
     6DAA 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6DAC C120  34         mov   @tv.clip.fname,tmp0
     6DAE DE50     
0040 6DB0 C144  18         mov   tmp0,tmp1
0041 6DB2 0984  32         srl   tmp0,8                ; Get string length
0042 6DB4 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6DB6 A72E     
0043 6DB8 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6DBA D520  46         movb  @parm1,*tmp0          ; Append suffix
     6DBC A006     
0045               
0046 6DBE 0460  28         b     @edkey.action.cmdb.insert
     6DC0 6C78     
0047                                                   ; Insert file
                   < stevie_b1.asm
0117                       copy  "edkey.cmdb.file.save.asm"    ; Save file
=======
0008 6C36 0204  20         li    tmp0,clip1
     6C38 3100     
0009 6C3A 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6C3C 0204  20         li    tmp0,clip2
     6C3E 3200     
0013 6C40 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6C42 0204  20         li    tmp0,clip3
     6C44 3300     
0017 6C46 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6C48 0204  20         li    tmp0,clip4
     6C4A 3400     
0021 6C4C 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6C4E 0204  20         li    tmp0,clip5
     6C50 3500     
0025 6C52 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6C54 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6C56 A006     
0030               
0031 6C58 06A0  32         bl    @film
     6C5A 2236     
0032 6C5C A72E                   data cmdb.cmdall,>00,80
     6C5E 0000     
     6C60 0050     
0033               
0034 6C62 06A0  32         bl    @cpym2m
     6C64 24DA     
0035 6C66 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6C68 A72E     
     6C6A 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6C6C C120  34         mov   @tv.clip.fname,tmp0
     6C6E DE50     
0040 6C70 C144  18         mov   tmp0,tmp1
0041 6C72 0984  32         srl   tmp0,8                ; Get string length
0042 6C74 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6C76 A72E     
0043 6C78 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6C7A D520  46         movb  @parm1,*tmp0          ; Append suffix
     6C7C A006     
0045               
0046 6C7E 0460  28         b     @edkey.action.cmdb.insert
     6C80 6B40     
0047                                                   ; Insert file
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.file.clipdev.asm" ; Configure clipboard device
     **** ****     > edkey.cmdb.file.clipdev.asm
0001               * FILE......: edkey.cmdb.fíle.clipdev.asm
0002               * Purpose...: Configure clipboard device
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard device
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clipdev.configure:
0008                       ;-------------------------------------------------------
0009                       ; Configure
0010                       ;-------------------------------------------------------
0011 6C82 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C84 7A50     
0012               
0013 6C86 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C88 7A78     
0014 6C8A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C8C A018     
0015 6C8E 1607  14         jne   !                     ; No, set clipboard device and filename
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6C90 0204  20         li    tmp0,txt.io.nofile    ; \
     6C92 3C80     
0020 6C94 C804  38         mov   tmp0,@parm1           ; / Error message
     6C96 A006     
0021               
0022 6C98 06A0  32         bl    @error.display        ; Show error message
     6C9A 7A32     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6C9C 1018  14         jmp   edkey.action.cmdb.clipdev.configure.exit
0027                       ;-------------------------------------------------------
0028                       ; Set clipboard device and filename
0029                       ;-------------------------------------------------------
0030 6C9E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6CA0 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CA2 A72E     
0032               
0033 6CA4 06A0  32         bl    @cpym2m
     6CA6 24DA     
0034 6CA8 A72E                   data cmdb.cmdall,tv.clip.fname,80
     6CAA DE50     
     6CAC 0050     
0035                                                   ; Copy filename from command line to buffer
0036               
0037                       ;-------------------------------------------------------
0038                       ; Show message
0039                       ;-------------------------------------------------------
0040               edkey.action.cmdb.clipdev.configure.message:
0041 6CAE 06A0  32         bl    @hchar
     6CB0 27D2     
0042 6CB2 0034                   byte 0,52,32,20
     6CB4 2014     
0043 6CB6 FFFF                   data EOL              ; Erase any previous message
0044               
0045 6CB8 06A0  32         bl    @putat
     6CBA 2442     
0046 6CBC 0034                   byte 0,52
0047 6CBE 3A5C                   data txt.done.clipdev
0048                       ;-------------------------------------------------------
0049                       ; Setup one shot task for removing overlay message
0050                       ;-------------------------------------------------------
0051 6CC0 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6CC2 3732     
0052 6CC4 C804  38         mov   tmp0,@tv.task.oneshot
     6CC6 A224     
0053               
0054 6CC8 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6CCA 2EF8     
0055 6CCC 0003                   data 3                ; / for getting consistent delay
0056                       ;-------------------------------------------------------
0057                       ; Exit
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.clipdev.configure.exit:
0060 6CCE 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6CD0 6456     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.file.save.asm"    ; Save file
>>>>>>> b9b40bb (WIP optimize build scripts)
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
<<<<<<< HEAD
0008 6DC2 0649  14         dect  stack
0009 6DC4 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6DC6 0649  14         dect  stack
0011 6DC8 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6DCA A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6DCC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6DCE 79F8     
0016               
0017 6DD0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6DD2 7A20     
0018 6DD4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6DD6 A018     
0019 6DD8 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6DDA 0204  20         li    tmp0,txt.io.nofile    ; \
     6DDC 3C2C     
0024 6DDE C804  38         mov   tmp0,@parm1           ; / Error message
     6DE0 A006     
0025               
0026 6DE2 06A0  32         bl    @error.display        ; Show error message
     6DE4 79DA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6DE6 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6DE8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6DEA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6DEC A72E     
0036               
0037 6DEE 06A0  32         bl    @cpym2m
     6DF0 24DA     
0038 6DF2 A72E                   data cmdb.cmdlen,heap.top,80
     6DF4 F000     
     6DF6 0050     
=======
0008 6CD2 0649  14         dect  stack
0009 6CD4 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6CD6 0649  14         dect  stack
0011 6CD8 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6CDA A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6CDC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6CDE 7A50     
0016               
0017 6CE0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6CE2 7A78     
0018 6CE4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6CE6 A018     
0019 6CE8 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6CEA 0204  20         li    tmp0,txt.io.nofile    ; \
     6CEC 3C80     
0024 6CEE C804  38         mov   tmp0,@parm1           ; / Error message
     6CF0 A006     
0025               
0026 6CF2 06A0  32         bl    @error.display        ; Show error message
     6CF4 7A32     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6CF6 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6CF8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CFA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CFC A72E     
0036               
0037 6CFE 06A0  32         bl    @cpym2m
     6D00 24DA     
0038 6D02 A72E                   data cmdb.cmdlen,heap.top,80
     6D04 F000     
     6D06 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
<<<<<<< HEAD
0043 6DF8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6DFA F000     
0044 6DFC C804  38         mov   tmp0,@parm1
     6DFE A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6E00 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6E02 A510     
     6E04 2022     
0049 6E06 130B  14         jeq   edkey.action.cmdb.save.all
=======
0043 6D08 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D0A F000     
0044 6D0C C804  38         mov   tmp0,@parm1
     6D0E A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D10 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D12 A510     
     6D14 2022     
0049 6D16 130B  14         jeq   edkey.action.cmdb.save.all
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
<<<<<<< HEAD
0054 6E08 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6E0A A50E     
     6E0C A008     
0055 6E0E 0620  34         dec   @parm2                ; /
     6E10 A008     
0056               
0057 6E12 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6E14 A510     
     6E16 A00A     
0058               
0059 6E18 0204  20         li    tmp0,id.file.saveblock
     6E1A 0005     
0060 6E1C 1007  14         jmp   edkey.action.cmdb.save.file
=======
0054 6D18 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D1A A50E     
     6D1C A008     
0055 6D1E 0620  34         dec   @parm2                ; /
     6D20 A008     
0056               
0057 6D22 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D24 A510     
     6D26 A00A     
0058               
0059 6D28 0204  20         li    tmp0,id.file.saveblock
     6D2A 0005     
0060 6D2C 1007  14         jmp   edkey.action.cmdb.save.file
>>>>>>> b9b40bb (WIP optimize build scripts)
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
<<<<<<< HEAD
0065 6E1E 04E0  34         clr   @parm2                ; First line to save
     6E20 A008     
0066 6E22 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6E24 A504     
     6E26 A00A     
0067               
0068 6E28 0204  20         li    tmp0,id.file.savefile
     6E2A 0004     
=======
0065 6D2E 04E0  34         clr   @parm2                ; First line to save
     6D30 A008     
0066 6D32 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D34 A504     
     6D36 A00A     
0067               
0068 6D38 0204  20         li    tmp0,id.file.savefile
     6D3A 0004     
>>>>>>> b9b40bb (WIP optimize build scripts)
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
<<<<<<< HEAD
0073 6E2C C804  38         mov   tmp0,@parm4           ; Set work mode
     6E2E A00C     
0074               
0075 6E30 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6E32 78CC     
=======
0073 6D3C C804  38         mov   tmp0,@parm4           ; Set work mode
     6D3E A00C     
0074               
0075 6D40 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D42 792E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
<<<<<<< HEAD
0086 6E34 C839  50         mov   *stack+,@parm1        ; Pop top row
     6E36 A006     
0087 6E38 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6E3A 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6E3C A008     
0090               
0091 6E3E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6E40 651E     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0086 6D44 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D46 A006     
0087 6D48 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6D4A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D4C 6508     
0089                                                   ; / i  @parm1 = Line in editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0118                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
<<<<<<< HEAD
0008 6E42 0649  14         dect  stack
0009 6E44 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6E46 0649  14         dect  stack
0011 6E48 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6E4A A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6E4C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6E4E 79F8     
0016               
0017 6E50 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6E52 7A20     
0018 6E54 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6E56 A018     
0019 6E58 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6E5A 0204  20         li    tmp0,txt.io.nofile    ; \
     6E5C 3C2C     
0024 6E5E C804  38         mov   tmp0,@parm1           ; / Error message
     6E60 A006     
0025               
0026 6E62 06A0  32         bl    @error.display        ; Show error message
     6E64 79DA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6E66 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6E68 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6E6A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6E6C A72E     
0036               
0037 6E6E 06A0  32         bl    @cpym2m
     6E70 24DA     
0038 6E72 A72E                   data cmdb.cmdlen,heap.top,80
     6E74 F000     
     6E76 0050     
=======
0008 6D4E 0649  14         dect  stack
0009 6D50 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D52 0649  14         dect  stack
0011 6D54 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D56 A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6D58 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D5A 7A50     
0016               
0017 6D5C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D5E 7A78     
0018 6D60 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D62 A018     
0019 6D64 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D66 0204  20         li    tmp0,txt.io.nofile    ; \
     6D68 3C80     
0024 6D6A C804  38         mov   tmp0,@parm1           ; / Error message
     6D6C A006     
0025               
0026 6D6E 06A0  32         bl    @error.display        ; Show error message
     6D70 7A32     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D72 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D74 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D76 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D78 A72E     
0036               
0037 6D7A 06A0  32         bl    @cpym2m
     6D7C 24DA     
0038 6D7E A72E                   data cmdb.cmdlen,heap.top,80
     6D80 F000     
     6D82 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
<<<<<<< HEAD
0043 6E78 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6E7A F000     
0044 6E7C C804  38         mov   tmp0,@parm1
     6E7E A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6E80 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6E82 A510     
     6E84 2022     
0049 6E86 130B  14         jeq   edkey.action.cmdb.print.all
=======
0043 6D84 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D86 F000     
0044 6D88 C804  38         mov   tmp0,@parm1
     6D8A A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D8C 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D8E A510     
     6D90 2022     
0049 6D92 130B  14         jeq   edkey.action.cmdb.print.all
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
<<<<<<< HEAD
0054 6E88 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6E8A A50E     
     6E8C A008     
0055 6E8E 0620  34         dec   @parm2                ; /
     6E90 A008     
0056               
0057 6E92 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6E94 A510     
     6E96 A00A     
0058               
0059 6E98 0204  20         li    tmp0,id.file.printblock
     6E9A 0008     
0060 6E9C 1007  14         jmp   edkey.action.cmdb.print.file
=======
0054 6D94 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D96 A50E     
     6D98 A008     
0055 6D9A 0620  34         dec   @parm2                ; /
     6D9C A008     
0056               
0057 6D9E C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6DA0 A510     
     6DA2 A00A     
0058               
0059 6DA4 0204  20         li    tmp0,id.file.printblock
     6DA6 0008     
0060 6DA8 1007  14         jmp   edkey.action.cmdb.print.file
>>>>>>> b9b40bb (WIP optimize build scripts)
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
<<<<<<< HEAD
0065 6E9E 04E0  34         clr   @parm2                ; First line to save
     6EA0 A008     
0066 6EA2 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6EA4 A504     
     6EA6 A00A     
0067               
0068 6EA8 0204  20         li    tmp0,id.file.printfile
     6EAA 0007     
=======
0065 6DAA 04E0  34         clr   @parm2                ; First line to save
     6DAC A008     
0066 6DAE C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6DB0 A504     
     6DB2 A00A     
0067               
0068 6DB4 0204  20         li    tmp0,id.file.printfile
     6DB6 0007     
>>>>>>> b9b40bb (WIP optimize build scripts)
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
<<<<<<< HEAD
0073 6EAC C804  38         mov   tmp0,@parm4           ; Set work mode
     6EAE A00C     
0074               
0075 6EB0 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6EB2 78CC     
=======
0073 6DB8 C804  38         mov   tmp0,@parm4           ; Set work mode
     6DBA A00C     
0074               
0075 6DBC 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6DBE 792E     
>>>>>>> b9b40bb (WIP optimize build scripts)
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
<<<<<<< HEAD
0086 6EB4 C839  50         mov   *stack+,@parm1        ; Pop top row
     6EB6 A006     
0087 6EB8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6EBA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6EBC A008     
0090               
0091 6EBE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6EC0 651E     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
=======
0086 6DC0 C839  50         mov   *stack+,@parm1        ; Pop top row
     6DC2 A006     
0087 6DC4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6DC6 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6DC8 6508     
0089                                                   ; / i  @parm1 = Line in editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0119                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
<<<<<<< HEAD
0020 6EC2 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6EC4 A506     
0021 6EC6 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6EC8 7452     
0022 6ECA 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6ECC 7A16     
0023 6ECE C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6ED0 A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6ED2 0284  22         ci    tmp0,>2000
     6ED4 2000     
0028 6ED6 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6ED8 0284  22         ci    tmp0,>7fff
     6EDA 7FFF     
0031 6EDC 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6EDE 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6EE0 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6EE2 FFCE     
0040 6EE4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6EE6 2026     
=======
0020 6DCA 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6DCC A506     
0021 6DCE 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6DD0 74B0     
0022 6DD2 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6DD4 7A6E     
0023 6DD6 C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6DD8 A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6DDA 0284  22         ci    tmp0,>2000
     6DDC 2000     
0028 6DDE 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6DE0 0284  22         ci    tmp0,>7fff
     6DE2 7FFF     
0031 6DE4 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6DE6 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6DE8 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6DEA FFCE     
0040 6DEC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6DEE 2026     
>>>>>>> b9b40bb (WIP optimize build scripts)
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
<<<<<<< HEAD
0045 6EE8 0460  28         b     @edkey.keyscan.hook.debounce
     6EEA 615E     
=======
0045 6DF0 0460  28         b     @edkey.keyscan.hook.debounce
     6DF2 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
<<<<<<< HEAD
0064 6EEC 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6EEE 7A52     
0065 6EF0 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EF2 A71A     
0066 6EF4 0460  28        b     @edkey.keyscan.hook.debounce
     6EF6 615E     
=======
0064 6DF4 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6DF6 7AAA     
0065 6DF8 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DFA A71A     
0066 6DFC 0460  28        b     @edkey.keyscan.hook.debounce
     6DFE 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.am.toggle
0072               * Toggle 'AutoUnpack' on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.am.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.am.toggle:
<<<<<<< HEAD
0083 6EF8 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     6EFA 7A48     
0084 6EFC 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EFE A71A     
0085 6F00 0460  28        b     @edkey.keyscan.hook.debounce
     6F02 615E     
=======
0083 6E00 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     6E02 7AA0     
0084 6E04 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6E06 A71A     
0085 6E08 0460  28        b     @edkey.keyscan.hook.debounce
     6E0A 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0086                                                   ; Back to editor main
0087               
0088               
0089               
0090               ***************************************************************
0091               * edkey.action.cmdb.preset
0092               * Set command value to preset
0093               ***************************************************************
0094               * b   @edkey.action.cmdb.preset
0095               *--------------------------------------------------------------
0096               * INPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * none
0101               ********|*****|*********************|**************************
0102               edkey.action.cmdb.preset:
<<<<<<< HEAD
0103 6F04 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6F06 7A2A     
0104 6F08 0460  28        b     @edkey.keyscan.hook.debounce
     6F0A 615E     
=======
0103 6E0C 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6E0E 7A82     
0104 6E10 0460  28        b     @edkey.keyscan.hook.debounce
     6E12 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * dialog.close
0111               * Close dialog "Help"
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.close.about
0114               *--------------------------------------------------------------
0115               * OUTPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.close.about:
<<<<<<< HEAD
0122 6F0C 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6F0E A71E     
0123                       ;------------------------------------------------------
0124                       ; Erase header line
0125                       ;------------------------------------------------------
0126 6F10 06A0  32         bl    @hchar
     6F12 27D2     
0127 6F14 0000                   byte 0,0,32,80*2
     6F16 20A0     
0128 6F18 FFFF                   data EOL
0129               
0130 6F1A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F1C 6FE0     
0131                       ;-------------------------------------------------------
0132                       ; Exit
0133                       ;-------------------------------------------------------
0134 6F1E 0460  28         b     @edkey.keyscan.hook.debounce
     6F20 615E     
=======
0122 6E14 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6E16 A71E     
0123                       ;------------------------------------------------------
0124                       ; Erase header line
0125                       ;------------------------------------------------------
0126 6E18 06A0  32         bl    @hchar
     6E1A 27D2     
0127 6E1C 0000                   byte 0,0,32,80*2
     6E1E 20A0     
0128 6E20 FFFF                   data EOL
0129               
0130 6E22 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E24 6EAC     
0131                       ;-------------------------------------------------------
0132                       ; Exit
0133                       ;-------------------------------------------------------
0134 6E26 0460  28         b     @edkey.keyscan.hook.debounce
     6E28 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0135                                                   ; Back to editor main
0136               
0137               
0138               
0139               ***************************************************************
0140               * edkey.action.cmdb.close.dialog
0141               * Close dialog
0142               ***************************************************************
0143               * b   @edkey.action.cmdb.close.dialog
0144               *--------------------------------------------------------------
0145               * OUTPUT
0146               * none
0147               *--------------------------------------------------------------
0148               * Register usage
0149               * none
0150               ********|*****|*********************|**************************
0151               edkey.action.cmdb.close.dialog:
<<<<<<< HEAD
0152 6F22 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F24 6FE0     
=======
0152 6E2A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E2C 6EAC     
>>>>>>> b9b40bb (WIP optimize build scripts)
0153                       ;-------------------------------------------------------
0154                       ; Exit
0155                       ;-------------------------------------------------------
0156               edkey.action.cmdb.close.dialog.exit:
<<<<<<< HEAD
0157 6F26 0460  28         b     @edkey.keyscan.hook.debounce
     6F28 615E     
=======
0157 6E2E 0460  28         b     @edkey.keyscan.hook.debounce
     6E30 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0158                                                   ; Back to editor main
                   < stevie_b1.asm
0120                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
<<<<<<< HEAD
0008 6F2A 06A0  32         bl    @hchar
     6F2C 27D2     
0009 6F2E 0034                   byte 0,52,32,20
     6F30 2014     
0010 6F32 FFFF                   data EOL              ; Erase any previous message
0011               
0012 6F34 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6F36 A50C     
0013 6F38 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6F3A 06A0  32         bl    @putat
     6F3C 2442     
0018 6F3E 0034                   byte 0,52
0019 6F40 3A16                   data txt.autoins.on   ; AutoInsert on
0020 6F42 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6F44 06A0  32 !       bl    @putat
     6F46 2442     
0025 6F48 0034                   byte 0,52
0026 6F4A 3A26                   data txt.autoins.off   ; AutoInsert off
=======
0008 6E32 06A0  32         bl    @hchar
     6E34 27D2     
0009 6E36 0034                   byte 0,52,32,20
     6E38 2014     
0010 6E3A FFFF                   data EOL              ; Erase any previous message
0011               
0012 6E3C 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6E3E A50C     
0013 6E40 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6E42 06A0  32         bl    @putat
     6E44 2442     
0018 6E46 0034                   byte 0,52
0019 6E48 3A6A                   data txt.autoins.on   ; AutoInsert on
0020 6E4A 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6E4C 06A0  32 !       bl    @putat
     6E4E 2442     
0025 6E50 0034                   byte 0,52
0026 6E52 3A7A                   data txt.autoins.off   ; AutoInsert off
>>>>>>> b9b40bb (WIP optimize build scripts)
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
<<<<<<< HEAD
0031 6F4C 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6F4E 3744     
0032 6F50 C804  38         mov   tmp0,@tv.task.oneshot
     6F52 A226     
0033               
0034 6F54 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6F56 2EF8     
0035 6F58 0003                   data 3                ; / for getting consistent delay
=======
0031 6E54 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6E56 3732     
0032 6E58 C804  38         mov   tmp0,@tv.task.oneshot
     6E5A A224     
0033               
0034 6E5C 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6E5E 2EF8     
0035 6E60 0003                   data 3                ; / for getting consistent delay
>>>>>>> b9b40bb (WIP optimize build scripts)
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
<<<<<<< HEAD
0040 6F5A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F5C 6FE0     
0041 6F5E 0460  28         b     @edkey.keyscan.hook.debounce
     6F60 615E     
=======
0040 6E62 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E64 6EAC     
0041 6E66 0460  28         b     @edkey.keyscan.hook.debounce
     6E68 6160     
>>>>>>> b9b40bb (WIP optimize build scripts)
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0121                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 6F62 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6F64 7A20     
0012 6F66 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6F68 A018     
0013 6F6A 1324  14         jeq   edkey.action.cmdb.goto.exit
=======
0011 6E6A 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6E6C 7A78     
0012 6E6E C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6E70 A018     
0013 6E72 131A  14         jeq   edkey.action.cmdb.goto.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
<<<<<<< HEAD
0018 6F6C 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6F6E A72F     
0019 6F70 C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6F72 A006     
0020               
0021 6F74 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6F76 3368     
=======
0018 6E74 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6E76 A72F     
0019 6E78 C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6E7A A006     
0020               
0021 6E7C 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6E7E 3356     
>>>>>>> b9b40bb (WIP optimize build scripts)
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
<<<<<<< HEAD
0032 6F78 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6F7A A01A     
     6F7C 2022     
0033 6F7E 131A  14         jeq   edkey.action.cmdb.goto.exit
=======
0032 6E80 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6E82 A01A     
     6E84 2022     
0033 6E86 1310  14         jeq   edkey.action.cmdb.goto.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Assert - Line number is invalid
0037                       ;-------------------------------------------------------
<<<<<<< HEAD
0038 6F80 C120  34         mov   @outparm1,tmp0
     6F82 A018     
0039 6F84 1317  14         jeq   edkey.action.cmdb.goto.exit
=======
0038 6E88 C120  34         mov   @outparm1,tmp0
     6E8A A018     
0039 6E8C 130D  14         jeq   edkey.action.cmdb.goto.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0040                                                   ; Yes, exit
0041                       ;-------------------------------------------------------
0042                       ; Prepare for goto
0043                       ;-------------------------------------------------------
<<<<<<< HEAD
0044               edkey.action.cmdb.goto.prepare:
0045 6F86 0649  14         dect  stack
0046 6F88 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6F8A A018     
0047               
0048 6F8C 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F8E 6FE0     
0049                       ;-------------------------------------------------------
0050                       ; Crunch current row if dirty
0051                       ;-------------------------------------------------------
0052 6F90 8820  50         c     @fb.row.dirty,@w$ffff
     6F92 A30A     
     6F94 2022     
0053 6F96 1604  14         jne   edkey.action.cmdb.goto.line
0054               
0055 6F98 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F9A 6FF4     
0056                                                   ; \ i   @fb.top      = Address top row in FB
0057                                                   ; | i   @fb.row      = Current row in FB
0058                                                   ; | i   @fb.column   = Current column in FB
0059                                                   ; / i   @fb.colsline = Cols per line in FB
0060               
0061 6F9C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F9E A30A     
0062                       ;-------------------------------------------------------
0063                       ; Goto line
0064                       ;-------------------------------------------------------
0065               edkey.action.cmdb.goto.line:
0066 6FA0 C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6FA2 A006     
0067 6FA4 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6FA6 A006     
0068               
0069 6FA8 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6FAA A312     
0070               
0071 6FAC 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6FAE A008     
0072               
0073 6FB0 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6FB2 651E     
0074                                                   ; | i  @parm1 = Top line in editor buffer
0075                                                   ; / i  @parm2 = Row offset in frame buffer
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079               edkey.action.cmdb.goto.exit:
0080 6FB4 0460  28         b     @edkey.keyscan.hook.debounce
     6FB6 615E     
0081                                                   ; Back to editor main
=======
0044               edkey.action.cmdb.goto.line:
0045 6E8E 0649  14         dect  stack
0046 6E90 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6E92 A018     
0047               
0048 6E94 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E96 6EAC     
0049               
0050 6E98 C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6E9A A006     
0051 6E9C 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6E9E A006     
0052               
0053 6EA0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6EA2 A312     
0054               
0055 6EA4 0460  28         b     @edkey.fb.goto.toprow ; Position cursor and exit
     6EA6 6508     
0056                                                   ; \ i  @parm1 = Line in editor buffer
0057                                                   ; /
0058                       ;-------------------------------------------------------
0059                       ; Exit
0060                       ;-------------------------------------------------------
0061               edkey.action.cmdb.goto.exit:
0062 6EA8 0460  28         b     @edkey.keyscan.hook.debounce
     6EAA 6160     
0063                                                   ; Back to editor main
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0122                       copy  "edkey.cmdb.font.asm"         ; Set font
     **** ****     > edkey.cmdb.font.asm
0001               * FILE......: edkey.cmdb.font.asm
0002               * Purpose...: Set specified font
0003               
0004               *---------------------------------------------------------------
0005               * Load font
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.font1:
0008 6FB8 04C4  14         clr   tmp0                  ; Load font 1
0009 6FBA 100C  14         jmp   edkey.action.cmdb.font.load
0010               edkey.action.cmdb.font2:
0011 6FBC 0204  20         li    tmp0,1                ; Load font 2
     6FBE 0001     
0012 6FC0 1009  14         jmp   edkey.action.cmdb.font.load
0013               edkey.action.cmdb.font3:
0014 6FC2 0204  20         li    tmp0,2                ; Load font 3
     6FC4 0002     
0015 6FC6 1006  14         jmp   edkey.action.cmdb.font.load
0016               edkey.action.cmdb.font4:
0017 6FC8 0204  20         li    tmp0,3                ; Load font 4
     6FCA 0003     
0018 6FCC 1003  14         jmp   edkey.action.cmdb.font.load
0019               edkey.action.cmdb.font5:
0020 6FCE 0204  20         li    tmp0,4                ; Load font 5
     6FD0 0004     
0021 6FD2 1000  14         jmp   edkey.action.cmdb.font.load
0022                       ;-------------------------------------------------------
0023                       ; Load font
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.font.load:
0026 6FD4 C804  38         mov   tmp0,@parm1
     6FD6 A006     
0027 6FD8 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     6FDA 7B82     
0028                                                   ; \ i  @parm1       = Font index (0-5)
0029                                                   ; / o  @tv.font.ptr = Pointer to font
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.cmdb.font.exit:
0034 6FDC 0460  28         b     @edkey.keyscan.hook.debounce
     6FDE 615E     
0035                                                   ; Back to editor main
                   < stevie_b1.asm
0123                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
<<<<<<< HEAD
0017 6FE0 0649  14         dect  stack
0018 6FE2 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6FE4 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6FE6 A71C     
0023 6FE8 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6FEA 79F8     
0024 6FEC 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6FEE A31A     
=======
0017 6EAC 0649  14         dect  stack
0018 6EAE C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6EB0 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6EB2 A71C     
0023 6EB4 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6EB6 7A50     
0024 6EB8 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6EBA A31A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
<<<<<<< HEAD
0029 6FF0 C2F9  30         mov   *stack+,r11           ; Pop r11
0030 6FF2 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0124                       ;-----------------------------------------------------------------------
0125                       ; Logic for Editor Buffer
0126                       ;-----------------------------------------------------------------------
0127                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
=======
0029 6EBC C2F9  30         mov   *stack+,r11           ; Pop r11
0030 6EBE 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0116                       ;-----------------------------------------------------------------------
0117                       ; Logic for Framebuffer (1)
0118                       ;-----------------------------------------------------------------------
0119                       copy  "fb.cursor.up.asm"            ; Cursor up
     **** ****     > fb.cursor.up.asm
0001               * FILE......: fb.cursor.up.asm
0002               * Purpose...: Move the cursor up 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.up
0007               * Logic for moving cursor up 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.up
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.up
0021 6EC0 0649  14         dect  stack
0022 6EC2 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current line if dirty
0025                       ;-------------------------------------------------------
0026 6EC4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6EC6 A31A     
0027 6EC8 8820  50         c     @fb.row.dirty,@w$ffff
     6ECA A30A     
     6ECC 2022     
0028 6ECE 1604  14         jne   fb.cursor.up.cursor
0029 6ED0 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6ED2 705A     
0030 6ED4 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6ED6 A30A     
0031                       ;-------------------------------------------------------
0032                       ; Move cursor
0033                       ;-------------------------------------------------------
0034               fb.cursor.up.cursor:
0035 6ED8 C120  34         mov   @fb.row,tmp0
     6EDA A306     
0036 6EDC 150B  14         jgt   fb.cursor.up.cursor_up
0037                                                   ; Move cursor up if fb.row > 0
0038 6EDE C120  34         mov   @fb.topline,tmp0      ; Do we need to scroll?
     6EE0 A304     
0039 6EE2 130C  14         jeq   fb.cursor.up.set_cursorx
0040                                                   ; At top, only position cursor X
0041                       ;-------------------------------------------------------
0042                       ; Scroll 1 line
0043                       ;-------------------------------------------------------
0044 6EE4 0604  14         dec   tmp0                  ; fb.topline--
0045 6EE6 C804  38         mov   tmp0,@parm1           ; Scroll one line up
     6EE8 A006     
0046               
0047 6EEA 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6EEC 7B20     
0048                                                   ; | i  @parm1 = Line to start with
0049                                                   ; /             (becomes @fb.topline)
0050               
0051 6EEE 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6EF0 A312     
0052 6EF2 1004  14         jmp   fb.cursor.up.set_cursorx
0053                       ;-------------------------------------------------------
0054                       ; Move cursor up
0055                       ;-------------------------------------------------------
0056               fb.cursor.up.cursor_up:
0057 6EF4 0620  34         dec   @fb.row               ; Row-- in screen buffer
     6EF6 A306     
0058 6EF8 06A0  32         bl    @up                   ; Row-- VDP cursor
     6EFA 26D4     
0059                       ;-------------------------------------------------------
0060                       ; Check line length and position cursor
0061                       ;-------------------------------------------------------
0062               fb.cursor.up.set_cursorx:
0063 6EFC 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6EFE 36C8     
0064                                                   ; | i  @fb.row        = Row in frame buffer
0065                                                   ; / o  @fb.row.length = Length of row
0066               
0067 6F00 8820  50         c     @fb.column,@fb.row.length
     6F02 A30C     
     6F04 A308     
0068 6F06 1207  14         jle   fb.cursor.up.exit
0069                       ;-------------------------------------------------------
0070                       ; Adjust cursor column position
0071                       ;-------------------------------------------------------
0072 6F08 C820  54         mov   @fb.row.length,@fb.column
     6F0A A308     
     6F0C A30C     
0073 6F0E C120  34         mov   @fb.column,tmp0
     6F10 A30C     
0074 6F12 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6F14 26DE     
0075                       ;-------------------------------------------------------
0076                       ; Exit
0077                       ;-------------------------------------------------------
0078               fb.cursor.up.exit:
0079 6F16 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F18 30DA     
0080 6F1A C2F9  30         mov   *stack+,r11           ; Pop r11
0081 6F1C 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0120                       copy  "fb.cursor.down.asm"          ; Cursor down
     **** ****     > fb.cursor.down.asm
0001               * FILE......: fb.cursor.down.asm
0002               * Purpose...: Move the cursor down 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.down
0007               * Logic for moving cursor down 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.down
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.down:
0021 6F1E 0649  14         dect  stack
0022 6F20 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Last line?
0025                       ;------------------------------------------------------
0026 6F22 8820  50         c     @fb.row,@edb.lines    ; Last line in editor buffer ?
     6F24 A306     
     6F26 A504     
0027 6F28 1332  14         jeq   fb.cursor.down.exit
0028                                                   ; Yes, skip further processing
0029 6F2A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6F2C A31A     
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6F2E 8820  50         c     @fb.row.dirty,@w$ffff
     6F30 A30A     
     6F32 2022     
0034 6F34 1604  14         jne   fb.cursor.down.move
0035 6F36 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F38 705A     
0036 6F3A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F3C A30A     
0037                       ;-------------------------------------------------------
0038                       ; Move cursor
0039                       ;-------------------------------------------------------
0040               fb.cursor.down.move:
0041                       ;-------------------------------------------------------
0042                       ; EOF reached?
0043                       ;-------------------------------------------------------
0044 6F3E C120  34         mov   @fb.topline,tmp0
     6F40 A304     
0045 6F42 A120  34         a     @fb.row,tmp0
     6F44 A306     
0046 6F46 8120  34         c     @edb.lines,tmp0       ; fb.topline + fb.row = edb.lines ?
     6F48 A504     
0047 6F4A 1314  14         jeq   fb.cursor.down.set_cursorx
0048                                                   ; Yes, only position cursor X
0049                       ;-------------------------------------------------------
0050                       ; Check if scrolling required
0051                       ;-------------------------------------------------------
0052 6F4C C120  34         mov   @fb.scrrows,tmp0
     6F4E A31C     
0053 6F50 0604  14         dec   tmp0
0054 6F52 8120  34         c     @fb.row,tmp0
     6F54 A306     
0055 6F56 110A  14         jlt   fb.cursor.down.cursor
0056                       ;-------------------------------------------------------
0057                       ; Scroll 1 line
0058                       ;-------------------------------------------------------
0059 6F58 C820  54         mov   @fb.topline,@parm1
     6F5A A304     
     6F5C A006     
0060 6F5E 05A0  34         inc   @parm1
     6F60 A006     
0061               
0062 6F62 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6F64 7B20     
0063                                                   ; | i  @parm1 = Line to start with
0064                                                   ; /             (becomes @fb.topline)
0065               
0066 6F66 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6F68 A312     
0067 6F6A 1004  14         jmp   fb.cursor.down.set_cursorx
0068                       ;-------------------------------------------------------
0069                       ; Move cursor down a row, there are still rows left
0070                       ;-------------------------------------------------------
0071               fb.cursor.down.cursor:
0072 6F6C 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     6F6E A306     
0073 6F70 06A0  32         bl    @down                 ; Row++ VDP cursor
     6F72 26CC     
0074                       ;-------------------------------------------------------
0075                       ; Check line length and position cursor
0076                       ;-------------------------------------------------------
0077               fb.cursor.down.set_cursorx:
0078 6F74 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6F76 36C8     
0079                                                   ; | i  @fb.row        = Row in frame buffer
0080                                                   ; / o  @fb.row.length = Length of row
0081               
0082 6F78 8820  50         c     @fb.column,@fb.row.length
     6F7A A30C     
     6F7C A308     
0083 6F7E 1207  14         jle   fb.cursor.down.exit
0084                                                   ; Exit
0085                       ;-------------------------------------------------------
0086                       ; Adjust cursor column position
0087                       ;-------------------------------------------------------
0088 6F80 C820  54         mov   @fb.row.length,@fb.column
     6F82 A308     
     6F84 A30C     
0089 6F86 C120  34         mov   @fb.column,tmp0
     6F88 A30C     
0090 6F8A 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6F8C 26DE     
0091                       ;-------------------------------------------------------
0092                       ; Exit
0093                       ;-------------------------------------------------------
0094               fb.cursor.down.exit:
0095 6F8E 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F90 30DA     
0096 6F92 C2F9  30         mov   *stack+,r11           ; Pop r11
0097 6F94 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0121                       copy  "fb.cursor.home.asm"          ; Cursor home
     **** ****     > fb.cursor.home.asm
0001               * FILE......: fb.cursor.home.asm
0002               * Purpose...: Move the cursor home
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.home
0007               * Logic for moving cursor home
0008               ***************************************************************
0009               * bl @fb.cursor.home
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ********|*****|*********************|**************************
0020               fb.cursor.home:
0021 6F96 0649  14         dect  stack
0022 6F98 C64B  30         mov   r11,*stack            ; Save return address
0023 6F9A 0649  14         dect  stack
0024 6F9C C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Cursor home
0027                       ;------------------------------------------------------
0028 6F9E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6FA0 A31A     
0029 6FA2 C120  30         mov   @wyx,tmp0
     6FA4 832A     
0030 6FA6 0244  22         andi  tmp0,>ff00            ; Reset cursor X position to 0
     6FA8 FF00     
0031 6FAA C804  30         mov   tmp0,@wyx             ; VDP cursor column=0
     6FAC 832A     
0032 6FAE 04E0  34         clr   @fb.column
     6FB0 A30C     
0033 6FB2 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6FB4 30DA     
0034 6FB6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6FB8 A31A     
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               fb.cursor.home.exit:
0039 6FBA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0040 6FBC C2F9  30         mov   *stack+,r11           ; Pop r11
0041 6FBE 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0122                       copy  "fb.insert.line.asm"          ; Insert new line
     **** ****     > fb.insert.line.asm
0001               * FILE......: fb.insert.line.asm
0002               * Purpose...: Insert a new line
0003               
0004               ***************************************************************
0005               * fb.insert.line.asm
0006               * Insert a new line
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Insert line on current line or on following line.
0012               *          @parm1  = 0  -> current line
0013               *          @parm1 <> 0  -> following line
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1
0020               ********|*****|*********************|**************************
0021               fb.insert.line:
0022 6FC0 0649  14         dect  stack
0023 6FC2 C64B  30         mov   r11,*stack            ; Save return address
0024 6FC4 0649  14         dect  stack
0025 6FC6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6FC8 0649  14         dect  stack
0027 6FCA C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Initialisation
0030                       ;-------------------------------------------------------
0031 6FCC 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6FCE A506     
0032 6FD0 04C5  14         clr   tmp1                  ; Offset current line
0033 6FD2 C120  34         mov   @parm1,tmp0           ; Insert on current line or following line?
     6FD4 A006     
0034 6FD6 1301  14         jeq   !                     ; Current line
0035 6FD8 0585  14         inc   tmp1                  ; Following line
0036                       ;-------------------------------------------------------
0037                       ; Crunch current line if dirty
0038                       ;-------------------------------------------------------
0039 6FDA 8820  50 !       c     @fb.row.dirty,@w$ffff
     6FDC A30A     
     6FDE 2022     
0040 6FE0 1604  14         jne   fb.insert.line.insert
0041 6FE2 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6FE4 705A     
0042 6FE6 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6FE8 A30A     
0043                       ;-------------------------------------------------------
0044                       ; Insert entry in index
0045                       ;-------------------------------------------------------
0046               fb.insert.line.insert:
0047 6FEA 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6FEC 30DA     
0048 6FEE C820  54         mov   @fb.topline,@parm1
     6FF0 A304     
     6FF2 A006     
0049 6FF4 A820  54         a     @fb.row,@parm1        ; Line number to insert
     6FF6 A306     
     6FF8 A006     
0050 6FFA A805  38         a     tmp1,@parm1           ; Add optional offset (for following line)
     6FFC A006     
0051 6FFE C820  54         mov   @edb.lines,@parm2     ; Last line to reorganize
     7000 A504     
     7002 A008     
0052               
0053 7004 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     7006 35E2     
0054                                                   ; \ i  parm1 = Line for insert
0055                                                   ; / i  parm2 = Last line to reorg
0056               
0057 7008 05A0  34         inc   @edb.lines            ; One line added to editor buffer
     700A A504     
0058 700C 04E0  34         clr   @fb.row.length        ; Current row length = 0
     700E A308     
0059                       ;-------------------------------------------------------
0060                       ; Check/Adjust marker M1
0061                       ;-------------------------------------------------------
0062               fb.insert.line.m1:
0063 7010 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     7012 A50E     
     7014 2022     
0064 7016 1308  14         jeq   fb.insert.line.m2
0065                                                   ; Yes, skip to M2 check
0066               
0067 7018 8820  50         c     @parm1,@edb.block.m1
     701A A006     
     701C A50E     
0068 701E 1504  14         jgt   fb.insert.line.m2
0069 7020 05A0  34         inc   @edb.block.m1         ; M1++
     7022 A50E     
0070 7024 0720  34         seto  @fb.colorize          ; Set colorize flag
     7026 A312     
0071                       ;-------------------------------------------------------
0072                       ; Check/Adjust marker M2
0073                       ;-------------------------------------------------------
0074               fb.insert.line.m2:
0075 7028 8820  50         c     @edb.block.m2,@w$ffff ; Marker M1 unset?
     702A A510     
     702C 2022     
0076 702E 1308  14         jeq   fb.insert.line.refresh
0077                                                   ; Yes, skip to refresh frame buffer
0078               
0079 7030 8820  50         c     @parm1,@edb.block.m2
     7032 A006     
     7034 A510     
0080 7036 1504  14         jgt   fb.insert.line.refresh
0081 7038 05A0  34         inc   @edb.block.m2         ; M2++
     703A A510     
0082 703C 0720  34         seto  @fb.colorize          ; Set colorize flag
     703E A312     
0083                       ;-------------------------------------------------------
0084                       ; Refresh frame buffer and physical screen
0085                       ;-------------------------------------------------------
0086               fb.insert.line.refresh:
0087 7040 C820  54         mov   @fb.topline,@parm1
     7042 A304     
     7044 A006     
0088               
0089 7046 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     7048 7B20     
0090                                                   ; | i  @parm1 = Line to start with
0091                                                   ; /             (becomes @fb.topline)
0092               
0093 704A 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     704C A318     
0094 704E 06A0  32         bl    @fb.cursor.home       ; Move cursor home
     7050 6F96     
0095                       ;-------------------------------------------------------
0096                       ; Exit
0097                       ;-------------------------------------------------------
0098               fb.insert.line.exit:
0099 7052 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0100 7054 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0101 7056 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 7058 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0123                       ;-----------------------------------------------------------------------
0124                       ; Logic for Editor Buffer
0125                       ;-----------------------------------------------------------------------
0126                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
>>>>>>> b9b40bb (WIP optimize build scripts)
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
<<<<<<< HEAD
0027 6FF4 0649  14         dect  stack
0028 6FF6 C64B  30         mov   r11,*stack            ; Save return address
0029 6FF8 0649  14         dect  stack
0030 6FFA C644  30         mov   tmp0,*stack           ; Push tmp0
0031 6FFC 0649  14         dect  stack
0032 6FFE C645  30         mov   tmp1,*stack           ; Push tmp1
0033 7000 0649  14         dect  stack
0034 7002 C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7004 0649  14         dect  stack
0036 7006 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7008 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     700A A30C     
     700C A100     
0041 700E 04E0  34         clr   @fb.column
     7010 A30C     
0042               
0043 7012 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     7014 30EC     
0044                                                   ; \ i   @fb.top      = Address top row in FB
0045                                                   ; | i   @fb.topline  = Top line in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; |                  (offset 0..@fb.scrrows)
0048                                                   ; | i   @fb.column   = Current column in FB
0049                                                   ; | i   @fb.colsline = Columns per line FB
0050                                                   ; |
0051                                                   ; / o   @fb.current  = Updated pointer
0052                       ;------------------------------------------------------
0053                       ; Prepare scan
0054                       ;------------------------------------------------------
0055 7016 04C4  14         clr   tmp0                  ; Counter
0056 7018 C160  34         mov   @fb.current,tmp1      ; Get position
     701A A302     
0057 701C C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     701E A102     
0058 7020 04C7  14         clr   tmp3                  ; Counter for whitespace
=======
0027 705A 0649  14         dect  stack
0028 705C C64B  30         mov   r11,*stack            ; Save return address
0029 705E 0649  14         dect  stack
0030 7060 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 7062 0649  14         dect  stack
0032 7064 C645  30         mov   tmp1,*stack           ; Push tmp1
0033 7066 0649  14         dect  stack
0034 7068 C646  30         mov   tmp2,*stack           ; Push tmp2
0035 706A 0649  14         dect  stack
0036 706C C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 706E C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     7070 A30C     
     7072 A100     
0041 7074 04E0  34         clr   @fb.column
     7076 A30C     
0042 7078 06A0  32         bl    @fb.calc_pointer      ; Beginning of row
     707A 30DA     
0043                       ;------------------------------------------------------
0044                       ; Prepare scan
0045                       ;------------------------------------------------------
0046 707C 04C4  14         clr   tmp0                  ; Counter
0047 707E C160  34         mov   @fb.current,tmp1      ; Get position
     7080 A302     
0048 7082 C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     7084 A102     
0049 7086 04C7  14         clr   tmp3                  ; Counter for whitespace
0050                       ;------------------------------------------------------
0051                       ; 1. Scan line for >00 byte termination
0052                       ;------------------------------------------------------
0053               edb.line.pack.fb.scan:
0054 7088 D1B5  28         movb  *tmp1+,tmp2           ; Get char
0055 708A 0986  32         srl   tmp2,8                ; Right justify
0056 708C 130D  14         jeq   edb.line.pack.fb.check_setpage
0057                                                   ; Stop scan if >00 found
0058 708E 0584  14         inc   tmp0                  ; Increase string length
>>>>>>> b9b40bb (WIP optimize build scripts)
0059                       ;------------------------------------------------------
0060                       ; 1. Scan line for >00 byte termination
0061                       ;------------------------------------------------------
<<<<<<< HEAD
0062               edb.line.pack.fb.scan:
0063 7022 D1B5  28         movb  *tmp1+,tmp2           ; Get char
0064 7024 0986  32         srl   tmp2,8                ; Right justify
0065 7026 130D  14         jeq   edb.line.pack.fb.check_setpage
0066                                                   ; Stop scan if >00 found
0067 7028 0584  14         inc   tmp0                  ; Increase string length
0068                       ;------------------------------------------------------
0069                       ; Check for trailing whitespace
0070                       ;------------------------------------------------------
0071 702A 0286  22         ci    tmp2,32               ; Was it a space character?
     702C 0020     
0072 702E 1301  14         jeq   edb.line.pack.fb.check80
0073 7030 C1C4  18         mov   tmp0,tmp3
0074                       ;------------------------------------------------------
0075                       ; Not more than 80 characters
0076                       ;------------------------------------------------------
0077               edb.line.pack.fb.check80:
0078 7032 0284  22         ci    tmp0,colrow
     7034 0050     
0079 7036 1305  14         jeq   edb.line.pack.fb.check_setpage
0080                                                   ; Stop scan if 80 characters processed
0081 7038 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0082                       ;------------------------------------------------------
0083                       ; Check failed, crash CPU!
0084                       ;------------------------------------------------------
0085               edb.line.pack.fb.crash:
0086 703A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     703C FFCE     
0087 703E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7040 2026     
=======
0062 7090 0286  22         ci    tmp2,32               ; Was it a space character?
     7092 0020     
0063 7094 1301  14         jeq   edb.line.pack.fb.check80
0064 7096 C1C4  18         mov   tmp0,tmp3
0065                       ;------------------------------------------------------
0066                       ; Not more than 80 characters
0067                       ;------------------------------------------------------
0068               edb.line.pack.fb.check80:
0069 7098 0284  22         ci    tmp0,colrow
     709A 0050     
0070 709C 1305  14         jeq   edb.line.pack.fb.check_setpage
0071                                                   ; Stop scan if 80 characters processed
0072 709E 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0073                       ;------------------------------------------------------
0074                       ; Check failed, crash CPU!
0075                       ;------------------------------------------------------
0076               edb.line.pack.fb.crash:
0077 70A0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     70A2 FFCE     
0078 70A4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     70A6 2026     
0079                       ;------------------------------------------------------
0080                       ; Check if highest SAMS page needs to be increased
0081                       ;------------------------------------------------------
0082               edb.line.pack.fb.check_setpage:
0083 70A8 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0084 70AA 1103  14         jlt   edb.line.pack.fb.rtrim
0085 70AC C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     70AE A104     
0086 70B0 100C  14         jmp   !
0087               edb.line.pack.fb.rtrim:
>>>>>>> b9b40bb (WIP optimize build scripts)
0088                       ;------------------------------------------------------
0089                       ; Check if highest SAMS page needs to be increased
0090                       ;------------------------------------------------------
<<<<<<< HEAD
0091               edb.line.pack.fb.check_setpage:
0092 7042 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0093 7044 1103  14         jlt   edb.line.pack.fb.rtrim
0094 7046 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     7048 A104     
0095 704A 100C  14         jmp   !
0096               edb.line.pack.fb.rtrim:
0097                       ;------------------------------------------------------
0098                       ; Remove trailing blanks from line
0099                       ;------------------------------------------------------
0100 704C C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     704E A104     
0101               
0102 7050 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0103               
0104 7052 C184  18         mov   tmp0,tmp2             ; \
0105 7054 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0106 7056 0586  14         inc   tmp2                  ; /
0107               
0108 7058 C107  18         mov   tmp3,tmp0             ; \
0109 705A A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     705C A102     
0110               
0111               edb.line.pack.fb.rtrim.loop:
0112 705E DD05  32         movb  tmp1,*tmp0+
0113 7060 0606  14         dec   tmp2
0114 7062 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0115                       ;------------------------------------------------------
0116                       ; Check and increase highest SAMS page
0117                       ;------------------------------------------------------
0118 7064 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     7066 36FE     
0119                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0120                                                   ; /                         free line
0121                       ;------------------------------------------------------
0122                       ; 2. Prepare for storing line
0123                       ;------------------------------------------------------
0124               edb.line.pack.fb.prepare:
0125 7068 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     706A A304     
     706C A006     
0126 706E A820  54         a     @fb.row,@parm1        ; /
     7070 A306     
     7072 A006     
0127                       ;------------------------------------------------------
0128                       ; 2a. Update index
0129                       ;------------------------------------------------------
0130               edb.line.pack.fb.update_index:
0131 7074 C820  54         mov   @edb.next_free.ptr,@parm2
     7076 A508     
     7078 A008     
0132                                                   ; Pointer to new line
0133 707A C820  54         mov   @edb.sams.hipage,@parm3
     707C A51A     
     707E A00A     
0134                                                   ; SAMS page to use
0135               
0136 7080 06A0  32         bl    @idx.entry.update     ; Update index
     7082 34A4     
0137                                                   ; \ i  parm1 = Line number in editor buffer
0138                                                   ; | i  parm2 = pointer to line in
0139                                                   ; |            editor buffer
0140                                                   ; / i  parm3 = SAMS page
0141                       ;------------------------------------------------------
0142                       ; 3. Set line prefix in editor buffer
0143                       ;------------------------------------------------------
0144 7084 C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     7086 A102     
0145 7088 C160  34         mov   @edb.next_free.ptr,tmp1
     708A A508     
0146                                                   ; Address of line in editor buffer
0147               
0148 708C 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     708E A508     
0149               
0150 7090 C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     7092 A104     
0151 7094 CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0152 7096 1317  14         jeq   edb.line.pack.fb.prepexit
0153                                                   ; Nothing to copy if empty line
0154                       ;------------------------------------------------------
0155                       ; 4. Copy line from framebuffer to editor buffer
0156                       ;------------------------------------------------------
0157               edb.line.pack.fb.copyline:
0158 7098 0286  22         ci    tmp2,2
     709A 0002     
0159 709C 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0160 709E DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0161 70A0 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0162 70A2 1007  14         jmp   edb.line.pack.fb.copyline.align16
0163               
0164               edb.line.pack.fb.copyline.checkbyte:
0165 70A4 0286  22         ci    tmp2,1
     70A6 0001     
0166 70A8 1602  14         jne   edb.line.pack.fb.copyline.block
0167 70AA D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0168 70AC 1002  14         jmp   edb.line.pack.fb.copyline.align16
0169               
0170               edb.line.pack.fb.copyline.block:
0171 70AE 06A0  32         bl    @xpym2m               ; Copy memory block
     70B0 24E0     
0172                                                   ; \ i  tmp0 = source
0173                                                   ; | i  tmp1 = destination
0174                                                   ; / i  tmp2 = bytes to copy
0175                       ;------------------------------------------------------
0176                       ; 5: Align pointer to multiple of 16 memory address
0177                       ;------------------------------------------------------
0178               edb.line.pack.fb.copyline.align16:
0179 70B2 A820  54         a     @rambuf+4,@edb.next_free.ptr
     70B4 A104     
     70B6 A508     
0180                                                      ; Add length of line
0181               
0182 70B8 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     70BA A508     
0183 70BC 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0184 70BE 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     70C0 000F     
0185 70C2 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     70C4 A508     
0186                       ;------------------------------------------------------
0187                       ; 6: Restore SAMS page and prepare for exit
0188                       ;------------------------------------------------------
0189               edb.line.pack.fb.prepexit:
0190 70C6 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     70C8 A100     
     70CA A30C     
0191               
0192 70CC 8820  50         c     @edb.sams.hipage,@edb.sams.page
     70CE A51A     
     70D0 A518     
0193 70D2 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0194               
0195 70D4 C120  34         mov   @edb.sams.page,tmp0
     70D6 A518     
0196 70D8 C160  34         mov   @edb.top.ptr,tmp1
     70DA A500     
0197 70DC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     70DE 2576     
0198                                                   ; \ i  tmp0 = SAMS page number
0199                                                   ; / i  tmp1 = Memory address
0200                       ;------------------------------------------------------
0201                       ; Exit
0202                       ;------------------------------------------------------
0203               edb.line.pack.fb.exit:
0204 70E0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0205 70E2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0206 70E4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0207 70E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0208 70E8 C2F9  30         mov   *stack+,r11           ; Pop R11
0209 70EA 045B  20         b     *r11                  ; Return to caller
=======
0091 70B2 C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     70B4 A104     
0092               
0093 70B6 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0094               
0095 70B8 C184  18         mov   tmp0,tmp2             ; \
0096 70BA 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0097 70BC 0586  14         inc   tmp2                  ; /
0098               
0099 70BE C107  18         mov   tmp3,tmp0             ; \
0100 70C0 A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     70C2 A102     
0101               
0102               edb.line.pack.fb.rtrim.loop:
0103 70C4 DD05  32         movb  tmp1,*tmp0+
0104 70C6 0606  14         dec   tmp2
0105 70C8 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0106                       ;------------------------------------------------------
0107                       ; Check and increase highest SAMS page
0108                       ;------------------------------------------------------
0109 70CA 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     70CC 36EC     
0110                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0111                                                   ; /                         free line
0112                       ;------------------------------------------------------
0113                       ; 2. Prepare for storing line
0114                       ;------------------------------------------------------
0115               edb.line.pack.fb.prepare:
0116 70CE C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     70D0 A304     
     70D2 A006     
0117 70D4 A820  54         a     @fb.row,@parm1        ; /
     70D6 A306     
     70D8 A006     
0118                       ;------------------------------------------------------
0119                       ; 2a. Update index
0120                       ;------------------------------------------------------
0121               edb.line.pack.fb.update_index:
0122 70DA C820  54         mov   @edb.next_free.ptr,@parm2
     70DC A508     
     70DE A008     
0123                                                   ; Pointer to new line
0124 70E0 C820  54         mov   @edb.sams.hipage,@parm3
     70E2 A51A     
     70E4 A00A     
0125                                                   ; SAMS page to use
0126               
0127 70E6 06A0  32         bl    @idx.entry.update     ; Update index
     70E8 3492     
0128                                                   ; \ i  parm1 = Line number in editor buffer
0129                                                   ; | i  parm2 = pointer to line in
0130                                                   ; |            editor buffer
0131                                                   ; / i  parm3 = SAMS page
0132                       ;------------------------------------------------------
0133                       ; 3. Set line prefix in editor buffer
0134                       ;------------------------------------------------------
0135 70EA C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     70EC A102     
0136 70EE C160  34         mov   @edb.next_free.ptr,tmp1
     70F0 A508     
0137                                                   ; Address of line in editor buffer
0138               
0139 70F2 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     70F4 A508     
0140               
0141 70F6 C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     70F8 A104     
0142 70FA CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0143 70FC 1317  14         jeq   edb.line.pack.fb.prepexit
0144                                                   ; Nothing to copy if empty line
0145                       ;------------------------------------------------------
0146                       ; 4. Copy line from framebuffer to editor buffer
0147                       ;------------------------------------------------------
0148               edb.line.pack.fb.copyline:
0149 70FE 0286  22         ci    tmp2,2
     7100 0002     
0150 7102 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0151 7104 DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0152 7106 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0153 7108 1007  14         jmp   edb.line.pack.fb.copyline.align16
0154               
0155               edb.line.pack.fb.copyline.checkbyte:
0156 710A 0286  22         ci    tmp2,1
     710C 0001     
0157 710E 1602  14         jne   edb.line.pack.fb.copyline.block
0158 7110 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0159 7112 1002  14         jmp   edb.line.pack.fb.copyline.align16
0160               
0161               edb.line.pack.fb.copyline.block:
0162 7114 06A0  32         bl    @xpym2m               ; Copy memory block
     7116 24E0     
0163                                                   ; \ i  tmp0 = source
0164                                                   ; | i  tmp1 = destination
0165                                                   ; / i  tmp2 = bytes to copy
0166                       ;------------------------------------------------------
0167                       ; 5: Align pointer to multiple of 16 memory address
0168                       ;------------------------------------------------------
0169               edb.line.pack.fb.copyline.align16:
0170 7118 A820  54         a     @rambuf+4,@edb.next_free.ptr
     711A A104     
     711C A508     
0171                                                      ; Add length of line
0172               
0173 711E C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     7120 A508     
0174 7122 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0175 7124 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     7126 000F     
0176 7128 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     712A A508     
0177                       ;------------------------------------------------------
0178                       ; 6: Restore SAMS page and prepare for exit
0179                       ;------------------------------------------------------
0180               edb.line.pack.fb.prepexit:
0181 712C C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     712E A100     
     7130 A30C     
0182               
0183 7132 8820  50         c     @edb.sams.hipage,@edb.sams.page
     7134 A51A     
     7136 A518     
0184 7138 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0185               
0186 713A C120  34         mov   @edb.sams.page,tmp0
     713C A518     
0187 713E C160  34         mov   @edb.top.ptr,tmp1
     7140 A500     
0188 7142 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     7144 2576     
0189                                                   ; \ i  tmp0 = SAMS page number
0190                                                   ; / i  tmp1 = Memory address
0191                       ;------------------------------------------------------
0192                       ; Exit
0193                       ;------------------------------------------------------
0194               edb.line.pack.fb.exit:
0195 7146 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0196 7148 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0197 714A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0198 714C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0199 714E C2F9  30         mov   *stack+,r11           ; Pop R11
0200 7150 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0128                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
<<<<<<< HEAD
0030 70EC 0649  14         dect  stack
0031 70EE C64B  30         mov   r11,*stack            ; Save return address
0032 70F0 0649  14         dect  stack
0033 70F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 70F4 0649  14         dect  stack
0035 70F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 70F8 0649  14         dect  stack
0037 70FA C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 70FC C820  54         mov   @parm1,@rambuf
     70FE A006     
     7100 A100     
0042 7102 C820  54         mov   @parm2,@rambuf+2
     7104 A008     
     7106 A102     
0043 7108 C820  54         mov   @parm3,@rambuf+4
     710A A00A     
     710C A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 710E C120  34         mov   @fb.colsline,tmp0
     7110 A30E     
0048 7112 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     7114 A008     
0049 7116 C1A0  34         mov   @fb.top.ptr,tmp2
     7118 A300     
0050 711A A146  18         a     tmp2,tmp1             ; Add base to offset
0051 711C C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     711E A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 7120 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     7122 A006     
     7124 A504     
0056 7126 1103  14         jlt   !                     ; No, continue processing
0057               
0058 7128 04E0  34         clr   @rambuf+10            ; Set line length = 0
     712A A10A     
0059 712C 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 712E C120  34 !       mov   @parm1,tmp0
     7130 A006     
0064 7132 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     7134 364C     
=======
0030 7152 0649  14         dect  stack
0031 7154 C64B  30         mov   r11,*stack            ; Save return address
0032 7156 0649  14         dect  stack
0033 7158 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 715A 0649  14         dect  stack
0035 715C C645  30         mov   tmp1,*stack           ; Push tmp1
0036 715E 0649  14         dect  stack
0037 7160 C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 7162 C820  54         mov   @parm1,@rambuf
     7164 A006     
     7166 A100     
0042 7168 C820  54         mov   @parm2,@rambuf+2
     716A A008     
     716C A102     
0043 716E C820  54         mov   @parm3,@rambuf+4
     7170 A00A     
     7172 A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 7174 C120  34         mov   @fb.colsline,tmp0
     7176 A30E     
0048 7178 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     717A A008     
0049 717C C1A0  34         mov   @fb.top.ptr,tmp2
     717E A300     
0050 7180 A146  18         a     tmp2,tmp1             ; Add base to offset
0051 7182 C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     7184 A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 7186 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     7188 A006     
     718A A504     
0056 718C 1103  14         jlt   !                     ; No, continue processing
0057               
0058 718E 04E0  34         clr   @rambuf+10            ; Set line length = 0
     7190 A10A     
0059 7192 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 7194 C120  34 !       mov   @parm1,tmp0
     7196 A006     
0064 7198 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     719A 363A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
<<<<<<< HEAD
0071 7136 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     7138 A018     
0072 713A 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 713C 04E0  34         clr   @rambuf+10            ; Set length=0
     713E A10A     
0076 7140 1004  14         jmp   edb.line.unpack.fb.clear
=======
0071 719C C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     719E A018     
0072 71A0 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 71A2 04E0  34         clr   @rambuf+10            ; Set length=0
     71A4 A10A     
0076 71A6 1004  14         jmp   edb.line.unpack.fb.clear
>>>>>>> b9b40bb (WIP optimize build scripts)
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
<<<<<<< HEAD
0081 7142 C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     7144 A10A     
0082 7146 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     7148 A106     
=======
0081 71A8 C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     71AA A10A     
0082 71AC C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     71AE A106     
>>>>>>> b9b40bb (WIP optimize build scripts)
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
<<<<<<< HEAD
0087 714A C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     714C A108     
0088 714E 04C5  14         clr   tmp1                  ; | Fill with >00
0089 7150 0206  20         li    tmp2,80               ; /
     7152 0050     
0090               
0091 7154 06A0  32         bl    @xfilm                ; Fill CPU memory
     7156 223C     
=======
0087 71B0 C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     71B2 A108     
0088 71B4 04C5  14         clr   tmp1                  ; | Fill with >00
0089 71B6 0206  20         li    tmp2,80               ; /
     71B8 0050     
0090               
0091 71BA 06A0  32         bl    @xfilm                ; Fill CPU memory
     71BC 223C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
<<<<<<< HEAD
0099 7158 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     715A A10A     
0100 715C C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     715E A018     
0101 7160 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 7162 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     7164 A104     
0105 7166 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 7168 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     716A A108     
0109 716C 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     716E A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 7170 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 7172 0286  22         ci    tmp2,80               ; Check line length
     7174 0050     
0117 7176 1202  14         jle   edb.line.unpack.fb.copy
0118 7178 0206  20         li    tmp2,80               ; Only process first 80 characters
     717A 0050     
=======
0099 71BE C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     71C0 A10A     
0100 71C2 C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     71C4 A018     
0101 71C6 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 71C8 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     71CA A104     
0105 71CC 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 71CE C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     71D0 A108     
0109 71D2 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     71D4 A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 71D6 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 71D8 0286  22         ci    tmp2,80               ; Check line length
     71DA 0050     
0117 71DC 1202  14         jle   edb.line.unpack.fb.copy
0118 71DE 0206  20         li    tmp2,80               ; Only process first 80 characters
     71E0 0050     
>>>>>>> b9b40bb (WIP optimize build scripts)
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
<<<<<<< HEAD
0123 717C C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     717E A106     
0124 7180 A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     7182 A104     
0125               
0126               
0127 7184 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     7186 24E0     
=======
0123 71E2 C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     71E4 A106     
0124 71E6 A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     71E8 A104     
0125               
0126               
0127 71EA 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     71EC 24E0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
<<<<<<< HEAD
0135 7188 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 718A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 718C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 718E C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7190 045B  20         b     *r11                  ; Return to caller
=======
0135 71EE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 71F0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 71F2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 71F4 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 71F6 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0129                       ;-----------------------------------------------------------------------
0130                       ; Background tasks
0131                       ;-----------------------------------------------------------------------
0132                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
<<<<<<< HEAD
0008 7192 0649  14         dect  stack
0009 7194 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7196 06A0  32         bl    @pane.vdpdump
     7198 77BA     
=======
0008 71F8 0649  14         dect  stack
0009 71FA C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 71FC 06A0  32         bl    @pane.vdpdump
     71FE 781C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
<<<<<<< HEAD
0018 719A C2F9  30         mov   *stack+,r11           ; Pop r11
0019 719C 0460  28         b     @slotok
     719E 2E84     
=======
0018 7200 C2F9  30         mov   *stack+,r11           ; Pop r11
0019 7202 0460  28         b     @slotok
     7204 2E84     
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0133                       ;-----------------------------------------------------------------------
0134                       ; Screen pane utilities
0135                       ;-----------------------------------------------------------------------
0136                       copy  "pane.utils.colorscheme.asm"  ; Colorscheme handling in panes
     **** ****     > pane.utils.colorscheme.asm
0001               
0002               
0003               
0004               * FILE......: pane.utils.colorscheme.asm
0005               * Purpose...: Stevie Editor - Color scheme for panes
0006               
0007               ***************************************************************
0008               * pane.action.colorscheme.cycle
0009               * Cycle through available color scheme
0010               ***************************************************************
0011               * bl  @pane.action.colorscheme.cycle
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.action.colorscheme.cycle:
<<<<<<< HEAD
0020 71A0 0649  14         dect  stack
0021 71A2 C64B  30         mov   r11,*stack            ; Push return address
0022 71A4 0649  14         dect  stack
0023 71A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0024               
0025 71A8 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     71AA A212     
0026 71AC 0284  22         ci    tmp0,tv.colorscheme.entries
     71AE 000A     
0027                                                   ; Last entry reached?
0028 71B0 1103  14         jlt   !
0029 71B2 0204  20         li    tmp0,1                ; Reset color scheme index
     71B4 0001     
0030 71B6 1001  14         jmp   pane.action.colorscheme.switch
0031 71B8 0584  14 !       inc   tmp0
=======
0020 7206 0649  14         dect  stack
0021 7208 C64B  30         mov   r11,*stack            ; Push return address
0022 720A 0649  14         dect  stack
0023 720C C644  30         mov   tmp0,*stack           ; Push tmp0
0024               
0025 720E C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     7210 A212     
0026 7212 0284  22         ci    tmp0,tv.colorscheme.entries
     7214 000A     
0027                                                   ; Last entry reached?
0028 7216 1103  14         jlt   !
0029 7218 0204  20         li    tmp0,1                ; Reset color scheme index
     721A 0001     
0030 721C 1001  14         jmp   pane.action.colorscheme.switch
0031 721E 0584  14 !       inc   tmp0
>>>>>>> b9b40bb (WIP optimize build scripts)
0032                       ;-------------------------------------------------------
0033                       ; Switch to new color scheme
0034                       ;-------------------------------------------------------
0035               pane.action.colorscheme.switch:
<<<<<<< HEAD
0036 71BA C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     71BC A212     
0037               
0038 71BE 06A0  32         bl    @pane.action.colorscheme.load
     71C0 71FE     
=======
0036 7220 C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     7222 A212     
0037               
0038 7224 06A0  32         bl    @pane.action.colorscheme.load
     7226 7264     
>>>>>>> b9b40bb (WIP optimize build scripts)
0039                                                   ; Load current color scheme
0040                       ;-------------------------------------------------------
0041                       ; Show current color palette message
0042                       ;-------------------------------------------------------
<<<<<<< HEAD
0043 71C2 C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     71C4 832A     
     71C6 833C     
0044               
0045 71C8 06A0  32         bl    @putnum
     71CA 2A24     
0046 71CC 003E                   byte 0,62
0047 71CE A212                   data tv.colorscheme,rambuf,>3020
     71D0 A100     
     71D2 3020     
0048               
0049 71D4 06A0  32         bl    @putat
     71D6 2442     
0050 71D8 0034                   byte 0,52
0051 71DA 3CA2                   data txt.colorscheme  ; Show color palette message
0052               
0053 71DC C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     71DE 833C     
     71E0 832A     
0054                       ;-------------------------------------------------------
0055                       ; Delay
0056                       ;-------------------------------------------------------
0057 71E2 0204  20         li    tmp0,6000
     71E4 1770     
0058 71E6 0604  14 !       dec   tmp0
0059 71E8 16FE  14         jne   -!
0060                       ;-------------------------------------------------------
0061                       ; Setup one shot task for removing message
0062                       ;-------------------------------------------------------
0063 71EA 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     71EC 3744     
0064 71EE C804  38         mov   tmp0,@tv.task.oneshot
     71F0 A226     
0065               
0066 71F2 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     71F4 2EF8     
0067 71F6 0003                   data 3                ; / for getting consistent delay
=======
0043 7228 C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     722A 832A     
     722C 833C     
0044               
0045 722E 06A0  32         bl    @putnum
     7230 2A24     
0046 7232 003E                   byte 0,62
0047 7234 A212                   data tv.colorscheme,rambuf,>3020
     7236 A100     
     7238 3020     
0048               
0049 723A 06A0  32         bl    @putat
     723C 2442     
0050 723E 0034                   byte 0,52
0051 7240 3CF6                   data txt.colorscheme  ; Show color palette message
0052               
0053 7242 C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     7244 833C     
     7246 832A     
0054                       ;-------------------------------------------------------
0055                       ; Delay
0056                       ;-------------------------------------------------------
0057 7248 0204  20         li    tmp0,6000
     724A 1770     
0058 724C 0604  14 !       dec   tmp0
0059 724E 16FE  14         jne   -!
0060                       ;-------------------------------------------------------
0061                       ; Setup one shot task for removing message
0062                       ;-------------------------------------------------------
0063 7250 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     7252 3732     
0064 7254 C804  38         mov   tmp0,@tv.task.oneshot
     7256 A224     
0065               
0066 7258 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     725A 2EF8     
0067 725C 0003                   data 3                ; / for getting consistent delay
>>>>>>> b9b40bb (WIP optimize build scripts)
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               pane.action.colorscheme.cycle.exit:
<<<<<<< HEAD
0072 71F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 71FA C2F9  30         mov   *stack+,r11           ; Pop R11
0074 71FC 045B  20         b     *r11                  ; Return to caller
=======
0072 725E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 7260 C2F9  30         mov   *stack+,r11           ; Pop R11
0074 7262 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0075               
0076               
0077               
0078               ***************************************************************
0079               * pane.action.colorscheme.load
0080               * Load color scheme
0081               ***************************************************************
0082               * bl  @pane.action.colorscheme.load
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * @tv.colorscheme = Index into color scheme table
0086               * @parm1          = Skip screen off if >FFFF
0087               * @parm2          = Skip colorizing marked lines if >FFFF
0088               * @parm3          = Only colorize CMDB pane if >FFFF
0089               *--------------------------------------------------------------
0090               * OUTPUT
0091               * none
0092               *--------------------------------------------------------------
0093               * Register usage
0094               * tmp0,tmp1,tmp2,tmp3,tmp4
0095               ********|*****|*********************|**************************
0096               pane.action.colorscheme.load:
<<<<<<< HEAD
0097 71FE 0649  14         dect  stack
0098 7200 C64B  30         mov   r11,*stack            ; Save return address
0099 7202 0649  14         dect  stack
0100 7204 C644  30         mov   tmp0,*stack           ; Push tmp0
0101 7206 0649  14         dect  stack
0102 7208 C645  30         mov   tmp1,*stack           ; Push tmp1
0103 720A 0649  14         dect  stack
0104 720C C646  30         mov   tmp2,*stack           ; Push tmp2
0105 720E 0649  14         dect  stack
0106 7210 C647  30         mov   tmp3,*stack           ; Push tmp3
0107 7212 0649  14         dect  stack
0108 7214 C648  30         mov   tmp4,*stack           ; Push tmp4
0109 7216 0649  14         dect  stack
0110 7218 C660  46         mov   @parm1,*stack         ; Push parm1
     721A A006     
0111 721C 0649  14         dect  stack
0112 721E C660  46         mov   @parm2,*stack         ; Push parm2
     7220 A008     
0113 7222 0649  14         dect  stack
0114 7224 C660  46         mov   @parm3,*stack         ; Push parm3
     7226 A00A     
0115                       ;-------------------------------------------------------
0116                       ; Turn screen off
0117                       ;-------------------------------------------------------
0118 7228 C120  34         mov   @parm1,tmp0
     722A A006     
0119 722C 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     722E FFFF     
0120 7230 1302  14         jeq   !                     ; Yes, so skip screen off
0121 7232 06A0  32         bl    @scroff               ; Turn screen off
     7234 2686     
0122                       ;-------------------------------------------------------
0123                       ; Get FG/BG colors framebuffer text
0124                       ;-------------------------------------------------------
0125 7236 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     7238 A212     
0126 723A 0604  14         dec   tmp0                  ; Internally work with base 0
0127               
0128 723C 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0129 723E 0224  22         ai    tmp0,tv.colorscheme.table
     7240 3832     
0130                                                   ; Add base for color scheme data table
0131 7242 C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0132 7244 C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     7246 A218     
0133                       ;-------------------------------------------------------
0134                       ; Get and save cursor color
0135                       ;-------------------------------------------------------
0136 7248 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0137 724A 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     724C 00FF     
0138 724E C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     7250 A216     
0139                       ;-------------------------------------------------------
0140                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0141                       ;-------------------------------------------------------
0142 7252 C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0143 7254 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     7256 FF00     
0144 7258 0988  32         srl   tmp4,8                ; MSB to LSB
0145               
0146 725A C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0147 725C C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0148 725E 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0149 7260 C806  38         mov   tmp2,@tv.busycolor    ; /
     7262 A21C     
0150               
0151 7264 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     7266 00FF     
0152 7268 C805  38         mov   tmp1,@tv.markcolor    ; /
     726A A21A     
0153               
0154 726C C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0155 726E 0985  32         srl   tmp1,8                ; \ Right align MN and
0156 7270 C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     7272 A220     
0157                       ;-------------------------------------------------------
0158                       ; Check if only CMDB needs to be colorized
0159                       ;-------------------------------------------------------
0160 7274 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     7276 A00A     
     7278 2022     
0161 727A 1340  14         jeq   pane.action.colorscheme.cmdbpane
=======
0097 7264 0649  14         dect  stack
0098 7266 C64B  30         mov   r11,*stack            ; Save return address
0099 7268 0649  14         dect  stack
0100 726A C644  30         mov   tmp0,*stack           ; Push tmp0
0101 726C 0649  14         dect  stack
0102 726E C645  30         mov   tmp1,*stack           ; Push tmp1
0103 7270 0649  14         dect  stack
0104 7272 C646  30         mov   tmp2,*stack           ; Push tmp2
0105 7274 0649  14         dect  stack
0106 7276 C647  30         mov   tmp3,*stack           ; Push tmp3
0107 7278 0649  14         dect  stack
0108 727A C648  30         mov   tmp4,*stack           ; Push tmp4
0109 727C 0649  14         dect  stack
0110 727E C660  46         mov   @parm1,*stack         ; Push parm1
     7280 A006     
0111 7282 0649  14         dect  stack
0112 7284 C660  46         mov   @parm2,*stack         ; Push parm2
     7286 A008     
0113 7288 0649  14         dect  stack
0114 728A C660  46         mov   @parm3,*stack         ; Push parm3
     728C A00A     
0115                       ;-------------------------------------------------------
0116                       ; Turn screen off
0117                       ;-------------------------------------------------------
0118 728E C120  34         mov   @parm1,tmp0
     7290 A006     
0119 7292 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     7294 FFFF     
0120 7296 1302  14         jeq   !                     ; Yes, so skip screen off
0121 7298 06A0  32         bl    @scroff               ; Turn screen off
     729A 2686     
0122                       ;-------------------------------------------------------
0123                       ; Get FG/BG colors framebuffer text
0124                       ;-------------------------------------------------------
0125 729C C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     729E A212     
0126 72A0 0604  14         dec   tmp0                  ; Internally work with base 0
0127               
0128 72A2 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0129 72A4 0224  22         ai    tmp0,tv.colorscheme.table
     72A6 3886     
0130                                                   ; Add base for color scheme data table
0131 72A8 C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0132 72AA C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     72AC A218     
0133                       ;-------------------------------------------------------
0134                       ; Get and save cursor color
0135                       ;-------------------------------------------------------
0136 72AE C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0137 72B0 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     72B2 00FF     
0138 72B4 C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     72B6 A216     
0139                       ;-------------------------------------------------------
0140                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0141                       ;-------------------------------------------------------
0142 72B8 C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0143 72BA 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     72BC FF00     
0144 72BE 0988  32         srl   tmp4,8                ; MSB to LSB
0145               
0146 72C0 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0147 72C2 C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0148 72C4 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0149 72C6 C806  38         mov   tmp2,@tv.busycolor    ; /
     72C8 A21C     
0150               
0151 72CA 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     72CC 00FF     
0152 72CE C805  38         mov   tmp1,@tv.markcolor    ; /
     72D0 A21A     
0153               
0154 72D2 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0155 72D4 0985  32         srl   tmp1,8                ; \ Right align MN and
0156 72D6 C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     72D8 A220     
0157                       ;-------------------------------------------------------
0158                       ; Check if only CMDB needs to be colorized
0159                       ;-------------------------------------------------------
0160 72DA 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     72DC A00A     
     72DE 2022     
0161 72E0 1340  14         jeq   pane.action.colorscheme.cmdbpane
>>>>>>> b9b40bb (WIP optimize build scripts)
0162                                                   ; Yes, shortcut jump to CMDB pane
0163                       ;-------------------------------------------------------
0164                       ; Get FG color for ruler
0165                       ;-------------------------------------------------------
<<<<<<< HEAD
0166 727C C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0167 727E 0245  22         andi  tmp1,>000f            ; Only keep P
     7280 000F     
0168 7282 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0169 7284 C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     7286 A21E     
0170                       ;-------------------------------------------------------
0171                       ; Write sprite color of line and column indicators to SAT
0172                       ;-------------------------------------------------------
0173 7288 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0174 728A 0245  22         andi  tmp1,>00f0            ; Only keep O
     728C 00F0     
0175 728E 0A45  24         sla   tmp1,4                ; Move O to MSB
0176 7290 D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     7292 A05D     
0177 7294 D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     7296 A061     
0178                       ;-------------------------------------------------------
0179                       ; Dump colors to VDP register 7 (text mode)
0180                       ;-------------------------------------------------------
0181 7298 C147  18         mov   tmp3,tmp1             ; Get work copy
0182 729A 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0183 729C 0265  22         ori   tmp1,>0700
     729E 0700     
0184 72A0 C105  18         mov   tmp1,tmp0
0185 72A2 06A0  32         bl    @putvrx               ; Write VDP register
     72A4 2334     
0186                       ;-------------------------------------------------------
0187                       ; Dump colors for frame buffer pane (TAT)
0188                       ;-------------------------------------------------------
0189 72A6 C120  34         mov   @tv.ruler.visible,tmp0
     72A8 A210     
0190 72AA 130C  14         jeq   pane.action.colorscheme.fbdump.noruler
0191               
0192 72AC C120  34         mov   @cmdb.dialog,tmp0
     72AE A71C     
0193 72B0 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     72B2 0068     
0194 72B4 1307  14         jeq   pane.action.colorscheme.fbdump.noruler
=======
0166 72E2 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0167 72E4 0245  22         andi  tmp1,>000f            ; Only keep P
     72E6 000F     
0168 72E8 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0169 72EA C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     72EC A21E     
0170                       ;-------------------------------------------------------
0171                       ; Write sprite color of line and column indicators to SAT
0172                       ;-------------------------------------------------------
0173 72EE C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0174 72F0 0245  22         andi  tmp1,>00f0            ; Only keep O
     72F2 00F0     
0175 72F4 0A45  24         sla   tmp1,4                ; Move O to MSB
0176 72F6 D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     72F8 A05D     
0177 72FA D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     72FC A061     
0178                       ;-------------------------------------------------------
0179                       ; Dump colors to VDP register 7 (text mode)
0180                       ;-------------------------------------------------------
0181 72FE C147  18         mov   tmp3,tmp1             ; Get work copy
0182 7300 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0183 7302 0265  22         ori   tmp1,>0700
     7304 0700     
0184 7306 C105  18         mov   tmp1,tmp0
0185 7308 06A0  32         bl    @putvrx               ; Write VDP register
     730A 2334     
0186                       ;-------------------------------------------------------
0187                       ; Dump colors for frame buffer pane (TAT)
0188                       ;-------------------------------------------------------
0189 730C C120  34         mov   @tv.ruler.visible,tmp0
     730E A210     
0190 7310 130C  14         jeq   pane.action.colorscheme.fbdump.noruler
0191               
0192 7312 C120  34         mov   @cmdb.dialog,tmp0
     7314 A71C     
0193 7316 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     7318 0068     
0194 731A 1307  14         jeq   pane.action.colorscheme.fbdump.noruler
>>>>>>> b9b40bb (WIP optimize build scripts)
0195                                                   ; Yes, skip ruler
0196                       ;-------------------------------------------------------
0197                       ; Ruler visible on screen (TAT)
0198                       ;-------------------------------------------------------
<<<<<<< HEAD
0199 72B6 C120  34         mov   @cmdb.vdptop,tmp0     ;
     72B8 A70E     
0200 72BA 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     72BC 0050     
0201 72BE 0206  20         li    tmp2,(pane.botrow-2)*80
     72C0 0690     
0202                                                   ; Number of bytes to fill
0203 72C2 1004  14         jmp   pane.action.colorscheme.checkcmdb
=======
0199 731C C120  34         mov   @cmdb.vdptop,tmp0     ;
     731E A70E     
0200 7320 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     7322 0050     
0201 7324 0206  20         li    tmp2,(pane.botrow-2)*80
     7326 0870     
0202                                                   ; Number of bytes to fill
0203 7328 1004  14         jmp   pane.action.colorscheme.checkcmdb
>>>>>>> b9b40bb (WIP optimize build scripts)
0204               
0205               pane.action.colorscheme.fbdump.noruler:
0206                       ;-------------------------------------------------------
0207                       ; No ruler visible on screen (TAT)
0208                       ;-------------------------------------------------------
<<<<<<< HEAD
0209 72C4 0204  20         li    tmp0,vdp.fb.toprow.tat
     72C6 1850     
0210                                                   ; VDP start address (frame buffer area)
0211 72C8 0206  20         li    tmp2,(pane.botrow-1)*80
     72CA 06E0     
=======
0209 732A 0204  20         li    tmp0,vdp.fb.toprow.tat
     732C 1850     
0210                                                   ; VDP start address (frame buffer area)
0211 732E 0206  20         li    tmp2,(pane.botrow-1)*80
     7330 08C0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0212                                                   ; Number of bytes to fill
0213                       ;-------------------------------------------------------
0214                       ; Adjust bottom of frame buffer if CMDB visible
0215                       ;-------------------------------------------------------
0216               pane.action.colorscheme.checkcmdb:
<<<<<<< HEAD
0217 72CC C820  54         mov   @cmdb.visible,@cmdb.visible
     72CE A702     
     72D0 A702     
0218 72D2 1302  14         jeq   pane.action.colorscheme.fbdump
0219                                                   ; Not visible, skip adjustment
0220 72D4 0226  22         ai    tmp2,-320             ; CMDB adjustment
     72D6 FEC0     
=======
0217 7332 C820  54         mov   @cmdb.visible,@cmdb.visible
     7334 A702     
     7336 A702     
0218 7338 1302  14         jeq   pane.action.colorscheme.fbdump
0219                                                   ; Not visible, skip adjustment
0220 733A 0226  22         ai    tmp2,-320             ; CMDB adjustment
     733C FEC0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0221                       ;-------------------------------------------------------
0222                       ; Dump colors to VDP (TAT)
0223                       ;-------------------------------------------------------
0224               pane.action.colorscheme.fbdump:
<<<<<<< HEAD
0225 72D8 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0226 72DA 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0227               
0228 72DC 06A0  32         bl    @xfilv                ; Fill colors
     72DE 2294     
=======
0225 733E C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0226 7340 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0227               
0228 7342 06A0  32         bl    @xfilv                ; Fill colors
     7344 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0229                                                   ; i \  tmp0 = start address
0230                                                   ; i |  tmp1 = byte to fill
0231                                                   ; i /  tmp2 = number of bytes to fill
0232                       ;-------------------------------------------------------
0233                       ; Colorize marked lines
0234                       ;-------------------------------------------------------
<<<<<<< HEAD
0235 72E0 C120  34         mov   @cmdb.dialog,tmp0
     72E2 A71C     
0236 72E4 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     72E6 0068     
0237 72E8 1309  14         jeq   pane.action.colorscheme.cmdbpane
0238                                                   ; Yes, skip marked lines
0239               
0240 72EA C120  34         mov   @parm2,tmp0
     72EC A008     
0241 72EE 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     72F0 FFFF     
0242 72F2 1304  14         jeq   pane.action.colorscheme.cmdbpane
0243               
0244 72F4 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     72F6 A312     
0245 72F8 06A0  32         bl    @fb.colorlines
     72FA 7A78     
=======
0235 7346 C120  34         mov   @cmdb.dialog,tmp0
     7348 A71C     
0236 734A 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     734C 0068     
0237 734E 1309  14         jeq   pane.action.colorscheme.cmdbpane
0238                                                   ; Yes, skip marked lines
0239               
0240 7350 C120  34         mov   @parm2,tmp0
     7352 A008     
0241 7354 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     7356 FFFF     
0242 7358 1304  14         jeq   pane.action.colorscheme.cmdbpane
0243               
0244 735A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     735C A312     
0245 735E 06A0  32         bl    @fb.colorlines
     7360 7AD8     
>>>>>>> b9b40bb (WIP optimize build scripts)
0246                       ;-------------------------------------------------------
0247                       ; Dump colors for CMDB header line (TAT)
0248                       ;-------------------------------------------------------
0249               pane.action.colorscheme.cmdbpane:
<<<<<<< HEAD
0250 72FC C120  34         mov   @cmdb.visible,tmp0
     72FE A702     
0251 7300 1338  14         jeq   pane.action.colorscheme.errpane
0252                                                   ; Skip if CMDB pane is hidden
0253               
0254 7302 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7304 A70E     
0255 7306 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     7308 A220     
0256 730A 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     730C 0040     
0257 730E 06A0  32         bl    @xfilv                ; Fill colors
     7310 2294     
=======
0250 7362 C120  34         mov   @cmdb.visible,tmp0
     7364 A702     
0251 7366 1338  14         jeq   pane.action.colorscheme.errpane
0252                                                   ; Skip if CMDB pane is hidden
0253               
0254 7368 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     736A A70E     
0255 736C C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     736E A220     
0256 7370 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     7372 0040     
0257 7374 06A0  32         bl    @xfilv                ; Fill colors
     7376 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0258                                                   ; i \  tmp0 = start address
0259                                                   ; i |  tmp1 = byte to fill
0260                                                   ; i /  tmp2 = number of bytes to fill
0261                       ;-------------------------------------------------------
0262                       ; Dump colors for CMDB Stevie logo (TAT)
0263                       ;-------------------------------------------------------
<<<<<<< HEAD
0264 7312 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7314 A70E     
0265 7316 0224  22         ai    tmp0,64               ; Add offset for logo
     7318 0040     
0266 731A C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     731C A220     
0267 731E D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     7320 A221     
0268                                                   ; Copy same value into MSB
0269 7322 0945  24         srl   tmp1,4                ;
0270 7324 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     7326 00FF     
0271               
0272 7328 0206  20         li    tmp2,16               ; Number of bytes to fill
     732A 0010     
0273 732C 06A0  32         bl    @xfilv                ; Fill colors
     732E 2294     
=======
0264 7378 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     737A A70E     
0265 737C 0224  22         ai    tmp0,64               ; Add offset for logo
     737E 0040     
0266 7380 C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     7382 A220     
0267 7384 D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     7386 A221     
0268                                                   ; Copy same value into MSB
0269 7388 0945  24         srl   tmp1,4                ;
0270 738A 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     738C 00FF     
0271               
0272 738E 0206  20         li    tmp2,16               ; Number of bytes to fill
     7390 0010     
0273 7392 06A0  32         bl    @xfilv                ; Fill colors
     7394 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0274                                                   ; i \  tmp0 = start address
0275                                                   ; i |  tmp1 = byte to fill
0276                                                   ; i /  tmp2 = number of bytes to fill
0277                       ;-------------------------------------------------------
0278                       ; Dump colors for CMDB pane content (TAT)
0279                       ;-------------------------------------------------------
<<<<<<< HEAD
0280 7330 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7332 A70E     
0281 7334 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     7336 0050     
0282                                                   ;
0283 7338 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0284 733A 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     733C 00A0     
0285 733E 06A0  32         bl    @xfilv                ; Fill colors
     7340 2294     
=======
0280 7396 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7398 A70E     
0281 739A 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     739C 0050     
0282                                                   ;
0283 739E C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0284 73A0 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     73A2 00A0     
0285 73A4 06A0  32         bl    @xfilv                ; Fill colors
     73A6 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0286                                                   ; i \  tmp0 = start address
0287                                                   ; i |  tmp1 = byte to fill
0288                                                   ; i /  tmp2 = number of bytes to fill
0289               
<<<<<<< HEAD
0290 7342 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7344 A70E     
0291 7346 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     7348 00F0     
0292                                                   ;
0293 734A C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     734C A220     
0294 734E 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     7350 0050     
0295 7352 06A0  32         bl    @xfilv                ; Fill colors
     7354 2294     
=======
0290 73A8 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73AA A70E     
0291 73AC 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     73AE 00F0     
0292                                                   ;
0293 73B0 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     73B2 A220     
0294 73B4 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     73B6 0050     
0295 73B8 06A0  32         bl    @xfilv                ; Fill colors
     73BA 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0296                                                   ; i \  tmp0 = start address
0297                                                   ; i |  tmp1 = byte to fill
0298                                                   ; i /  tmp2 = number of bytes to fill
0299               
<<<<<<< HEAD
0300 7356 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7358 A70E     
0301 735A 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     735C 0140     
0302                                                   ;
0303 735E C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0304 7360 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     7362 00A0     
0305 7364 06A0  32         bl    @xfilv                ; Fill colors
     7366 2294     
=======
0300 73BC C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73BE A70E     
0301 73C0 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     73C2 0140     
0302                                                   ;
0303 73C4 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0304 73C6 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     73C8 00A0     
0305 73CA 06A0  32         bl    @xfilv                ; Fill colors
     73CC 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0306                                                   ; i \  tmp0 = start address
0307                                                   ; i |  tmp1 = byte to fill
0308                                                   ; i /  tmp2 = number of bytes to fill
0309                       ;-------------------------------------------------------
0310                       ; Exit early if only CMDB needed to be colorized
0311                       ;-------------------------------------------------------
<<<<<<< HEAD
0312 7368 C120  34         mov   @parm3,tmp0
     736A A00A     
0313 736C 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     736E FFFF     
0314 7370 133A  14         jeq   pane.action.colorscheme.cursorcolor.cmdb
=======
0312 73CE C120  34         mov   @parm3,tmp0
     73D0 A00A     
0313 73D2 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     73D4 FFFF     
0314 73D6 1336  14         jeq   pane.action.colorscheme.cursorcolor.cmdb
>>>>>>> b9b40bb (WIP optimize build scripts)
0315                                                   ; Yes, shortcut to CMDB cursor color
0316                       ;-------------------------------------------------------
0317                       ; Dump colors for error pane (TAT)
0318                       ;-------------------------------------------------------
0319               pane.action.colorscheme.errpane:
<<<<<<< HEAD
0320 7372 C120  34         mov   @tv.error.visible,tmp0
     7374 A22A     
0321 7376 1306  14         jeq   pane.action.colorscheme.statline
0322                                                   ; Skip if error pane is hidden
0323               
0324 7378 0205  20         li    tmp1,>00f6            ; White on dark red
     737A 00F6     
0325 737C C805  38         mov   tmp1,@parm1           ; Pass color combination
     737E A006     
0326               
0327 7380 06A0  32         bl    @pane.errline.drawcolor
     7382 7562     
=======
0320 73D8 C120  34         mov   @tv.error.visible,tmp0
     73DA A228     
0321 73DC 1306  14         jeq   pane.action.colorscheme.statline
0322                                                   ; Skip if error pane is hidden
0323               
0324 73DE 0205  20         li    tmp1,>00f6            ; White on dark red
     73E0 00F6     
0325 73E2 C805  38         mov   tmp1,@parm1           ; Pass color combination
     73E4 A006     
0326               
0327 73E6 06A0  32         bl    @pane.errline.drawcolor
     73E8 75C4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0328                                                   ; Draw color on rows in error pane
0329                                                   ; \ i  @tv.error.rows = Number of rows
0330                                                   ; / i  @parm1         = Color combination
0331                       ;-------------------------------------------------------
0332                       ; Dump colors for top line and bottom line (TAT)
0333                       ;-------------------------------------------------------
0334               pane.action.colorscheme.statline:
<<<<<<< HEAD
0335 7384 C160  34         mov   @tv.color,tmp1
     7386 A218     
0336 7388 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     738A 00FF     
0337 738C C805  38         mov   tmp1,@parm1           ; Set color combination
     738E A006     
0338               
0339               
0340 7390 04E0  34         clr   @parm2                ; Top row on screen
     7392 A008     
0341 7394 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7396 746E     
0342                                                   ; \ i  @parm1 = Color combination
0343                                                   ; / i  @parm2 = Row on physical screen
0344               
0345 7398 0205  20         li    tmp1,pane.botrow
     739A 0017     
0346 739C C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     739E A008     
0347 73A0 06A0  32         bl    @colors.line.set      ; Load color combination for line
     73A2 746E     
=======
0335 73EA C160  34         mov   @tv.color,tmp1
     73EC A218     
0336 73EE 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     73F0 00FF     
0337 73F2 C805  38         mov   tmp1,@parm1           ; Set color combination
     73F4 A006     
0338               
0339               
0340 73F6 04E0  34         clr   @parm2                ; Top row on screen
     73F8 A008     
0341 73FA 06A0  32         bl    @colors.line.set      ; Load color combination for line
     73FC 74D0     
0342                                                   ; \ i  @parm1 = Color combination
0343                                                   ; / i  @parm2 = Row on physical screen
0344               
0345 73FE 0205  20         li    tmp1,pane.botrow
     7400 001D     
0346 7402 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     7404 A008     
0347 7406 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7408 74D0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0348                                                   ; \ i  @parm1 = Color combination
0349                                                   ; / i  @parm2 = Row on physical screen
0350                       ;-------------------------------------------------------
0351                       ; Dump color for hearts in TI Basic dialog (TAT)
0352                       ;-------------------------------------------------------
<<<<<<< HEAD
0353 73A4 C160  34         mov   @cmdb.dialog,tmp1
     73A6 A71C     
0354 73A8 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     73AA 006B     
0355 73AC 1606  14         jne   pane.action.colorscheme.ruler
0356               
0357 73AE 0204  20         li    tmp0,11               ; 1st Heart after string "Session: 1"
     73B0 000B     
0358 73B2 C804  38         mov   tmp0,@parm1           ; Set parameter
     73B4 A006     
0359               
0360 73B6 06A0  32         bl    @dialog.hearts.tat    ; Dump colors for hearts
     73B8 7A3E     
0361                                                   ; \ i  @parm1 = Start column (pos 1st heart)
0362                                                   ; /
0363                       ;-------------------------------------------------------
0364                       ; Dump colors for ruler if visible (TAT)
0365                       ;-------------------------------------------------------
0366               pane.action.colorscheme.ruler:
0367 73BA C160  34         mov   @cmdb.dialog,tmp1
     73BC A71C     
0368 73BE 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     73C0 0068     
0369 73C2 130A  14         jeq   pane.action.colorscheme.cursorcolor
0370                                                   ; Yes, skip ruler
0371               
0372 73C4 C160  34         mov   @tv.ruler.visible,tmp1
     73C6 A210     
0373 73C8 1307  14         jeq   pane.action.colorscheme.cursorcolor
0374               
0375 73CA 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     73CC 7A6E     
0376 73CE 06A0  32         bl    @cpym2v
     73D0 2486     
0377 73D2 1850                   data vdp.fb.toprow.tat
0378 73D4 A370                   data fb.ruler.tat
0379 73D6 0050                   data 80               ; Show ruler colors
0380                       ;-------------------------------------------------------
0381                       ; Dump cursor FG color to sprite table (SAT)
0382                       ;-------------------------------------------------------
0383               pane.action.colorscheme.cursorcolor:
0384 73D8 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     73DA A216     
0385               
0386 73DC C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     73DE A224     
0387 73E0 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     73E2 0000     
0388 73E4 1304  14         jeq   pane.action.colorscheme.cursorcolor.fb
0389                                                   ; Yes, set cursor color
0390               
0391               pane.action.colorscheme.cursorcolor.cmdb:
0392 73E6 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     73E8 00F0     
0393 73EA 0A48  24         sla   tmp4,4                ; Move to MSB
0394 73EC 1003  14         jmp   !
0395               
0396               pane.action.colorscheme.cursorcolor.fb:
0397 73EE 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     73F0 000F     
0398 73F2 0A88  32         sla   tmp4,8                ; Move to MSB
0399               
0400 73F4 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     73F6 A059     
0401 73F8 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     73FA A215     
0402                       ;-------------------------------------------------------
0403                       ; Exit
0404                       ;-------------------------------------------------------
0405               pane.action.colorscheme.load.exit:
0406 73FC 06A0  32         bl    @scron                ; Turn screen on
     73FE 268E     
0407 7400 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7402 A00A     
0408 7404 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7406 A008     
0409 7408 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     740A A006     
0410 740C C239  30         mov   *stack+,tmp4          ; Pop tmp4
0411 740E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0412 7410 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0413 7412 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0414 7414 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0415 7416 C2F9  30         mov   *stack+,r11           ; Pop R11
0416 7418 045B  20         b     *r11                  ; Return to caller
0417               
0418               
0419               
0420               ***************************************************************
0421               * pane.action.colorscheme.statline
0422               * Set color combination for bottom status line
0423               ***************************************************************
0424               * bl @pane.action.colorscheme.statlines
0425               *--------------------------------------------------------------
0426               * INPUT
0427               * @parm1 = Color combination to set
0428               *--------------------------------------------------------------
0429               * OUTPUT
0430               * none
0431               *--------------------------------------------------------------
0432               * Register usage
0433               * tmp0, tmp1, tmp2
0434               ********|*****|*********************|**************************
0435               pane.action.colorscheme.statlines:
0436 741A 0649  14         dect  stack
0437 741C C64B  30         mov   r11,*stack            ; Save return address
0438 741E 0649  14         dect  stack
0439 7420 C644  30         mov   tmp0,*stack           ; Push tmp0
0440                       ;------------------------------------------------------
0441                       ; Bottom line
0442                       ;------------------------------------------------------
0443 7422 0204  20         li    tmp0,pane.botrow
     7424 0017     
0444 7426 C804  38         mov   tmp0,@parm2           ; Last row on screen
     7428 A008     
0445 742A 06A0  32         bl    @colors.line.set      ; Load color combination for line
     742C 746E     
0446                                                   ; \ i  @parm1 = Color combination
0447                                                   ; / i  @parm2 = Row on physical screen
0448                       ;------------------------------------------------------
0449                       ; Exit
0450                       ;------------------------------------------------------
0451               pane.action.colorscheme.statlines.exit:
0452 742E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0453 7430 C2F9  30         mov   *stack+,r11           ; Pop R11
0454 7432 045B  20         b     *r11                  ; Return to caller
=======
0353 740A C160  34         mov   @cmdb.dialog,tmp1
     740C A71C     
0354 740E 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     7410 006B     
0355 7412 1602  14         jne   pane.action.colorscheme.ruler
0356               
0357 7414 06A0  32         bl    @tibasic.hearts.tat   ; Dump colors for hearts
     7416 7A96     
0358                       ;-------------------------------------------------------
0359                       ; Dump colors for ruler if visible (TAT)
0360                       ;-------------------------------------------------------
0361               pane.action.colorscheme.ruler:
0362 7418 C160  34         mov   @cmdb.dialog,tmp1
     741A A71C     
0363 741C 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     741E 0068     
0364 7420 130A  14         jeq   pane.action.colorscheme.cursorcolor
0365                                                   ; Yes, skip ruler
0366               
0367 7422 C160  34         mov   @tv.ruler.visible,tmp1
     7424 A210     
0368 7426 1307  14         jeq   pane.action.colorscheme.cursorcolor
0369               
0370 7428 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     742A 7AC6     
0371 742C 06A0  32         bl    @cpym2v
     742E 2486     
0372 7430 1850                   data vdp.fb.toprow.tat
0373 7432 A370                   data fb.ruler.tat
0374 7434 0050                   data 80               ; Show ruler colors
0375                       ;-------------------------------------------------------
0376                       ; Dump cursor FG color to sprite table (SAT)
0377                       ;-------------------------------------------------------
0378               pane.action.colorscheme.cursorcolor:
0379 7436 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     7438 A216     
0380               
0381 743A C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     743C A222     
0382 743E 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     7440 0000     
0383 7442 1304  14         jeq   pane.action.colorscheme.cursorcolor.fb
0384                                                   ; Yes, set cursor color
0385               
0386               pane.action.colorscheme.cursorcolor.cmdb:
0387 7444 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     7446 00F0     
0388 7448 0A48  24         sla   tmp4,4                ; Move to MSB
0389 744A 1003  14         jmp   !
0390               
0391               pane.action.colorscheme.cursorcolor.fb:
0392 744C 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     744E 000F     
0393 7450 0A88  32         sla   tmp4,8                ; Move to MSB
0394               
0395 7452 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     7454 A059     
0396 7456 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     7458 A215     
0397                       ;-------------------------------------------------------
0398                       ; Exit
0399                       ;-------------------------------------------------------
0400               pane.action.colorscheme.load.exit:
0401 745A 06A0  32         bl    @scron                ; Turn screen on
     745C 268E     
0402 745E C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7460 A00A     
0403 7462 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7464 A008     
0404 7466 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7468 A006     
0405 746A C239  30         mov   *stack+,tmp4          ; Pop tmp4
0406 746C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0407 746E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0408 7470 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0409 7472 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0410 7474 C2F9  30         mov   *stack+,r11           ; Pop R11
0411 7476 045B  20         b     *r11                  ; Return to caller
0412               
0413               
0414               
0415               ***************************************************************
0416               * pane.action.colorscheme.statline
0417               * Set color combination for bottom status line
0418               ***************************************************************
0419               * bl @pane.action.colorscheme.statlines
0420               *--------------------------------------------------------------
0421               * INPUT
0422               * @parm1 = Color combination to set
0423               *--------------------------------------------------------------
0424               * OUTPUT
0425               * none
0426               *--------------------------------------------------------------
0427               * Register usage
0428               * tmp0, tmp1, tmp2
0429               ********|*****|*********************|**************************
0430               pane.action.colorscheme.statlines:
0431 7478 0649  14         dect  stack
0432 747A C64B  30         mov   r11,*stack            ; Save return address
0433 747C 0649  14         dect  stack
0434 747E C644  30         mov   tmp0,*stack           ; Push tmp0
0435                       ;------------------------------------------------------
0436                       ; Bottom line
0437                       ;------------------------------------------------------
0438 7480 0204  20         li    tmp0,pane.botrow
     7482 001D     
0439 7484 C804  38         mov   tmp0,@parm2           ; Last row on screen
     7486 A008     
0440 7488 06A0  32         bl    @colors.line.set      ; Load color combination for line
     748A 74D0     
0441                                                   ; \ i  @parm1 = Color combination
0442                                                   ; / i  @parm2 = Row on physical screen
0443                       ;------------------------------------------------------
0444                       ; Exit
0445                       ;------------------------------------------------------
0446               pane.action.colorscheme.statlines.exit:
0447 748C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0448 748E C2F9  30         mov   *stack+,r11           ; Pop R11
0449 7490 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0137                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
<<<<<<< HEAD
0020 7434 0649  14         dect  stack
0021 7436 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7438 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     743A 228E     
0026 743C 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     743E 0000     
     7440 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 7442 06A0  32         bl    @clslot
     7444 2EEA     
0031 7446 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 7448 06A0  32         bl    @clslot
     744A 2EEA     
0034 744C 0002                   data 2                ; Terminate task.vdp.cursor
=======
0020 7492 0649  14         dect  stack
0021 7494 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7496 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7498 228E     
0026 749A 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     749C 0000     
     749E 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 74A0 06A0  32         bl    @clslot
     74A2 2EEA     
0031 74A4 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 74A6 06A0  32         bl    @clslot
     74A8 2EEA     
0034 74AA 0002                   data 2                ; Terminate task.vdp.cursor
>>>>>>> b9b40bb (WIP optimize build scripts)
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
<<<<<<< HEAD
0039 744E C2F9  30         mov   *stack+,r11           ; Pop R11
0040 7450 045B  20         b     *r11                  ; Return to caller
=======
0039 74AC C2F9  30         mov   *stack+,r11           ; Pop R11
0040 74AE 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
<<<<<<< HEAD
0060 7452 0649  14         dect  stack
0061 7454 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 7456 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7458 228E     
0066 745A 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     745C 0000     
     745E 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0078               
0079 7460 06A0  32         bl    @mkslot
     7462 2ECC     
0080 7464 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     7466 3790     
0081 7468 FFFF                   data eol
0082               
=======
0060 74B0 0649  14         dect  stack
0061 74B2 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 74B4 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     74B6 228E     
0066 74B8 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     74BA 0000     
     74BC 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 74BE 06A0  32         bl    @mkslot
     74C0 2ECC     
0073 74C2 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     74C4 377E     
0074 74C6 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     74C8 3820     
0075 74CA FFFF                   data eol
0076               
>>>>>>> b9b40bb (WIP optimize build scripts)
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
<<<<<<< HEAD
0089 746A C2F9  30         mov   *stack+,r11           ; Pop R11
0090 746C 045B  20         b     *r11                  ; Return to caller
=======
0089 74CC C2F9  30         mov   *stack+,r11           ; Pop R11
0090 74CE 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0138                       ;-----------------------------------------------------------------------
0139                       ; Screen panes
0140                       ;-----------------------------------------------------------------------
0141                       copy  "colors.line.set.asm"         ; Set color combination for line
     **** ****     > colors.line.set.asm
0001               * FILE......: colors.line.set
0002               * Purpose...: Set color combination for line
0003               
0004               ***************************************************************
0005               * colors.line.set
0006               * Set color combination for line in VDP TAT
0007               ***************************************************************
0008               * bl  @colors.line.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Foreground / Background color
0012               * @parm2 = Row on physical screen
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               colors.line.set:
<<<<<<< HEAD
0021 746E 0649  14         dect  stack
0022 7470 C64B  30         mov   r11,*stack            ; Save return address
0023 7472 0649  14         dect  stack
0024 7474 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 7476 0649  14         dect  stack
0026 7478 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 747A 0649  14         dect  stack
0028 747C C646  30         mov   tmp2,*stack           ; Push tmp2
0029 747E 0649  14         dect  stack
0030 7480 C660  46         mov   @parm1,*stack         ; Push parm1
     7482 A006     
0031 7484 0649  14         dect  stack
0032 7486 C660  46         mov   @parm2,*stack         ; Push parm2
     7488 A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 748A C120  34         mov   @parm2,tmp0           ; Get target line
     748C A008     
0037 748E 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     7490 0050     
0038 7492 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 7494 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 7496 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     7498 1800     
0042 749A C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     749C A006     
0043 749E 0206  20         li    tmp2,80               ; Number of bytes to fill
     74A0 0050     
0044               
0045 74A2 06A0  32         bl    @xfilv                ; Fill colors
     74A4 2294     
=======
0021 74D0 0649  14         dect  stack
0022 74D2 C64B  30         mov   r11,*stack            ; Save return address
0023 74D4 0649  14         dect  stack
0024 74D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 74D8 0649  14         dect  stack
0026 74DA C645  30         mov   tmp1,*stack           ; Push tmp1
0027 74DC 0649  14         dect  stack
0028 74DE C646  30         mov   tmp2,*stack           ; Push tmp2
0029 74E0 0649  14         dect  stack
0030 74E2 C660  46         mov   @parm1,*stack         ; Push parm1
     74E4 A006     
0031 74E6 0649  14         dect  stack
0032 74E8 C660  46         mov   @parm2,*stack         ; Push parm2
     74EA A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 74EC C120  34         mov   @parm2,tmp0           ; Get target line
     74EE A008     
0037 74F0 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     74F2 0050     
0038 74F4 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 74F6 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 74F8 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     74FA 1800     
0042 74FC C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     74FE A006     
0043 7500 0206  20         li    tmp2,80               ; Number of bytes to fill
     7502 0050     
0044               
0045 7504 06A0  32         bl    @xfilv                ; Fill colors
     7506 2294     
>>>>>>> b9b40bb (WIP optimize build scripts)
0046                                                   ; i \  tmp0 = start address
0047                                                   ; i |  tmp1 = byte to fill
0048                                                   ; i /  tmp2 = number of bytes to fill
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               colors.line.set.exit:
<<<<<<< HEAD
0053 74A6 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     74A8 A008     
0054 74AA C839  50         mov   *stack+,@parm1        ; Pop @parm1
     74AC A006     
0055 74AE C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 74B0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 74B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 74B4 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 74B6 045B  20         b     *r11                  ; Return to caller
=======
0053 7508 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     750A A008     
0054 750C C839  50         mov   *stack+,@parm1        ; Pop @parm1
     750E A006     
0055 7510 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 7512 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 7514 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 7516 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 7518 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0142                       copy  "pane.topline.asm"            ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
<<<<<<< HEAD
0017 74B8 0649  14         dect  stack
0018 74BA C64B  30         mov   r11,*stack            ; Save return address
0019 74BC 0649  14         dect  stack
0020 74BE C644  30         mov   tmp0,*stack           ; Push tmp0
0021 74C0 0649  14         dect  stack
0022 74C2 C660  42         mov   @wyx,*stack           ; Push cursor position
     74C4 832A     
=======
0017 751A 0649  14         dect  stack
0018 751C C64B  30         mov   r11,*stack            ; Save return address
0019 751E 0649  14         dect  stack
0020 7520 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7522 0649  14         dect  stack
0022 7524 C660  42         mov   @wyx,*stack           ; Push cursor position
     7526 832A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0023                       ;------------------------------------------------------
0024                       ; Show current file
0025                       ;------------------------------------------------------
0026               pane.topline.file:
<<<<<<< HEAD
0027 74C6 06A0  32         bl    @at
     74C8 26C6     
0028 74CA 0000                   byte 0,0              ; y=0, x=0
0029               
0030 74CC C820  54         mov   @edb.filename.ptr,@parm1
     74CE A514     
     74D0 A006     
0031                                                   ; Get string to display
0032 74D2 0204  20         li    tmp0,47
     74D4 002F     
0033 74D6 C804  38         mov   tmp0,@parm2           ; Set requested length
     74D8 A008     
0034 74DA 0204  20         li    tmp0,32
     74DC 0020     
0035 74DE C804  38         mov   tmp0,@parm3           ; Set character to fill
     74E0 A00A     
0036 74E2 0204  20         li    tmp0,rambuf
     74E4 A100     
0037 74E6 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     74E8 A00C     
0038               
0039               
0040 74EA 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     74EC 342C     
=======
0027 7528 06A0  32         bl    @at
     752A 26C6     
0028 752C 0000                   byte 0,0              ; y=0, x=0
0029               
0030 752E C820  54         mov   @edb.filename.ptr,@parm1
     7530 A514     
     7532 A006     
0031                                                   ; Get string to display
0032 7534 0204  20         li    tmp0,47
     7536 002F     
0033 7538 C804  38         mov   tmp0,@parm2           ; Set requested length
     753A A008     
0034 753C 0204  20         li    tmp0,32
     753E 0020     
0035 7540 C804  38         mov   tmp0,@parm3           ; Set character to fill
     7542 A00A     
0036 7544 0204  20         li    tmp0,rambuf
     7546 A100     
0037 7548 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     754A A00C     
0038               
0039               
0040 754C 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     754E 341A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0041                                                   ; \ i  @parm1 = Pointer to string
0042                                                   ; | i  @parm2 = Requested length
0043                                                   ; | i  @parm3 = Fill characgter
0044                                                   ; | i  @parm4 = Pointer to buffer with
0045                                                   ; /             output string
0046               
<<<<<<< HEAD
0047 74EE C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     74F0 A018     
0048 74F2 06A0  32         bl    @xutst0               ; /
     74F4 2420     
=======
0047 7550 C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     7552 A018     
0048 7554 06A0  32         bl    @xutst0               ; /
     7556 2420     
>>>>>>> b9b40bb (WIP optimize build scripts)
0049                       ;------------------------------------------------------
0050                       ; Check if M1/M2 markers need to be shown
0051                       ;------------------------------------------------------
0052               pane.topline.showmarkers:
<<<<<<< HEAD
0053 74F6 C120  34         mov   @edb.block.m1,tmp0    ; \
     74F8 A50E     
0054 74FA 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     74FC FFFF     
0055 74FE 132C  14         jeq   pane.topline.exit     ; /
0056               
0057 7500 C120  34         mov   @tv.task.oneshot,tmp0 ; \
     7502 A226     
0058 7504 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     7506 3744     
0059                                                   ; | Exit early if overlay message visible
0060 7508 1327  14         jeq   pane.topline.exit     ; /
0061                       ;------------------------------------------------------
0062                       ; Show M1 marker
0063                       ;------------------------------------------------------
0064 750A 06A0  32         bl    @putat
     750C 2442     
0065 750E 0034                   byte 0,52
0066 7510 3AC0                   data txt.m1           ; Show M1 marker message
0067               
0068 7512 C820  54         mov   @edb.block.m1,@parm1
     7514 A50E     
     7516 A006     
0069 7518 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     751A 3400     
0070                                                   ; \ i @parm1           = uint16
0071                                                   ; / o @uint16.unpacked = Output string
0072               
0073 751C 0204  20         li    tmp0,>0500
     751E 0500     
0074 7520 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     7522 A02C     
0075               
0076 7524 06A0  32         bl    @putat
     7526 2442     
0077 7528 0037                   byte 0,55
0078 752A A02C                   data uint16.unpacked  ; Show M1 value
0079                       ;------------------------------------------------------
0080                       ; Show M2 marker
0081                       ;------------------------------------------------------
0082 752C C120  34         mov   @edb.block.m2,tmp0    ; \
     752E A510     
0083 7530 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     7532 FFFF     
0084 7534 1311  14         jeq   pane.topline.exit     ; /
0085               
0086 7536 06A0  32         bl    @putat
     7538 2442     
0087 753A 003E                   byte 0,62
0088 753C 3AC4                   data txt.m2           ; Show M2 marker message
0089               
0090 753E C820  54         mov   @edb.block.m2,@parm1
     7540 A510     
     7542 A006     
0091 7544 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     7546 3400     
0092                                                   ; \ i @parm1           = uint16
0093                                                   ; / o @uint16.unpacked = Output string
0094               
0095 7548 0204  20         li    tmp0,>0500
     754A 0500     
0096 754C D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     754E A02C     
0097               
0098 7550 06A0  32         bl    @putat
     7552 2442     
0099 7554 0041                   byte 0,65
0100 7556 A02C                   data uint16.unpacked  ; Show M2 value
=======
0053 7558 C120  34         mov   @edb.block.m1,tmp0    ; \
     755A A50E     
0054 755C 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     755E FFFF     
0055 7560 132C  14         jeq   pane.topline.exit     ; /
0056               
0057 7562 C120  34         mov   @tv.task.oneshot,tmp0 ; \
     7564 A224     
0058 7566 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     7568 3732     
0059                                                   ; | Exit early if overlay message visible
0060 756A 1327  14         jeq   pane.topline.exit     ; /
0061                       ;------------------------------------------------------
0062                       ; Show M1 marker
0063                       ;------------------------------------------------------
0064 756C 06A0  32         bl    @putat
     756E 2442     
0065 7570 0034                   byte 0,52
0066 7572 3B14                   data txt.m1           ; Show M1 marker message
0067               
0068 7574 C820  54         mov   @edb.block.m1,@parm1
     7576 A50E     
     7578 A006     
0069 757A 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     757C 33EE     
0070                                                   ; \ i @parm1           = uint16
0071                                                   ; / o @uint16.unpacked = Output string
0072               
0073 757E 0204  20         li    tmp0,>0500
     7580 0500     
0074 7582 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     7584 A02C     
0075               
0076 7586 06A0  32         bl    @putat
     7588 2442     
0077 758A 0037                   byte 0,55
0078 758C A02C                   data uint16.unpacked  ; Show M1 value
0079                       ;------------------------------------------------------
0080                       ; Show M2 marker
0081                       ;------------------------------------------------------
0082 758E C120  34         mov   @edb.block.m2,tmp0    ; \
     7590 A510     
0083 7592 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     7594 FFFF     
0084 7596 1311  14         jeq   pane.topline.exit     ; /
0085               
0086 7598 06A0  32         bl    @putat
     759A 2442     
0087 759C 003E                   byte 0,62
0088 759E 3B18                   data txt.m2           ; Show M2 marker message
0089               
0090 75A0 C820  54         mov   @edb.block.m2,@parm1
     75A2 A510     
     75A4 A006     
0091 75A6 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     75A8 33EE     
0092                                                   ; \ i @parm1           = uint16
0093                                                   ; / o @uint16.unpacked = Output string
0094               
0095 75AA 0204  20         li    tmp0,>0500
     75AC 0500     
0096 75AE D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     75B0 A02C     
0097               
0098 75B2 06A0  32         bl    @putat
     75B4 2442     
0099 75B6 0041                   byte 0,65
0100 75B8 A02C                   data uint16.unpacked  ; Show M2 value
>>>>>>> b9b40bb (WIP optimize build scripts)
0101                       ;------------------------------------------------------
0102                       ; Exit
0103                       ;------------------------------------------------------
0104               pane.topline.exit:
<<<<<<< HEAD
0105 7558 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     755A 832A     
0106 755C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0107 755E C2F9  30         mov   *stack+,r11           ; Pop r11
0108 7560 045B  20         b     *r11                  ; Return
=======
0105 75BA C839  42         mov   *stack+,@wyx          ; Pop cursor position
     75BC 832A     
0106 75BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0107 75C0 C2F9  30         mov   *stack+,r11           ; Pop r11
0108 75C2 045B  20         b     *r11                  ; Return
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0143                       copy  "pane.errline.asm"            ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
<<<<<<< HEAD
0023 7562 0649  14         dect  stack
0024 7564 C64B  30         mov   r11,*stack            ; Save return address
0025 7566 0649  14         dect  stack
0026 7568 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 756A 0649  14         dect  stack
0028 756C C645  30         mov   tmp1,*stack           ; Push tmp1
0029 756E 0649  14         dect  stack
0030 7570 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 7572 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     7574 0017     
0035 7576 C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 7578 6160  34         s     @tv.error.rows,tmp1   ; /
     757A A22C     
=======
0023 75C4 0649  14         dect  stack
0024 75C6 C64B  30         mov   r11,*stack            ; Save return address
0025 75C8 0649  14         dect  stack
0026 75CA C644  30         mov   tmp0,*stack           ; Push tmp0
0027 75CC 0649  14         dect  stack
0028 75CE C645  30         mov   tmp1,*stack           ; Push tmp1
0029 75D0 0649  14         dect  stack
0030 75D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 75D4 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     75D6 001D     
0035 75D8 C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 75DA 6160  34         s     @tv.error.rows,tmp1   ; /
     75DC A22A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
<<<<<<< HEAD
0041 757C C805  38         mov   tmp1,@parm2           ; Row on physical screen
     757E A008     
0042               
0043 7580 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7582 746E     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 7584 0585  14         inc   tmp1                  ; Next row
0048 7586 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 7588 11F9  14         jlt   pane.errline.drawcolor.loop
=======
0041 75DE C805  38         mov   tmp1,@parm2           ; Row on physical screen
     75E0 A008     
0042               
0043 75E2 06A0  32         bl    @colors.line.set      ; Load color combination for line
     75E4 74D0     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 75E6 0585  14         inc   tmp1                  ; Next row
0048 75E8 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 75EA 11F9  14         jlt   pane.errline.drawcolor.loop
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
<<<<<<< HEAD
0055 758A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 758C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 758E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 7590 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 7592 045B  20         b     *r11                  ; Return to caller
=======
0055 75EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 75EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 75F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 75F2 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 75F4 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
<<<<<<< HEAD
0082 7594 0649  14         dect  stack
0083 7596 C64B  30         mov   r11,*stack            ; Save return address
0084 7598 0649  14         dect  stack
0085 759A C644  30         mov   tmp0,*stack           ; Push tmp0
0086 759C 0649  14         dect  stack
0087 759E C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 75A0 0205  20         li    tmp1,>00f6            ; White on dark red
     75A2 00F6     
0090 75A4 C805  38         mov   tmp1,@parm1
     75A6 A006     
0091               
0092 75A8 06A0  32         bl    @pane.errline.drawcolor
     75AA 7562     
=======
0082 75F6 0649  14         dect  stack
0083 75F8 C64B  30         mov   r11,*stack            ; Save return address
0084 75FA 0649  14         dect  stack
0085 75FC C644  30         mov   tmp0,*stack           ; Push tmp0
0086 75FE 0649  14         dect  stack
0087 7600 C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 7602 0205  20         li    tmp1,>00f6            ; White on dark red
     7604 00F6     
0090 7606 C805  38         mov   tmp1,@parm1
     7608 A006     
0091               
0092 760A 06A0  32         bl    @pane.errline.drawcolor
     760C 75C4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
<<<<<<< HEAD
0099 75AC 0204  20         li    tmp0,tv.error.msg
     75AE A234     
0100 75B0 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     75B2 A006     
0101               
0102 75B4 0204  20         li    tmp0,240
     75B6 00F0     
0103 75B8 C804  38         mov   tmp0,@parm2           ; Set requested length
     75BA A008     
0104               
0105 75BC 0204  20         li    tmp0,32
     75BE 0020     
0106 75C0 C804  38         mov   tmp0,@parm3           ; Set character to fill
     75C2 A00A     
0107               
0108 75C4 0204  20         li    tmp0,rambuf
     75C6 A100     
0109 75C8 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     75CA A00C     
0110               
0111 75CC 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     75CE 342C     
=======
0099 760E 0204  20         li    tmp0,tv.error.msg
     7610 A232     
0100 7612 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     7614 A006     
0101               
0102 7616 0204  20         li    tmp0,240
     7618 00F0     
0103 761A C804  38         mov   tmp0,@parm2           ; Set requested length
     761C A008     
0104               
0105 761E 0204  20         li    tmp0,32
     7620 0020     
0106 7622 C804  38         mov   tmp0,@parm3           ; Set character to fill
     7624 A00A     
0107               
0108 7626 0204  20         li    tmp0,rambuf
     7628 A100     
0109 762A C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     762C A00C     
0110               
0111 762E 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     7630 341A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
<<<<<<< HEAD
0120 75D0 06A0  32         bl    @at
     75D2 26C6     
0121 75D4 1400                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 75D6 C160  34         mov   @outparm1,tmp1        ; \ Display error message
     75D8 A018     
0124 75DA 06A0  32         bl    @xutst0               ; /
     75DC 2420     
0125               
0126 75DE C120  34         mov   @fb.scrrows.max,tmp0  ; \
     75E0 A31E     
0127 75E2 6120  34         s     @tv.error.rows,tmp0   ; | Adjust number of rows in frame buffer
     75E4 A22C     
0128 75E6 C804  38         mov   tmp0,@fb.scrrows      ; /
     75E8 A31C     
0129               
0130 75EA 0720  34         seto  @tv.error.visible     ; Error line is visible
     75EC A22A     
=======
0120 7632 06A0  32         bl    @at
     7634 26C6     
0121 7636 1A00                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 7638 C160  34         mov   @outparm1,tmp1        ; \ Display error message
     763A A018     
0124 763C 06A0  32         bl    @xutst0               ; /
     763E 2420     
0125               
0126 7640 C120  34         mov   @fb.scrrows.max,tmp0  ; \
     7642 A31E     
0127 7644 6120  34         s     @tv.error.rows,tmp0   ; | Adjust number of rows in frame buffer
     7646 A22A     
0128 7648 C804  38         mov   tmp0,@fb.scrrows      ; /
     764A A31C     
0129               
0130 764C 0720  34         seto  @tv.error.visible     ; Error line is visible
     764E A228     
>>>>>>> b9b40bb (WIP optimize build scripts)
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               pane.errline.show.exit:
<<<<<<< HEAD
0135 75EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 75F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 75F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 75F4 045B  20         b     *r11                  ; Return to caller
=======
0135 7650 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 7652 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 7654 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 7656 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0139               
0140               
0141               
0142               ***************************************************************
0143               * pane.errline.hide
0144               * Hide error line
0145               ***************************************************************
0146               * bl @pane.errline.hide
0147               *--------------------------------------------------------------
0148               * INPUT
0149               * none
0150               *--------------------------------------------------------------
0151               * OUTPUT
0152               * none
0153               *--------------------------------------------------------------
0154               * Register usage
0155               * none
0156               *--------------------------------------------------------------
0157               * Hiding the error line passes pane focus to frame buffer.
0158               ********|*****|*********************|**************************
0159               pane.errline.hide:
<<<<<<< HEAD
0160 75F6 0649  14         dect  stack
0161 75F8 C64B  30         mov   r11,*stack            ; Save return address
0162 75FA 0649  14         dect  stack
0163 75FC C644  30         mov   tmp0,*stack           ; Push tmp0
0164                       ;------------------------------------------------------
0165                       ; Get color combination
0166                       ;------------------------------------------------------
0167 75FE 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     7600 32B6     
0168               
0169 7602 C120  34         mov   @cmdb.visible,tmp0
     7604 A702     
0170 7606 1303  14         jeq   pane.errline.hide.fbcolor
0171                       ;------------------------------------------------------
0172                       ; CMDB pane color
0173                       ;------------------------------------------------------
0174 7608 C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     760A A220     
0175 760C 1003  14         jmp   !
=======
0160 7658 0649  14         dect  stack
0161 765A C64B  30         mov   r11,*stack            ; Save return address
0162 765C 0649  14         dect  stack
0163 765E C644  30         mov   tmp0,*stack           ; Push tmp0
0164                       ;------------------------------------------------------
0165                       ; Get color combination
0166                       ;------------------------------------------------------
0167 7660 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     7662 32A4     
0168               
0169 7664 C120  34         mov   @cmdb.visible,tmp0
     7666 A702     
0170 7668 1303  14         jeq   pane.errline.hide.fbcolor
0171                       ;------------------------------------------------------
0172                       ; CMDB pane color
0173                       ;------------------------------------------------------
0174 766A C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     766C A220     
0175 766E 1003  14         jmp   !
>>>>>>> b9b40bb (WIP optimize build scripts)
0176                       ;------------------------------------------------------
0177                       ; Frame buffer color
0178                       ;------------------------------------------------------
0179               pane.errline.hide.fbcolor:
<<<<<<< HEAD
0180 760E C120  34         mov   @tv.color,tmp0        ; Get colors
     7610 A218     
0181 7612 0984  32         srl   tmp0,8                ; Get rid of status line colors
0182                       ;------------------------------------------------------
0183                       ; Dump colors
0184                       ;------------------------------------------------------
0185 7614 C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     7616 A006     
0186               
0187 7618 06A0  32         bl    @pane.errline.drawcolor
     761A 7562     
=======
0180 7670 C120  34         mov   @tv.color,tmp0        ; Get colors
     7672 A218     
0181 7674 0984  32         srl   tmp0,8                ; Get rid of status line colors
0182                       ;------------------------------------------------------
0183                       ; Dump colors
0184                       ;------------------------------------------------------
0185 7676 C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     7678 A006     
0186               
0187 767A 06A0  32         bl    @pane.errline.drawcolor
     767C 75C4     
>>>>>>> b9b40bb (WIP optimize build scripts)
0188                                                   ; Draw color on rows in error pane
0189                                                   ; \ i  @tv.error.rows = Number of rows
0190                                                   ; / i  @parm1         = Color combination
0191               
<<<<<<< HEAD
0192 761C 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     761E A22A     
0193 7620 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     7622 A31E     
     7624 A31C     
=======
0192 767E 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     7680 A228     
0193 7682 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     7684 A31E     
     7686 A31C     
>>>>>>> b9b40bb (WIP optimize build scripts)
0194                                                   ; Set frame buffer to full size again
0195                       ;------------------------------------------------------
0196                       ; Exit
0197                       ;------------------------------------------------------
0198               pane.errline.hide.exit:
<<<<<<< HEAD
0199 7626 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0200 7628 C2F9  30         mov   *stack+,r11           ; Pop r11
0201 762A 045B  20         b     *r11                  ; Return to caller
=======
0199 7688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0200 768A C2F9  30         mov   *stack+,r11           ; Pop r11
0201 768C 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0144                       copy  "pane.botline.asm"            ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.botline:
<<<<<<< HEAD
0017 762C 0649  14         dect  stack
0018 762E C64B  30         mov   r11,*stack            ; Save return address
0019 7630 0649  14         dect  stack
0020 7632 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7634 0649  14         dect  stack
0022 7636 C660  42         mov   @wyx,*stack           ; Push cursor position
     7638 832A     
0023                       ;------------------------------------------------------
0024                       ; Show block shortcuts if set
0025                       ;------------------------------------------------------
0026 763A C120  34         mov   @edb.block.m2,tmp0    ; \
     763C A510     
0027 763E 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0028                                                   ; /
0029 7640 1305  14         jeq   pane.botline.show_keys
0030               
0031 7642 06A0  32         bl    @putat
     7644 2442     
0032 7646 1700                   byte pane.botrow,0
0033 7648 3B12                   data txt.keys.block   ; Show block shortcuts
0034               
0035 764A 1015  14         jmp   pane.botline.show_mode
=======
0017 768E 0649  14         dect  stack
0018 7690 C64B  30         mov   r11,*stack            ; Save return address
0019 7692 0649  14         dect  stack
0020 7694 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7696 0649  14         dect  stack
0022 7698 C660  42         mov   @wyx,*stack           ; Push cursor position
     769A 832A     
0023                       ;------------------------------------------------------
0024                       ; Show block shortcuts if set
0025                       ;------------------------------------------------------
0026 769C C120  34         mov   @edb.block.m2,tmp0    ; \
     769E A510     
0027 76A0 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0028                                                   ; /
0029 76A2 1305  14         jeq   pane.botline.show_keys
0030               
0031 76A4 06A0  32         bl    @putat
     76A6 2442     
0032 76A8 1D00                   byte pane.botrow,0
0033 76AA 3B66                   data txt.keys.block   ; Show block shortcuts
0034               
0035 76AC 1015  14         jmp   pane.botline.show_mode
>>>>>>> b9b40bb (WIP optimize build scripts)
0036                       ;------------------------------------------------------
0037                       ; Show default message
0038                       ;------------------------------------------------------
0039               pane.botline.show_keys:
<<<<<<< HEAD
0040 764C C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     764E A0B4     
0041 7650 130E  14         jeq   !
0042                       ;------------------------------------------------------
0043                       ; Show TI Basic session ID
0044                       ;------------------------------------------------------
0045 7652 06A0  32         bl    @putat
     7654 2442     
0046 7656 1700                   byte pane.botrow,0
0047 7658 3AE8                   data txt.keys.defaultb
0048                                                   ; Show defaults + TI Basic
0049               
0050 765A C120  34         mov   @tib.session,tmp0     ; Get Session ID
     765C A0B4     
0051 765E 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     7660 0130     
0052                                                   ; | length-byte prefix and
0053                                                   ; / ASCII offset 48 (>30)
0054               
0055 7662 C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     7664 A100     
0056               
0057 7666 06A0  32         bl    @putat                ; \
     7668 2442     
0058 766A 1729                   byte pane.botrow,41   ; | Display session-ID string
0059 766C A100                   data rambuf           ; / Y=bottom row, X=41
0060                       ;------------------------------------------------------
0061                       ; Show default keys
0062                       ;------------------------------------------------------
0063 766E 06A0  32 !       bl    @putat
     7670 2442     
0064 7672 1700                   byte pane.botrow,0
0065 7674 3AC8                   data txt.keys.default ; Show default keys
=======
0040 76AE C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     76B0 A0B4     
0041 76B2 130E  14         jeq   !
0042                       ;------------------------------------------------------
0043                       ; Show TI Basic session ID
0044                       ;------------------------------------------------------
0045 76B4 06A0  32         bl    @putat
     76B6 2442     
0046 76B8 1D00                   byte pane.botrow,0
0047 76BA 3B3C                   data txt.keys.defaultb
0048                                                   ; Show defaults + TI Basic
0049               
0050 76BC C120  34         mov   @tib.session,tmp0     ; Get Session ID
     76BE A0B4     
0051 76C0 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     76C2 0130     
0052                                                   ; | length-byte prefix and
0053                                                   ; / ASCII offset 48 (>30)
0054               
0055 76C4 C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     76C6 A100     
0056               
0057 76C8 06A0  32         bl    @putat                ; \
     76CA 2442     
0058 76CC 1D29                   byte pane.botrow,41   ; | Display session-ID string
0059 76CE A100                   data rambuf           ; / Y=bottom row, X=41
0060                       ;------------------------------------------------------
0061                       ; Show default keys
0062                       ;------------------------------------------------------
0063 76D0 06A0  32 !       bl    @putat
     76D2 2442     
0064 76D4 1D00                   byte pane.botrow,0
0065 76D6 3B1C                   data txt.keys.default ; Show default keys
>>>>>>> b9b40bb (WIP optimize build scripts)
0066                       ;------------------------------------------------------
0067                       ; Show text editing mode
0068                       ;------------------------------------------------------
0069               pane.botline.show_mode:
<<<<<<< HEAD
0070 7676 C120  34         mov   @edb.insmode,tmp0
     7678 A50A     
0071 767A 1605  14         jne   pane.botline.show_mode.insert
0072                       ;------------------------------------------------------
0073                       ; Overwrite mode
0074                       ;------------------------------------------------------
0075 767C 06A0  32         bl    @putat
     767E 2442     
0076 7680 1736                   byte  pane.botrow,54
0077 7682 38AE                   data  txt.ovrwrite
0078 7684 100C  14         jmp   pane.botline.show_dirty
=======
0070 76D8 C120  34         mov   @edb.insmode,tmp0
     76DA A50A     
0071 76DC 1605  14         jne   pane.botline.show_mode.insert
0072                       ;------------------------------------------------------
0073                       ; Overwrite mode
0074                       ;------------------------------------------------------
0075 76DE 06A0  32         bl    @putat
     76E0 2442     
0076 76E2 1D36                   byte  pane.botrow,54
0077 76E4 3902                   data  txt.ovrwrite
0078 76E6 100C  14         jmp   pane.botline.show_dirty
>>>>>>> b9b40bb (WIP optimize build scripts)
0079                       ;------------------------------------------------------
0080                       ; Insert mode
0081                       ;------------------------------------------------------
0082               pane.botline.show_mode.insert:
<<<<<<< HEAD
0083 7686 C120  34         mov   @edb.autoinsert,tmp0
     7688 A50C     
0084 768A 1305  14         jeq   pane.botline.show_mode.insert.noauto
0085                       ;------------------------------------------------------
0086                       ; Auto-Insert
0087                       ;------------------------------------------------------
0088 768C 06A0  32         bl    @putat
     768E 2442     
0089 7690 1736                   byte  pane.botrow,54
0090 7692 38BA                   data  txt.autoinsert
0091 7694 1004  14         jmp   pane.botline.show_dirty
=======
0083 76E8 C120  34         mov   @edb.autoinsert,tmp0
     76EA A50C     
0084 76EC 1305  14         jeq   pane.botline.show_mode.insert.noauto
0085                       ;------------------------------------------------------
0086                       ; Auto-Insert
0087                       ;------------------------------------------------------
0088 76EE 06A0  32         bl    @putat
     76F0 2442     
0089 76F2 1D36                   byte  pane.botrow,54
0090 76F4 390E                   data  txt.autoinsert
0091 76F6 1004  14         jmp   pane.botline.show_dirty
>>>>>>> b9b40bb (WIP optimize build scripts)
0092                       ;------------------------------------------------------
0093                       ; No Auto-Insert
0094                       ;------------------------------------------------------
0095               pane.botline.show_mode.insert.noauto:
<<<<<<< HEAD
0096 7696 06A0  32         bl    @putat
     7698 2442     
0097 769A 1736                   byte  pane.botrow,54
0098 769C 38B4                   data  txt.insert
=======
0096 76F8 06A0  32         bl    @putat
     76FA 2442     
0097 76FC 1D36                   byte  pane.botrow,54
0098 76FE 3908                   data  txt.insert
>>>>>>> b9b40bb (WIP optimize build scripts)
0099                       ;------------------------------------------------------
0100                       ; Show if text was changed in editor buffer
0101                       ;------------------------------------------------------
0102               pane.botline.show_dirty:
<<<<<<< HEAD
0103 769E C120  34         mov   @edb.dirty,tmp0
     76A0 A506     
0104 76A2 1305  14         jeq   pane.botline.nochange
0105                       ;------------------------------------------------------
0106                       ; Show "*"
0107                       ;------------------------------------------------------
0108 76A4 06A0  32         bl    @putat
     76A6 2442     
0109 76A8 173A                   byte pane.botrow,58
0110 76AA 38C0                   data txt.star
0111 76AC 1004  14         jmp   pane.botline.show_linecol
=======
0103 7700 C120  34         mov   @edb.dirty,tmp0
     7702 A506     
0104 7704 1305  14         jeq   pane.botline.nochange
0105                       ;------------------------------------------------------
0106                       ; Show "*"
0107                       ;------------------------------------------------------
0108 7706 06A0  32         bl    @putat
     7708 2442     
0109 770A 1D3A                   byte pane.botrow,58
0110 770C 3914                   data txt.star
0111 770E 1004  14         jmp   pane.botline.show_linecol
>>>>>>> b9b40bb (WIP optimize build scripts)
0112                       ;------------------------------------------------------
0113                       ; Show " "
0114                       ;------------------------------------------------------
0115               pane.botline.nochange:
<<<<<<< HEAD
0116 76AE 06A0  32         bl    @putat
     76B0 2442     
0117 76B2 173A                   byte pane.botrow,58
0118 76B4 3BCE                   data txt.ws1          ; Single white space
=======
0116 7710 06A0  32         bl    @putat
     7712 2442     
0117 7714 1D3A                   byte pane.botrow,58
0118 7716 3C22                   data txt.ws1          ; Single white space
>>>>>>> b9b40bb (WIP optimize build scripts)
0119                       ;------------------------------------------------------
0120                       ; Show "line,column"
0121                       ;------------------------------------------------------
0122               pane.botline.show_linecol:
<<<<<<< HEAD
0123 76B6 C820  54         mov   @fb.row,@parm1
     76B8 A306     
     76BA A006     
0124 76BC 06A0  32         bl    @fb.row2line          ; Row to editor line
     76BE 30D2     
=======
0123 7718 C820  54         mov   @fb.row,@parm1
     771A A306     
     771C A006     
0124 771E 06A0  32         bl    @fb.row2line          ; Row to editor line
     7720 30C0     
>>>>>>> b9b40bb (WIP optimize build scripts)
0125                                                   ; \ i @fb.topline = Top line in frame buffer
0126                                                   ; | i @parm1      = Row in frame buffer
0127                                                   ; / o @outparm1   = Matching line in EB
0128               
<<<<<<< HEAD
0129 76C0 05A0  34         inc   @outparm1             ; Add base 1
     76C2 A018     
0130                       ;------------------------------------------------------
0131                       ; Show line
0132                       ;------------------------------------------------------
0133 76C4 06A0  32         bl    @putnum
     76C6 2A24     
0134 76C8 173B                   byte  pane.botrow,59  ; YX
0135 76CA A018                   data  outparm1,rambuf
     76CC A100     
0136 76CE 30                     byte  48              ; ASCII offset
0137 76CF   20                   byte  32              ; Padding character
0138                       ;------------------------------------------------------
0139                       ; Show comma
0140                       ;------------------------------------------------------
0141 76D0 06A0  32         bl    @putat
     76D2 2442     
0142 76D4 1740                   byte  pane.botrow,64
0143 76D6 38A6                   data  txt.delim
0144                       ;------------------------------------------------------
0145                       ; Show column
0146                       ;------------------------------------------------------
0147 76D8 06A0  32         bl    @film
     76DA 2236     
0148 76DC A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     76DE 0020     
     76E0 000C     
0149               
0150 76E2 C120  34         mov   @fb.column,tmp0       ; Get column
     76E4 A30C     
0151 76E6 A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     76E8 A310     
0152 76EA 0584  14         inc   tmp0                  ; Offset 1
0153 76EC C804  30         mov   tmp0,@waux1           ; Save in temporary
     76EE 833C     
0154               
0155 76F0 06A0  32         bl    @mknum                ; Convert unsigned number to string
     76F2 29A6     
0156 76F4 833C                   data  waux1,rambuf
     76F6 A100     
0157 76F8 30                     byte  48              ; ASCII offset
0158 76F9   20                   byte  32              ; Fill character
0159               
0160 76FA 06A0  32         bl    @trimnum              ; Trim number to the left
     76FC 29FE     
0161 76FE A100                   data  rambuf,rambuf+5,32
     7700 A105     
     7702 0020     
0162               
0163 7704 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     7706 0600     
0164 7708 D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     770A A105     
=======
0129 7722 05A0  34         inc   @outparm1             ; Add base 1
     7724 A018     
0130                       ;------------------------------------------------------
0131                       ; Show line
0132                       ;------------------------------------------------------
0133 7726 06A0  32         bl    @putnum
     7728 2A24     
0134 772A 1D3B                   byte  pane.botrow,59  ; YX
0135 772C A018                   data  outparm1,rambuf
     772E A100     
0136 7730 30                     byte  48              ; ASCII offset
0137 7731   20                   byte  32              ; Padding character
0138                       ;------------------------------------------------------
0139                       ; Show comma
0140                       ;------------------------------------------------------
0141 7732 06A0  32         bl    @putat
     7734 2442     
0142 7736 1D40                   byte  pane.botrow,64
0143 7738 38FA                   data  txt.delim
0144                       ;------------------------------------------------------
0145                       ; Show column
0146                       ;------------------------------------------------------
0147 773A 06A0  32         bl    @film
     773C 2236     
0148 773E A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     7740 0020     
     7742 000C     
0149               
0150 7744 C120  34         mov   @fb.column,tmp0       ; Get column
     7746 A30C     
0151 7748 A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     774A A310     
0152 774C 0584  14         inc   tmp0                  ; Offset 1
0153 774E C804  30         mov   tmp0,@waux1           ; Save in temporary
     7750 833C     
0154               
0155 7752 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7754 29A6     
0156 7756 833C                   data  waux1,rambuf
     7758 A100     
0157 775A 30                     byte  48              ; ASCII offset
0158 775B   20                   byte  32              ; Fill character
0159               
0160 775C 06A0  32         bl    @trimnum              ; Trim number to the left
     775E 29FE     
0161 7760 A100                   data  rambuf,rambuf+5,32
     7762 A105     
     7764 0020     
0162               
0163 7766 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     7768 0600     
0164 776A D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     776C A105     
>>>>>>> b9b40bb (WIP optimize build scripts)
0165               
0166                       ;------------------------------------------------------
0167                       ; Decide if row length is to be shown
0168                       ;------------------------------------------------------
<<<<<<< HEAD
0169 770C C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     770E A30C     
0170 7710 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7712 A310     
0171 7714 0584  14         inc   tmp0                  ; /
0172 7716 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     7718 A308     
0173 771A 1101  14         jlt   pane.botline.show_linecol.linelen
0174 771C 102E  14         jmp   pane.botline.show_linecol.colstring
=======
0169 776E C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     7770 A30C     
0170 7772 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7774 A310     
0171 7776 0584  14         inc   tmp0                  ; /
0172 7778 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     777A A308     
0173 777C 1101  14         jlt   pane.botline.show_linecol.linelen
0174 777E 102E  14         jmp   pane.botline.show_linecol.colstring
>>>>>>> b9b40bb (WIP optimize build scripts)
0175                                                   ; Yes, skip showing row length
0176                       ;------------------------------------------------------
0177                       ; Add ',' delimiter and length of line to string
0178                       ;------------------------------------------------------
0179               pane.botline.show_linecol.linelen:
<<<<<<< HEAD
0180 771E C120  34         mov   @fb.column,tmp0       ; \
     7720 A30C     
0181 7722 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7724 A310     
0182 7726 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     7728 A107     
0183 772A 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     772C 0009     
0184 772E 1101  14         jlt   !                     ; | column.
0185 7730 0585  14         inc   tmp1                  ; /
0186               
0187 7732 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     7734 2F00     
0188 7736 DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0189               
0190 7738 C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     773A 833C     
0191               
0192 773C 06A0  32         bl    @mknum
     773E 29A6     
0193 7740 A308                   data  fb.row.length,rambuf
     7742 A100     
0194 7744 30                     byte  48              ; ASCII offset
0195 7745   20                   byte  32              ; Padding character
0196               
0197 7746 C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     7748 833C     
0198               
0199 774A C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     774C A308     
0200 774E 0284  22         ci    tmp0,10               ; /
     7750 000A     
0201 7752 110C  14         jlt   pane.botline.show_line.1digit
0202                       ;------------------------------------------------------
0203                       ; Assert
0204                       ;------------------------------------------------------
0205 7754 0284  22         ci    tmp0,99
     7756 0063     
0206 7758 1205  14         jle   pane.botline.show_line.2digits
=======
0180 7780 C120  34         mov   @fb.column,tmp0       ; \
     7782 A30C     
0181 7784 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7786 A310     
0182 7788 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     778A A107     
0183 778C 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     778E 0009     
0184 7790 1101  14         jlt   !                     ; | column.
0185 7792 0585  14         inc   tmp1                  ; /
0186               
0187 7794 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     7796 2F00     
0188 7798 DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0189               
0190 779A C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     779C 833C     
0191               
0192 779E 06A0  32         bl    @mknum
     77A0 29A6     
0193 77A2 A308                   data  fb.row.length,rambuf
     77A4 A100     
0194 77A6 30                     byte  48              ; ASCII offset
0195 77A7   20                   byte  32              ; Padding character
0196               
0197 77A8 C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     77AA 833C     
0198               
0199 77AC C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     77AE A308     
0200 77B0 0284  22         ci    tmp0,10               ; /
     77B2 000A     
0201 77B4 110C  14         jlt   pane.botline.show_line.1digit
0202                       ;------------------------------------------------------
0203                       ; Assert
0204                       ;------------------------------------------------------
0205 77B6 0284  22         ci    tmp0,99
     77B8 0063     
0206 77BA 1205  14         jle   pane.botline.show_line.2digits
>>>>>>> b9b40bb (WIP optimize build scripts)
0207                       ;------------------------------------------------------
0208                       ; Show length of line (3 digits)
0209                       ;------------------------------------------------------
0210               pane.botline.show_line.3digits:
<<<<<<< HEAD
0211 775A 0204  20         li    tmp0,rambuf+2
     775C A102     
0212 775E DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0213 7760 DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0214 7762 1006  14         jmp   pane.botline.show_line.rest
=======
0211 77BC 0204  20         li    tmp0,rambuf+2
     77BE A102     
0212 77C0 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0213 77C2 DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0214 77C4 1006  14         jmp   pane.botline.show_line.rest
>>>>>>> b9b40bb (WIP optimize build scripts)
0215                       ;------------------------------------------------------
0216                       ; Show length of line (2 digits)
0217                       ;------------------------------------------------------
0218               pane.botline.show_line.2digits:
<<<<<<< HEAD
0219 7764 0204  20         li    tmp0,rambuf+3
     7766 A103     
0220 7768 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0221 776A 1002  14         jmp   pane.botline.show_line.rest
=======
0219 77C6 0204  20         li    tmp0,rambuf+3
     77C8 A103     
0220 77CA DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0221 77CC 1002  14         jmp   pane.botline.show_line.rest
>>>>>>> b9b40bb (WIP optimize build scripts)
0222                       ;------------------------------------------------------
0223                       ; Show length of line (1 digit)
0224                       ;------------------------------------------------------
0225               pane.botline.show_line.1digit:
<<<<<<< HEAD
0226 776C 0204  20         li    tmp0,rambuf+4
     776E A104     
0227               pane.botline.show_line.rest:
0228 7770 DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0229 7772 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     7774 A100     
0230 7776 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     7778 A100     
=======
0226 77CE 0204  20         li    tmp0,rambuf+4
     77D0 A104     
0227               pane.botline.show_line.rest:
0228 77D2 DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0229 77D4 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     77D6 A100     
0230 77D8 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     77DA A100     
>>>>>>> b9b40bb (WIP optimize build scripts)
0231                       ;------------------------------------------------------
0232                       ; Show column string
0233                       ;------------------------------------------------------
0234               pane.botline.show_linecol.colstring:
<<<<<<< HEAD
0235 777A 06A0  32         bl    @putat
     777C 2442     
0236 777E 1741                   byte pane.botrow,65
0237 7780 A105                   data rambuf+5         ; Show string
0238                       ;------------------------------------------------------
0239                       ; Show lines in buffer unless on last line in file
0240                       ;------------------------------------------------------
0241 7782 C820  54         mov   @fb.row,@parm1
     7784 A306     
     7786 A006     
0242 7788 06A0  32         bl    @fb.row2line
     778A 30D2     
0243 778C 8820  50         c     @edb.lines,@outparm1
     778E A504     
     7790 A018     
0244 7792 1605  14         jne   pane.botline.show_lines_in_buffer
0245               
0246 7794 06A0  32         bl    @putat
     7796 2442     
0247 7798 1748                   byte pane.botrow,72
0248 779A 38A8                   data txt.bottom
0249               
0250 779C 1009  14         jmp   pane.botline.exit
=======
0235 77DC 06A0  32         bl    @putat
     77DE 2442     
0236 77E0 1D41                   byte pane.botrow,65
0237 77E2 A105                   data rambuf+5         ; Show string
0238                       ;------------------------------------------------------
0239                       ; Show lines in buffer unless on last line in file
0240                       ;------------------------------------------------------
0241 77E4 C820  54         mov   @fb.row,@parm1
     77E6 A306     
     77E8 A006     
0242 77EA 06A0  32         bl    @fb.row2line
     77EC 30C0     
0243 77EE 8820  50         c     @edb.lines,@outparm1
     77F0 A504     
     77F2 A018     
0244 77F4 1605  14         jne   pane.botline.show_lines_in_buffer
0245               
0246 77F6 06A0  32         bl    @putat
     77F8 2442     
0247 77FA 1D48                   byte pane.botrow,72
0248 77FC 38FC                   data txt.bottom
0249               
0250 77FE 1009  14         jmp   pane.botline.exit
>>>>>>> b9b40bb (WIP optimize build scripts)
0251                       ;------------------------------------------------------
0252                       ; Show lines in buffer
0253                       ;------------------------------------------------------
0254               pane.botline.show_lines_in_buffer:
<<<<<<< HEAD
0255 779E C820  46         mov   @edb.lines,@waux1
     77A0 A504     
     77A2 833C     
0256               
0257 77A4 06A0  32         bl    @putnum
     77A6 2A24     
0258 77A8 1748                   byte pane.botrow,72   ; YX
0259 77AA 833C                   data waux1,rambuf
     77AC A100     
0260 77AE 30                     byte 48
0261 77AF   20                   byte 32
=======
0255 7800 C820  46         mov   @edb.lines,@waux1
     7802 A504     
     7804 833C     
0256               
0257 7806 06A0  32         bl    @putnum
     7808 2A24     
0258 780A 1D48                   byte pane.botrow,72   ; YX
0259 780C 833C                   data waux1,rambuf
     780E A100     
0260 7810 30                     byte 48
0261 7811   20                   byte 32
>>>>>>> b9b40bb (WIP optimize build scripts)
0262                       ;------------------------------------------------------
0263                       ; Exit
0264                       ;------------------------------------------------------
0265               pane.botline.exit:
<<<<<<< HEAD
0266 77B0 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     77B2 832A     
0267 77B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0268 77B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0269 77B8 045B  20         b     *r11                  ; Return
=======
0266 7812 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7814 832A     
0267 7816 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0268 7818 C2F9  30         mov   *stack+,r11           ; Pop r11
0269 781A 045B  20         b     *r11                  ; Return
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0145                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
<<<<<<< HEAD
0024 77BA 0649  14         dect  stack
0025 77BC C64B  30         mov   r11,*stack            ; Save return address
0026 77BE 0649  14         dect  stack
0027 77C0 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 77C2 0649  14         dect  stack
0029 77C4 C660  42         mov   @wyx,*stack           ; Push cursor position
     77C6 832A     
=======
0024 781C 0649  14         dect  stack
0025 781E C64B  30         mov   r11,*stack            ; Save return address
0026 7820 0649  14         dect  stack
0027 7822 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7824 0649  14         dect  stack
0029 7826 C660  42         mov   @wyx,*stack           ; Push cursor position
     7828 832A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
<<<<<<< HEAD
0034 77C8 20A0  32         coc   @wbit10,config
     77CA 200C     
0035 77CC 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 77CE 06A0  32         bl    @putat
     77D0 2442     
0040 77D2 174E                   byte pane.botrow,78
0041 77D4 3BD8                   data txt.ws4
0042 77D6 1004  14         jmp   pane.vdpdump.cmdb.check
=======
0034 782A 20A0  32         coc   @wbit10,config
     782C 200C     
0035 782E 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 7830 06A0  32         bl    @putat
     7832 2442     
0040 7834 1D4E                   byte pane.botrow,78
0041 7836 3C2C                   data txt.ws4
0042 7838 1004  14         jmp   pane.vdpdump.cmdb.check
>>>>>>> b9b40bb (WIP optimize build scripts)
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
<<<<<<< HEAD
0047 77D8 06A0  32         bl    @putat
     77DA 2442     
0048 77DC 174E                   byte pane.botrow,78
0049 77DE 3BC6                   data txt.alpha.down
=======
0047 783A 06A0  32         bl    @putat
     783C 2442     
0048 783E 1D4E                   byte pane.botrow,78
0049 7840 3C1A                   data txt.alpha.down
>>>>>>> b9b40bb (WIP optimize build scripts)
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
<<<<<<< HEAD
0054 77E0 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     77E2 A702     
0055 77E4 1324  14         jeq   !                     ; No, skip CMDB pane
=======
0054 7842 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     7844 A702     
0055 7846 1324  14         jeq   !                     ; No, skip CMDB pane
>>>>>>> b9b40bb (WIP optimize build scripts)
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
<<<<<<< HEAD
0060 77E6 C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     77E8 A71A     
0061 77EA 1343  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 77EC 0284  22         ci    tmp0,tv.1timeonly
     77EE 00FE     
0066 77F0 1619  14         jne   pane.vdpdump.cmdb.draw.content
=======
0060 7848 C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     784A A71A     
0061 784C 1343  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 784E 0284  22         ci    tmp0,tv.1timeonly
     7850 00FE     
0066 7852 1619  14         jne   pane.vdpdump.cmdb.draw.content
>>>>>>> b9b40bb (WIP optimize build scripts)
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
<<<<<<< HEAD
0072 77F2 0649  14         dect  stack
0073 77F4 C660  46         mov   @parm1,*stack         ; Push @parm1
     77F6 A006     
0074 77F8 0649  14         dect  stack
0075 77FA C660  46         mov   @parm2,*stack         ; Push @parm2
     77FC A008     
0076 77FE 0649  14         dect  stack
0077 7800 C660  46         mov   @parm3,*stack         ; Push @parm3
     7802 A00A     
0078               
0079 7804 0720  34         seto  @parm1                ; Do not turn screen off
     7806 A006     
0080 7808 0720  34         seto  @parm2                ; Skip colorzing marked lines
     780A A008     
0081 780C 0720  34         seto  @parm3                ; Only colorize CMDB pane
     780E A00A     
0082               
0083 7810 06A0  32         bl    @pane.action.colorscheme.load
     7812 71FE     
=======
0072 7854 0649  14         dect  stack
0073 7856 C660  46         mov   @parm1,*stack         ; Push @parm1
     7858 A006     
0074 785A 0649  14         dect  stack
0075 785C C660  46         mov   @parm2,*stack         ; Push @parm2
     785E A008     
0076 7860 0649  14         dect  stack
0077 7862 C660  46         mov   @parm3,*stack         ; Push @parm3
     7864 A00A     
0078               
0079 7866 0720  34         seto  @parm1                ; Do not turn screen off
     7868 A006     
0080 786A 0720  34         seto  @parm2                ; Skip colorzing marked lines
     786C A008     
0081 786E 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7870 A00A     
0082               
0083 7872 06A0  32         bl    @pane.action.colorscheme.load
     7874 7264     
>>>>>>> b9b40bb (WIP optimize build scripts)
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
<<<<<<< HEAD
0091 7814 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7816 A00A     
0092 7818 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     781A A008     
0093 781C C839  50         mov   *stack+,@parm1        ; Pop @parm1
     781E A006     
0094               
0095 7820 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7822 A71A     
=======
0091 7876 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7878 A00A     
0092 787A C839  50         mov   *stack+,@parm2        ; Pop @parm2
     787C A008     
0093 787E C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7880 A006     
0094               
0095 7882 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7884 A71A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
<<<<<<< HEAD
0100 7824 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     7826 7A02     
0101 7828 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     782A A71A     
0102 782C 1022  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 782E C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7830 A318     
0107 7832 130E  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109 7834 C820  54         mov   @fb.scrrows,@parm1    ; Number of lines to dump
     7836 A31C     
     7838 A006     
0110               
0111               pane.vdpdump.dump:
0112 783A 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     783C 7A82     
=======
0100 7886 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     7888 7A5A     
0101 788A 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     788C A71A     
0102 788E 1022  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7890 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7892 A318     
0107 7894 130E  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109 7896 C820  54         mov   @fb.scrrows,@parm1    ; Number of lines to dump
     7898 A31C     
     789A A006     
0110               
0111               pane.vdpdump.dump:
0112 789C 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     789E 7AEA     
>>>>>>> b9b40bb (WIP optimize build scripts)
0113                                                   ; \ i  @parm1 = number of lines to dump
0114                                                   ; /
0115                       ;------------------------------------------------------
0116                       ; Color the lines in the framebuffer (TAT)
0117                       ;------------------------------------------------------
<<<<<<< HEAD
0118 783E C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7840 A312     
0119 7842 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0120               
0121 7844 06A0  32         bl    @fb.colorlines        ; Colorize lines M1/M2
     7846 7A78     
=======
0118 78A0 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     78A2 A312     
0119 78A4 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0120               
0121 78A6 06A0  32         bl    @fb.colorlines        ; Colorize lines M1/M2
     78A8 7AD8     
>>>>>>> b9b40bb (WIP optimize build scripts)
0122                       ;-------------------------------------------------------
0123                       ; Finished with frame buffer
0124                       ;-------------------------------------------------------
0125               pane.vdpdump.dumped:
<<<<<<< HEAD
0126 7848 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     784A A318     
0127 784C 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     784E A31A     
=======
0126 78AA 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     78AC A318     
0127 78AE 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     78B0 A31A     
>>>>>>> b9b40bb (WIP optimize build scripts)
0128                       ;-------------------------------------------------------
0129                       ; Refresh top and bottom line
0130                       ;-------------------------------------------------------
0131               pane.vdpdump.statlines:
<<<<<<< HEAD
0132 7850 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     7852 A31A     
0133 7854 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0134               
0135 7856 06A0  32         bl    @pane.topline         ; Draw top line
     7858 74B8     
0136 785A 06A0  32         bl    @pane.botline         ; Draw bottom line
     785C 762C     
0137 785E 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     7860 A31A     
0138                       ;------------------------------------------------------
0139                       ; Show ruler with tab positions
0140                       ;------------------------------------------------------
0141 7862 C120  34         mov   @tv.ruler.visible,tmp0
     7864 A210     
0142                                                   ; Should ruler be visible?
0143 7866 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0144               
0145 7868 06A0  32         bl    @cpym2v
     786A 2486     
0146 786C 0050                   data vdp.fb.toprow.sit
0147 786E A320                   data fb.ruler.sit
0148 7870 0050                   data 80               ; Show ruler
=======
0132 78B2 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     78B4 A31A     
0133 78B6 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0134               
0135 78B8 06A0  32         bl    @pane.topline         ; Draw top line
     78BA 751A     
0136 78BC 06A0  32         bl    @pane.botline         ; Draw bottom line
     78BE 768E     
0137 78C0 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     78C2 A31A     
0138                       ;------------------------------------------------------
0139                       ; Show ruler with tab positions
0140                       ;------------------------------------------------------
0141 78C4 C120  34         mov   @tv.ruler.visible,tmp0
     78C6 A210     
0142                                                   ; Should ruler be visible?
0143 78C8 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0144               
0145 78CA 06A0  32         bl    @cpym2v
     78CC 2486     
0146 78CE 0050                   data vdp.fb.toprow.sit
0147 78D0 A320                   data fb.ruler.sit
0148 78D2 0050                   data 80               ; Show ruler
>>>>>>> b9b40bb (WIP optimize build scripts)
0149                       ;------------------------------------------------------
0150                       ; Exit task
0151                       ;------------------------------------------------------
0152               pane.vdpdump.exit:
<<<<<<< HEAD
0153 7872 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7874 832A     
0154 7876 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0155 7878 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 787A 045B  20         b     *r11                  ; Return to caller
=======
0153 78D4 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     78D6 832A     
0154 78D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0155 78DA C2F9  30         mov   *stack+,r11           ; Pop r11
0156 78DC 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0146                       ;-----------------------------------------------------------------------
0147                       ; Stubs
0148                       ;-----------------------------------------------------------------------
0149                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
<<<<<<< HEAD
0009 787C 0649  14         dect  stack
0010 787E C64B  30         mov   r11,*stack            ; Save return address
0011 7880 0649  14         dect  stack
0012 7882 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 7884 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7886 2FCA     
0017 7888 6004                   data bank2.rom        ; | i  p0 = bank address
0018 788A 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 788C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 788E C120  34         mov   @outparm1,tmp0
     7890 A018     
0024 7892 1304  14         jeq   fm.loadfile.exit
0025               
0026 7894 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 7896 C2F9  30         mov   *stack+,r11           ; Pop r11
0028 7898 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     789A 7940     
=======
0009 78DE 0649  14         dect  stack
0010 78E0 C64B  30         mov   r11,*stack            ; Save return address
0011 78E2 0649  14         dect  stack
0012 78E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 78E6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78E8 2FCA     
0017 78EA 6004                   data bank2.rom        ; | i  p0 = bank address
0018 78EC 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 78EE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 78F0 C120  34         mov   @outparm1,tmp0
     78F2 A018     
0024 78F4 1304  14         jeq   fm.loadfile.exit
0025               
0026 78F6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 78F8 C2F9  30         mov   *stack+,r11           ; Pop r11
0028 78FA 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     78FC 79A2     
>>>>>>> b9b40bb (WIP optimize build scripts)
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
<<<<<<< HEAD
0033 789C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 789E C2F9  30         mov   *stack+,r11           ; Pop r11
0035 78A0 045B  20         b     *r11                  ; Return to caller
=======
0033 78FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 7900 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 7902 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
<<<<<<< HEAD
0043 78A2 0649  14         dect  stack
0044 78A4 C64B  30         mov   r11,*stack            ; Save return address
0045 78A6 0649  14         dect  stack
0046 78A8 C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 78AA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78AC 2FCA     
0051 78AE 6004                   data bank2.rom        ; | i  p0 = bank address
0052 78B0 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0053 78B2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
=======
0043 7904 0649  14         dect  stack
0044 7906 C64B  30         mov   r11,*stack            ; Save return address
0045 7908 0649  14         dect  stack
0046 790A C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 790C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     790E 2FCA     
0051 7910 6004                   data bank2.rom        ; | i  p0 = bank address
0052 7912 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0053 7914 6002                   data bankid           ; / i  p2 = Source ROM bank for return
>>>>>>> b9b40bb (WIP optimize build scripts)
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
<<<<<<< HEAD
0058 78B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 78B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 78B8 045B  20         b     *r11                  ; Return to caller
=======
0058 7916 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 7918 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 791A 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0061               
0062               
0063               **************************************************************
0064               * Stub for "fm.browse.fname.suffix"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.browse.fname.suffix:
<<<<<<< HEAD
0068 78BA 0649  14         dect  stack
0069 78BC C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 78BE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78C0 2FCA     
0074 78C2 6004                   data bank2.rom        ; | i  p0 = bank address
0075 78C4 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0076 78C6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 78C8 C2F9  30         mov   *stack+,r11           ; Pop r11
0081 78CA 045B  20         b     *r11                  ; Return to caller
=======
0068 791C 0649  14         dect  stack
0069 791E C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 7920 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7922 2FCA     
0074 7924 6004                   data bank2.rom        ; | i  p0 = bank address
0075 7926 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0076 7928 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 792A C2F9  30         mov   *stack+,r11           ; Pop r11
0081 792C 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
<<<<<<< HEAD
0089 78CC 0649  14         dect  stack
0090 78CE C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 78D0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78D2 2FCA     
0095 78D4 6004                   data bank2.rom        ; | i  p0 = bank address
0096 78D6 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0097 78D8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 78DA C2F9  30         mov   *stack+,r11           ; Pop r11
0102 78DC 045B  20         b     *r11                  ; Return to caller
=======
0089 792E 0649  14         dect  stack
0090 7930 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 7932 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7934 2FCA     
0095 7936 6004                   data bank2.rom        ; | i  p0 = bank address
0096 7938 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0097 793A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 793C C2F9  30         mov   *stack+,r11           ; Pop r11
0102 793E 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
<<<<<<< HEAD
0110 78DE 0649  14         dect  stack
0111 78E0 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 78E2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78E4 2FCA     
0116 78E6 6004                   data bank2.rom        ; | i  p0 = bank address
0117 78E8 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0118 78EA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 78EC C2F9  30         mov   *stack+,r11           ; Pop r11
0123 78EE 045B  20         b     *r11                  ; Return to caller
=======
0110 7940 0649  14         dect  stack
0111 7942 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 7944 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7946 2FCA     
0116 7948 6004                   data bank2.rom        ; | i  p0 = bank address
0117 794A 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0118 794C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 794E C2F9  30         mov   *stack+,r11           ; Pop r11
0123 7950 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0124               
0125               
0126               ***************************************************************
0127               * Stub for dialog "Help"
0128               * bank3 vec.1
0129               ********|*****|*********************|**************************
0130               dialog.help.next:
<<<<<<< HEAD
0131 78F0 8820  50         c     @w$0008,@cmdb.dialog.var
     78F2 2008     
     78F4 A71E     
0132 78F6 1304  14         jeq   !
0133 78F8 A820  54         a     @w$0008,@cmdb.dialog.var
     78FA 2008     
     78FC A71E     
0134 78FE 1002  14         jmp   dialog.help
0135 7900 04E0  34 !       clr   @cmdb.dialog.var
     7902 A71E     
0136               dialog.help:
0137 7904 C820  54         mov   @dialog.help.vector,@trmpvector
     7906 790C     
     7908 A034     
0138 790A 105E  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 790C 7FC0             data  vec.1
=======
0131 7952 8820  50         c     @w$0008,@cmdb.dialog.var
     7954 2008     
     7956 A71E     
0132 7958 1304  14         jeq   !
0133 795A A820  54         a     @w$0008,@cmdb.dialog.var
     795C 2008     
     795E A71E     
0134 7960 1002  14         jmp   dialog.help
0135 7962 04E0  34 !       clr   @cmdb.dialog.var
     7964 A71E     
0136               dialog.help:
0137 7966 C820  54         mov   @dialog.help.vector,@trmpvector
     7968 796E     
     796A A034     
0138 796C 1059  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 796E 7FC0             data  vec.1
>>>>>>> b9b40bb (WIP optimize build scripts)
0141               
0142               
0143               ***************************************************************
0144               * Stub for dialog "Load file"
0145               * bank3 vec.2
0146               ********|*****|*********************|**************************
0147               dialog.load:
<<<<<<< HEAD
0148 790E C820  54         mov   @dialog.load.vector,@trmpvector
     7910 7916     
     7912 A034     
0149 7914 1059  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 7916 7FC2             data  vec.2
=======
0148 7970 C820  54         mov   @dialog.load.vector,@trmpvector
     7972 7978     
     7974 A034     
0149 7976 1054  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 7978 7FC2             data  vec.2
>>>>>>> b9b40bb (WIP optimize build scripts)
0152               
0153               
0154               ***************************************************************
0155               * Stub for dialog "Save file"
0156               * bank3 vec.3
0157               ********|*****|*********************|**************************
0158               dialog.save:
<<<<<<< HEAD
0159 7918 C820  54         mov   @dialog.save.vector,@trmpvector
     791A 7920     
     791C A034     
0160 791E 1054  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 7920 7FC4             data  vec.3
=======
0159 797A C820  54         mov   @dialog.save.vector,@trmpvector
     797C 7982     
     797E A034     
0160 7980 104F  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 7982 7FC4             data  vec.3
>>>>>>> b9b40bb (WIP optimize build scripts)
0163               
0164               
0165               ***************************************************************
0166               * Stub for dialog "Insert file at line"
0167               * bank3 vec.4
0168               ********|*****|*********************|**************************
0169               dialog.insert:
<<<<<<< HEAD
0170 7922 C820  54         mov   @dialog.insert.vector,@trmpvector
     7924 792A     
     7926 A034     
0171 7928 104F  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 792A 7FC6             data  vec.4
=======
0170 7984 C820  54         mov   @dialog.insert.vector,@trmpvector
     7986 798C     
     7988 A034     
0171 798A 104A  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 798C 7FC6             data  vec.4
>>>>>>> b9b40bb (WIP optimize build scripts)
0174               
0175               
0176               ***************************************************************
0177               * Stub for dialog "Print file"
0178               * bank3 vec.5
0179               ********|*****|*********************|**************************
0180               dialog.print:
<<<<<<< HEAD
0181 792C C820  54         mov   @dialog.print.vector,@trmpvector
     792E 7934     
     7930 A034     
0182 7932 104A  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 7934 7FC8             data  vec.5
=======
0181 798E C820  54         mov   @dialog.print.vector,@trmpvector
     7990 7996     
     7992 A034     
0182 7994 1045  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 7996 7FC8             data  vec.5
>>>>>>> b9b40bb (WIP optimize build scripts)
0185               
0186               
0187               ***************************************************************
0188               * Stub for dialog "File"
0189               * bank3 vec.6
0190               ********|*****|*********************|**************************
0191               dialog.file:
<<<<<<< HEAD
0192 7936 C820  54         mov   @dialog.file.vector,@trmpvector
     7938 793E     
     793A A034     
0193 793C 1045  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 793E 7FCA             data  vec.6
=======
0192 7998 C820  54         mov   @dialog.file.vector,@trmpvector
     799A 79A0     
     799C A034     
0193 799E 1040  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 79A0 7FCA             data  vec.6
>>>>>>> b9b40bb (WIP optimize build scripts)
0196               
0197               
0198               ***************************************************************
0199               * Stub for dialog "Unsaved Changes"
0200               * bank3 vec.7
0201               ********|*****|*********************|**************************
0202               dialog.unsaved:
<<<<<<< HEAD
0203 7940 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     7942 A728     
0204 7944 C820  54         mov   @dialog.unsaved.vector,@trmpvector
     7946 794C     
     7948 A034     
0205 794A 103E  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 794C 7FCC             data  vec.7
=======
0203 79A2 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     79A4 A728     
0204 79A6 C820  54         mov   @dialog.unsaved.vector,@trmpvector
     79A8 79AE     
     79AA A034     
0205 79AC 1039  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 79AE 7FCC             data  vec.7
>>>>>>> b9b40bb (WIP optimize build scripts)
0208               
0209               
0210               ***************************************************************
0211               * Stub for dialog "Copy clipboard to line ..."
0212               * bank3 vec.8
0213               ********|*****|*********************|**************************
0214               dialog.clipboard:
<<<<<<< HEAD
0215 794E C820  54         mov   @dialog.clipboard.vector,@trmpvector
     7950 7956     
     7952 A034     
0216 7954 1039  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 7956 7FCE             data  vec.8
=======
0215 79B0 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     79B2 79B8     
     79B4 A034     
0216 79B6 1034  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 79B8 7FCE             data  vec.8
>>>>>>> b9b40bb (WIP optimize build scripts)
0219               
0220               
0221               ***************************************************************
0222               * Stub for dialog "Configure clipboard device"
0223               * bank3 vec.9
0224               ********|*****|*********************|**************************
0225               dialog.clipdev:
<<<<<<< HEAD
0226 7958 C820  54         mov   @dialog.clipdev.vector,@trmpvector
     795A 7960     
     795C A034     
0227 795E 1034  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 7960 7FD0             data  vec.9
=======
0226 79BA C820  54         mov   @dialog.clipdev.vector,@trmpvector
     79BC 79C2     
     79BE A034     
0227 79C0 102F  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 79C2 7FD0             data  vec.9
>>>>>>> b9b40bb (WIP optimize build scripts)
0230               
0231               
0232               ***************************************************************
0233               * Stub for dialog "Configure"
0234               * bank3 vec.10
0235               ********|*****|*********************|**************************
0236               dialog.config:
<<<<<<< HEAD
0237 7962 C820  54         mov   @dialog.config.vector,@trmpvector
     7964 796A     
     7966 A034     
0238 7968 102F  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 796A 7FD2             data  vec.10
=======
0237 79C4 C820  54         mov   @dialog.config.vector,@trmpvector
     79C6 79CC     
     79C8 A034     
0238 79CA 102A  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 79CC 7FD2             data  vec.10
>>>>>>> b9b40bb (WIP optimize build scripts)
0241               
0242               
0243               ***************************************************************
0244               * Stub for dialog "Append file"
0245               * bank3 vec.11
0246               ********|*****|*********************|**************************
0247               dialog.append:
<<<<<<< HEAD
0248 796C C820  54         mov   @dialog.append.vector,@trmpvector
     796E 7974     
     7970 A034     
0249 7972 102A  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 7974 7FD4             data  vec.11
=======
0248 79CE C820  54         mov   @dialog.append.vector,@trmpvector
     79D0 79D6     
     79D2 A034     
0249 79D4 1025  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 79D6 7FD4             data  vec.11
>>>>>>> b9b40bb (WIP optimize build scripts)
0252               
0253               
0254               ***************************************************************
0255               * Stub for dialog "Cartridge"
0256               * bank3 vec.12
0257               ********|*****|*********************|**************************
0258               dialog.cartridge:
<<<<<<< HEAD
0259 7976 C820  54         mov   @dialog.cartridge.vector,@trmpvector
     7978 797E     
     797A A034     
0260 797C 1025  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 797E 7FD6             data  vec.12
=======
0259 79D8 C820  54         mov   @dialog.cartridge.vector,@trmpvector
     79DA 79E0     
     79DC A034     
0260 79DE 1020  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 79E0 7FD6             data  vec.12
>>>>>>> b9b40bb (WIP optimize build scripts)
0263               
0264               
0265               ***************************************************************
0266               * Stub for dialog "Basic"
0267               * bank3 vec.13
0268               ********|*****|*********************|**************************
0269               dialog.basic:
<<<<<<< HEAD
0270 7980 C820  54         mov   @dialog.basic.vector,@trmpvector
     7982 7988     
     7984 A034     
0271 7986 1020  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 7988 7FD8             data  vec.13
=======
0270 79E2 C820  54         mov   @dialog.basic.vector,@trmpvector
     79E4 79EA     
     79E6 A034     
0271 79E8 101B  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 79EA 7FD8             data  vec.13
>>>>>>> b9b40bb (WIP optimize build scripts)
0274               
0275               
0276               ***************************************************************
0277               * Stub for dialog "Shortcuts"
0278               * bank3 vec.14
0279               ********|*****|*********************|**************************
0280               dialog.shortcuts:
<<<<<<< HEAD
0281 798A C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     798C 7992     
     798E A034     
0282 7990 101B  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 7992 7FDA             data  vec.14
=======
0281 79EC C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     79EE 79F4     
     79F0 A034     
0282 79F2 1016  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 79F4 7FDA             data  vec.14
>>>>>>> b9b40bb (WIP optimize build scripts)
0285               
0286               
0287               ***************************************************************
0288               * Stub for dialog "Configure editor"
0289               * bank3 vec.15
0290               ********|*****|*********************|**************************
0291               dialog.editor:
<<<<<<< HEAD
0292 7994 C820  54         mov   @dialog.editor.vector,@trmpvector
     7996 799C     
     7998 A034     
0293 799A 1016  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.editor.vector:
0295 799C 7FDC             data  vec.15
=======
0292 79F6 C820  54         mov   @dialog.editor.vector,@trmpvector
     79F8 79FE     
     79FA A034     
0293 79FC 1011  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.editor.vector:
0295 79FE 7FDC             data  vec.15
>>>>>>> b9b40bb (WIP optimize build scripts)
0296               
0297               
0298               ***************************************************************
0299               * Stub for dialog "Go to line"
0300               * bank3 vec.16
0301               ********|*****|*********************|**************************
0302               dialog.goto:
<<<<<<< HEAD
0303 799E C820  54         mov   @dialog.goto.vector,@trmpvector
     79A0 79A6     
     79A2 A034     
0304 79A4 1011  14         jmp   _trampoline.bank3     ; Show dialog
0305               dialog.goto.vector:
0306 79A6 7FDE             data  vec.16
=======
0303 7A00 C820  54         mov   @dialog.goto.vector,@trmpvector
     7A02 7A08     
     7A04 A034     
0304 7A06 100C  14         jmp   _trampoline.bank3     ; Show dialog
0305               dialog.goto.vector:
0306 7A08 7FDE             data  vec.16
>>>>>>> b9b40bb (WIP optimize build scripts)
0307               
0308               
0309               ***************************************************************
0310               * Stub for dialog "Configure font"
0311               * bank3 vec.17
0312               ********|*****|*********************|**************************
<<<<<<< HEAD
0313               dialog.font:
0314 79A8 C820  54         mov   @dialog.font.vector,@trmpvector
     79AA 79B0     
     79AC A034     
0315 79AE 100C  14         jmp   _trampoline.bank3     ; Show dialog
0316               dialog.font.vector:
0317 79B0 7FE0             data  vec.17
0318               
0319               
0320               ***************************************************************
0321               * Stub for dialog "Main Menu"
0322               * bank3 vec.30
0323               ********|*****|*********************|**************************
0324               dialog.menu:
0325                       ;------------------------------------------------------
0326                       ; Check if block mode is active
0327                       ;------------------------------------------------------
0328 79B2 C120  34         mov   @edb.block.m2,tmp0    ; \
     79B4 A510     
0329 79B6 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0330                                                   ; /
0331 79B8 1302  14         jeq   !                     ; Block mode inactive, show dialog
0332                       ;------------------------------------------------------
0333                       ; Special treatment for block mode
0334                       ;------------------------------------------------------
0335 79BA 0460  28         b     @edkey.action.block.reset
     79BC 69CC     
0336                                                   ; Reset block mode
0337                       ;------------------------------------------------------
0338                       ; Show dialog
0339                       ;------------------------------------------------------
0340 79BE C820  54 !       mov   @dialog.menu.vector,@trmpvector
     79C0 79C6     
     79C2 A034     
0341 79C4 1001  14         jmp   _trampoline.bank3     ; Show dialog
0342               dialog.menu.vector:
0343 79C6 7FFA             data  vec.30
0344               
0345               
0346               
0347               ***************************************************************
0348               * Trampoline 1 (bank 3, dialog)
0349               ********|*****|*********************|**************************
0350               _trampoline.bank3:
0351 79C8 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     79CA 7434     
0352                       ;------------------------------------------------------
0353                       ; Call routine in specified bank
0354                       ;------------------------------------------------------
0355 79CC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79CE 2FCA     
0356 79D0 6006                   data bank3.rom        ; | i  p0 = bank address
0357 79D2 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0358                                                   ; |         (deref @trmpvector)
0359 79D4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363 79D6 0460  28         b     @edkey.action.cmdb.show
     79D8 6B9A     
0364                                                   ; Show dialog in CMDB pane
=======
0313               dialog.menu:
0314                       ;------------------------------------------------------
0315                       ; Check if block mode is active
0316                       ;------------------------------------------------------
0317 7A0A C120  34         mov   @edb.block.m2,tmp0    ; \
     7A0C A510     
0318 7A0E 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0319                                                   ; /
0320 7A10 1302  14         jeq   !                     ; Block mode inactive, show dialog
0321                       ;------------------------------------------------------
0322                       ; Special treatment for block mode
0323                       ;------------------------------------------------------
0324 7A12 0460  28         b     @edkey.action.block.reset
     7A14 6902     
0325                                                   ; Reset block mode
0326                       ;------------------------------------------------------
0327                       ; Show dialog
0328                       ;------------------------------------------------------
0329 7A16 C820  54 !       mov   @dialog.menu.vector,@trmpvector
     7A18 7A1E     
     7A1A A034     
0330 7A1C 1001  14         jmp   _trampoline.bank3     ; Show dialog
0331               dialog.menu.vector:
0332 7A1E 7FFA             data  vec.30
0333               
0334               
0335               
0336               ***************************************************************
0337               * Trampoline 1 (bank 3, dialog)
0338               ********|*****|*********************|**************************
0339               _trampoline.bank3:
0340 7A20 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     7A22 7492     
0341                       ;------------------------------------------------------
0342                       ; Call routine in specified bank
0343                       ;------------------------------------------------------
0344 7A24 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A26 2FCA     
0345 7A28 6006                   data bank3.rom        ; | i  p0 = bank address
0346 7A2A FFFF                   data >ffff            ; | i  p1 = Vector with target address
0347                                                   ; |         (deref @trmpvector)
0348 7A2C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0349                       ;------------------------------------------------------
0350                       ; Exit
0351                       ;------------------------------------------------------
0352 7A2E 0460  28         b     @edkey.action.cmdb.show
     7A30 6AC4     
0353                                                   ; Show dialog in CMDB pane
0354               
0355               
0356               ***************************************************************
0357               * Stub for "error.display"
0358               * bank3 vec.18
0359               ********|*****|*********************|**************************
0360               error.display:
0361 7A32 C820  54         mov   @error.display.vector,@trmpvector
     7A34 7A3A     
     7A36 A034     
0362 7A38 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0363               error.display.vector:
0364 7A3A 7FE2             data  vec.18
>>>>>>> b9b40bb (WIP optimize build scripts)
0365               
0366               
0367               ***************************************************************
0368               * Stub for "error.display"
0369               * bank3 vec.18
0370               ********|*****|*********************|**************************
<<<<<<< HEAD
0371               error.display:
0372 79DA C820  54         mov   @error.display.vector,@trmpvector
     79DC 79E2     
     79DE A034     
0373 79E0 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0374               error.display.vector:
0375 79E2 7FE2             data  vec.18
=======
0371               pane.show_hintx:
0372 7A3C C820  54         mov   @pane.show_hintx.vector,@trmpvector
     7A3E 7A44     
     7A40 A034     
0373 7A42 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0374               pane.show_hintx.vector:
0375 7A44 7FE4             data  vec.19
>>>>>>> b9b40bb (WIP optimize build scripts)
0376               
0377               
0378               ***************************************************************
0379               * Stub for "pane.show_hintx"
0380               * bank3 vec.19
0381               ********|*****|*********************|**************************
<<<<<<< HEAD
0382               pane.show_hintx:
0383 79E4 C820  54         mov   @pane.show_hintx.vector,@trmpvector
     79E6 79EC     
     79E8 A034     
0384 79EA 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0385               pane.show_hintx.vector:
0386 79EC 7FE4             data  vec.19
=======
0382               pane.cmdb.show:
0383 7A46 C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     7A48 7A4E     
     7A4A A034     
0384 7A4C 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0385               pane.cmdb.show.vector:
0386 7A4E 7FE6             data  vec.20
>>>>>>> b9b40bb (WIP optimize build scripts)
0387               
0388               
0389               ***************************************************************
0390               * Stub for "pane.cmdb.show"
0391               * bank3 vec.20
0392               ********|*****|*********************|**************************
<<<<<<< HEAD
0393               pane.cmdb.show:
0394 79EE C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     79F0 79F6     
     79F2 A034     
0395 79F4 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0396               pane.cmdb.show.vector:
0397 79F6 7FE6             data  vec.20
=======
0393               pane.cmdb.hide:
0394 7A50 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7A52 7A58     
     7A54 A034     
0395 7A56 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0396               pane.cmdb.hide.vector:
0397 7A58 7FE8             data  vec.21
>>>>>>> b9b40bb (WIP optimize build scripts)
0398               
0399               
0400               ***************************************************************
0401               * Stub for "pane.cmdb.hide"
0402               * bank3 vec.21
0403               ********|*****|*********************|**************************
<<<<<<< HEAD
0404               pane.cmdb.hide:
0405 79F8 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     79FA 7A00     
     79FC A034     
0406 79FE 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0407               pane.cmdb.hide.vector:
0408 7A00 7FE8             data  vec.21
=======
0404               pane.cmdb.draw:
0405 7A5A C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7A5C 7A62     
     7A5E A034     
0406 7A60 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0407               pane.cmdb.draw.vector:
0408 7A62 7FEA             data  vec.22
>>>>>>> b9b40bb (WIP optimize build scripts)
0409               
0410               
0411               ***************************************************************
0412               * Stub for "pane.cmdb.draw"
0413               * bank3 vec.22
0414               ********|*****|*********************|**************************
<<<<<<< HEAD
0415               pane.cmdb.draw:
0416 7A02 C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7A04 7A0A     
     7A06 A034     
0417 7A08 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0418               pane.cmdb.draw.vector:
0419 7A0A 7FEA             data  vec.22
=======
0415               cmdb.refresh:
0416 7A64 C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7A66 7A6C     
     7A68 A034     
0417 7A6A 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0418               cmdb.refresh.vector:
0419 7A6C 7FEE             data  vec.24
>>>>>>> b9b40bb (WIP optimize build scripts)
0420               
0421               
0422               ***************************************************************
0423               * Stub for "cmdb.refresh"
0424               * bank3 vec.24
0425               ********|*****|*********************|**************************
<<<<<<< HEAD
0426               cmdb.refresh:
0427 7A0C C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7A0E 7A14     
     7A10 A034     
0428 7A12 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0429               cmdb.refresh.vector:
0430 7A14 7FEE             data  vec.24
=======
0426               cmdb.cmd.clear:
0427 7A6E C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7A70 7A76     
     7A72 A034     
0428 7A74 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0429               cmdb.cmd.clear.vector:
0430 7A76 7FF0             data  vec.25
>>>>>>> b9b40bb (WIP optimize build scripts)
0431               
0432               
0433               ***************************************************************
0434               * Stub for "cmdb.cmd.clear"
0435               * bank3 vec.25
0436               ********|*****|*********************|**************************
<<<<<<< HEAD
0437               cmdb.cmd.clear:
0438 7A16 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7A18 7A1E     
     7A1A A034     
0439 7A1C 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0440               cmdb.cmd.clear.vector:
0441 7A1E 7FF0             data  vec.25
=======
0437               cmdb.cmd.getlength:
0438 7A78 C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7A7A 7A80     
     7A7C A034     
0439 7A7E 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0440               cmdb.cmd.getlength.vector:
0441 7A80 7FF2             data  vec.26
>>>>>>> b9b40bb (WIP optimize build scripts)
0442               
0443               
0444               ***************************************************************
0445               * Stub for "cmdb.cmdb.getlength"
0446               * bank3 vec.26
0447               ********|*****|*********************|**************************
<<<<<<< HEAD
0448               cmdb.cmd.getlength:
0449 7A20 C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7A22 7A28     
     7A24 A034     
0450 7A26 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0451               cmdb.cmd.getlength.vector:
0452 7A28 7FF2             data  vec.26
=======
0448               cmdb.cmd.preset:
0449 7A82 C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7A84 7A8A     
     7A86 A034     
0450 7A88 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0451               cmdb.cmd.preset.vector:
0452 7A8A 7FF4             data  vec.27
>>>>>>> b9b40bb (WIP optimize build scripts)
0453               
0454               
0455               ***************************************************************
0456               * Stub for "cmdb.cmdb.preset"
0457               * bank3 vec.27
0458               ********|*****|*********************|**************************
<<<<<<< HEAD
0459               cmdb.cmd.preset:
0460 7A2A C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7A2C 7A32     
     7A2E A034     
0461 7A30 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0462               cmdb.cmd.preset.vector:
0463 7A32 7FF4             data  vec.27
0464               
0465               
0466               ***************************************************************
0467               * Stub for "cmdb.cmdb.set"
0468               * bank3 vec.28
0469               ********|*****|*********************|**************************
0470               cmdb.cmd.set:
0471 7A34 C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     7A36 7A3C     
     7A38 A034     
0472 7A3A 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0473               cmdb.cmd.set.vector:
0474 7A3C 7FF6             data  vec.28
0475               
0476               
0477               
0478               ***************************************************************
0479               * Stub for "dialog.hearts.tat"
0480               * bank3 vec.29
0481               ********|*****|*********************|**************************
0482               dialog.hearts.tat:
0483 7A3E C820  54         mov   @dialog.hearts.tat.vector,@trmpvector
     7A40 7A46     
     7A42 A034     
0484 7A44 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0485               dialog.hearts.tat.vector:
0486 7A46 7FF8             data  vec.29
0487               
=======
0459               cmdb.cmd.set:
0460 7A8C C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     7A8E 7A94     
     7A90 A034     
0461 7A92 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0462               cmdb.cmd.set.vector:
0463 7A94 7FF6             data  vec.28
0464               
0465               
0466               
0467               ***************************************************************
0468               * Stub for "tibasic.hearts.tat"
0469               * bank3 vec.29
0470               ********|*****|*********************|**************************
0471               tibasic.hearts.tat:
0472 7A96 C820  54         mov   @tibasic.hearts.tat.vector,@trmpvector
     7A98 7A9E     
     7A9A A034     
0473 7A9C 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0474               tibasic.hearts.tat.vector:
0475 7A9E 7FF8             data  vec.29
0476               
0477               
0478               
0479               **************************************************************
0480               * Stub for "tibasic.am.toggle"
0481               * bank3 vec.31
0482               ********|*****|*********************|**************************
0483               tibasic.am.toggle:
0484 7AA0 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     7AA2 7AA8     
     7AA4 A034     
0485 7AA6 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0486               tibasic.am.toggle.vector:
0487 7AA8 7FFC             data  vec.31
>>>>>>> b9b40bb (WIP optimize build scripts)
0488               
0489               
0490               **************************************************************
0491               * Stub for "tibasic.am.toggle"
0492               * bank3 vec.31
0493               ********|*****|*********************|**************************
<<<<<<< HEAD
0494               tibasic.am.toggle:
0495 7A48 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     7A4A 7A50     
     7A4C A034     
0496 7A4E 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0497               tibasic.am.toggle.vector:
0498 7A50 7FFC             data  vec.31
0499               
0500               
0501               **************************************************************
0502               * Stub for "fm.fastmode"
0503               * bank3 vec.32
0504               ********|*****|*********************|**************************
0505               fm.fastmode:
0506 7A52 C820  54         mov   @fm.fastmode.vector,@trmpvector
     7A54 7A5A     
     7A56 A034     
0507 7A58 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0508               fm.fastmode.vector:
0509 7A5A 7FFE             data  vec.32
0510               
0511               
0512               ***************************************************************
0513               * Trampoline bank 3 with return
0514               ********|*****|*********************|**************************
0515               _trampoline.bank3.ret:
0516 7A5C 0649  14         dect  stack
0517 7A5E C64B  30         mov   r11,*stack            ; Save return address
0518                       ;------------------------------------------------------
0519                       ; Call routine in specified bank
0520                       ;------------------------------------------------------
0521 7A60 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A62 2FCA     
0522 7A64 6006                   data bank3.rom        ; | i  p0 = bank address
0523 7A66 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0524                                                   ; |         (deref @trmpvector)
0525 7A68 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0526                       ;------------------------------------------------------
0527                       ; Exit
0528                       ;------------------------------------------------------
0529 7A6A C2F9  30         mov   *stack+,r11           ; Pop r11
0530 7A6C 045B  20         b     *r11                  ; Return to caller
0531               
0532               
0533               **************************************************************
0534               * Stub for "fb.ruler.init"
0535               * bank4 vec.2
0536               ********|*****|*********************|**************************
0537               fb.ruler.init:
0538 7A6E C820  54         mov   @fb.ruler.init.vector,@trmpvector
     7A70 7A76     
     7A72 A034     
0539 7A74 103D  14         jmp   _trampoline.bank4.ret ; Longjump
0540               fb.ruler.init.vector:
0541 7A76 7FC2             data  vec.2
0542               
0543               
0544               **************************************************************
0545               * Stub for "fb.colorlines"
0546               * bank4 vec.3
0547               ********|*****|*********************|**************************
0548               fb.colorlines:
0549 7A78 C820  54         mov   @fb.colorlines.vector,@trmpvector
     7A7A 7A80     
     7A7C A034     
0550 7A7E 1038  14         jmp   _trampoline.bank4.ret ; Longjump
0551               fb.colorlines.vector:
0552 7A80 7FC4             data  vec.3
0553               
0554               
0555               **************************************************************
0556               * Stub for "fb.vdpdump"
0557               * bank4 vec.4
0558               ********|*****|*********************|**************************
0559               fb.vdpdump:
0560 7A82 C820  54         mov   @fb.vdpdump.vector,@trmpvector
     7A84 7A8A     
     7A86 A034     
0561 7A88 1033  14         jmp   _trampoline.bank4.ret ; Longjump
0562               fb.vdpdump.vector:
0563 7A8A 7FC6             data  vec.4
=======
0494               fm.fastmode:
0495 7AAA C820  54         mov   @fm.fastmode.vector,@trmpvector
     7AAC 7AB2     
     7AAE A034     
0496 7AB0 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0497               fm.fastmode.vector:
0498 7AB2 7FFE             data  vec.32
0499               
0500               
0501               
0502               
0503               ***************************************************************
0504               * Trampoline bank 3 with return
0505               ********|*****|*********************|**************************
0506               _trampoline.bank3.ret:
0507 7AB4 0649  14         dect  stack
0508 7AB6 C64B  30         mov   r11,*stack            ; Save return address
0509                       ;------------------------------------------------------
0510                       ; Call routine in specified bank
0511                       ;------------------------------------------------------
0512 7AB8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7ABA 2FCA     
0513 7ABC 6006                   data bank3.rom        ; | i  p0 = bank address
0514 7ABE FFFF                   data >ffff            ; | i  p1 = Vector with target address
0515                                                   ; |         (deref @trmpvector)
0516 7AC0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0517                       ;------------------------------------------------------
0518                       ; Exit
0519                       ;------------------------------------------------------
0520 7AC2 C2F9  30         mov   *stack+,r11           ; Pop r11
0521 7AC4 045B  20         b     *r11                  ; Return to caller
0522               
0523               
0524               ***************************************************************
0525               * Stub for "fb.ruler.init"
0526               * bank4 vec.2
0527               ********|*****|*********************|**************************
0528               fb.ruler.init:
0529 7AC6 0649  14         dect  stack
0530 7AC8 C64B  30         mov   r11,*stack            ; Save return address
0531                       ;------------------------------------------------------
0532                       ; Setup ruler in memory
0533                       ;------------------------------------------------------
0534 7ACA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7ACC 2FCA     
0535 7ACE 6008                   data bank4.rom        ; | i  p0 = bank address
0536 7AD0 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0537 7AD2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0538                       ;------------------------------------------------------
0539                       ; Exit
0540                       ;------------------------------------------------------
0541 7AD4 C2F9  30         mov   *stack+,r11           ; Pop r11
0542 7AD6 045B  20         b     *r11                  ; Return to caller
0543               
0544               
0545               ***************************************************************
0546               * Stub for "fb.colorlines"
0547               * bank4 vec.3
0548               ********|*****|*********************|**************************
0549               fb.colorlines:
0550 7AD8 0649  14         dect  stack
0551 7ADA C64B  30         mov   r11,*stack            ; Save return address
0552                       ;------------------------------------------------------
0553                       ; Colorize frame buffer content
0554                       ;------------------------------------------------------
0555 7ADC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7ADE 2FCA     
0556 7AE0 6008                   data bank4.rom        ; | i  p0 = bank address
0557 7AE2 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0558 7AE4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0559                       ;------------------------------------------------------
0560                       ; Exit
0561                       ;------------------------------------------------------
0562 7AE6 C2F9  30         mov   *stack+,r11           ; Pop r11
0563 7AE8 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0564               
0565               
0566               **************************************************************
0567               * Stub for "fb.hscroll"
0568               * bank4 vec.6
0569               ********|*****|*********************|**************************
<<<<<<< HEAD
0570               fb.hscroll:
0571 7A8C C820  54         mov   @fb.hscroll.vector,@trmpvector
     7A8E 7A94     
     7A90 A034     
0572 7A92 102E  14         jmp   _trampoline.bank4.ret ; Longjump
0573               fb.hscroll.vector:
0574 7A94 7FCA             data  vec.6
0575               
0576               
0577               **************************************************************
0578               * Stub for "fb.restore"
0579               * bank4 vec.7
0580               ********|*****|*********************|**************************
0581               fb.restore:
0582 7A96 C820  54         mov   @fb.restore.vector,@trmpvector
     7A98 7A9E     
     7A9A A034     
0583 7A9C 1029  14         jmp   _trampoline.bank4.ret ; Longjump
0584               fb.restore.vector:
0585 7A9E 7FCC             data  vec.7
0586               
0587               
0588               **************************************************************
0589               * Stub for "fb.refresh"
0590               * bank4 vec.8
0591               ********|*****|*********************|**************************
0592               fb.refresh:
0593 7AA0 C820  54         mov   @fb.refresh.vector,@trmpvector
     7AA2 7AA8     
     7AA4 A034     
0594 7AA6 1024  14         jmp   _trampoline.bank4.ret ; Longjump
0595               fb.refresh.vector:
0596 7AA8 7FCE             data  vec.8
0597               
0598               
0599               **************************************************************
0600               * Stub for "fb.get.nonblank"
0601               * bank4 vec.9
0602               ********|*****|*********************|**************************
0603               fb.get.nonblank:
0604 7AAA C820  54         mov   @fb.get.nonblank.vector,@trmpvector
     7AAC 7AB2     
     7AAE A034     
0605 7AB0 101F  14         jmp   _trampoline.bank4.ret ; Longjump
0606               fb.get.nonblank.vector:
0607 7AB2 7FD0             data  vec.9
0608               
0609               
0610               **************************************************************
0611               * Stub for "fb.tab.prev"
0612               * bank4 vec.10
0613               ********|*****|*********************|**************************
0614               fb.tab.prev:
0615 7AB4 C820  54         mov   @fb.tab.prev.vector,@trmpvector
     7AB6 7ABC     
     7AB8 A034     
0616 7ABA 101A  14         jmp   _trampoline.bank4.ret ; Longjump
0617               fb.tab.prev.vector:
0618 7ABC 7FD2             data  vec.10
0619               
0620               
0621               **************************************************************
0622               * Stub for "fb.tab.next"
0623               * bank4 vec.11
0624               ********|*****|*********************|**************************
0625               fb.tab.next:
0626 7ABE C820  54         mov   @fb.tab.next.vector,@trmpvector
     7AC0 7AC6     
     7AC2 A034     
0627 7AC4 1015  14         jmp   _trampoline.bank4.ret ; Longjump
0628               fb.tab.next.vector:
0629 7AC6 7FD4             data  vec.11
0630               
0631               
0632               **************************************************************
0633               * Stub for "fb.cursor.up"
0634               * bank4 vec.12
0635               ********|*****|*********************|**************************
0636               fb.cursor.up:
0637 7AC8 C820  54         mov   @fb.cursor.up.vector,@trmpvector
     7ACA 7AD0     
     7ACC A034     
0638 7ACE 1010  14         jmp   _trampoline.bank4.ret ; Longjump
0639               fb.cursor.up.vector:
0640 7AD0 7FD6             data  vec.12
0641               
0642               
0643               **************************************************************
0644               * Stub for "fb.cursor.down"
0645               * bank4 vec.13
0646               ********|*****|*********************|**************************
0647               fb.cursor.down:
0648 7AD2 C820  54         mov   @fb.cursor.down.vector,@trmpvector
     7AD4 7ADA     
     7AD6 A034     
0649 7AD8 100B  14         jmp   _trampoline.bank4.ret ; Longjump
0650               fb.cursor.down.vector:
0651 7ADA 7FD8             data  vec.13
0652               
0653               
0654               **************************************************************
0655               * Stub for "fb.cursor.home"
0656               * bank4 vec.14
0657               ********|*****|*********************|**************************
0658               fb.cursor.home:
0659 7ADC C820  54         mov   @fb.cursor.home.vector,@trmpvector
     7ADE 7AE4     
     7AE0 A034     
0660 7AE2 1006  14         jmp   _trampoline.bank4.ret ; Longjump
0661               fb.cursor.home.vector:
0662 7AE4 7FDA             data  vec.14
0663               
0664               
0665               **************************************************************
0666               * Stub for "fb.insert.line"
0667               * bank4 vec.15
0668               ********|*****|*********************|**************************
0669               fb.insert.line:
0670 7AE6 C820  54         mov   @fb.insert.line.vector,@trmpvector
     7AE8 7AEE     
     7AEA A034     
0671 7AEC 1001  14         jmp   _trampoline.bank4.ret ; Longjump
0672               fb.insert.line.vector:
0673 7AEE 7FDC             data  vec.15
0674               
0675               
0676               ***************************************************************
0677               * Trampoline bank 4 with return
0678               ********|*****|*********************|**************************
0679               _trampoline.bank4.ret:
0680 7AF0 0649  14         dect  stack
0681 7AF2 C64B  30         mov   r11,*stack            ; Save return address
0682                       ;------------------------------------------------------
0683                       ; Call routine in specified bank
0684                       ;------------------------------------------------------
0685 7AF4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AF6 2FCA     
0686 7AF8 6008                   data bank4.rom        ; | i  p0 = bank address
0687 7AFA FFFF                   data >ffff            ; | i  p1 = Vector with target address
0688                                                   ; |         (deref @trmpvector)
0689 7AFC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0690                       ;------------------------------------------------------
0691                       ; Exit
0692                       ;------------------------------------------------------
0693 7AFE C2F9  30         mov   *stack+,r11           ; Pop r11
0694 7B00 045B  20         b     *r11                  ; Return to caller
0695               
0696               
0697               
0698               **************************************************************
0699               * Stub for "edb.clear.sams"
0700               * bank5 vec.1
0701               ********|*****|*********************|**************************
0702               edb.clear.sams:
0703 7B02 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7B04 7B0A     
     7B06 A034     
0704 7B08 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0705               edb.clear.sams.vector:
0706 7B0A 7FC0             data  vec.1
0707               
0708               
0709               **************************************************************
0710               * Stub for "edb.block.mark"
0711               * bank5 vec.3
0712               ********|*****|*********************|**************************
0713               edb.block.mark:
0714 7B0C C820  54         mov   @edb.block.mark.vector,@trmpvector
     7B0E 7B14     
     7B10 A034     
0715 7B12 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0716               edb.block.mark.vector:
0717 7B14 7FC4             data  vec.3
0718               
0719               
0720               **************************************************************
0721               * Stub for "edb.block.mark.m1"
0722               * bank5 vec.4
0723               ********|*****|*********************|**************************
0724               edb.block.mark.m1:
0725 7B16 C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7B18 7B1E     
     7B1A A034     
0726 7B1C 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0727               edb.block.mark.m1.vector:
0728 7B1E 7FC6             data  vec.4
0729               
0730               
0731               **************************************************************
0732               * Stub for "edb.block.mark.m2"
0733               * bank5 vec.5
0734               ********|*****|*********************|**************************
0735               edb.block.mark.m2:
0736 7B20 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7B22 7B28     
     7B24 A034     
0737 7B26 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0738               edb.block.mark.m2.vector:
0739 7B28 7FC8             data  vec.5
0740               
0741               
0742               **************************************************************
0743               * Stub for "edb.block.clip"
0744               * bank5 vec.6
0745               ********|*****|*********************|**************************
0746               edb.block.clip:
0747 7B2A C820  54         mov   @edb.block.clip.vector,@trmpvector
     7B2C 7B32     
     7B2E A034     
0748 7B30 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0749               edb.block.clip.vector:
0750 7B32 7FCA             data  vec.6
0751               
0752               
0753               **************************************************************
0754               * Stub for "edb.block.reset"
0755               * bank5 vec.7
0756               ********|*****|*********************|**************************
0757               edb.block.reset:
0758 7B34 C820  54         mov   @edb.block.reset.vector,@trmpvector
     7B36 7B3C     
     7B38 A034     
0759 7B3A 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0760               edb.block.reset.vector:
0761 7B3C 7FCC             data  vec.7
0762               
0763               
0764               **************************************************************
0765               * Stub for "edb.block.delete"
0766               * bank5 vec.8
0767               ********|*****|*********************|**************************
0768               edb.block.delete:
0769 7B3E C820  54         mov   @edb.block.delete.vector,@trmpvector
     7B40 7B46     
     7B42 A034     
0770 7B44 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0771               edb.block.delete.vector:
0772 7B46 7FCE             data  vec.8
0773               
0774               
0775               **************************************************************
0776               * Stub for "edb.block.copy"
0777               * bank5 vec.9
0778               ********|*****|*********************|**************************
0779               edb.block.copy:
0780 7B48 C820  54         mov   @edb.block.copy.vector,@trmpvector
     7B4A 7B50     
     7B4C A034     
0781 7B4E 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0782               edb.block.copy.vector:
0783 7B50 7FD0             data  vec.9
0784               
0785               
0786               **************************************************************
0787               * Stub for "edb.line.del"
0788               * bank5 vec.10
0789               ********|*****|*********************|**************************
0790               edb.line.del:
0791 7B52 C820  54         mov   @edb.line.del.vector,@trmpvector
     7B54 7B5A     
     7B56 A034     
0792 7B58 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0793               edb.line.del.vector:
0794 7B5A 7FD2             data  vec.10
0795               
0796               
0797               
0798               ***************************************************************
0799               * Trampoline bank 5 with return
0800               ********|*****|*********************|**************************
0801               _trampoline.bank5.ret:
0802 7B5C 0649  14         dect  stack
0803 7B5E C64B  30         mov   r11,*stack            ; Save return address
0804                       ;------------------------------------------------------
0805                       ; Call routine in specified bank
0806                       ;------------------------------------------------------
0807 7B60 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B62 2FCA     
0808 7B64 600A                   data bank5.rom        ; | i  p0 = bank address
0809 7B66 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0810                                                   ; |         (deref @trmpvector)
0811 7B68 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0812                       ;------------------------------------------------------
0813                       ; Exit
0814                       ;------------------------------------------------------
0815 7B6A C2F9  30         mov   *stack+,r11           ; Pop r11
0816 7B6C 045B  20         b     *r11                  ; Return to caller
0817               
0818               
0819               ***************************************************************
0820               * Stub for "vdp.dump.patterns"
0821               * bank6 vec.1
0822               ********|*****|*********************|**************************
0823               vdp.dump.patterns:
0824 7B6E C820  54         mov   @vdp.dump.patterns.vector,@trmpvector
     7B70 7B76     
     7B72 A034     
0825 7B74 100B  14         jmp   _trampoline.bank6.ret ; Longjump
0826               vdp.dump.patterns.vector:
0827 7B76 7FC0             data  vec.1
0828               
0829               
0830               ***************************************************************
0831               * Stub for "vdp.dump.font"
0832               * bank6 vec.2
0833               ********|*****|*********************|**************************
0834               vdp.dump.font:
0835 7B78 C820  54         mov   @vdp.dump.font.vector,@trmpvector
     7B7A 7B80     
     7B7C A034     
0836 7B7E 1006  14         jmp   _trampoline.bank6.ret ; Longjump
0837               vdp.dump.font.vector:
0838 7B80 7FC2             data  vec.2
0839               
0840               
0841               ***************************************************************
0842               * Stub for "tv.set.font"
0843               * bank6 vec.3
0844               ********|*****|*********************|**************************
0845               tv.set.font:
0846 7B82 C820  54         mov   @tv.set.font.vector,@trmpvector
     7B84 7B8A     
     7B86 A034     
0847 7B88 1001  14         jmp   _trampoline.bank6.ret ; Longjump
0848               tv.set.font.vector:
0849 7B8A 7FC4             data  vec.3
0850               
0851               
0852               ***************************************************************
0853               * Trampoline bank 6 with return
0854               ********|*****|*********************|**************************
0855               _trampoline.bank6.ret:
0856 7B8C 0649  14         dect  stack
0857 7B8E C64B  30         mov   r11,*stack            ; Save return address
0858                       ;------------------------------------------------------
0859                       ; Call routine in specified bank
0860                       ;------------------------------------------------------
0861 7B90 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B92 2FCA     
0862 7B94 600C                   data bank6.rom        ; | i  p0 = bank address
0863 7B96 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0864                                                   ; |         (deref @trmpvector)
0865 7B98 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0866                       ;------------------------------------------------------
0867                       ; Exit
0868                       ;------------------------------------------------------
0869 7B9A C2F9  30         mov   *stack+,r11           ; Pop r11
0870 7B9C 045B  20         b     *r11                  ; Return to caller
0871               
0872               
0873               ***************************************************************
0874               * Stub for "tibasic"
0875               * bank7 vec.10
0876               ********|*****|*********************|**************************
0877               tibasic1:
0878 7B9E C820  54         mov   @const.1,@tib.session
     7BA0 2002     
     7BA2 A0B4     
0879 7BA4 100F  14         jmp   tibasic
0880               tibasic2:
0881 7BA6 C820  54         mov   @const.2,@tib.session
     7BA8 2004     
     7BAA A0B4     
0882 7BAC 100B  14         jmp   tibasic
0883               tibasic3:
0884 7BAE C820  54         mov   @const.3,@tib.session
     7BB0 389A     
     7BB2 A0B4     
0885 7BB4 1007  14         jmp   tibasic
0886               tibasic4:
0887 7BB6 C820  54         mov   @const.4,@tib.session
     7BB8 2006     
     7BBA A0B4     
0888 7BBC 1003  14         jmp   tibasic
0889               tibasic5:
0890 7BBE C820  54         mov   @const.5,@tib.session
     7BC0 389C     
     7BC2 A0B4     
0891               tibasic:
0892 7BC4 0649  14         dect  stack
0893 7BC6 C64B  30         mov   r11,*stack            ; Save return address
0894 7BC8 0649  14         dect  stack
0895 7BCA C644  30         mov   tmp0,*stack           ; Push tmp0
0896                       ;------------------------------------------------------
0897                       ; Exit early if no TI Basic session
0898                       ;------------------------------------------------------
0899 7BCC C120  34         mov   @tib.session,tmp0     ; Get session ID
     7BCE A0B4     
0900 7BD0 130A  14         jeq   tibasic.exit          ; Exit early if no session
0901                       ;------------------------------------------------------
0902                       ; Run TI Basic session
0903                       ;------------------------------------------------------
0904 7BD2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BD4 2FCA     
0905 7BD6 600E                   data bank7.rom        ; | i  p0 = bank address
0906 7BD8 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0907 7BDA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0908               
0909 7BDC C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     7BDE A0C0     
0910 7BE0 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
0911               
0912 7BE2 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7BE4 7BF0     
=======
0570               fb.vdpdump:
0571 7AEA 0649  14         dect  stack
0572 7AEC C64B  30         mov   r11,*stack            ; Save return address
0573                       ;------------------------------------------------------
0574                       ; Colorize frame buffer content
0575                       ;------------------------------------------------------
0576 7AEE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AF0 2FCA     
0577 7AF2 6008                   data bank4.rom        ; | i  p0 = bank address
0578 7AF4 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0579 7AF6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0580                       ;------------------------------------------------------
0581                       ; Exit
0582                       ;------------------------------------------------------
0583 7AF8 C2F9  30         mov   *stack+,r11           ; Pop r11
0584 7AFA 045B  20         b     *r11                  ; Return to caller
0585               
0586               
0587               ***************************************************************
0588               * Stub for "fb.hscroll"
0589               * bank4 vec.6
0590               ********|*****|*********************|**************************
0591               fb.hscroll:
0592 7AFC 0649  14         dect  stack
0593 7AFE C64B  30         mov   r11,*stack            ; Save return address
0594                       ;------------------------------------------------------
0595                       ; Colorize frame buffer content
0596                       ;------------------------------------------------------
0597 7B00 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B02 2FCA     
0598 7B04 6008                   data bank4.rom        ; | i  p0 = bank address
0599 7B06 7FCA                   data vec.6            ; | i  p1 = Vector with target address
0600 7B08 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0601                       ;------------------------------------------------------
0602                       ; Exit
0603                       ;------------------------------------------------------
0604 7B0A C2F9  30         mov   *stack+,r11           ; Pop r11
0605 7B0C 045B  20         b     *r11                  ; Return to caller
0606               
0607               
0608               ***************************************************************
0609               * Stub for "fb.restore"
0610               * bank4 vec.7
0611               ********|*****|*********************|**************************
0612               fb.restore:
0613 7B0E 0649  14         dect  stack
0614 7B10 C64B  30         mov   r11,*stack            ; Save return address
0615                       ;------------------------------------------------------
0616                       ; Colorize frame buffer content
0617                       ;------------------------------------------------------
0618 7B12 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B14 2FCA     
0619 7B16 6008                   data bank4.rom        ; | i  p0 = bank address
0620 7B18 7FCC                   data vec.7            ; | i  p1 = Vector with target address
0621 7B1A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0622                       ;------------------------------------------------------
0623                       ; Exit
0624                       ;------------------------------------------------------
0625 7B1C C2F9  30         mov   *stack+,r11           ; Pop r11
0626 7B1E 045B  20         b     *r11                  ; Return to caller
0627               
0628               
0629               ***************************************************************
0630               * Stub for "fb.refresh"
0631               * bank4 vec.8
0632               ********|*****|*********************|**************************
0633               fb.refresh:
0634 7B20 0649  14         dect  stack
0635 7B22 C64B  30         mov   r11,*stack            ; Save return address
0636                       ;------------------------------------------------------
0637                       ; Colorize frame buffer content
0638                       ;------------------------------------------------------
0639 7B24 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B26 2FCA     
0640 7B28 6008                   data bank4.rom        ; | i  p0 = bank address
0641 7B2A 7FCE                   data vec.8            ; | i  p1 = Vector with target address
0642 7B2C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0643                       ;------------------------------------------------------
0644                       ; Exit
0645                       ;------------------------------------------------------
0646 7B2E C2F9  30         mov   *stack+,r11           ; Pop r11
0647 7B30 045B  20         b     *r11                  ; Return to caller
0648               
0649               
0650               ***************************************************************
0651               * Stub for "fb.get.nonblank"
0652               * bank4 vec.9
0653               ********|*****|*********************|**************************
0654               fb.get.nonblank:
0655 7B32 0649  14         dect  stack
0656 7B34 C64B  30         mov   r11,*stack            ; Save return address
0657                       ;------------------------------------------------------
0658                       ; Colorize frame buffer content
0659                       ;------------------------------------------------------
0660 7B36 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B38 2FCA     
0661 7B3A 6008                   data bank4.rom        ; | i  p0 = bank address
0662 7B3C 7FD0                   data vec.9            ; | i  p1 = Vector with target address
0663 7B3E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0664                       ;------------------------------------------------------
0665                       ; Exit
0666                       ;------------------------------------------------------
0667 7B40 C2F9  30         mov   *stack+,r11           ; Pop r11
0668 7B42 045B  20         b     *r11                  ; Return to caller
0669               
0670               
0671               ***************************************************************
0672               * Stub for "fb.tab.prev"
0673               * bank4 vec.10
0674               ********|*****|*********************|**************************
0675               fb.tab.prev:
0676 7B44 0649  14         dect  stack
0677 7B46 C64B  30         mov   r11,*stack            ; Save return address
0678                       ;------------------------------------------------------
0679                       ; Put cursor on next tab position
0680                       ;------------------------------------------------------
0681 7B48 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B4A 2FCA     
0682 7B4C 6008                   data bank4.rom        ; | i  p0 = bank address
0683 7B4E 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0684 7B50 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0685                       ;------------------------------------------------------
0686                       ; Exit
0687                       ;------------------------------------------------------
0688 7B52 C2F9  30         mov   *stack+,r11           ; Pop r11
0689 7B54 045B  20         b     *r11                  ; Return to caller
0690               
0691               
0692               ***************************************************************
0693               * Stub for "fb.tab.next"
0694               * bank4 vec.11
0695               ********|*****|*********************|**************************
0696               fb.tab.next:
0697 7B56 0649  14         dect  stack
0698 7B58 C64B  30         mov   r11,*stack            ; Save return address
0699                       ;------------------------------------------------------
0700                       ; Put cursor on next tab position
0701                       ;------------------------------------------------------
0702 7B5A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B5C 2FCA     
0703 7B5E 6008                   data bank4.rom        ; | i  p0 = bank address
0704 7B60 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0705 7B62 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0706                       ;------------------------------------------------------
0707                       ; Exit
0708                       ;------------------------------------------------------
0709 7B64 C2F9  30         mov   *stack+,r11           ; Pop r11
0710 7B66 045B  20         b     *r11                  ; Return to caller
0711               
0712               **************************************************************
0713               * Stub for "edb.clear.sams"
0714               * bank5 vec.1
0715               ********|*****|*********************|**************************
0716               edb.clear.sams:
0717 7B68 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7B6A 7B70     
     7B6C A034     
0718 7B6E 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0719               edb.clear.sams.vector:
0720 7B70 7FC0             data  vec.1
0721               
0722               
0723               **************************************************************
0724               * Stub for "edb.block.mark"
0725               * bank5 vec.3
0726               ********|*****|*********************|**************************
0727               edb.block.mark:
0728 7B72 C820  54         mov   @edb.block.mark.vector,@trmpvector
     7B74 7B7A     
     7B76 A034     
0729 7B78 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0730               edb.block.mark.vector:
0731 7B7A 7FC4             data  vec.3
0732               
0733               
0734               **************************************************************
0735               * Stub for "edb.block.mark.m1"
0736               * bank5 vec.4
0737               ********|*****|*********************|**************************
0738               edb.block.mark.m1:
0739 7B7C C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7B7E 7B84     
     7B80 A034     
0740 7B82 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0741               edb.block.mark.m1.vector:
0742 7B84 7FC6             data  vec.4
0743               
0744               
0745               **************************************************************
0746               * Stub for "edb.block.mark.m2"
0747               * bank5 vec.5
0748               ********|*****|*********************|**************************
0749               edb.block.mark.m2:
0750 7B86 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7B88 7B8E     
     7B8A A034     
0751 7B8C 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0752               edb.block.mark.m2.vector:
0753 7B8E 7FC8             data  vec.5
0754               
0755               
0756               **************************************************************
0757               * Stub for "edb.block.clip"
0758               * bank5 vec.6
0759               ********|*****|*********************|**************************
0760               edb.block.clip:
0761 7B90 C820  54         mov   @edb.block.clip.vector,@trmpvector
     7B92 7B98     
     7B94 A034     
0762 7B96 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0763               edb.block.clip.vector:
0764 7B98 7FCA             data  vec.6
0765               
0766               
0767               **************************************************************
0768               * Stub for "edb.block.reset"
0769               * bank5 vec.7
0770               ********|*****|*********************|**************************
0771               edb.block.reset:
0772 7B9A C820  54         mov   @edb.block.reset.vector,@trmpvector
     7B9C 7BA2     
     7B9E A034     
0773 7BA0 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0774               edb.block.reset.vector:
0775 7BA2 7FCC             data  vec.7
0776               
0777               
0778               **************************************************************
0779               * Stub for "edb.block.delete"
0780               * bank5 vec.8
0781               ********|*****|*********************|**************************
0782               edb.block.delete:
0783 7BA4 C820  54         mov   @edb.block.delete.vector,@trmpvector
     7BA6 7BAC     
     7BA8 A034     
0784 7BAA 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0785               edb.block.delete.vector:
0786 7BAC 7FCE             data  vec.8
0787               
0788               
0789               **************************************************************
0790               * Stub for "edb.block.copy"
0791               * bank5 vec.9
0792               ********|*****|*********************|**************************
0793               edb.block.copy:
0794 7BAE C820  54         mov   @edb.block.copy.vector,@trmpvector
     7BB0 7BB6     
     7BB2 A034     
0795 7BB4 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0796               edb.block.copy.vector:
0797 7BB6 7FD0             data  vec.9
0798               
0799               
0800               **************************************************************
0801               * Stub for "edb.line.del"
0802               * bank5 vec.10
0803               ********|*****|*********************|**************************
0804               edb.line.del:
0805 7BB8 C820  54         mov   @edb.line.del.vector,@trmpvector
     7BBA 7BC0     
     7BBC A034     
0806 7BBE 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0807               edb.line.del.vector:
0808 7BC0 7FD2             data  vec.10
0809               
0810               
0811               
0812               ***************************************************************
0813               * Trampoline bank 5 with return
0814               ********|*****|*********************|**************************
0815               _trampoline.bank5.ret:
0816 7BC2 0649  14         dect  stack
0817 7BC4 C64B  30         mov   r11,*stack            ; Save return address
0818                       ;------------------------------------------------------
0819                       ; Call routine in specified bank
0820                       ;------------------------------------------------------
0821 7BC6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BC8 2FCA     
0822 7BCA 600A                   data bank5.rom        ; | i  p0 = bank address
0823 7BCC FFFF                   data >ffff            ; | i  p1 = Vector with target address
0824                                                   ; |         (deref @trmpvector)
0825 7BCE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0826                       ;------------------------------------------------------
0827                       ; Exit
0828                       ;------------------------------------------------------
0829 7BD0 C2F9  30         mov   *stack+,r11           ; Pop r11
0830 7BD2 045B  20         b     *r11                  ; Return to caller
0831               
0832               
0833               ***************************************************************
0834               * Stub for "vdp.patterns.dump"
0835               * bank6 vec.1
0836               ********|*****|*********************|**************************
0837               vdp.patterns.dump:
0838 7BD4 0649  14         dect  stack
0839 7BD6 C64B  30         mov   r11,*stack            ; Save return address
0840                       ;------------------------------------------------------
0841                       ; Dump VDP patterns
0842                       ;------------------------------------------------------
0843 7BD8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BDA 2FCA     
0844 7BDC 600C                   data bank6.rom        ; | i  p0 = bank address
0845 7BDE 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0846 7BE0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0847                       ;------------------------------------------------------
0848                       ; Exit
0849                       ;------------------------------------------------------
0850 7BE2 C2F9  30         mov   *stack+,r11           ; Pop r11
0851 7BE4 045B  20         b     *r11                  ; Return to caller
0852               
0853               
0854               
0855               ***************************************************************
0856               * Stub for "tibasic"
0857               * bank7 vec.10
0858               ********|*****|*********************|**************************
0859               tibasic1:
0860 7BE6 C820  54         mov   @const.1,@tib.session
     7BE8 2002     
     7BEA A0B4     
0861 7BEC 100F  14         jmp   tibasic
0862               tibasic2:
0863 7BEE C820  54         mov   @const.2,@tib.session
     7BF0 2004     
     7BF2 A0B4     
0864 7BF4 100B  14         jmp   tibasic
0865               tibasic3:
0866 7BF6 C820  54         mov   @const.3,@tib.session
     7BF8 38EE     
     7BFA A0B4     
0867 7BFC 1007  14         jmp   tibasic
0868               tibasic4:
0869 7BFE C820  54         mov   @const.4,@tib.session
     7C00 2006     
     7C02 A0B4     
0870 7C04 1003  14         jmp   tibasic
0871               tibasic5:
0872 7C06 C820  54         mov   @const.5,@tib.session
     7C08 38F0     
     7C0A A0B4     
0873               tibasic:
0874 7C0C 0649  14         dect  stack
0875 7C0E C64B  30         mov   r11,*stack            ; Save return address
0876 7C10 0649  14         dect  stack
0877 7C12 C644  30         mov   tmp0,*stack           ; Push tmp0
0878                       ;------------------------------------------------------
0879                       ; Exit early if no TI Basic session
0880                       ;------------------------------------------------------
0881 7C14 C120  34         mov   @tib.session,tmp0     ; Get session ID
     7C16 A0B4     
0882 7C18 130A  14         jeq   tibasic.exit          ; Exit early if no session
0883                       ;------------------------------------------------------
0884                       ; Run TI Basic session
0885                       ;------------------------------------------------------
0886 7C1A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C1C 2FCA     
0887 7C1E 600E                   data bank7.rom        ; | i  p0 = bank address
0888 7C20 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0889 7C22 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0890               
0891 7C24 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     7C26 A0C0     
0892 7C28 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
0893               
0894 7C2A 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7C2C 7C38     
0895                       ;------------------------------------------------------
0896                       ; Exit
0897                       ;------------------------------------------------------
0898               tibasic.exit:
0899 7C2E 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7C30 A31A     
0900 7C32 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0901 7C34 C2F9  30         mov   *stack+,r11           ; Pop r11
0902 7C36 045B  20         b     *r11                  ; Return to caller
0903               
0904               
0905               
0906               ***************************************************************
0907               * Stub for "tibasic.uncrunch"
0908               * bank7 vec.11
0909               ********|*****|*********************|**************************
0910               tibasic.uncrunch:
0911 7C38 0649  14         dect  stack
0912 7C3A C64B  30         mov   r11,*stack            ; Save return address
>>>>>>> b9b40bb (WIP optimize build scripts)
0913                       ;------------------------------------------------------
0914                       ; Exit
0915                       ;------------------------------------------------------
<<<<<<< HEAD
0916               tibasic.exit:
0917 7BE6 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7BE8 A31A     
0918 7BEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0919 7BEC C2F9  30         mov   *stack+,r11           ; Pop r11
0920 7BEE 045B  20         b     *r11                  ; Return to caller
0921               
0922               
0923               
0924               ***************************************************************
0925               * Stub for "tibasic.uncrunch"
0926               * bank7 vec.11
0927               ********|*****|*********************|**************************
0928               tibasic.uncrunch:
0929 7BF0 0649  14         dect  stack
0930 7BF2 C64B  30         mov   r11,*stack            ; Save return address
0931                       ;------------------------------------------------------
0932                       ; Uncrunch TI basic program
0933                       ;------------------------------------------------------
0934 7BF4 C820  54         mov   @tib.session,@parm1   ; Get current session
     7BF6 A0B4     
     7BF8 A006     
0935 7BFA 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
0936               
0937 7BFC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BFE 2FCA     
0938 7C00 600E                   data bank7.rom        ; | i  p0 = bank address
0939 7C02 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0940 7C04 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0941                       ;------------------------------------------------------
0942                       ; Exit
0943                       ;------------------------------------------------------
0944               tibasic.uncrunch.exit:
0945 7C06 C2F9  30         mov   *stack+,r11           ; Pop r11
0946 7C08 045B  20         b     *r11                  ; Return to caller
0947               
0948               
0949               
0950               ***************************************************************
0951               * Stub for "fg99.run"
0952               ********|*****|*********************|**************************
0953               fg99.run.xbgem:
0954 7C0A 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7C0C 3D26     
0955 7C0E C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C10 A232     
0956 7C12 100F  14         jmp   fg99.run.stub
0957               
0958               fg99.run.rxb:
0959 7C14 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7C16 3D3A     
0960 7C18 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C1A A232     
0961 7C1C 100A  14         jmp   fg99.run.stub
0962               
0963               fg99.run.fcmd:
0964 7C1E 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     7C20 3D12     
0965 7C22 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C24 A232     
0966 7C26 1005  14         jmp   fg99.run.stub
0967               
0968               fg99.run.fbforth:
0969 7C28 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7C2A 3D4E     
0970 7C2C C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     7C2E A232     
0971 7C30 1000  14         jmp   fg99.run.stub
0972               
0973               fg99.run.stub:
0974 7C32 0649  14         dect  stack
0975 7C34 C64B  30         mov   r11,*stack            ; Save return address
0976                       ;------------------------------------------------------
0977                       ; Run FinalGROM cartridge image
0978                       ;------------------------------------------------------
0979 7C36 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7C38 3764     
0980                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
0981                                                   ; /
0982                       ;------------------------------------------------------
0983                       ; Exit
0984                       ;------------------------------------------------------
0985               fg99.run.stub.exit:
0986 7C3A C2F9  30         mov   *stack+,r11           ; Pop r11
0987 7C3C 045B  20         b     *r11                  ; Return to caller
=======
0916 7C3C C820  54         mov   @tib.session,@parm1   ; Get current session
     7C3E A0B4     
     7C40 A006     
0917 7C42 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
0918               
0919 7C44 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C46 2FCA     
0920 7C48 600E                   data bank7.rom        ; | i  p0 = bank address
0921 7C4A 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0922 7C4C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0923                       ;------------------------------------------------------
0924                       ; Exit
0925                       ;------------------------------------------------------
0926               tibasic.uncrunch.exit:
0927 7C4E C2F9  30         mov   *stack+,r11           ; Pop r11
0928 7C50 045B  20         b     *r11                  ; Return to caller
0929               
0930               
0931               
0932               ***************************************************************
0933               * Stub for "fg99.run"
0934               ********|*****|*********************|**************************
0935               fg99.run.xbgem:
0936 7C52 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7C54 3D6E     
0937 7C56 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C58 A230     
0938 7C5A 100F  14         jmp   fg99.run.stub
0939               
0940               fg99.run.rxb:
0941 7C5C 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7C5E 3D82     
0942 7C60 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C62 A230     
0943 7C64 100A  14         jmp   fg99.run.stub
0944               
0945               fg99.run.fcmd:
0946 7C66 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     7C68 3D5A     
0947 7C6A C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C6C A230     
0948 7C6E 1005  14         jmp   fg99.run.stub
0949               
0950               fg99.run.fbforth:
0951 7C70 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7C72 3D96     
0952 7C74 C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     7C76 A230     
0953 7C78 1000  14         jmp   fg99.run.stub
0954               
0955               fg99.run.stub:
0956 7C7A 0649  14         dect  stack
0957 7C7C C64B  30         mov   r11,*stack            ; Save return address
0958                       ;------------------------------------------------------
0959                       ; Run FinalGROM cartridge image
0960                       ;------------------------------------------------------
0961 7C7E 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7C80 3752     
0962                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
0963                                                   ; /
0964                       ;------------------------------------------------------
0965                       ; Exit
0966                       ;------------------------------------------------------
0967               fg99.run.stub.exit:
0968 7C82 C2F9  30         mov   *stack+,r11           ; Pop r11
0969 7C84 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0150                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
<<<<<<< HEAD
0034 7C3E 0649  14         dect  stack
0035 7C40 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7C42 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C44 2FCA     
0040 7C46 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7C48 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 7C4A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7C4C C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7C4E 045B  20         b     *r11                  ; Return to caller
=======
0034 7C86 0649  14         dect  stack
0035 7C88 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7C8A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C8C 2FCA     
0040 7C8E 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7C90 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 7C92 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7C94 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7C96 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
<<<<<<< HEAD
0057 7C50 0649  14         dect  stack
0058 7C52 C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7C54 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C56 2FCA     
0063 7C58 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7C5A 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7C5C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7C5E C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7C60 045B  20         b     *r11                  ; Return to caller
=======
0057 7C98 0649  14         dect  stack
0058 7C9A C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7C9C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C9E 2FCA     
0063 7CA0 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7CA2 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7CA4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7CA6 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7CA8 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
<<<<<<< HEAD
0080 7C62 0649  14         dect  stack
0081 7C64 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7C66 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C68 2FCA     
0086 7C6A 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7C6C 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7C6E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7C70 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7C72 045B  20         b     *r11                  ; Return to caller
=======
0080 7CAA 0649  14         dect  stack
0081 7CAC C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7CAE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CB0 2FCA     
0086 7CB2 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7CB4 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7CB6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7CB8 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7CBA 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
<<<<<<< HEAD
0103 7C74 0649  14         dect  stack
0104 7C76 C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7C78 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C7A 2FCA     
0109 7C7C 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7C7E 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 7C80 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 7C82 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 7C84 045B  20         b     *r11                  ; Return to caller
=======
0103 7CBC 0649  14         dect  stack
0104 7CBE C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7CC0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CC2 2FCA     
0109 7CC4 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7CC6 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 7CC8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 7CCA C2F9  30         mov   *stack+,r11           ; Pop r11
0116 7CCC 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
<<<<<<< HEAD
0126 7C86 0649  14         dect  stack
0127 7C88 C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7C8A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C8C 2FCA     
0132 7C8E 600E                   data bank7.rom        ; | i  p0 = bank address
0133 7C90 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 7C92 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 7C94 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7C96 045B  20         b     *r11                  ; Return to caller
=======
0126 7CCE 0649  14         dect  stack
0127 7CD0 C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7CD2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CD4 2FCA     
0132 7CD6 600E                   data bank7.rom        ; | i  p0 = bank address
0133 7CD8 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 7CDA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 7CDC C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7CDE 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
<<<<<<< HEAD
0149 7C98 0649  14         dect  stack
0150 7C9A C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7C9C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C9E 2FCA     
0155 7CA0 600E                   data bank7.rom        ; | i  p0 = bank address
0156 7CA2 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 7CA4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7CA6 C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7CA8 045B  20         b     *r11                  ; Return to caller
=======
0149 7CE0 0649  14         dect  stack
0150 7CE2 C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7CE4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CE6 2FCA     
0155 7CE8 600E                   data bank7.rom        ; | i  p0 = bank address
0156 7CEA 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 7CEC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7CEE C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7CF0 045B  20         b     *r11                  ; Return to caller
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0151                       ;-----------------------------------------------------------------------
0152                       ; Program data
0153                       ;-----------------------------------------------------------------------
0154                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
<<<<<<< HEAD
0011 7CAA 0D00             byte  key.enter, pane.focus.fb
0012 7CAC 6768             data  edkey.action.enter
0013               
0014 7CAE 0800             byte  key.fctn.s, pane.focus.fb
0015 7CB0 6250             data  edkey.action.left
0016               
0017 7CB2 0900             byte  key.fctn.d, pane.focus.fb
0018 7CB4 626A             data  edkey.action.right
0019               
0020 7CB6 0B00             byte  key.fctn.e, pane.focus.fb
0021 7CB8 63CE             data  edkey.action.up
0022               
0023 7CBA 0A00             byte  key.fctn.x, pane.focus.fb
0024 7CBC 63D6             data  edkey.action.down
0025               
0026 7CBE BF00             byte  key.fctn.h, pane.focus.fb
0027 7CC0 6286             data  edkey.action.home
0028               
0029 7CC2 C000             byte  key.fctn.j, pane.focus.fb
0030 7CC4 62B0             data  edkey.action.pword
0031               
0032 7CC6 C100             byte  key.fctn.k, pane.focus.fb
0033 7CC8 6302             data  edkey.action.nword
0034               
0035 7CCA C200             byte  key.fctn.l, pane.focus.fb
0036 7CCC 628E             data  edkey.action.end
0037               
0038 7CCE 0200             byte  key.fctn.4, pane.focus.fb
0039 7CD0 6420             data  edkey.action.npage
0040               
0041 7CD2 0E00             byte  key.fctn.5, pane.focus.fb
0042 7CD4 6396             data  edkey.action.scroll.right
0043               
0044 7CD6 0C00             byte  key.fctn.6, pane.focus.fb
0045 7CD8 63DE             data  edkey.action.ppage
0046               
0047 7CDA B700             byte  key.ctrl.7, pane.focus.fb
0048 7CDC 6A92             data  edkey.action.fb.tab.prev
0049               
0050 7CDE 0100             byte  key.fctn.7, pane.focus.fb
0051 7CE0 6AA0             data  edkey.action.fb.tab.next
0052               
0053 7CE2 8500             byte  key.ctrl.e, pane.focus.fb
0054 7CE4 63DE             data  edkey.action.ppage
0055               
0056 7CE6 8700             byte  key.ctrl.g, pane.focus.fb
0057 7CE8 799E             data  dialog.goto
0058               
0059 7CEA 9800             byte  key.ctrl.x, pane.focus.fb
0060 7CEC 6420             data  edkey.action.npage
0061               
0062 7CEE 7F00             byte  key.fctn.v, pane.focus.fb
0063 7CF0 6480             data  edkey.action.topscr
0064               
0065 7CF2 BE00             byte  key.fctn.b, pane.focus.fb
0066 7CF4 64D2             data  edkey.action.botscr
0067               
0068 7CF6 9600             byte  key.ctrl.v, pane.focus.fb
0069 7CF8 6460             data  edkey.action.top
0070               
0071 7CFA 8200             byte  key.ctrl.b, pane.focus.fb
0072 7CFC 649E             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 7CFE 0300             byte  key.fctn.1, pane.focus.fb
0077 7D00 6596             data  edkey.action.del_char
0078               
0079 7D02 0700             byte  key.fctn.3, pane.focus.fb
0080 7D04 6648             data  edkey.action.del_line
0081               
0082 7D06 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7D08 6614             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7D0A 0400             byte  key.fctn.2, pane.focus.fb
0088 7D0C 66AA             data  edkey.action.ins_char.ws
0089               
0090 7D0E B900             byte  key.fctn.dot, pane.focus.fb
0091 7D10 67F4             data  edkey.action.ins_onoff
0092               
0093 7D12 0600             byte  key.fctn.8, pane.focus.fb
0094 7D14 6750             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7D16 F000             byte  key.ctrl.space, pane.focus.fb
0099 7D18 69B4             data  edkey.action.block.mark
0100               
0101 7D1A 8300             byte  key.ctrl.c, pane.focus.fb
0102 7D1C 68BC             data  edkey.action.copyblock_or_clipboard
0103               
0104 7D1E 8400             byte  key.ctrl.d, pane.focus.fb
0105 7D20 6A14             data  edkey.action.block.delete
0106               
0107 7D22 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7D24 6A42             data  edkey.action.block.move
0109               
0110 7D26 8700             byte  key.ctrl.g, pane.focus.fb
0111 7D28 6A78             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7D2A B100             byte  key.ctrl.1, pane.focus.fb
0116 7D2C 6AAE             data  edkey.action.fb.clip.save.1
0117               
0118 7D2E B200             byte  key.ctrl.2, pane.focus.fb
0119 7D30 6AB8             data  edkey.action.fb.clip.save.2
0120               
0121 7D32 B300             byte  key.ctrl.3, pane.focus.fb
0122 7D34 6AC2             data  edkey.action.fb.clip.save.3
0123                       ;-------------------------------------------------------
0124                       ; Other action keys
0125                       ;-------------------------------------------------------
0126 7D36 0500             byte  key.fctn.plus, pane.focus.fb
0127 7D38 68AE             data  edkey.action.quit
0128               
0129 7D3A B500             byte  key.ctrl.5, pane.focus.fb
0130 7D3C 6362             data  edkey.action.scroll.left
0131               
0132 7D3E 9100             byte  key.ctrl.q, pane.focus.fb
0133 7D40 68AE             data  edkey.action.quit
0134               
0135 7D42 9200             byte  key.ctrl.r, pane.focus.fb
0136 7D44 686E             data  edkey.action.toggle.ruler
0137               
0138 7D46 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7D48 71A0             data  pane.action.colorscheme.cycle
0140               
0141 7D4A 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7D4C 68CC             data  edkey.action.fb.fname.dec.load
0143               
0144 7D4E 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 7D50 68DE             data  edkey.action.fb.fname.inc.load
0146               
0147 7D52 BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7D54 7980             data  dialog.basic
0149               
0150 7D56 BC00             byte  key.fctn.0, pane.focus.fb
0151 7D58 7BC4             data  tibasic
0152               
0153 7D5A B000             byte  key.ctrl.0, pane.focus.fb
0154 7D5C 69A0             data  edkey.action.fb.load.mastcat
0155                       ;-------------------------------------------------------
0156                       ; Dialog keys
0157                       ;-------------------------------------------------------
0158 7D5E 8100             byte  key.ctrl.a, pane.focus.fb
0159 7D60 796C             data  dialog.append
0160               
0161 7D62 8800             byte  key.ctrl.h, pane.focus.fb
0162 7D64 7904             data  dialog.help
0163               
0164 7D66 8600             byte  key.ctrl.f, pane.focus.fb
0165 7D68 7936             data  dialog.file
0166               
0167 7D6A 8900             byte  key.ctrl.i, pane.focus.fb
0168 7D6C 7922             data  dialog.insert
0169               
0170 7D6E 9300             byte  key.ctrl.s, pane.focus.fb
0171 7D70 7918             data  dialog.save
0172               
0173 7D72 8F00             byte  key.ctrl.o, pane.focus.fb
0174 7D74 790E             data  dialog.load
0175               
0176 7D76 9500             byte  key.ctrl.u, pane.focus.fb
0177 7D78 798A             data  dialog.shortcuts
=======
0011 7CF2 0D00             byte  key.enter, pane.focus.fb
0012 7CF4 6736             data  edkey.action.enter
0013               
0014 7CF6 0800             byte  key.fctn.s, pane.focus.fb
0015 7CF8 6252             data  edkey.action.left
0016               
0017 7CFA 0900             byte  key.fctn.d, pane.focus.fb
0018 7CFC 626C             data  edkey.action.right
0019               
0020 7CFE 0B00             byte  key.fctn.e, pane.focus.fb
0021 7D00 63D0             data  edkey.action.up
0022               
0023 7D02 0A00             byte  key.fctn.x, pane.focus.fb
0024 7D04 63D8             data  edkey.action.down
0025               
0026 7D06 BF00             byte  key.fctn.h, pane.focus.fb
0027 7D08 6288             data  edkey.action.home
0028               
0029 7D0A C000             byte  key.fctn.j, pane.focus.fb
0030 7D0C 62B2             data  edkey.action.pword
0031               
0032 7D0E C100             byte  key.fctn.k, pane.focus.fb
0033 7D10 6304             data  edkey.action.nword
0034               
0035 7D12 C200             byte  key.fctn.l, pane.focus.fb
0036 7D14 6290             data  edkey.action.end
0037               
0038 7D16 0200             byte  key.fctn.4, pane.focus.fb
0039 7D18 641C             data  edkey.action.npage
0040               
0041 7D1A 0E00             byte  key.fctn.5, pane.focus.fb
0042 7D1C 6398             data  edkey.action.scroll.right
0043               
0044 7D1E 0C00             byte  key.fctn.6, pane.focus.fb
0045 7D20 63E0             data  edkey.action.ppage
0046               
0047 7D22 B700             byte  key.ctrl.7, pane.focus.fb
0048 7D24 69C0             data  edkey.action.fb.tab.prev
0049               
0050 7D26 0100             byte  key.fctn.7, pane.focus.fb
0051 7D28 69CE             data  edkey.action.fb.tab.next
0052               
0053 7D2A 8500             byte  key.ctrl.e, pane.focus.fb
0054 7D2C 63E0             data  edkey.action.ppage
0055               
0056 7D2E 8700             byte  key.ctrl.g, pane.focus.fb
0057 7D30 7A00             data  dialog.goto
0058               
0059 7D32 9800             byte  key.ctrl.x, pane.focus.fb
0060 7D34 641C             data  edkey.action.npage
0061               
0062 7D36 7F00             byte  key.fctn.v, pane.focus.fb
0063 7D38 6472             data  edkey.action.topscr
0064               
0065 7D3A BE00             byte  key.fctn.b, pane.focus.fb
0066 7D3C 64BC             data  edkey.action.botscr
0067               
0068 7D3E 9600             byte  key.ctrl.v, pane.focus.fb
0069 7D40 6456             data  edkey.action.top
0070               
0071 7D42 8200             byte  key.ctrl.b, pane.focus.fb
0072 7D44 648C             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 7D46 0300             byte  key.fctn.1, pane.focus.fb
0077 7D48 6564             data  edkey.action.del_char
0078               
0079 7D4A 0700             byte  key.fctn.3, pane.focus.fb
0080 7D4C 6616             data  edkey.action.del_line
0081               
0082 7D4E 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7D50 65E2             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7D52 0400             byte  key.fctn.2, pane.focus.fb
0088 7D54 6678             data  edkey.action.ins_char.ws
0089               
0090 7D56 B900             byte  key.fctn.dot, pane.focus.fb
0091 7D58 67C2             data  edkey.action.ins_onoff
0092               
0093 7D5A 0600             byte  key.fctn.8, pane.focus.fb
0094 7D5C 671E             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7D5E F000             byte  key.ctrl.space, pane.focus.fb
0099 7D60 68EA             data  edkey.action.block.mark
0100               
0101 7D62 8300             byte  key.ctrl.c, pane.focus.fb
0102 7D64 688A             data  edkey.action.copyblock_or_clipboard
0103               
0104 7D66 8400             byte  key.ctrl.d, pane.focus.fb
0105 7D68 694A             data  edkey.action.block.delete
0106               
0107 7D6A 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7D6C 6974             data  edkey.action.block.move
0109               
0110 7D6E 8700             byte  key.ctrl.g, pane.focus.fb
0111 7D70 69A6             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7D72 B100             byte  key.ctrl.1, pane.focus.fb
0116 7D74 69DC             data  edkey.action.fb.clip.save.1
0117               
0118 7D76 B200             byte  key.ctrl.2, pane.focus.fb
0119 7D78 69E6             data  edkey.action.fb.clip.save.2
0120               
0121 7D7A B300             byte  key.ctrl.3, pane.focus.fb
0122 7D7C 69F0             data  edkey.action.fb.clip.save.3
0123               
0124 7D7E B500             byte  key.ctrl.5, pane.focus.fb
0125 7D80 6364             data  edkey.action.scroll.left
0126                       ;-------------------------------------------------------
0127                       ; Other action keys
0128                       ;-------------------------------------------------------
0129 7D82 0500             byte  key.fctn.plus, pane.focus.fb
0130 7D84 687C             data  edkey.action.quit
0131               
0132 7D86 9100             byte  key.ctrl.q, pane.focus.fb
0133 7D88 687C             data  edkey.action.quit
0134               
0135 7D8A 9200             byte  key.ctrl.r, pane.focus.fb
0136 7D8C 683C             data  edkey.action.toggle.ruler
0137               
0138 7D8E 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7D90 7206             data  pane.action.colorscheme.cycle
0140               
0141 7D92 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7D94 689A             data  edkey.action.fb.fname.dec.load
0143               
0144 7D96 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 7D98 68AC             data  edkey.action.fb.fname.inc.load
0146               
0147 7D9A BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7D9C 79E2             data  dialog.basic
0149               
0150 7D9E BC00             byte  key.fctn.0, pane.focus.fb
0151 7DA0 7C0C             data  tibasic
0152                       ;-------------------------------------------------------
0153                       ; Dialog keys
0154                       ;-------------------------------------------------------
0155 7DA2 8100             byte  key.ctrl.a, pane.focus.fb
0156 7DA4 79CE             data  dialog.append
0157               
0158 7DA6 8800             byte  key.ctrl.h, pane.focus.fb
0159 7DA8 7966             data  dialog.help
0160               
0161 7DAA 8600             byte  key.ctrl.f, pane.focus.fb
0162 7DAC 7998             data  dialog.file
0163               
0164 7DAE 8900             byte  key.ctrl.i, pane.focus.fb
0165 7DB0 7984             data  dialog.insert
0166               
0167 7DB2 9300             byte  key.ctrl.s, pane.focus.fb
0168 7DB4 797A             data  dialog.save
0169               
0170 7DB6 8F00             byte  key.ctrl.o, pane.focus.fb
0171 7DB8 7970             data  dialog.load
0172               
0173 7DBA 9500             byte  key.ctrl.u, pane.focus.fb
0174 7DBC 79EC             data  dialog.shortcuts
0175               
0176 7DBE 9000             byte  key.ctrl.p, pane.focus.fb
0177 7DC0 798E             data  dialog.print
>>>>>>> b9b40bb (WIP optimize build scripts)
0178               
0179 7D7A 9000             byte  key.ctrl.p, pane.focus.fb
0180 7D7C 792C             data  dialog.print
0181               
0182                       ;
<<<<<<< HEAD
0183                       ; FCTN-9 has multiple purposes, if block mode is on
0184                       ; reset block, otherwise show dialog "Main Menu".
0185                       ;
0186 7D7E 0F00             byte  key.fctn.9, pane.focus.fb
0187 7D80 79B2             data  dialog.menu
0188                       ;-------------------------------------------------------
0189                       ; End of list
0190                       ;-------------------------------------------------------
0191 7D82 FFFF             data  EOL                           ; EOL
0192               
0193               
0194               *---------------------------------------------------------------
0195               * Action keys mapping table: Command Buffer (CMDB)
0196               *---------------------------------------------------------------
0197               keymap_actions.cmdb:
0198                       ;-------------------------------------------------------
0199                       ; Dialog: Main Menu
0200                       ;-------------------------------------------------------
0201 7D84 4664             byte  key.uc.f, id.dialog.menu
0202 7D86 7936             data  dialog.file
0203               
0204 7D88 4264             byte  key.uc.b, id.dialog.menu
0205 7D8A 7980             data  dialog.basic
0206               
0207 7D8C 4364             byte  key.uc.c, id.dialog.menu
0208 7D8E 7976             data  dialog.cartridge
0209               
0210 7D90 4F64             byte  key.uc.o, id.dialog.menu
0211 7D92 7962             data  dialog.config
0212               
0213 7D94 5364             byte  key.uc.s, id.dialog.menu
0214 7D96 798A             data  dialog.shortcuts
0215               
0216 7D98 4864             byte  key.uc.h, id.dialog.menu
0217 7D9A 7904             data  dialog.help
0218               
0219 7D9C 5164             byte  key.uc.q, id.dialog.menu
0220 7D9E 68AE             data  edkey.action.quit
0221               
0222 7DA0 0F64             byte  key.fctn.9, id.dialog.menu
0223 7DA2 6F22             data  edkey.action.cmdb.close.dialog
0224                       ;-------------------------------------------------------
0225                       ; Dialog: File
0226                       ;-------------------------------------------------------
0227 7DA4 4E69             byte  key.uc.n, id.dialog.file
0228 7DA6 6BFC             data  edkey.action.cmdb.file.new
0229               
0230 7DA8 5369             byte  key.uc.s, id.dialog.file
0231 7DAA 7918             data  dialog.save
0232               
0233 7DAC 4F69             byte  key.uc.o, id.dialog.file
0234 7DAE 790E             data  dialog.load
0235               
0236 7DB0 4969             byte  key.uc.i, id.dialog.file
0237 7DB2 7922             data  dialog.insert
0238               
0239 7DB4 4169             byte  key.uc.a, id.dialog.file
0240 7DB6 796C             data  dialog.append
0241               
0242 7DB8 5069             byte  key.uc.p, id.dialog.file
0243 7DBA 792C             data  dialog.print
0244                       ;-------------------------------------------------------
0245                       ; Dialog: Open file
0246                       ;-------------------------------------------------------
0247 7DBC 0E0A             byte  key.fctn.5, id.dialog.load
0248 7DBE 6EEC             data  edkey.action.cmdb.fastmode.toggle
0249               
0250 7DC0 0D0A             byte  key.enter, id.dialog.load
0251 7DC2 6C22             data  edkey.action.cmdb.load
0252                       ;-------------------------------------------------------
0253                       ; Dialog: Insert file at line ...
0254                       ;-------------------------------------------------------
0255 7DC4 0E0D             byte  key.fctn.5, id.dialog.insert
0256 7DC6 6EEC             data  edkey.action.cmdb.fastmode.toggle
0257               
0258 7DC8 0D0D             byte  key.enter, id.dialog.insert
0259 7DCA 6C78             data  edkey.action.cmdb.insert
0260                       ;-------------------------------------------------------
0261                       ; Dialog: Append file
0262                       ;-------------------------------------------------------
0263 7DCC 0E0E             byte  key.fctn.5, id.dialog.append
0264 7DCE 6EEC             data  edkey.action.cmdb.fastmode.toggle
0265               
0266 7DD0 0D0E             byte  key.enter, id.dialog.append
0267 7DD2 6CFE             data  edkey.action.cmdb.append
0268                       ;-------------------------------------------------------
0269                       ; Dialog: Copy clipboard to line ...
0270                       ;-------------------------------------------------------
0271 7DD4 0E67             byte  key.fctn.5, id.dialog.clipboard
0272 7DD6 6EEC             data  edkey.action.cmdb.fastmode.toggle
0273               
0274 7DD8 0167             byte  key.fctn.7, id.dialog.clipboard
0275 7DDA 7958             data  dialog.clipdev
0276               
0277 7DDC 3167             byte  key.num.1, id.dialog.clipboard
0278 7DDE 6D76             data  edkey.action.cmdb.clip.1
0279               
0280 7DE0 3267             byte  key.num.2, id.dialog.clipboard
0281 7DE2 6D7C             data  edkey.action.cmdb.clip.2
0282               
0283 7DE4 3367             byte  key.num.3, id.dialog.clipboard
0284 7DE6 6D82             data  edkey.action.cmdb.clip.3
0285               
0286 7DE8 3467             byte  key.num.4, id.dialog.clipboard
0287 7DEA 6D88             data  edkey.action.cmdb.clip.4
0288               
0289 7DEC 3567             byte  key.num.5, id.dialog.clipboard
0290 7DEE 6D8E             data  edkey.action.cmdb.clip.5
0291                       ;-------------------------------------------------------
0292                       ; Dialog: Configure
0293                       ;-------------------------------------------------------
0294 7DF0 436C             byte  key.uc.c, id.dialog.cfg
0295 7DF2 7958             data  dialog.clipdev
0296               
0297 7DF4 466C             byte  key.uc.f, id.dialog.cfg
0298 7DF6 79A8             data  dialog.font
0299                       ;-------------------------------------------------------
0300                       ; Dialog: Configure clipboard
0301                       ;-------------------------------------------------------
0302 7DF8 0D11             byte  key.enter, id.dialog.cfg.clip
0303 7DFA 6BAC             data  edkey.action.cmdb.cfg.clip
0304                       ;-------------------------------------------------------
0305                       ; Dialog: Configure font
0306                       ;-------------------------------------------------------
0307 7DFC 316E             byte  key.num.1, id.dialog.font
0308 7DFE 6FB8             data  edkey.action.cmdb.font1
0309               
0310 7E00 326E             byte  key.num.2, id.dialog.font
0311 7E02 6FBC             data  edkey.action.cmdb.font2
0312               
0313 7E04 336E             byte  key.num.3, id.dialog.font
0314 7E06 6FC2             data  edkey.action.cmdb.font3
0315               
0316 7E08 346E             byte  key.num.4, id.dialog.font
0317 7E0A 6FC8             data  edkey.action.cmdb.font4
0318               
0319 7E0C 356E             byte  key.num.5, id.dialog.font
0320 7E0E 6FCE             data  edkey.action.cmdb.font5
0321                       ;-------------------------------------------------------
0322                       ; Dialog: Save file
0323                       ;-------------------------------------------------------
0324 7E10 0D0B             byte  key.enter, id.dialog.save
0325 7E12 6DC2             data  edkey.action.cmdb.save
0326               
0327 7E14 0D0C             byte  key.enter, id.dialog.saveblock
0328 7E16 6DC2             data  edkey.action.cmdb.save
0329                       ;-------------------------------------------------------
0330                       ; Dialog: Print file
0331                       ;-------------------------------------------------------
0332 7E18 0D0F             byte  key.enter, id.dialog.print
0333 7E1A 6E42             data  edkey.action.cmdb.print
0334               
0335 7E1C 0D10             byte  key.enter, id.dialog.printblock
0336 7E1E 6E42             data  edkey.action.cmdb.print
0337                       ;-------------------------------------------------------
0338                       ; Dialog: Unsaved changes
0339                       ;-------------------------------------------------------
0340 7E20 0C65             byte  key.fctn.6, id.dialog.unsaved
0341 7E22 6EC2             data  edkey.action.cmdb.proceed
0342               
0343 7E24 2065             byte  key.space, id.dialog.unsaved
0344 7E26 6EC2             data  edkey.action.cmdb.proceed
0345               
0346 7E28 0D65             byte  key.enter, id.dialog.unsaved
0347 7E2A 7918             data  dialog.save
0348                       ;-------------------------------------------------------
0349                       ; Dialog: Cartridge
0350                       ;-------------------------------------------------------
0351 7E2C 466A             byte  key.uc.f, id.dialog.cartridge
0352 7E2E 7C1E             data  fg99.run.fcmd
0353               
0354 7E30 586A             byte  key.uc.x, id.dialog.cartridge
0355 7E32 7C0A             data  fg99.run.xbgem
0356               
0357 7E34 526A             byte  key.uc.r, id.dialog.cartridge
0358 7E36 7C14             data  fg99.run.rxb
0359               
0360 7E38 4F6A             byte  key.uc.o, id.dialog.cartridge
0361 7E3A 7C28             data  fg99.run.fbforth
=======
0183 7DC2 0F00             byte  key.fctn.9, pane.focus.fb
0184 7DC4 7A0A             data  dialog.menu
0185                       ;-------------------------------------------------------
0186                       ; End of list
0187                       ;-------------------------------------------------------
0188 7DC6 FFFF             data  EOL                           ; EOL
0189               
0190               
0191               *---------------------------------------------------------------
0192               * Action keys mapping table: Command Buffer (CMDB)
0193               *---------------------------------------------------------------
0194               keymap_actions.cmdb:
0195                       ;-------------------------------------------------------
0196                       ; Dialog: Main Menu
0197                       ;-------------------------------------------------------
0198 7DC8 4664             byte  key.uc.f, id.dialog.menu
0199 7DCA 7998             data  dialog.file
0200               
0201 7DCC 4364             byte  key.uc.c, id.dialog.menu
0202 7DCE 79D8             data  dialog.cartridge
0203               
0204 7DD0 4F64             byte  key.uc.o, id.dialog.menu
0205 7DD2 79C4             data  dialog.config
0206               
0207 7DD4 5364             byte  key.uc.s, id.dialog.menu
0208 7DD6 79EC             data  dialog.shortcuts
0209               
0210 7DD8 4864             byte  key.uc.h, id.dialog.menu
0211 7DDA 7966             data  dialog.help
0212               
0213 7DDC 5164             byte  key.uc.q, id.dialog.menu
0214 7DDE 687C             data  edkey.action.quit
0215               
0216 7DE0 0F64             byte  key.fctn.9, id.dialog.menu
0217 7DE2 6E2A             data  edkey.action.cmdb.close.dialog
0218                       ;-------------------------------------------------------
0219                       ; Dialog: File
0220                       ;-------------------------------------------------------
0221 7DE4 4E69             byte  key.uc.n, id.dialog.file
0222 7DE6 6AD6             data  edkey.action.cmdb.file.new
0223               
0224 7DE8 5369             byte  key.uc.s, id.dialog.file
0225 7DEA 797A             data  dialog.save
0226               
0227 7DEC 4F69             byte  key.uc.o, id.dialog.file
0228 7DEE 7970             data  dialog.load
0229               
0230 7DF0 4969             byte  key.uc.i, id.dialog.file
0231 7DF2 7984             data  dialog.insert
0232               
0233 7DF4 4169             byte  key.uc.a, id.dialog.file
0234 7DF6 79CE             data  dialog.append
0235               
0236 7DF8 5069             byte  key.uc.p, id.dialog.file
0237 7DFA 798E             data  dialog.print
0238                       ;-------------------------------------------------------
0239                       ; Dialog: Open file
0240                       ;-------------------------------------------------------
0241 7DFC 0E0A             byte  key.fctn.5, id.dialog.load
0242 7DFE 6DF4             data  edkey.action.cmdb.fastmode.toggle
0243               
0244 7E00 0D0A             byte  key.enter, id.dialog.load
0245 7E02 6AFC             data  edkey.action.cmdb.load
0246                       ;-------------------------------------------------------
0247                       ; Dialog: Insert file at line ...
0248                       ;-------------------------------------------------------
0249 7E04 0E0D             byte  key.fctn.5, id.dialog.insert
0250 7E06 6DF4             data  edkey.action.cmdb.fastmode.toggle
0251               
0252 7E08 0D0D             byte  key.enter, id.dialog.insert
0253 7E0A 6B40             data  edkey.action.cmdb.insert
0254                       ;-------------------------------------------------------
0255                       ; Dialog: Append file
0256                       ;-------------------------------------------------------
0257 7E0C 0E0E             byte  key.fctn.5, id.dialog.append
0258 7E0E 6DF4             data  edkey.action.cmdb.fastmode.toggle
0259               
0260 7E10 0D0E             byte  key.enter, id.dialog.append
0261 7E12 6BC2             data  edkey.action.cmdb.append
0262                       ;-------------------------------------------------------
0263                       ; Dialog: Copy clipboard to line ...
0264                       ;-------------------------------------------------------
0265 7E14 0E67             byte  key.fctn.5, id.dialog.clipboard
0266 7E16 6DF4             data  edkey.action.cmdb.fastmode.toggle
0267               
0268 7E18 0167             byte  key.fctn.7, id.dialog.clipboard
0269 7E1A 79BA             data  dialog.clipdev
0270               
0271 7E1C 3167             byte  key.num.1, id.dialog.clipboard
0272 7E1E 6C36             data  edkey.action.cmdb.clip.1
0273               
0274 7E20 3267             byte  key.num.2, id.dialog.clipboard
0275 7E22 6C3C             data  edkey.action.cmdb.clip.2
0276               
0277 7E24 3367             byte  key.num.3, id.dialog.clipboard
0278 7E26 6C42             data  edkey.action.cmdb.clip.3
0279               
0280 7E28 3467             byte  key.num.4, id.dialog.clipboard
0281 7E2A 6C48             data  edkey.action.cmdb.clip.4
0282               
0283 7E2C 3567             byte  key.num.5, id.dialog.clipboard
0284 7E2E 6C4E             data  edkey.action.cmdb.clip.5
0285                       ;-------------------------------------------------------
0286                       ; Dialog: Configure clipboard
0287                       ;-------------------------------------------------------
0288 7E30 0D11             byte  key.enter, id.dialog.clipdev
0289 7E32 6C82             data  edkey.action.cmdb.clipdev.configure
0290                       ;-------------------------------------------------------
0291                       ; Dialog: Configure
0292                       ;-------------------------------------------------------
0293 7E34 436C             byte  key.uc.c, id.dialog.config
0294 7E36 79BA             data  dialog.clipdev
0295                       ;-------------------------------------------------------
0296                       ; Dialog: Save file
0297                       ;-------------------------------------------------------
0298 7E38 0D0B             byte  key.enter, id.dialog.save
0299 7E3A 6CD2             data  edkey.action.cmdb.save
0300               
0301 7E3C 0D0C             byte  key.enter, id.dialog.saveblock
0302 7E3E 6CD2             data  edkey.action.cmdb.save
0303                       ;-------------------------------------------------------
0304                       ; Dialog: Print file
0305                       ;-------------------------------------------------------
0306 7E40 0D0F             byte  key.enter, id.dialog.print
0307 7E42 6D4E             data  edkey.action.cmdb.print
0308               
0309 7E44 0D10             byte  key.enter, id.dialog.printblock
0310 7E46 6D4E             data  edkey.action.cmdb.print
0311                       ;-------------------------------------------------------
0312                       ; Dialog: Unsaved changes
0313                       ;-------------------------------------------------------
0314 7E48 0C65             byte  key.fctn.6, id.dialog.unsaved
0315 7E4A 6DCA             data  edkey.action.cmdb.proceed
0316               
0317 7E4C 2065             byte  key.space, id.dialog.unsaved
0318 7E4E 6DCA             data  edkey.action.cmdb.proceed
0319               
0320 7E50 0D65             byte  key.enter, id.dialog.unsaved
0321 7E52 797A             data  dialog.save
0322                       ;-------------------------------------------------------
0323                       ; Dialog: Cartridge
0324                       ;-------------------------------------------------------
0325 7E54 426A             byte  key.uc.b, id.dialog.cartridge
0326 7E56 79E2             data  dialog.basic
0327               
0328 7E58 466A             byte  key.uc.f, id.dialog.cartridge
0329 7E5A 7C66             data  fg99.run.fcmd
0330               
0331 7E5C 586A             byte  key.uc.x, id.dialog.cartridge
0332 7E5E 7C52             data  fg99.run.xbgem
0333               
0334 7E60 526A             byte  key.uc.r, id.dialog.cartridge
0335 7E62 7C5C             data  fg99.run.rxb
0336               
0337 7E64 4F6A             byte  key.uc.o, id.dialog.cartridge
0338 7E66 7C70             data  fg99.run.fbforth
0339                       ;-------------------------------------------------------
0340                       ; Dialog: Basic
0341                       ;-------------------------------------------------------
0342 7E68 316B             byte  key.num.1, id.dialog.basic
0343 7E6A 7BE6             data  tibasic1
0344               
0345 7E6C 326B             byte  key.num.2, id.dialog.basic
0346 7E6E 7BEE             data  tibasic2
0347               
0348 7E70 336B             byte  key.num.3, id.dialog.basic
0349 7E72 7BF6             data  tibasic3
0350               
0351 7E74 346B             byte  key.num.4, id.dialog.basic
0352 7E76 7BFE             data  tibasic4
0353               
0354 7E78 356B             byte  key.num.5, id.dialog.basic
0355 7E7A 7C06             data  tibasic5
0356               
0357 7E7C 0E6B             byte  key.fctn.5, id.dialog.basic
0358 7E7E 6E00             data  edkey.action.cmdb.am.toggle
0359               
0360 7E80 206B             byte  key.space, id.dialog.basic
0361 7E82 7C38             data  tibasic.uncrunch
>>>>>>> b9b40bb (WIP optimize build scripts)
0362                       ;-------------------------------------------------------
0363                       ; Dialog: Basic
0364                       ;-------------------------------------------------------
<<<<<<< HEAD
0365 7E3C 316B             byte  key.num.1, id.dialog.basic
0366 7E3E 7B9E             data  tibasic1
0367               
0368 7E40 326B             byte  key.num.2, id.dialog.basic
0369 7E42 7BA6             data  tibasic2
0370               
0371 7E44 336B             byte  key.num.3, id.dialog.basic
0372 7E46 7BAE             data  tibasic3
0373               
0374 7E48 346B             byte  key.num.4, id.dialog.basic
0375 7E4A 7BB6             data  tibasic4
0376               
0377 7E4C 356B             byte  key.num.5, id.dialog.basic
0378 7E4E 7BBE             data  tibasic5
0379               
0380 7E50 0E6B             byte  key.fctn.5, id.dialog.basic
0381 7E52 6EF8             data  edkey.action.cmdb.am.toggle
0382               
0383 7E54 206B             byte  key.space, id.dialog.basic
0384 7E56 7BF0             data  tibasic.uncrunch
0385                       ;-------------------------------------------------------
0386                       ; Dialog: Shortcuts
0387                       ;-------------------------------------------------------
0388 7E58 436F             byte  key.uc.c, id.dialog.shortcuts
0389 7E5A 71A0             data  pane.action.colorscheme.cycle
0390               
0391 7E5C 526F             byte  key.uc.r, id.dialog.shortcuts
0392 7E5E 686E             data  edkey.action.toggle.ruler
0393               
0394 7E60 416F             byte  key.uc.a, id.dialog.shortcuts
0395 7E62 6F2A             data  edkey.action.cmdb.autoinsert
0396               
0397 7E64 316F             byte  key.num.1, id.dialog.shortcuts
0398 7E66 69BC             data  edkey.action.block.m1
0399               
0400 7E68 326F             byte  key.num.2, id.dialog.shortcuts
0401 7E6A 69C4             data  edkey.action.block.m2
0402               
0403 7E6C 476F             byte  key.uc.g, id.dialog.shortcuts
0404 7E6E 799E             data  dialog.goto
0405                       ;-------------------------------------------------------
0406                       ; Dialog: Goto
0407                       ;-------------------------------------------------------
0408 7E70 0D13             byte  key.enter, id.dialog.goto
0409 7E72 6F62             data  edkey.action.cmdb.goto
0410                       ;-------------------------------------------------------
0411                       ; Dialog: Help
0412                       ;-------------------------------------------------------
0413 7E74 2068             byte  key.space, id.dialog.help
0414 7E76 78F0             data  dialog.help.next
0415               
0416 7E78 0F68             byte  key.fctn.9, id.dialog.help
0417 7E7A 6F0C             data  edkey.action.cmdb.close.about
0418               
0419 7E7C 0D68             byte  key.enter, id.dialog.help
0420 7E7E 6F0C             data  edkey.action.cmdb.close.about
0421                       ;-------------------------------------------------------
0422                       ; Movement keys
0423                       ;-------------------------------------------------------
0424 7E80 0801             byte  key.fctn.s, pane.focus.cmdb
0425 7E82 6AE2             data  edkey.action.cmdb.left
0426               
0427 7E84 0901             byte  key.fctn.d, pane.focus.cmdb
0428 7E86 6AF4             data  edkey.action.cmdb.right
0429               
0430 7E88 BF01             byte  key.fctn.h, pane.focus.cmdb
0431 7E8A 6B0C             data  edkey.action.cmdb.home
0432               
0433 7E8C C201             byte  key.fctn.l, pane.focus.cmdb
0434 7E8E 6B20             data  edkey.action.cmdb.end
0435                       ;-------------------------------------------------------
0436                       ; Modifier keys
0437                       ;-------------------------------------------------------
0438 7E90 0701             byte  key.fctn.3, pane.focus.cmdb
0439 7E92 6B36             data  edkey.action.cmdb.clear
0440                       ;-------------------------------------------------------
0441                       ; Other action keys
0442                       ;-------------------------------------------------------
0443 7E94 0F01             byte  key.fctn.9, pane.focus.cmdb
0444 7E96 79B2             data  dialog.menu
0445               
0446 7E98 0501             byte  key.fctn.plus, pane.focus.cmdb
0447 7E9A 68AE             data  edkey.action.quit
0448               
0449 7E9C 8101             byte  key.ctrl.a, pane.focus.cmdb
0450 7E9E 6F04             data  edkey.action.cmdb.preset
0451               
0452 7EA0 8201             byte  key.ctrl.b, pane.focus.cmdb
0453 7EA2 6F04             data  edkey.action.cmdb.preset
0454               
0455 7EA4 8301             byte  key.ctrl.c, pane.focus.cmdb
0456 7EA6 6F04             data  edkey.action.cmdb.preset
0457               
0458 7EA8 9A01             byte  key.ctrl.z, pane.focus.cmdb
0459 7EAA 71A0             data  pane.action.colorscheme.cycle
0460                       ;------------------------------------------------------
0461                       ; End of list
0462                       ;-------------------------------------------------------
0463 7EAC FFFF             data  EOL                           ; EOL
=======
0365 7E84 436E             byte  key.uc.c, id.dialog.shortcuts
0366 7E86 7206             data  pane.action.colorscheme.cycle
0367               
0368 7E88 526E             byte  key.uc.r, id.dialog.shortcuts
0369 7E8A 683C             data  edkey.action.toggle.ruler
0370               
0371 7E8C 416E             byte  key.uc.a, id.dialog.shortcuts
0372 7E8E 6E32             data  edkey.action.cmdb.autoinsert
0373               
0374 7E90 316E             byte  key.num.1, id.dialog.shortcuts
0375 7E92 68F2             data  edkey.action.block.m1
0376               
0377 7E94 326E             byte  key.num.2, id.dialog.shortcuts
0378 7E96 68FA             data  edkey.action.block.m2
0379               
0380 7E98 476E             byte  key.uc.g, id.dialog.shortcuts
0381 7E9A 7A00             data  dialog.goto
0382                       ;-------------------------------------------------------
0383                       ; Dialog: Goto
0384                       ;-------------------------------------------------------
0385 7E9C 0D12             byte  key.enter, id.dialog.goto
0386 7E9E 6E6A             data  edkey.action.cmdb.goto
0387                       ;-------------------------------------------------------
0388                       ; Dialog: Help
0389                       ;-------------------------------------------------------
0390 7EA0 2068             byte  key.space, id.dialog.help
0391 7EA2 7952             data  dialog.help.next
0392               
0393 7EA4 0F68             byte  key.fctn.9, id.dialog.help
0394 7EA6 6E14             data  edkey.action.cmdb.close.about
0395               
0396 7EA8 0D68             byte  key.enter, id.dialog.help
0397 7EAA 6E14             data  edkey.action.cmdb.close.about
0398                       ;-------------------------------------------------------
0399                       ; Movement keys
0400                       ;-------------------------------------------------------
0401 7EAC 0801             byte  key.fctn.s, pane.focus.cmdb
0402 7EAE 6A0C             data  edkey.action.cmdb.left
0403               
0404 7EB0 0901             byte  key.fctn.d, pane.focus.cmdb
0405 7EB2 6A1E             data  edkey.action.cmdb.right
0406               
0407 7EB4 BF01             byte  key.fctn.h, pane.focus.cmdb
0408 7EB6 6A36             data  edkey.action.cmdb.home
0409               
0410 7EB8 C201             byte  key.fctn.l, pane.focus.cmdb
0411 7EBA 6A4A             data  edkey.action.cmdb.end
0412                       ;-------------------------------------------------------
0413                       ; Modifier keys
0414                       ;-------------------------------------------------------
0415 7EBC 0701             byte  key.fctn.3, pane.focus.cmdb
0416 7EBE 6A60             data  edkey.action.cmdb.clear
0417                       ;-------------------------------------------------------
0418                       ; Other action keys
0419                       ;-------------------------------------------------------
0420 7EC0 0F01             byte  key.fctn.9, pane.focus.cmdb
0421 7EC2 7A0A             data  dialog.menu
0422               
0423 7EC4 0501             byte  key.fctn.plus, pane.focus.cmdb
0424 7EC6 687C             data  edkey.action.quit
0425               
0426 7EC8 8101             byte  key.ctrl.a, pane.focus.cmdb
0427 7ECA 6E0C             data  edkey.action.cmdb.preset
0428               
0429 7ECC 8201             byte  key.ctrl.b, pane.focus.cmdb
0430 7ECE 6E0C             data  edkey.action.cmdb.preset
0431               
0432 7ED0 8301             byte  key.ctrl.c, pane.focus.cmdb
0433 7ED2 6E0C             data  edkey.action.cmdb.preset
0434               
0435 7ED4 9A01             byte  key.ctrl.z, pane.focus.cmdb
0436 7ED6 7206             data  pane.action.colorscheme.cycle
0437                       ;------------------------------------------------------
0438                       ; End of list
0439                       ;-------------------------------------------------------
0440 7ED8 FFFF             data  EOL                           ; EOL
>>>>>>> b9b40bb (WIP optimize build scripts)
                   < stevie_b1.asm
0155                       ;-----------------------------------------------------------------------
0156                       ; Bank full check
0157                       ;-----------------------------------------------------------------------
0161                       ;-----------------------------------------------------------------------
0162                       ; Show ROM bank in CPU crash screen
0163                       ;-----------------------------------------------------------------------
0164                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F50 06A0  32         bl    @putat
     7F52 2442     
0010 7F54 0314                   byte 3,20
0011 7F56 7F88                   data cpu.crash.showbank.bankstr
0012 7F58 10FF  14         jmp   $
                   < stevie_b1.asm
0165                       ;-----------------------------------------------------------------------
0166                       ; Table for VDP modes
0167                       ;-----------------------------------------------------------------------
0168                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equates.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F60 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F62 003F     
     7F64 0243     
     7F66 05F4     
     7F68 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F6A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F6C 003F     
     7F6E 0674     
     7F70 07F4     
     7F72 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F74 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F76 000C     
     7F78 0006     
     7F7A 0007     
     7F7C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F7E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F80 000C     
     7F82 0006     
     7F84 0007     
     7F86 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b1.asm
0169                       ;-----------------------------------------------------------------------
0170                       ; Vector table
0171                       ;-----------------------------------------------------------------------
0172                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F88 0552             stri 'ROM#1'
     7F8A 4F4D     
     7F8C 2331     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
<<<<<<< HEAD
0015 7FC0 60FE     vec.1   data  mem.sams.setup.stevie ;
=======
0015 7FC0 6100     vec.1   data  mem.sams.setup.stevie ;
>>>>>>> b9b40bb (WIP optimize build scripts)
0016 7FC2 2026     vec.2   data  cpu.crash             ;
0017 7FC4 2026     vec.3   data  cpu.crash             ;
0018 7FC6 2026     vec.4   data  cpu.crash             ;
0019 7FC8 2026     vec.5   data  cpu.crash             ;
0020 7FCA 2026     vec.6   data  cpu.crash             ;
0021 7FCC 2026     vec.7   data  cpu.crash             ;
0022 7FCE 2026     vec.8   data  cpu.crash             ;
0023 7FD0 2026     vec.9   data  cpu.crash             ;
<<<<<<< HEAD
0024 7FD2 6FF4     vec.10  data  edb.line.pack.fb      ;
0025 7FD4 70EC     vec.11  data  edb.line.unpack.fb    ;
0026 7FD6 7B02     vec.12  data  edb.clear.sams        ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 6B9A     vec.15  data  edkey.action.cmdb.show
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6FE0     vec.18  data  cmdb.dialog.close     ;
0033 7FE4 7A16     vec.19  data  cmdb.cmd.clear        ;
0034 7FE6 2026     vec.20  data  cpu.crash             ;
0035 7FE8 7A82     vec.21  data  fb.vdpdump            ;
0036 7FEA 30D2     vec.22  data  fb.row2line           ;
=======
0024 7FD2 705A     vec.10  data  edb.line.pack.fb      ;
0025 7FD4 7152     vec.11  data  edb.line.unpack.fb    ;
0026 7FD6 7B68     vec.12  data  edb.clear.sams        ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 6AC4     vec.15  data  edkey.action.cmdb.show
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6EAC     vec.18  data  cmdb.dialog.close     ;
0033 7FE4 7A6E     vec.19  data  cmdb.cmd.clear        ;
0034 7FE6 2026     vec.20  data  cpu.crash             ;
0035 7FE8 7AEA     vec.21  data  fb.vdpdump            ;
0036 7FEA 30C0     vec.22  data  fb.row2line           ;
>>>>>>> b9b40bb (WIP optimize build scripts)
0037 7FEC 2026     vec.23  data  cpu.crash             ;
0038 7FEE 2026     vec.24  data  cpu.crash             ;
0039 7FF0 2026     vec.25  data  cpu.crash             ;
0040 7FF2 2026     vec.26  data  cpu.crash             ;
<<<<<<< HEAD
0041 7FF4 75F6     vec.27  data  pane.errline.hide     ;
0042 7FF6 7452     vec.28  data  pane.cursor.blink     ;
0043 7FF8 7434     vec.29  data  pane.cursor.hide      ;
0044 7FFA 7594     vec.30  data  pane.errline.show     ;
0045 7FFC 71FE     vec.31  data  pane.action.colorscheme.load
0046 7FFE 741A     vec.32  data  pane.action.colorscheme.statlines
                   < stevie_b1.asm
0173                                                   ; Vector table bank 1
=======
0041 7FF4 7658     vec.27  data  pane.errline.hide     ;
0042 7FF6 74B0     vec.28  data  pane.cursor.blink     ;
0043 7FF8 7492     vec.29  data  pane.cursor.hide      ;
0044 7FFA 75F6     vec.30  data  pane.errline.show     ;
0045 7FFC 7264     vec.31  data  pane.action.colorscheme.load
0046 7FFE 7478     vec.32  data  pane.action.colorscheme.statlines
                   < stevie_b1.asm
0168                                                   ; Vector table bank 1
0169               *--------------------------------------------------------------
0170               * Video mode configuration
0171               *--------------------------------------------------------------
0172      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0173      0004     spfbck  equ   >04                   ; Screen background color.
0174      385A     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0175      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0176      0050     colrow  equ   80                    ; Columns per row
0177      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0178      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0179      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0180      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
>>>>>>> b9b40bb (WIP optimize build scripts)

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F50 :     
    BANKX.VDPTAB........ >7F60 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CMD............ >A72F :     
<<<<<<< HEAD
    CMDB.CMD.CLEAR...... >7A16 :     
    CMDB.CMD.CLEAR.VECTOR >7A1E :     
    CMDB.CMD.GETLENGTH.. >7A20 :     
    CMDB.CMD.GETLENGTH.VECTOR >7A28 :     
    CMDB.CMD.PRESET..... >7A2A :     
    CMDB.CMD.PRESET.VECTOR >7A32 :     
    CMDB.CMD.SET........ >7A34 :     
    CMDB.CMD.SET.VECTOR. >7A3C :     
=======
    CMDB.CMD.CLEAR...... >7A6E :     
    CMDB.CMD.CLEAR.VECTOR >7A76 :     
    CMDB.CMD.GETLENGTH.. >7A78 :     
    CMDB.CMD.GETLENGTH.VECTOR >7A80 :     
    CMDB.CMD.PRESET..... >7A82 :     
    CMDB.CMD.PRESET.VECTOR >7A8A :     
    CMDB.CMD.SET........ >7A8C :     
    CMDB.CMD.SET.VECTOR. >7A94 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
<<<<<<< HEAD
    CMDB.DIALOG.CLOSE... >6FE0 :     
    CMDB.DIALOG.CLOSE.EXIT >6FF0 :     
=======
    CMDB.DIALOG.CLOSE... >6EAC :     
    CMDB.DIALOG.CLOSE.EXIT >6EBC :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
<<<<<<< HEAD
    CMDB.INIT........... >325A :     
    CMDB.INIT.EXIT...... >32AE :     
=======
    CMDB.INIT........... >3248 :     
    CMDB.INIT.EXIT...... >329C :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
<<<<<<< HEAD
    CMDB.REFRESH........ >7A0C :     
    CMDB.REFRESH.VECTOR. >7A14 :     
=======
    CMDB.REFRESH........ >7A64 :     
    CMDB.REFRESH.VECTOR. >7A6C :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
<<<<<<< HEAD
    COLORS.LINE.SET..... >746E :     
    COLORS.LINE.SET.EXIT >74A6 :     
=======
    COLORS.LINE.SET..... >74D0 :     
    COLORS.LINE.SET.EXIT >7508 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
<<<<<<< HEAD
    CONST.10............ >38A4 :     
    CONST.2............. >2004 :     
    CONST.3............. >389A :     
    CONST.4............. >2006 :     
    CONST.5............. >389C :     
    CONST.6............. >389E :     
    CONST.7............. >38A0 :     
    CONST.8............. >2008 :     
    CONST.9............. >38A2 :     
=======
    CONST.10............ >38F8 :     
    CONST.2............. >2004 :     
    CONST.3............. >38EE :     
    CONST.4............. >2006 :     
    CONST.5............. >38F0 :     
    CONST.6............. >38F2 :     
    CONST.7............. >38F4 :     
    CONST.8............. >2008 :     
    CONST.9............. >38F6 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F50 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F88 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
<<<<<<< HEAD
    DEF.CLIP.FNAME.A.... >3CB7 :     
    DEF.CLIP.FNAME.B.... >3CC1 :     
    DEF.CLIP.FNAME.C.... >3CCB :     
    DEF.DEVICES......... >3CD5 :     
    DEF.MASTCAT......... >3D05 :     
    DEF.PRINTER.FNAME... >3CB0 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >796C :     
    DIALOG.APPEND.VECTOR >7974 :     
    DIALOG.BASIC........ >7980 :     
    DIALOG.BASIC.VECTOR. >7988 :     
    DIALOG.CARTRIDGE.... >7976 :     
    DIALOG.CARTRIDGE.VECTOR >797E :     
    DIALOG.CLIPBOARD.... >794E :     
    DIALOG.CLIPBOARD.VECTOR >7956 :     
    DIALOG.CLIPDEV...... >7958 :     
    DIALOG.CLIPDEV.VECTOR >7960 :     
    DIALOG.CONFIG....... >7962 :     
    DIALOG.CONFIG.VECTOR >796A :     
    DIALOG.EDITOR....... >7994 :     
    DIALOG.EDITOR.VECTOR >799C :     
    DIALOG.FILE......... >7936 :     
    DIALOG.FILE.VECTOR.. >793E :     
    DIALOG.FONT......... >79A8 :     
    DIALOG.FONT.VECTOR.. >79B0 :     
    DIALOG.GOTO......... >799E :     
    DIALOG.GOTO.VECTOR.. >79A6 :     
    DIALOG.HEARTS.TAT... >7A3E :     
    DIALOG.HEARTS.TAT.VECTOR >7A46 :     
    DIALOG.HELP......... >7904 :     
    DIALOG.HELP.NEXT.... >78F0 :     
    DIALOG.HELP.VECTOR.. >790C :     
    DIALOG.INSERT....... >7922 :     
    DIALOG.INSERT.VECTOR >792A :     
    DIALOG.LOAD......... >790E :     
    DIALOG.LOAD.VECTOR.. >7916 :     
    DIALOG.MENU......... >79B2 :     
    DIALOG.MENU.VECTOR.. >79C6 :     
    DIALOG.PRINT........ >792C :     
    DIALOG.PRINT.VECTOR. >7934 :     
    DIALOG.SAVE......... >7918 :     
    DIALOG.SAVE.VECTOR.. >7920 :     
    DIALOG.SHORTCUTS.... >798A :     
    DIALOG.SHORTCUTS.VECTOR >7992 :     
    DIALOG.UNSAVED...... >7940 :     
    DIALOG.UNSAVED.VECTOR >794C :     
=======
    DEF.CLIP.FNAME...... >3D0B :     
    DEF.CLIP.FNAME.B.... >3D15 :     
    DEF.CLIP.FNAME.C.... >3D1F :     
    DEF.DEVICES......... >3D29 :     
    DEF.PRINTER.FNAME... >3D04 :     
    DEVICE.9938......... >0000 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >79CE :     
    DIALOG.APPEND.VECTOR >79D6 :     
    DIALOG.BASIC........ >79E2 :     
    DIALOG.BASIC.VECTOR. >79EA :     
    DIALOG.CARTRIDGE.... >79D8 :     
    DIALOG.CARTRIDGE.VECTOR >79E0 :     
    DIALOG.CLIPBOARD.... >79B0 :     
    DIALOG.CLIPBOARD.VECTOR >79B8 :     
    DIALOG.CLIPDEV...... >79BA :     
    DIALOG.CLIPDEV.VECTOR >79C2 :     
    DIALOG.CONFIG....... >79C4 :     
    DIALOG.CONFIG.VECTOR >79CC :     
    DIALOG.EDITOR....... >79F6 :     
    DIALOG.EDITOR.VECTOR >79FE :     
    DIALOG.FILE......... >7998 :     
    DIALOG.FILE.VECTOR.. >79A0 :     
    DIALOG.GOTO......... >7A00 :     
    DIALOG.GOTO.VECTOR.. >7A08 :     
    DIALOG.HELP......... >7966 :     
    DIALOG.HELP.NEXT.... >7952 :     
    DIALOG.HELP.VECTOR.. >796E :     
    DIALOG.INSERT....... >7984 :     
    DIALOG.INSERT.VECTOR >798C :     
    DIALOG.LOAD......... >7970 :     
    DIALOG.LOAD.VECTOR.. >7978 :     
    DIALOG.MENU......... >7A0A :     
    DIALOG.MENU.VECTOR.. >7A1E :     
    DIALOG.PRINT........ >798E :     
    DIALOG.PRINT.VECTOR. >7996 :     
    DIALOG.SAVE......... >797A :     
    DIALOG.SAVE.VECTOR.. >7982 :     
    DIALOG.SHORTCUTS.... >79EC :     
    DIALOG.SHORTCUTS.VECTOR >79F4 :     
    DIALOG.UNSAVED...... >79A2 :     
    DIALOG.UNSAVED.VECTOR >79AE :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
<<<<<<< HEAD
    EDB.BK.FB.ROW....... >A51E :     
    EDB.BK.FB.TOPLINE... >A51C :     
    EDB.BLOCK.CLIP...... >7B2A :     
    EDB.BLOCK.CLIP.VECTOR >7B32 :     
    EDB.BLOCK.COPY...... >7B48 :     
    EDB.BLOCK.COPY.VECTOR >7B50 :     
    EDB.BLOCK.DELETE.... >7B3E :     
    EDB.BLOCK.DELETE.VECTOR >7B46 :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7B0C :     
    EDB.BLOCK.MARK.M1... >7B16 :     
    EDB.BLOCK.MARK.M1.VECTOR >7B1E :     
    EDB.BLOCK.MARK.M2... >7B20 :     
    EDB.BLOCK.MARK.M2.VECTOR >7B28 :     
    EDB.BLOCK.MARK.VECTOR >7B14 :     
    EDB.BLOCK.RESET..... >7B34 :     
    EDB.BLOCK.RESET.VECTOR >7B3C :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7B02 :     
    EDB.CLEAR.SAMS.VECTOR >7B0A :     
=======
    EDB.BLOCK.CLIP...... >7B90 :     
    EDB.BLOCK.CLIP.VECTOR >7B98 :     
    EDB.BLOCK.COPY...... >7BAE :     
    EDB.BLOCK.COPY.VECTOR >7BB6 :     
    EDB.BLOCK.DELETE.... >7BA4 :     
    EDB.BLOCK.DELETE.VECTOR >7BAC :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7B72 :     
    EDB.BLOCK.MARK.M1... >7B7C :     
    EDB.BLOCK.MARK.M1.VECTOR >7B84 :     
    EDB.BLOCK.MARK.M2... >7B86 :     
    EDB.BLOCK.MARK.M2.VECTOR >7B8E :     
    EDB.BLOCK.MARK.VECTOR >7B7A :     
    EDB.BLOCK.RESET..... >7B9A :     
    EDB.BLOCK.RESET.VECTOR >7BA2 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7B68 :     
    EDB.CLEAR.SAMS.VECTOR >7B70 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A522 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
<<<<<<< HEAD
    EDB.FREE............ >A572 :     
    EDB.HIPAGE.ALLOC.... >36FE :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >370A :     
    EDB.HIPAGE.ALLOC.CRASH >3734 :     
    EDB.HIPAGE.ALLOC.EXIT >373C :     
    EDB.HIPAGE.ALLOC.SETPAGE >3726 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3214 :     
    EDB.INIT.EXIT....... >3254 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7B52 :     
    EDB.LINE.DEL.VECTOR. >7B5A :     
    EDB.LINE.GETLENGTH.. >3696 :     
    EDB.LINE.GETLENGTH.EXIT >36D2 :     
    EDB.LINE.GETLENGTH.NULL >36CE :     
    EDB.LINE.GETLENGTH2. >36DA :     
    EDB.LINE.GETLENGTH2.EXIT >36F8 :     
    EDB.LINE.MAPPAGE.... >364C :     
    EDB.LINE.MAPPAGE.EXIT >368E :     
    EDB.LINE.MAPPAGE.LOOKUP >3666 :     
    EDB.LINE.PACK.FB.... >6FF4 :     
    EDB.LINE.PACK.FB.CHECK80 >7032 :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >7042 :     
    EDB.LINE.PACK.FB.COPYLINE >7098 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >70B2 :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >70AE :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >70A4 :     
    EDB.LINE.PACK.FB.CRASH >703A :     
    EDB.LINE.PACK.FB.EXIT >70E0 :     
    EDB.LINE.PACK.FB.PREPARE >7068 :     
    EDB.LINE.PACK.FB.PREPEXIT >70C6 :     
    EDB.LINE.PACK.FB.RTRIM >704C :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >705E :     
    EDB.LINE.PACK.FB.SCAN >7022 :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >7074 :     
    EDB.LINE.UNPACK.FB.. >70EC :     
    EDB.LINE.UNPACK.FB.CLEAR >714A :     
    EDB.LINE.UNPACK.FB.COPY >717C :     
    EDB.LINE.UNPACK.FB.EXIT >7188 :     
    EDB.LINE.UNPACK.FB.GETLEN >7142 :     
    EDB.LINE.UNPACK.FB.PREPARE >7158 :     
=======
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >36EC :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >36F8 :     
    EDB.HIPAGE.ALLOC.CRASH >3722 :     
    EDB.HIPAGE.ALLOC.EXIT >372A :     
    EDB.HIPAGE.ALLOC.SETPAGE >3714 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3202 :     
    EDB.INIT.EXIT....... >3242 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7BB8 :     
    EDB.LINE.DEL.VECTOR. >7BC0 :     
    EDB.LINE.GETLENGTH.. >3684 :     
    EDB.LINE.GETLENGTH.EXIT >36C0 :     
    EDB.LINE.GETLENGTH.NULL >36BC :     
    EDB.LINE.GETLENGTH2. >36C8 :     
    EDB.LINE.GETLENGTH2.EXIT >36E6 :     
    EDB.LINE.MAPPAGE.... >363A :     
    EDB.LINE.MAPPAGE.EXIT >367C :     
    EDB.LINE.MAPPAGE.LOOKUP >3654 :     
    EDB.LINE.PACK.FB.... >705A :     
    EDB.LINE.PACK.FB.CHECK80 >7098 :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >70A8 :     
    EDB.LINE.PACK.FB.COPYLINE >70FE :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >7118 :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >7114 :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >710A :     
    EDB.LINE.PACK.FB.CRASH >70A0 :     
    EDB.LINE.PACK.FB.EXIT >7146 :     
    EDB.LINE.PACK.FB.PREPARE >70CE :     
    EDB.LINE.PACK.FB.PREPEXIT >712C :     
    EDB.LINE.PACK.FB.RTRIM >70B2 :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >70C4 :     
    EDB.LINE.PACK.FB.SCAN >7088 :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >70DA :     
    EDB.LINE.UNPACK.FB.. >7152 :     
    EDB.LINE.UNPACK.FB.CLEAR >71B0 :     
    EDB.LINE.UNPACK.FB.COPY >71E2 :     
    EDB.LINE.UNPACK.FB.EXIT >71EE :     
    EDB.LINE.UNPACK.FB.GETLEN >71A8 :     
    EDB.LINE.UNPACK.FB.PREPARE >71BE :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A520 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
<<<<<<< HEAD
    EDKEY.ACTION.BLOCK.COPY >69D8 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >6A0E :     
    EDKEY.ACTION.BLOCK.DELETE >6A14 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >6A3E :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >6A78 :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >6A8E :     
    EDKEY.ACTION.BLOCK.M1 >69BC :     
    EDKEY.ACTION.BLOCK.M2 >69C4 :     
    EDKEY.ACTION.BLOCK.MARK >69B4 :     
    EDKEY.ACTION.BLOCK.MOVE >6A42 :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6A74 :     
    EDKEY.ACTION.BLOCK.RESET >69CC :     
    EDKEY.ACTION.BOT.... >649E :     
    EDKEY.ACTION.BOT.EXIT >64CE :     
    EDKEY.ACTION.BOT.REFRESH >64AE :     
    EDKEY.ACTION.BOTSCR. >64D2 :     
    EDKEY.ACTION.BOTSCR.CURSOR >64E6 :     
    EDKEY.ACTION.BOTSCR.EOF >64F8 :     
    EDKEY.ACTION.BOTSCR.EXIT >6518 :     
    EDKEY.ACTION.CHAR... >6806 :     
    EDKEY.ACTION.CHAR.EXIT >686A :     
    EDKEY.ACTION.CHAR.INSERT >6828 :     
    EDKEY.ACTION.CHAR.OVERWRITE >682C :     
    EDKEY.ACTION.CHAR.OVERWRITE.INCX >6854 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6EF8 :     
    EDKEY.ACTION.CMDB.APPEND >6CFE :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6D68 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6D3C :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6F2A :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6F5A :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6F4C :     
    EDKEY.ACTION.CMDB.CFG.CLIP >6BAC :     
    EDKEY.ACTION.CMDB.CFG.CLIP.EXIT >6BF8 :     
    EDKEY.ACTION.CMDB.CFG.CLIP.MESSAGE >6BD8 :     
    EDKEY.ACTION.CMDB.CHAR >6B42 :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6B8C :     
    EDKEY.ACTION.CMDB.CLEAR >6B36 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6B3E :     
    EDKEY.ACTION.CMDB.CLIP >6D94 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6D76 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6D7C :     
    EDKEY.ACTION.CMDB.CLIP.3 >6D82 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6D88 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6D8E :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6F0C :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6F22 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6F26 :     
    EDKEY.ACTION.CMDB.END >6B20 :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6EEC :     
    EDKEY.ACTION.CMDB.FILE.NEW >6BFC :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6C1A :     
    EDKEY.ACTION.CMDB.FONT.EXIT >6FDC :     
    EDKEY.ACTION.CMDB.FONT.LOAD >6FD4 :     
    EDKEY.ACTION.CMDB.FONT1 >6FB8 :     
    EDKEY.ACTION.CMDB.FONT2 >6FBC :     
    EDKEY.ACTION.CMDB.FONT3 >6FC2 :     
    EDKEY.ACTION.CMDB.FONT4 >6FC8 :     
    EDKEY.ACTION.CMDB.FONT5 >6FCE :     
    EDKEY.ACTION.CMDB.GOTO >6F62 :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6FB4 :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6FA0 :     
    EDKEY.ACTION.CMDB.GOTO.PREPARE >6F86 :     
    EDKEY.ACTION.CMDB.HIDE >6BA4 :     
    EDKEY.ACTION.CMDB.HOME >6B0C :     
    EDKEY.ACTION.CMDB.INSERT >6C78 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6CF0 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6CB6 :     
    EDKEY.ACTION.CMDB.LEFT >6AE2 :     
    EDKEY.ACTION.CMDB.LOAD >6C22 :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6C74 :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6C64 :     
    EDKEY.ACTION.CMDB.PRESET >6F04 :     
    EDKEY.ACTION.CMDB.PRINT >6E42 :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6E9E :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6EB4 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6EAC :     
    EDKEY.ACTION.CMDB.PROCEED >6EC2 :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6EE8 :     
    EDKEY.ACTION.CMDB.RIGHT >6AF4 :     
    EDKEY.ACTION.CMDB.SAVE >6DC2 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6E1E :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6E34 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6E2C :     
    EDKEY.ACTION.CMDB.SHOW >6B9A :     
    EDKEY.ACTION.CMDB.TOGGLE >6B94 :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6BA8 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >68BC :     
    EDKEY.ACTION.DEL_CHAR >6596 :     
    EDKEY.ACTION.DEL_CHAR.EXIT >6610 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >65EE :     
    EDKEY.ACTION.DEL_CHAR.PREP >65D4 :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >659E :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >65A8 :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >65C6 :     
    EDKEY.ACTION.DEL_CHAR.SAVE >6604 :     
    EDKEY.ACTION.DEL_EOL >6614 :     
    EDKEY.ACTION.DEL_EOL.EXIT >6644 :     
    EDKEY.ACTION.DEL_EOL_LOOP >6630 :     
    EDKEY.ACTION.DEL_LINE >6648 :     
    EDKEY.ACTION.DEL_LINE.DOIT >6676 :     
    EDKEY.ACTION.DEL_LINE.EXIT >66A6 :     
    EDKEY.ACTION.DEL_LINE.REFRESH >6686 :     
    EDKEY.ACTION.DOWN... >63D6 :     
    EDKEY.ACTION.DOWN.EXIT >63DA :     
    EDKEY.ACTION.END.... >628E :     
    EDKEY.ACTION.ENTER.. >6768 :     
    EDKEY.ACTION.ENTER.NEWLINE >6780 :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6794 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >6AAE :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >6AB8 :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >6AC2 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >6AD2 :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >68CC :     
    EDKEY.ACTION.FB.FNAME.DOIT >68F0 :     
    EDKEY.ACTION.FB.FNAME.DOIT.EXIT >6918 :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >6910 :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >68DE :     
    EDKEY.ACTION.FB.LOAD.CHECK.MASTCAT >694E :     
    EDKEY.ACTION.FB.LOAD.FILE >691E :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT1 >6972 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT2 >6988 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT3 >6992 :     
    EDKEY.ACTION.FB.LOAD.LOADFILE >6964 :     
    EDKEY.ACTION.FB.LOAD.MASTCAT >69A0 :     
    EDKEY.ACTION.FB.TAB.NEXT >6AA0 :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >6AA8 :     
    EDKEY.ACTION.FB.TAB.PREV >6A92 :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >6A9A :     
    EDKEY.ACTION.GOTO... >6570 :     
    EDKEY.ACTION.GOTO.REFRESH >658A :     
    EDKEY.ACTION.HOME... >6286 :     
    EDKEY.ACTION.INS_CHAR >66B2 :     
    EDKEY.ACTION.INS_CHAR.APPEND >6748 :     
    EDKEY.ACTION.INS_CHAR.EXIT >674C :     
    EDKEY.ACTION.INS_CHAR.LOOP >6724 :     
    EDKEY.ACTION.INS_CHAR.PREP >6712 :     
    EDKEY.ACTION.INS_CHAR.WS >66AA :     
    EDKEY.ACTION.INS_LINE >6750 :     
    EDKEY.ACTION.INS_LINE.EXIT >6758 :     
    EDKEY.ACTION.INS_LINE_AFTER >675C :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >6764 :     
    EDKEY.ACTION.INS_ONOFF >67F4 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >6800 :     
    EDKEY.ACTION.LEFT... >6250 :     
    EDKEY.ACTION.NEWLINE >67A8 :     
    EDKEY.ACTION.NEWLINE.DOWN >67CC :     
    EDKEY.ACTION.NEWLINE.EXIT >67F0 :     
    EDKEY.ACTION.NEWLINE.REST >67D4 :     
    EDKEY.ACTION.NPAGE.. >6420 :     
    EDKEY.ACTION.NPAGE.EXIT >645C :     
    EDKEY.ACTION.NPAGE.REFRESH >644A :     
    EDKEY.ACTION.NPAGE.SANITY >6434 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6444 :     
    EDKEY.ACTION.NWORD.. >6302 :     
    EDKEY.ACTION.NWORD.EXIT >635A :     
    EDKEY.ACTION.NWORD_DONE >6352 :     
    EDKEY.ACTION.NWORD_MS >631A :     
    EDKEY.ACTION.NWORD_SCAN >631C :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >6326 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >6334 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >633C :     
    EDKEY.ACTION.PPAGE.. >63DE :     
    EDKEY.ACTION.PPAGE.EXIT >641C :     
    EDKEY.ACTION.PPAGE.REFRESH >640A :     
    EDKEY.ACTION.PPAGE.SANITY >63F2 :     
    EDKEY.ACTION.PPAGE.TOPLINE >6404 :     
    EDKEY.ACTION.PWORD.. >62B0 :     
    EDKEY.ACTION.PWORD.EXIT >62FA :     
    EDKEY.ACTION.PWORD_DONE >62F2 :     
    EDKEY.ACTION.PWORD_SCAN >62C2 :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62C8 :     
    EDKEY.ACTION.QUIT... >68AE :     
    EDKEY.ACTION.RIGHT.. >626A :     
    EDKEY.ACTION.SCROLL.LEFT >6362 :     
    EDKEY.ACTION.SCROLL.RIGHT >6396 :     
    EDKEY.ACTION.TOGGLE.RULER >686E :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >68A4 :     
    EDKEY.ACTION.TOGGLE.RULER.FB >68A0 :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >687E :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6888 :     
    EDKEY.ACTION.TOP.... >6460 :     
    EDKEY.ACTION.TOP.REFRESH >6470 :     
    EDKEY.ACTION.TOPSCR. >6480 :     
    EDKEY.ACTION.TOPSCR.REFRESH >6490 :     
    EDKEY.ACTION.UP..... >63CE :     
    EDKEY.ACTION.UP.EXIT >63D2 :     
    EDKEY.ACTIONS.INS.CHAR.EMPTY_LINE >66BA :     
    EDKEY.FB.GOTO.LINE.. >654C :     
    EDKEY.FB.GOTO.ROW... >6546 :     
    EDKEY.FB.GOTO.TOPROW >651E :     
    EDKEY.KEY.CHECK.NEXT >61C4 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61E4 :     
    EDKEY.KEY.CHECK.SCOPE >61EA :     
    EDKEY.KEY.PROCESS... >6164 :     
    EDKEY.KEY.PROCESS.ACTION >6204 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >6218 :     
    EDKEY.KEY.PROCESS.CRASH >6236 :     
    EDKEY.KEY.PROCESS.ENTER >623E :     
    EDKEY.KEY.PROCESS.EXIT >624C :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61C0 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61BA :     
    EDKEY.KEY.PROCESS.SPECIAL >6184 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61B4 :     
    EDKEY.KEYSCAN.HOOK.. >611C :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6144 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >615E :     
    EDKEY.KEYSCAN.HOOK.EXIT >6160 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >79DA :     
    ERROR.DISPLAY.VECTOR >79E2 :     
    ERRPANE.EXIT........ >32DC :     
    ERRPANE.INIT........ >32B6 :     
=======
    EDKEY.ACTION.BLOCK.COPY >690E :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >6944 :     
    EDKEY.ACTION.BLOCK.DELETE >694A :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >6970 :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >69A6 :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >69BC :     
    EDKEY.ACTION.BLOCK.M1 >68F2 :     
    EDKEY.ACTION.BLOCK.M2 >68FA :     
    EDKEY.ACTION.BLOCK.MARK >68EA :     
    EDKEY.ACTION.BLOCK.MOVE >6974 :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >69A2 :     
    EDKEY.ACTION.BLOCK.RESET >6902 :     
    EDKEY.ACTION.BOT.... >648C :     
    EDKEY.ACTION.BOT.EXIT >64B8 :     
    EDKEY.ACTION.BOT.REFRESH >649C :     
    EDKEY.ACTION.BOTSCR. >64BC :     
    EDKEY.ACTION.BOTSCR.CURSOR >64D0 :     
    EDKEY.ACTION.BOTSCR.EOF >64E2 :     
    EDKEY.ACTION.BOTSCR.EXIT >6502 :     
    EDKEY.ACTION.CHAR... >67D4 :     
    EDKEY.ACTION.CHAR.EXIT >6838 :     
    EDKEY.ACTION.CHAR.INSERT >67F6 :     
    EDKEY.ACTION.CHAR.OVERWRITE >67FA :     
    EDKEY.ACTION.CHAR.OVERWRITE.INCX >6822 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6E00 :     
    EDKEY.ACTION.CMDB.APPEND >6BC2 :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6C2C :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6C00 :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6E32 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6E62 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6E54 :     
    EDKEY.ACTION.CMDB.CHAR >6A6C :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6AB6 :     
    EDKEY.ACTION.CMDB.CLEAR >6A60 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6A68 :     
    EDKEY.ACTION.CMDB.CLIP >6C54 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6C36 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6C3C :     
    EDKEY.ACTION.CMDB.CLIP.3 >6C42 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6C48 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6C4E :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE >6C82 :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.EXIT >6CCE :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.MESSAGE >6CAE :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6E14 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6E2A :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6E2E :     
    EDKEY.ACTION.CMDB.END >6A4A :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6DF4 :     
    EDKEY.ACTION.CMDB.FILE.NEW >6AD6 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6AF4 :     
    EDKEY.ACTION.CMDB.GOTO >6E6A :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6EA8 :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6E8E :     
    EDKEY.ACTION.CMDB.HIDE >6ACE :     
    EDKEY.ACTION.CMDB.HOME >6A36 :     
    EDKEY.ACTION.CMDB.INSERT >6B40 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6BB8 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6B7E :     
    EDKEY.ACTION.CMDB.LEFT >6A0C :     
    EDKEY.ACTION.CMDB.LOAD >6AFC :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6B3C :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6B30 :     
    EDKEY.ACTION.CMDB.PRESET >6E0C :     
    EDKEY.ACTION.CMDB.PRINT >6D4E :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6DAA :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6DC0 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6DB8 :     
    EDKEY.ACTION.CMDB.PROCEED >6DCA :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6DF0 :     
    EDKEY.ACTION.CMDB.RIGHT >6A1E :     
    EDKEY.ACTION.CMDB.SAVE >6CD2 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6D2E :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6D44 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6D3C :     
    EDKEY.ACTION.CMDB.SHOW >6AC4 :     
    EDKEY.ACTION.CMDB.TOGGLE >6ABE :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6AD2 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >688A :     
    EDKEY.ACTION.DEL_CHAR >6564 :     
    EDKEY.ACTION.DEL_CHAR.EXIT >65DE :     
    EDKEY.ACTION.DEL_CHAR.LOOP >65BC :     
    EDKEY.ACTION.DEL_CHAR.PREP >65A2 :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >656C :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >6576 :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >6594 :     
    EDKEY.ACTION.DEL_CHAR.SAVE >65D2 :     
    EDKEY.ACTION.DEL_EOL >65E2 :     
    EDKEY.ACTION.DEL_EOL.EXIT >6612 :     
    EDKEY.ACTION.DEL_EOL_LOOP >65FE :     
    EDKEY.ACTION.DEL_LINE >6616 :     
    EDKEY.ACTION.DEL_LINE.DOIT >6644 :     
    EDKEY.ACTION.DEL_LINE.EXIT >6674 :     
    EDKEY.ACTION.DEL_LINE.REFRESH >6654 :     
    EDKEY.ACTION.DOWN... >63D8 :     
    EDKEY.ACTION.DOWN.EXIT >63DC :     
    EDKEY.ACTION.END.... >6290 :     
    EDKEY.ACTION.ENTER.. >6736 :     
    EDKEY.ACTION.ENTER.NEWLINE >674E :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6762 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >69DC :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >69E6 :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >69F0 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >6A00 :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >689A :     
    EDKEY.ACTION.FB.FNAME.DOIT >68BC :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >68DC :     
    EDKEY.ACTION.FB.FNAME.EXIT >68E4 :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >68AC :     
    EDKEY.ACTION.FB.TAB.NEXT >69CE :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >69D6 :     
    EDKEY.ACTION.FB.TAB.PREV >69C0 :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >69C8 :     
    EDKEY.ACTION.GOTO... >6542 :     
    EDKEY.ACTION.GOTO.REFRESH >655C :     
    EDKEY.ACTION.HOME... >6288 :     
    EDKEY.ACTION.INS_CHAR >6680 :     
    EDKEY.ACTION.INS_CHAR.APPEND >6716 :     
    EDKEY.ACTION.INS_CHAR.EXIT >671A :     
    EDKEY.ACTION.INS_CHAR.LOOP >66F2 :     
    EDKEY.ACTION.INS_CHAR.PREP >66E0 :     
    EDKEY.ACTION.INS_CHAR.WS >6678 :     
    EDKEY.ACTION.INS_LINE >671E :     
    EDKEY.ACTION.INS_LINE.EXIT >6726 :     
    EDKEY.ACTION.INS_LINE_AFTER >672A :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >6732 :     
    EDKEY.ACTION.INS_ONOFF >67C2 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >67CE :     
    EDKEY.ACTION.LEFT... >6252 :     
    EDKEY.ACTION.NEWLINE >6776 :     
    EDKEY.ACTION.NEWLINE.DOWN >679A :     
    EDKEY.ACTION.NEWLINE.EXIT >67BE :     
    EDKEY.ACTION.NEWLINE.REST >67A2 :     
    EDKEY.ACTION.NPAGE.. >641C :     
    EDKEY.ACTION.NPAGE.EXIT >6452 :     
    EDKEY.ACTION.NPAGE.REFRESH >6446 :     
    EDKEY.ACTION.NPAGE.SANITY >6430 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6440 :     
    EDKEY.ACTION.NWORD.. >6304 :     
    EDKEY.ACTION.NWORD.EXIT >635C :     
    EDKEY.ACTION.NWORD_DONE >6354 :     
    EDKEY.ACTION.NWORD_MS >631C :     
    EDKEY.ACTION.NWORD_SCAN >631E :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >6328 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >6336 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >633E :     
    EDKEY.ACTION.PPAGE.. >63E0 :     
    EDKEY.ACTION.PPAGE.EXIT >6418 :     
    EDKEY.ACTION.PPAGE.REFRESH >640C :     
    EDKEY.ACTION.PPAGE.SANITY >63F4 :     
    EDKEY.ACTION.PPAGE.TOPLINE >6406 :     
    EDKEY.ACTION.PWORD.. >62B2 :     
    EDKEY.ACTION.PWORD.EXIT >62FC :     
    EDKEY.ACTION.PWORD_DONE >62F4 :     
    EDKEY.ACTION.PWORD_SCAN >62C4 :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62CA :     
    EDKEY.ACTION.QUIT... >687C :     
    EDKEY.ACTION.RIGHT.. >626C :     
    EDKEY.ACTION.SCROLL.LEFT >6364 :     
    EDKEY.ACTION.SCROLL.RIGHT >6398 :     
    EDKEY.ACTION.TOGGLE.RULER >683C :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >6872 :     
    EDKEY.ACTION.TOGGLE.RULER.FB >686E :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >684C :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6856 :     
    EDKEY.ACTION.TOP.... >6456 :     
    EDKEY.ACTION.TOP.REFRESH >6466 :     
    EDKEY.ACTION.TOPSCR. >6472 :     
    EDKEY.ACTION.TOPSCR.REFRESH >6482 :     
    EDKEY.ACTION.UP..... >63D0 :     
    EDKEY.ACTION.UP.EXIT >63D4 :     
    EDKEY.ACTIONS.INS.CHAR.EMPTY_LINE >6688 :     
    EDKEY.FB.GOTO.TOPROW >6508 :     
    EDKEY.KEY.CHECK.NEXT >61C6 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61E6 :     
    EDKEY.KEY.CHECK.SCOPE >61EC :     
    EDKEY.KEY.PROCESS... >6166 :     
    EDKEY.KEY.PROCESS.ACTION >6206 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >621A :     
    EDKEY.KEY.PROCESS.CRASH >6238 :     
    EDKEY.KEY.PROCESS.ENTER >6240 :     
    EDKEY.KEY.PROCESS.EXIT >624E :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61C2 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61BC :     
    EDKEY.KEY.PROCESS.SPECIAL >6186 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61B6 :     
    EDKEY.KEYSCAN.HOOK.. >611E :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6146 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >6160 :     
    EDKEY.KEYSCAN.HOOK.EXIT >6162 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >7A32 :     
    ERROR.DISPLAY.VECTOR >7A3A :     
    ERRPANE.EXIT........ >32CA :     
    ERRPANE.INIT........ >32A4 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
<<<<<<< HEAD
    FB.CALC_POINTER..... >30EC :     
    FB.CALC_POINTER.EXIT >310C :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7A78 :     
    FB.COLORLINES.VECTOR >7A80 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.DOWN...... >7AD2 :     
    FB.CURSOR.DOWN.VECTOR >7ADA :     
    FB.CURSOR.HOME...... >7ADC :     
    FB.CURSOR.HOME.VECTOR >7AE4 :     
    FB.CURSOR.UP........ >7AC8 :     
    FB.CURSOR.UP.VECTOR. >7AD0 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >7AAA :     
    FB.GET.NONBLANK.VECTOR >7AB2 :     
    FB.HSCROLL.......... >7A8C :     
    FB.HSCROLL.VECTOR... >7A94 :     
    FB.INIT............. >306C :     
    FB.INIT.CONT........ >30A8 :     
    FB.INIT.EXIT........ >30CA :     
    FB.INSERT.LINE...... >7AE6 :     
    FB.INSERT.LINE.VECTOR >7AEE :     
    FB.REFRESH.......... >7AA0 :     
    FB.REFRESH.VECTOR... >7AA8 :     
    FB.RESTORE.......... >7A96 :     
    FB.RESTORE.VECTOR... >7A9E :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30D2 :     
    FB.ROW2LINE.EXIT.... >30E6 :     
    FB.RULER.INIT....... >7A6E :     
    FB.RULER.INIT.VECTOR >7A76 :     
=======
    FB.CALC_POINTER..... >30DA :     
    FB.CALC_POINTER.EXIT >30FA :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7AD8 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.DOWN...... >6F1E :     
    FB.CURSOR.DOWN.CURSOR >6F6C :     
    FB.CURSOR.DOWN.EXIT. >6F8E :     
    FB.CURSOR.DOWN.MOVE. >6F3E :     
    FB.CURSOR.DOWN.SET_CURSORX >6F74 :     
    FB.CURSOR.HOME...... >6F96 :     
    FB.CURSOR.HOME.EXIT. >6FBA :     
    FB.CURSOR.UP........ >6EC0 :     
    FB.CURSOR.UP.CURSOR. >6ED8 :     
    FB.CURSOR.UP.CURSOR_UP >6EF4 :     
    FB.CURSOR.UP.EXIT... >6F16 :     
    FB.CURSOR.UP.SET_CURSORX >6EFC :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >7B32 :     
    FB.HSCROLL.......... >7AFC :     
    FB.INIT............. >305A :     
    FB.INIT.CONT........ >3096 :     
    FB.INIT.EXIT........ >30B8 :     
    FB.INSERT.LINE...... >6FC0 :     
    FB.INSERT.LINE.EXIT. >7052 :     
    FB.INSERT.LINE.INSERT >6FEA :     
    FB.INSERT.LINE.M1... >7010 :     
    FB.INSERT.LINE.M2... >7028 :     
    FB.INSERT.LINE.REFRESH >7040 :     
    FB.REFRESH.......... >7B20 :     
    FB.RESTORE.......... >7B0E :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30C0 :     
    FB.ROW2LINE.EXIT.... >30D4 :     
    FB.RULER.INIT....... >7AC6 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0F00 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
<<<<<<< HEAD
    FB.TAB.NEXT......... >7ABE :     
    FB.TAB.NEXT.VECTOR.. >7AC6 :     
    FB.TAB.PREV......... >7AB4 :     
    FB.TAB.PREV.VECTOR.. >7ABC :     
=======
    FB.TAB.NEXT......... >7B56 :     
    FB.TAB.PREV......... >7B44 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
<<<<<<< HEAD
    FB.VDPDUMP.......... >7A82 :     
    FB.VDPDUMP.VECTOR... >7A8A :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3D4E :     
    FG99.CART.FCMD...... >3D12 :     
    FG99.CART.RXB....... >3D3A :     
    FG99.CART.XBGEM..... >3D26 :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >3764 :     
    FG99.RUN.FBFORTH.... >7C28 :     
    FG99.RUN.FCMD....... >7C1E :     
    FG99.RUN.RXB........ >7C14 :     
    FG99.RUN.STUB....... >7C32 :     
    FG99.RUN.STUB.EXIT.. >7C3A :     
    FG99.RUN.XBGEM...... >7C0A :     
=======
    FB.VDPDUMP.......... >7AEA :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3D96 :     
    FG99.CART.FCMD...... >3D5A :     
    FG99.CART.RXB....... >3D82 :     
    FG99.CART.XBGEM..... >3D6E :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >3752 :     
    FG99.RUN.FBFORTH.... >7C70 :     
    FG99.RUN.FCMD....... >7C66 :     
    FG99.RUN.RXB........ >7C5C :     
    FG99.RUN.STUB....... >7C7A :     
    FG99.RUN.STUB.EXIT.. >7C82 :     
    FG99.RUN.XBGEM...... >7C52 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
<<<<<<< HEAD
    FM.BROWSE.FNAME.SUFFIX >78BA :     
    FM.FASTMODE......... >7A52 :     
    FM.FASTMODE.VECTOR.. >7A5A :     
    FM.INSERTFILE....... >78A2 :     
    FM.INSERTFILE.EXIT.. >78B4 :     
    FM.LOADFILE......... >787C :     
    FM.LOADFILE.EXIT.... >789C :     
    FM.NEWFILE.......... >78DE :     
    FM.SAVEFILE......... >78CC :     
=======
    FM.BROWSE.FNAME.SUFFIX >791C :     
    FM.FASTMODE......... >7AAA :     
    FM.FASTMODE.VECTOR.. >7AB2 :     
    FM.INSERTFILE....... >7904 :     
    FM.INSERTFILE.EXIT.. >7916 :     
    FM.LOADFILE......... >78DE :     
    FM.LOADFILE.EXIT.... >78FE :     
    FM.NEWFILE.......... >7940 :     
    FM.SAVEFILE......... >792E :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
<<<<<<< HEAD
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >3552 :     
    IDX.ENTRY.DELETE.EXIT >35AA :     
    IDX.ENTRY.DELETE.LASTLINE >357E :     
    IDX.ENTRY.DELETE.REORG >3586 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3590 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35A4 :     
    IDX.ENTRY.INSERT.... >35F4 :     
    IDX.ENTRY.INSERT.EXIT >3640 :     
    IDX.ENTRY.INSERT.REORG >3612 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >361C :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3630 :     
    IDX.ENTRY.UPDATE.... >34A4 :     
    IDX.ENTRY.UPDATE.CLEAR >34DE :     
    IDX.ENTRY.UPDATE.EXIT >34EE :     
    IDX.ENTRY.UPDATE.SAVE >34CC :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3114 :     
    IDX.INIT.EXIT....... >3150 :     
    IDX.POINTER.GET..... >34F6 :     
    IDX.POINTER.GET.EXIT >3538 :     
    IDX.POINTER.GET.PARM >3526 :     
    IDX.POINTER.GET.PARM.NULL >3530 :     
=======
    IDX.ENTRY.DELETE.... >3540 :     
    IDX.ENTRY.DELETE.EXIT >3598 :     
    IDX.ENTRY.DELETE.LASTLINE >356C :     
    IDX.ENTRY.DELETE.REORG >3574 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >357E :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >3592 :     
    IDX.ENTRY.INSERT.... >35E2 :     
    IDX.ENTRY.INSERT.EXIT >362E :     
    IDX.ENTRY.INSERT.REORG >3600 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >360A :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >361E :     
    IDX.ENTRY.UPDATE.... >3492 :     
    IDX.ENTRY.UPDATE.CLEAR >34CC :     
    IDX.ENTRY.UPDATE.EXIT >34DC :     
    IDX.ENTRY.UPDATE.SAVE >34BA :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3102 :     
    IDX.INIT.EXIT....... >313E :     
    IDX.POINTER.GET..... >34E4 :     
    IDX.POINTER.GET.EXIT >3526 :     
    IDX.POINTER.GET.PARM >3514 :     
    IDX.POINTER.GET.PARM.NULL >351E :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
<<<<<<< HEAD
    KEYMAP_ACTIONS.CMDB. >7D84 :     
    KEYMAP_ACTIONS.EDITOR >7CAA :     
=======
    KEYMAP_ACTIONS.CMDB. >7DC8 :     
    KEYMAP_ACTIONS.EDITOR >7CF2 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
<<<<<<< HEAD
    MAGIC.CHECK......... >7C98 :     
    MAGIC.CLEAR......... >7C86 :     
    MAGIC.SET........... >7C74 :     
=======
    MAGIC.CHECK......... >7CE0 :     
    MAGIC.CLEAR......... >7CCE :     
    MAGIC.SET........... >7CBC :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
<<<<<<< HEAD
    MEM.SAMS.SET.BOOT... >7C50 :     
    MEM.SAMS.SET.LEGACY. >7C3E :     
    MEM.SAMS.SET.STEVIE. >7C62 :     
    MEM.SAMS.SETUP.STEVIE >60FE :     
    MEM.SAMS.SETUP.STEVIE.EXIT >6118 :     
=======
    MEM.SAMS.SET.BOOT... >7C98 :     
    MEM.SAMS.SET.LEGACY. >7C86 :     
    MEM.SAMS.SET.STEVIE. >7CAA :     
    MEM.SAMS.SETUP.STEVIE >6100 :     
    MEM.SAMS.SETUP.STEVIE.EXIT >611A :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
<<<<<<< HEAD
    NOSPRITE............ >3830 :     
=======
    NOSPRITE............ >3884 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
<<<<<<< HEAD
    PANE.ACTION.COLORSCHEME.CHECKCMDB >72CC :     
    PANE.ACTION.COLORSCHEME.CMDBPANE >72FC :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR >73D8 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.CMDB >73E6 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.FB >73EE :     
    PANE.ACTION.COLORSCHEME.CYCLE >71A0 :     
    PANE.ACTION.COLORSCHEME.CYCLE.EXIT >71F8 :     
    PANE.ACTION.COLORSCHEME.ERRPANE >7372 :     
    PANE.ACTION.COLORSCHEME.FBDUMP >72D8 :     
    PANE.ACTION.COLORSCHEME.FBDUMP.NORULER >72C4 :     
    PANE.ACTION.COLORSCHEME.LOAD >71FE :     
    PANE.ACTION.COLORSCHEME.LOAD.EXIT >73FC :     
    PANE.ACTION.COLORSCHEME.RULER >73BA :     
    PANE.ACTION.COLORSCHEME.STATLINE >7384 :     
    PANE.ACTION.COLORSCHEME.STATLINES >741A :     
    PANE.ACTION.COLORSCHEME.STATLINES.EXIT >742E :     
    PANE.ACTION.COLORSCHEME.SWITCH >71BA :     
    PANE.BOTLINE........ >762C :     
    PANE.BOTLINE.EXIT... >77B0 :     
    PANE.BOTLINE.NOCHANGE >76AE :     
    PANE.BOTLINE.SHOW_DIRTY >769E :     
    PANE.BOTLINE.SHOW_KEYS >764C :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >776C :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >7764 :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >775A :     
    PANE.BOTLINE.SHOW_LINE.REST >7770 :     
    PANE.BOTLINE.SHOW_LINECOL >76B6 :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >777A :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >771E :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >779E :     
    PANE.BOTLINE.SHOW_MODE >7676 :     
    PANE.BOTLINE.SHOW_MODE.INSERT >7686 :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >7696 :     
    PANE.BOTROW......... >0017 :     
    PANE.CMDB.DRAW...... >7A02 :     
    PANE.CMDB.DRAW.VECTOR >7A0A :     
    PANE.CMDB.HIDE...... >79F8 :     
    PANE.CMDB.HIDE.VECTOR >7A00 :     
    PANE.CMDB.SHOW...... >79EE :     
    PANE.CMDB.SHOW.VECTOR >79F6 :     
    PANE.CURSOR.BLINK... >7452 :     
    PANE.CURSOR.BLINK.EXIT >746A :     
    PANE.CURSOR.HIDE.... >7434 :     
    PANE.CURSOR.HIDE.EXIT >744E :     
    PANE.ERRLINE.DRAWCOLOR >7562 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >758A :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >757C :     
    PANE.ERRLINE.HIDE... >75F6 :     
    PANE.ERRLINE.HIDE.EXIT >7626 :     
    PANE.ERRLINE.HIDE.FBCOLOR >760E :     
    PANE.ERRLINE.SHOW... >7594 :     
    PANE.ERRLINE.SHOW.EXIT >75EE :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >79E4 :     
    PANE.SHOW_HINTX.VECTOR >79EC :     
    PANE.TOPLINE........ >74B8 :     
    PANE.TOPLINE.EXIT... >7558 :     
    PANE.TOPLINE.FILE... >74C6 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3744 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >375C :     
    PANE.TOPLINE.SHOWMARKERS >74F6 :     
    PANE.VDPDUMP........ >77BA :     
    PANE.VDPDUMP.ALPHA_LOCK >77C8 :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >77D8 :     
    PANE.VDPDUMP.CMDB.CHECK >77E0 :     
    PANE.VDPDUMP.CMDB.DRAW >77E6 :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >77F2 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >7824 :     
    PANE.VDPDUMP.DUMP... >783A :     
    PANE.VDPDUMP.DUMPED. >7848 :     
    PANE.VDPDUMP.EXIT... >7872 :     
    PANE.VDPDUMP.STATLINES >7850 :     
=======
    PANE.ACTION.COLORSCHEME.CHECKCMDB >7332 :     
    PANE.ACTION.COLORSCHEME.CMDBPANE >7362 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR >7436 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.CMDB >7444 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.FB >744C :     
    PANE.ACTION.COLORSCHEME.CYCLE >7206 :     
    PANE.ACTION.COLORSCHEME.CYCLE.EXIT >725E :     
    PANE.ACTION.COLORSCHEME.ERRPANE >73D8 :     
    PANE.ACTION.COLORSCHEME.FBDUMP >733E :     
    PANE.ACTION.COLORSCHEME.FBDUMP.NORULER >732A :     
    PANE.ACTION.COLORSCHEME.LOAD >7264 :     
    PANE.ACTION.COLORSCHEME.LOAD.EXIT >745A :     
    PANE.ACTION.COLORSCHEME.RULER >7418 :     
    PANE.ACTION.COLORSCHEME.STATLINE >73EA :     
    PANE.ACTION.COLORSCHEME.STATLINES >7478 :     
    PANE.ACTION.COLORSCHEME.STATLINES.EXIT >748C :     
    PANE.ACTION.COLORSCHEME.SWITCH >7220 :     
    PANE.BOTLINE........ >768E :     
    PANE.BOTLINE.EXIT... >7812 :     
    PANE.BOTLINE.NOCHANGE >7710 :     
    PANE.BOTLINE.SHOW_DIRTY >7700 :     
    PANE.BOTLINE.SHOW_KEYS >76AE :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >77CE :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >77C6 :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >77BC :     
    PANE.BOTLINE.SHOW_LINE.REST >77D2 :     
    PANE.BOTLINE.SHOW_LINECOL >7718 :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >77DC :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >7780 :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >7800 :     
    PANE.BOTLINE.SHOW_MODE >76D8 :     
    PANE.BOTLINE.SHOW_MODE.INSERT >76E8 :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >76F8 :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >7A5A :     
    PANE.CMDB.DRAW.VECTOR >7A62 :     
    PANE.CMDB.HIDE...... >7A50 :     
    PANE.CMDB.HIDE.VECTOR >7A58 :     
    PANE.CMDB.SHOW...... >7A46 :     
    PANE.CMDB.SHOW.VECTOR >7A4E :     
    PANE.CURSOR.BLINK... >74B0 :     
    PANE.CURSOR.BLINK.EXIT >74CC :     
    PANE.CURSOR.HIDE.... >7492 :     
    PANE.CURSOR.HIDE.EXIT >74AC :     
    PANE.ERRLINE.DRAWCOLOR >75C4 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >75EC :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >75DE :     
    PANE.ERRLINE.HIDE... >7658 :     
    PANE.ERRLINE.HIDE.EXIT >7688 :     
    PANE.ERRLINE.HIDE.FBCOLOR >7670 :     
    PANE.ERRLINE.SHOW... >75F6 :     
    PANE.ERRLINE.SHOW.EXIT >7650 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >7A3C :     
    PANE.SHOW_HINTX.VECTOR >7A44 :     
    PANE.TOPLINE........ >751A :     
    PANE.TOPLINE.EXIT... >75BA :     
    PANE.TOPLINE.FILE... >7528 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3732 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >374A :     
    PANE.TOPLINE.SHOWMARKERS >7558 :     
    PANE.VDPDUMP........ >781C :     
    PANE.VDPDUMP.ALPHA_LOCK >782A :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >783A :     
    PANE.VDPDUMP.CMDB.CHECK >7842 :     
    PANE.VDPDUMP.CMDB.DRAW >7848 :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >7854 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >7886 :     
    PANE.VDPDUMP.DUMP... >789C :     
    PANE.VDPDUMP.DUMPED. >78AA :     
    PANE.VDPDUMP.EXIT... >78D4 :     
    PANE.VDPDUMP.STATLINES >78B2 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FCA :     
<<<<<<< HEAD
    ROM.FARJUMP.BANKSWITCH.CALL >302C :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3024 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >305A :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3050 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >304C :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3014 :     
    ROM.FARJUMP.EXIT.... >3062 :     
    ROM.FARJUMP.RETURN.. >302E :     
=======
    ROM.FARJUMP.BANKSWITCH.CALL >301A :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3012 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3048 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >303E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >303A :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2FF6 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2FFA :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3002 :     
    ROM.FARJUMP.EXIT.... >3050 :     
    ROM.FARJUMP.RETURN.. >301C :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
<<<<<<< HEAD
    ROMSAT.............. >3824 :     
=======
    ROMSAT.............. >3878 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2FA2 :     
    RUNLID.............. >2FB8 :     
    RUNLIE.............. >2FC2 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
<<<<<<< HEAD
    SPVMOD.............. >7F60 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F60 :     
    STEVIE.80X60........ >7F6A :     
=======
    SPVMOD.............. >385A :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >385A :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
<<<<<<< HEAD
    TASK.ONESHOT........ >3818 :     
    TASK.ONESHOT.EXIT... >3820 :     
    TASK.VDP.CURSOR..... >3790 :     
    TASK.VDP.CURSOR.CMDB >37BE :     
    TASK.VDP.CURSOR.CMDB.HIDE >37CA :     
    TASK.VDP.CURSOR.DUMP >37FC :     
    TASK.VDP.CURSOR.EXIT >3808 :     
    TASK.VDP.CURSOR.FB.. >37D0 :     
    TASK.VDP.CURSOR.FB.VISIBLE >37DC :     
    TASK.VDP.CURSOR.FB.VISIBLE.NORULER >37F0 :     
    TASK.VDP.PANES...... >7192 :     
    TASK.VDP.PANES.EXIT. >719A :     
=======
    TASK.ONESHOT........ >384E :     
    TASK.ONESHOT.EXIT... >3856 :     
    TASK.VDP.COPY.SAT... >377E :     
    TASK.VDP.COPY.SAT.CMDB >37A6 :     
    TASK.VDP.COPY.SAT.EXIT >3814 :     
    TASK.VDP.COPY.SAT.FB >37B6 :     
    TASK.VDP.COPY.SAT.FB.NORULER >37CA :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >3800 :     
    TASK.VDP.COPY.SAT.WRITE >37CE :     
    TASK.VDP.COPY.SAT.WRITE2 >380A :     
    TASK.VDP.CURSOR..... >3820 :     
    TASK.VDP.CURSOR.COPY.SAT >383C :     
    TASK.VDP.CURSOR.EXIT >3846 :     
    TASK.VDP.CURSOR.VISIBLE >3836 :     
    TASK.VDP.PANES...... >71F8 :     
    TASK.VDP.PANES.EXIT. >7200 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
<<<<<<< HEAD
    TIBASIC............. >7BC4 :     
    TIBASIC.32X24....... >7F74 :     
    TIBASIC.32X30....... >7F7E :     
    TIBASIC.AM.TOGGLE... >7A48 :     
    TIBASIC.AM.TOGGLE.VECTOR >7A50 :     
    TIBASIC.EXIT........ >7BE6 :     
    TIBASIC.UNCRUNCH.... >7BF0 :     
    TIBASIC.UNCRUNCH.EXIT >7C06 :     
    TIBASIC1............ >7B9E :     
    TIBASIC2............ >7BA6 :     
    TIBASIC3............ >7BAE :     
    TIBASIC4............ >7BB6 :     
    TIBASIC5............ >7BBE :     
=======
    TIBASIC............. >7C0C :     
    TIBASIC.32X24....... >3864 :     
    TIBASIC.32X30....... >386E :     
    TIBASIC.AM.TOGGLE... >7AA0 :     
    TIBASIC.AM.TOGGLE.VECTOR >7AA8 :     
    TIBASIC.EXIT........ >7C2E :     
    TIBASIC.HEARTS.TAT.. >7A96 :     
    TIBASIC.HEARTS.TAT.VECTOR >7A9E :     
    TIBASIC.UNCRUNCH.... >7C38 :     
    TIBASIC.UNCRUNCH.EXIT >7C4E :     
    TIBASIC1............ >7BE6 :     
    TIBASIC2............ >7BEE :     
    TIBASIC3............ >7BF6 :     
    TIBASIC4............ >7BFE :     
    TIBASIC5............ >7C06 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
<<<<<<< HEAD
    TV.COLORSCHEME.TABLE >3832 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A234 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D4 :     
    TV.INIT............. >32E6 :     
    TV.INIT.EXIT........ >3326 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >342C :     
    TV.PAD.STRING.EXIT.. >3498 :     
    TV.PAD.STRING.LOOP.. >3482 :     
    TV.PAD.STRING.PANIC. >3490 :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3330 :     
    TV.RESET............ >333E :     
    TV.RESET.EXIT....... >3364 :     
=======
    TV.COLORSCHEME.TABLE >3886 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A232 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FG99.IMG.PTR..... >A230 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D2 :     
    TV.INIT............. >32D4 :     
    TV.INIT.EXIT........ >3314 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >341A :     
    TV.PAD.STRING.EXIT.. >3486 :     
    TV.PAD.STRING.LOOP.. >3470 :     
    TV.PAD.STRING.PANIC. >347E :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >331E :     
    TV.RESET............ >332C :     
    TV.RESET.EXIT....... >3352 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
<<<<<<< HEAD
    TV.SET.FONT......... >7B82 :     
    TV.SET.FONT.VECTOR.. >7B8A :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.TABS.TABLE.LR.... >3882 :     
    TV.TABS.TABLE.RL.... >388E :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.TOP.............. >A200 :     
    TV.UINT16.MPY....... >33F6 :     
    TV.UINT16.PACK...... >3368 :     
    TV.UINT16.PACK.DONE. >33E2 :     
    TV.UINT16.PACK.ERROR >33DA :     
    TV.UINT16.PACK.EXIT. >33E6 :     
    TV.UINT16.PACK.LOOP. >33B0 :     
    TV.UINT16.UNPACK.... >3400 :     
    TV.UINT16.UNPACK.EXIT >3426 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3BC6 :     
    TXT.AUTOINS.OFF..... >3A26 :     
    TXT.AUTOINS.ON...... >3A16 :     
    TXT.AUTOINSERT...... >38BA :     
    TXT.BLOCK.CLIP...... >3940 :     
    TXT.BLOCK.COPY...... >3902 :     
    TXT.BLOCK.DEL....... >38EE :     
    TXT.BLOCK.INSIDE.... >3C72 :     
    TXT.BLOCK.MOVE...... >3914 :     
    TXT.BLOCK.PRINT..... >395A :     
    TXT.BLOCK.SAVE...... >3926 :     
    TXT.BOTTOM.......... >38A8 :     
    TXT.CLEARMEM........ >396E :     
    TXT.CMDB.PROMPT..... >3CA0 :     
    TXT.COLORSCHEME..... >3CA2 :     
    TXT.DELIM........... >38A6 :     
    TXT.DONE.APPEND..... >39A4 :     
    TXT.DONE.CLIPBOARD.. >39F8 :     
    TXT.DONE.CLIPDEV.... >3A08 :     
    TXT.DONE.COPY....... >39C6 :     
    TXT.DONE.DELETE..... >39E6 :     
    TXT.DONE.INSERT..... >3992 :     
    TXT.DONE.LOAD....... >3982 :     
    TXT.DONE.PRINT...... >39D6 :     
    TXT.DONE.SAVE....... >39B6 :     
    TXT.FASTMODE........ >3A36 :     
    TXT.FILETYPE.DV80... >3ABA :     
    TXT.FILETYPE.NONE... >3BD8 :     
    TXT.INSERT.......... >38B4 :     
    TXT.IO.NOFILE....... >3C2C :     
    TXT.IOERR.LOAD...... >3BE4 :     
    TXT.IOERR.PRINT..... >3C10 :     
    TXT.IOERR.SAVE...... >3BFA :     
    TXT.KB.............. >3A5E :     
    TXT.KEYMARKER....... >3BCC :     
    TXT.KEYS.BASIC1..... >3B48 :     
    TXT.KEYS.BLOCK...... >3B12 :     
    TXT.KEYS.DEFAULT.... >3AC8 :     
    TXT.KEYS.DEFAULTB... >3AE8 :     
    TXT.LINES........... >3A62 :     
    TXT.LOADING......... >38C2 :     
    TXT.M1.............. >3AC0 :     
    TXT.M2.............. >3AC4 :     
    TXT.MEMFULL.LOAD.... >3C44 :     
    TXT.NEWFILE......... >3A68 :     
    TXT.OVRWRITE........ >38AE :     
    TXT.PRINTING........ >38DA :     
    TXT.RULER........... >3B76 :     
    TXT.SAVING.......... >38CE :     
    TXT.STAR............ >38C0 :     
    TXT.TIB1............ >3A74 :     
    TXT.TIB2............ >3A82 :     
    TXT.TIB3............ >3A90 :     
    TXT.TIB4............ >3A9E :     
    TXT.TIB5............ >3AAC :     
    TXT.UNCRUNCHING..... >3A42 :     
    TXT.VERTLINE........ >3BCA :     
    TXT.WS1............. >3BCE :     
    TXT.WS2............. >3BD0 :     
    TXT.WS3............. >3BD4 :     
    TXT.WS4............. >3BD8 :     
    TXT.WS5............. >3BDE :     
=======
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22E :     
    TV.TABS.TABLE.LR.... >38D6 :     
    TV.TABS.TABLE.RL.... >38E2 :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UINT16.MPY....... >33E4 :     
    TV.UINT16.PACK...... >3356 :     
    TV.UINT16.PACK.DONE. >33D0 :     
    TV.UINT16.PACK.ERROR >33C8 :     
    TV.UINT16.PACK.EXIT. >33D4 :     
    TV.UINT16.PACK.LOOP. >339E :     
    TV.UINT16.UNPACK.... >33EE :     
    TV.UINT16.UNPACK.EXIT >3414 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C1A :     
    TXT.AUTOINS.OFF..... >3A7A :     
    TXT.AUTOINS.ON...... >3A6A :     
    TXT.AUTOINSERT...... >390E :     
    TXT.BLOCK.CLIP...... >3994 :     
    TXT.BLOCK.COPY...... >3956 :     
    TXT.BLOCK.DEL....... >3942 :     
    TXT.BLOCK.INSIDE.... >3CC6 :     
    TXT.BLOCK.MOVE...... >3968 :     
    TXT.BLOCK.PRINT..... >39AE :     
    TXT.BLOCK.SAVE...... >397A :     
    TXT.BOTTOM.......... >38FC :     
    TXT.CLEARMEM........ >39C2 :     
    TXT.CMDB.PROMPT..... >3CF4 :     
    TXT.COLORSCHEME..... >3CF6 :     
    TXT.DELIM........... >38FA :     
    TXT.DONE.APPEND..... >39F8 :     
    TXT.DONE.CLIPBOARD.. >3A4C :     
    TXT.DONE.CLIPDEV.... >3A5C :     
    TXT.DONE.COPY....... >3A1A :     
    TXT.DONE.DELETE..... >3A3A :     
    TXT.DONE.INSERT..... >39E6 :     
    TXT.DONE.LOAD....... >39D6 :     
    TXT.DONE.PRINT...... >3A2A :     
    TXT.DONE.SAVE....... >3A0A :     
    TXT.FASTMODE........ >3A8A :     
    TXT.FILETYPE.DV80... >3B0E :     
    TXT.FILETYPE.NONE... >3C2C :     
    TXT.INSERT.......... >3908 :     
    TXT.IO.NOFILE....... >3C80 :     
    TXT.IOERR.LOAD...... >3C38 :     
    TXT.IOERR.PRINT..... >3C64 :     
    TXT.IOERR.SAVE...... >3C4E :     
    TXT.KB.............. >3AB2 :     
    TXT.KEYMARKER....... >3C20 :     
    TXT.KEYS.BASIC1..... >3B9C :     
    TXT.KEYS.BLOCK...... >3B66 :     
    TXT.KEYS.DEFAULT.... >3B1C :     
    TXT.KEYS.DEFAULTB... >3B3C :     
    TXT.LINES........... >3AB6 :     
    TXT.LOADING......... >3916 :     
    TXT.M1.............. >3B14 :     
    TXT.M2.............. >3B18 :     
    TXT.MEMFULL.LOAD.... >3C98 :     
    TXT.NEWFILE......... >3ABC :     
    TXT.OVRWRITE........ >3902 :     
    TXT.PRINTING........ >392E :     
    TXT.RULER........... >3BCA :     
    TXT.SAVING.......... >3922 :     
    TXT.STAR............ >3914 :     
    TXT.TIB1............ >3AC8 :     
    TXT.TIB2............ >3AD6 :     
    TXT.TIB3............ >3AE4 :     
    TXT.TIB4............ >3AF2 :     
    TXT.TIB5............ >3B00 :     
    TXT.UNCRUNCHING..... >3A96 :     
    TXT.VERTLINE........ >3C1E :     
    TXT.WS1............. >3C22 :     
    TXT.WS2............. >3C24 :     
    TXT.WS3............. >3C28 :     
    TXT.WS4............. >3C2C :     
    TXT.WS5............. >3C32 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.DUMP.FONT....... >7B78 :     
    VDP.DUMP.FONT.VECTOR >7B80 :     
    VDP.DUMP.PATTERNS... >7B6E :     
    VDP.DUMP.PATTERNS.VECTOR >7B76 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
<<<<<<< HEAD
    VDP.PDT.BASE........ >1000 :     
=======
    VDP.PATTERNS.DUMP... >7BD4 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
<<<<<<< HEAD
    XROM.FARJUMP........ >2FE2 :     
    XROM.FARJUMP.PUSH_RETURN >2FF2 :     
=======
    XROM.FARJUMP........ >2FD0 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
<<<<<<< HEAD
    _EDKEY.ACTION.SCROLL >63C6 :     
    _EDKEY.ACTION.SCROLL.EXIT >63CA :     
=======
    _EDKEY.ACTION.SCROLL >63C8 :     
    _EDKEY.ACTION.SCROLL.EXIT >63CC :     
>>>>>>> b9b40bb (WIP optimize build scripts)
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
<<<<<<< HEAD
    _IDX.ENTRY.DELETE.REORG >3542 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >354A :     
    _IDX.ENTRY.INSERT.REORG >35B6 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35BC :     
    _IDX.ENTRY.INSERT.REORG.LOOP >35E4 :     
    _IDX.SAMS.MAPCOLUMN.OFF >318A :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31B8 :     
    _IDX.SAMS.MAPCOLUMN.ON >3156 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3180 :     
    _IDX.SAMSPAGE.GET... >31C4 :     
    _IDX.SAMSPAGE.GET.EXIT >320A :     
    _TRAMPOLINE.BANK3... >79C8 :     
    _TRAMPOLINE.BANK3.RET >7A5C :     
    _TRAMPOLINE.BANK4.RET >7AF0 :     
    _TRAMPOLINE.BANK5.RET >7B5C :     
    _TRAMPOLINE.BANK6.RET >7B8C :     
=======
    _IDX.ENTRY.DELETE.REORG >3530 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3538 :     
    _IDX.ENTRY.INSERT.REORG >35A4 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35AA :     
    _IDX.ENTRY.INSERT.REORG.LOOP >35D2 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3178 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31A6 :     
    _IDX.SAMS.MAPCOLUMN.ON >3144 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >316E :     
    _IDX.SAMSPAGE.GET... >31B2 :     
    _IDX.SAMSPAGE.GET.EXIT >31F8 :     
    _TRAMPOLINE.BANK3... >7A20 :     
    _TRAMPOLINE.BANK3.RET >7AB4 :     
    _TRAMPOLINE.BANK5.RET >7BC2 :     
>>>>>>> b9b40bb (WIP optimize build scripts)
