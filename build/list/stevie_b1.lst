XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2024 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 240114-1916030
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "equ.rom.build.asm"   ; Cartridge build options
     **** ****     > equ.rom.build.asm
0001               * FILE......: equ.rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0011      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0012      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0013      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0014      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0015      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0016      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0017      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0018      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0019      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0020      0001     skip_random_generator     equ  1       ; Skip random functions
0021      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0022               *--------------------------------------------------------------
0023               * Skip (manually included) spectra2 modules from resident RAM
0024               *--------------------------------------------------------------
0025      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0026      0001     skip_sams_size            equ  1       ; Skip SAMS card size check
0027               
0028               *--------------------------------------------------------------
0029               * SPECTRA2 / Stevie startup options
0030               *--------------------------------------------------------------
0031      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0032      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0033      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0034      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0035      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0036      0000     debug                     equ  0       ; Turn on debugging mode
0037               
0038               
0039               *--------------------------------------------------------------
0040               * ROM layout
0041               *--------------------------------------------------------------
0042      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0043      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0044      7F40     bankx.vectab              equ  >7f40   ; Vector table
0045      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equ.vdp.asm"         ; VDP configuration (F18a/9938/...)
     **** ****     > equ.vdp.asm
0001               * FILE......: equ.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equ.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equ.f18a.3080.asm
0001               * FILE......: equ.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equ.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b1.asm
0031                       copy  "equ.asm"             ; Stevie main configuration
     **** ****     > equ.asm
0001               * FILE......: equ.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.insert          equ  11      ; "Insert file"
0033      000C     id.dialog.append          equ  12      ; "Append file"
0034      000D     id.dialog.run             equ  13      ; "Run file"
0035      000E     id.dialog.save            equ  14      ; "Save file"
0036      000F     id.dialog.saveblock       equ  15      ; "Save block to file"
0037      0010     id.dialog.print           equ  16      ; "Print file"
0038      0011     id.dialog.printblock      equ  17      ; "Print block"
0039      0012     id.dialog.cfg.clip        equ  18      ; "Configure clipboard"
0040      0014     id.dialog.goto            equ  20      ; "Goto"
0041      0015     id.dialog.cat             equ  21      ; "Catalog drive/directory"
0042               ;-----------------------------------------------------------------
0043               ;   Dialog ID's >= 100 indicate that command prompt should be
0044               ;   hidden and no characters added to CMDB keyboard buffer.
0045               ;-----------------------------------------------------------------
0046      0064     id.dialog.menu            equ  100     ; "Main Menu"
0047      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0048      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0049      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0050      0068     id.dialog.help            equ  104     ; "About"
0051      0069     id.dialog.file            equ  105     ; "File"
0052      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0053      006B     id.dialog.basic           equ  107     ; "TI Basic"
0054      006C     id.dialog.cfg             equ  108     ; "Configure"
0055      006D     id.dialog.editor          equ  109     ; "Configure editor"
0056      006E     id.dialog.font            equ  110     ; "Configure font"
0057      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0058               ;-----------------------------------------------------------------
0059               ; Suffix characters for clipboards
0060               ;-----------------------------------------------------------------
0061      3100     clip1                     equ  >3100   ; '1'
0062      3200     clip2                     equ  >3200   ; '2'
0063      3300     clip3                     equ  >3300   ; '3'
0064      3400     clip4                     equ  >3400   ; '4'
0065      3500     clip5                     equ  >3500   ; '5'
0066               ;-----------------------------------------------------------------
0067               ; Keyboard flags in Stevie
0068               ;-----------------------------------------------------------------
0069      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0070               ;-----------------------------------------------------------------
0071               ; File work mode
0072               ;-----------------------------------------------------------------
0073      0001     id.file.loadfile          equ  1       ; Load file
0074      0002     id.file.insertfile        equ  2       ; Insert file
0075      0003     id.file.appendfile        equ  3       ; Append file
0076      0004     id.file.savefile          equ  4       ; Save file
0077      0005     id.file.saveblock         equ  5       ; Save block to file
0078      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0079      0007     id.file.printfile         equ  7       ; Print file
0080      0008     id.file.printblock        equ  8       ; Print block
0081               ;-----------------------------------------------------------------
0082               ; Special file indicator
0083               ;-----------------------------------------------------------------
0084      0000     id.special.normal         equ  0       ; Normal file
0085      0002     id.special.readonly       equ  2       ; Read-only file
0086      0003     id.special.basic          equ  3       ; TI Basic program
0087               ;-----------------------------------------------------------------
0088               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0089               ;-----------------------------------------------------------------
0090      A000     core1.top         equ  >a000           ; Structure begin
0091      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0092      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0093      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0094      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0095      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0096      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0097      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0098      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0099      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0100      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0101      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0102      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0103      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0104      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0105      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0106      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0107      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0108      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0109      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0110      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0111      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0112      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0113      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0114      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0115      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0116      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0117      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0118      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0119                                 ;--------------------------------------------
0120                                 ; TI Basic related
0121                                 ;--------------------------------------------
0122      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0123      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0124      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0125      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0126      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0127      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0128      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0129      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0130      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0131      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0132      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0133      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0134      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0135      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0136      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0137      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0138      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0139      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0140      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0141      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0142      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0143      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0144      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0145      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0146      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0147      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0148      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0149      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0150      A100     core1.free        equ  core1.top + 256 ; End of structure
0151               ;-----------------------------------------------------------------
0152               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0153               ;-----------------------------------------------------------------
0154      A100     core2.top         equ  >a100           ; Structure begin
0155      A100     rambuf            equ  core2.top       ; RAM workbuffer
0156      A200     core2.free        equ  core2.top + 256 ; End of structure
0157               ;-----------------------------------------------------------------
0158               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0159               ;-----------------------------------------------------------------
0160      A200     tv.struct         equ  >a200           ; Structure begin
0161      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0162      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0163      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0164      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0165      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0166      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0167      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0168      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0169      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0170      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0171      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0172      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0173      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0174      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0175      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0176      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0177      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0178      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0179      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0180      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0181      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0182      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0183      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0184      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0185      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0186      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0187      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0188      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0189      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0190      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0191               ;-----------------------------------------------------------------
0192               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0193               ;-----------------------------------------------------------------
0194      A300     fb.struct         equ  >a300           ; Structure begin
0195      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0196      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0197      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0198                                                      ; line X in editor buffer).
0199      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0200                                                      ; (offset 0 .. @fb.scrrows)
0201      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0202      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0203      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0204      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0205      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0206      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0207      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0208      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0209      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0210      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0211      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0212      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0213      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0214      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0215      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0216               ;-----------------------------------------------------------------
0217               ; File handle structure                @>a400-a4ff   (256 bytes)
0218               ;-----------------------------------------------------------------
0219      A400     fh.struct         equ  >a400           ; stevie file handling structures
0220               ;*******************************************************************************
0221               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0222               ;*******************************************************************************
0223      A400     dsrlnk.dsrlws     equ  fh.struct       ; dsrlnk workspace 32 bytes
0224      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0225      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0226      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0227      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0228      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0229      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0230      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0231      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0232      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0233      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0234      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0235      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0236      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0237      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0238      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0239      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0240      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0241      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0242      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0243      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0244      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0245      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0246      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0247      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0248      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0249      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0250      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0251      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0252      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0253      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0254      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0255      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0256      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0257      A468     fh.dir.rec.ptr    equ  fh.struct +104  ; Pointer to directory record
0258      A46A     fh.membuffer      equ  fh.struct +106  ; 80 bytes file memory buffer
0259      A4BA     fh.free           equ  fh.struct +186  ; End of structure
0260               ;-----------------------------------------------------------------
0261               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0262               ; Overloads file handle structure
0263               ;-----------------------------------------------------------------
0264      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0265      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0266               ;-----------------------------------------------------------------
0267               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0268               ;-----------------------------------------------------------------
0269      A500     edb.struct        equ  >a500           ; Begin structure
0270      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0271      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0272      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0273      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0274      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0275      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0276      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0277      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0278      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0279      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0280      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0281                                                      ; with current filename.
0282      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0283                                                      ; with current file type.
0284      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0285      A51A     edb.sams.lopage   equ  edb.struct + 26 ; Lowest SAMS page in use
0286      A51C     edb.sams.hipage   equ  edb.struct + 28 ; Highest SAMS page in use
0287      A51E     edb.bk.fb.topline equ  edb.struct + 30 ; Backup of @fb.topline before opening
0288                                                      ; other file from special file.
0289      A520     edb.bk.fb.row     equ  edb.struct + 32 ; Backup of @fb.row before opening
0290                                                      ; other file from special file.
0291      A522     edb.special.file  equ  edb.struct + 34 ; Special file in editor buffer
0292      A524     edb.lineterm      equ  edb.struct + 36 ; Line termination character
0293                                                      ; MSB: Mode on (>ff) or off (>00)
0294                                                      ; LSB: Line termination character
0295      A526     edb.filename      equ  edb.struct + 38 ; 80 characters inline buffer reserved
0296                                                      ; for filename, but not always used.
0297      A576     edb.free          equ  edb.struct + 118; End of structure
0298               ;-----------------------------------------------------------------
0299               ; Index structure                      @>a600-a6ff   (256 bytes)
0300               ;-----------------------------------------------------------------
0301      A600     idx.struct        equ  >a600           ; stevie index structure
0302      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0303      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0304      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0305      A606     idx.free          equ  idx.struct + 6  ; End of structure
0306               ;-----------------------------------------------------------------
0307               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0308               ;-----------------------------------------------------------------
0309      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0310      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0311      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0312      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0313      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0314      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0315      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0316      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0317      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0318      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0319      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0320      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0321      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0322      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0323      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0324      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0325      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0326      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0327      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0328      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0329      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0330      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0331      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0332      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0333      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0334      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0335      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0336      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0337      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0338      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0339               ;-----------------------------------------------------------------
0340               ; Stevie value stack                   @>a800-a8ff     (256 bytes)
0341               ;-----------------------------------------------------------------
0342      A900     sp2.stktop        equ  >a900           ; \
0343                                                      ; | The stack grows from high memory
0344                                                      ; | towards low memory.
0345                                                      ; |
0346                                                      ; | Stack leaking is checked in SP2
0347                                                      ; | user hook "edkey.keyscan.hook"
0348                                                      ; /
0349               ;-----------------------------------------------------------------
0350               ; Scratchpad memory work copy          @>ad00-aeff     (256 bytes)
0351               ;-----------------------------------------------------------------
0352      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0353                                                      ; / stored in cartridge ROM bank7.asm
0354               
0355      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0356                                                      ; | scratchpad backup/restore routines.
0357                                                      ; /
0358               
0359      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0360               
0361      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0362                                                      ; calling TI Basic/External programs
0363               ;-----------------------------------------------------------------
0364               ; Farjump return stack                 @>af00-afff     (256 bytes)
0365               ;-----------------------------------------------------------------
0366      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0367                                                      ; Grows downwards from high to low.
0368               ;-----------------------------------------------------------------
0369               ; Index                                @>b000-bfff    (4096 bytes)
0370               ;-----------------------------------------------------------------
0371      B000     idx.top           equ  >b000           ; Top of index
0372      1000     idx.size          equ  4096            ; Index size
0373               ;-----------------------------------------------------------------
0374               ; Editor buffer                        @>c000-cfff    (4096 bytes)
0375               ;-----------------------------------------------------------------
0376      C000     edb.top           equ  >c000           ; Editor buffer high memory
0377      1000     edb.size          equ  4096            ; Editor buffer size
0378               ;-----------------------------------------------------------------
0379               ; Frame buffer & uncrunch area         @>d000-dcff    (3584 bytes)
0380               ;-----------------------------------------------------------------
0381      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0382      0960     fb.size           equ  80*30           ; Frame buffer size
0383      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0384                                                      ; / >d960->dcff
0385               ;-----------------------------------------------------------------
0386               ; Defaults area                        @>de00-dfff     (512 bytes)
0387               ;-----------------------------------------------------------------
0388      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0389      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0390      DEA0     tv.cat.fname      equ  >dea0           ; Default catalog device (80 bytes)
0391               ;-----------------------------------------------------------------
0392               ; Directory/File catalog               @>e000-eeff    (3840 bytes)
0393               ;-----------------------------------------------------------------
0394      E000     cat.top           equ  >e000           ; Top of file catalog
0395      E000     cat.filecount     equ  cat.top         ; Total files in catalog
0396      E002     cat.fpicker.idx   equ  cat.top + 2     ; Index in catalog (1st entry on page)
0397      E004     cat.hilit.colrow  equ  cat.top + 4     ; File picker column, row offset
0398      E006     cat.hilit.colrow2 equ  cat.top + 6     ; File picker previous column, row offset
0399      E008     cat.nofilespage   equ  cat.top + 8     ; Number of files per page
0400      E00A     cat.currentpage   equ  cat.top + 10    ; Current page
0401      E00C     cat.totalpages    equ  cat.top + 12    ; Total number of pages
0402      E00E     cat.previouspage  equ  cat.top + 14    ; Previous page
0403      E010     cat.shortcut.idx  equ  cat.top + 16    ; Index in catalog(current entry on page)
0404      E012     cat.norowscol     equ  cat.top + 18    ; Number of rows per column
0405      E014     cat.fullfname     equ  cat.top + 20    ; Device & filename string (80)
0406               ;-----------------------------------------------------------------
0407               ; Directory/File catalog pointers and numbers
0408               ;-----------------------------------------------------------------
0409      E064     cat.var1          equ  cat.top + 100   ; Temp variable 1
0410      E066     cat.var2          equ  cat.top + 102   ; Temp variable 2
0411      E068     cat.var3          equ  cat.top + 104   ; Temp variable 3
0412      E06A     cat.var4          equ  cat.top + 106   ; Temp variable 4
0413      E06C     cat.var5          equ  cat.top + 108   ; Temp variable 5
0414      E06E     cat.var6          equ  cat.top + 110   ; Temp variable 6
0415      E070     cat.var7          equ  cat.top + 112   ; Temp variable 7
0416      E072     cat.var8          equ  cat.top + 114   ; Temp variable 8
0417      E074     cat.ptrlist       equ  cat.top + 116   ; Pointer list to filenames (254=127*2)
0418      E172     cat.ftlist        equ  cat.top + 370   ; Filetype list (128)
0419      E1F2     cat.fslist        equ  cat.top + 498   ; Filesize size (256)
0420      E2F2     cat.rslist        equ  cat.top + 754   ; Record size list (128)
0421      E372     cat.free1         equ  cat.top + 882   ; **free** up to 954
0422               ;-----------------------------------------------------------------
0423               ; Directory/File catalog strings (always length byte included)
0424               ;-----------------------------------------------------------------
0425      E3BA     cat.volname       equ  cat.top + 954   ; Volume name (12)
0426      E3C6     cat.typelist      equ  cat.top + 966   ; Filetype string list (762=127*6)
0427      E6C0     cat.sizelist      equ  cat.top + 1728  ; Filesize string list (508=127*4)
0428      E8BC     cat.fnlist        equ  cat.top + 2236  ; Filename string list (1524=127*12)
0429      EEB0     cat.device        equ  cat.top + 3760  ; Current device name string (80)
0430      0F00     cat.size          equ  3840            ; Catalog total size
0431               ;-----------------------------------------------------------------
0432               ; Command buffer                       ; @>ef00-efff   (256 bytes)
0433               ;-----------------------------------------------------------------
0434      EF00     cmdb.top          equ  >ef00           ; Top of command history buffer
0435      0100     cmdb.size         equ  256             ; Command buffer size
0436               ;-----------------------------------------------------------------
0437               ; Heap & Strings area                  @>f000-ffff    (4096 bytes)
0438               ;-----------------------------------------------------------------
0439      F000     heap.top          equ  >f000           ; 80 Current filename
0440      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0441      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0442               ;-----------------------------------------------------------------
0443               ; Stevie specific equates
0444               ;-----------------------------------------------------------------
0445      0000     fh.fopmode.none           equ  0        ; No file operation in progress
0446      0001     fh.fopmode.readfile       equ  1        ; Read file from disk to memory
0447      0002     fh.fopmode.writefile      equ  2        ; Save file from memory to disk
0448      0006     cmdb.rows                 equ  6        ; Number of rows in CMDB pane
0449      A028     rom0_kscan_out            equ  keycode1 ; Where to store value of key pressed
0450      9900     tv.colorize.reset         equ  >9900    ; Colorization off
0451      00FE     tv.1timeonly              equ  254      ; One-time only flag indicator
0452      0100     tv.sams.maxpage           equ  256      ; Max SAMS pages supported
                   < stevie_b1.asm
0032                       copy  "equ.c99.asm"         ; Classic99 emulator configuration
     **** ****     > equ.c99.asm
0001               * FILE......: equ.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0033                       copy  "equ.keys.asm"        ; Equates for keyboard mapping
     **** ****     > equ.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0034               
0035               ***************************************************************
0036               * BANK 1
0037               ********|*****|*********************|**************************
0038      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0039                       aorg  >6000
0040                       save  >6000,>8000           ; Save bank
0041                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 6024             data  rom.program2          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0D53                 stri 'STEVIE 1.5.25'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 352E     
     6034 3235     
0057               
0061               
0065               
                   < stevie_b1.asm
0042               
0043               ***************************************************************
0044               * Step 1: Switch to bank 0 (uniform code accross all banks)
0045               ********|*****|*********************|**************************
0046                       aorg  kickstart.code1       ; >6040
0047 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0048               ***************************************************************
0049               * Step 2: Satisfy assembler, must know relocated code
0050               ********|*****|*********************|**************************
0051                       aorg  >2000                 ; Relocate to >2000
0052                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2023 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               * skip_sams_size            equ  1  ; Skip SAMS card size check
0030               *
0031               * == VDP
0032               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0033               * skip_vdp_f18a             equ  1  ; Skip f18a support
0034               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0035               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0036               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0037               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0038               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0039               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0040               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0041               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0042               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0043               * skip_vdp_sprites          equ  1  ; Skip sprites support
0044               * skip_vdp_cursor           equ  1  ; Skip cursor support
0045               *
0046               * == Sound & speech
0047               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0048               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0049               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0050               *
0051               * == Keyboard
0052               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0053               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0054               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0055               *
0056               * == Utilities
0057               * skip_random_generator     equ  1  ; Skip random generator functions
0058               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0059               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0060               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0061               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0062               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0063               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0064               * skip_cpu_strings          equ  1  ; Skip string support utilities
0065               
0066               * == Kernel/Multitasking
0067               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0068               * skip_mem_paging           equ  1  ; Skip support for memory paging
0069               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0070               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0071               *
0072               * == Startup behaviour
0073               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0074               *                                   ; to pre-defined backup address
0075               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0076               *******************************************************************************
0077               
0078               *//////////////////////////////////////////////////////////////
0079               *                       RUNLIB SETUP
0080               *//////////////////////////////////////////////////////////////
0081               
0082                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0083                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0084                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0085                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0086                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0087               
0091               
0092                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0093                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0094                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2FC0     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 2A4C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 2A4C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 2726     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 2A56     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 273C     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 273C     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 2A56     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 29C8     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 273C     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 273C     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 272C     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0095                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0096                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 24EC     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               ***************************************************************
0521               * putlst
0522               * Loop over string list and display in columns
0523               ***************************************************************
0524               * bl  @putlst
0525               *--------------------------------------------------------------
0526               * INPUT
0527               * @wyx = Cursor position
0528               * tmp0 = Cutover row and column offset for next column.
0529               *        Set to >0000 for single-column list
0530               * tmp1 = Pointer to first length-prefixed string in list
0531               * tmp2 = Number of strings to display
0532               * tmp3 = String padding length
0533               *--------------------------------------------------------------
0534               * OUTPUT
0535               * @waux1 = Pointer to next entry in list after display.
0536               *          Only set if tmp2 < entries in list
0537               *--------------------------------------------------------------
0538               * Register usage
0539               * r0 (!), tmp0, tmp1, tmp2, tmp3, tmp4
0540               *
0541               * Memory usage
0542               * r0     = Counter used in padding
0543               * r1     = Backup YX used in padding
0544               * @waux1 = Backup string padding length
0545               ********|*****|*********************|**************************
0546               putlst:
0547 244A 0649  14         dect  stack
0548 244C C64B  30         mov   r11,*stack            ; Save return address
0549                       ;------------------------------------------------------
0550                       ; Prepare
0551                       ;------------------------------------------------------
0552 244E C807  30 	mov   tmp3,@waux1           ; Backup string padding length
     2450 833C     
0553 2452 C220  30         mov   @wyx,tmp4             ; Backup @wyx position
     2454 832A     
0554                       ;------------------------------------------------------
0555                       ; Dump strings to VDP
0556                       ;------------------------------------------------------
0557               putlst.loop:
0558 2456 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0559 2458 0987  32         srl   tmp3,8                ; Right align
0560 245A 1343  14         jeq   putlst.exit           ; Exit early if 0-byte string length
0561                       ;------------------------------------------------------
0562                       ; Display string
0563                       ;------------------------------------------------------
0564 245C 0649  14         dect  stack
0565 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0566 2460 0649  14         dect  stack
0567 2462 C645  30         mov   tmp1,*stack           ; Push tmp1
0568 2464 0649  14         dect  stack
0569 2466 C646  30         mov   tmp2,*stack           ; Push tmp2
0570 2468 0649  14         dect  stack
0571 246A C647  30         mov   tmp3,*stack           ; Push tmp3
0572 246C 0649  14         dect  stack
0573 246E C648  30         mov   tmp4,*stack           ; Push tmp4
0574               
0575 2470 06A0  32         bl    @xutst0               ; Display string
     2472 2420     
0576                                                   ; \ i  tmp1 = Pointer to string
0577                                                   ; / i  @wyx = Cursor position at
0578               
0579 2474 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0580 2476 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0581 2478 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0582 247A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0583 247C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0584                       ;------------------------------------------------------
0585                       ; Pad string?
0586                       ;------------------------------------------------------
0587 247E 0760  30         abs   @waux1                ; Padding length set?
     2480 833C     
0588 2482 131C  14         jeq   putlst.nextcol        ; No, skip padding
0589               
0590 2484 81E0  30         c     @waux1,tmp3           ; Padding length < string length?
     2486 833C     
0591 2488 1319  14         jeq   putlst.nextcol        ; Yes, skip padding
0592                       ;------------------------------------------------------
0593                       ; Pad string
0594                       ;------------------------------------------------------
0595 248A C060  30         mov   @wyx,r1               ; Backup YX
     248C 832A     
0596 248E A807  30         a     tmp3,@wyx             ; Add string length
     2490 832A     
0597 2492 C020  30         mov   @waux1,r0             ; Set counter
     2494 833C     
0598               
0599               putlst.loop.pad:
0600 2496 0649  14         dect  stack
0601 2498 C644  30         mov   tmp0,*stack           ; Push tmp0
0602 249A 0649  14         dect  stack
0603 249C C645  30         mov   tmp1,*stack           ; Push tmp1
0604               
0605 249E 06A0  32         bl    @yx2pnt               ; Get VDP destination address (tmp0)
     24A0 23FA     
0606               
0607 24A2 0205  20         li    tmp1,32
     24A4 0020     
0608 24A6 06A0  32         bl    @xvputb               ; Write byte to VDP
     24A8 22CC     
0609                                                   ; \ i  tmp0 = VDP destination address
0610                                                   ; / i  tmp1 = Byte to write in LSB
0611               
0612 24AA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0613 24AC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0614               
0615 24AE 05A0  26         inc   @wyx                  ; X=X+1
     24B0 832A     
0616 24B2 0600  14         dec   r0
0617 24B4 81C0  18         c     r0,tmp3
0618 24B6 15EF  14         jgt   putlst.loop.pad
0619               
0620 24B8 C801  30         mov   r1,@wyx               ; Restore YX
     24BA 832A     
0621                       ;------------------------------------------------------
0622                       ; Next column?
0623                       ;------------------------------------------------------
0624               putlst.nextcol:
0625 24BC C104  18         mov   tmp0,tmp0             ; \ Single column list?
0626 24BE 1309  14         jeq   !                     ; / Yes, skip next column handling
0627               
0628 24C0 9120  30         cb    @wyx,tmp0             ; Cutover row reached?
     24C2 832A     
0629 24C4 1106  14         jlt   !                     ; Not yet, move down
0630               
0631 24C6 D808  30         movb  tmp4,@wyx             ; Restore Y-position
     24C8 832A     
0632 24CA B820  42         ab    @tmp0lb,@wyx+1        ; Add column offset
     24CC 8309     
     24CE 832B     
0633               
0634 24D0 1002  14         jmp   putlst.next           ; Next iteration
0635 24D2 06A0  32 !       bl    @down                 ; Move cursor down
     24D4 272C     
0636                       ;------------------------------------------------------
0637                       ; Prepare for next iteration
0638                       ;------------------------------------------------------
0639               putlst.next:
0640 24D6 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0641 24D8 0585  14         inc   tmp1                  ; Consider length byte
0642 24DA 0606  14         dec   tmp2
0643 24DC 15BC  14         jgt   putlst.loop           ; Display next entry in list
0644 24DE C805  30         mov   tmp1,@waux1           ; Save pointer to next entry in list
     24E0 833C     
0645                       ;------------------------------------------------------
0646                       ; Exit
0647                       ;------------------------------------------------------
0648               putlst.exit:
0649 24E2 C2F9  30         mov   *stack+,r11           ; Pop r11
0650 24E4 045B  20         b     *r11                  ; Return
                   < runlib.asm
0097               
0099                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24E6 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 24E8 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 24EA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 24EC C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 24EE 1604  14         jne   !                     ; No, continue
0028               
0029 24F0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F2 FFCE     
0030 24F4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F6 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24F8 0264  22 !       ori   tmp0,>4000
     24FA 4000     
0035 24FC 06C4  14         swpb  tmp0
0036 24FE D804  30         movb  tmp0,@vdpa
     2500 8C02     
0037 2502 06C4  14         swpb  tmp0
0038 2504 D804  30         movb  tmp0,@vdpa
     2506 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 2508 020F  20         li    r15,vdpw              ; Set VDP write address
     250A 8C00     
0043 250C C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     250E 2516     
     2510 8320     
0044 2512 0460  24         b     @mcloop               ; Write data to VDP and return
     2514 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 2516 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0101               
0103                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2518 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 251A C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 251C C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 251E 06C4  14 xpyv2m  swpb  tmp0
0027 2520 D804  30         movb  tmp0,@vdpa
     2522 8C02     
0028 2524 06C4  14         swpb  tmp0
0029 2526 D804  30         movb  tmp0,@vdpa
     2528 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 252A 020F  20         li    r15,vdpr              ; Set VDP read address
     252C 8800     
0034 252E C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     2530 2538     
     2532 8320     
0035 2534 0460  24         b     @mcloop               ; Read data from VDP
     2536 8320     
0036 2538 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0105               
0107                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 253A C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 253C C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 253E C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 2540 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 2542 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 2544 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2546 FFCE     
0034 2548 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     254A 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 254C 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     254E 0001     
0039 2550 1603  14         jne   cpym0                 ; No, continue checking
0040 2552 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2554 04C6  14         clr   tmp2                  ; Reset counter
0042 2556 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2558 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     255A 7FFF     
0047 255C C1C4  18         mov   tmp0,tmp3
0048 255E 0247  22         andi  tmp3,1
     2560 0001     
0049 2562 1618  14         jne   cpyodd                ; Odd source address handling
0050 2564 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2566 0247  22         andi  tmp3,1
     2568 0001     
0052 256A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 256C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     256E 2020     
0057 2570 1605  14         jne   cpym3
0058 2572 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2574 259A     
     2576 8320     
0059 2578 0460  24         b     @mcloop               ; Copy memory and exit
     257A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 257C C1C6  18 cpym3   mov   tmp2,tmp3
0064 257E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2580 0001     
0065 2582 1301  14         jeq   cpym4
0066 2584 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2586 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2588 0646  14         dect  tmp2
0069 258A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 258C C1C7  18         mov   tmp3,tmp3
0074 258E 1301  14         jeq   cpymz
0075 2590 D554  38         movb  *tmp0,*tmp1
0076 2592 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2594 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2596 8000     
0081 2598 10E9  14         jmp   cpym2
0082 259A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0109               
0113               
0117               
0119                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 259C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 259E 0649  14         dect  stack
0065 25A0 C64B  30         mov   r11,*stack            ; Push return address
0066 25A2 0649  14         dect  stack
0067 25A4 C640  30         mov   r0,*stack             ; Push r0
0068 25A6 0649  14         dect  stack
0069 25A8 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 25AA 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 25AC 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 25AE 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     25B0 4000     
0077 25B2 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     25B4 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0082 25BA 04C0  14         clr   r0
0083 25BC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 25BE D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 25C0 D100  18         movb  r0,tmp0
0086 25C2 0984  32         srl   tmp0,8                ; Right align
0087 25C4 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     25C6 833C     
0088 25C8 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 25CA C339  30         mov   *stack+,r12           ; Pop r12
0094 25CC C039  30         mov   *stack+,r0            ; Pop r0
0095 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0096 25D0 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 25D2 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 25D4 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 25D6 0649  14         dect  stack
0135 25D8 C64B  30         mov   r11,*stack            ; Push return address
0136 25DA 0649  14         dect  stack
0137 25DC C640  30         mov   r0,*stack             ; Push r0
0138 25DE 0649  14         dect  stack
0139 25E0 C64C  30         mov   r12,*stack            ; Push r12
0140 25E2 0649  14         dect  stack
0141 25E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 25E6 0649  14         dect  stack
0143 25E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 25EA 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 25EC 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 25EE 0284  22         ci    tmp0,255              ; Crash if page > 255
     25F0 00FF     
0153 25F2 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25F4 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25F6 001E     
0158 25F8 150A  14         jgt   !
0159 25FA 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25FC 0004     
0160 25FE 1107  14         jlt   !
0161 2600 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     2602 0012     
0162 2604 1508  14         jgt   sams.page.set.switch_page
0163 2606 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     2608 0006     
0164 260A 1501  14         jgt   !
0165 260C 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 260E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     2610 FFCE     
0170 2612 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2614 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 2616 020C  20         li    r12,>1e00             ; SAMS CRU address
     2618 1E00     
0176 261A C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 261C 06C0  14         swpb  r0                    ; LSB to MSB
0178 261E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 2620 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     2622 4000     
0180 2624 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 2626 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 262A C339  30         mov   *stack+,r12           ; Pop r12
0188 262C C039  30         mov   *stack+,r0            ; Pop r0
0189 262E C2F9  30         mov   *stack+,r11           ; Pop return address
0190 2630 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 2632 0649  14         dect  stack
0205 2634 C64C  30         mov   r12,*stack            ; Push r12
0206 2636 020C  20         li    r12,>1e00             ; SAMS CRU address
     2638 1E00     
0207 263A 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 263C C339  30         mov   *stack+,r12           ; Pop r12
0213 263E 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 2640 0649  14         dect  stack
0231 2642 C64C  30         mov   r12,*stack            ; Push r12
0232 2644 020C  20         li    r12,>1e00             ; SAMS CRU address
     2646 1E00     
0233 2648 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 264A C339  30         mov   *stack+,r12           ; Pop r12
0239 264C 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               sams.layout:
0266 264E C13B  30         mov   *r11+,tmp0            ; Get P0
0267               xsams.layout:
0268 2650 0649  14         dect  stack
0269 2652 C64B  30         mov   r11,*stack            ; Save return address
0270 2654 0649  14         dect  stack
0271 2656 C644  30         mov   tmp0,*stack           ; Save tmp0
0272 2658 0649  14         dect  stack
0273 265A C64C  30         mov   r12,*stack            ; Save r12
0274                       ;------------------------------------------------------
0275                       ; Set SAMS registers
0276                       ;------------------------------------------------------
0277 265C 020C  20         li    r12,>1e00             ; SAMS CRU address
     265E 1E00     
0278 2660 1D00  16         sbo   0                     ; Enable access to SAMS registers
0279               
0280 2662 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2664 4004     
0281 2666 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2668 4006     
0282 266A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     266C 4014     
0283 266E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2670 4016     
0284 2672 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2674 4018     
0285 2676 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2678 401A     
0286 267A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     267C 401C     
0287 267E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2680 401E     
0288               
0289 2682 1E00  16         sbz   0                     ; Disable access to SAMS registers
0290 2684 1D01  16         sbo   1                     ; Enable SAMS mapper
0291                       ;------------------------------------------------------
0292                       ; Exit
0293                       ;------------------------------------------------------
0294               sams.layout.exit:
0295 2686 C339  30         mov   *stack+,r12           ; Pop r12
0296 2688 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0297 268A C2F9  30         mov   *stack+,r11           ; Pop r11
0298 268C 045B  20         b     *r11                  ; Return to caller
0299               ***************************************************************
0300               * SAMS standard page layout table
0301               *--------------------------------------------------------------
0302               sams.layout.standard:
0303 268E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0304 2690 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0305 2692 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0306 2694 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0307 2696 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0308 2698 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0309 269A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0310 269C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0311               
0312               
0313               ***************************************************************
0314               * sams.layout.copy
0315               * Copy SAMS memory layout
0316               ***************************************************************
0317               * bl  @sams.layout.copy
0318               *     data P0
0319               *--------------------------------------------------------------
0320               * P0 = Pointer to 8 words RAM buffer for results
0321               *--------------------------------------------------------------
0322               * OUTPUT
0323               * RAM buffer will have the SAMS page number for each range
0324               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0325               *--------------------------------------------------------------
0326               * Register usage
0327               * tmp0, tmp1, tmp2, tmp3
0328               ********|*****|*********************|**************************
0329               sams.layout.copy:
0330 269E C1FB  30         mov   *r11+,tmp3            ; Get P0
0331               
0332 26A0 0649  14         dect  stack
0333 26A2 C64B  30         mov   r11,*stack            ; Push return address
0334 26A4 0649  14         dect  stack
0335 26A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0336 26A8 0649  14         dect  stack
0337 26AA C645  30         mov   tmp1,*stack           ; Push tmp1
0338 26AC 0649  14         dect  stack
0339 26AE C646  30         mov   tmp2,*stack           ; Push tmp2
0340 26B0 0649  14         dect  stack
0341 26B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0342                       ;------------------------------------------------------
0343                       ; Copy SAMS layout
0344                       ;------------------------------------------------------
0345 26B4 0205  20         li    tmp1,sams.layout.copy.data
     26B6 26D6     
0346 26B8 0206  20         li    tmp2,8                ; Set loop counter
     26BA 0008     
0347                       ;------------------------------------------------------
0348                       ; Set SAMS memory pages
0349                       ;------------------------------------------------------
0350               sams.layout.copy.loop:
0351 26BC C135  30         mov   *tmp1+,tmp0           ; Get memory address
0352 26BE 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     26C0 259E     
0353                                                   ; | i  tmp0   = Memory address
0354                                                   ; / o  @waux1 = SAMS page
0355               
0356 26C2 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     26C4 833C     
0357               
0358 26C6 0606  14         dec   tmp2                  ; Next iteration
0359 26C8 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363               sams.layout.copy.exit:
0364 26CA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0365 26CC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0366 26CE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0367 26D0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0368 26D2 C2F9  30         mov   *stack+,r11           ; Pop r11
0369 26D4 045B  20         b     *r11                  ; Return to caller
0370               ***************************************************************
0371               * SAMS memory range table
0372               *--------------------------------------------------------------
0373               sams.layout.copy.data:
0374 26D6 2000             data  >2000                 ; >2000-2fff
0375 26D8 3000             data  >3000                 ; >3000-3fff
0376 26DA A000             data  >a000                 ; >a000-afff
0377 26DC B000             data  >b000                 ; >b000-bfff
0378 26DE C000             data  >c000                 ; >c000-cfff
0379 26E0 D000             data  >d000                 ; >d000-dfff
0380 26E2 E000             data  >e000                 ; >e000-efff
0381 26E4 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0121               
0125               
0129               
0131                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 26E6 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     26E8 FFBF     
0010 26EA 0460  28         b     @putv01
     26EC 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 26EE 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     26F0 0040     
0018 26F2 0460  28         b     @putv01
     26F4 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26F6 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26F8 FFDF     
0026 26FA 0460  28         b     @putv01
     26FC 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26FE 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     2700 0020     
0034 2702 0460  28         b     @putv01
     2704 2346     
                   < runlib.asm
0133               
0135                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 2706 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     2708 FFFE     
0011 270A 0460  28         b     @putv01
     270C 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 270E 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     2710 0001     
0019 2712 0460  28         b     @putv01
     2714 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 2716 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     2718 FFFD     
0027 271A 0460  28         b     @putv01
     271C 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 271E 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     2720 0002     
0035 2722 0460  28         b     @putv01
     2724 2346     
                   < runlib.asm
0137               
0139                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 2726 C83B  42 at      mov   *r11+,@wyx
     2728 832A     
0019 272A 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 272C B820  46 down    ab    @hb$01,@wyx
     272E 2012     
     2730 832A     
0028 2732 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 2734 7820  46 up      sb    @hb$01,@wyx
     2736 2012     
     2738 832A     
0037 273A 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 273C C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 273E D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     2740 832A     
0051 2742 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     2744 832A     
0052 2746 045B  20         b     *r11
                   < runlib.asm
0141               
0143                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 2748 C120  30 yx2px   mov   @wyx,tmp0
     274A 832A     
0022 274C C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 274E 06C4  14         swpb  tmp0                  ; Y<->X
0024 2750 04C5  14         clr   tmp1                  ; Clear before copy
0025 2752 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2754 20A0  32         coc   @wbit1,config         ; f18a present ?
     2756 201E     
0030 2758 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 275A 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     275C 833A     
     275E 2788     
0032 2760 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2762 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2764 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2766 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2768 0500     
0037 276A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 276C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 276E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2770 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2772 D105  18         movb  tmp1,tmp0
0051 2774 06C4  14         swpb  tmp0                  ; X<->Y
0052 2776 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2778 2020     
0053 277A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 277C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     277E 2012     
0059 2780 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2782 2024     
0060 2784 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2786 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2788 0050            data   80
0067               
0068               
                   < runlib.asm
0145               
0149               
0153               
0155                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 278A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 278C 06A0  32         bl    @putvr                ; Write once
     278E 2332     
0015 2790 391C             data  >391c                 ; VR1/57, value 00011100
0016 2792 06A0  32         bl    @putvr                ; Write twice
     2794 2332     
0017 2796 391C             data  >391c                 ; VR1/57, value 00011100
0018 2798 06A0  32         bl    @putvr
     279A 2332     
0019 279C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 279E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 27A0 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 27A2 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27A4 2332     
0030 27A6 3900             data  >3900
0031 27A8 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 27AA C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 27AC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27AE 2332     
0044 27B0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 27B2 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 27B4 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 27B6 06A0  32         bl    @cpym2v
     27B8 24E6     
0060 27BA 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     27BC 27FE     
     27BE 0008     
0061 27C0 06A0  32         bl    @putvr
     27C2 2332     
0062 27C4 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 27C6 06A0  32         bl    @putvr
     27C8 2332     
0064 27CA 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 27CC 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     27CE 2332     
0068 27D0 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 27D2 0204  20         li    tmp0,>3f00
     27D4 3F00     
0073 27D6 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     27D8 22BA     
0074 27DA D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     27DC 8800     
0075 27DE 0984  32         srl   tmp0,8
0076 27E0 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     27E2 8800     
0077 27E4 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 27E6 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 27E8 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     27EA BFFF     
0081 27EC 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 27EE 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     27F0 4000     
0084               
0085               f18chk_exit:
0086 27F2 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27F4 228E     
0087 27F6 3F00             data  >3f00,>00,6
     27F8 0000     
     27FA 0006     
0088 27FC 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27FE 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 2800 3F00             data  >3f00                 ; 3f02 / 3f00
0095 2802 0340             data  >0340                 ; 3f04   0340  idle
0096 2804 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 2806 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 2808 06A0  32         bl    @putvr
     280A 2332     
0124 280C 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 280E 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2810 2332     
0127 2812 3900             data  >3900                 ; Lock the F18a
0128 2814 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 2816 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 2818 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     281A 201E     
0149 281C 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 281E C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     2820 8802     
0154 2822 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     2824 2332     
0155 2826 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 2828 04C4  14         clr   tmp0
0157 282A D120  30         movb  @vdps,tmp0
     282C 8802     
0158 282E 0984  32         srl   tmp0,8
0159 2830 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0157               
0159                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 2832 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     2834 832A     
0018 2836 D17B  28         movb  *r11+,tmp1
0019 2838 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 283A D1BB  28         movb  *r11+,tmp2
0021 283C 0986  32         srl   tmp2,8                ; Repeat count
0022 283E C1CB  18         mov   r11,tmp3
0023 2840 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2842 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 2844 020B  20         li    r11,hchar1
     2846 284C     
0028 2848 0460  28         b     @xfilv                ; Draw
     284A 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 284C 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     284E 2022     
0033 2850 1302  14         jeq   hchar2                ; Yes, exit
0034 2852 C2C7  18         mov   tmp3,r11
0035 2854 10EE  14         jmp   hchar                 ; Next one
0036 2856 05C7  14 hchar2  inct  tmp3
0037 2858 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0161               
0163                       copy  "vdp_vchar.asm"            ; VDP vchar functions
     **** ****     > vdp_vchar.asm
0001               * FILE......: vdp_vchar.a99
0002               * Purpose...: VDP vchar module
0003               
0004               ***************************************************************
0005               * Repeat characters vertically at YX
0006               ***************************************************************
0007               *  BL    @VCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 285A C83B  42 vchar   mov   *r11+,@wyx            ; Set YX position
     285C 832A     
0018 285E C1CB  18         mov   r11,tmp3              ; Save R11 in TMP3
0019 2860 C220  30 vchar1  mov   @wcolmn,tmp4          ; Get columns per row
     2862 833A     
0020 2864 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2866 23FA     
0021 2868 D177  28         movb  *tmp3+,tmp1           ; Byte to write
0022 286A D1B7  28         movb  *tmp3+,tmp2
0023 286C 0986  32         srl   tmp2,8                ; Repeat count
0024               *--------------------------------------------------------------
0025               *    Setup VDP write address
0026               *--------------------------------------------------------------
0027 286E 06A0  32 vchar2  bl    @vdwa                 ; Setup VDP write address
     2870 22B6     
0028               *--------------------------------------------------------------
0029               *    Dump tile to VDP and do housekeeping
0030               *--------------------------------------------------------------
0031 2872 D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0032 2874 A108  18         a     tmp4,tmp0             ; Next row
0033 2876 0606  14         dec   tmp2
0034 2878 16FA  14         jne   vchar2
0035 287A 8817  42         c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     287C 2022     
0036 287E 1303  14         jeq   vchar3                ; Yes, exit
0037 2880 C837  42         mov   *tmp3+,@wyx           ; Save YX position
     2882 832A     
0038 2884 10ED  14         jmp   vchar1                ; Next one
0039 2886 05C7  14 vchar3  inct  tmp3
0040 2888 0457  20         b     *tmp3                 ; Exit
0041               
0042               ***************************************************************
0043               * Repeat characters vertically at YX
0044               ***************************************************************
0045               * TMP0 = YX position
0046               * TMP1 = Byte to write
0047               * TMP2 = Repeat count
0048               ***************************************************************
0049 288A C20B  18 xvchar  mov   r11,tmp4              ; Save return address
0050 288C C804  30         mov   tmp0,@wyx             ; Set cursor position
     288E 832A     
0051 2890 06C5  14         swpb  tmp1                  ; Byte to write into MSB
0052 2892 C1E0  30         mov   @wcolmn,tmp3          ; Get columns per row
     2894 833A     
0053 2896 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     2898 23FA     
0054               *--------------------------------------------------------------
0055               *    Setup VDP write address
0056               *--------------------------------------------------------------
0057 289A 06A0  32 xvcha1  bl    @vdwa                 ; Setup VDP write address
     289C 22B6     
0058               *--------------------------------------------------------------
0059               *    Dump tile to VDP and do housekeeping
0060               *--------------------------------------------------------------
0061 289E D7C5  30         movb  tmp1,*r15             ; Dump tile to VDP
0062 28A0 A120  30         a     @wcolmn,tmp0          ; Next row
     28A2 833A     
0063 28A4 0606  14         dec   tmp2
0064 28A6 16F9  14         jne   xvcha1
0065 28A8 0458  20         b     *tmp4                 ; Exit
                   < runlib.asm
0165               
0169               
0173               
0175                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 28AA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     28AC 8334     
0015 28AE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     28B0 2006     
0016 28B2 0204  20         li    tmp0,muttab
     28B4 28C4     
0017 28B6 0205  20         li    tmp1,sound            ; Sound generator port >8400
     28B8 8400     
0018 28BA D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 28BC D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 28BE D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 28C0 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 28C2 045B  20         b     *r11
0023 28C4 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     28C6 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 28C8 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     28CA 8334     
0044 28CC C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     28CE 8336     
0045 28D0 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     28D2 FFF8     
0046 28D4 E0BB  30         soc   *r11+,config          ; Set options
0047 28D6 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     28D8 2012     
     28DA 831B     
0048 28DC 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 28DE 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     28E0 2006     
0060 28E2 1301  14         jeq   sdpla1                ; Yes, play
0061 28E4 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 28E6 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 28E8 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     28EA 831B     
     28EC 2000     
0067 28EE 1301  14         jeq   sdpla3                ; Play next note
0068 28F0 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 28F2 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     28F4 2002     
0070 28F6 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 28F8 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     28FA 8336     
0075 28FC 06C4  14         swpb  tmp0
0076 28FE D804  30         movb  tmp0,@vdpa
     2900 8C02     
0077 2902 06C4  14         swpb  tmp0
0078 2904 D804  30         movb  tmp0,@vdpa
     2906 8C02     
0079 2908 04C4  14         clr   tmp0
0080 290A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     290C 8800     
0081 290E 131E  14         jeq   sdexit                ; Yes. exit
0082 2910 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2912 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2914 8336     
0084 2916 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2918 8800     
     291A 8400     
0085 291C 0604  14         dec   tmp0
0086 291E 16FB  14         jne   vdpla2
0087 2920 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2922 8800     
     2924 831B     
0088 2926 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2928 8336     
0089 292A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 292C C120  30 mmplay  mov   @wsdtmp,tmp0
     292E 8336     
0094 2930 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2932 130C  14         jeq   sdexit                ; Yes, exit
0096 2934 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2936 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2938 8336     
0098 293A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     293C 8400     
0099 293E 0605  14         dec   tmp1
0100 2940 16FC  14         jne   mmpla2
0101 2942 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2944 831B     
0102 2946 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2948 8336     
0103 294A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 294C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     294E 2004     
0108 2950 1607  14         jne   sdexi2                ; No, exit
0109 2952 C820  42         mov   @wsdlst,@wsdtmp
     2954 8334     
     2956 8336     
0110 2958 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     295A 2012     
     295C 831B     
0111 295E 045B  20 sdexi1  b     *r11                  ; Exit
0112 2960 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     2962 FFF8     
0113 2964 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0177               
0181               
0185               
0189               
0192                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 2966 0649  14         dect  stack
0038 2968 C64B  30         mov   r11,*stack            ; Push return address
0039 296A 0649  14         dect  stack
0040 296C C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 296E 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     2970 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 2972 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 2974 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 2976 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 2978 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 297A 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 297C E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     297E 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 2980 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 2982 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     2984 29C2     
     2986 83C6     
0074 2988 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     298A 29C4     
     298C 83FA     
0075 298E C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     2990 29C6     
     2992 83FE     
0076               
0077 2994 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 2996 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     2998 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 299A 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     299C 83E0     
0084               
0085 299E 06A0  28         bl    @kscan                ; Call KSCAN
     29A0 000E     
0086 29A2 02E0  18         lwpi  ws1                   ; Activate user workspace
     29A4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 29A6 D120  30         movb  @>837c,tmp0           ; Get flag
     29A8 837C     
0091 29AA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 29AC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 29AE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     29B0 8375     
0097 29B2 0984  32         srl   tmp0,8                ; / Move to LSB
0099 29B4 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     29B6 A028     
0103 29B8 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     29BA 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 29BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 29BE C2F9  30         mov   *stack+,r11           ; Pop r11
0110 29C0 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 29C2 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 29C4 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 29C6 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0197               
0199                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 29C8 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 29CA C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     29CC 8340     
0025 29CE 04E0  26         clr   @waux1
     29D0 833C     
0026 29D2 04E0  26         clr   @waux2
     29D4 833E     
0027 29D6 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     29D8 833C     
0028 29DA C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 29DC 0205  20         li    tmp1,4                ; 4 nibbles
     29DE 0004     
0033 29E0 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 29E2 0246  22         andi  tmp2,>000f            ; Only keep LSN
     29E4 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 29E6 0286  22         ci    tmp2,>000a
     29E8 000A     
0039 29EA 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 29EC C21B  26         mov   *r11,tmp4
0045 29EE 0988  32         srl   tmp4,8                ; Right justify
0046 29F0 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     29F2 FFF6     
0047 29F4 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 29F6 C21B  26         mov   *r11,tmp4
0054 29F8 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     29FA 00FF     
0055               
0056 29FC A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 29FE 06C6  14         swpb  tmp2
0058 2A00 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2A02 0944  24         srl   tmp0,4                ; Next nibble
0060 2A04 0605  14         dec   tmp1
0061 2A06 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2A08 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2A0A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 2A0C C160  30         mov   @waux3,tmp1           ; Get pointer
     2A0E 8340     
0067 2A10 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2A12 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2A14 C120  30         mov   @waux2,tmp0
     2A16 833E     
0070 2A18 06C4  14         swpb  tmp0
0071 2A1A DD44  32         movb  tmp0,*tmp1+
0072 2A1C 06C4  14         swpb  tmp0
0073 2A1E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2A20 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2A22 8340     
0078 2A24 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2A26 2016     
0079 2A28 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2A2A C120  30         mov   @waux1,tmp0
     2A2C 833C     
0084 2A2E 06C4  14         swpb  tmp0
0085 2A30 DD44  32         movb  tmp0,*tmp1+
0086 2A32 06C4  14         swpb  tmp0
0087 2A34 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2A36 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A38 2020     
0092 2A3A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 2A3C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 2A3E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2A40 7FFF     
0098 2A42 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2A44 8340     
0099 2A46 0460  28         b     @xutst0               ; Display string
     2A48 2420     
0100 2A4A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 2A4C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     2A4E 832A     
0122 2A50 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A52 8000     
0123 2A54 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0201               
0203                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 2A56 0207  20 mknum   li    tmp3,5                ; Digit counter
     2A58 0005     
0020 2A5A C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 2A5C C155  26         mov   *tmp1,tmp1            ; /
0022 2A5E C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 2A60 0228  22         ai    tmp4,4                ; Get end of buffer
     2A62 0004     
0024 2A64 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     2A66 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 2A68 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 2A6A 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 2A6C 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 2A6E B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 2A70 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 2A72 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 2A74 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 2A76 0607  14         dec   tmp3                  ; Decrease counter
0036 2A78 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 2A7A 0207  20         li    tmp3,4                ; Check first 4 digits
     2A7C 0004     
0041 2A7E 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 2A80 C11B  26         mov   *r11,tmp0
0043 2A82 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 2A84 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 2A86 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 2A88 05CB  14 mknum3  inct  r11
0047 2A8A 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2A8C 2020     
0048 2A8E 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 2A90 045B  20         b     *r11                  ; Exit
0050 2A92 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 2A94 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 2A96 13F8  14         jeq   mknum3                ; Yes, exit
0053 2A98 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 2A9A 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     2A9C 7FFF     
0058 2A9E C10B  18         mov   r11,tmp0
0059 2AA0 0224  22         ai    tmp0,-4
     2AA2 FFFC     
0060 2AA4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2AA6 0206  20         li    tmp2,>0500            ; String length = 5
     2AA8 0500     
0062 2AAA 0460  28         b     @xutstr               ; Display string
     2AAC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2AAE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2AB0 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2AB2 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2AB4 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2AB6 0207  20         li    tmp3,5                ; Set counter
     2AB8 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2ABA 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2ABC 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2ABE 0584  14         inc   tmp0                  ; Next character
0106 2AC0 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2AC2 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2AC4 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2AC6 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2AC8 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2ACA 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2ACC DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2ACE 0607  14         dec   tmp3                  ; Last character ?
0122 2AD0 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2AD2 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2AD4 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2AD6 832A     
0141 2AD8 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2ADA 8000     
0142 2ADC 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0205               
0209               
0213               
0217               
0221               
0223                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2ADE 0649  14         dect  stack
0023 2AE0 C64B  30         mov   r11,*stack            ; Save return address
0024 2AE2 0649  14         dect  stack
0025 2AE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2AE6 0649  14         dect  stack
0027 2AE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2AEA 0649  14         dect  stack
0029 2AEC C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2AEE 0649  14         dect  stack
0031 2AF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2AF2 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2AF4 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2AF6 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2AF8 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2AFA 0649  14         dect  stack
0044 2AFC C64B  30         mov   r11,*stack            ; Save return address
0045 2AFE 0649  14         dect  stack
0046 2B00 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2B02 0649  14         dect  stack
0048 2B04 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2B06 0649  14         dect  stack
0050 2B08 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2B0A 0649  14         dect  stack
0052 2B0C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2B0E C1D4  26 !       mov   *tmp0,tmp3
0057 2B10 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2B12 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2B14 00FF     
0059 2B16 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2B18 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2B1A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2B1C 0584  14         inc   tmp0                  ; Next byte
0067 2B1E 0607  14         dec   tmp3                  ; Shorten string length
0068 2B20 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2B22 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2B24 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2B26 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2B28 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2B2A C187  18         mov   tmp3,tmp2
0078 2B2C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2B2E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2B30 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2B32 2540     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2B34 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2B36 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B38 FFCE     
0090 2B3A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B3C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2B3E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2B40 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2B42 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2B44 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2B46 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2B48 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2B4A 0649  14         dect  stack
0124 2B4C C64B  30         mov   r11,*stack            ; Save return address
0125 2B4E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2B50 05D9  26         inct  *stack                ; Skip "data P1"
0127 2B52 0649  14         dect  stack
0128 2B54 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2B56 0649  14         dect  stack
0130 2B58 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2B5A 0649  14         dect  stack
0132 2B5C C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2B5E C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2B60 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2B62 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2B64 0649  14         dect  stack
0144 2B66 C64B  30         mov   r11,*stack            ; Save return address
0145 2B68 0649  14         dect  stack
0146 2B6A C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2B6C 0649  14         dect  stack
0148 2B6E C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2B70 0649  14         dect  stack
0150 2B72 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2B74 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2B76 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2B78 0586  14         inc   tmp2
0161 2B7A 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2B7C 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2B7E 0286  22         ci    tmp2,255
     2B80 00FF     
0167 2B82 1505  14         jgt   string.getlenc.panic
0168 2B84 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2B86 0606  14         dec   tmp2                  ; One time adjustment
0174 2B88 C806  30         mov   tmp2,@waux1           ; Store length
     2B8A 833C     
0175 2B8C 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2B8E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2B90 FFCE     
0181 2B92 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2B94 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2B96 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2B98 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2B9A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2B9C C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2B9E 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0225               
0229               
0231                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2BA0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2BA2 F000     
0024 2BA4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2BA6 F002     
0025 2BA8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2BAA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2BAC 0200  20         li    r0,>8306              ; Scratchpad source address
     2BAE 8306     
0030 2BB0 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2BB2 F006     
0031 2BB4 0202  20         li    r2,62                 ; Loop counter
     2BB6 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2BB8 CC70  46         mov   *r0+,*r1+
0037 2BBA CC70  46         mov   *r0+,*r1+
0038 2BBC 0642  14         dect  r2
0039 2BBE 16FC  14         jne   cpu.scrpad.backup.copy
0040 2BC0 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2BC2 83FE     
     2BC4 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2BC6 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2BC8 F000     
0046 2BCA C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2BCC F002     
0047 2BCE C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2BD0 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2BD2 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2BD4 0200  20         li    r0,cpu.scrpad.tgt
     2BD6 F000     
0075 2BD8 0201  20         li    r1,>8300
     2BDA 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2BDC CC70  46         mov   *r0+,*r1+
0081 2BDE CC70  46         mov   *r0+,*r1+
0082 2BE0 0281  22         ci    r1,>8400
     2BE2 8400     
0083 2BE4 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2BE6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0232                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2BE8 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2BEA CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2BEC CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2BEE CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2BF0 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2BF2 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2BF4 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2BF6 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2BF8 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2BFA 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2BFC 8310     
0055                                                   ;        as of register r8
0056 2BFE 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2C00 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2C02 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2C04 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2C06 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2C08 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2C0A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2C0C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2C0E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2C10 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2C12 0606  14         dec   tmp2
0069 2C14 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2C16 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2C18 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2C1A 2C20     
0075                                                   ; R14=PC
0076 2C1C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2C1E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2C20 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2C22 2BD4     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2C24 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2C26 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2C28 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2C2A 8300     
0126 2C2C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2C2E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2C30 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2C32 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2C34 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2C36 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2C38 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2C3A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2C3C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2C3E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2C40 0606  14         dec   tmp2
0139 2C42 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2C44 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2C46 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2C48 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0236                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0237                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2C4A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2C4C 2C4E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2C4E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2C50 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2C52 A428     
0064 2C54 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2C56 201C     
0065 2C58 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2C5A 8356     
0066 2C5C C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2C5E 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2C60 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2C62 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2C64 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2C66 06C0  14         swpb  r0                    ;
0075 2C68 D800  30         movb  r0,@vdpa              ; Send low byte
     2C6A 8C02     
0076 2C6C 06C0  14         swpb  r0                    ;
0077 2C6E D800  30         movb  r0,@vdpa              ; Send high byte
     2C70 8C02     
0078 2C72 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2C74 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2C76 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2C78 0704  14         seto  r4                    ; Init counter
0086 2C7A 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C7C A420     
0087 2C7E 0580  14 !       inc   r0                    ; Point to next char of name
0088 2C80 0584  14         inc   r4                    ; Increment char counter
0089 2C82 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2C84 0007     
0090 2C86 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2C88 80C4  18         c     r4,r3                 ; End of name?
0093 2C8A 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2C8C 06C0  14         swpb  r0                    ;
0098 2C8E D800  30         movb  r0,@vdpa              ; Send low byte
     2C90 8C02     
0099 2C92 06C0  14         swpb  r0                    ;
0100 2C94 D800  30         movb  r0,@vdpa              ; Send high byte
     2C96 8C02     
0101 2C98 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2C9A 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2C9C DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2C9E 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2CA0 2DBA     
0109 2CA2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2CA4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2CA6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2CA8 04E0  26         clr   @>83d0
     2CAA 83D0     
0118 2CAC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2CAE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2CB0 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2CB2 A432     
0121               
0122 2CB4 0584  14         inc   r4                    ; Adjust for dot
0123 2CB6 A804  30         a     r4,@>8356             ; Point to position after name
     2CB8 8356     
0124 2CBA C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2CBC 8356     
     2CBE A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2CC0 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CC2 83E0     
0130 2CC4 04C1  14         clr   r1                    ; Version found of dsr
0131 2CC6 020C  20         li    r12,>0f00             ; Init cru address
     2CC8 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2CCA C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2CCC 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2CCE 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2CD0 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2CD2 0100     
0145 2CD4 04E0  26         clr   @>83d0                ; Clear in case we are done
     2CD6 83D0     
0146 2CD8 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2CDA 2000     
0147 2CDC 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2CDE C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2CE0 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2CE2 1D00  16         sbo   0                     ; Turn on ROM
0154 2CE4 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2CE6 4000     
0155 2CE8 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2CEA 2DB6     
0156 2CEC 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2CEE A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2CF0 A40A     
0166 2CF2 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2CF4 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2CF6 83D2     
0172                                                   ; subprogram
0173               
0174 2CF8 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2CFA C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2CFC 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2CFE C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2D00 83D2     
0183                                                   ; subprogram
0184               
0185 2D02 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2D04 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2D06 04C5  14         clr   r5                    ; Remove any old stuff
0194 2D08 D160  30         movb  @>8355,r5             ; Get length as counter
     2D0A 8355     
0195 2D0C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2D0E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2D10 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2D12 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2D14 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2D16 A420     
0206 2D18 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2D1A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2D1C 0605  14         dec   r5                    ; Update loop counter
0211 2D1E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2D20 0581  14         inc   r1                    ; Next version found
0217 2D22 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2D24 A42A     
0218 2D26 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2D28 A42C     
0219 2D2A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2D2C A430     
0220               
0221 2D2E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2D30 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2D32 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D34 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2D36 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2D38 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2D3A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2D3C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2D3E A400     
0236 2D40 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2D42 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2D44 A428     
0242                                                   ; (8 or >a)
0243 2D46 0281  26         ci    r1,8                  ; was it 8?
     2D48 0008     
0244 2D4A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2D4C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2D4E 8350     
0246                                                   ; Get error byte from @>8350
0247 2D50 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2D52 06C0  22         swpb  r0                    ;
0255 2D54 D800  34         movb  r0,@vdpa              ; send low byte
     2D56 8C02     
0256 2D58 06C0  22         swpb  r0                    ;
0257 2D5A D800  34         movb  r0,@vdpa              ; send high byte
     2D5C 8C02     
0258 2D5E D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2D60 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2D62 09D1  50         srl   r1,13                 ; just keep error bits
0266 2D64 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2D66 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2D68 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2D6A 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2D6C A400     
0278               dsrlnk.error.devicename_invalid:
0279 2D6E 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2D70 06C1  22         swpb  r1                    ; put error in hi byte
0282 2D72 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2D74 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2D76 201C     
0284                                                   ; / to indicate error
0285 2D78 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2D7A A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2D7C 2D7E             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2D7E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2D80 83E0     
0319               
0320 2D82 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2D84 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2D86 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2D88 A42A     
0325 2D8A C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2D8C C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2D8E C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2D90 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2D92 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2D94 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2D96 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2D98 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2D9A 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2D9C 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2D9E 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2DA0 4000     
     2DA2 2DB6     
0340 2DA4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2DA6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2DA8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2DAA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2DAC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2DAE A400     
0358 2DB0 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2DB2 A434     
0359               
0360 2DB4 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2DB6 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2DB8 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2DBA 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0238                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2DBC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2DBE C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2DC0 0649  22         dect  stack
0053 2DC2 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2DC4 0204  24         li    tmp0,dsrlnk.savcru
     2DC6 A42A     
0058 2DC8 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2DCA 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2DCC 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2DCE 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2DD0 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2DD2 37D7     
0066 2DD4 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2DD6 8370     
0067                                                   ; / location
0068 2DD8 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2DDA A44C     
0069 2DDC 04C5  22         clr   tmp1                  ; io.op.open
0070 2DDE 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2DE0 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2DE2 0649  22         dect  stack
0098 2DE4 C64B  38         mov   r11,*stack            ; Save return address
0099 2DE6 0205  24         li    tmp1,io.op.close      ; io.op.close
     2DE8 0001     
0100 2DEA 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2DEC C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2DEE 0649  22         dect  stack
0126 2DF0 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2DF2 0205  24         li    tmp1,io.op.read       ; io.op.read
     2DF4 0002     
0129 2DF6 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2DF8 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2DFA 0649  22         dect  stack
0156 2DFC C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2DFE C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2E00 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2E02 0005     
0160               
0161 2E04 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2E06 A43E     
0162               
0163 2E08 06A0  36         bl    @xvputb               ; Write character count to PAB
     2E0A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2E0C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2E0E 0003     
0168 2E10 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2E12 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2E14 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2E16 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2E18 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2E1A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2E1C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2E1E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2E20 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2E22 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2E24 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2E26 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2E28 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2E2A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2E2C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2E2E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2E30 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2E32 A44C     
0246               
0247 2E34 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2E36 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2E38 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2E3A 0009     
0254 2E3C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2E3E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2E40 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2E42 8322     
     2E44 833C     
0259               
0260 2E46 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2E48 A42A     
0261 2E4A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2E4C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2E4E 2C4A     
0268 2E50 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2E52 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2E54 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2E56 2D7A     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2E58 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2E5A C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2E5C 833C     
     2E5E 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2E60 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2E62 A436     
0292 2E64 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2E66 0005     
0293 2E68 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2E6A 22E4     
0294 2E6C C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2E6E C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2E70 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2E72 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0240               
0242                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2E74 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2E76 0649  22         dect  stack
0038 2E78 C64B  38         mov   r11,*stack            ; Save return address
0039 2E7A 0649  22         dect  stack
0040 2E7C C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2E7E C004  30         mov   tmp0,r0               ; Get Pointer
0045 2E80 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2E82 0014     
0046               fg99.send.loop:
0047 2E84 04E0  34         clr   @>6000                ; Signal new byte
     2E86 6000     
0048 2E88 0201  24         li    r1,>0038              ; >7000 >> 9
     2E8A 0038     
0049 2E8C D070  44         movb  *r0+,r1
0050 2E8E 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2E90 04D1  30         clr   *r1                   ; Send byte
0053 2E92 0602  22         dec   r2                    ; Prepare for next iteration
0054 2E94 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2E96 04E0  34         clr   @>6000                ; Done sending filename
     2E98 6000     
0057 2E9A 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2E9C 0200  24         li    r0,>6000              ; check >6000->6200
     2E9E 6000     
0063 2EA0 0202  24         li    r2,>100
     2EA2 0100     
0064 2EA4 C070  46 !       mov   *r0+, r1
0065 2EA6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2EA8 0602  22         dec   r2
0067 2EAA 16FC  14         jne   -!
0068 2EAC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2EAE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2EB0 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2EB2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0244               
0245               *//////////////////////////////////////////////////////////////
0246               *                            TIMERS
0247               *//////////////////////////////////////////////////////////////
0248               
0249                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2EB4 0300  22 tmgr    limi  0                     ; No interrupt processing
     2EB6 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2EB8 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2EBA 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2EBC 2360  32         coc   @wbit2,r13            ; C flag on ?
     2EBE 201C     
0029 2EC0 1602  14         jne   tmgr1a                ; No, so move on
0030 2EC2 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2EC4 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2EC6 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2EC8 2020     
0035 2ECA 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2ECC 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2ECE 2010     
0048 2ED0 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2ED2 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2ED4 200E     
0050 2ED6 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2ED8 0460  28         b     @kthread              ; Run kernel thread
     2EDA 2F52     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2EDC 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2EDE 2014     
0056 2EE0 13EB  14         jeq   tmgr1
0057 2EE2 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2EE4 2012     
0058 2EE6 16E8  14         jne   tmgr1
0059 2EE8 C120  38         mov   @wtiusr,tmp0
     2EEA 832E     
0060 2EEC 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2EEE 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2EF0 2F50     
0065 2EF2 C10A  30         mov   r10,tmp0
0066 2EF4 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2EF6 00FF     
0067 2EF8 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2EFA 201C     
0068 2EFC 1303  14         jeq   tmgr5
0069 2EFE 0284  26         ci    tmp0,60               ; 1 second reached ?
     2F00 003C     
0070 2F02 1002  14         jmp   tmgr6
0071 2F04 0284  26 tmgr5   ci    tmp0,50
     2F06 0032     
0072 2F08 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2F0A 1001  14         jmp   tmgr8
0074 2F0C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2F0E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2F10 832C     
0079 2F12 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2F14 FF00     
0080 2F16 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2F18 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2F1A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2F1C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2F1E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2F20 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2F22 830C     
     2F24 830D     
0089 2F26 1608  14         jne   tmgr10                ; No, get next slot
0090 2F28 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2F2A FF00     
0091 2F2C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2F2E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2F30 8330     
0096 2F32 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2F34 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2F36 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2F38 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2F3A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2F3C 8315     
     2F3E 8314     
0103 2F40 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2F42 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2F44 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2F46 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2F48 10F7  14         jmp   tmgr10                ; Process next slot
0108 2F4A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2F4C FF00     
0109 2F4E 10B4  14         jmp   tmgr1
0110 2F50 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0250                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2F52 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2F54 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2F56 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2F58 2006     
0023 2F5A 1602  14         jne   kthread_kb
0024 2F5C 06A0  36         bl    @sdpla1               ; Run sound player
     2F5E 28E6     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2F60 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2F62 2966     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2F64 0460  28         b     @tmgr3                ; Exit
     2F66 2EDC     
                   < runlib.asm
0251                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2F68 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2F6A 832E     
0018 2F6C E0A0  42         soc   @wbit7,config         ; Enable user hook
     2F6E 2012     
0019 2F70 045B  24 mkhoo1  b     *r11                  ; Return
0020      2EB8     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2F72 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2F74 832E     
0029 2F76 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2F78 FEFF     
0030 2F7A 045B  24         b     *r11                  ; Return
                   < runlib.asm
0252               
0254                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2F7C C13B  46 mkslot  mov   *r11+,tmp0
0018 2F7E C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2F80 C184  30         mov   tmp0,tmp2
0023 2F82 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2F84 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2F86 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2F88 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2F8A 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2F8C C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2F8E 881B  46         c     *r11,@w$ffff          ; End of list ?
     2F90 2022     
0035 2F92 1301  14         jeq   mkslo1                ; Yes, exit
0036 2F94 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2F96 05CB  22 mkslo1  inct  r11
0041 2F98 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2F9A C13B  46 clslot  mov   *r11+,tmp0
0053 2F9C 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2F9E A120  38         a     @wtitab,tmp0          ; Add table base
     2FA0 832C     
0055 2FA2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2FA4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2FA6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2FA8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2FAA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2FAC A120  38         a     @wtitab,tmp0          ; Add table base
     2FAE 832C     
0071 2FB0 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2FB2 C154  38         mov   *tmp0,tmp1
0073 2FB4 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2FB6 FF00     
0074 2FB8 C505  38         mov   tmp1,*tmp0
0075 2FBA 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0256               
0257               
0258               
0259               *//////////////////////////////////////////////////////////////
0260               *                    RUNLIB INITIALISATION
0261               *//////////////////////////////////////////////////////////////
0262               
0263               ***************************************************************
0264               *  RUNLIB - Runtime library initalisation
0265               ***************************************************************
0266               *  B  @RUNLIB
0267               *--------------------------------------------------------------
0268               *  REMARKS
0269               *  if R0 in WS1 equals >4a4a we were called from the system
0270               *  crash handler so we return there after initialisation.
0271               
0272               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0273               *  after clearing scratchpad memory. This has higher priority
0274               *  as crash handler flag R0.
0275               ********|*****|*********************|**************************
0282 2FBC 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2FBE 8302     
0284               *--------------------------------------------------------------
0285               * Alternative entry point
0286               *--------------------------------------------------------------
0287 2FC0 0300  22 runli1  limi  0                     ; Turn off interrupts
     2FC2 0000     
0288 2FC4 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2FC6 8300     
0289 2FC8 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2FCA 83C0     
0290               *--------------------------------------------------------------
0291               * Clear scratch-pad memory from R4 upwards
0292               *--------------------------------------------------------------
0293 2FCC 0202  20 runli2  li    r2,>8308
     2FCE 8308     
0294 2FD0 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0295 2FD2 0282  22         ci    r2,>8400
     2FD4 8400     
0296 2FD6 16FC  14         jne   runli3
0297               *--------------------------------------------------------------
0298               * Exit to TI-99/4A title screen ?
0299               *--------------------------------------------------------------
0300 2FD8 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2FDA FFFF     
0301 2FDC 1602  14         jne   runli4                ; No, continue
0302 2FDE 0420  42         blwp  @0                    ; Yes, bye bye
     2FE0 0000     
0303               *--------------------------------------------------------------
0304               * Determine if VDP is PAL or NTSC
0305               *--------------------------------------------------------------
0306 2FE2 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2FE4 833C     
0307 2FE6 04C1  14         clr   r1                    ; Reset counter
0308 2FE8 0202  20         li    r2,10                 ; We test 10 times
     2FEA 000A     
0309 2FEC C0E0  30 runli5  mov   @vdps,r3
     2FEE 8802     
0310 2FF0 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2FF2 2020     
0311 2FF4 1302  14         jeq   runli6
0312 2FF6 0581  14         inc   r1                    ; Increase counter
0313 2FF8 10F9  14         jmp   runli5
0314 2FFA 0602  14 runli6  dec   r2                    ; Next test
0315 2FFC 16F7  14         jne   runli5
0316 2FFE 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     3000 1250     
0317 3002 1202  14         jle   runli7                ; No, so it must be NTSC
0318 3004 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     3006 201C     
0319               *--------------------------------------------------------------
0320               * Copy machine code to scratchpad (prepare tight loop)
0321               *--------------------------------------------------------------
0322 3008 06A0  32 runli7  bl    @loadmc
     300A 221A     
0323               *--------------------------------------------------------------
0324               * Initialize registers, memory, ...
0325               *--------------------------------------------------------------
0326 300C 04C1  14 runli9  clr   r1
0327 300E 04C2  14         clr   r2
0328 3010 04C3  14         clr   r3
0329 3012 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     3014 A900     
0330 3016 020F  20         li    r15,vdpw              ; Set VDP write address
     3018 8C00     
0332 301A 06A0  32         bl    @mute                 ; Mute sound generators
     301C 28AA     
0334               *--------------------------------------------------------------
0335               * Setup video memory
0336               *--------------------------------------------------------------
0338 301E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     3020 4A4A     
0339 3022 1605  14         jne   runlia
0340 3024 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     3026 228E     
0341 3028 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     302A 0000     
     302C 3000     
0346 302E 06A0  32 runlia  bl    @filv
     3030 228E     
0347 3032 0FC0             data  pctadr,spfclr,16      ; Load color table
     3034 00F4     
     3036 0010     
0348               *--------------------------------------------------------------
0349               * Check if there is a F18A present
0350               *--------------------------------------------------------------
0354 3038 06A0  32         bl    @f18unl               ; Unlock the F18A
     303A 278A     
0355 303C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     303E 27B4     
0356 3040 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     3042 27B4     
0357 3044 06A0  32         bl    @f18chk               ; Check if F18A is there /
     3046 27B4     
0358 3048 06A0  32         bl    @f18lck               ; Lock the F18A again
     304A 27A0     
0359               
0360 304C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     304E 2332     
0361 3050 3201                   data >3201            ; F18a VR50 (>32), bit 1
0363               *--------------------------------------------------------------
0364               * Check if there is a speech synthesizer attached
0365               *--------------------------------------------------------------
0367               *       <<skipped>>
0371               *--------------------------------------------------------------
0372               * Load video mode table & font
0373               *--------------------------------------------------------------
0374 3052 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     3054 22F8     
0375 3056 7F10             data  spvmod                ; Equate selected video mode table
0376 3058 0204  20         li    tmp0,spfont           ; Get font option
     305A 0000     
0377 305C 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0378 305E 1304  14         jeq   runlid                ; Yes, skip it
0379 3060 06A0  32         bl    @ldfnt
     3062 2360     
0380 3064 1100             data  fntadr,spfont         ; Load specified font
     3066 0000     
0381               *--------------------------------------------------------------
0382               * Did a system crash occur before runlib was called?
0383               *--------------------------------------------------------------
0384 3068 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     306A 4A4A     
0385 306C 1602  14         jne   runlie                ; No, continue
0386 306E 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     3070 2086     
0387               *--------------------------------------------------------------
0388               * Branch to main program
0389               *--------------------------------------------------------------
0390 3072 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     3074 0040     
0391 3076 0460  28         b     @main                 ; Give control to main program
     3078 6046     
                   < stevie_b1.asm
0053                       copy  "rom.resident.asm"
     **** ****     > rom.resident.asm
0001               * FILE......: rom.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks.
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"      ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 307A 0649  14         dect  stack
0029 307C C644  30         mov   tmp0,*stack           ; Push tmp0
0030 307E 0649  14         dect  stack
0031 3080 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 3082 0649  14         dect  stack
0033 3084 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 3086 0649  14         dect  stack
0035 3088 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 308A C13B  30         mov   *r11+,tmp0            ; P0
0040 308C C17B  30         mov   *r11+,tmp1            ; P1
0041 308E C1BB  30         mov   *r11+,tmp2            ; P2
0042 3090 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 3092 0649  14         dect  stack
0048 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 3096 0649  14         dect  stack
0050 3098 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 309A 0649  14         dect  stack
0052 309C C646  30         mov   tmp2,*stack           ; Push tmp2
0053 309E 0649  14         dect  stack
0054 30A0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 30A2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     30A4 6000     
0060 30A6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 30A8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     30AA A228     
0064 30AC 0647  14         dect  tmp3
0065 30AE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 30B0 0647  14         dect  tmp3
0067 30B2 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 30B4 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     30B6 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 30B8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 30BA 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 30BC 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 30BE 0224  22         ai    tmp0,>0800
     30C0 0800     
0086 30C2 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 30C4 0285  22         ci    tmp1,>ffff
     30C6 FFFF     
0095 30C8 1602  14         jne   !
0096 30CA C160  34         mov   @trmpvector,tmp1
     30CC A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 30CE C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 30D0 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 30D2 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 30D4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     30D6 FFCE     
0111 30D8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     30DA 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 30DC 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 30DE C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     30E0 A228     
0122 30E2 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 30E4 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 30E6 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 30E8 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 30EA 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 30EC 028B  22         ci    r11,>6000
     30EE 6000     
0139 30F0 1104  14         jlt   rom.farjump.assert.lowmem
0140 30F2 028B  22         ci    r11,>7fff
     30F4 7FFF     
0141 30F6 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 30F8 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 30FA 028B  22         ci    r11,>2000
     30FC 2000     
0148 30FE 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 3100 028B  22         ci    r11,>3fff
     3102 3FFF     
0150 3104 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3106 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3108 A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 310A 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 310C 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 310E 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 3110 0225  22         ai    tmp1,>0800
     3112 0800     
0171 3114 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3116 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3118 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     311A FFCE     
0178 311C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     311E 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 3120 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 3122 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 3124 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3126 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3128 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0012                       copy  "fb.asm"               ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 312A 0649  14         dect  stack
0021 312C C64B  30         mov   r11,*stack            ; Save return address
0022 312E 0649  14         dect  stack
0023 3130 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3132 0649  14         dect  stack
0025 3134 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3136 0204  20         li    tmp0,fb.top
     3138 D000     
0030 313A C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     313C A300     
0031 313E 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3140 A304     
0032 3142 04E0  34         clr   @fb.row               ; Current row=0
     3144 A306     
0033 3146 04E0  34         clr   @fb.column            ; Current column=0
     3148 A30C     
0034               
0035 314A 0204  20         li    tmp0,colrow
     314C 0050     
0036 314E C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3150 A30E     
0037 3152 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3154 A310     
0038               
0039 3156 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     3158 001C     
0040 315A C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     315C A31E     
0041               
0042 315E 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     3160 31C6     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 3162 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     3164 A224     
0048 3166 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3168 A312     
0049 316A 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     316C A318     
0050 316E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     3170 A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 3172 06A0  32         bl    @film
     3174 2236     
0055 3176 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3178 0000     
     317A 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 317C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 317E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 3180 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 3182 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0013                       copy  "fb.row2line.asm"      ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 3184 0649  14         dect  stack
0025 3186 C64B  30         mov   r11,*stack            ; Save return address
0026 3188 0649  14         dect  stack
0027 318A C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 318C C120  34         mov   @parm1,tmp0
     318E A006     
0032 3190 A120  34         a     @fb.topline,tmp0
     3192 A304     
0033 3194 C804  38         mov   tmp0,@outparm1
     3196 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 3198 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 319A C2F9  30         mov   *stack+,r11           ; Pop r11
0040 319C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0014                       copy  "fb.calc.pointer.asm"  ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 319E 0649  14         dect  stack
0028 31A0 C64B  30         mov   r11,*stack            ; Save return address
0029 31A2 0649  14         dect  stack
0030 31A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 31A6 0649  14         dect  stack
0032 31A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 31AA C120  34         mov   @fb.row,tmp0
     31AC A306     
0037 31AE 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     31B0 A30E     
0038 31B2 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     31B4 A30C     
0039 31B6 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     31B8 A300     
0040 31BA C805  38         mov   tmp1,@fb.current
     31BC A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 31BE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 31C0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 31C2 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 31C4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0015                       copy  "fb.calc.scrrows.asm"  ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 31C6 0649  14         dect  stack
0026 31C8 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 31CA C820  54         mov   @fb.scrrows.max,@fb.scrrows
     31CC A31E     
     31CE A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 31D0 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     31D2 A210     
0037 31D4 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 31D6 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31D8 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 31DA 8820  50         c     @edb.special.file,@const.0
     31DC A522     
     31DE 2000     
0044 31E0 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 31E2 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     31E4 A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 31E6 0760  38         abs   @tv.error.visible     ; Error area visible?
     31E8 A22A     
0051 31EA 1303  14         jeq   fb.calc.scrrows.exit
0052 31EC 6820  54         s     @tv.error.rows,@fb.scrrows
     31EE A22C     
     31F0 A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 31F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 31F4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0016                       copy  "idx.asm"              ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 31F6 0649  14         dect  stack
0052 31F8 C64B  30         mov   r11,*stack            ; Save return address
0053 31FA 0649  14         dect  stack
0054 31FC C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 31FE 0204  20         li    tmp0,idx.top
     3200 B000     
0059 3202 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3204 A502     
0060               
0061 3206 C120  34         mov   @tv.sams.b000,tmp0
     3208 A206     
0062 320A C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     320C A600     
0063 320E C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     3210 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3212 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3214 0004     
0068 3216 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3218 A604     
0069               
0070 321A 06A0  32         bl    @_idx.sams.mapcolumn.on
     321C 3238     
0071                                                   ; Index in continuous memory region
0072               
0073 321E 06A0  32         bl    @film
     3220 2236     
0074 3222 B000                   data idx.top,>00,idx.size * 5
     3224 0000     
     3226 5000     
0075                                                   ; Clear index
0076               
0077 3228 06A0  32         bl    @_idx.sams.mapcolumn.off
     322A 326C     
0078                                                   ; Restore memory window layout
0079               
0080 322C C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     322E A602     
     3230 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3232 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3234 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3236 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3238 0649  14         dect  stack
0102 323A C64B  30         mov   r11,*stack            ; Push return address
0103 323C 0649  14         dect  stack
0104 323E C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3240 0649  14         dect  stack
0106 3242 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3244 0649  14         dect  stack
0108 3246 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3248 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     324A A602     
0113 324C 0205  20         li    tmp1,idx.top
     324E B000     
0114 3250 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3252 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3254 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3256 25D6     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3258 0584  14         inc   tmp0                  ; Next SAMS index page
0123 325A 0225  22         ai    tmp1,>1000            ; Next memory region
     325C 1000     
0124 325E 0606  14         dec   tmp2                  ; Update loop counter
0125 3260 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3262 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3264 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3266 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3268 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 326A 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 326C 0649  14         dect  stack
0151 326E C64B  30         mov   r11,*stack            ; Push return address
0152 3270 0649  14         dect  stack
0153 3272 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3274 0649  14         dect  stack
0155 3276 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3278 0649  14         dect  stack
0157 327A C646  30         mov   tmp2,*stack           ; Push tmp2
0158 327C 0649  14         dect  stack
0159 327E C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 3280 0205  20         li    tmp1,idx.top
     3282 B000     
0164 3284 0206  20         li    tmp2,5                ; Always 5 pages
     3286 0005     
0165 3288 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     328A A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 328C C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 328E 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3290 25D6     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 3292 0225  22         ai    tmp1,>1000            ; Next memory region
     3294 1000     
0176 3296 0606  14         dec   tmp2                  ; Update loop counter
0177 3298 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 329A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 329C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 329E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 32A0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 32A2 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 32A4 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 32A6 0649  14         dect  stack
0212 32A8 C64B  30         mov   r11,*stack            ; Save return address
0213 32AA 0649  14         dect  stack
0214 32AC C644  30         mov   tmp0,*stack           ; Push tmp0
0215 32AE 0649  14         dect  stack
0216 32B0 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 32B2 0649  14         dect  stack
0218 32B4 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 32B6 C184  18         mov   tmp0,tmp2             ; Line number
0223 32B8 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 32BA 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     32BC 0800     
0225               
0226 32BE 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 32C0 0A16  18         sla   tmp2,1                ; line number * 2
0231 32C2 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     32C4 A018     
0232               
0233 32C6 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     32C8 A602     
0234 32CA 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     32CC A600     
0235               
0236 32CE 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 32D0 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     32D2 A600     
0242 32D4 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     32D6 A206     
0243 32D8 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 32DA 0205  20         li    tmp1,>b000            ; Memory window for index page
     32DC B000     
0246               
0247 32DE 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     32E0 25D6     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 32E2 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     32E4 A604     
0254 32E6 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 32E8 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     32EA A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 32EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 32EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 32F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 32F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 32F4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0017                       copy  "edb.asm"              ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 32F6 0649  14         dect  stack
0023 32F8 C64B  30         mov   r11,*stack            ; Save return address
0024 32FA 0649  14         dect  stack
0025 32FC C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 32FE 0204  20         li    tmp0,edb.top          ; \
     3300 C000     
0030 3302 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3304 A500     
0031 3306 C804  38         mov   tmp0,@edb.next_free.ptr
     3308 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 330A 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     330C A50A     
0035               
0036 330E 0204  20         li    tmp0,1
     3310 0001     
0037 3312 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3314 A504     
0038               
0039 3316 0720  34         seto  @edb.block.m1         ; Reset block start line
     3318 A50E     
0040 331A 0720  34         seto  @edb.block.m2         ; Reset block end line
     331C A510     
0041               
0042 331E C820  54         mov   @tv.lineterm,@edb.lineterm
     3320 A236     
     3322 A524     
0043                                                   ; Set line termination char from default
0044               
0045 3324 0204  20         li    tmp0,txt.newfile      ; "New file"
     3326 3BA0     
0046 3328 C804  38         mov   tmp0,@edb.filename.ptr
     332A A514     
0047               
0048 332C 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     332E A440     
0049 3330 04E0  34         clr   @fh.kilobytes.prev    ; /
     3332 A45C     
0050               
0051 3334 0204  20         li    tmp0,txt.filetype.none
     3336 3CBC     
0052 3338 C804  38         mov   tmp0,@edb.filetype.ptr
     333A A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 333C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 333E C2F9  30         mov   *stack+,r11           ; Pop r11
0060 3340 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0018                       copy  "cmdb.asm"             ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 3342 0649  14         dect  stack
0023 3344 C64B  30         mov   r11,*stack            ; Save return address
0024 3346 0649  14         dect  stack
0025 3348 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 334A 0649  14         dect  stack
0027 334C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 334E 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3350 EF00     
0032 3352 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3354 A700     
0033               
0034 3356 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3358 A702     
0035 335A 0204  20         li    tmp0,6
     335C 0006     
0036 335E C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3360 A706     
0037 3362 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3364 A708     
0038               
0039 3366 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3368 A718     
0040 336A 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     336C A71A     
0041 336E 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3370 A72C     
0042 3372 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     3374 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 3376 0204  20         li    tmp0,pane.botrow      ; \
     3378 001D     
0047 337A 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     337C A706     
0048 337E 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3380 833A     
0049 3382 C105  18         mov   tmp1,tmp0             ; | Get result
0050 3384 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     3386 1800     
0051 3388 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     338A A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 338C 06A0  32         bl    @film
     338E 2236     
0056 3390 EF00                   data  cmdb.top,>00,cmdb.size
     3392 0000     
     3394 0100     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 3396 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 3398 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 339A C2F9  30         mov   *stack+,r11           ; Pop r11
0065 339C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0019                       copy  "errpane.asm"          ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 339E 0649  14         dect  stack
0023 33A0 C64B  30         mov   r11,*stack            ; Save return address
0024 33A2 0649  14         dect  stack
0025 33A4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33A6 0649  14         dect  stack
0027 33A8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33AA 0649  14         dect  stack
0029 33AC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33AE 04E0  34         clr   @tv.error.visible     ; Set to hidden
     33B0 A22A     
0034 33B2 0204  20         li    tmp0,3
     33B4 0003     
0035 33B6 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     33B8 A22C     
0036               
0037 33BA 06A0  32         bl    @film
     33BC 2236     
0038 33BE A238                   data tv.error.msg,0,160
     33C0 0000     
     33C2 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 33C4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 33C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 33C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 33CA C2F9  30         mov   *stack+,r11           ; Pop R11
0047 33CC 045B  20         b     *r11                  ; Return to caller
0048               
                   < rom.resident.asm
0020                       copy  "tv.asm"               ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 33CE 0649  14         dect  stack
0023 33D0 C64B  30         mov   r11,*stack            ; Save return address
0024 33D2 0649  14         dect  stack
0025 33D4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33D6 0649  14         dect  stack
0027 33D8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 33DA 0649  14         dect  stack
0029 33DC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 33DE 0204  20         li    tmp0,1                ; \ Set default color scheme
     33E0 0001     
0034 33E2 C804  38         mov   tmp0,@tv.colorscheme  ; /
     33E4 A212     
0035               
0036 33E6 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     33E8 A226     
0037 33EA E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     33EC 200C     
0038               
0039 33EE 0204  20         li    tmp0,fj.bottom
     33F0 B000     
0040 33F2 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     33F4 A228     
0041               
0042 33F6 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     33F8 A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 33FA 06A0  32         bl    @cpym2m
     33FC 253A     
0047 33FE 3D92                   data def.printer.fname,tv.printer.fname,7
     3400 DE00     
     3402 0007     
0048               
0049 3404 06A0  32         bl    @cpym2m
     3406 253A     
0050 3408 3D99                   data def.clip.fname.a,tv.clip.fname,10
     340A DE50     
     340C 000A     
0051               
0052 340E 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     3410 A50C     
0053               
0054 3412 0204  20         li    tmp0,13               ; \
     3414 000D     
0055 3416 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3418 A236     
0056                                                   ; / LSB = 13 Carriage return
0057                       ;-------------------------------------------------------
0058                       ; Exit
0059                       ;-------------------------------------------------------
0060               tv.init.exit:
0061 341A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0062 341C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 341E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 3420 C2F9  30         mov   *stack+,r11           ; Pop R11
0065 3422 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0021                       copy  "tv.quit.asm"          ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 3424 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3426 2806     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3428 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     342A 307A     
0028 342C 600E                   data bank7.rom        ; | i  p0 = bank address
0029 342E 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3430 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < rom.resident.asm
0022                       copy  "tv.uint16.pack.asm"   ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3432 0649  14         dect  stack
0025 3434 C64B  30         mov   r11,*stack            ; Push return address
0026 3436 0649  14         dect  stack
0027 3438 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 343A 0649  14         dect  stack
0029 343C C645  30         mov   tmp1,*stack           ; Push tmp1
0030 343E 0649  14         dect  stack
0031 3440 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3442 0649  14         dect  stack
0033 3444 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3446 0649  14         dect  stack
0035 3448 C640  30         mov   r0,*stack             ; Push r0
0036 344A 0649  14         dect  stack
0037 344C C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 344E C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3450 A006     
0042 3452 04C5  14         clr   tmp1                  ; Termination character >00
0043 3454 04E0  34         clr   @outparm1             ; Reset output parameters
     3456 A018     
0044 3458 04E0  34         clr   @outparm2             ; Reset output parameters
     345A A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 345C 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     345E 2B64     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 3460 C1A0  30         mov   @waux1,tmp2           ; Get string length
     3462 833C     
0056 3464 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 3466 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     3468 0005     
0058 346A 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 346C C120  34         mov   @parm1,tmp0           ; Pointer to input string
     346E A006     
0063               
0064 3470 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 3472 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     3474 FFF6     
0066 3476 0746  18         abs   tmp2                  ; /
0067               
0068 3478 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 347A D174  28         movb  *tmp0+,tmp1           ; Get character
0074 347C 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 347E 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 3480 0285  22         ci    tmp1,32               ; Blank ?
     3482 0020     
0080 3484 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 3486 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     3488 FFD0     
0085 348A 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 348C 0285  22         ci    tmp1,9
     348E 0009     
0087 3490 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 3492 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     3494 34C0     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 3496 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 3498 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 349A 05C6  14         inct  tmp2                  ; Update loop counter
0102 349C 0286  22         ci    tmp2,8                ; Last digit done?
     349E 0008     
0103 34A0 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 34A2 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 34A4 04E0  34         clr   @outparm1             ; Empty uint16
     34A6 A018     
0110 34A8 0720  34         seto  @outparm2             ; Invalid input string
     34AA A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 34AC C807  38         mov   tmp3,@outparm1
     34AE A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 34B0 C079  30         mov   *stack+,r1            ; Pop r1
0121 34B2 C039  30         mov   *stack+,r0            ; Pop r0
0122 34B4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 34B6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 34B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 34BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 34BC C2F9  30         mov   *stack+,r11           ; Pop r11
0127 34BE 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 34C0 2710             data  10000,1000,100,10,1
     34C2 03E8     
     34C4 0064     
     34C6 000A     
     34C8 0001     
0133               
                   < rom.resident.asm
0023                       copy  "tv.uint16.unpack.asm" ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 34CA 0649  14         dect  stack
0022 34CC C64B  30         mov   r11,*stack            ; Save return address
0023 34CE 0649  14         dect  stack
0024 34D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 34D2 06A0  32         bl    @mknum                ; Convert unsigned number to string
     34D4 2A56     
0029 34D6 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 34D8 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 34DA 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 34DB   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 34DC 0204  20         li    tmp0,uint16.unpacked
     34DE A02C     
0035 34E0 04F4  30         clr   *tmp0+                ; Clear string 01
0036 34E2 04F4  30         clr   *tmp0+                ; Clear string 23
0037 34E4 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 34E6 06A0  32         bl    @trimnum              ; Trim unsigned number string
     34E8 2AAE     
0040 34EA A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 34EC A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 34EE 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 34F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 34F2 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 34F4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0024                       copy  "tv.pad.string.asm"    ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               * Remarks
0024               * Routine must reside in RAM when @parm1 refers to string in
0025               * ROM bank. If you store this routine in a ROM bank, it can
0026               * only reference strings in the same bank or strings in RAM.
0027               * It cannot reference strings in other ROM banks.
0028               ***************************************************************
0029               tv.pad.string:
0030 34F6 0649  14         dect  stack
0031 34F8 C64B  30         mov   r11,*stack            ; Push return address
0032 34FA 0649  14         dect  stack
0033 34FC C644  30         mov   tmp0,*stack           ; Push tmp0
0034 34FE 0649  14         dect  stack
0035 3500 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 3502 0649  14         dect  stack
0037 3504 C646  30         mov   tmp2,*stack           ; Push tmp2
0038 3506 0649  14         dect  stack
0039 3508 C647  30         mov   tmp3,*stack           ; Push tmp3
0040                       ;------------------------------------------------------
0041                       ; Asserts
0042                       ;------------------------------------------------------
0043 350A C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     350C A006     
0044 350E D194  26         movb  *tmp0,tmp2            ; /
0045 3510 0986  32         srl   tmp2,8                ; Right align
0046 3512 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0047               
0048 3514 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3516 A008     
0049 3518 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0050                       ;------------------------------------------------------
0051                       ; Copy string to buffer
0052                       ;------------------------------------------------------
0053 351A C120  34         mov   @parm1,tmp0           ; Get source address
     351C A006     
0054 351E C160  34         mov   @parm4,tmp1           ; Get destination address
     3520 A00C     
0055 3522 0586  14         inc   tmp2                  ; Also include length-byte in copy
0056               
0057 3524 0649  14         dect  stack
0058 3526 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0059               
0060 3528 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     352A 2540     
0061                                                   ; \ i  tmp0 = Source CPU memory address
0062                                                   ; | i  tmp1 = Target CPU memory address
0063                                                   ; / i  tmp2 = Number of bytes to copy
0064               
0065 352C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0066                       ;------------------------------------------------------
0067                       ; Set length of new string
0068                       ;------------------------------------------------------
0069 352E C120  34         mov   @parm2,tmp0           ; Get requested length
     3530 A008     
0070 3532 0A84  32         sla   tmp0,8                ; Left align
0071 3534 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3536 A00C     
0072 3538 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0073 353A A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0074 353C 0585  14         inc   tmp1                  ; /
0075                       ;------------------------------------------------------
0076                       ; Prepare for padding string
0077                       ;------------------------------------------------------
0078 353E C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3540 A008     
0079 3542 6187  18         s     tmp3,tmp2             ; |
0080 3544 0586  14         inc   tmp2                  ; /
0081               
0082 3546 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3548 A00A     
0083 354A 0A84  32         sla   tmp0,8                ; Left align
0084                       ;------------------------------------------------------
0085                       ; Right-pad string to destination length
0086                       ;------------------------------------------------------
0087               tv.pad.string.loop:
0088 354C DD44  32         movb  tmp0,*tmp1+           ; Pad character
0089 354E 0606  14         dec   tmp2                  ; Update loop counter
0090 3550 15FD  14         jgt   tv.pad.string.loop    ; Next character
0091               
0092 3552 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3554 A00C     
     3556 A018     
0093 3558 1004  14         jmp   tv.pad.string.exit    ; Exit
0094                       ;-----------------------------------------------------------------------
0095                       ; CPU crash
0096                       ;-----------------------------------------------------------------------
0097               tv.pad.string.panic:
0098 355A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     355C FFCE     
0099 355E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3560 2026     
0100                       ;------------------------------------------------------
0101                       ; Exit
0102                       ;------------------------------------------------------
0103               tv.pad.string.exit:
0104 3562 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0105 3564 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0106 3566 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0107 3568 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0108 356A C2F9  30         mov   *stack+,r11           ; Pop r11
0109 356C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0025                       ;-----------------------------------------------------------------------
0026                       ; Logic for Index management
0027                       ;-----------------------------------------------------------------------
0028                       copy  "idx.update.asm"       ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 356E 0649  14         dect  stack
0023 3570 C64B  30         mov   r11,*stack            ; Save return address
0024 3572 0649  14         dect  stack
0025 3574 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3576 0649  14         dect  stack
0027 3578 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 357A C120  34         mov   @parm1,tmp0           ; Get line number
     357C A006     
0032 357E C160  34         mov   @parm2,tmp1           ; Get pointer
     3580 A008     
0033 3582 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 3584 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     3586 0FFF     
0039 3588 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 358A 06E0  34         swpb  @parm3
     358C A00A     
0044 358E D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3590 A00A     
0045 3592 06E0  34         swpb  @parm3                ; \ Restore original order again,
     3594 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 3596 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3598 32A6     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 359A C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     359C A018     
0056 359E C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     35A0 B000     
0057 35A2 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35A4 A018     
0058 35A6 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 35A8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35AA 32A6     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 35AC C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     35AE A018     
0068 35B0 04E4  34         clr   @idx.top(tmp0)        ; /
     35B2 B000     
0069 35B4 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     35B6 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 35B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 35BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 35BC C2F9  30         mov   *stack+,r11           ; Pop r11
0077 35BE 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0029                       copy  "idx.pointer.asm"      ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 35C0 0649  14         dect  stack
0022 35C2 C64B  30         mov   r11,*stack            ; Save return address
0023 35C4 0649  14         dect  stack
0024 35C6 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35C8 0649  14         dect  stack
0026 35CA C645  30         mov   tmp1,*stack           ; Push tmp1
0027 35CC 0649  14         dect  stack
0028 35CE C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 35D0 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35D2 A006     
0033               
0034 35D4 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     35D6 32A6     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 35D8 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     35DA A018     
0039 35DC C164  34         mov   @idx.top(tmp0),tmp1   ; /
     35DE B000     
0040               
0041 35E0 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 35E2 C185  18         mov   tmp1,tmp2             ; \
0047 35E4 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 35E6 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     35E8 00FF     
0052 35EA 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 35EC 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     35EE C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 35F0 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     35F2 A018     
0059 35F4 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     35F6 A01A     
0060 35F8 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 35FA 04E0  34         clr   @outparm1
     35FC A018     
0066 35FE 04E0  34         clr   @outparm2
     3600 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3602 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3604 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3606 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3608 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 360A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0030                       copy  "idx.delete.asm"       ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 360C 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     360E B000     
0018 3610 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3612 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3614 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3616 0606  14         dec   tmp2                  ; tmp2--
0026 3618 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 361A 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 361C 0649  14         dect  stack
0047 361E C64B  30         mov   r11,*stack            ; Save return address
0048 3620 0649  14         dect  stack
0049 3622 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3624 0649  14         dect  stack
0051 3626 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3628 0649  14         dect  stack
0053 362A C646  30         mov   tmp2,*stack           ; Push tmp2
0054 362C 0649  14         dect  stack
0055 362E C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3630 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3632 A006     
0060               
0061 3634 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3636 32A6     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3638 C120  34         mov   @outparm1,tmp0        ; Index offset
     363A A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 363C C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     363E A008     
0070 3640 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3642 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3644 A006     
0074 3646 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3648 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     364A B000     
0081 364C 04D4  26         clr   *tmp0                 ; Clear index entry
0082 364E 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3650 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3652 A008     
0088 3654 0287  22         ci    tmp3,2048
     3656 0800     
0089 3658 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 365A 06A0  32         bl    @_idx.sams.mapcolumn.on
     365C 3238     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 365E C120  34         mov   @parm1,tmp0           ; Restore line number
     3660 A006     
0103 3662 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 3664 06A0  32         bl    @_idx.entry.delete.reorg
     3666 360C     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 3668 06A0  32         bl    @_idx.sams.mapcolumn.off
     366A 326C     
0111                                                   ; Restore memory window layout
0112               
0113 366C 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 366E 06A0  32         bl    @_idx.entry.delete.reorg
     3670 360C     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 3672 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 3674 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 3676 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 3678 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 367A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 367C C2F9  30         mov   *stack+,r11           ; Pop r11
0132 367E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0031                       copy  "idx.insert.asm"       ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3680 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     3682 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 3684 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 3686 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3688 FFCE     
0027 368A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     368C 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 368E 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3690 B000     
0032 3692 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 3694 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 3696 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 3698 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 369A 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 369C 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 369E A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 36A0 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     36A2 AFFC     
0043 36A4 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 36A6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36A8 FFCE     
0049 36AA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36AC 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 36AE C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 36B0 0644  14         dect  tmp0                  ; Move pointer up
0056 36B2 0645  14         dect  tmp1                  ; Move pointer up
0057 36B4 0606  14         dec   tmp2                  ; Next index entry
0058 36B6 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 36B8 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 36BA 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 36BC 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 36BE 0649  14         dect  stack
0089 36C0 C64B  30         mov   r11,*stack            ; Save return address
0090 36C2 0649  14         dect  stack
0091 36C4 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 36C6 0649  14         dect  stack
0093 36C8 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 36CA 0649  14         dect  stack
0095 36CC C646  30         mov   tmp2,*stack           ; Push tmp2
0096 36CE 0649  14         dect  stack
0097 36D0 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 36D2 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     36D4 A008     
0102 36D6 61A0  34         s     @parm1,tmp2           ; Calculate loop
     36D8 A006     
0103 36DA 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 36DC C1E0  34         mov   @parm2,tmp3
     36DE A008     
0110 36E0 0287  22         ci    tmp3,2048
     36E2 0800     
0111 36E4 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 36E6 06A0  32         bl    @_idx.sams.mapcolumn.on
     36E8 3238     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 36EA C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36EC A008     
0123 36EE 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 36F0 06A0  32         bl    @_idx.entry.insert.reorg
     36F2 3680     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 36F4 06A0  32         bl    @_idx.sams.mapcolumn.off
     36F6 326C     
0131                                                   ; Restore memory window layout
0132               
0133 36F8 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 36FA C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     36FC A008     
0139               
0140 36FE 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3700 32A6     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3702 C120  34         mov   @outparm1,tmp0        ; Index offset
     3704 A018     
0145               
0146 3706 06A0  32         bl    @_idx.entry.insert.reorg
     3708 3680     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 370A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 370C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 370E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3710 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3712 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3714 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Logic for editor buffer
0034                       ;-----------------------------------------------------------------------
0035                       copy  "edb.line.mappage.asm"    ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer (base 1)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3716 0649  14         dect  stack
0022 3718 C64B  30         mov   r11,*stack            ; Push return address
0023 371A 0649  14         dect  stack
0024 371C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 371E 0649  14         dect  stack
0026 3720 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3722 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3724 A504     
0031 3726 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3728 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     372A FFCE     
0037 372C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     372E 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3730 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3732 A006     
0043               
0044 3734 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3736 35C0     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3738 C120  34         mov   @outparm2,tmp0        ; SAMS page
     373A A01A     
0050 373C C160  34         mov   @outparm1,tmp1        ; Pointer to line
     373E A018     
0051 3740 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3742 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3744 A208     
0057 3746 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3748 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     374A 25D6     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 374C C820  54         mov   @outparm2,@tv.sams.c000
     374E A01A     
     3750 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3752 C820  54         mov   @outparm2,@edb.sams.page
     3754 A01A     
     3756 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3758 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 375A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 375C C2F9  30         mov   *stack+,r11           ; Pop r11
0077 375E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0036                       copy  "edb.line.getlength.asm"  ; Get line length
     **** ****     > edb.line.getlength.asm
0001               * FILE......: edb.line.getlength.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 3760 0649  14         dect  stack
0022 3762 C64B  30         mov   r11,*stack            ; Push return address
0023 3764 0649  14         dect  stack
0024 3766 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3768 0649  14         dect  stack
0026 376A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 376C 04E0  34         clr   @outparm1             ; Reset length
     376E A018     
0031 3770 04E0  34         clr   @outparm2             ; Reset SAMS bank
     3772 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 3774 C120  34         mov   @parm1,tmp0           ; \
     3776 A006     
0036 3778 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 377A 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     377C A504     
0039 377E 1201  14         jle   !                     ; No, continue processing
0040 3780 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 3782 C120  34 !       mov   @parm1,tmp0           ; Get line
     3784 A006     
0046               
0047 3786 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     3788 3716     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 378A C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     378C A018     
0053 378E 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3790 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 3792 C805  38         mov   tmp1,@outparm1        ; Save length
     3794 A018     
0060 3796 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 3798 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     379A A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 379C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 379E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 37A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 37A2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0037                       copy  "edb.line.getlength2.asm" ; Get length of current row
     **** ****     > edb.line.getlength2.asm
0001               * FILE......: edb.line.getlength2.asm
0002               * Purpose...: Get length of current row (as seen from editor buffer side)
0003               
0004               ***************************************************************
0005               * edb.line.getlength2
0006               * Get length of current row (as seen from editor buffer side)
0007               ***************************************************************
0008               *  bl   @edb.line.getlength2
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.row = Row in frame buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @fb.row.length = Length of row
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               edb.line.getlength2:
0020 37A4 0649  14         dect  stack
0021 37A6 C64B  30         mov   r11,*stack            ; Save return address
0022 37A8 0649  14         dect  stack
0023 37AA C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Calculate line in editor buffer
0026                       ;------------------------------------------------------
0027 37AC C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     37AE A304     
0028 37B0 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     37B2 A306     
0029 37B4 C804  38         mov   tmp0,@parm1
     37B6 A006     
0030                       ;------------------------------------------------------
0031                       ; Get length
0032                       ;------------------------------------------------------
0033 37B8 06A0  32         bl    @edb.line.getlength   ; Get length of specified line
     37BA 3760     
0034                                                   ; \ i  @parm1    = Line number (base 0)
0035                                                   ; | o  @outparm1 = Length of line
0036                                                   ; / o  @outparm2 = SAMS page
0037               
0038 37BC C820  54         mov   @outparm1,@fb.row.length
     37BE A018     
     37C0 A308     
0039                                                   ; Save row length
0040                       ;------------------------------------------------------
0041                       ; Exit
0042                       ;------------------------------------------------------
0043               edb.line.getlength2.exit:
0044 37C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0045 37C4 C2F9  30         mov   *stack+,r11           ; Pop R11
0046 37C6 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0038                       copy  "edb.hipage.alloc.asm"    ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 37C8 0649  14         dect  stack
0021 37CA C64B  30         mov   r11,*stack            ; Save return address
0022 37CC 0649  14         dect  stack
0023 37CE C644  30         mov   tmp0,*stack           ; Push tmp0
0024 37D0 0649  14         dect  stack
0025 37D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 37D4 C120  34         mov   @edb.next_free.ptr,tmp0
     37D6 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 37D8 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     37DA 0FFF     
0035 37DC 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     37DE 0052     
0036 37E0 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     37E2 0FF0     
0037 37E4 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 37E6 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     37E8 A51C     
0043 37EA C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     37EC A500     
     37EE A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 37F0 C120  34         mov   @edb.sams.hipage,tmp0
     37F2 A51C     
0050 37F4 C160  34         mov   @edb.top.ptr,tmp1
     37F6 A500     
0051 37F8 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     37FA 25D6     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 37FC 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 37FE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3800 FFCE     
0061 3802 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3804 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3806 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3808 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 380A C2F9  30         mov   *stack+,r11           ; Pop R11
0069 380C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm" ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 380E 0649  14         dect  stack
0022 3810 C64B  30         mov   r11,*stack            ; Push return address
0023 3812 0649  14         dect  stack
0024 3814 C660  42         mov   @wyx,*stack           ; Push cursor position
     3816 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3818 06A0  32         bl    @hchar
     381A 2832     
0029 381C 0032                   byte 0,50,32,30
     381E 201E     
0030 3820 FFFF                   data EOL              ; Clear message
0031               
0032 3822 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3824 A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3826 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3828 832A     
0038 382A C2F9  30         mov   *stack+,r11           ; Pop R11
0039 382C 045B  20         b     *r11                  ; Return to task
                   < rom.resident.asm
0043                       copy  "fg99.run.asm"              ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 382E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3830 2806     
0028               
0029 3832 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3834 22F8     
0030 3836 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 3838 06A0  32         bl    @scroff               ; Turn off screen
     383A 26E6     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 383C 04E0  34         clr   @magic.str.w1
     383E A000     
0040 3840 04E0  34         clr   @magic.str.w2
     3842 A002     
0041 3844 04E0  34         clr   @magic.str.w3
     3846 A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 3848 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     384A A232     
0046 384C 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     384E 2E76     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 3850 020C  20         li    r12,>1e00             ; SAMS CRU address
     3852 1E00     
0053 3854 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 3856 0420  42         blwp @0                     ; Return to monitor
     3858 0000     
                   < rom.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 385A 0649  14         dect  stack
0009 385C C64B  30         mov   r11,*stack            ; Save return address
0010 385E 0649  14         dect  stack
0011 3860 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 3862 0649  14         dect  stack
0013 3864 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 3866 0649  14         dect  stack
0015 3868 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 386A C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     386C A224     
0020               
0021 386E 0284  22         ci    tmp0,pane.focus.fb
     3870 0000     
0022 3872 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 3874 0284  22         ci    tmp0,pane.focus.cmdb
     3876 0001     
0025 3878 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 387A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     387C FFCE     
0031 387E 06A0  32         bl    @cpu.crash            ; / Halt system.
     3880 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 3882 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3884 A70A     
     3886 832A     
0037 3888 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     388A 2020     
0038 388C 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     388E 2748     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3890 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3892 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3894 2020     
0048 3896 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3898 2748     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 389A C160  34         mov   @tv.ruler.visible,tmp1
     389C A210     
0056 389E 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 38A0 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     38A2 1000     
0058 38A4 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 38A6 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     38A8 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 38AA C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     38AC A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 38AE C160  34         mov   @tv.ruler.visible,tmp1
     38B0 A210     
0071                                                   ; Ruler visible?
0072 38B2 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 38B4 C160  34         mov   @cmdb.visible,tmp1
     38B6 A702     
0076 38B8 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     38BA FFFF     
0077 38BC 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 38BE 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     38C0 FF00     
0081 38C2 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     38C4 00F0     
0082 38C6 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     38C8 A05A     
0083               
0084 38CA C120  34         mov   @ramsat,tmp0
     38CC A056     
0085 38CE 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     38D0 00FF     
0086 38D2 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     38D4 0800     
0087 38D6 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     38D8 A05E     
0088               
0089 38DA 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 38DC 04C5  14         clr   tmp1
0095 38DE D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     38E0 A05D     
0096                                                   ; / by transparant color
0097 38E2 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     38E4 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 38E6 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     38E8 24E6     
0104 38EA 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     38EC A056     
     38EE 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 38F0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 38F2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 38F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 38F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 38F8 0460  28         b     @slotok               ; Exit task
     38FA 2F34     
                   < rom.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 38FC 0649  14         dect  stack
0009 38FE C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 3900 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3902 307A     
0014 3904 600C                   data bank6.rom        ; | i  p0 = bank address
0015 3906 7F4A                   data vec.6            ; | i  p1 = Vector with target address
0016 3908 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 390A C2F9  30         mov   *stack+,r11           ; Pop r11
0022 390C 0460  28         b     @slotok               ; Exit task
     390E 2F34     
                   < rom.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3910 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3912 A226     
0010 3914 1301  14         jeq   task.oneshot.exit
0011               
0012 3916 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3918 0460  28         b     @slotok                ; Exit task
     391A 2F34     
                   < rom.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 391C 0000             data  >0000,>0001           ; Cursor
     391E 0001     
0014 3920 0000             data  >0000,>0101           ; Current line indicator     <
     3922 0101     
0015 3924 0820             data  >0820,>0201           ; Current column indicator   v
     3926 0201     
0016               nosprite:
0017 3928 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               ***************************************************************
0021               * Stevie color schemes table
0022               *--------------------------------------------------------------
0023               * ;
0024               * ; Word 1
0025               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0026               * ; B  MSB  low-nibble     Background color text line in frame buffer
0027               * ; C  LSB  high-nibble    Foreground color top/bottom line
0028               * ; D  LSB  low-nibble     Background color top/bottom line
0029               * ;
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ;
0036               * ; Word 3
0037               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0038               * ; J  MSB  low-nibble     Background color busy top/bottom line
0039               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0040               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0041               * ;
0042               * ; Word 4
0043               * ; M  MSB  high-nibble    Foreground color command buffer header line
0044               * ; N  MSB  low-nibble     Background color command buffer header line
0045               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0046               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0047               *
0048               * ; Colors
0049               * ; 0  Transparant
0050               * ; 1  black
0051               * ; 2  Green
0052               * ; 3  Light Green
0053               * ; 4  Blue
0054               * ; 5  Light Blue
0055               * ; 6  Dark Red
0056               * ; 7  Cyan
0057               * ; 8  Red
0058               * ; 9  Light Red
0059               * ; A  Yellow
0060               * ; B  Light Yellow
0061               * ; C  Dark Green
0062               * ; D  Magenta
0063               * ; E  Grey
0064               * ; F  White
0065               *--------------------------------------------------------------
0066      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0067               
0068               tv.colorscheme.table:
0069                       ;                             ;
0070                       ;      ABCD  EFGH  IJKL  MNOP ;
0071 392A F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     392C F171     
     392E 1B1F     
     3930 7111     
0072 3932 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     3934 21FF     
     3936 F112     
     3938 21FF     
0073 393A A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     393C F0FF     
     393E 1F1A     
     3940 F1FF     
0074 3942 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     3944 1E11     
     3946 1EE1     
     3948 1E11     
0075 394A 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     394C 1511     
     394E 1F1F     
     3950 1511     
0076 3952 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     3954 1311     
     3956 1331     
     3958 1311     
0077 395A 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     395C 1011     
     395E 0171     
     3960 1711     
0078 3962 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     3964 F0FF     
     3966 1F12     
     3968 F1F6     
0079 396A 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     396C 1011     
     396E F1F1     
     3970 1F11     
0080 3972 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     3974 A111     
     3976 1F1F     
     3978 F11F     
0081 397A 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     397C 1911     
     397E 1991     
     3980 1911     
0082 3982 FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     3984 1D11     
     3986 FDDF     
     3988 1D11     
0083                       even
0084               
0085               ***************************************************************
0086               * Tab positions
0087               ********|*****|*********************|**************************
0088               tv.tabs.table.lr:
0089 398A 0007             byte  0,7,12,25             ; \   Default tab positions as used
     398C 0C19     
0090 398E 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3990 3B4F     
0091 3992 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3994 0000     
0092                                                   ; /   >ff means end-of-list.
0093               
0094               tv.tabs.table.rl:
0095 3996 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     3998 2D1E     
0096 399A 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     399C 0700     
0097 399E FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     39A0 0000     
0098                                                   ; /   >ff means end-of-list.
0099               
0100               ***************************************************************
0101               * Constants for numbers 0-10
0102               ********|*****|*********************|**************************
0103      2000     const.0       equ   w$0000          ; 0
0104      2002     const.1       equ   w$0001          ; 1
0105      2004     const.2       equ   w$0002          ; 2
0106 39A2 0003     const.3       data  3               ; 3
0107      2006     const.4       equ   w$0004          ; 4
0108 39A4 0005     const.5       data  5               ; 5
0109 39A6 0006     const.6       data  6               ; 6
0110 39A8 0007     const.7       data  7               ; 7
0111      2008     const.8       equ   w$0008          ; 8
0112 39AA 0009     const.9       data  9               ; 9
0113 39AC 000A     const.10      data  10              ; 10 ; A
0114 39AE 000B     const.11      data  11              ; 11 ; B
0115 39B0 000C     const.12      data  12              ; 12 ; C
0116 39B2 000D     const.13      data  13              ; 13 ; D
0117 39B4 000E     const.14      data  14              ; 14 ; E
0118 39B6 000F     const.15      data  15              ; 15 ; F
0119 39B8 0020     const.32      data  32              ; 32
0120 39BA 0050     const.80      data  80              ; 80
                   < rom.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: RAM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 39BC 012C     txt.delim          stri ','
0008                                  even
0009 39BE 0520     txt.bottom         stri '  BOT'
     39C0 2042     
     39C2 4F54     
0010                                  even
0011 39C4 044F     txt.ovrwrite       stri 'OVR '
     39C6 5652     
     39C8 20       
0012                                  even
0013 39CA 0449     txt.insert         stri 'INS '
     39CC 4E53     
     39CE 20       
0014                                  even
0015 39D0 0449     txt.autoinsert     stri 'INS+'
     39D2 4E53     
     39D4 2B       
0016                                  even
0017 39D6 012A     txt.star           stri '*'
0018                                  even
0019 39D8 0A4C     txt.loading        stri 'Loading...'
     39DA 6F61     
     39DC 6469     
     39DE 6E67     
     39E0 2E2E     
     39E2 2E       
0020                                  even
0021 39E4 0A53     txt.saving         stri 'Saving....'
     39E6 6176     
     39E8 696E     
     39EA 672E     
     39EC 2E2E     
     39EE 2E       
0022                                  even
0023 39F0 1250     txt.printing       stri 'Printing file.....'
     39F2 7269     
     39F4 6E74     
     39F6 696E     
     39F8 6720     
     39FA 6669     
     39FC 6C65     
     39FE 2E2E     
     3A00 2E2E     
     3A02 2E       
0024                                  even
0025 3A04 1244     txt.block.del      stri 'Deleting block....'
     3A06 656C     
     3A08 6574     
     3A0A 696E     
     3A0C 6720     
     3A0E 626C     
     3A10 6F63     
     3A12 6B2E     
     3A14 2E2E     
     3A16 2E       
0026                                  even
0027 3A18 1143     txt.block.copy     stri 'Copying block....'
     3A1A 6F70     
     3A1C 7969     
     3A1E 6E67     
     3A20 2062     
     3A22 6C6F     
     3A24 636B     
     3A26 2E2E     
     3A28 2E2E     
0028                                  even
0029 3A2A 104D     txt.block.move     stri 'Moving block....'
     3A2C 6F76     
     3A2E 696E     
     3A30 6720     
     3A32 626C     
     3A34 6F63     
     3A36 6B2E     
     3A38 2E2E     
     3A3A 2E       
0030                                  even
0031 3A3C 1053     txt.block.save     stri 'Saving block....'
     3A3E 6176     
     3A40 696E     
     3A42 6720     
     3A44 626C     
     3A46 6F63     
     3A48 6B2E     
     3A4A 2E2E     
     3A4C 2E       
0032                                  even
0033 3A4E 1843     txt.block.clip     stri 'Copying to clipboard....'
     3A50 6F70     
     3A52 7969     
     3A54 6E67     
     3A56 2074     
     3A58 6F20     
     3A5A 636C     
     3A5C 6970     
     3A5E 626F     
     3A60 6172     
     3A62 642E     
     3A64 2E2E     
     3A66 2E       
0034                                  even
0035 3A68 1250     txt.block.print    stri 'Printing block....'
     3A6A 7269     
     3A6C 6E74     
     3A6E 696E     
     3A70 6720     
     3A72 626C     
     3A74 6F63     
     3A76 6B2E     
     3A78 2E2E     
     3A7A 2E       
0036                                  even
0037 3A7C 1343     txt.clearmem       stri 'Clearing memory....'
     3A7E 6C65     
     3A80 6172     
     3A82 696E     
     3A84 6720     
     3A86 6D65     
     3A88 6D6F     
     3A8A 7279     
     3A8C 2E2E     
     3A8E 2E2E     
0038                                  even
0039 3A90 1352     txt.readdir        stri 'Reading catalog....'
     3A92 6561     
     3A94 6469     
     3A96 6E67     
     3A98 2063     
     3A9A 6174     
     3A9C 616C     
     3A9E 6F67     
     3AA0 2E2E     
     3AA2 2E2E     
0040                                  even
0041 3AA4 0E4C     txt.done.load      stri 'Load completed'
     3AA6 6F61     
     3AA8 6420     
     3AAA 636F     
     3AAC 6D70     
     3AAE 6C65     
     3AB0 7465     
     3AB2 64       
0042                                  even
0043 3AB4 1049     txt.done.insert    stri 'Insert completed'
     3AB6 6E73     
     3AB8 6572     
     3ABA 7420     
     3ABC 636F     
     3ABE 6D70     
     3AC0 6C65     
     3AC2 7465     
     3AC4 64       
0044                                  even
0045 3AC6 1041     txt.done.append    stri 'Append completed'
     3AC8 7070     
     3ACA 656E     
     3ACC 6420     
     3ACE 636F     
     3AD0 6D70     
     3AD2 6C65     
     3AD4 7465     
     3AD6 64       
0046                                  even
0047 3AD8 0E53     txt.done.save      stri 'Save completed'
     3ADA 6176     
     3ADC 6520     
     3ADE 636F     
     3AE0 6D70     
     3AE2 6C65     
     3AE4 7465     
     3AE6 64       
0048                                  even
0049 3AE8 0E43     txt.done.copy      stri 'Copy completed'
     3AEA 6F70     
     3AEC 7920     
     3AEE 636F     
     3AF0 6D70     
     3AF2 6C65     
     3AF4 7465     
     3AF6 64       
0050                                  even
0051 3AF8 0F50     txt.done.print     stri 'Print completed'
     3AFA 7269     
     3AFC 6E74     
     3AFE 2063     
     3B00 6F6D     
     3B02 706C     
     3B04 6574     
     3B06 6564     
0052                                  even
0053 3B08 1044     txt.done.delete    stri 'Delete completed'
     3B0A 656C     
     3B0C 6574     
     3B0E 6520     
     3B10 636F     
     3B12 6D70     
     3B14 6C65     
     3B16 7465     
     3B18 64       
0054                                  even
0055 3B1A 0F43     txt.done.clipboard stri 'Clipboard saved'
     3B1C 6C69     
     3B1E 7062     
     3B20 6F61     
     3B22 7264     
     3B24 2073     
     3B26 6176     
     3B28 6564     
0056                                  even
0057 3B2A 0D43     txt.done.clipdev   stri 'Clipboard set'
     3B2C 6C69     
     3B2E 7062     
     3B30 6F61     
     3B32 7264     
     3B34 2073     
     3B36 6574     
0058                                  even
0059 3B38 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3B3A 7574     
     3B3C 6F69     
     3B3E 6E73     
     3B40 6572     
     3B42 743A     
     3B44 206F     
     3B46 6E       
0060                                  even
0061 3B48 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3B4A 7574     
     3B4C 6F69     
     3B4E 6E73     
     3B50 6572     
     3B52 743A     
     3B54 206F     
     3B56 6666     
0062                                  even
0063 3B58 0B46     txt.fastmode       stri 'Fastmode IO'
     3B5A 6173     
     3B5C 746D     
     3B5E 6F64     
     3B60 6520     
     3B62 494F     
0064                                  even
0065 3B64 134E     txt.nodisk         stri 'No Device/Disk/Path'
     3B66 6F20     
     3B68 4465     
     3B6A 7669     
     3B6C 6365     
     3B6E 2F44     
     3B70 6973     
     3B72 6B2F     
     3B74 5061     
     3B76 7468     
0066                                  even
0067 3B78 1D55     txt.uncrunching    stri 'Uncrunching TI Basic line....'
     3B7A 6E63     
     3B7C 7275     
     3B7E 6E63     
     3B80 6869     
     3B82 6E67     
     3B84 2054     
     3B86 4920     
     3B88 4261     
     3B8A 7369     
     3B8C 6320     
     3B8E 6C69     
     3B90 6E65     
     3B92 2E2E     
     3B94 2E2E     
0068                                  even
0069 3B96 026B     txt.kb             stri 'kb'
     3B98 62       
0070                                  even
0071 3B9A 054C     txt.lines          stri 'Lines'
     3B9C 696E     
     3B9E 6573     
0072                                  even
0073 3BA0 0A5B     txt.newfile        stri '[New file]'
     3BA2 4E65     
     3BA4 7720     
     3BA6 6669     
     3BA8 6C65     
     3BAA 5D       
0074                                  even
0075 3BAC 0D5B     txt.tib1           stri '[TI Basic #1]'
     3BAE 5449     
     3BB0 2042     
     3BB2 6173     
     3BB4 6963     
     3BB6 2023     
     3BB8 315D     
0076                                  even
0077 3BBA 0D5B     txt.tib2           stri '[TI Basic #2]'
     3BBC 5449     
     3BBE 2042     
     3BC0 6173     
     3BC2 6963     
     3BC4 2023     
     3BC6 325D     
0078                                  even
0079 3BC8 0D5B     txt.tib3           stri '[TI Basic #3]'
     3BCA 5449     
     3BCC 2042     
     3BCE 6173     
     3BD0 6963     
     3BD2 2023     
     3BD4 335D     
0080                                  even
0081 3BD6 0D5B     txt.tib4           stri '[TI Basic #4]'
     3BD8 5449     
     3BDA 2042     
     3BDC 6173     
     3BDE 6963     
     3BE0 2023     
     3BE2 345D     
0082                                  even
0083 3BE4 0D5B     txt.tib5           stri '[TI Basic #5]'
     3BE6 5449     
     3BE8 2042     
     3BEA 6173     
     3BEC 6963     
     3BEE 2023     
     3BF0 355D     
0084                                  even
0085 3BF2 0444     txt.filetype.dv80  stri 'DV80'
     3BF4 5638     
     3BF6 30       
0086                                  even
0087 3BF8 034D     txt.m1             stri 'M1='
     3BFA 313D     
0088                                  even
0089 3BFC 034D     txt.m2             stri 'M2='
     3BFE 323D     
0090                                  even
0091 3C00 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3C02 392D     
     3C04 4D65     
     3C06 6E75     
     3C08 2020     
     3C0A 5E48     
     3C0C 2D48     
     3C0E 656C     
     3C10 7020     
     3C12 205E     
     3C14 552D     
     3C16 5368     
     3C18 6F72     
     3C1A 7463     
     3C1C 7574     
     3C1E 73       
0092                                  even
0093 3C20 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3C22 392D     
     3C24 4D65     
     3C26 6E75     
     3C28 2020     
     3C2A 5E48     
     3C2C 2D48     
     3C2E 656C     
     3C30 7020     
     3C32 205E     
     3C34 552D     
     3C36 5368     
     3C38 6F72     
     3C3A 7463     
     3C3C 7574     
     3C3E 7320     
     3C40 2046     
     3C42 302D     
     3C44 4261     
     3C46 7369     
     3C48 6323     
0094                                  even
0095 3C4A 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3C4C 392D     
     3C4E 4578     
     3C50 6974     
     3C52 2020     
     3C54 5E43     
     3C56 6F70     
     3C58 7920     
     3C5A 5E4D     
     3C5C 6F76     
     3C5E 6520     
     3C60 5E44     
     3C62 656C     
     3C64 205E     
     3C66 5361     
     3C68 7665     
     3C6A 205E     
     3C6C 5072     
     3C6E 696E     
     3C70 7420     
     3C72 5E5B     
     3C74 312D     
     3C76 335D     
     3C78 436C     
     3C7A 6970     
     3C7C 6272     
     3C7E 64       
0096                                  even
0097 3C80 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3C82 392D     
     3C84 4261     
     3C86 636B     
     3C88 2020     
     3C8A 4635     
     3C8C 2D41     
     3C8E 7574     
     3C90 6F55     
     3C92 6E70     
     3C94 6163     
     3C96 6B20     
     3C98 2053     
     3C9A 5041     
     3C9C 4345     
     3C9E 2D55     
     3CA0 6E70     
     3CA2 6163     
     3CA4 6B20     
     3CA6 7072     
     3CA8 6F67     
     3CAA 7261     
     3CAC 6D       
0098                                  even
0099 3CAE 020E     txt.alpha.down     data >020e,>0f00
     3CB0 0F00     
0100 3CB2 0110     txt.vertline       data >0110
0101 3CB4 011C     txt.keymarker      byte 1,28
0102                                  even
0103 3CB6 0120     txt.ws1            stri ' '
0104                                  even
0105 3CB8 0220     txt.ws2            stri '  '
     3CBA 20       
0106                                  even
0107 3CBC 0420     txt.ws4            stri '    '
     3CBE 2020     
     3CC0 20       
0108                                  even
0109      3CBC     txt.filetype.none  equ txt.ws4
0110               
0111 3CC2 1554     txt.msg.tibasic    stri 'TI Basic mode active.'
     3CC4 4920     
     3CC6 4261     
     3CC8 7369     
     3CCA 6320     
     3CCC 6D6F     
     3CCE 6465     
     3CD0 2061     
     3CD2 6374     
     3CD4 6976     
     3CD6 652E     
0112                                  even
0113               
0114               ;--------------------------------------------------------------
0115               ; Strings for error line pane
0116               ;--------------------------------------------------------------
0117 3CD8 1546     txt.ioerr.load     stri 'Failed loading file: '
     3CDA 6169     
     3CDC 6C65     
     3CDE 6420     
     3CE0 6C6F     
     3CE2 6164     
     3CE4 696E     
     3CE6 6720     
     3CE8 6669     
     3CEA 6C65     
     3CEC 3A20     
0118                                  even
0119 3CEE 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CF0 6169     
     3CF2 6C65     
     3CF4 6420     
     3CF6 7361     
     3CF8 7669     
     3CFA 6E67     
     3CFC 2066     
     3CFE 696C     
     3D00 653A     
     3D02 20       
0120                                  even
0121 3D04 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3D06 6169     
     3D08 6C65     
     3D0A 6420     
     3D0C 7072     
     3D0E 696E     
     3D10 7469     
     3D12 6E67     
     3D14 2074     
     3D16 6F20     
     3D18 6465     
     3D1A 7669     
     3D1C 6365     
     3D1E 3A20     
0122                                  even
0123 3D20 164E     txt.io.nofile      stri 'No filename specified.'
     3D22 6F20     
     3D24 6669     
     3D26 6C65     
     3D28 6E61     
     3D2A 6D65     
     3D2C 2073     
     3D2E 7065     
     3D30 6369     
     3D32 6669     
     3D34 6564     
     3D36 2E       
0124                                  even
0125 3D38 1B49     txt.memfull.load   stri 'Index full. File too large.'
     3D3A 6E64     
     3D3C 6578     
     3D3E 2066     
     3D40 756C     
     3D42 6C2E     
     3D44 2046     
     3D46 696C     
     3D48 6520     
     3D4A 746F     
     3D4C 6F20     
     3D4E 6C61     
     3D50 7267     
     3D52 652E     
0126                                  even
0127 3D54 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D56 6F70     
     3D58 792F     
     3D5A 4D6F     
     3D5C 7665     
     3D5E 2074     
     3D60 6172     
     3D62 6765     
     3D64 7420     
     3D66 6D75     
     3D68 7374     
     3D6A 2062     
     3D6C 6520     
     3D6E 6F75     
     3D70 7473     
     3D72 6964     
     3D74 6520     
     3D76 4D31     
     3D78 2D4D     
     3D7A 3220     
     3D7C 7261     
     3D7E 6E67     
     3D80 652E     
0128                                  even
0129               ;--------------------------------------------------------------
0130               ; Strings for command buffer
0131               ;--------------------------------------------------------------
0132 3D82 013E     txt.cmdb.prompt    stri '>'
0133                                  even
0134 3D84 0D43     txt.colorscheme    stri 'Color scheme:'
     3D86 6F6C     
     3D88 6F72     
     3D8A 2073     
     3D8C 6368     
     3D8E 656D     
     3D90 653A     
0135                                  even
0136               
0137               ; BE CAREFUL HERE. RAM MIGHT BE FULL AND STRINGS CHOPPED OFF. KEEP THEM SHORT.
                   < rom.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D92 0650     def.printer.fname   stri 'PI.PIO'
     3D94 492E     
     3D96 5049     
     3D98 4F       
0008 3D99   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D9A 4453     
     3D9C 4B31     
     3D9E 2E43     
     3DA0 4C49     
     3DA2 50       
0009 3DA3   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3DA4 4453     
     3DA6 4B36     
     3DA8 2E43     
     3DAA 4C49     
     3DAC 50       
0010 3DAD   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3DAE 5449     
     3DB0 5049     
     3DB2 2E43     
     3DB4 4C49     
     3DB6 50       
0011 3DB7   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DB8 2C44     
     3DBA 534B     
     3DBC 2C48     
     3DBE 4458     
     3DC0 2C49     
     3DC2 4445     
     3DC4 2C50     
     3DC6 492E     
     3DC8 2C50     
     3DCA 494F     
     3DCC 2C54     
     3DCE 4950     
     3DD0 492E     
     3DD2 2C52     
     3DD4 442C     
     3DD6 5343     
     3DD8 532C     
     3DDA 5344     
     3DDC 442C     
     3DDE 5744     
     3DE0 532C     
     3DE2 5253     
     3DE4 3233     
     3DE6 32       
                   < rom.resident.asm
0066                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3DE8 99              byte   >99                   ; \
0013 3DE9   4F            text   'OKFG99'              ; | Send this to reload
     3DEA 4B46     
     3DEC 4739     
     3DEE 39       
0014 3DEF   99            byte   >99                   ; /
0015 3DF0 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3DF2 4D44     
     3DF4 47       
0016 3DF5   00            byte   >00, >00, >00         ; /
     3DF6 0000     
0017 3DF8 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3DFA 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3DFC 99              byte   >99                   ; \
0026 3DFD   4F            text   'OKFG99'              ; | Send this to reload
     3DFE 4B46     
     3E00 4739     
     3E02 39       
0027 3E03   99            byte   >99                   ; /
0028 3E04 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3E06 3239     
     3E08 4745     
     3E0A 4D47     
0029                      ;                            ; /
0030 3E0C 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3E0E 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E10 99              byte   >99                   ; \
0039 3E11   4F            text   'OKFG99'              ; | Send this to reload
     3E12 4B46     
     3E14 4739     
     3E16 39       
0040 3E17   99            byte   >99                   ; /
0041 3E18 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E1A 4247     
0042 3E1C 0000            byte   >00, >00, >00, >00    ; /
     3E1E 0000     
0043 3E20 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E22 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E24 99              byte   >99                   ; \
0052 3E25   4F            text   'OKFG99'              ; | Send this to reload
     3E26 4B46     
     3E28 4739     
     3E2A 39       
0053 3E2B   99            byte   >99                   ; /
0054 3E2C 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E2E 464F     
     3E30 5254     
     3E32 4843     
0055                      ;                            ; /
0056 3E34 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E36 0000            data   >0000                 ; Start address
0058                      even
                   < rom.resident.asm
                   < stevie_b1.asm
0054                       ;------------------------------------------------------
0055                       ; Activate bank 1 and branch to  >6036
0056                       ;------------------------------------------------------
0057 3E38 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E3A 6002     
0058               
0062               
0063 3E3C 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E3E 6046     
0064               ***************************************************************
0065               * Step 3: Include main editor modules
0066               ********|*****|*********************|**************************
0067               main:
0068                       aorg  kickstart.code2       ; >6046
0069 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0070                       ;-----------------------------------------------------------------------
0071                       ; Include files
0072                       ;-----------------------------------------------------------------------
0073                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 28AA     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 26E6     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 278A     
0043               
0045               
0046 605E 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6060 2332     
0047 6062 3140                   data >3140            ; F18a VR49 (>31), bit 40
0048               
0050               
0051 6064 06A0  32         bl    @putvr                ; Turn on position based attributes
     6066 2332     
0052 6068 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 606A 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     606C 2332     
0055 606E 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 6070 06A0  32         bl    @filv
     6072 228E     
0060 6074 0000                   data >0000,32,vdp.sit.size
     6076 0020     
     6078 0960     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 607A 06A0  32         bl    @film
     607C 2236     
0066 607E A000                   data >a000,00,>4f00   ; Clear a000-eeef
     6080 0000     
     6082 4F00     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 6084 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6086 2706     
0071 6088 06A0  32         bl    @s8x8                 ; Small sprite
     608A 2716     
0072               
0073 608C 06A0  32         bl    @cpym2m
     608E 253A     
0074 6090 391C                   data romsat,ramsat,14 ; Load sprite SAT
     6092 A056     
     6094 000E     
0075               
0076 6096 C820  54         mov   @romsat+2,@tv.curshape
     6098 391E     
     609A A214     
0077                                                   ; Save cursor shape & color
0078               
0079 609C 06A0  32         bl    @vdp.dump.patterns    ; Dump sprite and character patterns to VDP
     609E 797C     
0080               
0081 60A0 04E0  34         clr   @parm1                ; Pick font 0
     60A2 A006     
0082 60A4 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     60A6 799A     
0083                                                   ; \ i  @parm1       = Font index (0-5)
0084                                                   ; / o  @tv.font.ptr = Pointer to font
0085               *--------------------------------------------------------------
0086               * Initialize
0087               *--------------------------------------------------------------
0088 60A8 06A0  32         bl    @mem.sams.setup.stevie
     60AA 610C     
0089                                                   ; Load SAMS pages for stevie
0090               
0091 60AC 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60AE 33CE     
0092 60B0 06A0  32         bl    @tv.reset             ; Reset editor
     60B2 7A22     
0093               
0094 60B4 06A0  32         bl    @dialog               ; Setup memory for dialogs stringa
     60B6 77D4     
0095                       ;------------------------------------------------------
0096                       ; Load colorscheme amd turn on screen
0097                       ;------------------------------------------------------
0098 60B8 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60BA A006     
0099 60BC 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60BE A008     
0100 60C0 04E0  34         clr   @parm3                ; Colorize all panes
     60C2 A00A     
0101               
0102 60C4 06A0  32         bl    @pane.colorscheme.load
     60C6 727A     
0103                                                   ; Reload color scheme
0104                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0105                                                   ; | i  @parm2 = Skip colorizing marked lines
0106                                                   ; |             if >FFFF
0107                                                   ; | i  @parm3 = Only colorize CMDB pane
0108                                                   ; /             if >FFFF
0109               
0110                       ;-------------------------------------------------------
0111                       ; Setup editor tasks
0112                       ;-------------------------------------------------------
0113 60C8 06A0  32         bl    @at
     60CA 2726     
0114 60CC 0000                   data  >0000           ; Cursor YX position = >0000
0115               
0116 60CE 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60D0 A064     
0117 60D2 C804  30         mov   tmp0,@wtitab          ; /
     60D4 832C     
0118               
0120               
0121 60D6 06A0  32         bl    @mkslot
     60D8 2F7C     
0122 60DA 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60DC 720E     
0123 60DE 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60E0 385A     
0124 60E2 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60E4 38FC     
0125 60E6 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60E8 3910     
0126 60EA FFFF                   data eol
0127               
0137               
0138 60EC 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60EE 0300     
0139 60F0 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60F2 8314     
0140                       ;-------------------------------------------------------
0141                       ; Setup keyboard scanning and start kernel/timers
0142                       ;-------------------------------------------------------
0143 60F4 06A0  32         bl    @mkhook
     60F6 2F68     
0144 60F8 6130                   data edkey.keyscan.hook
0145                                                   ; Setup keyboard scanning hook
0146                       ;-------------------------------------------------------
0147                       ; Initialisation complete
0148                       ;-------------------------------------------------------
0149 60FA 06A0  32         bl    @magic.set            ; Set magic string
     60FC 7A9E     
0150               
0151 60FE 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     6100 37D7     
0152 6102 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     6104 8370     
0153 6106 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0154                       ;-------------------------------------------------------
0155                       ; Start kernel
0156                       ;-------------------------------------------------------
0157 6108 0460  28         b     @tmgr                 ; Run kernel and timers
     610A 2EB4     
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Low-level modules
0076                       ;-----------------------------------------------------------------------
0077                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 610C 0649  14         dect  stack
0018 610E C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 6110 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     6112 7A7A     
0023               
0024 6114 06A0  32         bl    @sams.layout.copy
     6116 269E     
0025 6118 A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026                       ;------------------------------------------------------
0027                       ; Set lowest / highest page in use for editor buffer
0028                       ;------------------------------------------------------
0029 611A C820  54         mov   @tv.sams.c000,@edb.sams.page
     611C A208     
     611E A518     
0030 6120 C820  54         mov   @edb.sams.page,@edb.sams.lopage
     6122 A518     
     6124 A51A     
0031 6126 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6128 A518     
     612A A51C     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               mem.sams.setup.stevie.exit:
0036 612C C2F9  30         mov   *stack+,r11           ; Pop r11
0037 612E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Keyboard actions
0080                       ;-----------------------------------------------------------------------
0081                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 6130 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6132 A900     
0013                                                   ; on the stack anymore.
0014               
0015 6134 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6136 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6138 FFCE     
0020 613A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     613C 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 613E 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     6140 200A     
0025 6142 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 6144 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6146 200A     
0031 6148 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     614A 2002     
     614C A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 614E C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     6150 A028     
     6152 A02A     
0036 6154 0460  28         b     @edkey.key.process    ; Process key
     6156 6176     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 6158 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     615A A026     
0042 615C 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     615E 2002     
0043 6160 1308  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6162 04E0  34         clr   @keycode1             ; \
     6164 A028     
0047 6166 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6168 A02A     
0048 616A 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     616C 0001     
0049 616E C804  38         mov   tmp0,@kbflags         ; /
     6170 A026     
0050                       ;------------------------------------------------------
0051                       ; Exit keyboard hook
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.exit:
0054 6172 0460  28         b     @hookok               ; Return
     6174 2EB8     
0055               
0056               
0057                       ;------------------------------------------------------
0058                       ; Keyboard debounce
0059                       ;------------------------------------------------------
0060      2EB8     edkey.keyscan.hook.debounce  equ  hookok
                   < stevie_b1.asm
0082                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 6176 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     6178 A028     
0009 617A 0A85  32         sla   tmp1,8                ; Move to MSB
0010 617C 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 617E C1A0  34         mov   @tv.pane.focus,tmp2
     6180 A224     
0015 6182 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     6184 0000     
0016 6186 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 6188 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     618A 0001     
0020 618C 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 618E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6190 FFCE     
0026 6192 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6194 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 6196 0285  22         ci    tmp1,>2000            ; Space key pressed?
     6198 2000     
0032 619A 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 619C 0649  14         dect  stack
0038 619E C644  30         mov   tmp0,*stack           ; Push tmp0
0039 61A0 0649  14         dect  stack
0040 61A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 61A4 0649  14         dect  stack
0042 61A6 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 61A8 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 61AA 020C  20         li    r12,>0024             ; CRU address decoder
     61AC 0024     
0046 61AE 30C4  30         ldcr  tmp0,3                ; Select column
0047 61B0 020C  20         li    r12,>0006             ; Address of the first row
     61B2 0006     
0048 61B4 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61B6 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61B8 4000     
0050 61BA 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61BC C339  30         mov   *stack+,r12           ; Pop r12
0056 61BE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61C0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61C2 0460  28         b     @edkey.action.block.mark
     61C4 6846     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61C6 C339  30         mov   *stack+,r12           ; Pop r12
0065 61C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61CC 0206  20         li    tmp2,keymap_actions.editor
     61CE 7AD4     
0072 61D0 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61D2 0206  20         li    tmp2,keymap_actions.cmdb
     61D4 7BAA     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 61D6 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61D8 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 61DA 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61DC 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 61DE 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61E0 6100     
0096 61E2 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61E4 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61E6 7A00     
0099 61E8 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61EA 0225  22         ai    tmp1,->2000           ; Make uppercase
     61EC E000     
0102 61EE 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61F0 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 61F2 0225  22         ai    tmp1,>2000            ; Make lowercase
     61F4 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61F6 0226  22         ai    tmp2,4                ; Skip current entry
     61F8 0004     
0112 61FA 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 61FC 0586  14         inc   tmp2                  ; Move to scope
0118 61FE 9816  42         cb    *tmp2,@tv.pane.focus+1
     6200 A225     
0119                                                   ; (1) Process key if scope matches pane
0120 6202 1309  14         jeq   edkey.key.process.action
0121               
0122 6204 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     6206 A71D     
0123 6208 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 620A 0226  22         ai    tmp2,3                ; Skip current entry
     620C 0003     
0128 620E C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     6210 A028     
0129 6212 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6214 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 6216 0586  14         inc   tmp2                  ; Move to action address
0136 6218 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 621A 0204  20         li    tmp0,id.dialog.unsaved
     621C 0065     
0139 621E 8120  34         c     @cmdb.dialog,tmp0
     6220 A71C     
0140 6222 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6224 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6226 A72C     
0143 6228 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 622A C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     622C A224     
0149 622E 1602  14         jne   !                     ; No, skip frame buffer
0150 6230 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6232 66E4     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 6234 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     6236 0001     
0155 6238 1607  14         jne   edkey.key.process.crash
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
0160 623A C120  34         mov   @cmdb.dialog,tmp0
     623C A71C     
0161 623E 0284  22         ci    tmp0,99
     6240 0063     
0162 6242 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 6244 0460  28         b     @edkey.action.cmdb.char
     6246 69D4     
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
0172 6248 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     624A FFCE     
0173 624C 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     624E 2026     
0174                       ;-------------------------------------------------------
0175                       ; Check ENTER key if ID >= 100 and close pane if match
0176                       ;-------------------------------------------------------
0177               edkey.key.process.enter:
0178 6250 C120  34         mov   @keycode1,tmp0        ; Get key
     6252 A028     
0179 6254 0284  22         ci    tmp0,key.space        ; SPACE ?
     6256 0020     
0180 6258 1602  14         jne   edkey.key.process.exit
0181 625A 0460  28         b     @edkey.action.cmdb.close.dialog
     625C 6EE2     
0182                       ;-------------------------------------------------------
0183                       ; Exit
0184                       ;-------------------------------------------------------
0185               edkey.key.process.exit:
0186 625E 0460  28         b     @edkey.keyscan.hook.debounce
     6260 2EB8     
0187                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; Keyboard actions - Framebuffer (1)
0085                       ;-----------------------------------------------------------------------
0086                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 6262 C120  34         mov   @fb.column,tmp0
     6264 A30C     
0009 6266 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6268 0620  34         dec   @fb.column            ; Column-- in screen buffer
     626A A30C     
0014 626C 0620  26         dec   @wyx                  ; Column-- VDP cursor
     626E 832A     
0015 6270 0620  34         dec   @fb.current
     6272 A302     
0016 6274 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6276 A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 6278 0460  28 !       b     @edkey.keyscan.hook.debounce
     627A 2EB8     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 627C 8820  50         c     @fb.column,@fb.row.length
     627E A30C     
     6280 A308     
0029 6282 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 6284 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6286 A30C     
0034 6288 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     628A 832A     
0035 628C 05A0  34         inc   @fb.current
     628E A302     
0036 6290 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6292 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 6294 0460  28 !       b     @edkey.keyscan.hook.debounce
     6296 2EB8     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 6298 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     629A 7868     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 629C 0460  28         b     @edkey.keyscan.hook.debounce
     629E 2EB8     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 62A0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62A2 A31A     
0061 62A4 C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     62A6 A308     
0062 62A8 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     62AA 0050     
0063 62AC 1102  14         jlt   !                     ; | is right of last character on line,
0064 62AE 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     62B0 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 62B2 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     62B4 A30C     
0069 62B6 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     62B8 273E     
0070               
0071 62BA 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     62BC 319E     
0072                                                   ; \ i   @fb.top      = Address top row in FB
0073                                                   ; | i   @fb.topline  = Top line in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; |                  (offset 0..@fb.scrrows)
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; | i   @fb.colsline = Columns per line FB
0078                                                   ; |
0079                                                   ; / o   @fb.current  = Updated pointer
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083 62BE 0460  28         b     @edkey.keyscan.hook.debounce
     62C0 2EB8     
0084                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 62C2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62C4 A31A     
0009 62C6 C120  34         mov   @fb.column,tmp0
     62C8 A30C     
0010 62CA 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62CC C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62CE A302     
0015 62D0 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62D2 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 62D4 0605  14         dec   tmp1
0022 62D6 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62D8 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 62DA D195  26         movb  *tmp1,tmp2            ; Get character
0030 62DC 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62DE D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62E0 0986  32         srl   tmp2,8                ; Right justify
0033 62E2 0286  22         ci    tmp2,32               ; Space character found?
     62E4 0020     
0034 62E6 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 62E8 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62EA 2020     
0040 62EC 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62EE 0287  22         ci    tmp3,>20ff            ; First character is space
     62F0 20FF     
0043 62F2 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62F4 C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62F6 A30C     
0048 62F8 61C4  18         s     tmp0,tmp3
0049 62FA 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62FC 0002     
0050 62FE 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 6300 0585  14         inc   tmp1
0056 6302 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 6304 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6306 A30C     
0062 6308 06A0  32         bl    @xsetx                ; Set VDP cursor X
     630A 273E     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 630C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     630E 319E     
0068                                                   ; \ i   @fb.top      = Address top row in FB
0069                                                   ; | i   @fb.topline  = Top line in FB
0070                                                   ; | i   @fb.row      = Current row in FB
0071                                                   ; |                  (offset 0..@fb.scrrows)
0072                                                   ; | i   @fb.column   = Current column in FB
0073                                                   ; | i   @fb.colsline = Columns per line FB
0074                                                   ; |
0075                                                   ; / o   @fb.current  = Updated pointer
0076               
0077 6310 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6312 2EB8     
0078               
0079               
0080               
0081               *---------------------------------------------------------------
0082               * Cursor next word
0083               *---------------------------------------------------------------
0084               edkey.action.nword:
0085 6314 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6316 A31A     
0086 6318 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0087 631A C120  34         mov   @fb.column,tmp0
     631C A30C     
0088 631E 8804  34         c     tmp0,@fb.row.length
     6320 A308     
0089 6322 1426  14         jhe   !                     ; column=last char ? Skip further processing
0090                       ;-------------------------------------------------------
0091                       ; Prepare 2 char buffer
0092                       ;-------------------------------------------------------
0093 6324 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6326 A302     
0094 6328 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0095 632A 1006  14         jmp   edkey.action.nword_scan_char
0096                       ;-------------------------------------------------------
0097                       ; Multiple spaces mode
0098                       ;-------------------------------------------------------
0099               edkey.action.nword_ms:
0100 632C 0708  14         seto  tmp4                  ; Set multiple spaces mode
0101                       ;-------------------------------------------------------
0102                       ; Scan forward to first character following space
0103                       ;-------------------------------------------------------
0104               edkey.action.nword_scan
0105 632E 0585  14         inc   tmp1
0106 6330 0584  14         inc   tmp0                  ; Column++ in screen buffer
0107 6332 8804  34         c     tmp0,@fb.row.length
     6334 A308     
0108 6336 1316  14         jeq   edkey.action.nword_done
0109                                                   ; Column=last char ? Skip further processing
0110                       ;-------------------------------------------------------
0111                       ; Check character
0112                       ;-------------------------------------------------------
0113               edkey.action.nword_scan_char
0114 6338 D195  26         movb  *tmp1,tmp2            ; Get character
0115 633A 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0116 633C D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0117 633E 0986  32         srl   tmp2,8                ; Right justify
0118               
0119 6340 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6342 FFFF     
0120 6344 1604  14         jne   edkey.action.nword_scan_char_other
0121                       ;-------------------------------------------------------
0122                       ; Special handling if multiple spaces found
0123                       ;-------------------------------------------------------
0124               edkey.action.nword_scan_char_ms:
0125 6346 0286  22         ci    tmp2,32
     6348 0020     
0126 634A 160C  14         jne   edkey.action.nword_done
0127                                                   ; Exit if non-space found
0128 634C 10F0  14         jmp   edkey.action.nword_scan
0129                       ;-------------------------------------------------------
0130                       ; Normal handling
0131                       ;-------------------------------------------------------
0132               edkey.action.nword_scan_char_other:
0133 634E 0286  22         ci    tmp2,32               ; Space character found?
     6350 0020     
0134 6352 16ED  14         jne   edkey.action.nword_scan
0135                                                   ; No space found, try again
0136                       ;-------------------------------------------------------
0137                       ; Space found, now look closer
0138                       ;-------------------------------------------------------
0139 6354 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6356 2020     
0140 6358 13E9  14         jeq   edkey.action.nword_ms
0141                                                   ; Yes, so continue scanning
0142 635A 0287  22         ci    tmp3,>20ff            ; First characer is space?
     635C 20FF     
0143 635E 13E7  14         jeq   edkey.action.nword_scan
0144                       ;--------------------------------------------------------
0145                       ; Set cursor following space
0146                       ;--------------------------------------------------------
0147 6360 0585  14         inc   tmp1
0148 6362 0584  14         inc   tmp0                  ; Column++ in screen buffer
0149                       ;-------------------------------------------------------
0150                       ; Save position and position hardware cursor
0151                       ;-------------------------------------------------------
0152               edkey.action.nword_done:
0153 6364 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6366 A30C     
0154 6368 06A0  32         bl    @xsetx                ; Set VDP cursor X
     636A 273E     
0155                       ;-------------------------------------------------------
0156                       ; Exit
0157                       ;-------------------------------------------------------
0158               edkey.action.nword.exit:
0159 636C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     636E 319E     
0160                                                   ; \ i   @fb.top      = Address top row in FB
0161                                                   ; | i   @fb.topline  = Top line in FB
0162                                                   ; | i   @fb.row      = Current row in FB
0163                                                   ; |                  (offset 0..@fb.scrrows)
0164                                                   ; | i   @fb.column   = Current column in FB
0165                                                   ; | i   @fb.colsline = Columns per line FB
0166                                                   ; |
0167                                                   ; / o   @fb.current  = Updated pointer
0168               
0169 6370 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6372 2EB8     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 6374 C120  34         mov   @fb.vwco,tmp0
     6376 A310     
0009 6378 0284  22         ci    tmp0,16
     637A 0010     
0010 637C 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 637E 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6380 04E0  34         clr   @parm1
     6382 A006     
0016 6384 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 6386 0224  22 !       ai    tmp0,-16              ; Scroll left
     6388 FFF0     
0021 638A C804  38         mov   tmp0,@parm1           ; View Window Column offset
     638C A006     
0022               
0023 638E 0204  20         li    tmp0,16               ; Temporary constant
     6390 0010     
0024 6392 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     6394 A30C     
     6396 200E     
0025 6398 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 639A A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     639C A30C     
0030 639E A804  30         a     tmp0,@wyx             ; VDP Cursor
     63A0 832A     
0031 63A2 A804  38         a     tmp0,@fb.current
     63A4 A302     
0032 63A6 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 63A8 C120  34         mov   @fb.vwco,tmp0
     63AA A310     
0040 63AC 0284  22         ci    tmp0,175
     63AE 00AF     
0041 63B0 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 63B2 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 63B4 04E0  34         clr   @parm1
     63B6 A006     
0047 63B8 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63BA 0224  22 !       ai    tmp0,16               ; Scroll right
     63BC 0010     
0052 63BE C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63C0 A006     
0053               
0054 63C2 0204  20         li    tmp0,16               ; Temporary constant
     63C4 0010     
0055 63C6 8120  34         c     @fb.column,tmp0
     63C8 A30C     
0056 63CA 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63CC 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63CE A30C     
0061 63D0 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63D2 832A     
0062 63D4 6804  38         s     tmp0,@fb.current
     63D6 A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 63D8 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63DA 7818     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 63DC 0460  28         b     @edkey.keyscan.hook.debounce
     63DE 2EB8     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0089                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 63E0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63E2 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63E4 8820  50         c     @fb.row.dirty,@w$ffff
     63E6 A30A     
     63E8 2022     
0013 63EA 1604  14         jne   edkey.action.ppage.sanity
0014               
0015 63EC 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63EE 7070     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.row      = Current row in FB
0018                                                   ; | i   @fb.column   = Current column in FB
0019                                                   ; / i   @fb.colsline = Cols per line in FB
0020               
0021 63F0 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63F2 A30A     
0022                       ;-------------------------------------------------------
0023                       ; Assert
0024                       ;-------------------------------------------------------
0025               edkey.action.ppage.sanity:
0026 63F4 C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63F6 A304     
0027 63F8 1312  14         jeq   edkey.action.ppage.exit
0028                       ;-------------------------------------------------------
0029                       ; Special treatment top page
0030                       ;-------------------------------------------------------
0031 63FA 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63FC A31C     
0032 63FE 1503  14         jgt   edkey.action.ppage.topline
0033 6400 04E0  34         clr   @fb.topline           ; topline = 0
     6402 A304     
0034 6404 1003  14         jmp   edkey.action.ppage.refresh
0035                       ;-------------------------------------------------------
0036                       ; Adjust topline
0037                       ;-------------------------------------------------------
0038               edkey.action.ppage.topline:
0039 6406 6820  54         s     @fb.scrrows,@fb.topline
     6408 A31C     
     640A A304     
0040                       ;-------------------------------------------------------
0041                       ; Refresh page
0042                       ;-------------------------------------------------------
0043               edkey.action.ppage.refresh:
0044 640C C820  54         mov   @fb.topline,@parm1
     640E A304     
     6410 A006     
0045 6412 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6414 A312     
0046               
0047 6416 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6418 A008     
0048               
0049 641A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     641C 6492     
0050                                                   ; | i  @parm1 = Top line in editor buffer
0051                                                   ; / i  @parm2 = Row offset in frame buffer
0052                       ;-------------------------------------------------------
0053                       ; Exit
0054                       ;-------------------------------------------------------
0055               edkey.action.ppage.exit:
0056 641E 0460  28         b     @edkey.keyscan.hook.debounce
     6420 2EB8     
0057                                                   ; Back to editor main
0058               
0059               
0060               
0061               
0062               *---------------------------------------------------------------
0063               * Next page
0064               *---------------------------------------------------------------
0065               edkey.action.npage:
0066 6422 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6424 A31A     
0067                       ;-------------------------------------------------------
0068                       ; Crunch current row if dirty
0069                       ;-------------------------------------------------------
0070 6426 8820  50         c     @fb.row.dirty,@w$ffff
     6428 A30A     
     642A 2022     
0071 642C 1604  14         jne   edkey.action.npage.sanity
0072               
0073 642E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6430 7070     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.row      = Current row in FB
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; / i   @fb.colsline = Cols per line in FB
0078               
0079 6432 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6434 A30A     
0080                       ;-------------------------------------------------------
0081                       ; Assert
0082                       ;-------------------------------------------------------
0083               edkey.action.npage.sanity:
0084 6436 C120  34         mov   @fb.topline,tmp0
     6438 A304     
0085 643A A120  34         a     @fb.scrrows,tmp0
     643C A31C     
0086 643E 0584  14         inc   tmp0                  ; Base 1 offset !
0087 6440 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     6442 A504     
0088 6444 150C  14         jgt   edkey.action.npage.exit
0089                       ;-------------------------------------------------------
0090                       ; Adjust topline
0091                       ;-------------------------------------------------------
0092               edkey.action.npage.topline:
0093 6446 A820  54         a     @fb.scrrows,@fb.topline
     6448 A31C     
     644A A304     
0094                       ;-------------------------------------------------------
0095                       ; Refresh page
0096                       ;-------------------------------------------------------
0097               edkey.action.npage.refresh:
0098 644C C820  54         mov   @fb.topline,@parm1
     644E A304     
     6450 A006     
0099 6452 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6454 A312     
0100               
0101 6456 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6458 A008     
0102               
0103 645A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     645C 6492     
0104                                                   ; | i  @parm1 = Top line in editor buffer
0105                                                   ; / i  @parm2 = Row offset in frame buffer
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               edkey.action.npage.exit:
0110 645E 0460  28         b     @edkey.keyscan.hook.debounce
     6460 2EB8     
0111                                                   ; Back to editor main
                   < stevie_b1.asm
0090                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008 6462 06A0  32         bl    @fb.cursor.top        ; Goto top of file
     6464 787C     
0009 6466 0460  28         b     @edkey.keyscan.hook.debounce
     6468 2EB8     
0010                                                   ; Back to editor main
0011               
0012               *---------------------------------------------------------------
0013               * Goto top of screen
0014               *---------------------------------------------------------------
0015               edkey.action.topscr:
0016 646A 06A0  32         bl    @fb.cursor.topscr     ; Goto top of screen
     646C 7886     
0017 646E 0460  28         b     @edkey.keyscan.hook.debounce
     6470 2EB8     
0018                                                   ; Back to editor main
0019               
0020               *---------------------------------------------------------------
0021               * Goto bottom of file
0022               *---------------------------------------------------------------
0023               edkey.action.bot:
0024 6472 06A0  32         bl    @fb.cursor.bot        ; Goto bottom of file
     6474 7890     
0025 6476 0460  28         b     @edkey.keyscan.hook.debounce
     6478 2EB8     
0026                                                   ; Back to editor main
0027               
0028               *---------------------------------------------------------------
0029               * Goto bottom of screen
0030               *---------------------------------------------------------------
0031               edkey.action.botscr:
0032 647A 06A0  32         bl    @fb.cursor.botscr     ; Goto bottom of screen
     647C 789A     
0033 647E 0460  28         b     @edkey.keyscan.hook.debounce
     6480 2EB8     
0034                                                   ; Back to editor main
0035               
0036               *---------------------------------------------------------------
0037               * Cursor up
0038               *---------------------------------------------------------------
0039               edkey.action.up:
0040 6482 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     6484 7854     
0041 6486 0460  28         b     @edkey.keyscan.hook.debounce
     6488 2EB8     
0042                                                   ; Back to editor main
0043               
0044               *---------------------------------------------------------------
0045               * Cursor down
0046               *---------------------------------------------------------------
0047               edkey.action.down:
0048 648A 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     648C 785E     
0049 648E 0460  28         b     @edkey.keyscan.hook.debounce
     6490 2EB8     
0050                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               * @parm2  = Row offset in frame buffer
0018               *
0019               * Register usage
0020               * none
0021               ********|*****|*********************|**************************
0022               edkey.fb.goto.toprow:
0023 6492 0649  14         dect  stack
0024 6494 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Assert on line
0027                       ;-------------------------------------------------------
0028 6496 C120  34         mov   @parm1,tmp0           ; \ Line number 0?
     6498 A006     
0029 649A 8120  34         c     @edb.lines,tmp0       ; | Line number beyond EOF ?
     649C A504     
0030 649E 1B05  14         jh    edkey.fb.goto.offset  ; / No, keep on going
0031                       ;-------------------------------------------------------
0032                       ; Goto EOF
0033                       ;-------------------------------------------------------
0034 64A0 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     64A2 A504     
     64A4 A006     
0035 64A6 0620  34         dec   @parm1                ; / Base 0
     64A8 A006     
0036                       ;-------------------------------------------------------
0037                       ; Assert on row offset in frame buffer
0038                       ;-------------------------------------------------------
0039               edkey.fb.goto.offset:
0040 64AA 8820  50         c     @parm2,@fb.scrrows    ; Row offset off page ?
     64AC A008     
     64AE A31C     
0041 64B0 1104  14         jlt   edkey.fb.goto.row     ; No, use row offset
0042 64B2 C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     64B4 A31C     
     64B6 A306     
0043 64B8 1003  14         jmp   edkey.fb.goto.line    ; Goto line
0044               edkey.fb.goto.row:
0045 64BA C820  54         mov   @parm2,@fb.row        ; Set row offset
     64BC A008     
     64BE A306     
0046                       ;-------------------------------------------------------
0047                       ; Goto line
0048                       ;-------------------------------------------------------
0049               edkey.fb.goto.line:
0050 64C0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64C2 A31A     
0051               
0052 64C4 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     64C6 782C     
0053                                                   ; | i  @parm1 = Line to start with
0054                                                   ; /             (becomes @fb.topline)
0055               
0056 64C8 04E0  34         clr   @fb.column            ; Frame buffer column 0
     64CA A30C     
0057               
0058 64CC C120  34         mov   @fb.row,tmp0          ; \
     64CE A306     
0059 64D0 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0060 64D2 C804  30         mov   tmp0,@wyx             ; /
     64D4 832A     
0061               
0062 64D6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     64D8 319E     
0063                                                   ; \ i   @fb.top      = Address top row in FB
0064                                                   ; | i   @fb.topline  = Top line in FB
0065                                                   ; | i   @fb.row      = Current row in FB
0066                                                   ; |                  (offset 0..@fb.scrrows)
0067                                                   ; | i   @fb.column   = Current column in FB
0068                                                   ; | i   @fb.colsline = Columns per line FB
0069                                                   ; |
0070                                                   ; / o   @fb.current  = Updated pointer
0071               
0072 64DA 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     64DC 37A4     
0073                                                   ; | i  @fb.row        = Row in frame buffer
0074                                                   ; / o  @fb.row.length = Length of row
0075               
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079 64DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0080 64E0 0460  28         b     @edkey.keyscan.hook.debounce
     64E2 2EB8     
0081                                                   ; Back to editor main
0082               
0083               
0084               *---------------------------------------------------------------
0085               * Goto specified line (@parm1) in editor buffer
0086               *---------------------------------------------------------------
0087               edkey.action.goto:
0088                       ;-------------------------------------------------------
0089                       ; Crunch current row if dirty
0090                       ;-------------------------------------------------------
0091 64E4 8820  50         c     @fb.row.dirty,@w$ffff
     64E6 A30A     
     64E8 2022     
0092 64EA 1609  14         jne   edkey.action.goto.refresh
0093               
0094 64EC 0649  14         dect  stack
0095 64EE C660  46         mov   @parm1,*stack         ; Push parm1
     64F0 A006     
0096               
0097 64F2 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64F4 7070     
0098                                                   ; \ i   @fb.top      = Address top row in FB
0099                                                   ; | i   @fb.row      = Current row in FB
0100                                                   ; | i   @fb.column   = Current column in FB
0101                                                   ; / i   @fb.colsline = Cols per line in FB
0102               
0103 64F6 C839  50         mov   *stack+,@parm1        ; Pop parm1
     64F8 A006     
0104 64FA 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64FC A30A     
0105                       ;-------------------------------------------------------
0106                       ; Refresh page
0107                       ;-------------------------------------------------------
0108               edkey.action.goto.refresh:
0109 64FE 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6500 A312     
0110               
0111 6502 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6504 A008     
0112               
0113 6506 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6508 6492     
0114                                                   ; | i  @parm1 = Top line in editor buffer
0115                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0092                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008 650A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     650C A506     
0009               
0010 650E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6510 319E     
0011                                                   ; \ i   @fb.top      = Address top row in FB
0012                                                   ; | i   @fb.topline  = Top line in FB
0013                                                   ; | i   @fb.row      = Current row in FB
0014                                                   ; |                  (offset 0..@fb.scrrows)
0015                                                   ; | i   @fb.column   = Current column in FB
0016                                                   ; | i   @fb.colsline = Columns per line FB
0017                                                   ; |
0018                                                   ; / o   @fb.current  = Updated pointer
0019                       ;-------------------------------------------------------
0020                       ; Assert 1 - Empty line
0021                       ;-------------------------------------------------------
0022               edkey.action.del_char.sanity1:
0023 6512 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6514 A308     
0024 6516 1336  14         jeq   edkey.action.del_char.exit
0025                                                   ; Exit if empty line
0026               
0027 6518 C120  34         mov   @fb.current,tmp0      ; Get pointer
     651A A302     
0028                       ;-------------------------------------------------------
0029                       ; Assert 2 - Already at EOL
0030                       ;-------------------------------------------------------
0031               edkey.action.del_char.sanity2:
0032 651C C1C6  18         mov   tmp2,tmp3             ; \
0033 651E 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0034 6520 81E0  34         c     @fb.column,tmp3
     6522 A30C     
0035 6524 110A  14         jlt   edkey.action.del_char.sanity3
0036               
0037                       ;------------------------------------------------------
0038                       ; At EOL - clear current character
0039                       ;------------------------------------------------------
0040 6526 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0041 6528 D505  30         movb  tmp1,*tmp0            ; /
0042 652A C820  54         mov   @fb.column,@fb.row.length
     652C A30C     
     652E A308     
0043                                                   ; Row length - 1
0044 6530 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6532 A30A     
0045 6534 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6536 A318     
0046 6538 1025  14         jmp  edkey.action.del_char.exit
0047                       ;-------------------------------------------------------
0048                       ; Assert 3 - Abort if row length > 80
0049                       ;-------------------------------------------------------
0050               edkey.action.del_char.sanity3:
0051 653A 0286  22         ci    tmp2,colrow
     653C 0050     
0052 653E 1204  14         jle   edkey.action.del_char.prep
0053                                                   ; Continue if row length <= 80
0054                       ;-----------------------------------------------------------------------
0055                       ; CPU crash
0056                       ;-----------------------------------------------------------------------
0057 6540 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6542 FFCE     
0058 6544 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6546 2026     
0059                       ;-------------------------------------------------------
0060                       ; Calculate number of characters to move
0061                       ;-------------------------------------------------------
0062               edkey.action.del_char.prep:
0063 6548 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0064 654A 61E0  34         s     @fb.column,tmp3
     654C A30C     
0065 654E 0607  14         dec   tmp3                  ; Remove base 1 offset
0066 6550 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0067 6552 C144  18         mov   tmp0,tmp1
0068 6554 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0069 6556 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     6558 A30C     
0070                       ;-------------------------------------------------------
0071                       ; Setup pointers
0072                       ;-------------------------------------------------------
0073 655A C120  34         mov   @fb.current,tmp0      ; Get pointer
     655C A302     
0074 655E C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0075 6560 0585  14         inc   tmp1                  ; / tmp1 = Next character
0076                       ;-------------------------------------------------------
0077                       ; Loop from current character until end of line
0078                       ;-------------------------------------------------------
0079               edkey.action.del_char.loop:
0080 6562 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0081 6564 0606  14         dec   tmp2
0082 6566 16FD  14         jne   edkey.action.del_char.loop
0083                       ;-------------------------------------------------------
0084                       ; Special treatment if line 80 characters long
0085                       ;-------------------------------------------------------
0086 6568 0206  20         li    tmp2,colrow
     656A 0050     
0087 656C 81A0  34         c     @fb.row.length,tmp2
     656E A308     
0088 6570 1603  14         jne   edkey.action.del_char.save
0089 6572 0604  14         dec   tmp0                  ; One time adjustment
0090 6574 04C5  14         clr   tmp1
0091 6576 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0092                       ;-------------------------------------------------------
0093                       ; Save variables
0094                       ;-------------------------------------------------------
0095               edkey.action.del_char.save:
0096 6578 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     657A A30A     
0097 657C 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     657E A318     
0098 6580 0620  34         dec   @fb.row.length        ; @fb.row.length--
     6582 A308     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.del_char.exit:
0103 6584 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6586 2EB8     
0104               
0105               
0106               *---------------------------------------------------------------
0107               * Delete until end of line
0108               *---------------------------------------------------------------
0109               edkey.action.del_eol:
0110 6588 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     658A A506     
0111               
0112 658C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     658E 319E     
0113                                                   ; \ i   @fb.top      = Address top row in FB
0114                                                   ; | i   @fb.topline  = Top line in FB
0115                                                   ; | i   @fb.row      = Current row in FB
0116                                                   ; |                  (offset 0..@fb.scrrows)
0117                                                   ; | i   @fb.column   = Current column in FB
0118                                                   ; | i   @fb.colsline = Columns per line FB
0119                                                   ; |
0120                                                   ; / o   @fb.current  = Updated pointer
0121               
0122 6590 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6592 A308     
0123 6594 1311  14         jeq   edkey.action.del_eol.exit
0124                                                   ; Exit if empty line
0125                       ;-------------------------------------------------------
0126                       ; Prepare for erase operation
0127                       ;-------------------------------------------------------
0128 6596 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6598 A302     
0129 659A C1A0  34         mov   @fb.colsline,tmp2
     659C A30E     
0130 659E 61A0  34         s     @fb.column,tmp2
     65A0 A30C     
0131 65A2 04C5  14         clr   tmp1
0132                       ;-------------------------------------------------------
0133                       ; Loop until last column in frame buffer
0134                       ;-------------------------------------------------------
0135               edkey.action.del_eol_loop:
0136 65A4 DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0137 65A6 0606  14         dec   tmp2
0138 65A8 16FD  14         jne   edkey.action.del_eol_loop
0139                       ;-------------------------------------------------------
0140                       ; Save variables
0141                       ;-------------------------------------------------------
0142 65AA 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65AC A30A     
0143 65AE 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65B0 A318     
0144               
0145 65B2 C820  54         mov   @fb.column,@fb.row.length
     65B4 A30C     
     65B6 A308     
0146                                                   ; Set new row length
0147                       ;-------------------------------------------------------
0148                       ; Exit
0149                       ;-------------------------------------------------------
0150               edkey.action.del_eol.exit:
0151 65B8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65BA 2EB8     
0152               
0153               
0154               *---------------------------------------------------------------
0155               * Delete current line
0156               *---------------------------------------------------------------
0157               edkey.action.del_line:
0158                       ;-------------------------------------------------------
0159                       ; Get current line in editor buffer
0160                       ;-------------------------------------------------------
0161 65BC 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     65BE 319E     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 65C0 04E0  34         clr   @fb.row.dirty         ; Discard current line
     65C2 A30A     
0172               
0173 65C4 C820  54         mov   @fb.topline,@parm1    ; \
     65C6 A304     
     65C8 A006     
0174 65CA A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     65CC A306     
     65CE A006     
0175 65D0 05A0  34         inc   @parm1                ; /
     65D2 A006     
0176               
0177                       ;-------------------------------------------------------
0178                       ; Special handling if at BOT (no real line)
0179                       ;-------------------------------------------------------
0180 65D4 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     65D6 A006     
     65D8 A504     
0181 65DA 1207  14         jle   edkey.action.del_line.doit
0182                                                   ; No, is real line. Continue with delete.
0183               
0184 65DC C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     65DE A304     
     65E0 A006     
0185 65E2 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     65E4 782C     
0186                                                   ; \ i  @parm1 = Line to start with
0187                                                   ; /
0188 65E6 0460  28         b     @edkey.action.up      ; Move cursor one line up
     65E8 6482     
0189                       ;-------------------------------------------------------
0190                       ; Delete line in editor buffer
0191                       ;-------------------------------------------------------
0192               edkey.action.del_line.doit:
0193 65EA 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     65EC 7960     
0194                                                   ; \ i  @parm1 = Line number to delete
0195                                                   ; /
0196               
0197 65EE 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     65F0 A006     
     65F2 A504     
0198 65F4 1302  14         jeq   edkey.action.del_line.refresh
0199                                                   ; Yes, skip get length. No need for garbage.
0200                       ;-------------------------------------------------------
0201                       ; Get length of current row in frame buffer
0202                       ;-------------------------------------------------------
0203 65F6 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     65F8 37A4     
0204                                                   ; \ i  @fb.row        = Current row
0205                                                   ; / o  @fb.row.length = Length of row
0206                       ;-------------------------------------------------------
0207                       ; Refresh frame buffer
0208                       ;-------------------------------------------------------
0209               edkey.action.del_line.refresh:
0210 65FA C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     65FC A304     
     65FE A006     
0211               
0212 6600 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6602 782C     
0213                                                   ; \ i  @parm1 = Line to start with
0214                                                   ; /
0215               
0216 6604 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6606 A506     
0217                       ;-------------------------------------------------------
0218                       ; Special treatment if current line was last line
0219                       ;-------------------------------------------------------
0220 6608 C120  34         mov   @fb.topline,tmp0
     660A A304     
0221 660C A120  34         a     @fb.row,tmp0
     660E A306     
0222               
0223 6610 8804  34         c     tmp0,@edb.lines       ; Was last line?
     6612 A504     
0224 6614 1102  14         jlt   edkey.action.del_line.exit
0225               
0226 6616 0460  28         b     @edkey.action.up      ; Move cursor one line up
     6618 6482     
0227                       ;-------------------------------------------------------
0228                       ; Exit
0229                       ;-------------------------------------------------------
0230               edkey.action.del_line.exit:
0231 661A 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     661C 6298     
                   < stevie_b1.asm
0093                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010 661E C820  54         mov   @edkey.actions.ins.char.ws.data,@parm1
     6620 662C     
     6622 A006     
0011                                                   ; White space, freeze cursor
0012               
0013 6624 06A0  32         bl    @fb.insert.char       ; Insert character
     6626 78A4     
0014                                                   ; \ i  @parm1 = MSB character to insert
0015                                                   ; |             LSB = 0 move cursor right
0016                                                   ; /             LSB > 0 do not move cursor
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020               edkey.action.ins_char.ws.exit:
0021 6628 0460  28         b     @edkey.keyscan.hook.debounce
     662A 2EB8     
0022                                                   ; Back to editor main
0023 662C 20FF     edkey.actions.ins.char.ws.data   data  >20ff
0024               
0025               *---------------------------------------------------------------
0026               * Insert new line on current line
0027               *---------------------------------------------------------------
0028               edkey.action.ins_line:
0029 662E 04E0  34         clr   @parm1                ; Insert new line on curren line
     6630 A006     
0030               
0031 6632 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6634 7872     
0032                                                   ; \ i  @parm1 = 0 for insert current line
0033                                                   ; /            >0 for insert following line
0034                       ;-------------------------------------------------------
0035                       ; Exit
0036                       ;-------------------------------------------------------
0037               edkey.action.ins_line.exit:
0038 6636 0460  28         b     @edkey.keyscan.hook.debounce
     6638 2EB8     
0039                                                   ; Back to editor main
0040               
0041               
0042               *---------------------------------------------------------------
0043               * Insert new line on following line
0044               *---------------------------------------------------------------
0045               edkey.action.ins_line_after:
0046 663A 0720  34         seto  @parm1                ; Insert new line on following line
     663C A006     
0047               
0048 663E 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6640 7872     
0049                                                   ; \ i  @parm1 = 0 for insert current line
0050                                                   ; /            >0 for insert following line
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               edkey.action.ins_line_after.exit:
0055 6642 0460  28         b     @edkey.keyscan.hook.debounce
     6644 2EB8     
0056                                                   ; Back to editor main
                   < stevie_b1.asm
0094                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 6646 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6648 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 664A 8820  50         c     @fb.row.dirty,@w$ffff
     664C A30A     
     664E 2022     
0013 6650 1606  14         jne   edkey.action.enter.newline
0014 6652 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6654 A506     
0015               
0016 6656 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6658 7070     
0017                                                   ; \ i   @fb.top      = Address top row in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; | i   @fb.column   = Current column in FB
0020                                                   ; / i   @fb.colsline = Cols per line in FB
0021               
0022 665A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     665C A30A     
0023                       ;-------------------------------------------------------
0024                       ; Insert a new line if insert mode is on
0025                       ;-------------------------------------------------------
0026               edkey.action.enter.newline:
0027 665E C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6660 A50A     
0028 6662 1307  14         jeq   edkey.action.enter.upd_counter
0029                                                   ; Overwrite mode, skip insert
0030               
0031 6664 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     6666 A50C     
0032 6668 1304  14         jeq   edkey.action.enter.upd_counter
0033                                                   ; Autoinsert off, skip insert
0034               
0035 666A 0720  34         seto  @parm1                ; Insert line on following line
     666C A006     
0036               
0037 666E 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6670 7872     
0038                                                   ; \  i  @parm1 = current/following line
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Update line counter
0042                       ;-------------------------------------------------------
0043               edkey.action.enter.upd_counter:
0044 6672 C120  34         mov   @fb.topline,tmp0
     6674 A304     
0045 6676 A120  34         a     @fb.row,tmp0
     6678 A306     
0046 667A 0584  14         inc   tmp0
0047 667C 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     667E A504     
0048 6680 1102  14         jlt   edkey.action.newline  ; No, continue newline
0049 6682 05A0  34         inc   @edb.lines            ; Total lines++
     6684 A504     
0050                       ;-------------------------------------------------------
0051                       ; Process newline
0052                       ;-------------------------------------------------------
0053               edkey.action.newline:
0054                       ;-------------------------------------------------------
0055                       ; Scroll 1 line if cursor at bottom row of screen
0056                       ;-------------------------------------------------------
0057 6686 C120  34         mov   @fb.scrrows,tmp0
     6688 A31C     
0058 668A 0604  14         dec   tmp0
0059 668C 8120  34         c     @fb.row,tmp0
     668E A306     
0060 6690 110C  14         jlt   edkey.action.newline.down
0061                       ;-------------------------------------------------------
0062                       ; Scroll
0063                       ;-------------------------------------------------------
0064 6692 C120  34         mov   @fb.scrrows,tmp0
     6694 A31C     
0065 6696 C820  54         mov   @fb.topline,@parm1
     6698 A304     
     669A A006     
0066 669C 05A0  34         inc   @parm1
     669E A006     
0067 66A0 06A0  32         bl    @fb.refresh
     66A2 782C     
0068 66A4 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     66A6 A312     
0069 66A8 1004  14         jmp   edkey.action.newline.rest
0070                       ;-------------------------------------------------------
0071                       ; Move cursor down a row, there are still rows left
0072                       ;-------------------------------------------------------
0073               edkey.action.newline.down:
0074 66AA 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     66AC A306     
0075 66AE 06A0  32         bl    @down                 ; Row++ VDP cursor
     66B0 272C     
0076                       ;-------------------------------------------------------
0077                       ; Set VDP cursor and save variables
0078                       ;-------------------------------------------------------
0079               edkey.action.newline.rest:
0080 66B2 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     66B4 7836     
0081                                                   ; | o  @outparm1 = Matching column
0082                                                   ; / o  @outparm2 = Char on matching column
0083               
0084 66B6 C120  34         mov   @outparm1,tmp0
     66B8 A018     
0085 66BA C804  38         mov   tmp0,@fb.column
     66BC A30C     
0086 66BE 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     66C0 273E     
0087               
0088 66C2 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     66C4 37A4     
0089                                                   ; | i  @fb.row        = Row in frame buffer
0090                                                   ; / o  @fb.row.length = Length of row
0091               
0092 66C6 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     66C8 319E     
0093                                                   ; \ i   @fb.top      = Address top row in FB
0094                                                   ; | i   @fb.topline  = Top line in FB
0095                                                   ; | i   @fb.row      = Current row in FB
0096                                                   ; |                  (offset 0..@fb.scrrows)
0097                                                   ; | i   @fb.column   = Current column in FB
0098                                                   ; | i   @fb.colsline = Columns per line FB
0099                                                   ; |
0100                                                   ; / o   @fb.current  = Updated pointer
0101               
0102 66CA 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     66CC A318     
0103                       ;-------------------------------------------------------
0104                       ; Exit
0105                       ;-------------------------------------------------------
0106               edkey.action.newline.exit:
0107 66CE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     66D0 2EB8     
0108               
0109               
0110               
0111               
0112               *---------------------------------------------------------------
0113               * Toggle insert/overwrite mode
0114               *---------------------------------------------------------------
0115               edkey.action.ins_onoff:
0116 66D2 0649  14         dect  stack
0117 66D4 C64B  30         mov   r11,*stack            ; Save return address
0118               
0119 66D6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     66D8 A31A     
0120 66DA 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     66DC A50A     
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               edkey.action.ins_onoff.exit:
0125 66DE C2F9  30         mov   *stack+,r11           ; Pop r11
0126 66E0 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     66E2 2EB8     
0127               
0128               
0129               
0130               *---------------------------------------------------------------
0131               * Add character (frame buffer)
0132               *---------------------------------------------------------------
0133               edkey.action.char:
0134 66E4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     66E6 A31A     
0135                       ;-------------------------------------------------------
0136                       ; Asserts
0137                       ;-------------------------------------------------------
0138 66E8 D105  18         movb  tmp1,tmp0             ; Get keycode
0139 66EA 0984  32         srl   tmp0,8                ; MSB to LSB
0140               
0141 66EC 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     66EE 0020     
0142 66F0 1111  14         jlt   edkey.action.char.exit
0143                                                   ; Yes, skip
0144               
0145 66F2 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     66F4 007E     
0146 66F6 150E  14         jgt   edkey.action.char.exit
0147                                                   ; Yes, skip
0148                       ;-------------------------------------------------------
0149                       ; Setup
0150                       ;-------------------------------------------------------
0151 66F8 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66FA A506     
0152 66FC 04E0  34         clr   @parm1
     66FE A006     
0153 6700 D805  38         movb  tmp1,@parm1           ; Store character for insert
     6702 A006     
0154 6704 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6706 A50A     
0155 6708 1303  14         jeq   edkey.action.char.overwrite
0156                       ;-------------------------------------------------------
0157                       ; Insert mode
0158                       ;-------------------------------------------------------
0159 670A 06A0  32         bl    @fb.insert.char       ; Insert character
     670C 78A4     
0160                                                   ; \ i  @parm1 = MSB character to insert
0161                                                   ; |             LSB = 0 move cursor right
0162                                                   ; /             LSB > 0 do not move cursor
0163               
0164 670E 1002  14         jmp   edkey.action.char.exit
0165                       ;-------------------------------------------------------
0166                       ; Overwrite mode - Write character
0167                       ;-------------------------------------------------------
0168               edkey.action.char.overwrite:
0169 6710 06A0  32         bl    @fb.replace.char      ; Replace (overwrite) character
     6712 78AE     
0170                                                   ; \ i  @parm1 = MSB character to replace
0171                                                   ; /
0172                       ;-------------------------------------------------------
0173                       ; Exit
0174                       ;-------------------------------------------------------
0175               edkey.action.char.exit:
0176 6714 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6716 2EB8     
                   < stevie_b1.asm
0095                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 6718 0649  14         dect  stack
0009 671A C644  30         mov   tmp0,*stack           ; Push tmp0
0010 671C 0649  14         dect  stack
0011 671E C660  42         mov   @wyx,*stack           ; Push cursor YX
     6720 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6722 C120  34         mov   @tv.ruler.visible,tmp0
     6724 A210     
0016                                                   ; Ruler currently off?
0017 6726 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 6728 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     672A A318     
0024 672C 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     672E A210     
0025 6730 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 6732 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6734 A31C     
0031 6736 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 6738 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     673A A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 673C 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 673E 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6740 A318     
0038 6742 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     6744 A210     
0039 6746 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     6748 77FA     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 674A 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     674C 775C     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 674E C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     6750 832A     
0050 6752 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6754 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6756 2EB8     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 6758 C120  34         mov   @edb.dirty,tmp0
     675A A506     
0012 675C 1302  14         jeq   !
0013 675E 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6760 76AE     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 6762 0460  28 !       b     @tv.quit
     6764 3424     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 6766 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6768 A50E     
     676A 2022     
0025 676C 1302  14         jeq   !
0026 676E 0460  28         b     @edkey.action.block.copy
     6770 686A     
0027                                                   ; Copy code block
0028 6772 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     6774 76BC     
                   < stevie_b1.asm
0097                       copy  "edkey.fb.file.prev.asm"      ; Previous file in catalog file list
     **** ****     > edkey.fb.file.prev.asm
0001               * FILE......: edkey.fb.file.prev.asm
0002               * Purpose...: File loading actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load previous file
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.file.prev
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.file.prev:
0016 6776 0649  14         dect  stack
0017 6778 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 677A 06A0  32         bl    @fm.browse.fname.prev ; Previous file in catalog filename list
     677C 7628     
0022 677E C120  34         mov   @outparm1,tmp0        ; Skipped flag set?
     6780 A018     
0023 6782 1612  14         jne   edkey.action.fb.file.prev.exit
0024                                                   ; Yes, exit early
0025               
0026 6784 0204  20         li    tmp0,edkey.action.fb.file.prev
     6786 6776     
0027 6788 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     678A A72C     
0028                                                   ; in "Unsaved changes" dialog
0029                       ;------------------------------------------------------
0030                       ; Show dialog "Unsaved changed" if editor buffer dirty
0031                       ;------------------------------------------------------
0032 678C C120  34         mov   @edb.dirty,tmp0
     678E A506     
0033 6790 1303  14         jeq   edkey.action.fb.file.prev.loadfile
0034 6792 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0035 6794 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6796 76AE     
0036                       ;------------------------------------------------------
0037                       ; Load file
0038                       ;------------------------------------------------------
0039               edkey.action.fb.file.prev.loadfile:
0040 6798 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     679A 775C     
0041               
0042 679C 0204  20         li    tmp0,cat.fullfname    ; \ Get pointer to string with combined
     679E E014     
0043 67A0 C804  38         mov   tmp0,@parm1           ; / device and filename
     67A2 A006     
0044               
0045 67A4 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     67A6 75B4     
0046                                                   ; \ i  parm1 = Pointer to length-prefixed
0047                                                   ; /            device/filename string
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               edkey.action.fb.file.prev.exit
0052 67A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 67AA 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     67AC 6462     
                   < stevie_b1.asm
0098                       copy  "edkey.fb.file.next.asm"      ; Next file in catalog file list
     **** ****     > edkey.fb.file.next.asm
0001               * FILE......: edkey.fb.file.next.asm
0002               * Purpose...: File loading actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load next file
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.file.next
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.file.next:
0016 67AE 0649  14         dect  stack
0017 67B0 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 67B2 06A0  32         bl    @fm.browse.fname.next ; Next file in catalog filename list
     67B4 763A     
0022 67B6 C120  34         mov   @outparm1,tmp0        ; Skipped flag set?
     67B8 A018     
0023 67BA 1612  14         jne   edkey.action.fb.file.next.exit
0024                                                   ; Yes, exit early
0025               
0026 67BC 0204  20         li    tmp0,edkey.action.fb.file.next
     67BE 67AE     
0027 67C0 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     67C2 A72C     
0028                                                   ; in "Unsaved changes" dialog
0029                       ;------------------------------------------------------
0030                       ; Show dialog "Unsaved changed" if editor buffer dirty
0031                       ;------------------------------------------------------
0032 67C4 C120  34         mov   @edb.dirty,tmp0
     67C6 A506     
0033 67C8 1303  14         jeq   edkey.action.fb.file.next.loadfile
0034 67CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0035 67CC 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     67CE 76AE     
0036                       ;------------------------------------------------------
0037                       ; Next file
0038                       ;------------------------------------------------------
0039               edkey.action.fb.file.next.loadfile:
0040 67D0 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     67D2 775C     
0041               
0042 67D4 0204  20         li    tmp0,cat.fullfname    ; \ Get pointer to string with combined
     67D6 E014     
0043 67D8 C804  38         mov   tmp0,@parm1           ; / device and filename
     67DA A006     
0044               
0045 67DC 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     67DE 75B4     
0046                                                   ; \ i  parm1 = Pointer to length-prefixed
0047                                                   ; /            device/filename string
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               edkey.action.fb.file.next.exit:
0052 67E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0053 67E2 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     67E4 6462     
                   < stevie_b1.asm
0099                       copy  "edkey.fb.file.load.asm"      ; Load file into editor
     **** ****     > edkey.fb.file.load.asm
0001               * FILE......: edkey.fb.file.load.asm
0002               * Purpose...: Load file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.file
0006               * Load file directly into editor (without CMDB "Open File")
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to filename string
0012               * @parm2 = Type of special file to load
0013               ********|*****|*********************|**************************
0014               edkey.action.fb.load.file:
0015 67E6 0649  14         dect  stack
0016 67E8 C64B  30         mov   r11,*stack            ; Save return address
0017 67EA 0649  14         dect  stack
0018 67EC C644  30         mov   tmp0,*stack           ; Push tmp0
0019 67EE 0649  14         dect  stack
0020 67F0 C645  30         mov   tmp1,*stack           ; Push tmp1
0021                       ;-------------------------------------------------------
0022                       ; Load file
0023                       ;-------------------------------------------------------
0024 67F2 C160  34         mov   @parm2,tmp1           ; Backup @parm2
     67F4 A008     
0025               
0026 67F6 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     67F8 775C     
0027               
0028 67FA C120  34         mov   @parm1,tmp0           ; Pointer to filename set?
     67FC A006     
0029 67FE 1607  14         jne   !                     ; Yes, continue
0030                       ;-------------------------------------------------------
0031                       ; Show error "No filename specified"
0032                       ;-------------------------------------------------------
0033 6800 0204  20         li    tmp0,txt.io.nofile    ; \
     6802 3D20     
0034 6804 C804  38         mov   tmp0,@parm1           ; / Error message
     6806 A006     
0035               
0036 6808 06A0  32         bl    @error.display        ; Show error message
     680A 77DE     
0037                                                   ; \ i  @parm1 = Pointer to error message
0038                                                   ; /
0039               
0040 680C 1012  14         jmp   edkey.action.fb.load.file.exit2
0041                       ;------------------------------------------------------
0042                       ; Show dialog "Unsaved changed" if editor buffer dirty
0043                       ;------------------------------------------------------
0044 680E C120  34 !       mov   @edb.dirty,tmp0       ; Editor buffer dirty?
     6810 A506     
0045 6812 1301  14         jeq   edkey.action.fb.load.loadfile
0046                                                   ; No, continue processing
0047 6814 1013  14         jmp   edkey.action.fb.load.file.exit3
0048                                                   ; Dirty, exit
0049                       ;-------------------------------------------------------
0050                       ; Load file
0051                       ;-------------------------------------------------------
0052               edkey.action.fb.load.loadfile:
0053 6816 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6818 75B4     
0054                                                   ; \ i  @parm1 = Pointer to length-prefixed
0055                                                   ; /             device/filename string
0056                       ;-------------------------------------------------------
0057                       ; Handle special files
0058                       ;-------------------------------------------------------
0059 681A 100B  14         jmp   edkey.action.fb.load.file.exit2
0060                                                   ; Skip goto line
0061                       ;-------------------------------------------------------
0062                       ; Goto line in file and exit
0063                       ;-------------------------------------------------------
0064               edkey.action.fb.load.file.exit1:
0065 681C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 681E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 6820 C2F9  30         mov   *stack+,r11           ; Pop R11
0068               
0069 6822 C820  54         mov   @edb.bk.fb.topline,@parm1
     6824 A51E     
     6826 A006     
0070 6828 C820  54         mov   @edb.bk.fb.row,@parm2
     682A A520     
     682C A008     
0071               
0072 682E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6830 6492     
0073                                                   ; | i  @parm1 = Top line in editor buffer
0074                                                   ; / i  @parm2 = Row offset in frame buffer
0075                       ;-------------------------------------------------------
0076                       ; Goto top of file (TOF) and exit
0077                       ;-------------------------------------------------------
0078               edkey.action.fb.load.file.exit2:
0079 6832 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0080 6834 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0081 6836 C2F9  30         mov   *stack+,r11           ; Pop R11
0082 6838 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     683A 6462     
0083                       ;-------------------------------------------------------
0084                       ; Show dialog "Unsaved changes" and exit
0085                       ;-------------------------------------------------------
0086               edkey.action.fb.load.file.exit3:
0087 683C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 683E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 6840 C2F9  30         mov   *stack+,r11           ; Pop R11
0090 6842 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6844 76AE     
                   < stevie_b1.asm
0100                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 6846 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     6848 791A     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 684A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     684C 2EB8     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 684E 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     6850 7924     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 6852 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     6854 6EE2     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 6856 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     6858 792E     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 685A 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     685C 6EE2     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 685E 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6860 78D6     
0042 6862 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     6864 7942     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 6866 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6868 2EB8     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 686A 0649  14         dect  stack
0054 686C C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 686E 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6870 A510     
     6872 2022     
0059 6874 1315  14         jeq   edkey.action.block.copy.exit
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
0064 6876 C120  30         mov   @wyx,tmp0             ; Get cursor position
     6878 832A     
0065 687A 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     687C FF00     
0066 687E C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     6880 A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 6882 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6884 78D6     
0071               
0072 6886 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     6888 A006     
0073 688A 06A0  32         bl    @edb.block.copy       ; Copy code block
     688C 7956     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 688E 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     6890 A018     
     6892 2000     
0078 6894 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 6896 C820  54         mov   @fb.yxsave,@parm1
     6898 A316     
     689A A006     
0082 689C 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     689E 7822     
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
0089 68A0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 68A2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68A4 2EB8     
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
0102 68A6 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     68A8 A510     
     68AA 2022     
0103 68AC 1311  14         jeq   edkey.action.block.delete.exit
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
0108 68AE 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     68B0 78D6     
0109               
0110 68B2 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     68B4 A006     
0111 68B6 06A0  32         bl    @edb.block.delete     ; Delete code block
     68B8 794C     
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
0117 68BA 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     68BC A018     
     68BE 2000     
0118 68C0 1307  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 68C2 C820  54         mov   @fb.topline,@parm1
     68C4 A304     
     68C6 A006     
0122 68C8 04E0  34         clr   @parm2                ; No row offset in frame buffer
     68CA A008     
0123               
0124 68CC 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     68CE 6492     
0125                                                   ; | i  @parm1 = Top line in editor buffer
0126                                                   ; / i  @parm2 = Row offset in frame buffer
0127                       ;-------------------------------------------------------
0128                       ; Exit
0129                       ;-------------------------------------------------------
0130               edkey.action.block.delete.exit:
0131 68D0 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68D2 2EB8     
0132               
0133               
0134               *---------------------------------------------------------------
0135               * Move code block
0136               ********|*****|*********************|**************************
0137               edkey.action.block.move:
0138                       ;-------------------------------------------------------
0139                       ; Exit early if nothing to do
0140                       ;-------------------------------------------------------
0141 68D4 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     68D6 A510     
     68D8 2022     
0142 68DA 1315  14         jeq   edkey.action.block.move.exit
0143                                                   ; Yes, exit early
0144                       ;-------------------------------------------------------
0145                       ; Delete
0146                       ;-------------------------------------------------------
0147 68DC 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     68DE 78D6     
0148               
0149 68E0 0720  34         seto  @parm1                ; Set message to "Moving block..."
     68E2 A006     
0150 68E4 06A0  32         bl    @edb.block.copy       ; Copy code block
     68E6 7956     
0151                                                   ; \ i  @parm1    = Message flag
0152                                                   ; / o  @outparm1 = >ffff if success
0153               
0154 68E8 0720  34         seto  @parm1                ; Don't display delete message
     68EA A006     
0155 68EC 06A0  32         bl    @edb.block.delete     ; Delete code block
     68EE 794C     
0156                                                   ; \ i  @parm1    = Display message Yes/No
0157                                                   ; / o  @outparm1 = >ffff if success
0158                       ;-------------------------------------------------------
0159                       ; Reposition in frame buffer
0160                       ;-------------------------------------------------------
0161 68F0 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     68F2 A018     
     68F4 2000     
0162 68F6 13EC  14         jeq   edkey.action.block.delete.exit
0163                                                   ; If yes, exit early
0164               
0165 68F8 C820  54         mov   @fb.topline,@parm1
     68FA A304     
     68FC A006     
0166 68FE 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6900 A008     
0167               
0168 6902 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6904 6492     
0169                                                   ; | i  @parm1 = Top line in editor buffer
0170                                                   ; / i  @parm2 = Row offset in frame buffer
0171                       ;-------------------------------------------------------
0172                       ; Exit
0173                       ;-------------------------------------------------------
0174               edkey.action.block.move.exit:
0175 6906 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6908 2EB8     
0176               
0177               
0178               *---------------------------------------------------------------
0179               * Goto marker M1
0180               ********|*****|*********************|**************************
0181               edkey.action.block.goto.m1:
0182 690A 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     690C A50E     
     690E 2022     
0183 6910 1307  14         jeq   edkey.action.block.goto.m1.exit
0184                                                   ; Yes, exit early
0185                       ;-------------------------------------------------------
0186                       ; Goto marker M1
0187                       ;-------------------------------------------------------
0188 6912 C820  54         mov   @edb.block.m1,@parm1
     6914 A50E     
     6916 A006     
0189 6918 0620  34         dec   @parm1                ; Base 0 offset
     691A A006     
0190               
0191 691C 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     691E 64E4     
0192                                                   ; \ i @parm1 = Target line in EB
0193                                                   ; /
0194                       ;-------------------------------------------------------
0195                       ; Exit
0196                       ;-------------------------------------------------------
0197               edkey.action.block.goto.m1.exit:
0198 6920 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6922 2EB8     
                   < stevie_b1.asm
0101                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
0008 6924 0649  14         dect  stack
0009 6926 C64B  30         mov   r11,*stack            ; Save return address
0010 6928 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     692A 7840     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
0015 692C C2F9  30         mov   *stack+,r11           ; Pop r11
0016 692E 0460  28         b     @edkey.keyscan.hook.debounce
     6930 2EB8     
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
0024 6932 0649  14         dect  stack
0025 6934 C64B  30         mov   r11,*stack            ; Save return address
0026 6936 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     6938 784A     
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
0031 693A C2F9  30         mov   *stack+,r11           ; Pop r11
0032 693C 0460  28         b     @edkey.keyscan.hook.debounce
     693E 2EB8     
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0102                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 6940 0649  14         dect  stack
0017 6942 C644  30         mov   tmp0,*stack           ; Push tmp0
0018 6944 0204  20         li    tmp0,clip1
     6946 3100     
0019 6948 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 694A 0649  14         dect  stack
0022 694C C644  30         mov   tmp0,*stack           ; Push tmp0
0023 694E 0204  20         li    tmp0,clip2
     6950 3200     
0024 6952 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 6954 0649  14         dect  stack
0027 6956 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6958 0204  20         li    tmp0,clip3
     695A 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 695C C804  38 !       mov   tmp0,@parm1
     695E A006     
0033 6960 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     6962 7938     
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
0040 6964 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 6966 C820  54         mov   @fb.topline,@parm1    ; Get topline
     6968 A304     
     696A A006     
0043 696C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     696E A008     
0044               
0045 6970 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6972 6492     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0103                       ;-----------------------------------------------------------------------
0104                       ; Keyboard actions - Command Buffer
0105                       ;-----------------------------------------------------------------------
0106                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
0008 6974 C120  34         mov   @cmdb.column,tmp0
     6976 A714     
0009 6978 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 697A 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     697C A714     
0014 697E 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6980 A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 6982 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6984 2EB8     
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
0025 6986 06A0  32         bl    @cmdb.cmd.getlength
     6988 7784     
0026 698A 8820  50         c     @cmdb.column,@outparm1
     698C A714     
     698E A018     
0027 6990 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 6992 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6994 A714     
0032 6996 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6998 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 699A 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     699C 2EB8     
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
0044 699E 04C4  14         clr   tmp0
0045 69A0 C804  38         mov   tmp0,@cmdb.column      ; First column
     69A2 A714     
0046 69A4 0584  14         inc   tmp0
0047 69A6 D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     69A8 A70A     
0048 69AA C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     69AC A70A     
0049               
0050 69AE 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     69B0 2EB8     
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
0056 69B2 D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     69B4 A72E     
0057 69B6 0984  32         srl   tmp0,8                 ; Right justify
0058 69B8 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     69BA A714     
0059 69BC 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 69BE 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 69C0 D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     69C2 A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 69C4 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     69C6 2EB8     
                   < stevie_b1.asm
0107                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 69C8 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     69CA 777A     
0026 69CC 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     69CE A71A     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 69D0 0460  28         b     @edkey.action.cmdb.home
     69D2 699E     
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
0057 69D4 0649  14         dect  stack
0058 69D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 69D8 0649  14         dect  stack
0060 69DA C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 69DC C120  34         mov   @keycode1,tmp0        ; Get keycode
     69DE A028     
0065 69E0 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     69E2 0020     
0066 69E4 1117  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 69E6 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     69E8 007E     
0070 69EA 1514  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073                       ;-------------------------------------------------------
0074                       ; Add character
0075                       ;-------------------------------------------------------
0076 69EC C144  18         mov   tmp0,tmp1             ; \
0077 69EE 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0078               
0079 69F0 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     69F2 A71A     
0080               
0081 69F4 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     69F6 A72F     
0082 69F8 A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     69FA A714     
0083 69FC D505  30         movb  tmp1,*tmp0            ; Add character
0084 69FE 05A0  34         inc   @cmdb.column          ; Next column
     6A00 A714     
0085 6A02 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6A04 A70A     
0086               
0087 6A06 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6A08 7784     
0088                                                   ; \ i  @cmdb.cmd = Command string
0089                                                   ; / o  @outparm1 = Length of command
0090                       ;-------------------------------------------------------
0091                       ; Addjust length
0092                       ;-------------------------------------------------------
0093 6A0A C120  34         mov   @outparm1,tmp0
     6A0C A018     
0094 6A0E 0A84  32         sla   tmp0,8               ; Move to MSB
0095 6A10 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6A12 A72E     
0096                       ;-------------------------------------------------------
0097                       ; Exit
0098                       ;-------------------------------------------------------
0099               edkey.action.cmdb.char.exit:
0100 6A14 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 6A16 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 6A18 0460  28         b     @edkey.keyscan.hook.debounce
     6A1A 2EB8     
0103                                                   ; Back to editor main
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6A1C C120  34         mov   @cmdb.visible,tmp0
     6A1E A702     
0009 6A20 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6A22 04E0  34         clr   @cmdb.column          ; Column = 0
     6A24 A714     
0015 6A26 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6A28 7752     
0016 6A2A 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6A2C 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6A2E 775C     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6A30 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A32 2EB8     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.cfg.clip.asm"     ; Configure clipboard
     **** ****     > edkey.cmdb.cfg.clip.asm
0001               * FILE......: edkey.cmdb.cfg.clip.asm
0002               * Purpose...: Configure clipboard
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.clip:
0008 6A34 0649  14         dect  stack
0009 6A36 C64B  30         mov   r11,*stack            ; Save return address
0010 6A38 0649  14         dect  stack
0011 6A3A C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6A3C 0204  20         li    tmp0,tv.clip.fname    ; \
     6A3E DE50     
0016 6A40 C804  38         mov   tmp0,@parm1           ; / Pointer clipboard filename buffer
     6A42 A006     
0017               
0018 6A44 0204  20         li    tmp0,txt.done.clipdev ; \
     6A46 3B2A     
0019 6A48 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6A4A A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6A4C 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6A4E 77C0     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.clip.exit:
0030 6A50 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6A52 C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6A54 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6A56 6462     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6A58 0649  14         dect  stack
0012 6A5A C64B  30         mov   r11,*stack            ; Save return address
0013 6A5C 0649  14         dect  stack
0014 6A5E C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6A60 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6A62 A506     
0019 6A64 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6A66 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6A68 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6A6A 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6A6C 76AE     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6A6E 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6A70 775C     
0028 6A72 06A0  32         bl    @fm.newfile           ; New file in editor
     6A74 7604     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6A76 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6A78 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6A7A 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6A7C 6462     
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008 6A7E 0649  14         dect  stack
0009 6A80 C64B  30         mov   r11,*stack            ; Save return address
0010 6A82 0649  14         dect  stack
0011 6A84 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Exit early if last character is '.'
0014                       ;-------------------------------------------------------
0015 6A86 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6A88 A72E     
0016 6A8A 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6A8C 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6A8E A72E     
0018 6A90 D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6A92 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6A94 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6A96 002E     
0021 6A98 1319  14         jeq   edkey.action.cmdb.load.exit
0022                                                   ; No filename specified
0023                       ;-------------------------------------------------------
0024                       ; Check filename length
0025                       ;-------------------------------------------------------
0026 6A9A 06A0  32         bl    @cmdb.cmd.getlength            ; Get length of current command
     6A9C 7784     
0027 6A9E C120  34         mov   @outparm1,tmp0                 ; Length == 0 ?
     6AA0 A018     
0028 6AA2 1314  14         jeq   edkey.action.cmdb.load.exit    ; Yes, exit early
0029                       ;-------------------------------------------------------
0030                       ; Get filename
0031                       ;-------------------------------------------------------
0032 6AA4 0A84  32 !       sla   tmp0,8                ; LSB to MSB
0033 6AA6 D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6AA8 A72E     
0034               
0035 6AAA 06A0  32         bl    @cpym2m
     6AAC 253A     
0036 6AAE A72E                   data cmdb.cmdlen,heap.top,80
     6AB0 F000     
     6AB2 0050     
0037                                                   ; Copy filename from command line to buffer
0038               
0039 6AB4 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AB6 775C     
0040                       ;-------------------------------------------------------
0041                       ; Load file
0042                       ;-------------------------------------------------------
0043               edkey.action.cmdb.load.file:
0044 6AB8 04E0  34         clr   @edb.special.file     ; Reset special file flag
     6ABA A522     
0045 6ABC 04E0  34         clr   @tv.specmsg.ptr       ; Reset special message
     6ABE A234     
0046               
0047 6AC0 0204  20         li    tmp0,heap.top         ; Pass filename as parm1
     6AC2 F000     
0048 6AC4 C804  38         mov   tmp0,@parm1           ; (1st line in heap)
     6AC6 A006     
0049               
0050 6AC8 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6ACA 75B4     
0051                                                   ; \ i  parm1 = Pointer to length-prefixed
0052                                                   ; /            device/filename string
0053                       ;-------------------------------------------------------
0054                       ; Exit
0055                       ;-------------------------------------------------------
0056               edkey.action.cmdb.load.exit:
0057 6ACC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 6ACE C2F9  30         mov   *stack+,r11           ; Pop R11
0059 6AD0 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6AD2 6462     
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6AD4 0649  14         dect  stack
0009 6AD6 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6AD8 0649  14         dect  stack
0011 6ADA C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6ADC A304     
0012                       ;-------------------------------------------------------
0013                       ; Exit early if last character is '.'
0014                       ;-------------------------------------------------------
0015 6ADE D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6AE0 A72E     
0016 6AE2 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6AE4 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6AE6 A72E     
0018 6AE8 D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6AEA 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6AEC 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6AEE 002E     
0021 6AF0 1330  14         jeq   edkey.action.cmdb.insert.exit
0022                                                   ; No filename specified
0023                       ;-------------------------------------------------------
0024                       ; Check filename length
0025                       ;-------------------------------------------------------
0026 6AF2 06A0  32         bl    @cmdb.cmd.getlength              ; Get length of current command
     6AF4 7784     
0027 6AF6 C120  34         mov   @outparm1,tmp0                   ; Length == 0 ?
     6AF8 A018     
0028 6AFA 132B  14         jeq   edkey.action.cmdb.insert.exit    ; Yes, exit early
0029                       ;-------------------------------------------------------
0030                       ; Get filename
0031                       ;-------------------------------------------------------
0032 6AFC 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0033 6AFE D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B00 A72E     
0034               
0035 6B02 06A0  32         bl    @cpym2m
     6B04 253A     
0036 6B06 A72E                   data cmdb.cmdall,heap.top,80
     6B08 F000     
     6B0A 0050     
0037                                                   ; Copy filename from command line to buffer
0038               
0039 6B0C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B0E 775C     
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6B10 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B12 F000     
0044 6B14 C804  38         mov   tmp0,@parm1
     6B16 A006     
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
0052 6B18 C820  54         mov   @fb.row,@parm1
     6B1A A306     
     6B1C A006     
0053 6B1E 06A0  32         bl    @fb.row2line          ; Row to editor line
     6B20 3184     
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
0058 6B22 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6B24 A018     
     6B26 A008     
0059 6B28 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6B2A A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6B2C 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B2E F000     
0064 6B30 C804  38         mov   tmp0,@parm1
     6B32 A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6B34 0204  20         li    tmp0,id.file.insertfile
     6B36 0002     
0069 6B38 C804  38         mov   tmp0,@parm3           ; Set work mode
     6B3A A00A     
0070               
0071 6B3C 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6B3E 75DA     
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
0079 6B40 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6B42 A318     
0080 6B44 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6B46 A506     
0081               
0082 6B48 C820  54         mov   @fb.topline,@parm1
     6B4A A304     
     6B4C A006     
0083 6B4E 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6B50 782C     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
0091 6B52 C839  50         mov   *stack+,@parm1        ; Pop top row
     6B54 A006     
0092 6B56 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093               
0094 6B58 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6B5A A008     
0095               
0096 6B5C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6B5E 6492     
0097                                                   ; | i  @parm1 = Top line in editor buffer
0098                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6B60 0649  14         dect  stack
0009 6B62 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B64 0649  14         dect  stack
0011 6B66 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B68 A304     
0012                       ;-------------------------------------------------------
0013                       ; Exit early if last character is '.'
0014                       ;-------------------------------------------------------
0015 6B6A D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length-byte prefix of filename
     6B6C A72E     
0016 6B6E 0984  32         srl   tmp0,8                ; MSB to LSB
0017 6B70 0224  22         ai    tmp0,cmdb.cmdall      ; Add pointer base address to offset
     6B72 A72E     
0018 6B74 D114  26         movb  *tmp0,tmp0            ; Get character into MSB
0019 6B76 0984  32         srl   tmp0,8                ; MSB to LSB
0020 6B78 0284  22         ci    tmp0,46               ; Is it a '.' ?
     6B7A 002E     
0021 6B7C 1329  14         jeq   edkey.action.cmdb.append.exit
0022                                                   ; No filename specified
0023                       ;-------------------------------------------------------
0024                       ; Check filename length
0025                       ;-------------------------------------------------------
0026 6B7E 06A0  32         bl    @cmdb.cmd.getlength            ; Get length of current command
     6B80 7784     
0027 6B82 C120  34         mov   @outparm1,tmp0                 ; Length == 0 ?
     6B84 A018     
0028 6B86 1324  14         jeq   edkey.action.cmdb.append.exit  ; Yes, exit early
0029                       ;-------------------------------------------------------
0030                       ; Get filename
0031                       ;-------------------------------------------------------
0032 6B88 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0033 6B8A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B8C A72E     
0034               
0035 6B8E 06A0  32         bl    @cpym2m
     6B90 253A     
0036 6B92 A72E                   data cmdb.cmdall,heap.top,80
     6B94 F000     
     6B96 0050     
0037                                                   ; Copy filename from command line to buffer
0038               
0039 6B98 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B9A 775C     
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6B9C 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B9E F000     
0044 6BA0 C804  38         mov   tmp0,@parm1
     6BA2 A006     
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
0049 6BA4 C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6BA6 A504     
     6BA8 A008     
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
0054 6BAA 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BAC F000     
0055 6BAE C804  38         mov   tmp0,@parm1
     6BB0 A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6BB2 0204  20         li    tmp0,id.file.appendfile
     6BB4 0003     
0060 6BB6 C804  38         mov   tmp0,@parm3           ; Set work mode
     6BB8 A00A     
0061               
0062 6BBA 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6BBC 75DA     
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
0070 6BBE 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6BC0 A318     
0071 6BC2 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6BC4 A506     
0072               
0073 6BC6 C820  54         mov   @fb.topline,@parm1
     6BC8 A304     
     6BCA A006     
0074 6BCC 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6BCE 782C     
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
0082 6BD0 C839  50         mov   *stack+,@parm1        ; Pop top row
     6BD2 A006     
0083 6BD4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084               
0085 6BD6 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6BD8 A008     
0086               
0087 6BDA 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6BDC 6492     
0088                                                   ; | i  @parm1 = Top line in editor buffer
0089                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6BDE 0204  20         li    tmp0,clip1
     6BE0 3100     
0009 6BE2 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6BE4 0204  20         li    tmp0,clip2
     6BE6 3200     
0013 6BE8 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6BEA 0204  20         li    tmp0,clip3
     6BEC 3300     
0017 6BEE 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6BF0 0204  20         li    tmp0,clip4
     6BF2 3400     
0021 6BF4 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6BF6 0204  20         li    tmp0,clip5
     6BF8 3500     
0025 6BFA 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6BFC C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6BFE A006     
0030               
0031 6C00 06A0  32         bl    @film
     6C02 2236     
0032 6C04 A72E                   data cmdb.cmdall,>00,80
     6C06 0000     
     6C08 0050     
0033               
0034 6C0A 06A0  32         bl    @cpym2m
     6C0C 253A     
0035 6C0E DE50                   data tv.clip.fname,cmdb.cmdall,80
     6C10 A72E     
     6C12 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6C14 C120  34         mov   @tv.clip.fname,tmp0
     6C16 DE50     
0040 6C18 C144  18         mov   tmp0,tmp1
0041 6C1A 0984  32         srl   tmp0,8                ; Get string length
0042 6C1C 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6C1E A72E     
0043 6C20 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6C22 D520  46         movb  @parm1,*tmp0          ; Append suffix
     6C24 A006     
0045               
0046 6C26 0460  28         b     @edkey.action.cmdb.insert
     6C28 6AD4     
0047                                                   ; Insert file
                   < stevie_b1.asm
0115                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6C2A 0649  14         dect  stack
0009 6C2C C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C2E 0649  14         dect  stack
0011 6C30 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C32 A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6C34 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C36 775C     
0016               
0017 6C38 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C3A 7784     
0018 6C3C C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C3E A018     
0019 6C40 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6C42 0204  20         li    tmp0,txt.io.nofile    ; \
     6C44 3D20     
0024 6C46 C804  38         mov   tmp0,@parm1           ; / Error message
     6C48 A006     
0025               
0026 6C4A 06A0  32         bl    @error.display        ; Show error message
     6C4C 77DE     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6C4E 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6C50 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6C52 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C54 A72E     
0036               
0037 6C56 06A0  32         bl    @cpym2m
     6C58 253A     
0038 6C5A A72E                   data cmdb.cmdlen,heap.top,80
     6C5C F000     
     6C5E 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6C60 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6C62 F000     
0044 6C64 C804  38         mov   tmp0,@parm1
     6C66 A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6C68 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6C6A A510     
     6C6C 2022     
0049 6C6E 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6C70 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6C72 A50E     
     6C74 A008     
0055 6C76 0620  34         dec   @parm2                ; /
     6C78 A008     
0056               
0057 6C7A C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6C7C A510     
     6C7E A00A     
0058               
0059 6C80 0204  20         li    tmp0,id.file.saveblock
     6C82 0005     
0060 6C84 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6C86 04E0  34         clr   @parm2                ; First line to save
     6C88 A008     
0066 6C8A C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6C8C A504     
     6C8E A00A     
0067               
0068 6C90 0204  20         li    tmp0,id.file.savefile
     6C92 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6C94 C804  38         mov   tmp0,@parm4           ; Set work mode
     6C96 A00C     
0074               
0075 6C98 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6C9A 75F2     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6C9C C839  50         mov   *stack+,@parm1        ; Pop top row
     6C9E A006     
0087 6CA0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6CA2 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6CA4 A008     
0090               
0091 6CA6 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6CA8 6492     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0116                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6CAA 0649  14         dect  stack
0009 6CAC C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6CAE 0649  14         dect  stack
0011 6CB0 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6CB2 A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6CB4 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6CB6 775C     
0016               
0017 6CB8 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6CBA 7784     
0018 6CBC C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6CBE A018     
0019 6CC0 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6CC2 0204  20         li    tmp0,txt.io.nofile    ; \
     6CC4 3D20     
0024 6CC6 C804  38         mov   tmp0,@parm1           ; / Error message
     6CC8 A006     
0025               
0026 6CCA 06A0  32         bl    @error.display        ; Show error message
     6CCC 77DE     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6CCE 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6CD0 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CD2 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CD4 A72E     
0036               
0037 6CD6 06A0  32         bl    @cpym2m
     6CD8 253A     
0038 6CDA A72E                   data cmdb.cmdlen,heap.top,80
     6CDC F000     
     6CDE 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6CE0 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CE2 F000     
0044 6CE4 C804  38         mov   tmp0,@parm1
     6CE6 A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6CE8 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6CEA A510     
     6CEC 2022     
0049 6CEE 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6CF0 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6CF2 A50E     
     6CF4 A008     
0055 6CF6 0620  34         dec   @parm2                ; /
     6CF8 A008     
0056               
0057 6CFA C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6CFC A510     
     6CFE A00A     
0058               
0059 6D00 0204  20         li    tmp0,id.file.printblock
     6D02 0008     
0060 6D04 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6D06 04E0  34         clr   @parm2                ; First line to save
     6D08 A008     
0066 6D0A C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D0C A504     
     6D0E A00A     
0067               
0068 6D10 0204  20         li    tmp0,id.file.printfile
     6D12 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6D14 C804  38         mov   tmp0,@parm4           ; Set work mode
     6D16 A00C     
0074               
0075 6D18 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D1A 75F2     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6D1C C839  50         mov   *stack+,@parm1        ; Pop top row
     6D1E A006     
0087 6D20 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6D22 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6D24 A008     
0090               
0091 6D26 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D28 6492     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0117                       copy  "edkey.cmdb.file.dir.asm"     ; Drive/Directory listing
     **** ****     > edkey.cmdb.file.dir.asm
0001               * FILE......: edkey.cmdb.fíle.directory.asm
0002               * Purpose...: Drive/Directory listing
0003               
0004               *---------------------------------------------------------------
0005               * Drive/Directory presets
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.directory.1:
0008 6D2A 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D2C A006     
0009 6D2E 04E0  34         clr   @parm2
     6D30 A008     
0010 6D32 105F  14         jmp   edkey.action.cmdb.file.directory
0011               
0012               edkey.action.cmdb.file.directory.2:
0013 6D34 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D36 A006     
0014 6D38 C820  54         mov   @const.1,@parm2
     6D3A 2002     
     6D3C A008     
0015 6D3E 1059  14         jmp   edkey.action.cmdb.file.directory
0016               
0017               edkey.action.cmdb.file.directory.3:
0018 6D40 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D42 A006     
0019 6D44 C820  54         mov   @const.2,@parm2
     6D46 2004     
     6D48 A008     
0020 6D4A 1053  14         jmp   edkey.action.cmdb.file.directory
0021               
0022               edkey.action.cmdb.file.directory.4:
0023 6D4C 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D4E A006     
0024 6D50 C820  54         mov   @const.3,@parm2
     6D52 39A2     
     6D54 A008     
0025 6D56 104D  14         jmp   edkey.action.cmdb.file.directory
0026               
0027               edkey.action.cmdb.file.directory.5:
0028 6D58 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D5A A006     
0029 6D5C C820  54         mov   @const.4,@parm2
     6D5E 2006     
     6D60 A008     
0030 6D62 1047  14         jmp   edkey.action.cmdb.file.directory
0031               
0032               edkey.action.cmdb.file.directory.6:
0033 6D64 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D66 A006     
0034 6D68 C820  54         mov   @const.5,@parm2
     6D6A 39A4     
     6D6C A008     
0035 6D6E 1041  14         jmp   edkey.action.cmdb.file.directory
0036               
0037               edkey.action.cmdb.file.directory.7:
0038 6D70 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D72 A006     
0039 6D74 C820  54         mov   @const.6,@parm2
     6D76 39A6     
     6D78 A008     
0040 6D7A 103B  14         jmp   edkey.action.cmdb.file.directory
0041               
0042               edkey.action.cmdb.file.directory.8:
0043 6D7C 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D7E A006     
0044 6D80 C820  54         mov   @const.7,@parm2
     6D82 39A8     
     6D84 A008     
0045 6D86 1035  14         jmp   edkey.action.cmdb.file.directory
0046               
0047               edkey.action.cmdb.file.directory.9:
0048 6D88 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D8A A006     
0049 6D8C C820  54         mov   @const.8,@parm2
     6D8E 2008     
     6D90 A008     
0050 6D92 102F  14         jmp   edkey.action.cmdb.file.directory
0051               
0052               edkey.action.cmdb.file.directory.a:
0053 6D94 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6D96 A006     
0054 6D98 C820  54         mov   @const.9,@parm2
     6D9A 39AA     
     6D9C A008     
0055 6D9E 1029  14         jmp   edkey.action.cmdb.file.directory
0056               
0057               edkey.action.cmdb.file.directory.b:
0058 6DA0 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DA2 A006     
0059 6DA4 C820  54         mov   @const.10,@parm2
     6DA6 39AC     
     6DA8 A008     
0060 6DAA 1023  14         jmp   edkey.action.cmdb.file.directory
0061               
0062               edkey.action.cmdb.file.directory.c:
0063 6DAC 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DAE A006     
0064 6DB0 C820  54         mov   @const.11,@parm2
     6DB2 39AE     
     6DB4 A008     
0065 6DB6 101D  14         jmp   edkey.action.cmdb.file.directory
0066               
0067               edkey.action.cmdb.file.directory.d:
0068 6DB8 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DBA A006     
0069 6DBC C820  54         mov   @const.12,@parm2
     6DBE 39B0     
     6DC0 A008     
0070 6DC2 1017  14         jmp   edkey.action.cmdb.file.directory
0071               
0072               edkey.action.cmdb.file.directory.e:
0073 6DC4 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DC6 A006     
0074 6DC8 C820  54         mov   @const.13,@parm2
     6DCA 39B2     
     6DCC A008     
0075 6DCE 1011  14         jmp   edkey.action.cmdb.file.directory
0076               
0077               edkey.action.cmdb.file.directory.f:
0078 6DD0 04E0  34         clr   @parm1                ; Skip parameter 1. Will use @device.list
     6DD2 A006     
0079 6DD4 C820  54         mov   @const.14,@parm2
     6DD6 39B4     
     6DD8 A008     
0080 6DDA 100B  14         jmp   edkey.action.cmdb.file.directory
0081               
0082               
0083               edkey.action.cmdb.file.directory.device:
0084 6DDC 06A0  32         bl    @cpym2m
     6DDE 253A     
0085 6DE0 A72E                   data cmdb.cmdall,cat.device,80
     6DE2 EEB0     
     6DE4 0050     
0086                                                   ; Copy filename from command line to buffer
0087 6DE6 0204  20         li    tmp0,cat.device
     6DE8 EEB0     
0088 6DEA C804  38         mov   tmp0,@parm1
     6DEC A006     
0089 6DEE 04E0  34         clr   @parm2
     6DF0 A008     
0090               *---------------------------------------------------------------
0091               * Drive/Directory listing
0092               *---------------------------------------------------------------
0093               edkey.action.cmdb.file.directory:
0094 6DF2 0649  14         dect  stack
0095 6DF4 C64B  30         mov   r11,*stack            ; Save return address
0096 6DF6 0649  14         dect  stack
0097 6DF8 C644  30         mov   tmp0,*stack           ; Push tmp0
0098                       ;-------------------------------------------------------
0099                       ; Catalog drive/directory
0100                       ;-------------------------------------------------------
0101 6DFA 06A0  32         bl    @fm.directory         ; Read device directory
     6DFC 7616     
0102                                                   ; \ @parm1 = Pointer to length-prefixed
0103                                                   ; |          string containing device
0104                                                   ; |          or >0000 if using parm2
0105                                                   ; | @parm2 = Index in device list
0106                                                   ; /          (ignored if parm1 set)
0107                       ;-------------------------------------------------------
0108                       ; Exit
0109                       ;-------------------------------------------------------
0110               edkey.action.cmdb.file.catalog.exit:
0111 6DFE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0112 6E00 C2F9  30         mov   *stack+,r11           ; Pop R11
0113 6E02 0460  28         b     @edkey.keyscan.hook.debounce
     6E04 2EB8     
0114                                                   ; Back to editor main
                   < stevie_b1.asm
0118                       copy  "edkey.cmdb.pick.prev.asm"    ; Pick previous file in catalog
     **** ****     > edkey.cmdb.pick.prev.asm
0001               * FILE......: edkey.cmdb.file.prev.asm
0002               * Purpose...: File selection actions in CMDB pane
0003               
0004               *---------------------------------------------------------------
0005               * Pick previous file from catalog
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.cmdb.pick.prev
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.cmdb.pick.prev:
0016 6E06 0649  14         dect  stack
0017 6E08 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 6E0A 06A0  32         bl    @fm.browse.fname.prev ; Previous file in catalog filename list
     6E0C 7628     
0022               
0023 6E0E C120  34         mov   @outparm1,tmp0        ; Skipped flag set?
     6E10 A018     
0024 6E12 1612  14         jne   edkey.action.cmdb.pick.prev.exit
0025                                                   ; Yes, exit early
0026               
0027 6E14 06A0  32         bl    @pane.filebrowser.hilight
     6E16 78F4     
0028                       ;------------------------------------------------------
0029                       ; Previous file
0030                       ;------------------------------------------------------
0031               edkey.action.cmdb.pick.prev.setfile:
0032 6E18 06A0  32         bl    @cpym2m
     6E1A 253A     
0033 6E1C E014                   data cat.fullfname,cmdb.cmdall,80
     6E1E A72E     
     6E20 0050     
0034                                                   ; Copy filename from command line to buffer
0035                       ;---------------------------------------------------------------
0036                       ; Cursor end of line
0037                       ;---------------------------------------------------------------
0038 6E22 D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length byte of current command
     6E24 A72E     
0039 6E26 0984  32         srl   tmp0,8                ; Right justify
0040 6E28 C804  38         mov   tmp0,@cmdb.column     ; Save column position
     6E2A A714     
0041 6E2C 0584  14         inc   tmp0                  ; One time adjustment command prompt
0042 6E2E 06C4  14         swpb  tmp0                  ; LSB TO MSB
0043 6E30 D804  38         movb  tmp0,@cmdb.cursor+1   ; Set cursor position
     6E32 A70B     
0044               
0045 6E34 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6E36 A71A     
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049               edkey.action.cmdb.pick.prev.exit:
0050 6E38 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6E3A 0460  28         b     @edkey.keyscan.hook.debounce
     6E3C 2EB8     
0052                                                   ; Back to editor main
                   < stevie_b1.asm
0119                       copy  "edkey.cmdb.pick.next.asm"    ; Pick next file in catalog
     **** ****     > edkey.cmdb.pick.next.asm
0001               * FILE......: edkey.cmdb.file.next.asm
0002               * Purpose...: File selection actions in CMDB pane
0003               
0004               *---------------------------------------------------------------
0005               * Pick next file from catalog
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.cmdb.pick.next
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.cmdb.pick.next:
0016 6E3E 0649  14         dect  stack
0017 6E40 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 6E42 06A0  32         bl    @fm.browse.fname.next ; Next file in catalog filename list
     6E44 763A     
0022 6E46 C120  34         mov   @outparm1,tmp0        ; Skipped flag set?
     6E48 A018     
0023 6E4A 1612  14         jne   edkey.action.cmdb.pick.next.exit
0024                                                   ; Yes, exit early
0025               
0026 6E4C 06A0  32         bl    @pane.filebrowser.hilight
     6E4E 78F4     
0027                       ;------------------------------------------------------
0028                       ; Next file
0029                       ;------------------------------------------------------
0030               edkey.action.cmdb.pick.next.setfile:
0031 6E50 06A0  32         bl    @cpym2m
     6E52 253A     
0032 6E54 E014                   data cat.fullfname,cmdb.cmdall,80
     6E56 A72E     
     6E58 0050     
0033                                                   ; Copy filename from command line to buffer
0034                       ;---------------------------------------------------------------
0035                       ; Cursor end of line
0036                       ;---------------------------------------------------------------
0037 6E5A D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length byte of current command
     6E5C A72E     
0038 6E5E 0984  32         srl   tmp0,8                ; Right justify
0039 6E60 C804  38         mov   tmp0,@cmdb.column     ; Save column position
     6E62 A714     
0040 6E64 0584  14         inc   tmp0                  ; One time adjustment command prompt
0041 6E66 06C4  14         swpb  tmp0                  ; LSB TO MSB
0042 6E68 D804  38         movb  tmp0,@cmdb.cursor+1   ; Set cursor position
     6E6A A70B     
0043               
0044 6E6C 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6E6E A71A     
0045                       ;------------------------------------------------------
0046                       ; Exit
0047                       ;------------------------------------------------------
0048               edkey.action.cmdb.pick.next.exit:
0049 6E70 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0050 6E72 0460  28         b     @edkey.keyscan.hook.debounce
     6E74 2EB8     
0051                                                   ; Back to editor main
                   < stevie_b1.asm
0120                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6E76 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6E78 A506     
0021 6E7A 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6E7C 74CE     
0022 6E7E 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6E80 777A     
0023 6E82 C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6E84 A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6E86 0284  22         ci    tmp0,>2000
     6E88 2000     
0028 6E8A 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6E8C 0284  22         ci    tmp0,>7fff
     6E8E 7FFF     
0031 6E90 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6E92 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6E94 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6E96 FFCE     
0040 6E98 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6E9A 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6E9C 0460  28         b     @edkey.keyscan.hook.debounce
     6E9E 2EB8     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6EA0 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6EA2 77B6     
0065 6EA4 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EA6 A71A     
0066 6EA8 0460  28        b     @edkey.keyscan.hook.debounce
     6EAA 2EB8     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.lineterm.toggle
0072               * Toggle line termination on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.lineterm.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.lineterm.toggle:
0083 6EAC 06A0  32        bl    @fm.lineterm           ; Toggle line termination mode
     6EAE 77CA     
0084 6EB0 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EB2 A71A     
0085 6EB4 0460  28        b     @edkey.keyscan.hook.debounce
     6EB6 2EB8     
0086                                                   ; Back to editor main
0087               
0088               
0089               ***************************************************************
0090               * edkey.action.cmdb.am.toggle
0091               * Toggle 'AutoUnpack' on/off
0092               ***************************************************************
0093               * b   @edkey.action.cmdb.am.toggle
0094               *--------------------------------------------------------------
0095               * INPUT
0096               * none
0097               *--------------------------------------------------------------
0098               * Register usage
0099               * none
0100               ********|*****|*********************|**************************
0101               edkey.action.cmdb.am.toggle:
0102 6EB8 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     6EBA 77AC     
0103 6EBC 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EBE A71A     
0104 6EC0 0460  28        b     @edkey.keyscan.hook.debounce
     6EC2 2EB8     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * edkey.action.cmdb.preset
0111               * Set command value to preset
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.preset
0114               *--------------------------------------------------------------
0115               * INPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.preset:
0122 6EC4 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6EC6 778E     
0123 6EC8 0460  28        b     @edkey.keyscan.hook.debounce
     6ECA 2EB8     
0124                                                   ; Back to editor main
0125               
0126               
0127               
0128               ***************************************************************
0129               * dialog.close
0130               * Close dialog "Help"
0131               ***************************************************************
0132               * b   @edkey.action.cmdb.close.about
0133               *--------------------------------------------------------------
0134               * OUTPUT
0135               * none
0136               *--------------------------------------------------------------
0137               * Register usage
0138               * none
0139               ********|*****|*********************|**************************
0140               edkey.action.cmdb.close.about:
0141 6ECC 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6ECE A71E     
0142                       ;------------------------------------------------------
0143                       ; Erase header line
0144                       ;------------------------------------------------------
0145 6ED0 06A0  32         bl    @hchar
     6ED2 2832     
0146 6ED4 0000                   byte 0,0,32,80*2
     6ED6 20A0     
0147 6ED8 FFFF                   data EOL
0148               
0149 6EDA 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6EDC 705C     
0150                       ;-------------------------------------------------------
0151                       ; Exit
0152                       ;-------------------------------------------------------
0153 6EDE 0460  28         b     @edkey.keyscan.hook.debounce
     6EE0 2EB8     
0154                                                   ; Back to editor main
0155               
0156               
0157               
0158               ***************************************************************
0159               * edkey.action.cmdb.close.dialog
0160               * Close dialog
0161               ***************************************************************
0162               * b   @edkey.action.cmdb.close.dialog
0163               *--------------------------------------------------------------
0164               * OUTPUT
0165               * none
0166               *--------------------------------------------------------------
0167               * Register usage
0168               * none
0169               ********|*****|*********************|**************************
0170               edkey.action.cmdb.close.dialog:
0171 6EE2 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6EE4 705C     
0172                       ;-------------------------------------------------------
0173                       ; Exit
0174                       ;-------------------------------------------------------
0175               edkey.action.cmdb.close.dialog.exit:
0176 6EE6 0460  28         b     @edkey.keyscan.hook.debounce
     6EE8 2EB8     
0177                                                   ; Back to editor main
                   < stevie_b1.asm
0121                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 6EEA 06A0  32         bl    @hchar
     6EEC 2832     
0009 6EEE 0032                   byte 0,50,32,20
     6EF0 2014     
0010 6EF2 FFFF                   data EOL              ; Erase any previous message
0011               
0012 6EF4 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6EF6 A50C     
0013 6EF8 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6EFA 06A0  32         bl    @putat
     6EFC 2442     
0018 6EFE 0034                   byte 0,52
0019 6F00 3B38                   data txt.autoins.on   ; AutoInsert on
0020 6F02 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6F04 06A0  32 !       bl    @putat
     6F06 2442     
0025 6F08 0034                   byte 0,52
0026 6F0A 3B48                   data txt.autoins.off   ; AutoInsert off
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
0031 6F0C 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6F0E 380E     
0032 6F10 C804  38         mov   tmp0,@tv.task.oneshot
     6F12 A226     
0033               
0034 6F14 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6F16 2FA8     
0035 6F18 0003                   data 3                ; / for getting consistent delay
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
0040 6F1A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F1C 705C     
0041 6F1E 0460  28         b     @edkey.keyscan.hook.debounce
     6F20 2EB8     
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0122                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
0011 6F22 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6F24 7784     
0012 6F26 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6F28 A018     
0013 6F2A 1321  14         jeq   edkey.action.cmdb.goto.exit
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
0018 6F2C 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6F2E A72F     
0019 6F30 C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6F32 A006     
0020               
0021 6F34 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6F36 3432     
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
0032 6F38 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6F3A A01A     
     6F3C 2022     
0033 6F3E 1317  14         jeq   edkey.action.cmdb.goto.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Prepare for goto
0037                       ;-------------------------------------------------------
0038               edkey.action.cmdb.goto.prepare:
0039 6F40 0649  14         dect  stack
0040 6F42 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6F44 A018     
0041               
0042 6F46 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F48 705C     
0043                       ;-------------------------------------------------------
0044                       ; Crunch current row if dirty
0045                       ;-------------------------------------------------------
0046 6F4A 8820  50         c     @fb.row.dirty,@w$ffff
     6F4C A30A     
     6F4E 2022     
0047 6F50 1604  14         jne   edkey.action.cmdb.goto.line
0048               
0049 6F52 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F54 7070     
0050                                                   ; \ i   @fb.top      = Address top row in FB
0051                                                   ; | i   @fb.row      = Current row in FB
0052                                                   ; | i   @fb.column   = Current column in FB
0053                                                   ; / i   @fb.colsline = Cols per line in FB
0054               
0055 6F56 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F58 A30A     
0056                       ;-------------------------------------------------------
0057                       ; Goto line
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.goto.line:
0060 6F5A C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6F5C A006     
0061 6F5E 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6F60 A006     
0062               
0063 6F62 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6F64 A312     
0064               
0065 6F66 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6F68 A008     
0066               
0067 6F6A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6F6C 6492     
0068                                                   ; | i  @parm1 = Top line in editor buffer
0069                                                   ; / i  @parm2 = Row offset in frame buffer
0070                       ;-------------------------------------------------------
0071                       ; Exit
0072                       ;-------------------------------------------------------
0073               edkey.action.cmdb.goto.exit:
0074 6F6E 0460  28         b     @edkey.keyscan.hook.debounce
     6F70 2EB8     
0075                                                   ; Back to editor main
                   < stevie_b1.asm
0123                       copy  "edkey.cmdb.font.asm"         ; Set font
     **** ****     > edkey.cmdb.font.asm
0001               * FILE......: edkey.cmdb.font.asm
0002               * Purpose...: Set specified font
0003               
0004               *---------------------------------------------------------------
0005               * Load font
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.font1:
0008 6F72 04C4  14         clr   tmp0                  ; Load font 1
0009 6F74 100C  14         jmp   edkey.action.cmdb.font.load
0010               edkey.action.cmdb.font2:
0011 6F76 0204  20         li    tmp0,1                ; Load font 2
     6F78 0001     
0012 6F7A 1009  14         jmp   edkey.action.cmdb.font.load
0013               edkey.action.cmdb.font3:
0014 6F7C 0204  20         li    tmp0,2                ; Load font 3
     6F7E 0002     
0015 6F80 1006  14         jmp   edkey.action.cmdb.font.load
0016               edkey.action.cmdb.font4:
0017 6F82 0204  20         li    tmp0,3                ; Load font 4
     6F84 0003     
0018 6F86 1003  14         jmp   edkey.action.cmdb.font.load
0019               edkey.action.cmdb.font5:
0020 6F88 0204  20         li    tmp0,4                ; Load font 5
     6F8A 0004     
0021 6F8C 1000  14         jmp   edkey.action.cmdb.font.load
0022                       ;-------------------------------------------------------
0023                       ; Load font
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.font.load:
0026 6F8E C804  38         mov   tmp0,@parm1
     6F90 A006     
0027 6F92 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     6F94 799A     
0028                                                   ; \ i  @parm1       = Font index (0-5)
0029                                                   ; / o  @tv.font.ptr = Pointer to font
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.cmdb.font.exit:
0034 6F96 0460  28         b     @edkey.keyscan.hook.debounce
     6F98 2EB8     
0035                                                   ; Back to editor main
                   < stevie_b1.asm
0124                       copy  "edkey.cmdb.filebrowser.prev.asm"
     **** ****     > edkey.cmdb.filebrowser.prev.asm
0001               * FILE......: edkey.cmdb.filebrowser.prev.asm
0002               * Purpose...: Previous page in filebrowser
0003               
0004               edkey.action.filebrowser.prev:
0005 6F9A 0649  14         dect  stack
0006 6F9C C64B  30         mov   r11,*stack            ; Save return address
0007                       ;-------------------------------------------------------
0008                       ; Check page boundaries
0009                       ;-------------------------------------------------------
0010 6F9E C120  34         mov   @cat.currentpage,tmp0
     6FA0 E00A     
0011 6FA2 0284  22         ci    tmp0,1
     6FA4 0001     
0012 6FA6 1603  14         jne   edkey.action.filebrowser.prev.page
0013 6FA8 04E0  34         clr   @cat.fpicker.idx
     6FAA E002     
0014 6FAC 1008  14         jmp   edkey.action.filebrowser.prev.checkdialog
0015                       ;-------------------------------------------------------
0016                       ; Previous page
0017                       ;-------------------------------------------------------
0018               edkey.action.filebrowser.prev.page:
0019 6FAE 6820  54         s     @cat.nofilespage,@cat.fpicker.idx
     6FB0 E008     
     6FB2 E002     
0020                                                   ; Calculate 1st filename on page
0021               
0022 6FB4 C820  54         mov   @cat.fpicker.idx,@cat.shortcut.idx
     6FB6 E002     
     6FB8 E010     
0023                                                   ; Make it same for highlighter
0024               
0025 6FBA 06A0  32         bl    @pane.filebrowser     ; Show filebrowser
     6FBC 78EA     
0026                       ;-------------------------------------------------------
0027                       ; Check if on supported dialog for filename display
0028                       ;-------------------------------------------------------
0029               edkey.action.filebrowser.prev.checkdialog:
0030 6FBE C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     6FC0 A71C     
0031               
0032 6FC2 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     6FC4 000A     
0033 6FC6 1115  14         jlt   edkey.action.filebrowser.prev.exit
0034                                                   ; / Not in supported dialog range. Skip
0035               
0036 6FC8 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     6FCA 000D     
0037 6FCC 1512  14         jgt   edkey.action.filebrowser.prev.exit
0038                                                   ; / Not in supported dialog range. Skip
0039                       ;-------------------------------------------------------
0040                       ; Display device and filename
0041                       ;-------------------------------------------------------
0042               edkey.action.filebrowser.prev.page.display:
0043 6FCE 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     6FD0 764C     
0044                                                   ; \ i  @cat.device = Current device name
0045                                                   ; | i  @cat.shortcut.idx = Index in catalog
0046                                                   ; |        filename pointerlist
0047                                                   ; |
0048                                                   ; | o  @cat.fullfname = Combined string with
0049                                                   ; /        device & filename
0050               
0051 6FD2 06A0  32         bl    @cpym2m
     6FD4 253A     
0052 6FD6 E014                   data cat.fullfname,cmdb.cmdall,80
     6FD8 A72E     
     6FDA 0050     
0053                                                   ; Copy filename from command line to buffer
0054                       ;---------------------------------------------------------------
0055                       ; Cursor end of line
0056                       ;---------------------------------------------------------------
0057 6FDC D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length byte of current command
     6FDE A72E     
0058 6FE0 0984  32         srl   tmp0,8                ; Right justify
0059 6FE2 C804  38         mov   tmp0,@cmdb.column     ; Save column position
     6FE4 A714     
0060 6FE6 0584  14         inc   tmp0                  ; One time adjustment command prompt
0061 6FE8 06C4  14         swpb  tmp0                  ; LSB TO MSB
0062 6FEA D804  38         movb  tmp0,@cmdb.cursor+1   ; Set cursor position
     6FEC A70B     
0063               
0064 6FEE 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     6FF0 A71A     
0065                       ;-------------------------------------------------------
0066                       ; Exit
0067                       ;-------------------------------------------------------
0068               edkey.action.filebrowser.prev.exit:
0069 6FF2 C2F9  30         mov   *stack+,r11           ; Pop R11
0070 6FF4 0460  28         b     @edkey.keyscan.hook.debounce
     6FF6 2EB8     
0071                                                   ; Back to editor main
                   < stevie_b1.asm
0125                                                           ; Previous page in filebrowser
0126                       copy  "edkey.cmdb.filebrowser.next.asm"
     **** ****     > edkey.cmdb.filebrowser.next.asm
0001               * FILE......: edkey.cmdb.filebrowser.next.asm
0002               * Purpose...: Next page in filebrowser
0003               
0004               edkey.action.filebrowser.next:
0005 6FF8 0649  14         dect  stack
0006 6FFA C64B  30         mov   r11,*stack            ; Save return address
0007 6FFC 0649  14         dect  stack
0008 6FFE C644  30         mov   tmp0,*stack           ; Push tmp0
0009                       ;-------------------------------------------------------
0010                       ; Check page boundaries
0011                       ;-------------------------------------------------------
0012 7000 8820  50         c     @cat.currentpage,@cat.totalpages
     7002 E00A     
     7004 E00C     
0013 7006 1104  14         jlt   edkey.action.filebrowser.next.page
0014 7008 C820  54         mov   @cat.totalpages,@cat.currentpage
     700A E00C     
     700C E00A     
0015 700E 1008  14         jmp   edkey.action.filebrowser.next.checkdialog
0016                       ;-------------------------------------------------------
0017                       ; Next page
0018                       ;-------------------------------------------------------
0019               edkey.action.filebrowser.next.page:
0020 7010 A820  54         a     @cat.nofilespage,@cat.fpicker.idx
     7012 E008     
     7014 E002     
0021                                                   ; Calculate 1st filename on page
0022               
0023 7016 C820  54         mov   @cat.fpicker.idx,@cat.shortcut.idx
     7018 E002     
     701A E010     
0024                                                   ; Make it same for highlighter
0025               
0026 701C 06A0  32         bl    @pane.filebrowser     ; Show filebrowser
     701E 78EA     
0027                       ;-------------------------------------------------------
0028                       ; Check if on supported dialog for filename display
0029                       ;-------------------------------------------------------
0030               edkey.action.filebrowser.next.checkdialog:
0031 7020 C120  34         mov   @cmdb.dialog,tmp0     ; Get current dialog ID
     7022 A71C     
0032               
0033 7024 0284  22         ci    tmp0,id.dialog.load   ; \ First supported dialog
     7026 000A     
0034 7028 1115  14         jlt   edkey.action.filebrowser.next.exit
0035                                                   ; / Not in supported dialog range. Skip
0036               
0037 702A 0284  22         ci    tmp0,id.dialog.run    ; \ Last supported dialog
     702C 000D     
0038 702E 1512  14         jgt   edkey.action.filebrowser.next.exit
0039                                                   ; / Not in supported dialog range. Skip
0040                       ;-------------------------------------------------------
0041                       ; Display device and filename
0042                       ;-------------------------------------------------------
0043               edkey.action.filebrowser.next.page.display:
0044 7030 06A0  32         bl    @fm.browse.fname.set  ; Create string with device & filename
     7032 764C     
0045                                                   ; \ i  @cat.device = Current device name
0046                                                   ; | i  @cat.shortcut.idx = Index in catalog
0047                                                   ; |        filename pointerlist
0048                                                   ; |
0049                                                   ; | o  @cat.fullfname = Combined string with
0050                                                   ; /        device & filename
0051               
0052 7034 06A0  32         bl    @cpym2m
     7036 253A     
0053 7038 E014                   data cat.fullfname,cmdb.cmdall,80
     703A A72E     
     703C 0050     
0054                                                   ; Copy filename from command line to buffer
0055                       ;---------------------------------------------------------------
0056                       ; Cursor end of line
0057                       ;---------------------------------------------------------------
0058 703E D120  34         movb  @cmdb.cmdlen,tmp0     ; Get length byte of current command
     7040 A72E     
0059 7042 0984  32         srl   tmp0,8                ; Right justify
0060 7044 C804  38         mov   tmp0,@cmdb.column     ; Save column position
     7046 A714     
0061 7048 0584  14         inc   tmp0                  ; One time adjustment command prompt
0062 704A 06C4  14         swpb  tmp0                  ; LSB TO MSB
0063 704C D804  38         movb  tmp0,@cmdb.cursor+1   ; Set cursor position
     704E A70B     
0064               
0065 7050 0720  34         seto  @cmdb.dirty           ; Set CMDB dirty flag (trigger redraw)
     7052 A71A     
0066                       ;-------------------------------------------------------
0067                       ; Exit
0068                       ;-------------------------------------------------------
0069               edkey.action.filebrowser.next.exit:
0070 7054 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0071 7056 C2F9  30         mov   *stack+,r11           ; Pop R11
0072 7058 0460  28         b     @edkey.keyscan.hook.debounce
     705A 2EB8     
0073                                                   ; Back to editor main
                   < stevie_b1.asm
0127                                                           ; Next page in filebrowser
0128                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 705C 0649  14         dect  stack
0018 705E C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 7060 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     7062 A71C     
0023 7064 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     7066 775C     
0024 7068 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     706A A31A     
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
0029 706C C2F9  30         mov   *stack+,r11           ; Pop r11
0030 706E 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0129                       ;-----------------------------------------------------------------------
0130                       ; Logic for Editor Buffer
0131                       ;-----------------------------------------------------------------------
0132                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 7070 0649  14         dect  stack
0028 7072 C64B  30         mov   r11,*stack            ; Save return address
0029 7074 0649  14         dect  stack
0030 7076 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 7078 0649  14         dect  stack
0032 707A C645  30         mov   tmp1,*stack           ; Push tmp1
0033 707C 0649  14         dect  stack
0034 707E C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7080 0649  14         dect  stack
0036 7082 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7084 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     7086 A30C     
     7088 A100     
0041 708A 04E0  34         clr   @fb.column
     708C A30C     
0042               
0043 708E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     7090 319E     
0044                                                   ; \ i   @fb.top      = Address top row in FB
0045                                                   ; | i   @fb.topline  = Top line in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; |                  (offset 0..@fb.scrrows)
0048                                                   ; | i   @fb.column   = Current column in FB
0049                                                   ; | i   @fb.colsline = Columns per line FB
0050                                                   ; |
0051                                                   ; / o   @fb.current  = Updated pointer
0052                       ;------------------------------------------------------
0053                       ; Prepare scan
0054                       ;------------------------------------------------------
0055 7092 04C4  14         clr   tmp0                  ; Counter
0056 7094 C160  34         mov   @fb.current,tmp1      ; Get position
     7096 A302     
0057 7098 C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     709A A102     
0058 709C 04C7  14         clr   tmp3                  ; Counter for whitespace
0059                       ;------------------------------------------------------
0060                       ; 1. Scan line for >00 byte termination
0061                       ;------------------------------------------------------
0062               edb.line.pack.fb.scan:
0063 709E D1B5  28         movb  *tmp1+,tmp2           ; Get char
0064 70A0 0986  32         srl   tmp2,8                ; Right justify
0065 70A2 130D  14         jeq   edb.line.pack.fb.check_setpage
0066                                                   ; Stop scan if >00 found
0067 70A4 0584  14         inc   tmp0                  ; Increase string length
0068                       ;------------------------------------------------------
0069                       ; Check for trailing whitespace
0070                       ;------------------------------------------------------
0071 70A6 0286  22         ci    tmp2,32               ; Was it a space character?
     70A8 0020     
0072 70AA 1301  14         jeq   edb.line.pack.fb.check80
0073 70AC C1C4  18         mov   tmp0,tmp3
0074                       ;------------------------------------------------------
0075                       ; Not more than 80 characters
0076                       ;------------------------------------------------------
0077               edb.line.pack.fb.check80:
0078 70AE 0284  22         ci    tmp0,colrow
     70B0 0050     
0079 70B2 1305  14         jeq   edb.line.pack.fb.check_setpage
0080                                                   ; Stop scan if 80 characters processed
0081 70B4 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0082                       ;------------------------------------------------------
0083                       ; Check failed, crash CPU!
0084                       ;------------------------------------------------------
0085               edb.line.pack.fb.crash:
0086 70B6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     70B8 FFCE     
0087 70BA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     70BC 2026     
0088                       ;------------------------------------------------------
0089                       ; Check if highest SAMS page needs to be increased
0090                       ;------------------------------------------------------
0091               edb.line.pack.fb.check_setpage:
0092 70BE 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0093 70C0 1103  14         jlt   edb.line.pack.fb.rtrim
0094 70C2 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     70C4 A104     
0095 70C6 100C  14         jmp   !
0096               edb.line.pack.fb.rtrim:
0097                       ;------------------------------------------------------
0098                       ; Remove trailing blanks from line
0099                       ;------------------------------------------------------
0100 70C8 C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     70CA A104     
0101               
0102 70CC 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0103               
0104 70CE C184  18         mov   tmp0,tmp2             ; \
0105 70D0 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0106 70D2 0586  14         inc   tmp2                  ; /
0107               
0108 70D4 C107  18         mov   tmp3,tmp0             ; \
0109 70D6 A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     70D8 A102     
0110               
0111               edb.line.pack.fb.rtrim.loop:
0112 70DA DD05  32         movb  tmp1,*tmp0+
0113 70DC 0606  14         dec   tmp2
0114 70DE 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0115                       ;------------------------------------------------------
0116                       ; Check and increase highest SAMS page
0117                       ;------------------------------------------------------
0118 70E0 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     70E2 37C8     
0119                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0120                                                   ; /                         free line
0121                       ;------------------------------------------------------
0122                       ; 2. Prepare for storing line
0123                       ;------------------------------------------------------
0124               edb.line.pack.fb.prepare:
0125 70E4 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     70E6 A304     
     70E8 A006     
0126 70EA A820  54         a     @fb.row,@parm1        ; /
     70EC A306     
     70EE A006     
0127                       ;------------------------------------------------------
0128                       ; 2a. Update index
0129                       ;------------------------------------------------------
0130               edb.line.pack.fb.update_index:
0131 70F0 C820  54         mov   @edb.next_free.ptr,@parm2
     70F2 A508     
     70F4 A008     
0132                                                   ; Pointer to new line
0133 70F6 C820  54         mov   @edb.sams.hipage,@parm3
     70F8 A51C     
     70FA A00A     
0134                                                   ; SAMS page to use
0135               
0136 70FC 06A0  32         bl    @idx.entry.update     ; Update index
     70FE 356E     
0137                                                   ; \ i  parm1 = Line number in editor buffer
0138                                                   ; | i  parm2 = pointer to line in
0139                                                   ; |            editor buffer
0140                                                   ; / i  parm3 = SAMS page
0141                       ;------------------------------------------------------
0142                       ; 3. Set line prefix in editor buffer
0143                       ;------------------------------------------------------
0144 7100 C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     7102 A102     
0145 7104 C160  34         mov   @edb.next_free.ptr,tmp1
     7106 A508     
0146                                                   ; Address of line in editor buffer
0147               
0148 7108 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     710A A508     
0149               
0150 710C C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     710E A104     
0151 7110 CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0152 7112 1317  14         jeq   edb.line.pack.fb.prepexit
0153                                                   ; Nothing to copy if empty line
0154                       ;------------------------------------------------------
0155                       ; 4. Copy line from framebuffer to editor buffer
0156                       ;------------------------------------------------------
0157               edb.line.pack.fb.copyline:
0158 7114 0286  22         ci    tmp2,2
     7116 0002     
0159 7118 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0160 711A DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0161 711C DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0162 711E 1007  14         jmp   edb.line.pack.fb.copyline.align16
0163               
0164               edb.line.pack.fb.copyline.checkbyte:
0165 7120 0286  22         ci    tmp2,1
     7122 0001     
0166 7124 1602  14         jne   edb.line.pack.fb.copyline.block
0167 7126 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0168 7128 1002  14         jmp   edb.line.pack.fb.copyline.align16
0169               
0170               edb.line.pack.fb.copyline.block:
0171 712A 06A0  32         bl    @xpym2m               ; Copy memory block
     712C 2540     
0172                                                   ; \ i  tmp0 = source
0173                                                   ; | i  tmp1 = destination
0174                                                   ; / i  tmp2 = bytes to copy
0175                       ;------------------------------------------------------
0176                       ; 5: Align pointer to multiple of 16 memory address
0177                       ;------------------------------------------------------
0178               edb.line.pack.fb.copyline.align16:
0179 712E A820  54         a     @rambuf+4,@edb.next_free.ptr
     7130 A104     
     7132 A508     
0180                                                      ; Add length of line
0181               
0182 7134 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     7136 A508     
0183 7138 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0184 713A 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     713C 000F     
0185 713E A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     7140 A508     
0186                       ;------------------------------------------------------
0187                       ; 6: Restore SAMS page and prepare for exit
0188                       ;------------------------------------------------------
0189               edb.line.pack.fb.prepexit:
0190 7142 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     7144 A100     
     7146 A30C     
0191               
0192 7148 8820  50         c     @edb.sams.hipage,@edb.sams.page
     714A A51C     
     714C A518     
0193 714E 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0194               
0195 7150 C120  34         mov   @edb.sams.page,tmp0
     7152 A518     
0196 7154 C160  34         mov   @edb.top.ptr,tmp1
     7156 A500     
0197 7158 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     715A 25D6     
0198                                                   ; \ i  tmp0 = SAMS page number
0199                                                   ; / i  tmp1 = Memory address
0200                       ;------------------------------------------------------
0201                       ; Exit
0202                       ;------------------------------------------------------
0203               edb.line.pack.fb.exit:
0204 715C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0205 715E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0206 7160 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0207 7162 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0208 7164 C2F9  30         mov   *stack+,r11           ; Pop R11
0209 7166 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0133                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 7168 0649  14         dect  stack
0031 716A C64B  30         mov   r11,*stack            ; Save return address
0032 716C 0649  14         dect  stack
0033 716E C644  30         mov   tmp0,*stack           ; Push tmp0
0034 7170 0649  14         dect  stack
0035 7172 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 7174 0649  14         dect  stack
0037 7176 C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 7178 C820  54         mov   @parm1,@rambuf
     717A A006     
     717C A100     
0042 717E C820  54         mov   @parm2,@rambuf+2
     7180 A008     
     7182 A102     
0043 7184 C820  54         mov   @parm3,@rambuf+4
     7186 A00A     
     7188 A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 718A C120  34         mov   @fb.colsline,tmp0
     718C A30E     
0048 718E 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     7190 A008     
0049 7192 C1A0  34         mov   @fb.top.ptr,tmp2
     7194 A300     
0050 7196 A146  18         a     tmp2,tmp1             ; Add base to offset
0051 7198 C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     719A A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 719C 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     719E A006     
     71A0 A504     
0056 71A2 1103  14         jlt   !                     ; No, continue processing
0057               
0058 71A4 04E0  34         clr   @rambuf+10            ; Set line length = 0
     71A6 A10A     
0059 71A8 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 71AA C120  34 !       mov   @parm1,tmp0
     71AC A006     
0064 71AE 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     71B0 3716     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 71B2 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     71B4 A018     
0072 71B6 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 71B8 04E0  34         clr   @rambuf+10            ; Set length=0
     71BA A10A     
0076 71BC 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 71BE C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     71C0 A10A     
0082 71C2 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     71C4 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 71C6 C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     71C8 A108     
0088 71CA 04C5  14         clr   tmp1                  ; | Fill with >00
0089 71CC 0206  20         li    tmp2,80               ; /
     71CE 0050     
0090               
0091 71D0 06A0  32         bl    @xfilm                ; Fill CPU memory
     71D2 223C     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 71D4 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     71D6 A10A     
0100 71D8 C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     71DA A018     
0101 71DC 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 71DE 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     71E0 A104     
0105 71E2 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 71E4 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     71E6 A108     
0109 71E8 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     71EA A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 71EC 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 71EE 0286  22         ci    tmp2,80               ; Check line length
     71F0 0050     
0117 71F2 1202  14         jle   edb.line.unpack.fb.copy
0118 71F4 0206  20         li    tmp2,80               ; Only process first 80 characters
     71F6 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 71F8 C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     71FA A106     
0124 71FC A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     71FE A104     
0125               
0126               
0127 7200 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     7202 2540     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 7204 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 7206 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 7208 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 720A C2F9  30         mov   *stack+,r11           ; Pop r11
0139 720C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0134                       ;-----------------------------------------------------------------------
0135                       ; Background tasks
0136                       ;-----------------------------------------------------------------------
0137                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 720E 0649  14         dect  stack
0009 7210 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7212 06A0  32         bl    @pane.vdpdump
     7214 74EE     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 7216 C2F9  30         mov   *stack+,r11           ; Pop r11
0019 7218 0460  28         b     @slotok
     721A 2F34     
                   < stevie_b1.asm
0138                       ;-----------------------------------------------------------------------
0139                       ; Screen pane utilities
0140                       ;-----------------------------------------------------------------------
0141                       copy  "pane.colorscheme.cycle.asm"  ; Cycle through color schemes
     **** ****     > pane.colorscheme.cycle.asm
0001               * FILE......: pane.colorscheme.cycle.asm
0002               * Purpose...: Cycle through available color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.cycle
0006               * Cycle through available color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.cycle
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.colorscheme.cycle:
0017 721C 0649  14         dect  stack
0018 721E C64B  30         mov   r11,*stack            ; Push return address
0019 7220 0649  14         dect  stack
0020 7222 C644  30         mov   tmp0,*stack           ; Push tmp0
0021               
0022 7224 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     7226 A212     
0023 7228 0284  22         ci    tmp0,tv.colorscheme.entries
     722A 000C     
0024                                                   ; Last entry reached?
0025 722C 1103  14         jlt   !
0026 722E 0204  20         li    tmp0,1                ; Reset color scheme index
     7230 0001     
0027 7232 1001  14         jmp   pane.colorscheme.switch
0028 7234 0584  14 !       inc   tmp0
0029                       ;-------------------------------------------------------
0030                       ; Switch to new color scheme
0031                       ;-------------------------------------------------------
0032               pane.colorscheme.switch:
0033 7236 C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     7238 A212     
0034               
0035 723A 06A0  32         bl    @pane.colorscheme.load
     723C 727A     
0036                                                   ; Load current color scheme
0037                       ;-------------------------------------------------------
0038                       ; Show current color palette message
0039                       ;-------------------------------------------------------
0040 723E C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     7240 832A     
     7242 833C     
0041               
0042 7244 06A0  32         bl    @putnum
     7246 2AD4     
0043 7248 003E                   byte 0,62
0044 724A A212                   data tv.colorscheme,rambuf,>3020
     724C A100     
     724E 3020     
0045               
0046 7250 06A0  32         bl    @putat
     7252 2442     
0047 7254 0034                   byte 0,52
0048 7256 3D84                   data txt.colorscheme  ; Show color palette message
0049               
0050 7258 C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     725A 833C     
     725C 832A     
0051                       ;-------------------------------------------------------
0052                       ; Delay
0053                       ;-------------------------------------------------------
0054 725E 0204  20         li    tmp0,6000
     7260 1770     
0055 7262 0604  14 !       dec   tmp0
0056 7264 16FE  14         jne   -!
0057                       ;-------------------------------------------------------
0058                       ; Setup one shot task for removing message
0059                       ;-------------------------------------------------------
0060 7266 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     7268 380E     
0061 726A C804  38         mov   tmp0,@tv.task.oneshot
     726C A226     
0062               
0063 726E 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7270 2FA8     
0064 7272 0003                   data 3                ; / for getting consistent delay
0065                       ;-------------------------------------------------------
0066                       ; Exit
0067                       ;-------------------------------------------------------
0068               pane.colorscheme.cycle.exit:
0069 7274 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 7276 C2F9  30         mov   *stack+,r11           ; Pop R11
0071 7278 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0142                       copy  "pane.colorscheme.load.asm"   ; Load color scheme
     **** ****     > pane.colorscheme.load.asm
0001               * FILE......: pane.colorscheme.load.asm
0002               * Purpose...: Load color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.load
0006               * Load color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.colorscheme = Index into color scheme table
0012               * @parm1          = Skip screen off if >FFFF
0013               * @parm2          = Skip colorizing marked lines if >FFFF
0014               * @parm3          = Only colorize CMDB pane if >FFFF
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0,tmp1,tmp2,tmp3,tmp4
0021               ********|*****|*********************|**************************
0022               pane.colorscheme.load:
0023 727A 0649  14         dect  stack
0024 727C C64B  30         mov   r11,*stack            ; Save return address
0025 727E 0649  14         dect  stack
0026 7280 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 7282 0649  14         dect  stack
0028 7284 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 7286 0649  14         dect  stack
0030 7288 C646  30         mov   tmp2,*stack           ; Push tmp2
0031 728A 0649  14         dect  stack
0032 728C C647  30         mov   tmp3,*stack           ; Push tmp3
0033 728E 0649  14         dect  stack
0034 7290 C648  30         mov   tmp4,*stack           ; Push tmp4
0035 7292 0649  14         dect  stack
0036 7294 C660  46         mov   @parm1,*stack         ; Push parm1
     7296 A006     
0037 7298 0649  14         dect  stack
0038 729A C660  46         mov   @parm2,*stack         ; Push parm2
     729C A008     
0039 729E 0649  14         dect  stack
0040 72A0 C660  46         mov   @parm3,*stack         ; Push parm3
     72A2 A00A     
0041                       ;-------------------------------------------------------
0042                       ; Turn screen off
0043                       ;-------------------------------------------------------
0044 72A4 C120  34         mov   @parm1,tmp0
     72A6 A006     
0045 72A8 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     72AA FFFF     
0046 72AC 1302  14         jeq   !                     ; Yes, so skip screen off
0047 72AE 06A0  32         bl    @scroff               ; Turn screen off
     72B0 26E6     
0048                       ;-------------------------------------------------------
0049                       ; Get FG/BG colors framebuffer text
0050                       ;-------------------------------------------------------
0051 72B2 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     72B4 A212     
0052 72B6 0604  14         dec   tmp0                  ; Internally work with base 0
0053               
0054 72B8 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0055 72BA 0224  22         ai    tmp0,tv.colorscheme.table
     72BC 392A     
0056                                                   ; Add base for color scheme data table
0057 72BE C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0058 72C0 C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     72C2 A218     
0059                       ;-------------------------------------------------------
0060                       ; Get and save cursor color
0061                       ;-------------------------------------------------------
0062 72C4 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0063 72C6 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     72C8 00FF     
0064 72CA C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     72CC A216     
0065                       ;-------------------------------------------------------
0066                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0067                       ;-------------------------------------------------------
0068 72CE C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0069 72D0 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     72D2 FF00     
0070 72D4 0988  32         srl   tmp4,8                ; MSB to LSB
0071               
0072 72D6 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0073 72D8 C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0074 72DA 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0075 72DC C806  38         mov   tmp2,@tv.busycolor    ; /
     72DE A21C     
0076               
0077 72E0 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     72E2 00FF     
0078 72E4 C805  38         mov   tmp1,@tv.markcolor    ; /
     72E6 A21A     
0079               
0080 72E8 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0081 72EA 0985  32         srl   tmp1,8                ; \ Right align MN and
0082 72EC C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     72EE A220     
0083                       ;-------------------------------------------------------
0084                       ; Check if only CMDB needs to be colorized
0085                       ;-------------------------------------------------------
0086 72F0 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     72F2 A00A     
     72F4 2022     
0087 72F6 1340  14         jeq   pane.colorscheme.cmdbpane
0088                                                   ; Yes, shortcut jump to CMDB pane
0089                       ;-------------------------------------------------------
0090                       ; Get FG color for ruler
0091                       ;-------------------------------------------------------
0092 72F8 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0093 72FA 0245  22         andi  tmp1,>000f            ; Only keep P
     72FC 000F     
0094 72FE 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0095 7300 C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     7302 A21E     
0096                       ;-------------------------------------------------------
0097                       ; Write sprite color of line and column indicators to SAT
0098                       ;-------------------------------------------------------
0099 7304 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0100 7306 0245  22         andi  tmp1,>00f0            ; Only keep O
     7308 00F0     
0101 730A 0A45  24         sla   tmp1,4                ; Move O to MSB
0102 730C D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     730E A05D     
0103 7310 D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     7312 A061     
0104                       ;-------------------------------------------------------
0105                       ; Dump colors to VDP register 7 (text mode)
0106                       ;-------------------------------------------------------
0107 7314 C147  18         mov   tmp3,tmp1             ; Get work copy
0108 7316 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0109 7318 0265  22         ori   tmp1,>0700
     731A 0700     
0110 731C C105  18         mov   tmp1,tmp0
0111 731E 06A0  32         bl    @putvrx               ; Write VDP register
     7320 2334     
0112                       ;-------------------------------------------------------
0113                       ; Dump colors for frame buffer pane (TAT)
0114                       ;-------------------------------------------------------
0115 7322 C120  34         mov   @tv.ruler.visible,tmp0
     7324 A210     
0116 7326 130C  14         jeq   pane.colorscheme.fbdump.noruler
0117               
0118 7328 C120  34         mov   @cmdb.dialog,tmp0
     732A A71C     
0119 732C 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     732E 0068     
0120 7330 1307  14         jeq   pane.colorscheme.fbdump.noruler
0121                                                   ; Yes, skip ruler
0122                       ;-------------------------------------------------------
0123                       ; Ruler visible on screen (TAT)
0124                       ;-------------------------------------------------------
0125 7332 C120  34         mov   @cmdb.vdptop,tmp0     ;
     7334 A70E     
0126 7336 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     7338 0050     
0127 733A 0206  20         li    tmp2,(pane.botrow-2)*80
     733C 0870     
0128                                                   ; Number of bytes to fill
0129 733E 1004  14         jmp   pane.colorscheme.checkcmdb
0130               
0131               pane.colorscheme.fbdump.noruler:
0132                       ;-------------------------------------------------------
0133                       ; No ruler visible on screen (TAT)
0134                       ;-------------------------------------------------------
0135 7340 0204  20         li    tmp0,vdp.fb.toprow.tat
     7342 1850     
0136                                                   ; VDP start address (frame buffer area)
0137 7344 0206  20         li    tmp2,(pane.botrow-1)*80
     7346 08C0     
0138                                                   ; Number of bytes to fill
0139                       ;-------------------------------------------------------
0140                       ; Adjust bottom of frame buffer if CMDB visible
0141                       ;-------------------------------------------------------
0142               pane.colorscheme.checkcmdb:
0143 7348 C820  54         mov   @cmdb.visible,@cmdb.visible
     734A A702     
     734C A702     
0144 734E 1302  14         jeq   pane.colorscheme.fbdump
0145                                                   ; Not visible, skip adjustment
0146 7350 0226  22         ai    tmp2,-320             ; CMDB adjustment
     7352 FEC0     
0147                       ;-------------------------------------------------------
0148                       ; Dump colors to VDP (TAT)
0149                       ;-------------------------------------------------------
0150               pane.colorscheme.fbdump:
0151 7354 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0152 7356 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0153               
0154 7358 06A0  32         bl    @xfilv                ; Fill colors
     735A 2294     
0155                                                   ; i \  tmp0 = start address
0156                                                   ; i |  tmp1 = byte to fill
0157                                                   ; i /  tmp2 = number of bytes to fill
0158                       ;-------------------------------------------------------
0159                       ; Colorize marked lines
0160                       ;-------------------------------------------------------
0161 735C C120  34         mov   @cmdb.dialog,tmp0
     735E A71C     
0162 7360 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     7362 0068     
0163 7364 1309  14         jeq   pane.colorscheme.cmdbpane
0164                                                   ; Yes, skip marked lines
0165               
0166 7366 C120  34         mov   @parm2,tmp0
     7368 A008     
0167 736A 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     736C FFFF     
0168 736E 1304  14         jeq   pane.colorscheme.cmdbpane
0169               
0170 7370 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     7372 A312     
0171               
0172 7374 06A0  32         bl    @fb.colorlines        ; Colorize lines
     7376 7804     
0173                                                   ; \ i  @parm1       = Force refresh if >ffff
0174                                                   ; / i  @fb.colorize = Colorize if >ffff
0175                       ;-------------------------------------------------------
0176                       ; Dump colors for CMDB header line (TAT)
0177                       ;-------------------------------------------------------
0178               pane.colorscheme.cmdbpane:
0179 7378 C120  34         mov   @cmdb.visible,tmp0
     737A A702     
0180 737C 1338  14         jeq   pane.colorscheme.errpane
0181                                                   ; Skip if CMDB pane is hidden
0182               
0183 737E C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7380 A70E     
0184 7382 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     7384 A220     
0185 7386 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     7388 0040     
0186 738A 06A0  32         bl    @xfilv                ; Fill colors
     738C 2294     
0187                                                   ; i \  tmp0 = start address
0188                                                   ; i |  tmp1 = byte to fill
0189                                                   ; i /  tmp2 = number of bytes to fill
0190                       ;-------------------------------------------------------
0191                       ; Dump colors for CMDB Stevie logo (TAT)
0192                       ;-------------------------------------------------------
0193 738E C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7390 A70E     
0194 7392 0224  22         ai    tmp0,63               ; Add offset for logo
     7394 003F     
0195 7396 C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     7398 A220     
0196 739A D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     739C A221     
0197                                                   ; Copy same value into MSB
0198 739E 0945  24         srl   tmp1,4                ;
0199 73A0 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     73A2 00FF     
0200               
0201 73A4 0206  20         li    tmp2,17               ; Number of bytes to fill
     73A6 0011     
0202 73A8 06A0  32         bl    @xfilv                ; Fill colors
     73AA 2294     
0203                                                   ; i \  tmp0 = start address
0204                                                   ; i |  tmp1 = byte to fill
0205                                                   ; i /  tmp2 = number of bytes to fill
0206                       ;-------------------------------------------------------
0207                       ; Dump colors for CMDB pane content (TAT)
0208                       ;-------------------------------------------------------
0209 73AC C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73AE A70E     
0210 73B0 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     73B2 0050     
0211                                                   ;
0212 73B4 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0213 73B6 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     73B8 00A0     
0214 73BA 06A0  32         bl    @xfilv                ; Fill colors
     73BC 2294     
0215                                                   ; i \  tmp0 = start address
0216                                                   ; i |  tmp1 = byte to fill
0217                                                   ; i /  tmp2 = number of bytes to fill
0218               
0219 73BE C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73C0 A70E     
0220 73C2 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     73C4 00F0     
0221                                                   ;
0222 73C6 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     73C8 A220     
0223 73CA 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     73CC 0050     
0224 73CE 06A0  32         bl    @xfilv                ; Fill colors
     73D0 2294     
0225                                                   ; i \  tmp0 = start address
0226                                                   ; i |  tmp1 = byte to fill
0227                                                   ; i /  tmp2 = number of bytes to fill
0228               
0229 73D2 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     73D4 A70E     
0230 73D6 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     73D8 0140     
0231                                                   ;
0232 73DA C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0233 73DC 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     73DE 00A0     
0234 73E0 06A0  32         bl    @xfilv                ; Fill colors
     73E2 2294     
0235                                                   ; i \  tmp0 = start address
0236                                                   ; i |  tmp1 = byte to fill
0237                                                   ; i /  tmp2 = number of bytes to fill
0238                       ;-------------------------------------------------------
0239                       ; Exit early if only CMDB needed to be colorized
0240                       ;-------------------------------------------------------
0241 73E4 C120  34         mov   @parm3,tmp0
     73E6 A00A     
0242 73E8 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     73EA FFFF     
0243 73EC 133A  14         jeq   pane.colorscheme.cursorcolor.cmdb
0244                                                   ; Yes, shortcut to CMDB cursor color
0245                       ;-------------------------------------------------------
0246                       ; Dump colors for error pane (TAT)
0247                       ;-------------------------------------------------------
0248               pane.colorscheme.errpane:
0249 73EE C120  34         mov   @tv.error.visible,tmp0
     73F0 A22A     
0250 73F2 1306  14         jeq   pane.colorscheme.statline
0251                                                   ; Skip if error pane is hidden
0252               
0253 73F4 0205  20         li    tmp1,>00f6            ; White on dark red
     73F6 00F6     
0254 73F8 C805  38         mov   tmp1,@parm1           ; Pass color combination
     73FA A006     
0255               
0256 73FC 06A0  32         bl    @pane.errline.drawcolor
     73FE 78E0     
0257                                                   ; Draw color on rows in error pane
0258                                                   ; \ i  @tv.error.rows = Number of rows
0259                                                   ; / i  @parm1         = Color combination
0260                       ;-------------------------------------------------------
0261                       ; Dump colors for top line and bottom line (TAT)
0262                       ;-------------------------------------------------------
0263               pane.colorscheme.statline:
0264 7400 C160  34         mov   @tv.color,tmp1
     7402 A218     
0265 7404 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     7406 00FF     
0266 7408 C805  38         mov   tmp1,@parm1           ; Set color combination
     740A A006     
0267               
0268               
0269 740C 04E0  34         clr   @parm2                ; Top row on screen
     740E A008     
0270 7410 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     7412 7990     
0271                                                   ; \ i  @parm1 = Color combination
0272                                                   ; / i  @parm2 = Row on physical screen
0273               
0274 7414 0205  20         li    tmp1,pane.botrow
     7416 001D     
0275 7418 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     741A A008     
0276 741C 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     741E 7990     
0277                                                   ; \ i  @parm1 = Color combination
0278                                                   ; / i  @parm2 = Row on physical screen
0279                       ;-------------------------------------------------------
0280                       ; Dump color for hearts in TI Basic dialog (TAT)
0281                       ;-------------------------------------------------------
0282 7420 C160  34         mov   @cmdb.dialog,tmp1
     7422 A71C     
0283 7424 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     7426 006B     
0284 7428 1606  14         jne   pane.colorscheme.ruler
0285               
0286 742A 0204  20         li    tmp0,11               ; 1st Heart after string "Session: 1"
     742C 000B     
0287 742E C804  38         mov   tmp0,@parm1           ; Set parameter
     7430 A006     
0288               
0289 7432 06A0  32         bl    @dialog.hearts.tat    ; Dump colors for hearts
     7434 77A2     
0290                                                   ; \ i  @parm1 = Start column (pos 1st heart)
0291                                                   ; /
0292                       ;-------------------------------------------------------
0293                       ; Dump colors for ruler if visible (TAT)
0294                       ;-------------------------------------------------------
0295               pane.colorscheme.ruler:
0296 7436 C160  34         mov   @cmdb.dialog,tmp1
     7438 A71C     
0297 743A 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     743C 0068     
0298 743E 130A  14         jeq   pane.colorscheme.cursorcolor
0299                                                   ; Yes, skip ruler
0300               
0301 7440 C160  34         mov   @tv.ruler.visible,tmp1
     7442 A210     
0302 7444 1307  14         jeq   pane.colorscheme.cursorcolor
0303               
0304 7446 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     7448 77FA     
0305 744A 06A0  32         bl    @cpym2v
     744C 24E6     
0306 744E 1850                   data vdp.fb.toprow.tat
0307 7450 A370                   data fb.ruler.tat
0308 7452 0050                   data 80               ; Show ruler colors
0309                       ;-------------------------------------------------------
0310                       ; Dump cursor FG color to sprite table (SAT)
0311                       ;-------------------------------------------------------
0312               pane.colorscheme.cursorcolor:
0313 7454 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     7456 A216     
0314               
0315 7458 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     745A A224     
0316 745C 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     745E 0000     
0317 7460 1304  14         jeq   pane.colorscheme.cursorcolor.fb
0318                                                   ; Yes, set cursor color
0319               
0320               pane.colorscheme.cursorcolor.cmdb:
0321 7462 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     7464 00F0     
0322 7466 0A48  24         sla   tmp4,4                ; Move to MSB
0323 7468 1003  14         jmp   !
0324               
0325               pane.colorscheme.cursorcolor.fb:
0326 746A 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     746C 000F     
0327 746E 0A88  32         sla   tmp4,8                ; Move to MSB
0328               
0329 7470 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     7472 A059     
0330 7474 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     7476 A215     
0331                       ;-------------------------------------------------------
0332                       ; Exit
0333                       ;-------------------------------------------------------
0334               pane.colorscheme.load.exit:
0335 7478 06A0  32         bl    @scron                ; Turn screen on
     747A 26EE     
0336 747C C839  50         mov   *stack+,@parm3        ; Pop @parm3
     747E A00A     
0337 7480 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7482 A008     
0338 7484 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7486 A006     
0339 7488 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0340 748A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0341 748C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0342 748E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0343 7490 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0344 7492 C2F9  30         mov   *stack+,r11           ; Pop R11
0345 7494 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0143                       copy  "pane.colorscheme.status.asm" ; Set colors on status lines
     **** ****     > pane.colorscheme.status.asm
0001               * FILE......: pane.colorscheme.status.asm
0002               * Purpose...: Set color combination for status lines
0003               
0004               ***************************************************************
0005               * pane.colorscheme.statlines
0006               * Set color combination for status lines
0007               ***************************************************************
0008               * bl @pane.colorscheme.statlines
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Color combination to set
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.colorscheme.statlines:
0020 7496 0649  14         dect  stack
0021 7498 C64B  30         mov   r11,*stack            ; Save return address
0022 749A 0649  14         dect  stack
0023 749C C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Bottom line
0026                       ;------------------------------------------------------
0027 749E 0204  20         li    tmp0,pane.botrow
     74A0 001D     
0028 74A2 C804  38         mov   tmp0,@parm2           ; Last row on screen
     74A4 A008     
0029 74A6 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     74A8 7990     
0030                                                   ; \ i  @parm1 = Color combination
0031                                                   ; / i  @parm2 = Row on physical screen
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               pane.colorscheme.statlines.exit:
0036 74AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0037 74AC C2F9  30         mov   *stack+,r11           ; Pop R11
0038 74AE 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0144                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 74B0 0649  14         dect  stack
0021 74B2 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 74B4 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     74B6 228E     
0026 74B8 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     74BA 0000     
     74BC 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 74BE 06A0  32         bl    @clslot
     74C0 2F9A     
0031 74C2 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 74C4 06A0  32         bl    @clslot
     74C6 2F9A     
0034 74C8 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 74CA C2F9  30         mov   *stack+,r11           ; Pop R11
0040 74CC 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 74CE 0649  14         dect  stack
0061 74D0 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 74D2 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     74D4 228E     
0066 74D6 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     74D8 0000     
     74DA 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 74DC 06A0  32         bl    @mkslot
     74DE 2F7C     
0073 74E0 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     74E2 385A     
0074 74E4 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     74E6 38FC     
0075 74E8 FFFF                   data eol
0076               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 74EA C2F9  30         mov   *stack+,r11           ; Pop R11
0090 74EC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0145                       ;-----------------------------------------------------------------------
0146                       ; Screen panes
0147                       ;-----------------------------------------------------------------------
0148                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 74EE 0649  14         dect  stack
0025 74F0 C64B  30         mov   r11,*stack            ; Save return address
0026 74F2 0649  14         dect  stack
0027 74F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 74F6 0649  14         dect  stack
0029 74F8 C660  42         mov   @wyx,*stack           ; Push cursor position
     74FA 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 74FC 20A0  32         coc   @wbit10,config
     74FE 200C     
0035 7500 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 7502 06A0  32         bl    @putat
     7504 2442     
0040 7506 1D4E                   byte pane.botrow,78
0041 7508 3CBC                   data txt.ws4
0042 750A 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 750C 06A0  32         bl    @putat
     750E 2442     
0048 7510 1D4E                   byte pane.botrow,78
0049 7512 3CAE                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 7514 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     7516 A702     
0055 7518 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 751A C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     751C A71A     
0061 751E 1345  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 7520 0284  22         ci    tmp0,tv.1timeonly
     7522 00FE     
0066 7524 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 7526 0649  14         dect  stack
0073 7528 C660  46         mov   @parm1,*stack         ; Push @parm1
     752A A006     
0074 752C 0649  14         dect  stack
0075 752E C660  46         mov   @parm2,*stack         ; Push @parm2
     7530 A008     
0076 7532 0649  14         dect  stack
0077 7534 C660  46         mov   @parm3,*stack         ; Push @parm3
     7536 A00A     
0078               
0079 7538 0720  34         seto  @parm1                ; Do not turn screen off
     753A A006     
0080 753C 0720  34         seto  @parm2                ; Skip colorzing marked lines
     753E A008     
0081 7540 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7542 A00A     
0082               
0083 7544 06A0  32         bl    @pane.colorscheme.load
     7546 727A     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 7548 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     754A A00A     
0092 754C C839  50         mov   *stack+,@parm2        ; Pop @parm2
     754E A008     
0093 7550 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7552 A006     
0094               
0095 7554 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7556 A71A     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 7558 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     755A 7766     
0101 755C 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     755E A71A     
0102 7560 1024  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7562 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7564 A318     
0107 7566 1310  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109                       ;------------------------------------------------------
0110                       ; Dump frame buffer to VDP
0111                       ;------------------------------------------------------
0112               pane.vdpdump.dump:
0113 7568 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     756A 31C6     
0114                                                   ; \ i  @tv.ruler.visible = Ruler visible
0115                                                   ; | i  @edb.special.file = Special file flag
0116                                                   ; / i  @tv.error.visible = Error visible
0117               
0118 756C C820  54         mov   @fb.scrrows,@parm1    ; Number of rows to dump to vdp
     756E A31C     
     7570 A006     
0119               
0120 7572 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     7574 780E     
0121                                                   ; \ i  @parm1 = number of lines to dump
0122                                                   ; /
0123                       ;------------------------------------------------------
0124                       ; Color the lines in the framebuffer (TAT)
0125                       ;------------------------------------------------------
0126 7576 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7578 A312     
0127 757A 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0128               
0129                       ; Colorize marked block if set (M1/M2)
0130               
0131 757C 06A0  32         bl    @fb.colorlines        ; Colorize lines
     757E 7804     
0132                                                   ; \ i  @parm1       = Force refresh if >ffff
0133                                                   ; / i  @fb.colorize = Colorize if >ffff
0134                       ;-------------------------------------------------------
0135                       ; Finished with frame buffer
0136                       ;-------------------------------------------------------
0137               pane.vdpdump.dumped:
0138 7580 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     7582 A318     
0139 7584 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     7586 A31A     
0140                       ;-------------------------------------------------------
0141                       ; Refresh top and bottom line
0142                       ;-------------------------------------------------------
0143               pane.vdpdump.statlines:
0144 7588 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     758A A31A     
0145 758C 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0146               
0147 758E 06A0  32         bl    @pane.topline         ; Draw top line
     7590 78B8     
0148 7592 06A0  32         bl    @pane.botline         ; Draw bottom line
     7594 78C2     
0149 7596 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     7598 A31A     
0150                       ;------------------------------------------------------
0151                       ; Show ruler with tab positions
0152                       ;------------------------------------------------------
0153 759A C120  34         mov   @tv.ruler.visible,tmp0
     759C A210     
0154                                                   ; Should ruler be visible?
0155 759E 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0156               
0157 75A0 06A0  32         bl    @cpym2v
     75A2 24E6     
0158 75A4 0050                   data vdp.fb.toprow.sit
0159 75A6 A320                   data fb.ruler.sit
0160 75A8 0050                   data 80               ; Show ruler
0161                       ;------------------------------------------------------
0162                       ; Exit task
0163                       ;------------------------------------------------------
0164               pane.vdpdump.exit:
0165 75AA C839  42         mov   *stack+,@wyx          ; Pop cursor position
     75AC 832A     
0166 75AE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0167 75B0 C2F9  30         mov   *stack+,r11           ; Pop r11
0168 75B2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0149                       ;-----------------------------------------------------------------------
0150                       ; Stubs
0151                       ;-----------------------------------------------------------------------
0152                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 75B4 0649  14         dect  stack
0010 75B6 C64B  30         mov   r11,*stack            ; Save return address
0011 75B8 0649  14         dect  stack
0012 75BA C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 75BC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     75BE 307A     
0017 75C0 6004                   data bank2.rom        ; | i  p0 = bank address
0018 75C2 7F40                   data vec.1            ; | i  p1 = Vector with target address
0019 75C4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 75C6 C120  34         mov   @outparm1,tmp0
     75C8 A018     
0024 75CA 1304  14         jeq   fm.loadfile.exit
0025               
0026 75CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 75CE C2F9  30         mov   *stack+,r11           ; Pop r11
0028 75D0 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     75D2 76AE     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 75D4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 75D6 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 75D8 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 75DA 0649  14         dect  stack
0044 75DC C64B  30         mov   r11,*stack            ; Save return address
0045 75DE 0649  14         dect  stack
0046 75E0 C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 75E2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     75E4 307A     
0051 75E6 6004                   data bank2.rom        ; | i  p0 = bank address
0052 75E8 7F42                   data vec.2            ; | i  p1 = Vector with target address
0053 75EA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 75EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 75EE C2F9  30         mov   *stack+,r11           ; Pop r11
0060 75F0 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               ***************************************************************
0064               * Stub for "fm.savefile"
0065               * bank2 vec.4
0066               ********|*****|*********************|**************************
0067               fm.savefile:
0068 75F2 0649  14         dect  stack
0069 75F4 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 75F6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     75F8 307A     
0074 75FA 6004                   data bank2.rom        ; | i  p0 = bank address
0075 75FC 7F46                   data vec.4            ; | i  p1 = Vector with target address
0076 75FE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 7600 C2F9  30         mov   *stack+,r11           ; Pop r11
0081 7602 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.newfile"
0086               * bank2 vec.5
0087               ********|*****|*********************|**************************
0088               fm.newfile:
0089 7604 0649  14         dect  stack
0090 7606 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 7608 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     760A 307A     
0095 760C 6004                   data bank2.rom        ; | i  p0 = bank address
0096 760E 7F48                   data vec.5            ; | i  p1 = Vector with target address
0097 7610 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 7612 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 7614 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.directory"
0107               * bank2 vec.6
0108               ********|*****|*********************|**************************
0109               fm.directory:
0110 7616 0649  14         dect  stack
0111 7618 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 761A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     761C 307A     
0116 761E 6004                   data bank2.rom        ; | i  p0 = bank address
0117 7620 7F4A                   data vec.6            ; | i  p1 = Vector with target address
0118 7622 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 7624 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 7626 045B  20         b     *r11                  ; Return to caller
0124               
0125               ***************************************************************
0126               * Stub for "fm.browse.fname.prev"
0127               * bank2 vec.10
0128               ********|*****|*********************|**************************
0129               fm.browse.fname.prev:
0130 7628 0649  14         dect  stack
0131 762A C64B  30         mov   r11,*stack            ; Save return address
0132                       ;------------------------------------------------------
0133                       ; Call function in bank 2
0134                       ;------------------------------------------------------
0135 762C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     762E 307A     
0136 7630 6004                   data bank2.rom        ; | i  p0 = bank address
0137 7632 7F52                   data vec.10           ; | i  p1 = Vector with target address
0138 7634 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0139                       ;------------------------------------------------------
0140                       ; Exit
0141                       ;------------------------------------------------------
0142 7636 C2F9  30         mov   *stack+,r11           ; Pop r11
0143 7638 045B  20         b     *r11                  ; Return to caller
0144               
0145               ***************************************************************
0146               * Stub for "fm.browse.fname.next"
0147               * bank2 vec.11
0148               ********|*****|*********************|**************************
0149               fm.browse.fname.next:
0150 763A 0649  14         dect  stack
0151 763C C64B  30         mov   r11,*stack            ; Save return address
0152                       ;------------------------------------------------------
0153                       ; Call function in bank 2
0154                       ;------------------------------------------------------
0155 763E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7640 307A     
0156 7642 6004                   data bank2.rom        ; | i  p0 = bank address
0157 7644 7F54                   data vec.11           ; | i  p1 = Vector with target address
0158 7646 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0159                       ;------------------------------------------------------
0160                       ; Exit
0161                       ;------------------------------------------------------
0162 7648 C2F9  30         mov   *stack+,r11           ; Pop r11
0163 764A 045B  20         b     *r11                  ; Return to caller
0164               
0165               ***************************************************************
0166               * Stub for "fm.browse.fname.set"
0167               * bank2 vec.12
0168               ********|*****|*********************|**************************
0169               fm.browse.fname.set:
0170 764C 0649  14         dect  stack
0171 764E C64B  30         mov   r11,*stack            ; Save return address
0172                       ;------------------------------------------------------
0173                       ; Call function in bank 2
0174                       ;------------------------------------------------------
0175 7650 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7652 307A     
0176 7654 6004                   data bank2.rom        ; | i  p0 = bank address
0177 7656 7F56                   data vec.12           ; | i  p1 = Vector with target address
0178 7658 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0179                       ;------------------------------------------------------
0180                       ; Exit
0181                       ;------------------------------------------------------
0182 765A C2F9  30         mov   *stack+,r11           ; Pop r11
0183 765C 045B  20         b     *r11                  ; Return to caller
0184               
0185               
0186               ***************************************************************
0187               * Stub for dialog "Help"
0188               * bank3 vec.1
0189               ********|*****|*********************|**************************
0190               dialog.help.next:
0191 765E 8820  50         c     @w$0008,@cmdb.dialog.var
     7660 2008     
     7662 A71E     
0192 7664 1304  14         jeq   !
0193 7666 A820  54         a     @w$0008,@cmdb.dialog.var
     7668 2008     
     766A A71E     
0194 766C 1002  14         jmp   dialog.help
0195 766E 04E0  34 !       clr   @cmdb.dialog.var
     7670 A71E     
0196               dialog.help:
0197 7672 C820  54         mov   @dialog.help.vector,@trmpvector
     7674 767A     
     7676 A034     
0198 7678 105E  14         jmp   _trampoline.bank3     ; Show dialog
0199               dialog.help.vector:
0200 767A 7F40             data  vec.1
0201               
0202               
0203               ***************************************************************
0204               * Stub for dialog "Load file"
0205               * bank3 vec.2
0206               ********|*****|*********************|**************************
0207               dialog.load:
0208 767C C820  54         mov   @dialog.load.vector,@trmpvector
     767E 7684     
     7680 A034     
0209 7682 1059  14         jmp   _trampoline.bank3     ; Show dialog
0210               dialog.load.vector:
0211 7684 7F42             data  vec.2
0212               
0213               
0214               ***************************************************************
0215               * Stub for dialog "Save file"
0216               * bank3 vec.3
0217               ********|*****|*********************|**************************
0218               dialog.save:
0219 7686 C820  54         mov   @dialog.save.vector,@trmpvector
     7688 768E     
     768A A034     
0220 768C 1054  14         jmp   _trampoline.bank3     ; Show dialog
0221               dialog.save.vector:
0222 768E 7F44             data  vec.3
0223               
0224               
0225               ***************************************************************
0226               * Stub for dialog "Insert file at line"
0227               * bank3 vec.4
0228               ********|*****|*********************|**************************
0229               dialog.insert:
0230 7690 C820  54         mov   @dialog.insert.vector,@trmpvector
     7692 7698     
     7694 A034     
0231 7696 104F  14         jmp   _trampoline.bank3     ; Show dialog
0232               dialog.insert.vector:
0233 7698 7F46             data  vec.4
0234               
0235               
0236               ***************************************************************
0237               * Stub for dialog "Print file"
0238               * bank3 vec.5
0239               ********|*****|*********************|**************************
0240               dialog.print:
0241 769A C820  54         mov   @dialog.print.vector,@trmpvector
     769C 76A2     
     769E A034     
0242 76A0 104A  14         jmp   _trampoline.bank3    ; Show dialog
0243               dialog.print.vector:
0244 76A2 7F48             data  vec.5
0245               
0246               
0247               ***************************************************************
0248               * Stub for dialog "File"
0249               * bank3 vec.6
0250               ********|*****|*********************|**************************
0251               dialog.file:
0252 76A4 C820  54         mov   @dialog.file.vector,@trmpvector
     76A6 76AC     
     76A8 A034     
0253 76AA 1045  14         jmp   _trampoline.bank3     ; Show dialog
0254               dialog.file.vector:
0255 76AC 7F4A             data  vec.6
0256               
0257               
0258               ***************************************************************
0259               * Stub for dialog "Unsaved Changes"
0260               * bank3 vec.7
0261               ********|*****|*********************|**************************
0262               dialog.unsaved:
0263 76AE 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     76B0 A728     
0264 76B2 C820  54         mov   @dialog.unsaved.vector,@trmpvector
     76B4 76BA     
     76B6 A034     
0265 76B8 103E  14         jmp   _trampoline.bank3     ; Show dialog
0266               dialog.unsaved.vector:
0267 76BA 7F4C             data  vec.7
0268               
0269               
0270               ***************************************************************
0271               * Stub for dialog "Copy clipboard to line ..."
0272               * bank3 vec.8
0273               ********|*****|*********************|**************************
0274               dialog.clipboard:
0275 76BC C820  54         mov   @dialog.clipboard.vector,@trmpvector
     76BE 76C4     
     76C0 A034     
0276 76C2 1039  14         jmp   _trampoline.bank3     ; Show dialog
0277               dialog.clipboard.vector:
0278 76C4 7F4E             data  vec.8
0279               
0280               
0281               ***************************************************************
0282               * Stub for dialog "Configure clipboard device"
0283               * bank3 vec.9
0284               ********|*****|*********************|**************************
0285               dialog.clipdev:
0286 76C6 C820  54         mov   @dialog.clipdev.vector,@trmpvector
     76C8 76CE     
     76CA A034     
0287 76CC 1034  14         jmp   _trampoline.bank3     ; Show dialog
0288               dialog.clipdev.vector:
0289 76CE 7F50             data  vec.9
0290               
0291               
0292               ***************************************************************
0293               * Stub for dialog "Configure"
0294               * bank3 vec.10
0295               ********|*****|*********************|**************************
0296               dialog.config:
0297 76D0 C820  54         mov   @dialog.config.vector,@trmpvector
     76D2 76D8     
     76D4 A034     
0298 76D6 102F  14         jmp   _trampoline.bank3     ; Show dialog
0299               dialog.config.vector:
0300 76D8 7F52             data  vec.10
0301               
0302               
0303               ***************************************************************
0304               * Stub for dialog "Append file"
0305               * bank3 vec.11
0306               ********|*****|*********************|**************************
0307               dialog.append:
0308 76DA C820  54         mov   @dialog.append.vector,@trmpvector
     76DC 76E2     
     76DE A034     
0309 76E0 102A  14         jmp   _trampoline.bank3     ; Show dialog
0310               dialog.append.vector:
0311 76E2 7F54             data  vec.11
0312               
0313               
0314               ***************************************************************
0315               * Stub for dialog "Cartridge"
0316               * bank3 vec.12
0317               ********|*****|*********************|**************************
0318               dialog.cartridge:
0319 76E4 C820  54         mov   @dialog.cartridge.vector,@trmpvector
     76E6 76EC     
     76E8 A034     
0320 76EA 1025  14         jmp   _trampoline.bank3     ; Show dialog
0321               dialog.cartridge.vector:
0322 76EC 7F56             data  vec.12
0323               
0324               
0325               ***************************************************************
0326               * Stub for dialog "Basic"
0327               * bank3 vec.13
0328               ********|*****|*********************|**************************
0329               dialog.basic:
0330 76EE C820  54         mov   @dialog.basic.vector,@trmpvector
     76F0 76F6     
     76F2 A034     
0331 76F4 1020  14         jmp   _trampoline.bank3     ; Show dialog
0332               dialog.basic.vector:
0333 76F6 7F58             data  vec.13
0334               
0335               
0336               ***************************************************************
0337               * Stub for dialog "Shortcuts"
0338               * bank3 vec.14
0339               ********|*****|*********************|**************************
0340               dialog.shortcuts:
0341 76F8 C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     76FA 7700     
     76FC A034     
0342 76FE 101B  14         jmp   _trampoline.bank3     ; Show dialog
0343               dialog.shortcuts.vector:
0344 7700 7F5A             data  vec.14
0345               
0346               
0347               ***************************************************************
0348               * Stub for dialog "Dir"
0349               * bank3 vec.15
0350               ********|*****|*********************|**************************
0351               dialog.cat:
0352 7702 C820  54         mov   @dialog.cat.vector,@trmpvector
     7704 770A     
     7706 A034     
0353 7708 1016  14         jmp   _trampoline.bank3     ; Show dialog
0354               dialog.cat.vector:
0355 770A 7F5C             data  vec.15
0356               
0357               ***************************************************************
0358               * Stub for dialog "Go to line"
0359               * bank3 vec.16
0360               ********|*****|*********************|**************************
0361               dialog.goto:
0362 770C C820  54         mov   @dialog.goto.vector,@trmpvector
     770E 7714     
     7710 A034     
0363 7712 1011  14         jmp   _trampoline.bank3     ; Show dialog
0364               dialog.goto.vector:
0365 7714 7F5E             data  vec.16
0366               
0367               
0368               ***************************************************************
0369               * Stub for dialog "Configure font"
0370               * bank3 vec.17
0371               ********|*****|*********************|**************************
0372               dialog.font:
0373 7716 C820  54         mov   @dialog.font.vector,@trmpvector
     7718 771E     
     771A A034     
0374 771C 100C  14         jmp   _trampoline.bank3     ; Show dialog
0375               dialog.font.vector:
0376 771E 7F60             data  vec.17
0377               
0378               
0379               ***************************************************************
0380               * Stub for dialog "Main Menu"
0381               * bank3 vec.30
0382               ********|*****|*********************|**************************
0383               dialog.menu:
0384                       ;------------------------------------------------------
0385                       ; Check if block mode is active
0386                       ;------------------------------------------------------
0387 7720 C120  34         mov   @edb.block.m2,tmp0    ; \
     7722 A510     
0388 7724 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0389                                                   ; /
0390 7726 1302  14         jeq   !                     ; Block mode inactive, show dialog
0391                       ;------------------------------------------------------
0392                       ; Special treatment for block mode
0393                       ;------------------------------------------------------
0394 7728 0460  28         b     @edkey.action.block.reset
     772A 685E     
0395                                                   ; Reset block mode
0396                       ;------------------------------------------------------
0397                       ; Show dialog
0398                       ;------------------------------------------------------
0399 772C C820  54 !       mov   @dialog.menu.vector,@trmpvector
     772E 7734     
     7730 A034     
0400 7732 1001  14         jmp   _trampoline.bank3     ; Show dialog
0401               dialog.menu.vector:
0402 7734 7F7A             data  vec.30
0403               
0404               
0405               
0406               ***************************************************************
0407               * Trampoline 1 (bank 3, dialog)
0408               ********|*****|*********************|**************************
0409               _trampoline.bank3:
0410 7736 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     7738 74B0     
0411                       ;------------------------------------------------------
0412                       ; Call routine in specified bank
0413                       ;------------------------------------------------------
0414 773A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     773C 307A     
0415 773E 6006                   data bank3.rom        ; | i  p0 = bank address
0416 7740 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0417                                                   ; |         (deref @trmpvector)
0418 7742 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0419                       ;------------------------------------------------------
0420                       ; Exit
0421                       ;------------------------------------------------------
0422 7744 0460  28         b     @edkey.action.cmdb.show
     7746 6A22     
0423                                                   ; Show dialog in CMDB pane
0424               
0425               
0426               ***************************************************************
0427               * Stub for "pane.show_hintx"
0428               * bank3 vec.19
0429               ********|*****|*********************|**************************
0430               pane.show_hintx:
0431 7748 C820  54         mov   @pane.show_hintx.vector,@trmpvector
     774A 7750     
     774C A034     
0432 774E 104C  14         jmp   _trampoline.bank3.ret ; Longjump
0433               pane.show_hintx.vector:
0434 7750 7F64             data  vec.19
0435               
0436               
0437               ***************************************************************
0438               * Stub for "pane.cmdb.show"
0439               * bank3 vec.20
0440               ********|*****|*********************|**************************
0441               pane.cmdb.show:
0442 7752 C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     7754 775A     
     7756 A034     
0443 7758 1047  14         jmp   _trampoline.bank3.ret ; Longjump
0444               pane.cmdb.show.vector:
0445 775A 7F66             data  vec.20
0446               
0447               
0448               ***************************************************************
0449               * Stub for "pane.cmdb.hide"
0450               * bank3 vec.21
0451               ********|*****|*********************|**************************
0452               pane.cmdb.hide:
0453 775C C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     775E 7764     
     7760 A034     
0454 7762 1042  14         jmp   _trampoline.bank3.ret ; Longjump
0455               pane.cmdb.hide.vector:
0456 7764 7F68             data  vec.21
0457               
0458               
0459               ***************************************************************
0460               * Stub for "pane.cmdb.draw"
0461               * bank3 vec.22
0462               ********|*****|*********************|**************************
0463               pane.cmdb.draw:
0464 7766 C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7768 776E     
     776A A034     
0465 776C 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0466               pane.cmdb.draw.vector:
0467 776E 7F6A             data  vec.22
0468               
0469               
0470               ***************************************************************
0471               * Stub for "cmdb.refresh"
0472               * bank3 vec.24
0473               ********|*****|*********************|**************************
0474               cmdb.refresh:
0475 7770 C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7772 7778     
     7774 A034     
0476 7776 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0477               cmdb.refresh.vector:
0478 7778 7F6E             data  vec.24
0479               
0480               
0481               ***************************************************************
0482               * Stub for "cmdb.cmd.clear"
0483               * bank3 vec.25
0484               ********|*****|*********************|**************************
0485               cmdb.cmd.clear:
0486 777A C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     777C 7782     
     777E A034     
0487 7780 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0488               cmdb.cmd.clear.vector:
0489 7782 7F70             data  vec.25
0490               
0491               
0492               ***************************************************************
0493               * Stub for "cmdb.cmdb.getlength"
0494               * bank3 vec.26
0495               ********|*****|*********************|**************************
0496               cmdb.cmd.getlength:
0497 7784 C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7786 778C     
     7788 A034     
0498 778A 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0499               cmdb.cmd.getlength.vector:
0500 778C 7F72             data  vec.26
0501               
0502               
0503               ***************************************************************
0504               * Stub for "cmdb.cmdb.preset"
0505               * bank3 vec.27
0506               ********|*****|*********************|**************************
0507               cmdb.cmd.preset:
0508 778E C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7790 7796     
     7792 A034     
0509 7794 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0510               cmdb.cmd.preset.vector:
0511 7796 7F74             data  vec.27
0512               
0513               
0514               ***************************************************************
0515               * Stub for "cmdb.cmdb.set"
0516               * bank3 vec.28
0517               ********|*****|*********************|**************************
0518               cmdb.cmd.set:
0519 7798 C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     779A 77A0     
     779C A034     
0520 779E 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0521               cmdb.cmd.set.vector:
0522 77A0 7F76             data  vec.28
0523               
0524               
0525               
0526               ***************************************************************
0527               * Stub for "dialog.hearts.tat"
0528               * bank3 vec.29
0529               ********|*****|*********************|**************************
0530               dialog.hearts.tat:
0531 77A2 C820  54         mov   @dialog.hearts.tat.vector,@trmpvector
     77A4 77AA     
     77A6 A034     
0532 77A8 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0533               dialog.hearts.tat.vector:
0534 77AA 7F78             data  vec.29
0535               
0536               
0537               
0538               ***************************************************************
0539               * Stub for "tibasic.am.toggle"
0540               * bank3 vec.31
0541               ********|*****|*********************|**************************
0542               tibasic.am.toggle:
0543 77AC C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     77AE 77B4     
     77B0 A034     
0544 77B2 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0545               tibasic.am.toggle.vector:
0546 77B4 7F7C             data  vec.31
0547               
0548               
0549               ***************************************************************
0550               * Stub for "fm.fastmode"
0551               * bank3 vec.32
0552               ********|*****|*********************|**************************
0553               fm.fastmode:
0554 77B6 C820  54         mov   @fm.fastmode.vector,@trmpvector
     77B8 77BE     
     77BA A034     
0555 77BC 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0556               fm.fastmode.vector:
0557 77BE 7F7E             data  vec.32
0558               
0559               
0560               ***************************************************************
0561               * Stub for "cmdb.cfg.fname"
0562               * bank3 vec.33
0563               ********|*****|*********************|**************************
0564               cmdb.cfg.fname:
0565 77C0 C820  54         mov   @cmdb.cfg.fname.vector,@trmpvector
     77C2 77C8     
     77C4 A034     
0566 77C6 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0567               cmdb.cfg.fname.vector:
0568 77C8 7F80             data  vec.33
0569               
0570               ***************************************************************
0571               * Stub for "fm.lineterm"
0572               * bank3 vec.34
0573               ********|*****|*********************|**************************
0574               fm.lineterm:
0575 77CA C820  54         mov   @fm.lineterm.vector,@trmpvector
     77CC 77D2     
     77CE A034     
0576 77D0 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0577               fm.lineterm.vector:
0578 77D2 7F82             data  vec.34
0579               
0580               
0581               ***************************************************************
0582               * Stub for "dialog"
0583               * bank3 vec.42
0584               ********|*****|*********************|**************************
0585               dialog:
0586 77D4 C820  54         mov   @dialog.vector,@trmpvector
     77D6 77DC     
     77D8 A034     
0587 77DA 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0588               dialog.vector:
0589 77DC 7F92             data  vec.42
0590               
0591               
0592               ***************************************************************
0593               * Stub for "error.display"
0594               * bank3 vec.48
0595               ********|*****|*********************|**************************
0596               error.display:
0597 77DE C820  54         mov   @error.display.vector,@trmpvector
     77E0 77E6     
     77E2 A034     
0598 77E4 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0599               error.display.vector:
0600 77E6 7F9E             data  vec.48
0601               
0602               
0603               
0604               ***************************************************************
0605               * Trampoline bank 3 with return
0606               ********|*****|*********************|**************************
0607               _trampoline.bank3.ret:
0608 77E8 0649  14         dect  stack
0609 77EA C64B  30         mov   r11,*stack            ; Save return address
0610                       ;------------------------------------------------------
0611                       ; Call routine in specified bank
0612                       ;------------------------------------------------------
0613 77EC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     77EE 307A     
0614 77F0 6006                   data bank3.rom        ; | i  p0 = bank address
0615 77F2 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0616                                                   ; |         (deref @trmpvector)
0617 77F4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0618                       ;------------------------------------------------------
0619                       ; Exit
0620                       ;------------------------------------------------------
0621 77F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0622 77F8 045B  20         b     *r11                  ; Return to caller
0623               
0624               
0625               ***************************************************************
0626               * Stub for "fb.ruler.init"
0627               * bank4 vec.2
0628               ********|*****|*********************|**************************
0629               fb.ruler.init:
0630 77FA C820  54         mov   @fb.ruler.init.vector,@trmpvector
     77FC 7802     
     77FE A034     
0631 7800 107E  14         jmp   _trampoline.bank4.ret ; Longjump
0632               fb.ruler.init.vector:
0633 7802 7F42             data  vec.2
0634               
0635               
0636               ***************************************************************
0637               * Stub for "fb.colorlines"
0638               * bank4 vec.3
0639               ********|*****|*********************|**************************
0640               fb.colorlines:
0641 7804 C820  54         mov   @fb.colorlines.vector,@trmpvector
     7806 780C     
     7808 A034     
0642 780A 1079  14         jmp   _trampoline.bank4.ret ; Longjump
0643               fb.colorlines.vector:
0644 780C 7F44             data  vec.3
0645               
0646               
0647               ***************************************************************
0648               * Stub for "fb.vdpdump"
0649               * bank4 vec.4
0650               ********|*****|*********************|**************************
0651               fb.vdpdump:
0652 780E C820  54         mov   @fb.vdpdump.vector,@trmpvector
     7810 7816     
     7812 A034     
0653 7814 1074  14         jmp   _trampoline.bank4.ret ; Longjump
0654               fb.vdpdump.vector:
0655 7816 7F46             data  vec.4
0656               
0657               
0658               ***************************************************************
0659               * Stub for "fb.hscroll"
0660               * bank4 vec.6
0661               ********|*****|*********************|**************************
0662               fb.hscroll:
0663 7818 C820  54         mov   @fb.hscroll.vector,@trmpvector
     781A 7820     
     781C A034     
0664 781E 106F  14         jmp   _trampoline.bank4.ret ; Longjump
0665               fb.hscroll.vector:
0666 7820 7F4A             data  vec.6
0667               
0668               
0669               ***************************************************************
0670               * Stub for "fb.restore"
0671               * bank4 vec.7
0672               ********|*****|*********************|**************************
0673               fb.restore:
0674 7822 C820  54         mov   @fb.restore.vector,@trmpvector
     7824 782A     
     7826 A034     
0675 7828 106A  14         jmp   _trampoline.bank4.ret ; Longjump
0676               fb.restore.vector:
0677 782A 7F4C             data  vec.7
0678               
0679               
0680               ***************************************************************
0681               * Stub for "fb.refresh"
0682               * bank4 vec.8
0683               ********|*****|*********************|**************************
0684               fb.refresh:
0685 782C C820  54         mov   @fb.refresh.vector,@trmpvector
     782E 7834     
     7830 A034     
0686 7832 1065  14         jmp   _trampoline.bank4.ret ; Longjump
0687               fb.refresh.vector:
0688 7834 7F4E             data  vec.8
0689               
0690               
0691               ***************************************************************
0692               * Stub for "fb.get.nonblank"
0693               * bank4 vec.9
0694               ********|*****|*********************|**************************
0695               fb.get.nonblank:
0696 7836 C820  54         mov   @fb.get.nonblank.vector,@trmpvector
     7838 783E     
     783A A034     
0697 783C 1060  14         jmp   _trampoline.bank4.ret ; Longjump
0698               fb.get.nonblank.vector:
0699 783E 7F50             data  vec.9
0700               
0701               
0702               ***************************************************************
0703               * Stub for "fb.tab.prev"
0704               * bank4 vec.10
0705               ********|*****|*********************|**************************
0706               fb.tab.prev:
0707 7840 C820  54         mov   @fb.tab.prev.vector,@trmpvector
     7842 7848     
     7844 A034     
0708 7846 105B  14         jmp   _trampoline.bank4.ret ; Longjump
0709               fb.tab.prev.vector:
0710 7848 7F52             data  vec.10
0711               
0712               
0713               ***************************************************************
0714               * Stub for "fb.tab.next"
0715               * bank4 vec.11
0716               ********|*****|*********************|**************************
0717               fb.tab.next:
0718 784A C820  54         mov   @fb.tab.next.vector,@trmpvector
     784C 7852     
     784E A034     
0719 7850 1056  14         jmp   _trampoline.bank4.ret ; Longjump
0720               fb.tab.next.vector:
0721 7852 7F54             data  vec.11
0722               
0723               
0724               ***************************************************************
0725               * Stub for "fb.cursor.up"
0726               * bank4 vec.12
0727               ********|*****|*********************|**************************
0728               fb.cursor.up:
0729 7854 C820  54         mov   @fb.cursor.up.vector,@trmpvector
     7856 785C     
     7858 A034     
0730 785A 1051  14         jmp   _trampoline.bank4.ret ; Longjump
0731               fb.cursor.up.vector:
0732 785C 7F56             data  vec.12
0733               
0734               
0735               ***************************************************************
0736               * Stub for "fb.cursor.down"
0737               * bank4 vec.13
0738               ********|*****|*********************|**************************
0739               fb.cursor.down:
0740 785E C820  54         mov   @fb.cursor.down.vector,@trmpvector
     7860 7866     
     7862 A034     
0741 7864 104C  14         jmp   _trampoline.bank4.ret ; Longjump
0742               fb.cursor.down.vector:
0743 7866 7F58             data  vec.13
0744               
0745               
0746               ***************************************************************
0747               * Stub for "fb.cursor.home"
0748               * bank4 vec.14
0749               ********|*****|*********************|**************************
0750               fb.cursor.home:
0751 7868 C820  54         mov   @fb.cursor.home.vector,@trmpvector
     786A 7870     
     786C A034     
0752 786E 1047  14         jmp   _trampoline.bank4.ret ; Longjump
0753               fb.cursor.home.vector:
0754 7870 7F5A             data  vec.14
0755               
0756               
0757               ***************************************************************
0758               * Stub for "fb.insert.line"
0759               * bank4 vec.15
0760               ********|*****|*********************|**************************
0761               fb.insert.line:
0762 7872 C820  54         mov   @fb.insert.line.vector,@trmpvector
     7874 787A     
     7876 A034     
0763 7878 1042  14         jmp   _trampoline.bank4.ret ; Longjump
0764               fb.insert.line.vector:
0765 787A 7F5C             data  vec.15
0766               
0767               
0768               ***************************************************************
0769               * Stub for "fb.cursor.top"
0770               * bank4 vec.16
0771               ********|*****|*********************|**************************
0772               fb.cursor.top:
0773 787C C820  54         mov   @fb.cursor.top.vector,@trmpvector
     787E 7884     
     7880 A034     
0774 7882 103D  14         jmp   _trampoline.bank4.ret ; Longjump
0775               fb.cursor.top.vector:
0776 7884 7F5E             data  vec.16
0777               
0778               
0779               ***************************************************************
0780               * Stub for "fb.cursor.topscr"
0781               * bank4 vec.17
0782               ********|*****|*********************|**************************
0783               fb.cursor.topscr:
0784 7886 C820  54         mov   @fb.cursor.topscr.vector,@trmpvector
     7888 788E     
     788A A034     
0785 788C 1038  14         jmp   _trampoline.bank4.ret ; Longjump
0786               fb.cursor.topscr.vector:
0787 788E 7F60             data  vec.17
0788               
0789               
0790               ***************************************************************
0791               * Stub for "fb.cursor.bot"
0792               * bank4 vec.18
0793               ********|*****|*********************|**************************
0794               fb.cursor.bot:
0795 7890 C820  54         mov   @fb.cursor.bot.vector,@trmpvector
     7892 7898     
     7894 A034     
0796 7896 1033  14         jmp   _trampoline.bank4.ret ; Longjump
0797               fb.cursor.bot.vector:
0798 7898 7F62             data  vec.18
0799               
0800               
0801               ***************************************************************
0802               * Stub for "fb.cursor.botscr"
0803               * bank4 vec.19
0804               ********|*****|*********************|**************************
0805               fb.cursor.botscr:
0806 789A C820  54         mov   @fb.cursor.botscr.vector,@trmpvector
     789C 78A2     
     789E A034     
0807 78A0 102E  14         jmp   _trampoline.bank4.ret ; Longjump
0808               fb.cursor.botscr.vector:
0809 78A2 7F64             data  vec.19
0810               
0811               
0812               ***************************************************************
0813               * Stub for "fb.insert.char"
0814               * bank4 vec.20
0815               ********|*****|*********************|**************************
0816               fb.insert.char:
0817 78A4 C820  54         mov   @fb.insert.char.vector,@trmpvector
     78A6 78AC     
     78A8 A034     
0818 78AA 1029  14         jmp   _trampoline.bank4.ret ; Longjump
0819               fb.insert.char.vector:
0820 78AC 7F66             data  vec.20
0821               
0822               
0823               ***************************************************************
0824               * Stub for "fb.replace.char"
0825               * bank4 vec.21
0826               ********|*****|*********************|**************************
0827               fb.replace.char:
0828 78AE C820  54         mov   @fb.replace.char.vector,@trmpvector
     78B0 78B6     
     78B2 A034     
0829 78B4 1024  14         jmp   _trampoline.bank4.ret ; Longjump
0830               fb.replace.char.vector:
0831 78B6 7F68             data  vec.21
0832               
0833               
0834               ***************************************************************
0835               * Stub for "pane.topline"
0836               * bank4 vec.33
0837               ********|*****|*********************|**************************
0838               pane.topline:
0839 78B8 C820  54         mov   @pane.topline.vector,@trmpvector
     78BA 78C0     
     78BC A034     
0840 78BE 101F  14         jmp   _trampoline.bank4.ret ; Longjump
0841               pane.topline.vector:
0842 78C0 7F80             data  vec.33
0843               
0844               
0845               ***************************************************************
0846               * Stub for "pane.botline"
0847               * bank4 vec.34
0848               ********|*****|*********************|**************************
0849               pane.botline:
0850 78C2 C820  54         mov   @pane.botline.vector,@trmpvector
     78C4 78CA     
     78C6 A034     
0851 78C8 101A  14         jmp   _trampoline.bank4.ret ; Longjump
0852               pane.botline.vector:
0853 78CA 7F82             data  vec.34
0854               
0855               
0856               ***************************************************************
0857               * Stub for "pane.errline.show"
0858               * bank4 vec.35
0859               ********|*****|*********************|**************************
0860               pane.errline.show:
0861 78CC C820  54         mov   @pane.errline.show.vector,@trmpvector
     78CE 78D4     
     78D0 A034     
0862 78D2 1015  14         jmp   _trampoline.bank4.ret ; Longjump
0863               pane.errline.show.vector:
0864 78D4 7F84             data  vec.35
0865               
0866               
0867               ***************************************************************
0868               * Stub for "pane.errline.hide"
0869               * bank4 vec.36
0870               ********|*****|*********************|**************************
0871               pane.errline.hide:
0872 78D6 C820  54         mov   @pane.errline.hide.vector,@trmpvector
     78D8 78DE     
     78DA A034     
0873 78DC 1010  14         jmp   _trampoline.bank4.ret ; Longjump
0874               pane.errline.hide.vector:
0875 78DE 7F86             data  vec.36
0876               
0877               
0878               ***************************************************************
0879               * Stub for "pane.errline.drawcolor"
0880               * bank4 vec.37
0881               ********|*****|*********************|**************************
0882               pane.errline.drawcolor:
0883 78E0 C820  54         mov   @pane.errline.drawcolor.vector,@trmpvector
     78E2 78E8     
     78E4 A034     
0884 78E6 100B  14         jmp   _trampoline.bank4.ret ; Longjump
0885               pane.errline.drawcolor.vector:
0886 78E8 7F88             data  vec.37
0887               
0888               
0889               ***************************************************************
0890               * Stub for "pane.filebrowser"
0891               * bank4 vec.50
0892               ********|*****|*********************|**************************
0893               pane.filebrowser:
0894 78EA C820  54         mov   @pane.filebrowser.vector,@trmpvector
     78EC 78F2     
     78EE A034     
0895 78F0 1006  14         jmp   _trampoline.bank4.ret ; Longjump
0896               pane.filebrowser.vector:
0897 78F2 7FA2             data  vec.50
0898               
0899               
0900               ***************************************************************
0901               * Stub for "pane.filebrowser.hilight"
0902               * bank4 vec.51
0903               ********|*****|*********************|**************************
0904               pane.filebrowser.hilight:
0905 78F4 C820  54         mov   @pane.filebrowser.hilight.vector,@trmpvector
     78F6 78FC     
     78F8 A034     
0906 78FA 1001  14         jmp   _trampoline.bank4.ret ; Longjump
0907               pane.filebrowser.hilight.vector:
0908 78FC 7FA4             data  vec.51
0909               
0910               
0911               ***************************************************************
0912               * Trampoline bank 4 with return
0913               ********|*****|*********************|**************************
0914               _trampoline.bank4.ret:
0915 78FE 0649  14         dect  stack
0916 7900 C64B  30         mov   r11,*stack            ; Save return address
0917                       ;------------------------------------------------------
0918                       ; Call routine in specified bank
0919                       ;------------------------------------------------------
0920 7902 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7904 307A     
0921 7906 6008                   data bank4.rom        ; | i  p0 = bank address
0922 7908 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0923                                                   ; |         (deref @trmpvector)
0924 790A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0925                       ;------------------------------------------------------
0926                       ; Exit
0927                       ;------------------------------------------------------
0928 790C C2F9  30         mov   *stack+,r11           ; Pop r11
0929 790E 045B  20         b     *r11                  ; Return to caller
0930               
0931               
0932               
0933               ***************************************************************
0934               * Stub for "edb.clear.sams"
0935               * bank5 vec.1
0936               ********|*****|*********************|**************************
0937               edb.clear.sams:
0938 7910 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7912 7918     
     7914 A034     
0939 7916 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0940               edb.clear.sams.vector:
0941 7918 7F40             data  vec.1
0942               
0943               
0944               ***************************************************************
0945               * Stub for "edb.block.mark"
0946               * bank5 vec.3
0947               ********|*****|*********************|**************************
0948               edb.block.mark:
0949 791A C820  54         mov   @edb.block.mark.vector,@trmpvector
     791C 7922     
     791E A034     
0950 7920 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0951               edb.block.mark.vector:
0952 7922 7F44             data  vec.3
0953               
0954               
0955               ***************************************************************
0956               * Stub for "edb.block.mark.m1"
0957               * bank5 vec.4
0958               ********|*****|*********************|**************************
0959               edb.block.mark.m1:
0960 7924 C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7926 792C     
     7928 A034     
0961 792A 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0962               edb.block.mark.m1.vector:
0963 792C 7F46             data  vec.4
0964               
0965               
0966               ***************************************************************
0967               * Stub for "edb.block.mark.m2"
0968               * bank5 vec.5
0969               ********|*****|*********************|**************************
0970               edb.block.mark.m2:
0971 792E C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7930 7936     
     7932 A034     
0972 7934 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0973               edb.block.mark.m2.vector:
0974 7936 7F48             data  vec.5
0975               
0976               
0977               ***************************************************************
0978               * Stub for "edb.block.clip"
0979               * bank5 vec.6
0980               ********|*****|*********************|**************************
0981               edb.block.clip:
0982 7938 C820  54         mov   @edb.block.clip.vector,@trmpvector
     793A 7940     
     793C A034     
0983 793E 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0984               edb.block.clip.vector:
0985 7940 7F4A             data  vec.6
0986               
0987               
0988               ***************************************************************
0989               * Stub for "edb.block.reset"
0990               * bank5 vec.7
0991               ********|*****|*********************|**************************
0992               edb.block.reset:
0993 7942 C820  54         mov   @edb.block.reset.vector,@trmpvector
     7944 794A     
     7946 A034     
0994 7948 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0995               edb.block.reset.vector:
0996 794A 7F4C             data  vec.7
0997               
0998               
0999               ***************************************************************
1000               * Stub for "edb.block.delete"
1001               * bank5 vec.8
1002               ********|*****|*********************|**************************
1003               edb.block.delete:
1004 794C C820  54         mov   @edb.block.delete.vector,@trmpvector
     794E 7954     
     7950 A034     
1005 7952 100B  14         jmp   _trampoline.bank5.ret ; Longjump
1006               edb.block.delete.vector:
1007 7954 7F4E             data  vec.8
1008               
1009               
1010               ***************************************************************
1011               * Stub for "edb.block.copy"
1012               * bank5 vec.9
1013               ********|*****|*********************|**************************
1014               edb.block.copy:
1015 7956 C820  54         mov   @edb.block.copy.vector,@trmpvector
     7958 795E     
     795A A034     
1016 795C 1006  14         jmp   _trampoline.bank5.ret ; Longjump
1017               edb.block.copy.vector:
1018 795E 7F50             data  vec.9
1019               
1020               
1021               ***************************************************************
1022               * Stub for "edb.line.del"
1023               * bank5 vec.10
1024               ********|*****|*********************|**************************
1025               edb.line.del:
1026 7960 C820  54         mov   @edb.line.del.vector,@trmpvector
     7962 7968     
     7964 A034     
1027 7966 1001  14         jmp   _trampoline.bank5.ret ; Longjump
1028               edb.line.del.vector:
1029 7968 7F52             data  vec.10
1030               
1031               
1032               
1033               ***************************************************************
1034               * Trampoline bank 5 with return
1035               ********|*****|*********************|**************************
1036               _trampoline.bank5.ret:
1037 796A 0649  14         dect  stack
1038 796C C64B  30         mov   r11,*stack            ; Save return address
1039                       ;------------------------------------------------------
1040                       ; Call routine in specified bank
1041                       ;------------------------------------------------------
1042 796E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7970 307A     
1043 7972 600A                   data bank5.rom        ; | i  p0 = bank address
1044 7974 FFFF                   data >ffff            ; | i  p1 = Vector with target address
1045                                                   ; |         (deref @trmpvector)
1046 7976 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1047                       ;------------------------------------------------------
1048                       ; Exit
1049                       ;------------------------------------------------------
1050 7978 C2F9  30         mov   *stack+,r11           ; Pop r11
1051 797A 045B  20         b     *r11                  ; Return to caller
1052               
1053               
1054               ***************************************************************
1055               * Stub for "vdp.dump.patterns"
1056               * bank6 vec.1
1057               ********|*****|*********************|**************************
1058               vdp.dump.patterns:
1059 797C C820  54         mov   @vdp.dump.patterns.vector,@trmpvector
     797E 7984     
     7980 A034     
1060 7982 1010  14         jmp   _trampoline.bank6.ret ; Longjump
1061               vdp.dump.patterns.vector:
1062 7984 7F40             data  vec.1
1063               
1064               
1065               ***************************************************************
1066               * Stub for "vdp.dump.font"
1067               * bank6 vec.2
1068               ********|*****|*********************|**************************
1069               vdp.dump.font:
1070 7986 C820  54         mov   @vdp.dump.font.vector,@trmpvector
     7988 798E     
     798A A034     
1071 798C 100B  14         jmp   _trampoline.bank6.ret ; Longjump
1072               vdp.dump.font.vector:
1073 798E 7F42             data  vec.2
1074               
1075               
1076               ***************************************************************
1077               * Stub for "vdp.colors.line"
1078               * bank6 vec.3
1079               ********|*****|*********************|**************************
1080               vdp.colors.line:
1081 7990 C820  54         mov   @vdp.colors.line.vector,@trmpvector
     7992 7998     
     7994 A034     
1082 7996 1006  14         jmp   _trampoline.bank6.ret ; Longjump
1083               vdp.colors.line.vector:
1084 7998 7F44             data  vec.3
1085               
1086               
1087               ***************************************************************
1088               * Stub for "tv.set.font"
1089               * bank6 vec.33
1090               ********|*****|*********************|**************************
1091               tv.set.font:
1092 799A C820  54         mov   @tv.set.font.vector,@trmpvector
     799C 79A2     
     799E A034     
1093 79A0 1001  14         jmp   _trampoline.bank6.ret ; Longjump
1094               tv.set.font.vector:
1095 79A2 7F80             data  vec.33
1096               
1097               
1098               ***************************************************************
1099               * Trampoline bank 6 with return
1100               ********|*****|*********************|**************************
1101               _trampoline.bank6.ret:
1102 79A4 0649  14         dect  stack
1103 79A6 C64B  30         mov   r11,*stack            ; Save return address
1104                       ;------------------------------------------------------
1105                       ; Call routine in specified bank
1106                       ;------------------------------------------------------
1107 79A8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79AA 307A     
1108 79AC 600C                   data bank6.rom        ; | i  p0 = bank address
1109 79AE FFFF                   data >ffff            ; | i  p1 = Vector with target address
1110                                                   ; |         (deref @trmpvector)
1111 79B0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1112                       ;------------------------------------------------------
1113                       ; Exit
1114                       ;------------------------------------------------------
1115 79B2 C2F9  30         mov   *stack+,r11           ; Pop r11
1116 79B4 045B  20         b     *r11                  ; Return to caller
1117               
1118               
1119               ***************************************************************
1120               * Stub for "tibasic"
1121               * bank7 vec.10
1122               ********|*****|*********************|**************************
1123               tibasic1:
1124 79B6 C820  54         mov   @const.1,@tib.session
     79B8 2002     
     79BA A0B4     
1125 79BC 100F  14         jmp   tibasic
1126               tibasic2:
1127 79BE C820  54         mov   @const.2,@tib.session
     79C0 2004     
     79C2 A0B4     
1128 79C4 100B  14         jmp   tibasic
1129               tibasic3:
1130 79C6 C820  54         mov   @const.3,@tib.session
     79C8 39A2     
     79CA A0B4     
1131 79CC 1007  14         jmp   tibasic
1132               tibasic4:
1133 79CE C820  54         mov   @const.4,@tib.session
     79D0 2006     
     79D2 A0B4     
1134 79D4 1003  14         jmp   tibasic
1135               tibasic5:
1136 79D6 C820  54         mov   @const.5,@tib.session
     79D8 39A4     
     79DA A0B4     
1137               tibasic:
1138 79DC 0649  14         dect  stack
1139 79DE C64B  30         mov   r11,*stack            ; Save return address
1140 79E0 0649  14         dect  stack
1141 79E2 C644  30         mov   tmp0,*stack           ; Push tmp0
1142                       ;------------------------------------------------------
1143                       ; Exit early if no TI Basic session
1144                       ;------------------------------------------------------
1145 79E4 C120  34         mov   @tib.session,tmp0     ; Get session ID
     79E6 A0B4     
1146 79E8 130A  14         jeq   tibasic.exit          ; Exit early if no session
1147                       ;------------------------------------------------------
1148                       ; Run TI Basic session
1149                       ;------------------------------------------------------
1150 79EA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79EC 307A     
1151 79EE 600E                   data bank7.rom        ; | i  p0 = bank address
1152 79F0 7F52                   data vec.10           ; | i  p1 = Vector with target address
1153 79F2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1154               
1155 79F4 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     79F6 A0C0     
1156 79F8 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
1157               
1158 79FA 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     79FC 7A08     
1159                       ;------------------------------------------------------
1160                       ; Exit
1161                       ;------------------------------------------------------
1162               tibasic.exit:
1163 79FE 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7A00 A31A     
1164 7A02 C139  30         mov   *stack+,tmp0          ; Pop tmp0
1165 7A04 C2F9  30         mov   *stack+,r11           ; Pop r11
1166 7A06 045B  20         b     *r11                  ; Return to caller
1167               
1168               
1169               
1170               ***************************************************************
1171               * Stub for "tibasic.uncrunch"
1172               * bank7 vec.11
1173               ********|*****|*********************|**************************
1174               tibasic.uncrunch:
1175 7A08 0649  14         dect  stack
1176 7A0A C64B  30         mov   r11,*stack            ; Save return address
1177                       ;------------------------------------------------------
1178                       ; Uncrunch TI basic program
1179                       ;------------------------------------------------------
1180 7A0C C820  54         mov   @tib.session,@parm1   ; Get current session
     7A0E A0B4     
     7A10 A006     
1181 7A12 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
1182               
1183 7A14 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A16 307A     
1184 7A18 600E                   data bank7.rom        ; | i  p0 = bank address
1185 7A1A 7F54                   data vec.11           ; | i  p1 = Vector with target address
1186 7A1C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1187                       ;------------------------------------------------------
1188                       ; Exit
1189                       ;------------------------------------------------------
1190               tibasic.uncrunch.exit:
1191 7A1E C2F9  30         mov   *stack+,r11           ; Pop r11
1192 7A20 045B  20         b     *r11                  ; Return to caller
1193               
1194               
1195               ***************************************************************
1196               * Stub for "tv.reset"
1197               * bank7 vec.23
1198               ********|*****|*********************|**************************
1199               tv.reset:
1200 7A22 0649  14         dect  stack
1201 7A24 C64B  30         mov   r11,*stack            ; Save return address
1202                       ;------------------------------------------------------
1203                       ; Call routine in specified bank
1204                       ;------------------------------------------------------
1205 7A26 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A28 307A     
1206 7A2A 600E                   data bank7.rom        ; | i  p0 = bank address
1207 7A2C 7F6C                   data vec.23           ; | i  p1 = Vector with target address
1208 7A2E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1209                       ;------------------------------------------------------
1210                       ; Exit
1211                       ;------------------------------------------------------
1212               tv.reset.exit:
1213 7A30 C2F9  30         mov   *stack+,r11           ; Pop r11
1214 7A32 045B  20         b     *r11                  ; Return to caller
1215               
1216               
1217               ***************************************************************
1218               * Stub for "fg99.run"
1219               ********|*****|*********************|**************************
1220               fg99.run.xbgem:
1221 7A34 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7A36 3DFC     
1222 7A38 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7A3A A232     
1223 7A3C 100F  14         jmp   fg99.run.stub
1224               
1225               fg99.run.rxb:
1226 7A3E 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7A40 3E10     
1227 7A42 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7A44 A232     
1228 7A46 100A  14         jmp   fg99.run.stub
1229               
1230               fg99.run.fcmd:
1231 7A48 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     7A4A 3DE8     
1232 7A4C C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7A4E A232     
1233 7A50 1005  14         jmp   fg99.run.stub
1234               
1235               fg99.run.fbforth:
1236 7A52 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7A54 3E24     
1237 7A56 C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     7A58 A232     
1238 7A5A 1000  14         jmp   fg99.run.stub
1239               
1240               fg99.run.stub:
1241 7A5C 0649  14         dect  stack
1242 7A5E C64B  30         mov   r11,*stack            ; Save return address
1243                       ;------------------------------------------------------
1244                       ; Run FinalGROM cartridge image
1245                       ;------------------------------------------------------
1246 7A60 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7A62 382E     
1247                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
1248                                                   ; /
1249                       ;------------------------------------------------------
1250                       ; Exit
1251                       ;------------------------------------------------------
1252               fg99.run.stub.exit:
1253 7A64 C2F9  30         mov   *stack+,r11           ; Pop r11
1254 7A66 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0153                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks (with exceptions)
0003               
0004               
0027               
0028               
0031               
0032               ***************************************************************
0033               * Stub for "mem.sams.set.legacy"
0034               * bank7 vec.1
0035               ********|*****|*********************|**************************
0036               mem.sams.set.legacy:
0037 7A68 0649  14         dect  stack
0038 7A6A C64B  30         mov   r11,*stack            ; Save return address
0039                       ;------------------------------------------------------
0040                       ; Dump VDP patterns
0041                       ;------------------------------------------------------
0042 7A6C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A6E 307A     
0043 7A70 600E                   data bank7.rom        ; | i  p0 = bank address
0044 7A72 7F40                   data vec.1            ; | i  p1 = Vector with target address
0045 7A74 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0046                       ;------------------------------------------------------
0047                       ; Exit
0048                       ;------------------------------------------------------
0049 7A76 C2F9  30         mov   *stack+,r11           ; Pop r11
0050 7A78 045B  20         b     *r11                  ; Return to caller
0051               
0052               
0053               ***************************************************************
0054               * Stub for "mem.sams.set.boot"
0055               * Exclude: bank0, bank7
0056               * bank7 vec.2
0057               ********|*****|*********************|**************************
0058               mem.sams.set.boot:
0059 7A7A 0649  14         dect  stack
0060 7A7C C64B  30         mov   r11,*stack            ; Save return address
0061                       ;------------------------------------------------------
0062                       ; Dump VDP patterns
0063                       ;------------------------------------------------------
0064 7A7E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A80 307A     
0065 7A82 600E                   data bank7.rom        ; | i  p0 = bank address
0066 7A84 7F42                   data vec.2            ; | i  p1 = Vector with target address
0067 7A86 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0068                       ;------------------------------------------------------
0069                       ; Exit
0070                       ;------------------------------------------------------
0071 7A88 C2F9  30         mov   *stack+,r11           ; Pop r11
0072 7A8A 045B  20         b     *r11                  ; Return to caller
0073               
0074               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7A8C 0649  14         dect  stack
0081 7A8E C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7A90 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A92 307A     
0086 7A94 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7A96 7F44                   data vec.3            ; | i  p1 = Vector with target address
0088 7A98 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7A9A C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7A9C 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * Stub for "magic.set"
0098               * bank7 vec.20
0099               ********|*****|*********************|**************************
0100               magic.set:
0101 7A9E 0649  14         dect  stack
0102 7AA0 C64B  30         mov   r11,*stack            ; Save return address
0103                       ;------------------------------------------------------
0104                       ; Dump VDP patterns
0105                       ;------------------------------------------------------
0106 7AA2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AA4 307A     
0107 7AA6 600E                   data bank7.rom        ; | i  p0 = bank address
0108 7AA8 7F66                   data vec.20           ; | i  p1 = Vector with target address
0109 7AAA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0110                       ;------------------------------------------------------
0111                       ; Exit
0112                       ;------------------------------------------------------
0113 7AAC C2F9  30         mov   *stack+,r11           ; Pop r11
0114 7AAE 045B  20         b     *r11                  ; Return to caller
0115               
0116               
0117               ***************************************************************
0118               * Stub for "magic.clear"
0119               * bank7 vec.21
0120               ********|*****|*********************|**************************
0121               magic.clear:
0122 7AB0 0649  14         dect  stack
0123 7AB2 C64B  30         mov   r11,*stack            ; Save return address
0124                       ;------------------------------------------------------
0125                       ; Dump VDP patterns
0126                       ;------------------------------------------------------
0127 7AB4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AB6 307A     
0128 7AB8 600E                   data bank7.rom        ; | i  p0 = bank address
0129 7ABA 7F68                   data vec.21           ; | i  p1 = Vector with target address
0130 7ABC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134 7ABE C2F9  30         mov   *stack+,r11           ; Pop r11
0135 7AC0 045B  20         b     *r11                  ; Return to caller
0136               
0137               
0138               ***************************************************************
0139               * Stub for "magic.check"
0140               * bank7 vec.22
0141               ********|*****|*********************|**************************
0142               magic.check:
0143 7AC2 0649  14         dect  stack
0144 7AC4 C64B  30         mov   r11,*stack            ; Save return address
0145                       ;------------------------------------------------------
0146                       ; Dump VDP patterns
0147                       ;------------------------------------------------------
0148 7AC6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AC8 307A     
0149 7ACA 600E                   data bank7.rom        ; | i  p0 = bank address
0150 7ACC 7F6A                   data vec.22           ; | i  p1 = Vector with target address
0151 7ACE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0152                       ;------------------------------------------------------
0153                       ; Exit
0154                       ;------------------------------------------------------
0155 7AD0 C2F9  30         mov   *stack+,r11           ; Pop r11
0156 7AD2 045B  20         b     *r11                  ; Return to caller
0157               
                   < stevie_b1.asm
0154                       ;-----------------------------------------------------------------------
0155                       ; Program data
0156                       ;-----------------------------------------------------------------------
0157                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 7AD4 0D00             byte  key.enter, pane.focus.fb
0012 7AD6 6646             data  edkey.action.enter
0013               
0014 7AD8 0800             byte  key.fctn.s, pane.focus.fb
0015 7ADA 6262             data  edkey.action.left
0016               
0017 7ADC 0900             byte  key.fctn.d, pane.focus.fb
0018 7ADE 627C             data  edkey.action.right
0019               
0020 7AE0 0B00             byte  key.fctn.e, pane.focus.fb
0021 7AE2 6482             data  edkey.action.up
0022               
0023 7AE4 0A00             byte  key.fctn.x, pane.focus.fb
0024 7AE6 648A             data  edkey.action.down
0025               
0026 7AE8 BF00             byte  key.fctn.h, pane.focus.fb
0027 7AEA 6298             data  edkey.action.home
0028               
0029 7AEC C000             byte  key.fctn.j, pane.focus.fb
0030 7AEE 62C2             data  edkey.action.pword
0031               
0032 7AF0 C100             byte  key.fctn.k, pane.focus.fb
0033 7AF2 6314             data  edkey.action.nword
0034               
0035 7AF4 C200             byte  key.fctn.l, pane.focus.fb
0036 7AF6 62A0             data  edkey.action.end
0037               
0038 7AF8 0200             byte  key.fctn.4, pane.focus.fb
0039 7AFA 6422             data  edkey.action.npage
0040               
0041 7AFC 0E00             byte  key.fctn.5, pane.focus.fb
0042 7AFE 63A8             data  edkey.action.scroll.right
0043               
0044 7B00 0C00             byte  key.fctn.6, pane.focus.fb
0045 7B02 63E0             data  edkey.action.ppage
0046               
0047 7B04 B700             byte  key.ctrl.7, pane.focus.fb
0048 7B06 6924             data  edkey.action.fb.tab.prev
0049               
0050 7B08 0100             byte  key.fctn.7, pane.focus.fb
0051 7B0A 6932             data  edkey.action.fb.tab.next
0052               
0053 7B0C 8500             byte  key.ctrl.e, pane.focus.fb
0054 7B0E 63E0             data  edkey.action.ppage
0055               
0056 7B10 8700             byte  key.ctrl.g, pane.focus.fb
0057 7B12 770C             data  dialog.goto
0058               
0059 7B14 9800             byte  key.ctrl.x, pane.focus.fb
0060 7B16 6422             data  edkey.action.npage
0061               
0062 7B18 7F00             byte  key.fctn.v, pane.focus.fb
0063 7B1A 646A             data  edkey.action.topscr
0064               
0065 7B1C BE00             byte  key.fctn.b, pane.focus.fb
0066 7B1E 647A             data  edkey.action.botscr
0067               
0068 7B20 9600             byte  key.ctrl.v, pane.focus.fb
0069 7B22 6462             data  edkey.action.top
0070               
0071 7B24 8200             byte  key.ctrl.b, pane.focus.fb
0072 7B26 6472             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 7B28 0300             byte  key.fctn.1, pane.focus.fb
0077 7B2A 650A             data  edkey.action.del_char
0078               
0079 7B2C 0700             byte  key.fctn.3, pane.focus.fb
0080 7B2E 65BC             data  edkey.action.del_line
0081               
0082 7B30 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7B32 6588             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7B34 0400             byte  key.fctn.2, pane.focus.fb
0088 7B36 661E             data  edkey.action.ins_char.ws
0089               
0090 7B38 B900             byte  key.fctn.dot, pane.focus.fb
0091 7B3A 66D2             data  edkey.action.ins_onoff
0092               
0093 7B3C 0600             byte  key.fctn.8, pane.focus.fb
0094 7B3E 662E             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7B40 F000             byte  key.ctrl.space, pane.focus.fb
0099 7B42 6846             data  edkey.action.block.mark
0100               
0101 7B44 8300             byte  key.ctrl.c, pane.focus.fb
0102 7B46 6766             data  edkey.action.copyblock_or_clipboard
0103               
0104 7B48 8400             byte  key.ctrl.d, pane.focus.fb
0105 7B4A 68A6             data  edkey.action.block.delete
0106               
0107 7B4C 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7B4E 68D4             data  edkey.action.block.move
0109               
0110 7B50 8700             byte  key.ctrl.g, pane.focus.fb
0111 7B52 690A             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7B54 B100             byte  key.ctrl.1, pane.focus.fb
0116 7B56 6940             data  edkey.action.fb.clip.save.1
0117               
0118 7B58 B200             byte  key.ctrl.2, pane.focus.fb
0119 7B5A 694A             data  edkey.action.fb.clip.save.2
0120               
0121 7B5C B300             byte  key.ctrl.3, pane.focus.fb
0122 7B5E 6954             data  edkey.action.fb.clip.save.3
0123                       ;-------------------------------------------------------
0124                       ; Other action keys
0125                       ;-------------------------------------------------------
0126 7B60 0500             byte  key.fctn.plus, pane.focus.fb
0127 7B62 6758             data  edkey.action.quit
0128               
0129 7B64 B500             byte  key.ctrl.5, pane.focus.fb
0130 7B66 6374             data  edkey.action.scroll.left
0131               
0132 7B68 9100             byte  key.ctrl.q, pane.focus.fb
0133 7B6A 6758             data  edkey.action.quit
0134               
0135 7B6C 9200             byte  key.ctrl.r, pane.focus.fb
0136 7B6E 6718             data  edkey.action.toggle.ruler
0137               
0138 7B70 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7B72 721C             data  pane.colorscheme.cycle
0140               
0141 7B74 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7B76 6776             data  edkey.action.fb.file.prev
0143               
0144 7B78 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 7B7A 67AE             data  edkey.action.fb.file.next
0146               
0147 7B7C BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7B7E 76EE             data  dialog.basic
0149               
0150 7B80 BC00             byte  key.fctn.0, pane.focus.fb
0151 7B82 79DC             data  tibasic
0152                       ;-------------------------------------------------------
0153                       ; Dialog keys
0154                       ;-------------------------------------------------------
0155 7B84 8100             byte  key.ctrl.a, pane.focus.fb
0156 7B86 76DA             data  dialog.append
0157               
0158 7B88 8800             byte  key.ctrl.h, pane.focus.fb
0159 7B8A 7672             data  dialog.help
0160               
0161 7B8C 8600             byte  key.ctrl.f, pane.focus.fb
0162 7B8E 76A4             data  dialog.file
0163               
0164 7B90 8900             byte  key.ctrl.i, pane.focus.fb
0165 7B92 7690             data  dialog.insert
0166               
0167 7B94 9300             byte  key.ctrl.s, pane.focus.fb
0168 7B96 7686             data  dialog.save
0169               
0170 7B98 8F00             byte  key.ctrl.o, pane.focus.fb
0171 7B9A 767C             data  dialog.load
0172               
0173 7B9C 9500             byte  key.ctrl.u, pane.focus.fb
0174 7B9E 76F8             data  dialog.shortcuts
0175               
0176 7BA0 9000             byte  key.ctrl.p, pane.focus.fb
0177 7BA2 769A             data  dialog.print
0178               
0179                       ;
0180                       ; FCTN-9 has multiple purposes, if block mode is on
0181                       ; reset block, otherwise show dialog "Main Menu".
0182                       ;
0183 7BA4 0F00             byte  key.fctn.9, pane.focus.fb
0184 7BA6 7720             data  dialog.menu
0185                       ;-------------------------------------------------------
0186                       ; End of list
0187                       ;-------------------------------------------------------
0188 7BA8 FFFF             data  EOL                           ; EOL
0189               
0190               
0191               *---------------------------------------------------------------
0192               * Action keys mapping table: Command Buffer (CMDB)
0193               *---------------------------------------------------------------
0194               keymap_actions.cmdb:
0195                       ;-------------------------------------------------------
0196                       ; Dialog: Main Menu
0197                       ;-------------------------------------------------------
0198 7BAA 4664             byte  key.uc.f, id.dialog.menu
0199 7BAC 76A4             data  dialog.file
0200               
0201 7BAE 4264             byte  key.uc.b, id.dialog.menu
0202 7BB0 76EE             data  dialog.basic
0203               
0204 7BB2 4364             byte  key.uc.c, id.dialog.menu
0205 7BB4 76E4             data  dialog.cartridge
0206               
0207 7BB6 4F64             byte  key.uc.o, id.dialog.menu
0208 7BB8 76D0             data  dialog.config
0209               
0210 7BBA 5364             byte  key.uc.s, id.dialog.menu
0211 7BBC 76F8             data  dialog.shortcuts
0212               
0213 7BBE 4864             byte  key.uc.h, id.dialog.menu
0214 7BC0 7672             data  dialog.help
0215               
0216 7BC2 5164             byte  key.uc.q, id.dialog.menu
0217 7BC4 6758             data  edkey.action.quit
0218               
0219 7BC6 0F64             byte  key.fctn.9, id.dialog.menu
0220 7BC8 6EE2             data  edkey.action.cmdb.close.dialog
0221                       ;-------------------------------------------------------
0222                       ; Dialog: File
0223                       ;-------------------------------------------------------
0224 7BCA 4E69             byte  key.uc.n, id.dialog.file
0225 7BCC 6A58             data  edkey.action.cmdb.file.new
0226               
0227 7BCE 4F69             byte  key.uc.o, id.dialog.file
0228 7BD0 767C             data  dialog.load
0229               
0230 7BD2 5369             byte  key.uc.s, id.dialog.file
0231 7BD4 7686             data  dialog.save
0232               
0233 7BD6 4969             byte  key.uc.i, id.dialog.file
0234 7BD8 7690             data  dialog.insert
0235               
0236 7BDA 4169             byte  key.uc.a, id.dialog.file
0237 7BDC 76DA             data  dialog.append
0238               
0239 7BDE 4369             byte  key.uc.c, id.dialog.file
0240 7BE0 7702             data  dialog.cat
0241               
0242 7BE2 5069             byte  key.uc.p, id.dialog.file
0243 7BE4 769A             data  dialog.print
0244                       ;-------------------------------------------------------
0245                       ; Dialog: Open file
0246                       ;-------------------------------------------------------
0247 7BE6 0E0A             byte  key.fctn.5, id.dialog.load
0248 7BE8 6EA0             data  edkey.action.cmdb.fastmode.toggle
0249               
0250 7BEA 0D0A             byte  key.enter, id.dialog.load
0251 7BEC 6A7E             data  edkey.action.cmdb.load
0252               
0253 7BEE 0B0A             byte  key.fctn.e, id.dialog.load
0254 7BF0 6E06             data  edkey.action.cmdb.pick.prev
0255               
0256 7BF2 0A0A             byte  key.fctn.x, id.dialog.load
0257 7BF4 6E3E             data  edkey.action.cmdb.pick.next
0258                       ;-------------------------------------------------------
0259                       ; Dialog: Insert file at line ...
0260                       ;-------------------------------------------------------
0261 7BF6 0E0B             byte  key.fctn.5, id.dialog.insert
0262 7BF8 6EA0             data  edkey.action.cmdb.fastmode.toggle
0263               
0264 7BFA 0D0B             byte  key.enter, id.dialog.insert
0265 7BFC 6AD4             data  edkey.action.cmdb.insert
0266               
0267 7BFE 0B0B             byte  key.fctn.e, id.dialog.insert
0268 7C00 6E06             data  edkey.action.cmdb.pick.prev
0269               
0270 7C02 0A0B             byte  key.fctn.x, id.dialog.insert
0271 7C04 6E3E             data  edkey.action.cmdb.pick.next
0272                       ;-------------------------------------------------------
0273                       ; Dialog: Append file
0274                       ;-------------------------------------------------------
0275 7C06 0E0C             byte  key.fctn.5, id.dialog.append
0276 7C08 6EA0             data  edkey.action.cmdb.fastmode.toggle
0277               
0278 7C0A 0D0C             byte  key.enter, id.dialog.append
0279 7C0C 6B60             data  edkey.action.cmdb.append
0280               
0281 7C0E 0B0C             byte  key.fctn.e, id.dialog.append
0282 7C10 6E06             data  edkey.action.cmdb.pick.prev
0283               
0284 7C12 0A0C             byte  key.fctn.x, id.dialog.append
0285 7C14 6E3E             data  edkey.action.cmdb.pick.next
0286                       ;-------------------------------------------------------
0287                       ; Dialog: Copy clipboard to line ...
0288                       ;-------------------------------------------------------
0289 7C16 0E67             byte  key.fctn.5, id.dialog.clipboard
0290 7C18 6EA0             data  edkey.action.cmdb.fastmode.toggle
0291               
0292 7C1A 0167             byte  key.fctn.7, id.dialog.clipboard
0293 7C1C 76C6             data  dialog.clipdev
0294               
0295 7C1E 3167             byte  key.num.1, id.dialog.clipboard
0296 7C20 6BDE             data  edkey.action.cmdb.clip.1
0297               
0298 7C22 3267             byte  key.num.2, id.dialog.clipboard
0299 7C24 6BE4             data  edkey.action.cmdb.clip.2
0300               
0301 7C26 3367             byte  key.num.3, id.dialog.clipboard
0302 7C28 6BEA             data  edkey.action.cmdb.clip.3
0303               
0304 7C2A 3467             byte  key.num.4, id.dialog.clipboard
0305 7C2C 6BF0             data  edkey.action.cmdb.clip.4
0306               
0307 7C2E 3567             byte  key.num.5, id.dialog.clipboard
0308 7C30 6BF6             data  edkey.action.cmdb.clip.5
0309                       ;-------------------------------------------------------
0310                       ; Dialog: Catalog drive/directory
0311                       ;-------------------------------------------------------
0312 7C32 0D15             byte  key.enter, id.dialog.cat
0313 7C34 6DDC             data  edkey.action.cmdb.file.directory.device
0314                       ;-------------------------------------------------------
0315                       ; Dialog: Configure
0316                       ;-------------------------------------------------------
0317 7C36 436C             byte  key.uc.c, id.dialog.cfg
0318 7C38 76C6             data  dialog.clipdev
0319               
0320 7C3A 466C             byte  key.uc.f, id.dialog.cfg
0321 7C3C 7716             data  dialog.font
0322                       ;-------------------------------------------------------
0323                       ; Dialog: Configure clipboard
0324                       ;-------------------------------------------------------
0325 7C3E 0D12             byte  key.enter, id.dialog.cfg.clip
0326 7C40 6A34             data  edkey.action.cmdb.cfg.clip
0327                       ;-------------------------------------------------------
0328                       ; Dialog: Configure font
0329                       ;-------------------------------------------------------
0330 7C42 316E             byte  key.num.1, id.dialog.font
0331 7C44 6F72             data  edkey.action.cmdb.font1
0332               
0333 7C46 326E             byte  key.num.2, id.dialog.font
0334 7C48 6F76             data  edkey.action.cmdb.font2
0335               
0336 7C4A 336E             byte  key.num.3, id.dialog.font
0337 7C4C 6F7C             data  edkey.action.cmdb.font3
0338               
0339 7C4E 346E             byte  key.num.4, id.dialog.font
0340 7C50 6F82             data  edkey.action.cmdb.font4
0341               
0342 7C52 356E             byte  key.num.5, id.dialog.font
0343 7C54 6F88             data  edkey.action.cmdb.font5
0344                       ;-------------------------------------------------------
0345                       ; Dialog: Save file
0346                       ;-------------------------------------------------------
0347 7C56 0D0E             byte  key.enter, id.dialog.save
0348 7C58 6C2A             data  edkey.action.cmdb.save
0349               
0350 7C5A 0D0F             byte  key.enter, id.dialog.saveblock
0351 7C5C 6C2A             data  edkey.action.cmdb.save
0352               
0353 7C5E 0C0E             byte  key.fctn.6, id.dialog.save
0354 7C60 6EAC             data  edkey.action.cmdb.lineterm.toggle
0355               
0356 7C62 0C0F             byte  key.fctn.6, id.dialog.saveblock
0357 7C64 6EAC             data  edkey.action.cmdb.lineterm.toggle
0358                       ;-------------------------------------------------------
0359                       ; Dialog: Print file
0360                       ;-------------------------------------------------------
0361 7C66 0D10             byte  key.enter, id.dialog.print
0362 7C68 6CAA             data  edkey.action.cmdb.print
0363               
0364 7C6A 0D11             byte  key.enter, id.dialog.printblock
0365 7C6C 6CAA             data  edkey.action.cmdb.print
0366               
0367 7C6E 0C10             byte  key.fctn.6, id.dialog.print
0368 7C70 6EAC             data  edkey.action.cmdb.lineterm.toggle
0369               
0370 7C72 0C11             byte  key.fctn.6, id.dialog.printblock
0371 7C74 6EAC             data  edkey.action.cmdb.lineterm.toggle
0372                       ;-------------------------------------------------------
0373                       ; Dialog: Unsaved changes
0374                       ;-------------------------------------------------------
0375 7C76 0C65             byte  key.fctn.6, id.dialog.unsaved
0376 7C78 6E76             data  edkey.action.cmdb.proceed
0377               
0378 7C7A 2065             byte  key.space, id.dialog.unsaved
0379 7C7C 6E76             data  edkey.action.cmdb.proceed
0380               
0381 7C7E 0D65             byte  key.enter, id.dialog.unsaved
0382 7C80 7686             data  dialog.save
0383                       ;-------------------------------------------------------
0384                       ; Dialog: Cartridge
0385                       ;-------------------------------------------------------
0386 7C82 586A             byte  key.uc.x, id.dialog.cartridge
0387 7C84 7A34             data  fg99.run.xbgem
0388               
0389 7C86 526A             byte  key.uc.r, id.dialog.cartridge
0390 7C88 7A3E             data  fg99.run.rxb
0391               
0392 7C8A 436A             byte  key.uc.c, id.dialog.cartridge
0393 7C8C 7A48             data  fg99.run.fcmd
0394               
0395 7C8E 466A             byte  key.uc.f, id.dialog.cartridge
0396 7C90 7A52             data  fg99.run.fbforth
0397                       ;-------------------------------------------------------
0398                       ; Dialog: Basic
0399                       ;-------------------------------------------------------
0400 7C92 316B             byte  key.num.1, id.dialog.basic
0401 7C94 79B6             data  tibasic1
0402               
0403 7C96 326B             byte  key.num.2, id.dialog.basic
0404 7C98 79BE             data  tibasic2
0405               
0406 7C9A 336B             byte  key.num.3, id.dialog.basic
0407 7C9C 79C6             data  tibasic3
0408               
0409 7C9E 346B             byte  key.num.4, id.dialog.basic
0410 7CA0 79CE             data  tibasic4
0411               
0412 7CA2 356B             byte  key.num.5, id.dialog.basic
0413 7CA4 79D6             data  tibasic5
0414               
0415 7CA6 0E6B             byte  key.fctn.5, id.dialog.basic
0416 7CA8 6EB8             data  edkey.action.cmdb.am.toggle
0417               
0418 7CAA 206B             byte  key.space, id.dialog.basic
0419 7CAC 7A08             data  tibasic.uncrunch
0420                       ;-------------------------------------------------------
0421                       ; Dialog: Shortcuts
0422                       ;-------------------------------------------------------
0423 7CAE 436F             byte  key.uc.c, id.dialog.shortcuts
0424 7CB0 721C             data  pane.colorscheme.cycle
0425               
0426 7CB2 526F             byte  key.uc.r, id.dialog.shortcuts
0427 7CB4 6718             data  edkey.action.toggle.ruler
0428               
0429 7CB6 416F             byte  key.uc.a, id.dialog.shortcuts
0430 7CB8 6EEA             data  edkey.action.cmdb.autoinsert
0431               
0432 7CBA 316F             byte  key.num.1, id.dialog.shortcuts
0433 7CBC 684E             data  edkey.action.block.m1
0434               
0435 7CBE 326F             byte  key.num.2, id.dialog.shortcuts
0436 7CC0 6856             data  edkey.action.block.m2
0437               
0438 7CC2 476F             byte  key.uc.g, id.dialog.shortcuts
0439 7CC4 770C             data  dialog.goto
0440                       ;-------------------------------------------------------
0441                       ; Dialog: Goto
0442                       ;-------------------------------------------------------
0443 7CC6 0D14             byte  key.enter, id.dialog.goto
0444 7CC8 6F22             data  edkey.action.cmdb.goto
0445                       ;-------------------------------------------------------
0446                       ; Dialog: Help
0447                       ;-------------------------------------------------------
0448 7CCA 2068             byte  key.space, id.dialog.help
0449 7CCC 765E             data  dialog.help.next
0450               
0451 7CCE 0F68             byte  key.fctn.9, id.dialog.help
0452 7CD0 6ECC             data  edkey.action.cmdb.close.about
0453               
0454 7CD2 0D68             byte  key.enter, id.dialog.help
0455 7CD4 6ECC             data  edkey.action.cmdb.close.about
0456                       ;-------------------------------------------------------
0457                       ; Movement keys
0458                       ;-------------------------------------------------------
0459 7CD6 0801             byte  key.fctn.s, pane.focus.cmdb
0460 7CD8 6974             data  edkey.action.cmdb.left
0461               
0462 7CDA 0901             byte  key.fctn.d, pane.focus.cmdb
0463 7CDC 6986             data  edkey.action.cmdb.right
0464               
0465 7CDE BF01             byte  key.fctn.h, pane.focus.cmdb
0466 7CE0 699E             data  edkey.action.cmdb.home
0467               
0468 7CE2 C201             byte  key.fctn.l, pane.focus.cmdb
0469 7CE4 69B2             data  edkey.action.cmdb.end
0470                       ;-------------------------------------------------------
0471                       ; Modifier keys
0472                       ;-------------------------------------------------------
0473 7CE6 0701             byte  key.fctn.3, pane.focus.cmdb
0474 7CE8 69C8             data  edkey.action.cmdb.clear
0475                       ;-------------------------------------------------------
0476                       ; Other action keys
0477                       ;-------------------------------------------------------
0478 7CEA 0F01             byte  key.fctn.9, pane.focus.cmdb
0479 7CEC 7720             data  dialog.menu
0480               
0481 7CEE 0501             byte  key.fctn.plus, pane.focus.cmdb
0482 7CF0 6758             data  edkey.action.quit
0483               
0484 7CF2 B101             byte  key.ctrl.1, pane.focus.cmdb
0485 7CF4 6D2A             data  edkey.action.cmdb.file.directory.1
0486               
0487 7CF6 B201             byte  key.ctrl.2, pane.focus.cmdb
0488 7CF8 6D34             data  edkey.action.cmdb.file.directory.2
0489               
0490 7CFA B301             byte  key.ctrl.3, pane.focus.cmdb
0491 7CFC 6D40             data  edkey.action.cmdb.file.directory.3
0492               
0493 7CFE B401             byte  key.ctrl.4, pane.focus.cmdb
0494 7D00 6D4C             data  edkey.action.cmdb.file.directory.4
0495               
0496 7D02 B501             byte  key.ctrl.5, pane.focus.cmdb
0497 7D04 6D58             data  edkey.action.cmdb.file.directory.5
0498               
0499 7D06 B601             byte  key.ctrl.6, pane.focus.cmdb
0500 7D08 6D64             data  edkey.action.cmdb.file.directory.6
0501               
0502 7D0A B701             byte  key.ctrl.7, pane.focus.cmdb
0503 7D0C 6D70             data  edkey.action.cmdb.file.directory.7
0504               
0505 7D0E 9E01             byte  key.ctrl.8, pane.focus.cmdb
0506 7D10 6D7C             data  edkey.action.cmdb.file.directory.8
0507               
0508 7D12 9F01             byte  key.ctrl.9, pane.focus.cmdb
0509 7D14 6D88             data  edkey.action.cmdb.file.directory.9
0510               
0511 7D16 8501             byte  key.ctrl.e, pane.focus.cmdb
0512 7D18 6F9A             data  edkey.action.filebrowser.prev
0513               
0514 7D1A 9801             byte  key.ctrl.x, pane.focus.cmdb
0515 7D1C 6FF8             data  edkey.action.filebrowser.next
0516               
0517 7D1E 8101             byte  key.ctrl.a, pane.focus.cmdb
0518 7D20 6EC4             data  edkey.action.cmdb.preset
0519               
0520 7D22 8201             byte  key.ctrl.b, pane.focus.cmdb
0521 7D24 6EC4             data  edkey.action.cmdb.preset
0522               
0523 7D26 8301             byte  key.ctrl.c, pane.focus.cmdb
0524 7D28 6EC4             data  edkey.action.cmdb.preset
0525               
0526 7D2A 9A01             byte  key.ctrl.z, pane.focus.cmdb
0527 7D2C 721C             data  pane.colorscheme.cycle
0528                       ;------------------------------------------------------
0529                       ; End of list
0530                       ;-------------------------------------------------------
0531 7D2E FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0158                       ;-----------------------------------------------------------------------
0159                       ; Bank full check
0160                       ;-----------------------------------------------------------------------
0164                       ;-----------------------------------------------------------------------
0165                       ; Show ROM bank in CPU crash screen
0166                       ;-----------------------------------------------------------------------
0167                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F38                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b1.asm
0168                       ;-----------------------------------------------------------------------
0169                       ; Table for VDP modes
0170                       ;-----------------------------------------------------------------------
0171                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equ.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b1.asm
0172                       ;-----------------------------------------------------------------------
0173                       ; Vector table
0174                       ;-----------------------------------------------------------------------
0175                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F38 0552             stri 'ROM#1'
     7F3A 4F4D     
     7F3C 2331     
0009               *--------------------------------------------------------------
0010               * ROM 1: Vectors 1-32
0011               *--------------------------------------------------------------
0012                       aorg  bankx.vectab
0013 7F40 610C     vec.1   data  mem.sams.setup.stevie ;
0014 7F42 2026     vec.2   data  cpu.crash             ;
0015 7F44 2026     vec.3   data  cpu.crash             ;
0016 7F46 2026     vec.4   data  cpu.crash             ;
0017 7F48 2026     vec.5   data  cpu.crash             ;
0018 7F4A 2026     vec.6   data  cpu.crash             ;
0019 7F4C 2026     vec.7   data  cpu.crash             ;
0020 7F4E 2026     vec.8   data  cpu.crash             ;
0021 7F50 2026     vec.9   data  cpu.crash             ;
0022 7F52 7070     vec.10  data  edb.line.pack.fb      ;
0023 7F54 7168     vec.11  data  edb.line.unpack.fb    ;
0024 7F56 7910     vec.12  data  edb.clear.sams        ;
0025 7F58 2026     vec.13  data  cpu.crash             ;
0026 7F5A 2026     vec.14  data  cpu.crash             ;
0027 7F5C 6A22     vec.15  data  edkey.action.cmdb.show
0028 7F5E 2026     vec.16  data  cpu.crash             ;
0029 7F60 2026     vec.17  data  cpu.crash             ;
0030 7F62 705C     vec.18  data  cmdb.dialog.close     ;
0031 7F64 777A     vec.19  data  cmdb.cmd.clear        ;
0032 7F66 2026     vec.20  data  cpu.crash             ;
0033 7F68 780E     vec.21  data  fb.vdpdump            ;
0034 7F6A 3184     vec.22  data  fb.row2line           ;
0035 7F6C 2026     vec.23  data  cpu.crash             ;
0036 7F6E 2026     vec.24  data  cpu.crash             ;
0037 7F70 2026     vec.25  data  cpu.crash             ;
0038 7F72 2026     vec.26  data  cpu.crash             ;
0039 7F74 78D6     vec.27  data  pane.errline.hide     ;
0040 7F76 74CE     vec.28  data  pane.cursor.blink     ;
0041 7F78 74B0     vec.29  data  pane.cursor.hide      ;
0042 7F7A 78CC     vec.30  data  pane.errline.show     ;
0043 7F7C 727A     vec.31  data  pane.colorscheme.load
0044 7F7E 7496     vec.32  data  pane.colorscheme.statlines
0045               *--------------------------------------------------------------
0046               * ROM 1: Vectors 33-64
0047               *--------------------------------------------------------------
0048 7F80 2026     vec.33  data  cpu.crash             ;
0049 7F82 2026     vec.34  data  cpu.crash             ;
0050 7F84 2026     vec.35  data  cpu.crash             ;
0051 7F86 2026     vec.36  data  cpu.crash             ;
0052 7F88 2026     vec.37  data  cpu.crash             ;
0053 7F8A 2026     vec.38  data  cpu.crash             ;
0054 7F8C 2026     vec.39  data  cpu.crash             ;
0055 7F8E 2026     vec.40  data  cpu.crash             ;
0056 7F90 2026     vec.41  data  cpu.crash             ;
0057 7F92 2026     vec.42  data  cpu.crash             ;
0058 7F94 2026     vec.43  data  cpu.crash             ;
0059 7F96 2026     vec.44  data  cpu.crash             ;
0060 7F98 2026     vec.45  data  cpu.crash             ;
0061 7F9A 2026     vec.46  data  cpu.crash             ;
0062 7F9C 2026     vec.47  data  cpu.crash             ;
0063 7F9E 2026     vec.48  data  cpu.crash             ;
0064 7FA0 2026     vec.49  data  cpu.crash             ;
0065 7FA2 2026     vec.50  data  cpu.crash             ;
0066 7FA4 2026     vec.51  data  cpu.crash             ;
0067 7FA6 2026     vec.52  data  cpu.crash             ;
0068 7FA8 2026     vec.53  data  cpu.crash             ;
0069 7FAA 2026     vec.54  data  cpu.crash             ;
0070 7FAC 2026     vec.55  data  cpu.crash             ;
0071 7FAE 2026     vec.56  data  cpu.crash             ;
0072 7FB0 2026     vec.57  data  cpu.crash             ;
0073 7FB2 2026     vec.58  data  cpu.crash             ;
0074 7FB4 2026     vec.59  data  cpu.crash             ;
0075 7FB6 2026     vec.60  data  cpu.crash             ;
0076 7FB8 2026     vec.61  data  cpu.crash             ;
0077 7FBA 2026     vec.62  data  cpu.crash             ;
0078 7FBC 2026     vec.63  data  cpu.crash             ;
0079 7FBE 2026     vec.64  data  cpu.crash             ;
0080               *--------------------------------------------------------------
0081               * ROM 1: Vectors 65-96
0082               *--------------------------------------------------------------
0083 7FC0 2026     vec.65  data  cpu.crash             ;
0084 7FC2 2026     vec.66  data  cpu.crash             ;
0085 7FC4 2026     vec.67  data  cpu.crash             ;
0086 7FC6 2026     vec.68  data  cpu.crash             ;
0087 7FC8 2026     vec.69  data  cpu.crash             ;
0088 7FCA 2026     vec.70  data  cpu.crash             ;
0089 7FCC 2026     vec.71  data  cpu.crash             ;
0090 7FCE 2026     vec.72  data  cpu.crash             ;
0091 7FD0 2026     vec.73  data  cpu.crash             ;
0092 7FD2 2026     vec.74  data  cpu.crash             ;
0093 7FD4 2026     vec.75  data  cpu.crash             ;
0094 7FD6 2026     vec.76  data  cpu.crash             ;
0095 7FD8 2026     vec.77  data  cpu.crash             ;
0096 7FDA 2026     vec.78  data  cpu.crash             ;
0097 7FDC 2026     vec.79  data  cpu.crash             ;
0098 7FDE 2026     vec.80  data  cpu.crash             ;
0099 7FE0 2026     vec.81  data  cpu.crash             ;
0100 7FE2 2026     vec.82  data  cpu.crash             ;
0101 7FE4 2026     vec.83  data  cpu.crash             ;
0102 7FE6 2026     vec.84  data  cpu.crash             ;
0103 7FE8 2026     vec.85  data  cpu.crash             ;
0104 7FEA 2026     vec.86  data  cpu.crash             ;
0105 7FEC 2026     vec.87  data  cpu.crash             ;
0106 7FEE 2026     vec.88  data  cpu.crash             ;
0107 7FF0 2026     vec.89  data  cpu.crash             ;
0108 7FF2 2026     vec.90  data  cpu.crash             ;
0109 7FF4 2026     vec.91  data  cpu.crash             ;
0110 7FF6 2026     vec.92  data  cpu.crash             ;
0111 7FF8 2026     vec.93  data  cpu.crash             ;
0112 7FFA 2026     vec.94  data  cpu.crash             ;
0113 7FFC 2026     vec.95  data  cpu.crash             ;
0114 7FFE 2026     vec.96  data  cpu.crash             ;
                   < stevie_b1.asm
0176                                                   ; Vector table bank 1

    ANYKEY.............. >200A :     
    AT.................. >2726 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CAT.CURRENTPAGE..... >E00A :     
    CAT.DEVICE.......... >EEB0 :     
    CAT.FILECOUNT....... >E000 :     
    CAT.FNLIST.......... >E8BC :     
    CAT.FPICKER.IDX..... >E002 :     
    CAT.FREE1........... >E372 :     
    CAT.FSLIST.......... >E1F2 :     
    CAT.FTLIST.......... >E172 :     
    CAT.FULLFNAME....... >E014 :     
    CAT.HILIT.COLROW.... >E004 :     
    CAT.HILIT.COLROW2... >E006 :     
    CAT.NOFILESPAGE..... >E008 :     
    CAT.NOROWSCOL....... >E012 :     
    CAT.PREVIOUSPAGE.... >E00E :     
    CAT.PTRLIST......... >E074 :     
    CAT.RSLIST.......... >E2F2 :     
    CAT.SHORTCUT.IDX.... >E010 :     
    CAT.SIZE............ >0F00 :     
    CAT.SIZELIST........ >E6C0 :     
    CAT.TOP............. >E000 :     
    CAT.TOTALPAGES...... >E00C :     
    CAT.TYPELIST........ >E3C6 :     
    CAT.VAR1............ >E064 :     
    CAT.VAR2............ >E066 :     
    CAT.VAR3............ >E068 :     
    CAT.VAR4............ >E06A :     
    CAT.VAR5............ >E06C :     
    CAT.VAR6............ >E06E :     
    CAT.VAR7............ >E070 :     
    CAT.VAR8............ >E072 :     
    CAT.VOLNAME......... >E3BA :     
    CLHOOK.............. >2F72 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2F9A :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CFG.FNAME...... >77C0 :     
    CMDB.CFG.FNAME.VECTOR >77C8 :     
    CMDB.CMD............ >A72F :     
    CMDB.CMD.CLEAR...... >777A :     
    CMDB.CMD.CLEAR.VECTOR >7782 :     
    CMDB.CMD.GETLENGTH.. >7784 :     
    CMDB.CMD.GETLENGTH.VECTOR >778C :     
    CMDB.CMD.PRESET..... >778E :     
    CMDB.CMD.PRESET.VECTOR >7796 :     
    CMDB.CMD.SET........ >7798 :     
    CMDB.CMD.SET.VECTOR. >77A0 :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.CLOSE... >705C :     
    CMDB.DIALOG.CLOSE.EXIT >706C :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >3342 :     
    CMDB.INIT.EXIT...... >3396 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.REFRESH........ >7770 :     
    CMDB.REFRESH.VECTOR. >7778 :     
    CMDB.ROWS........... >0006 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >0100 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >EF00 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >39AC :     
    CONST.11............ >39AE :     
    CONST.12............ >39B0 :     
    CONST.13............ >39B2 :     
    CONST.14............ >39B4 :     
    CONST.15............ >39B6 :     
    CONST.2............. >2004 :     
    CONST.3............. >39A2 :     
    CONST.32............ >39B8 :     
    CONST.4............. >2006 :     
    CONST.5............. >39A4 :     
    CONST.6............. >39A6 :     
    CONST.7............. >39A8 :     
    CONST.8............. >2008 :     
    CONST.80............ >39BA :     
    CONST.9............. >39AA :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F38 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2BA0 :     
    CPU.SCRPAD.BACKUP.COPY >2BB8 :     
    CPU.SCRPAD.BACKUP.EXIT >2BD2 :     
    CPU.SCRPAD.PGIN..... >2C26 :     
    CPU.SCRPAD.PGIN.EXIT >2C48 :     
    CPU.SCRPAD.PGOUT.... >2BE8 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2C20 :     
    CPU.SCRPAD.PGOUT.EXIT >2C24 :     
    CPU.SCRPAD.RESTORE.. >2BD4 :     
    CPU.SCRPAD.RESTORE.COPY >2BDC :     
    CPU.SCRPAD.RESTORE.EXIT >2BE6 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >254C :     
    CPYM0............... >2558 :     
    CPYM1............... >2564 :     
    CPYM2............... >256C :     
    CPYM2M.............. >253A :     
    CPYM2V.............. >24E6 :     
    CPYM3............... >257C :     
    CPYM4............... >2586 :     
    CPYMZ............... >2592 :     
    CPYODD.............. >2594 :     
    CPYV2M.............. >2518 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D99 :     
    DEF.CLIP.FNAME.B.... >3DA3 :     
    DEF.CLIP.FNAME.C.... >3DAD :     
    DEF.DEVICES......... >3DB7 :     
    DEF.PRINTER.FNAME... >3D92 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.............. >77D4 :     
    DIALOG.APPEND....... >76DA :     
    DIALOG.APPEND.VECTOR >76E2 :     
    DIALOG.BASIC........ >76EE :     
    DIALOG.BASIC.VECTOR. >76F6 :     
    DIALOG.CARTRIDGE.... >76E4 :     
    DIALOG.CARTRIDGE.VECTOR >76EC :     
    DIALOG.CAT.......... >7702 :     
    DIALOG.CAT.VECTOR... >770A :     
    DIALOG.CLIPBOARD.... >76BC :     
    DIALOG.CLIPBOARD.VECTOR >76C4 :     
    DIALOG.CLIPDEV...... >76C6 :     
    DIALOG.CLIPDEV.VECTOR >76CE :     
    DIALOG.CONFIG....... >76D0 :     
    DIALOG.CONFIG.VECTOR >76D8 :     
    DIALOG.FILE......... >76A4 :     
    DIALOG.FILE.VECTOR.. >76AC :     
    DIALOG.FONT......... >7716 :     
    DIALOG.FONT.VECTOR.. >771E :     
    DIALOG.GOTO......... >770C :     
    DIALOG.GOTO.VECTOR.. >7714 :     
    DIALOG.HEARTS.TAT... >77A2 :     
    DIALOG.HEARTS.TAT.VECTOR >77AA :     
    DIALOG.HELP......... >7672 :     
    DIALOG.HELP.NEXT.... >765E :     
    DIALOG.HELP.VECTOR.. >767A :     
    DIALOG.INSERT....... >7690 :     
    DIALOG.INSERT.VECTOR >7698 :     
    DIALOG.LOAD......... >767C :     
    DIALOG.LOAD.VECTOR.. >7684 :     
    DIALOG.MENU......... >7720 :     
    DIALOG.MENU.VECTOR.. >7734 :     
    DIALOG.PRINT........ >769A :     
    DIALOG.PRINT.VECTOR. >76A2 :     
    DIALOG.SAVE......... >7686 :     
    DIALOG.SAVE.VECTOR.. >768E :     
    DIALOG.SHORTCUTS.... >76F8 :     
    DIALOG.SHORTCUTS.VECTOR >7700 :     
    DIALOG.UNSAVED...... >76AE :     
    DIALOG.UNSAVED.VECTOR >76BA :     
    DIALOG.VECTOR....... >77DC :     
    DOFILL.............. >2280 :     
    DOWN................ >272C :     
    DSRLNK.............. >2C4A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2CA4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2D20 :     
    DSRLNK.DSRSCAN.CARDLOOP >2CD0 :     
    DSRLNK.DSRSCAN.CARDOFF >2CCA :     
    DSRLNK.DSRSCAN.DSR.8 >2D52 :     
    DSRLNK.DSRSCAN.DSR.A >2D62 :     
    DSRLNK.DSRSCAN.GETENTRY >2CFA :     
    DSRLNK.DSRSCAN.NEXTENTRY >2CF4 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2D42 :     
    DSRLNK.DSRSCAN.START >2CC0 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2D6E :     
    DSRLNK.ERROR.IO_ERROR >2D70 :     
    DSRLNK.ERROR.NODSR_FOUND >2D6A :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2D68 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2C4E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2DBA :     
    DSRLNK.REUSE........ >2D7A :     
    DSRLNK.REUSE.INIT... >2D7E :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.CLIP...... >7938 :     
    EDB.BLOCK.CLIP.VECTOR >7940 :     
    EDB.BLOCK.COPY...... >7956 :     
    EDB.BLOCK.COPY.VECTOR >795E :     
    EDB.BLOCK.DELETE.... >794C :     
    EDB.BLOCK.DELETE.VECTOR >7954 :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >791A :     
    EDB.BLOCK.MARK.M1... >7924 :     
    EDB.BLOCK.MARK.M1.VECTOR >792C :     
    EDB.BLOCK.MARK.M2... >792E :     
    EDB.BLOCK.MARK.M2.VECTOR >7936 :     
    EDB.BLOCK.MARK.VECTOR >7922 :     
    EDB.BLOCK.RESET..... >7942 :     
    EDB.BLOCK.RESET.VECTOR >794A :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7910 :     
    EDB.CLEAR.SAMS.VECTOR >7918 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A576 :     
    EDB.HIPAGE.ALLOC.... >37C8 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >37D4 :     
    EDB.HIPAGE.ALLOC.CRASH >37FE :     
    EDB.HIPAGE.ALLOC.EXIT >3806 :     
    EDB.HIPAGE.ALLOC.SETPAGE >37F0 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >32F6 :     
    EDB.INIT.EXIT....... >333C :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7960 :     
    EDB.LINE.DEL.VECTOR. >7968 :     
    EDB.LINE.GETLENGTH.. >3760 :     
    EDB.LINE.GETLENGTH.EXIT >379C :     
    EDB.LINE.GETLENGTH.NULL >3798 :     
    EDB.LINE.GETLENGTH2. >37A4 :     
    EDB.LINE.GETLENGTH2.EXIT >37C2 :     
    EDB.LINE.MAPPAGE.... >3716 :     
    EDB.LINE.MAPPAGE.EXIT >3758 :     
    EDB.LINE.MAPPAGE.LOOKUP >3730 :     
    EDB.LINE.PACK.FB.... >7070 :     
    EDB.LINE.PACK.FB.CHECK80 >70AE :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >70BE :     
    EDB.LINE.PACK.FB.COPYLINE >7114 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >712E :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >712A :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >7120 :     
    EDB.LINE.PACK.FB.CRASH >70B6 :     
    EDB.LINE.PACK.FB.EXIT >715C :     
    EDB.LINE.PACK.FB.PREPARE >70E4 :     
    EDB.LINE.PACK.FB.PREPEXIT >7142 :     
    EDB.LINE.PACK.FB.RTRIM >70C8 :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >70DA :     
    EDB.LINE.PACK.FB.SCAN >709E :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >70F0 :     
    EDB.LINE.UNPACK.FB.. >7168 :     
    EDB.LINE.UNPACK.FB.CLEAR >71C6 :     
    EDB.LINE.UNPACK.FB.COPY >71F8 :     
    EDB.LINE.UNPACK.FB.EXIT >7204 :     
    EDB.LINE.UNPACK.FB.GETLEN >71BE :     
    EDB.LINE.UNPACK.FB.PREPARE >71D4 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.BLOCK.COPY >686A :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >68A0 :     
    EDKEY.ACTION.BLOCK.DELETE >68A6 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >68D0 :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >690A :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >6920 :     
    EDKEY.ACTION.BLOCK.M1 >684E :     
    EDKEY.ACTION.BLOCK.M2 >6856 :     
    EDKEY.ACTION.BLOCK.MARK >6846 :     
    EDKEY.ACTION.BLOCK.MOVE >68D4 :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6906 :     
    EDKEY.ACTION.BLOCK.RESET >685E :     
    EDKEY.ACTION.BOT.... >6472 :     
    EDKEY.ACTION.BOTSCR. >647A :     
    EDKEY.ACTION.CHAR... >66E4 :     
    EDKEY.ACTION.CHAR.EXIT >6714 :     
    EDKEY.ACTION.CHAR.OVERWRITE >6710 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6EB8 :     
    EDKEY.ACTION.CMDB.APPEND >6B60 :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6BD0 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6BA4 :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6EEA :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6F1A :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6F0C :     
    EDKEY.ACTION.CMDB.CFG.CLIP >6A34 :     
    EDKEY.ACTION.CMDB.CFG.CLIP.EXIT >6A50 :     
    EDKEY.ACTION.CMDB.CHAR >69D4 :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6A14 :     
    EDKEY.ACTION.CMDB.CLEAR >69C8 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >69D0 :     
    EDKEY.ACTION.CMDB.CLIP >6BFC :     
    EDKEY.ACTION.CMDB.CLIP.1 >6BDE :     
    EDKEY.ACTION.CMDB.CLIP.2 >6BE4 :     
    EDKEY.ACTION.CMDB.CLIP.3 >6BEA :     
    EDKEY.ACTION.CMDB.CLIP.4 >6BF0 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6BF6 :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6ECC :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6EE2 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6EE6 :     
    EDKEY.ACTION.CMDB.END >69B2 :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6EA0 :     
    EDKEY.ACTION.CMDB.FILE.CATALOG.EXIT >6DFE :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY >6DF2 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.1 >6D2A :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.2 >6D34 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.3 >6D40 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.4 >6D4C :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.5 >6D58 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.6 >6D64 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.7 >6D70 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.8 >6D7C :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.9 >6D88 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.A >6D94 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.B >6DA0 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.C >6DAC :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.D >6DB8 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.DEVICE >6DDC :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.E >6DC4 :     
    EDKEY.ACTION.CMDB.FILE.DIRECTORY.F >6DD0 :     
    EDKEY.ACTION.CMDB.FILE.NEW >6A58 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6A76 :     
    EDKEY.ACTION.CMDB.FONT.EXIT >6F96 :     
    EDKEY.ACTION.CMDB.FONT.LOAD >6F8E :     
    EDKEY.ACTION.CMDB.FONT1 >6F72 :     
    EDKEY.ACTION.CMDB.FONT2 >6F76 :     
    EDKEY.ACTION.CMDB.FONT3 >6F7C :     
    EDKEY.ACTION.CMDB.FONT4 >6F82 :     
    EDKEY.ACTION.CMDB.FONT5 >6F88 :     
    EDKEY.ACTION.CMDB.GOTO >6F22 :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6F6E :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6F5A :     
    EDKEY.ACTION.CMDB.GOTO.PREPARE >6F40 :     
    EDKEY.ACTION.CMDB.HIDE >6A2C :     
    EDKEY.ACTION.CMDB.HOME >699E :     
    EDKEY.ACTION.CMDB.INSERT >6AD4 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6B52 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6B18 :     
    EDKEY.ACTION.CMDB.LEFT >6974 :     
    EDKEY.ACTION.CMDB.LINETERM.TOGGLE >6EAC :     
    EDKEY.ACTION.CMDB.LOAD >6A7E :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6ACC :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6AB8 :     
    EDKEY.ACTION.CMDB.PICK.NEXT >6E3E :     
    EDKEY.ACTION.CMDB.PICK.NEXT.EXIT >6E70 :     
    EDKEY.ACTION.CMDB.PICK.NEXT.SETFILE >6E50 :     
    EDKEY.ACTION.CMDB.PICK.PREV >6E06 :     
    EDKEY.ACTION.CMDB.PICK.PREV.EXIT >6E38 :     
    EDKEY.ACTION.CMDB.PICK.PREV.SETFILE >6E18 :     
    EDKEY.ACTION.CMDB.PRESET >6EC4 :     
    EDKEY.ACTION.CMDB.PRINT >6CAA :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6D06 :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6D1C :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6D14 :     
    EDKEY.ACTION.CMDB.PROCEED >6E76 :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6E9C :     
    EDKEY.ACTION.CMDB.RIGHT >6986 :     
    EDKEY.ACTION.CMDB.SAVE >6C2A :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6C86 :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6C9C :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6C94 :     
    EDKEY.ACTION.CMDB.SHOW >6A22 :     
    EDKEY.ACTION.CMDB.TOGGLE >6A1C :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6A30 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >6766 :     
    EDKEY.ACTION.DEL_CHAR >650A :     
    EDKEY.ACTION.DEL_CHAR.EXIT >6584 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >6562 :     
    EDKEY.ACTION.DEL_CHAR.PREP >6548 :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >6512 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >651C :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >653A :     
    EDKEY.ACTION.DEL_CHAR.SAVE >6578 :     
    EDKEY.ACTION.DEL_EOL >6588 :     
    EDKEY.ACTION.DEL_EOL.EXIT >65B8 :     
    EDKEY.ACTION.DEL_EOL_LOOP >65A4 :     
    EDKEY.ACTION.DEL_LINE >65BC :     
    EDKEY.ACTION.DEL_LINE.DOIT >65EA :     
    EDKEY.ACTION.DEL_LINE.EXIT >661A :     
    EDKEY.ACTION.DEL_LINE.REFRESH >65FA :     
    EDKEY.ACTION.DOWN... >648A :     
    EDKEY.ACTION.END.... >62A0 :     
    EDKEY.ACTION.ENTER.. >6646 :     
    EDKEY.ACTION.ENTER.NEWLINE >665E :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6672 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >6940 :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >694A :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >6954 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >6964 :     
    EDKEY.ACTION.FB.FILE.NEXT >67AE :     
    EDKEY.ACTION.FB.FILE.NEXT.EXIT >67E0 :     
    EDKEY.ACTION.FB.FILE.NEXT.LOADFILE >67D0 :     
    EDKEY.ACTION.FB.FILE.PREV >6776 :     
    EDKEY.ACTION.FB.FILE.PREV.EXIT >67A8 :     
    EDKEY.ACTION.FB.FILE.PREV.LOADFILE >6798 :     
    EDKEY.ACTION.FB.LOAD.FILE >67E6 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT1 >681C :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT2 >6832 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT3 >683C :     
    EDKEY.ACTION.FB.LOAD.LOADFILE >6816 :     
    EDKEY.ACTION.FB.TAB.NEXT >6932 :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >693A :     
    EDKEY.ACTION.FB.TAB.PREV >6924 :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >692C :     
    EDKEY.ACTION.FILEBROWSER.NEXT >6FF8 :     
    EDKEY.ACTION.FILEBROWSER.NEXT.CHECKDIALOG >7020 :     
    EDKEY.ACTION.FILEBROWSER.NEXT.EXIT >7054 :     
    EDKEY.ACTION.FILEBROWSER.NEXT.PAGE >7010 :     
    EDKEY.ACTION.FILEBROWSER.NEXT.PAGE.DISPLAY >7030 :     
    EDKEY.ACTION.FILEBROWSER.PREV >6F9A :     
    EDKEY.ACTION.FILEBROWSER.PREV.CHECKDIALOG >6FBE :     
    EDKEY.ACTION.FILEBROWSER.PREV.EXIT >6FF2 :     
    EDKEY.ACTION.FILEBROWSER.PREV.PAGE >6FAE :     
    EDKEY.ACTION.FILEBROWSER.PREV.PAGE.DISPLAY >6FCE :     
    EDKEY.ACTION.GOTO... >64E4 :     
    EDKEY.ACTION.GOTO.REFRESH >64FE :     
    EDKEY.ACTION.HOME... >6298 :     
    EDKEY.ACTION.INS_CHAR.WS >661E :     
    EDKEY.ACTION.INS_CHAR.WS.EXIT >6628 :     
    EDKEY.ACTION.INS_LINE >662E :     
    EDKEY.ACTION.INS_LINE.EXIT >6636 :     
    EDKEY.ACTION.INS_LINE_AFTER >663A :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >6642 :     
    EDKEY.ACTION.INS_ONOFF >66D2 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >66DE :     
    EDKEY.ACTION.LEFT... >6262 :     
    EDKEY.ACTION.NEWLINE >6686 :     
    EDKEY.ACTION.NEWLINE.DOWN >66AA :     
    EDKEY.ACTION.NEWLINE.EXIT >66CE :     
    EDKEY.ACTION.NEWLINE.REST >66B2 :     
    EDKEY.ACTION.NPAGE.. >6422 :     
    EDKEY.ACTION.NPAGE.EXIT >645E :     
    EDKEY.ACTION.NPAGE.REFRESH >644C :     
    EDKEY.ACTION.NPAGE.SANITY >6436 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6446 :     
    EDKEY.ACTION.NWORD.. >6314 :     
    EDKEY.ACTION.NWORD.EXIT >636C :     
    EDKEY.ACTION.NWORD_DONE >6364 :     
    EDKEY.ACTION.NWORD_MS >632C :     
    EDKEY.ACTION.NWORD_SCAN >632E :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >6338 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >6346 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >634E :     
    EDKEY.ACTION.PPAGE.. >63E0 :     
    EDKEY.ACTION.PPAGE.EXIT >641E :     
    EDKEY.ACTION.PPAGE.REFRESH >640C :     
    EDKEY.ACTION.PPAGE.SANITY >63F4 :     
    EDKEY.ACTION.PPAGE.TOPLINE >6406 :     
    EDKEY.ACTION.PWORD.. >62C2 :     
    EDKEY.ACTION.PWORD.EXIT >630C :     
    EDKEY.ACTION.PWORD_DONE >6304 :     
    EDKEY.ACTION.PWORD_SCAN >62D4 :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62DA :     
    EDKEY.ACTION.QUIT... >6758 :     
    EDKEY.ACTION.RIGHT.. >627C :     
    EDKEY.ACTION.SCROLL.LEFT >6374 :     
    EDKEY.ACTION.SCROLL.RIGHT >63A8 :     
    EDKEY.ACTION.TOGGLE.RULER >6718 :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >674E :     
    EDKEY.ACTION.TOGGLE.RULER.FB >674A :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >6728 :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6732 :     
    EDKEY.ACTION.TOP.... >6462 :     
    EDKEY.ACTION.TOPSCR. >646A :     
    EDKEY.ACTION.UP..... >6482 :     
    EDKEY.ACTIONS.INS.CHAR.WS.DATA >662C :     
    EDKEY.FB.GOTO.LINE.. >64C0 :     
    EDKEY.FB.GOTO.OFFSET >64AA :     
    EDKEY.FB.GOTO.ROW... >64BA :     
    EDKEY.FB.GOTO.TOPROW >6492 :     
    EDKEY.KEY.CHECK.NEXT >61D6 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61F6 :     
    EDKEY.KEY.CHECK.SCOPE >61FC :     
    EDKEY.KEY.PROCESS... >6176 :     
    EDKEY.KEY.PROCESS.ACTION >6216 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >622A :     
    EDKEY.KEY.PROCESS.CRASH >6248 :     
    EDKEY.KEY.PROCESS.ENTER >6250 :     
    EDKEY.KEY.PROCESS.EXIT >625E :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61D2 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61CC :     
    EDKEY.KEY.PROCESS.SPECIAL >6196 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61C6 :     
    EDKEY.KEYSCAN.HOOK.. >6130 :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6158 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >2EB8 :     
    EDKEY.KEYSCAN.HOOK.EXIT >6172 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >77DE :     
    ERROR.DISPLAY.VECTOR >77E6 :     
    ERRPANE.EXIT........ >33C4 :     
    ERRPANE.INIT........ >339E :     
    F18CHK.............. >27B4 :     
    F18CHK_EXIT......... >27F2 :     
    F18CHK_GPU.......... >27FE :     
    F18CHK_NO........... >27E8 :     
    F18CHK_YES.......... >27EE :     
    F18FW1.............. >2830 :     
    F18FWV.............. >2816 :     
    F18IDL.............. >27AA :     
    F18LCK.............. >27A0 :     
    F18RST.............. >2806 :     
    F18UNL.............. >278A :     
    FB.CALC.POINTER..... >319E :     
    FB.CALC.POINTER.EXIT >31BE :     
    FB.CALC.SCRROWS..... >31C6 :     
    FB.CALC.SCRROWS.EXIT >31F2 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >31E6 :     
    FB.CALC.SCRROWS.HANDLE.MC >31DA :     
    FB.CALC.SCRROWS.HANDLE.RULER >31D0 :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7804 :     
    FB.COLORLINES.VECTOR >780C :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.BOT....... >7890 :     
    FB.CURSOR.BOT.VECTOR >7898 :     
    FB.CURSOR.BOTSCR.... >789A :     
    FB.CURSOR.BOTSCR.VECTOR >78A2 :     
    FB.CURSOR.DOWN...... >785E :     
    FB.CURSOR.DOWN.VECTOR >7866 :     
    FB.CURSOR.HOME...... >7868 :     
    FB.CURSOR.HOME.VECTOR >7870 :     
    FB.CURSOR.TOP....... >787C :     
    FB.CURSOR.TOP.VECTOR >7884 :     
    FB.CURSOR.TOPSCR.... >7886 :     
    FB.CURSOR.TOPSCR.VECTOR >788E :     
    FB.CURSOR.UP........ >7854 :     
    FB.CURSOR.UP.VECTOR. >785C :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >7836 :     
    FB.GET.NONBLANK.VECTOR >783E :     
    FB.HSCROLL.......... >7818 :     
    FB.HSCROLL.VECTOR... >7820 :     
    FB.INIT............. >312A :     
    FB.INIT.EXIT........ >317C :     
    FB.INSERT.CHAR...... >78A4 :     
    FB.INSERT.CHAR.VECTOR >78AC :     
    FB.INSERT.LINE...... >7872 :     
    FB.INSERT.LINE.VECTOR >787A :     
    FB.REFRESH.......... >782C :     
    FB.REFRESH.VECTOR... >7834 :     
    FB.REPLACE.CHAR..... >78AE :     
    FB.REPLACE.CHAR.VECTOR >78B6 :     
    FB.RESTORE.......... >7822 :     
    FB.RESTORE.VECTOR... >782A :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >3184 :     
    FB.ROW2LINE.EXIT.... >3198 :     
    FB.RULER.INIT....... >77FA :     
    FB.RULER.INIT.VECTOR >7802 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >784A :     
    FB.TAB.NEXT.VECTOR.. >7852 :     
    FB.TAB.PREV......... >7840 :     
    FB.TAB.PREV.VECTOR.. >7848 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >780E :     
    FB.VDPDUMP.VECTOR... >7816 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2E74 :     
    FG99.CART.FBFORTH... >3E24 :     
    FG99.CART.FCMD...... >3DE8 :     
    FG99.CART.RXB....... >3E10 :     
    FG99.CART.XBGEM..... >3DFC :     
    FG99.EXIT........... >2EAE :     
    FG99.RUN............ >382E :     
    FG99.RUN.FBFORTH.... >7A52 :     
    FG99.RUN.FCMD....... >7A48 :     
    FG99.RUN.RXB........ >7A3E :     
    FG99.RUN.STUB....... >7A5C :     
    FG99.RUN.STUB.EXIT.. >7A64 :     
    FG99.RUN.XBGEM...... >7A34 :     
    FG99.SEND.LOOP...... >2E84 :     
    FG99.WAIT........... >2E9C :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.DIR.REC.PTR...... >A468 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4BA :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A46A :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2DE0 :     
    FILE.DELETE......... >2E18 :     
    FILE.IMAGE.LOAD..... >2E14 :     
    FILE.IMAGE.SAVE..... >2E16 :     
    FILE.OPEN........... >2DBC :     
    FILE.RECORD.READ.... >2DEC :     
    FILE.RECORD.SEEK.... >2E12 :     
    FILE.RECORD.WRITE... >2DF8 :     
    FILE.RENAME......... >2E1A :     
    FILE.STATUS......... >2E1C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.NEXT >763A :     
    FM.BROWSE.FNAME.PREV >7628 :     
    FM.BROWSE.FNAME.SET. >764C :     
    FM.DIRECTORY........ >7616 :     
    FM.FASTMODE......... >77B6 :     
    FM.FASTMODE.VECTOR.. >77BE :     
    FM.INSERTFILE....... >75DA :     
    FM.INSERTFILE.EXIT.. >75EC :     
    FM.LINETERM......... >77CA :     
    FM.LINETERM.VECTOR.. >77D2 :     
    FM.LOADFILE......... >75B4 :     
    FM.LOADFILE.EXIT.... >75D4 :     
    FM.NEWFILE.......... >7604 :     
    FM.SAVEFILE......... >75F2 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >2832 :     
    HCHAR1.............. >284C :     
    HCHAR2.............. >2856 :     
    HCHARX.............. >2838 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2EB8 :     
    ID.DIALOG.APPEND.... >000C :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CAT....... >0015 :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0014 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000B :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >0010 :     
    ID.DIALOG.PRINTBLOCK >0011 :     
    ID.DIALOG.RUN....... >000D :     
    ID.DIALOG.SAVE...... >000E :     
    ID.DIALOG.SAVEBLOCK. >000F :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >361C :     
    IDX.ENTRY.DELETE.EXIT >3674 :     
    IDX.ENTRY.DELETE.LASTLINE >3648 :     
    IDX.ENTRY.DELETE.REORG >3650 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >365A :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >366E :     
    IDX.ENTRY.INSERT.... >36BE :     
    IDX.ENTRY.INSERT.EXIT >370A :     
    IDX.ENTRY.INSERT.REORG >36DC :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >36E6 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >36FA :     
    IDX.ENTRY.UPDATE.... >356E :     
    IDX.ENTRY.UPDATE.CLEAR >35A8 :     
    IDX.ENTRY.UPDATE.EXIT >35B8 :     
    IDX.ENTRY.UPDATE.SAVE >3596 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >31F6 :     
    IDX.INIT.EXIT....... >3232 :     
    IDX.POINTER.GET..... >35C0 :     
    IDX.POINTER.GET.EXIT >3602 :     
    IDX.POINTER.GET.PARM >35F0 :     
    IDX.POINTER.GET.PARM.NULL >35FA :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26F6 :     
    INTON............... >26FE :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >7BAA :     
    KEYMAP_ACTIONS.EDITOR >7AD4 :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2F52 :     
    KTHREAD_EXIT........ >2F64 :     
    KTHREAD_KB.......... >2F60 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >7AC2 :     
    MAGIC.CLEAR......... >7AB0 :     
    MAGIC.SET........... >7A9E :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7A7A :     
    MEM.SAMS.SET.LEGACY. >7A68 :     
    MEM.SAMS.SET.STEVIE. >7A8C :     
    MEM.SAMS.SETUP.STEVIE >610C :     
    MEM.SAMS.SETUP.STEVIE.EXIT >612C :     
    MKHEX............... >29C8 :     
    MKHEX1.............. >29E0 :     
    MKHEX1.DIGIT09...... >29F6 :     
    MKHEX1.DIGITAF...... >29EC :     
    MKHEX2.............. >29FC :     
    MKHEX3.............. >2A3E :     
    MKHOO1.............. >2F70 :     
    MKHOOK.............. >2F68 :     
    MKNUM............... >2A56 :     
    MKNUM1.............. >2A68 :     
    MKNUM2.............. >2A84 :     
    MKNUM3.............. >2A88 :     
    MKNUM4.............. >2A92 :     
    MKNUM5.............. >2A9A :     
    MKSLO1.............. >2F96 :     
    MKSLOT.............. >2F7C :     
    MMPLA1.............. >2934 :     
    MMPLA2.............. >293A :     
    MMPLAY.............. >292C :     
    MUTE................ >28AA :     
    MUTE2............... >28AE :     
    MUTTAB.............. >28C4 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3928 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE........ >78C2 :     
    PANE.BOTLINE.VECTOR. >78CA :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >7766 :     
    PANE.CMDB.DRAW.VECTOR >776E :     
    PANE.CMDB.HIDE...... >775C :     
    PANE.CMDB.HIDE.VECTOR >7764 :     
    PANE.CMDB.SHOW...... >7752 :     
    PANE.CMDB.SHOW.VECTOR >775A :     
    PANE.COLORSCHEME.CHECKCMDB >7348 :     
    PANE.COLORSCHEME.CMDBPANE >7378 :     
    PANE.COLORSCHEME.CURSORCOLOR >7454 :     
    PANE.COLORSCHEME.CURSORCOLOR.CMDB >7462 :     
    PANE.COLORSCHEME.CURSORCOLOR.FB >746A :     
    PANE.COLORSCHEME.CYCLE >721C :     
    PANE.COLORSCHEME.CYCLE.EXIT >7274 :     
    PANE.COLORSCHEME.ERRPANE >73EE :     
    PANE.COLORSCHEME.FBDUMP >7354 :     
    PANE.COLORSCHEME.FBDUMP.NORULER >7340 :     
    PANE.COLORSCHEME.LOAD >727A :     
    PANE.COLORSCHEME.LOAD.EXIT >7478 :     
    PANE.COLORSCHEME.RULER >7436 :     
    PANE.COLORSCHEME.STATLINE >7400 :     
    PANE.COLORSCHEME.STATLINES >7496 :     
    PANE.COLORSCHEME.STATLINES.EXIT >74AA :     
    PANE.COLORSCHEME.SWITCH >7236 :     
    PANE.CURSOR.BLINK... >74CE :     
    PANE.CURSOR.BLINK.EXIT >74EA :     
    PANE.CURSOR.HIDE.... >74B0 :     
    PANE.CURSOR.HIDE.EXIT >74CA :     
    PANE.ERRLINE.DRAWCOLOR >78E0 :     
    PANE.ERRLINE.DRAWCOLOR.VECTOR >78E8 :     
    PANE.ERRLINE.HIDE... >78D6 :     
    PANE.ERRLINE.HIDE.VECTOR >78DE :     
    PANE.ERRLINE.SHOW... >78CC :     
    PANE.ERRLINE.SHOW.VECTOR >78D4 :     
    PANE.FILEBROWSER.... >78EA :     
    PANE.FILEBROWSER.HILIGHT >78F4 :     
    PANE.FILEBROWSER.HILIGHT.VECTOR >78FC :     
    PANE.FILEBROWSER.VECTOR >78F2 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >7748 :     
    PANE.SHOW_HINTX.VECTOR >7750 :     
    PANE.TOPLINE........ >78B8 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >380E :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3826 :     
    PANE.TOPLINE.VECTOR. >78C0 :     
    PANE.VDPDUMP........ >74EE :     
    PANE.VDPDUMP.ALPHA_LOCK >74FC :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >750C :     
    PANE.VDPDUMP.CMDB.CHECK >7514 :     
    PANE.VDPDUMP.CMDB.DRAW >751A :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >7526 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >7558 :     
    PANE.VDPDUMP.DUMP... >7568 :     
    PANE.VDPDUMP.DUMPED. >7580 :     
    PANE.VDPDUMP.EXIT... >75AA :     
    PANE.VDPDUMP.STATLINES >7588 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >2A4A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >2A4C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >24E2 :     
    PUTLST.LOOP......... >2456 :     
    PUTLST.LOOP.PAD..... >2496 :     
    PUTLST.NEXT......... >24D6 :     
    PUTLST.NEXTCOL...... >24BC :     
    PUTNUM.............. >2AD4 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >2966 :     
    RKSCAN.EXIT......... >29BC :     
    ROM.FARJUMP......... >307A :     
    ROM.FARJUMP.ASSERT.CART >30EC :     
    ROM.FARJUMP.ASSERT.LOWMEM >30FA :     
    ROM.FARJUMP.BANKSWITCH.CALL >30DC :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >30D4 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3118 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >310E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >310A :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >30B8 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >30BC :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >30C4 :     
    ROM.FARJUMP.EXIT.... >3120 :     
    ROM.FARJUMP.RETURN.. >30DE :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >391C :     
    RSSLOT.............. >2FA8 :     
    RUNLI1.............. >2FC0 :     
    RUNLI2.............. >2FCC :     
    RUNLI3.............. >2FD0 :     
    RUNLI3A............. >2FD8 :     
    RUNLI4.............. >2FE2 :     
    RUNLI5.............. >2FEC :     
    RUNLI6.............. >2FFA :     
    RUNLI7.............. >3008 :     
    RUNLI9.............. >300C :     
    RUNLIA.............. >302E :     
    RUNLIB.............. >2FBC :     
    RUNLIC.............. >3052 :     
    RUNLID.............. >3068 :     
    RUNLIE.............. >3072 :     
    S16X16.............. >271E :     
    S8X8................ >2716 :     
    SAMS.LAYOUT......... >264E :     
    SAMS.LAYOUT.COPY.... >269E :     
    SAMS.LAYOUT.COPY.DATA >26D6 :     
    SAMS.LAYOUT.COPY.EXIT >26CA :     
    SAMS.LAYOUT.COPY.LOOP >26BC :     
    SAMS.LAYOUT.EXIT.... >2686 :     
    SAMS.LAYOUT.STANDARD >268E :     
    SAMS.MAPPING.OFF.... >2640 :     
    SAMS.MAPPING.OFF.EXIT >264A :     
    SAMS.MAPPING.ON..... >2632 :     
    SAMS.MAPPING.ON.EXIT >263C :     
    SAMS.PAGE.GET....... >259C :     
    SAMS.PAGE.GET.EXIT.. >25CA :     
    SAMS.PAGE.SET....... >25D2 :     
    SAMS.PAGE.SET.EXIT.. >2626 :     
    SAMS.PAGE.SET.SWITCH_PAGE >2616 :     
    SCROFF.............. >26E6 :     
    SCRON............... >26EE :     
    SCRPAD.83C6......... >29C2 :     
    SCRPAD.83FA......... >29C4 :     
    SCRPAD.83FE......... >29C6 :     
    SDEXI1.............. >295E :     
    SDEXI2.............. >2960 :     
    SDEXIT.............. >294C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >28E6 :     
    SDPLA2.............. >28F0 :     
    SDPLA3.............. >28F2 :     
    SDPLAY.............. >28DE :     
    SDPREP.............. >28C8 :     
    SETX................ >273C :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SAMS_SIZE...... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2F34 :     
    SMAG1X.............. >2706 :     
    SMAG2X.............. >270E :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2B4A :     
    STRING.GETLENC.EXIT. >2B96 :     
    STRING.GETLENC.LOOP. >2B78 :     
    STRING.GETLENC.PANIC >2B8E :     
    STRING.GETLENC.PUTLENGTH >2B86 :     
    STRING.LTRIM........ >2ADE :     
    STRING.LTRIM.EXIT... >2B3E :     
    STRING.LTRIM.MOVE... >2B24 :     
    STRING.LTRIM.PANIC.. >2B36 :     
    STRING.LTRIM.SCAN... >2B18 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3910 :     
    TASK.ONESHOT.EXIT... >3918 :     
    TASK.VDP.COPY.SAT... >385A :     
    TASK.VDP.COPY.SAT.CMDB >3882 :     
    TASK.VDP.COPY.SAT.EXIT >38F0 :     
    TASK.VDP.COPY.SAT.FB >3892 :     
    TASK.VDP.COPY.SAT.FB.NORULER >38A6 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >38DC :     
    TASK.VDP.COPY.SAT.WRITE >38AA :     
    TASK.VDP.COPY.SAT.WRITE2 >38E6 :     
    TASK.VDP.CURSOR..... >38FC :     
    TASK.VDP.CURSOR.EXIT >390A :     
    TASK.VDP.PANES...... >720E :     
    TASK.VDP.PANES.EXIT. >7216 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >79DC :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIBASIC.AM.TOGGLE... >77AC :     
    TIBASIC.AM.TOGGLE.VECTOR >77B4 :     
    TIBASIC.EXIT........ >79FE :     
    TIBASIC.UNCRUNCH.... >7A08 :     
    TIBASIC.UNCRUNCH.EXIT >7A1E :     
    TIBASIC1............ >79B6 :     
    TIBASIC2............ >79BE :     
    TIBASIC3............ >79C6 :     
    TIBASIC4............ >79CE :     
    TIBASIC5............ >79D6 :     
    TIMERS.............. >A064 :     
    TMDAT............... >2F50 :     
    TMGR................ >2EB4 :     
    TMGR1............... >2EB8 :     
    TMGR10.............. >2F38 :     
    TMGR11.............. >2F46 :     
    TMGR12.............. >2F4A :     
    TMGR1A.............. >2EC6 :     
    TMGR2............... >2ECC :     
    TMGR3............... >2EDC :     
    TMGR4............... >2EEE :     
    TMGR5............... >2F04 :     
    TMGR6............... >2F08 :     
    TMGR7............... >2F0C :     
    TMGR8............... >2F0E :     
    TMGR9............... >2F16 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >2538 :     
    TMP008.............. >2516 :     
    TMP011.............. >259A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2AAE :     
    TRIMNUM_FILL........ >2ACC :     
    TRIMNUM_SCAN........ >2ABA :     
    TRIMNUM_SETLEN...... >2AC6 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CAT.FNAME........ >DEA0 :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >392A :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >33CE :     
    TV.INIT.EXIT........ >341A :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >34F6 :     
    TV.PAD.STRING.EXIT.. >3562 :     
    TV.PAD.STRING.LOOP.. >354C :     
    TV.PAD.STRING.PANIC. >355A :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >3424 :     
    TV.RESET............ >7A22 :     
    TV.RESET.EXIT....... >7A30 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SET.FONT......... >799A :     
    TV.SET.FONT.VECTOR.. >79A2 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >398A :     
    TV.TABS.TABLE.RL.... >3996 :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >34C0 :     
    TV.UINT16.PACK...... >3432 :     
    TV.UINT16.PACK.DONE. >34AC :     
    TV.UINT16.PACK.ERROR >34A4 :     
    TV.UINT16.PACK.EXIT. >34B0 :     
    TV.UINT16.PACK.LOOP. >347A :     
    TV.UINT16.UNPACK.... >34CA :     
    TV.UINT16.UNPACK.EXIT >34F0 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3CAE :     
    TXT.AUTOINS.OFF..... >3B48 :     
    TXT.AUTOINS.ON...... >3B38 :     
    TXT.AUTOINSERT...... >39D0 :     
    TXT.BLOCK.CLIP...... >3A4E :     
    TXT.BLOCK.COPY...... >3A18 :     
    TXT.BLOCK.DEL....... >3A04 :     
    TXT.BLOCK.INSIDE.... >3D54 :     
    TXT.BLOCK.MOVE...... >3A2A :     
    TXT.BLOCK.PRINT..... >3A68 :     
    TXT.BLOCK.SAVE...... >3A3C :     
    TXT.BOTTOM.......... >39BE :     
    TXT.CLEARMEM........ >3A7C :     
    TXT.CMDB.PROMPT..... >3D82 :     
    TXT.COLORSCHEME..... >3D84 :     
    TXT.DELIM........... >39BC :     
    TXT.DONE.APPEND..... >3AC6 :     
    TXT.DONE.CLIPBOARD.. >3B1A :     
    TXT.DONE.CLIPDEV.... >3B2A :     
    TXT.DONE.COPY....... >3AE8 :     
    TXT.DONE.DELETE..... >3B08 :     
    TXT.DONE.INSERT..... >3AB4 :     
    TXT.DONE.LOAD....... >3AA4 :     
    TXT.DONE.PRINT...... >3AF8 :     
    TXT.DONE.SAVE....... >3AD8 :     
    TXT.FASTMODE........ >3B58 :     
    TXT.FILETYPE.DV80... >3BF2 :     
    TXT.FILETYPE.NONE... >3CBC :     
    TXT.INSERT.......... >39CA :     
    TXT.IO.NOFILE....... >3D20 :     
    TXT.IOERR.LOAD...... >3CD8 :     
    TXT.IOERR.PRINT..... >3D04 :     
    TXT.IOERR.SAVE...... >3CEE :     
    TXT.KB.............. >3B96 :     
    TXT.KEYMARKER....... >3CB4 :     
    TXT.KEYS.BASIC1..... >3C80 :     
    TXT.KEYS.BLOCK...... >3C4A :     
    TXT.KEYS.DEFAULT.... >3C00 :     
    TXT.KEYS.DEFAULTB... >3C20 :     
    TXT.LINES........... >3B9A :     
    TXT.LOADING......... >39D8 :     
    TXT.M1.............. >3BF8 :     
    TXT.M2.............. >3BFC :     
    TXT.MEMFULL.LOAD.... >3D38 :     
    TXT.MSG.TIBASIC..... >3CC2 :     
    TXT.NEWFILE......... >3BA0 :     
    TXT.NODISK.......... >3B64 :     
    TXT.OVRWRITE........ >39C4 :     
    TXT.PRINTING........ >39F0 :     
    TXT.READDIR......... >3A90 :     
    TXT.SAVING.......... >39E4 :     
    TXT.STAR............ >39D6 :     
    TXT.TIB1............ >3BAC :     
    TXT.TIB2............ >3BBA :     
    TXT.TIB3............ >3BC8 :     
    TXT.TIB4............ >3BD6 :     
    TXT.TIB5............ >3BE4 :     
    TXT.UNCRUNCHING..... >3B78 :     
    TXT.VERTLINE........ >3CB2 :     
    TXT.WS1............. >3CB6 :     
    TXT.WS2............. >3CB8 :     
    TXT.WS4............. >3CBC :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >2734 :     
    VCHAR............... >285A :     
    VCHAR1.............. >2860 :     
    VCHAR2.............. >286E :     
    VCHAR3.............. >2886 :     
    VDP.COLORS.LINE..... >7990 :     
    VDP.COLORS.LINE.VECTOR >7998 :     
    VDP.DUMP.FONT....... >7986 :     
    VDP.DUMP.FONT.VECTOR >798E :     
    VDP.DUMP.PATTERNS... >797C :     
    VDP.DUMP.PATTERNS.VECTOR >7984 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2910 :     
    VDPLA2.............. >2916 :     
    VDPLA3.............. >2926 :     
    VDPLAY.............. >28F8 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F40 :     
    VEC.10.............. >7F52 :     
    VEC.11.............. >7F54 :     
    VEC.12.............. >7F56 :     
    VEC.13.............. >7F58 :     
    VEC.14.............. >7F5A :     
    VEC.15.............. >7F5C :     
    VEC.16.............. >7F5E :     
    VEC.17.............. >7F60 :     
    VEC.18.............. >7F62 :     
    VEC.19.............. >7F64 :     
    VEC.2............... >7F42 :     
    VEC.20.............. >7F66 :     
    VEC.21.............. >7F68 :     
    VEC.22.............. >7F6A :     
    VEC.23.............. >7F6C :     
    VEC.24.............. >7F6E :     
    VEC.25.............. >7F70 :     
    VEC.26.............. >7F72 :     
    VEC.27.............. >7F74 :     
    VEC.28.............. >7F76 :     
    VEC.29.............. >7F78 :     
    VEC.3............... >7F44 :     
    VEC.30.............. >7F7A :     
    VEC.31.............. >7F7C :     
    VEC.32.............. >7F7E :     
    VEC.33.............. >7F80 :     
    VEC.34.............. >7F82 :     
    VEC.35.............. >7F84 :     
    VEC.36.............. >7F86 :     
    VEC.37.............. >7F88 :     
    VEC.38.............. >7F8A :     
    VEC.39.............. >7F8C :     
    VEC.4............... >7F46 :     
    VEC.40.............. >7F8E :     
    VEC.41.............. >7F90 :     
    VEC.42.............. >7F92 :     
    VEC.43.............. >7F94 :     
    VEC.44.............. >7F96 :     
    VEC.45.............. >7F98 :     
    VEC.46.............. >7F9A :     
    VEC.47.............. >7F9C :     
    VEC.48.............. >7F9E :     
    VEC.49.............. >7FA0 :     
    VEC.5............... >7F48 :     
    VEC.50.............. >7FA2 :     
    VEC.51.............. >7FA4 :     
    VEC.52.............. >7FA6 :     
    VEC.53.............. >7FA8 :     
    VEC.54.............. >7FAA :     
    VEC.55.............. >7FAC :     
    VEC.56.............. >7FAE :     
    VEC.57.............. >7FB0 :     
    VEC.58.............. >7FB2 :     
    VEC.59.............. >7FB4 :     
    VEC.6............... >7F4A :     
    VEC.60.............. >7FB6 :     
    VEC.61.............. >7FB8 :     
    VEC.62.............. >7FBA :     
    VEC.63.............. >7FBC :     
    VEC.64.............. >7FBE :     
    VEC.65.............. >7FC0 :     
    VEC.66.............. >7FC2 :     
    VEC.67.............. >7FC4 :     
    VEC.68.............. >7FC6 :     
    VEC.69.............. >7FC8 :     
    VEC.7............... >7F4C :     
    VEC.70.............. >7FCA :     
    VEC.71.............. >7FCC :     
    VEC.72.............. >7FCE :     
    VEC.73.............. >7FD0 :     
    VEC.74.............. >7FD2 :     
    VEC.75.............. >7FD4 :     
    VEC.76.............. >7FD6 :     
    VEC.77.............. >7FD8 :     
    VEC.78.............. >7FDA :     
    VEC.79.............. >7FDC :     
    VEC.8............... >7F4E :     
    VEC.80.............. >7FDE :     
    VEC.81.............. >7FE0 :     
    VEC.82.............. >7FE2 :     
    VEC.83.............. >7FE4 :     
    VEC.84.............. >7FE6 :     
    VEC.85.............. >7FE8 :     
    VEC.86.............. >7FEA :     
    VEC.87.............. >7FEC :     
    VEC.88.............. >7FEE :     
    VEC.89.............. >7FF0 :     
    VEC.9............... >7F50 :     
    VEC.90.............. >7FF2 :     
    VEC.91.............. >7FF4 :     
    VEC.92.............. >7FF6 :     
    VEC.93.............. >7FF8 :     
    VEC.94.............. >7FFA :     
    VEC.95.............. >7FFC :     
    VEC.96.............. >7FFE :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2C28 :     
    XCPU.SCRPAD.PGOUT... >2BFA :     
    XFG99............... >2E76 :     
    XFILE.CLOSE......... >2DE2 :     
    XFILE.OPEN.......... >2DC0 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2F9C :     
    XPYM2M.............. >2540 :     
    XPYM2V.............. >24EC :     
    XPYV2M.............. >251E :     
    XROM.FARJUMP........ >3092 :     
    XROM.FARJUMP.PUSH_RETURN >30A2 :     
    XSAMS.LAYOUT........ >2650 :     
    XSAMS.PAGE.GET...... >259E :     
    XSAMS.PAGE.SET...... >25D6 :     
    XSETX............... >273E :     
    XSTRING.GETLENC..... >2B64 :     
    XSTRING.LTRIM....... >2AFA :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVCHA1.............. >289A :     
    XVCHAR.............. >288A :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2776 :     
    YX2PI2.............. >277C :     
    YX2PI3.............. >2786 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >2748 :     
    YX2PXX.............. >274C :     
    YX2PXX_C80.......... >2788 :     
    YX2PXX_NORMAL....... >276C :     
    YX2PXX_Y_CALC....... >2770 :     
    _EDKEY.ACTION.SCROLL >63D8 :     
    _EDKEY.ACTION.SCROLL.EXIT >63DC :     
    _FILE.RECORD.FOP.... >2E1E :     
    _FILE.RECORD.FOP.EXIT >2E70 :     
    _FILE.RECORD.FOP.OPTIMIZED >2E54 :     
    _FILE.RECORD.FOP.PAB >2E58 :     
    _IDX.ENTRY.DELETE.REORG >360C :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3614 :     
    _IDX.ENTRY.INSERT.REORG >3680 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >3686 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >36AE :     
    _IDX.SAMS.MAPCOLUMN.OFF >326C :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >329A :     
    _IDX.SAMS.MAPCOLUMN.ON >3238 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3262 :     
    _IDX.SAMSPAGE.GET... >32A6 :     
    _IDX.SAMSPAGE.GET.EXIT >32EC :     
    _TRAMPOLINE.BANK3... >7736 :     
    _TRAMPOLINE.BANK3.RET >77E8 :     
    _TRAMPOLINE.BANK4.RET >78FE :     
    _TRAMPOLINE.BANK5.RET >796A :     
    _TRAMPOLINE.BANK6.RET >79A4 :     
