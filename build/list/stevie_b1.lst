XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 230217-2152240
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0044      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0045      7F40     bankx.vectab              equ  >7f40   ; Vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equates.vdp.asm"     ; VDP configuration (F18a/9938/...)
     **** ****     > equates.vdp.asm
0001               * FILE......: equates.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equates.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equates.f18a.3080.asm
0001               * FILE......: equates.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equates.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
0023               
0024               ***************************** F18a 60x80 ***************************************
                   < stevie_b1.asm
0031                       copy  "equates.asm"         ; Stevie main configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *===============================================================================
0045               
0046               
0047               
0048               *--------------------------------------------------------------
0049               * Stevie Dialog / Pane specific equates
0050               *--------------------------------------------------------------
0051      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0052      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0053               ;-----------------------------------------------------------------
0054               ;   Dialog ID's
0055               ;-----------------------------------------------------------------
0056      000A     id.dialog.load            equ  10      ; "Load file"
0057      000B     id.dialog.save            equ  11      ; "Save file"
0058      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0059      000D     id.dialog.insert          equ  13      ; "Insert file"
0060      000E     id.dialog.append          equ  14      ; "Append file"
0061      000F     id.dialog.print           equ  15      ; "Print file"
0062      0010     id.dialog.printblock      equ  16      ; "Print block"
0063      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0064      0012     id.dialog.cfg.mc          equ  18      ; "Configure Master Catalog"
0065      0013     id.dialog.goto            equ  19      ; "Goto"
0066               ;-----------------------------------------------------------------
0067               ;   Dialog ID's >= 100 indicate that command prompt should be
0068               ;   hidden and no characters added to CMDB keyboard buffer.
0069               ;-----------------------------------------------------------------
0070      0064     id.dialog.menu            equ  100     ; "Main Menu"
0071      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0072      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0073      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0074      0068     id.dialog.help            equ  104     ; "About"
0075      0069     id.dialog.file            equ  105     ; "File"
0076      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0077      006B     id.dialog.basic           equ  107     ; "TI Basic"
0078      006C     id.dialog.cfg             equ  108     ; "Configure"
0079      006D     id.dialog.editor          equ  109     ; "Configure editor"
0080      006E     id.dialog.font            equ  110     ; "Configure font"
0081      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0082               *--------------------------------------------------------------
0083               * Suffix characters for clipboards
0084               *--------------------------------------------------------------
0085      3100     clip1                     equ  >3100   ; '1'
0086      3200     clip2                     equ  >3200   ; '2'
0087      3300     clip3                     equ  >3300   ; '3'
0088      3400     clip4                     equ  >3400   ; '4'
0089      3500     clip5                     equ  >3500   ; '5'
0090               *--------------------------------------------------------------
0091               * Keyboard flags in Stevie
0092               *--------------------------------------------------------------
0093      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0094               *--------------------------------------------------------------
0095               * File work mode
0096               *--------------------------------------------------------------
0097      0001     id.file.loadfile          equ  1       ; Load file
0098      0002     id.file.insertfile        equ  2       ; Insert file
0099      0003     id.file.appendfile        equ  3       ; Append file
0100      0004     id.file.savefile          equ  4       ; Save file
0101      0005     id.file.saveblock         equ  5       ; Save block to file
0102      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0103      0007     id.file.printfile         equ  7       ; Print file
0104      0008     id.file.printblock        equ  8       ; Print block
0105               *--------------------------------------------------------------
0106               * Special file indicator
0107               *--------------------------------------------------------------
0108      0000     id.special.normal         equ  0       ; Normal file
0109      0001     id.special.mastcat        equ  1       ; Master catalog
0110      0002     id.special.readonly       equ  2       ; Read-only file
0111               *--------------------------------------------------------------
0112               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0113               *--------------------------------------------------------------
0114      A000     core1.top         equ  >a000           ; Structure begin
0115      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0116      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0117      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0118      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0119      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0120      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0121      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0122      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0123      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0124      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0125      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0126      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0127      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0128      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0129      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0130      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0131      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0132      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0133      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0134      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0135      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0136      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0137      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0138      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0139      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0140      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0141      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0142      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0143                                 ;--------------------------------------------
0144                                 ; TI Basic related
0145                                 ;--------------------------------------------
0146      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0147      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0148      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0149      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0150      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0151      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0152      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0153      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0154      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0155      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0156      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0157      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0158      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0159      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0160      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0161      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0162      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0163      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0164      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0165      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0166      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0167      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0168      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0169      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0170      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0171      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0172      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0173      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0174      A100     core1.free        equ  core1.top + 256 ; End of structure
0175               *--------------------------------------------------------------
0176               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0177               *--------------------------------------------------------------
0178      A100     core2.top         equ  >a100           ; Structure begin
0179      A100     rambuf            equ  core2.top       ; RAM workbuffer
0180      A200     core2.free        equ  core2.top + 256 ; End of structure
0181               *--------------------------------------------------------------
0182               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0183               *--------------------------------------------------------------
0184      A200     tv.top            equ  >a200           ; Structure begin
0185      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0186      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0187      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0188      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0189      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0190      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0191      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0192      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0193      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0194      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0195      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0196      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0197      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0198      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0199      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0200      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0201      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0202      A222     tv.font.ptr       equ  tv.top + 34     ; Pointer to font (in ROM bank 6 or RAM)
0203      A224     tv.pane.focus     equ  tv.top + 36     ; Identify pane that has focus
0204      A226     tv.task.oneshot   equ  tv.top + 38     ; Pointer to one-shot routine
0205      A228     tv.fj.stackpnt    equ  tv.top + 40     ; Pointer to farjump return stack
0206      A22A     tv.error.visible  equ  tv.top + 42     ; Error pane visible
0207      A22C     tv.error.rows     equ  tv.top + 44     ; Number of rows in error pane
0208      A22E     tv.sp2.conf       equ  tv.top + 46     ; Backup of SP2 config register
0209      A230     tv.sp2.stack      equ  tv.top + 48     ; Backup of SP2 stack register
0210      A232     tv.fg99.img.ptr   equ  tv.top + 50     ; Pointer to Final GROM cartridge to load
0211      A234     tv.error.msg      equ  tv.top + 52     ; Error message (max. 160 characters)
0212      A2D4     tv.free           equ  tv.top + 212    ; End of structure
0213               *--------------------------------------------------------------
0214               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0215               *--------------------------------------------------------------
0216      A300     fb.struct         equ  >a300           ; Structure begin
0217      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0218      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0219      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0220                                                      ; line X in editor buffer).
0221      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0222                                                      ; (offset 0 .. @fb.scrrows)
0223      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0224      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0225      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0226      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0227      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0228      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0229      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0230      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0231      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0232      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0233      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0234      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0235      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0236      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0237      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0238               *--------------------------------------------------------------
0239               * File handle structure               @>a400-a4ff   (256 bytes)
0240               *--------------------------------------------------------------
0241      A400     fh.struct         equ  >a400           ; stevie file handling structures
0242               ;*******************************************************************************
0243               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0244               ;*******************************************************************************
0245      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0246      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0247      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0248      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0249      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0250      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0251      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0252      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0253      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0254      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0255      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0256      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0257      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0258      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0259      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0260      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0261      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0262      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0263      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0264      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0265      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0266      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0267      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0268      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0269      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0270      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0271      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0272      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0273      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0274      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0275      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0276      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0277      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0278      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0279      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0280      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0281               *--------------------------------------------------------------
0282               * File handle structure for generic   @>a400-a4ff   (256 bytes)
0283               * Overload file handle structure
0284               *--------------------------------------------------------------
0285      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0286      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0287               
0288               *--------------------------------------------------------------
0289               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0290               *--------------------------------------------------------------
0291      A500     edb.struct        equ  >a500           ; Begin structure
0292      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0293      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0294      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0295      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0296      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0297      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0298      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0299      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0300      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0301      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0302      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0303                                                      ; with current filename.
0304      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0305                                                      ; with current file type.
0306      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0307      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0308      A51C     edb.bk.fb.topline equ  edb.struct + 28 ; Backup of @fb.topline before opening
0309                                                      ; other file from special file.
0310      A51E     edb.bk.fb.row     equ  edb.struct + 30 ; Backup of @fb.row before opening
0311                                                      ; other file from special file.
0312      A520     edb.special.file  equ  edb.struct + 32 ; Special file in editor buffer
0313      A522     edb.filename      equ  edb.struct + 34 ; 80 characters inline buffer reserved
0314                                                      ; for filename, but not always used.
0315      A572     edb.free          equ  edb.struct + 114; End of structure
0316               *--------------------------------------------------------------
0317               * Index structure                     @>a600-a6ff   (256 bytes)
0318               *--------------------------------------------------------------
0319      A600     idx.struct        equ  >a600           ; stevie index structure
0320      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0321      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0322      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0323      A606     idx.free          equ  idx.struct + 6  ; End of structure
0324               *--------------------------------------------------------------
0325               * Command buffer structure            @>a700-a7ff   (256 bytes)
0326               *--------------------------------------------------------------
0327      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0328      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0329      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0330      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0331      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0332      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0333      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0334      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0335      A70E     cmdb.vdptop       equ  cmdb.struct + 14; VDP address CMDB pane header line (TAT)
0336      A710     cmdb.yxtop        equ  cmdb.struct + 16; YX position CMDB pane header line
0337      A712     cmdb.yxprompt     equ  cmdb.struct + 18; YX position of command buffer prompt
0338      A714     cmdb.column       equ  cmdb.struct + 20; Current column in command buffer pane
0339      A716     cmdb.length       equ  cmdb.struct + 22; Length of current row in CMDB
0340      A718     cmdb.lines        equ  cmdb.struct + 24; Total lines in CMDB
0341      A71A     cmdb.dirty        equ  cmdb.struct + 26; Command buffer dirty (Text changed!)
0342      A71C     cmdb.dialog       equ  cmdb.struct + 28; Dialog identifier
0343      A71E     cmdb.dialog.var   equ  cmdb.struct + 30; Dialog private variable or pointer
0344      A720     cmdb.panhead      equ  cmdb.struct + 32; Pointer to string pane header
0345      A722     cmdb.paninfo      equ  cmdb.struct + 34; Pointer to string pane info (1st line)
0346      A724     cmdb.panhint      equ  cmdb.struct + 36; Pointer to string pane hint (2nd line)
0347      A726     cmdb.panhint2     equ  cmdb.struct + 38; Pointer to string pane hint (extra)
0348      A728     cmdb.panmarkers   equ  cmdb.struct + 40; Pointer to key marker list  (3rd line)
0349      A72A     cmdb.pankeys      equ  cmdb.struct + 42; Pointer to string pane keys (stat line)
0350      A72C     cmdb.action.ptr   equ  cmdb.struct + 44; Pointer to function to execute
0351      A72E     cmdb.cmdall       equ  cmdb.struct + 46; Current command including length-byte
0352      A72E     cmdb.cmdlen       equ  cmdb.struct + 46; Length of current command (MSB byte!)
0353      A72F     cmdb.cmd          equ  cmdb.struct + 47; Current command (80 bytes max.)
0354      A780     cmdb.panhead.buf  equ  cmdb.struct +128; String buffer for pane header
0355      A7B2     cmdb.dflt.fname   equ  cmdb.struct +178; Default for filename
0356      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0357               *--------------------------------------------------------------
0358               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0359               *--------------------------------------------------------------
0360      A900     sp2.stktop        equ  >a900           ; \
0361                                                      ; | The stack grows from high memory
0362                                                      ; | towards low memory.
0363                                                      ; |
0364                                                      ; | Stack leaking is checked in SP2
0365                                                      ; | user hook "edkey.keyscan.hook"
0366                                                      ; /
0367               *--------------------------------------------------------------
0368               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0369               *--------------------------------------------------------------
0370      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0371                                                      ; / stored in cartridge ROM bank7.asm
0372               
0373      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0374                                                      ; | scratchpad backup/restore routines.
0375                                                      ; /
0376               
0377      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0378               
0379      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0380                                                      ; calling TI Basic/External programs
0381               *--------------------------------------------------------------
0382               * Farjump return stack                @>af00-afff   (256 bytes)
0383               *--------------------------------------------------------------
0384      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0385                                                      ; Grows downwards from high to low.
0386               *--------------------------------------------------------------
0387               * Index                               @>b000-bfff  (4096 bytes)
0388               *--------------------------------------------------------------
0389      B000     idx.top           equ  >b000           ; Top of index
0390      1000     idx.size          equ  4096            ; Index size
0391               *--------------------------------------------------------------
0392               * Editor buffer                       @>c000-cfff  (4096 bytes)
0393               *--------------------------------------------------------------
0394      C000     edb.top           equ  >c000           ; Editor buffer high memory
0395      1000     edb.size          equ  4096            ; Editor buffer size
0396               *--------------------------------------------------------------
0397               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0398               *--------------------------------------------------------------
0399      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0400      0960     fb.size           equ  80*30           ; Frame buffer size
0401      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0402                                                      ; / >d960->dcff
0403               *--------------------------------------------------------------
0404               * Defaults area                       @>de00-dfff  (3584 bytes)
0405               *--------------------------------------------------------------
0406      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0407      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0408      DEA0     tv.mc.fname       equ  >dea0           ; Default Master Catalog (80 bytes)
0409               *--------------------------------------------------------------
0410               * Command buffer history              @>e000-efff  (4096 bytes)
0411               *--------------------------------------------------------------
0412      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0413      1000     cmdb.size         equ  4096            ; Command buffer size
0414               *--------------------------------------------------------------
0415               * Heap                                @>f000-ffff  (4096 bytes)
0416               *--------------------------------------------------------------
0417      F000     heap.top          equ  >f000           ; Top of heap
0418               
0419               
0420               *--------------------------------------------------------------
0421               * Stevie specific equates
0422               *--------------------------------------------------------------
0423      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0424      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0425      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0426      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0427      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0428               
0429      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0430      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b1.asm
0032                       copy  "equates.c99.asm"     ; Classic99 emulator configuration
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0033                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0034               
0035               ***************************************************************
0036               * BANK 1
0037               ********|*****|*********************|**************************
0038      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0039                       aorg  >6000
0040                       save  >6000,>8000           ; Save bank
0041                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0B53                 stri 'STEVIE 1.4G'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 3447     
0057               
0061               
0065               
0069               
                   < stevie_b1.asm
0042               
0043               ***************************************************************
0044               * Step 1: Switch to bank 0 (uniform code accross all banks)
0045               ********|*****|*********************|**************************
0046                       aorg  kickstart.code1       ; >6040
0047 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0048               ***************************************************************
0049               * Step 2: Satisfy assembler, must know relocated code
0050               ********|*****|*********************|**************************
0051                       aorg  >2000                 ; Relocate to >2000
0052                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 299C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 299C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26C6     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29A6     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26DC     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26DC     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29A6     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2918     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26DC     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26DC     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26CC     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 244A 0649  14         dect  stack
0540 244C C64B  30         mov   r11,*stack            ; Save return address
0541 244E 0649  14         dect  stack
0542 2450 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2454 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2456 0649  14         dect  stack
0551 2458 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 245A 0649  14         dect  stack
0553 245C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 245E 0649  14         dect  stack
0555 2460 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2462 06A0  32         bl    @xutst0               ; Display string
     2464 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2466 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2468 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 246A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 246C 06A0  32         bl    @down                 ; Move cursor down
     246E 26CC     
0566               
0567 2470 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2472 0585  14         inc   tmp1                  ; Consider length byte
0569 2474 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2476 2002     
0570 2478 1301  14         jeq   !                     ; Yes, skip adjustment
0571 247A 0585  14         inc   tmp1                  ; Make address even
0572 247C 0606  14 !       dec   tmp2
0573 247E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 2480 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2482 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2484 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2486 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2488 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 248A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 248C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 248E 1604  14         jne   !                     ; No, continue
0028               
0029 2490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2492 FFCE     
0030 2494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2496 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2498 0264  22 !       ori   tmp0,>4000
     249A 4000     
0035 249C 06C4  14         swpb  tmp0
0036 249E D804  30         movb  tmp0,@vdpa
     24A0 8C02     
0037 24A2 06C4  14         swpb  tmp0
0038 24A4 D804  30         movb  tmp0,@vdpa
     24A6 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24A8 020F  20         li    r15,vdpw              ; Set VDP write address
     24AA 8C00     
0043 24AC C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24AE 24B6     
     24B0 8320     
0044 24B2 0460  24         b     @mcloop               ; Write data to VDP and return
     24B4 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24B6 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24B8 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24BA C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24BC C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24BE 06C4  14 xpyv2m  swpb  tmp0
0027 24C0 D804  30         movb  tmp0,@vdpa
     24C2 8C02     
0028 24C4 06C4  14         swpb  tmp0
0029 24C6 D804  30         movb  tmp0,@vdpa
     24C8 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24CA 020F  20         li    r15,vdpr              ; Set VDP read address
     24CC 8800     
0034 24CE C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24D0 24D8     
     24D2 8320     
0035 24D4 0460  24         b     @mcloop               ; Read data from VDP
     24D6 8320     
0036 24D8 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24DA C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24DC C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24DE C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24E0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24E2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24E6 FFCE     
0034 24E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24EA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24EC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24EE 0001     
0039 24F0 1603  14         jne   cpym0                 ; No, continue checking
0040 24F2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24F4 04C6  14         clr   tmp2                  ; Reset counter
0042 24F6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24F8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24FA 7FFF     
0047 24FC C1C4  18         mov   tmp0,tmp3
0048 24FE 0247  22         andi  tmp3,1
     2500 0001     
0049 2502 1618  14         jne   cpyodd                ; Odd source address handling
0050 2504 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2506 0247  22         andi  tmp3,1
     2508 0001     
0052 250A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 250C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     250E 2020     
0057 2510 1605  14         jne   cpym3
0058 2512 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2514 253A     
     2516 8320     
0059 2518 0460  24         b     @mcloop               ; Copy memory and exit
     251A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 251C C1C6  18 cpym3   mov   tmp2,tmp3
0064 251E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2520 0001     
0065 2522 1301  14         jeq   cpym4
0066 2524 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2526 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2528 0646  14         dect  tmp2
0069 252A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 252C C1C7  18         mov   tmp3,tmp3
0074 252E 1301  14         jeq   cpymz
0075 2530 D554  38         movb  *tmp0,*tmp1
0076 2532 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2534 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2536 8000     
0081 2538 10E9  14         jmp   cpym2
0082 253A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 253C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 253E 0649  14         dect  stack
0065 2540 C64B  30         mov   r11,*stack            ; Push return address
0066 2542 0649  14         dect  stack
0067 2544 C640  30         mov   r0,*stack             ; Push r0
0068 2546 0649  14         dect  stack
0069 2548 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 254A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 254C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 254E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     2550 4000     
0077 2552 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2554 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2556 020C  20         li    r12,>1e00             ; SAMS CRU address
     2558 1E00     
0082 255A 04C0  14         clr   r0
0083 255C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 255E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 2560 D100  18         movb  r0,tmp0
0086 2562 0984  32         srl   tmp0,8                ; Right align
0087 2564 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2566 833C     
0088 2568 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 256A C339  30         mov   *stack+,r12           ; Pop r12
0094 256C C039  30         mov   *stack+,r0            ; Pop r0
0095 256E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 2570 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2572 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2574 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2576 0649  14         dect  stack
0135 2578 C64B  30         mov   r11,*stack            ; Push return address
0136 257A 0649  14         dect  stack
0137 257C C640  30         mov   r0,*stack             ; Push r0
0138 257E 0649  14         dect  stack
0139 2580 C64C  30         mov   r12,*stack            ; Push r12
0140 2582 0649  14         dect  stack
0141 2584 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2586 0649  14         dect  stack
0143 2588 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 258A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 258C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 258E 0284  22         ci    tmp0,255              ; Crash if page > 255
     2590 00FF     
0153 2592 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2594 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2596 001E     
0158 2598 150A  14         jgt   !
0159 259A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     259C 0004     
0160 259E 1107  14         jlt   !
0161 25A0 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25A2 0012     
0162 25A4 1508  14         jgt   sams.page.set.switch_page
0163 25A6 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25A8 0006     
0164 25AA 1501  14         jgt   !
0165 25AC 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25AE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25B0 FFCE     
0170 25B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25B4 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0176 25BA C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25BC 06C0  14         swpb  r0                    ; LSB to MSB
0178 25BE 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25C0 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25C2 4000     
0180 25C4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25CA C339  30         mov   *stack+,r12           ; Pop r12
0188 25CC C039  30         mov   *stack+,r0            ; Pop r0
0189 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25D0 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25D2 0649  14         dect  stack
0205 25D4 C64C  30         mov   r12,*stack            ; Push r12
0206 25D6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D8 1E00     
0207 25DA 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25DC C339  30         mov   *stack+,r12           ; Pop r12
0213 25DE 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25E0 0649  14         dect  stack
0231 25E2 C64C  30         mov   r12,*stack            ; Push r12
0232 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0233 25E8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25EA C339  30         mov   *stack+,r12           ; Pop r12
0239 25EC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25EE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25F0 0649  14         dect  stack
0271 25F2 C64B  30         mov   r11,*stack            ; Save return address
0272 25F4 0649  14         dect  stack
0273 25F6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25F8 0649  14         dect  stack
0275 25FA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25FC 020C  20         li    r12,>1e00             ; SAMS CRU address
     25FE 1E00     
0280 2600 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2602 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2604 4004     
0283 2606 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2608 4006     
0284 260A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     260C 4014     
0285 260E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2610 4016     
0286 2612 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2614 4018     
0287 2616 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2618 401A     
0288 261A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     261C 401C     
0289 261E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2620 401E     
0290               
0291 2622 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2624 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2626 C339  30         mov   *stack+,r12           ; Pop r12
0298 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 262A C2F9  30         mov   *stack+,r11           ; Pop r11
0300 262C 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 262E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 2630 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2632 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2634 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2636 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2638 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 263A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 263C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 263E C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 2640 0649  14         dect  stack
0335 2642 C64B  30         mov   r11,*stack            ; Push return address
0336 2644 0649  14         dect  stack
0337 2646 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2648 0649  14         dect  stack
0339 264A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 264C 0649  14         dect  stack
0341 264E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 2650 0649  14         dect  stack
0343 2652 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2654 0205  20         li    tmp1,sams.layout.copy.data
     2656 2676     
0348 2658 0206  20         li    tmp2,8                ; Set loop counter
     265A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 265C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 265E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     2660 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2662 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2664 833C     
0359               
0360 2666 0606  14         dec   tmp2                  ; Next iteration
0361 2668 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 266A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 266C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 266E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 2670 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2672 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2674 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2676 2000             data  >2000                 ; >2000-2fff
0377 2678 3000             data  >3000                 ; >3000-3fff
0378 267A A000             data  >a000                 ; >a000-afff
0379 267C B000             data  >b000                 ; >b000-bfff
0380 267E C000             data  >c000                 ; >c000-cfff
0381 2680 D000             data  >d000                 ; >d000-dfff
0382 2682 E000             data  >e000                 ; >e000-efff
0383 2684 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2686 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2688 FFBF     
0010 268A 0460  28         b     @putv01
     268C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 268E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     2690 0040     
0018 2692 0460  28         b     @putv01
     2694 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2696 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2698 FFDF     
0026 269A 0460  28         b     @putv01
     269C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 269E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26A0 0020     
0034 26A2 0460  28         b     @putv01
     26A4 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26A6 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26A8 FFFE     
0011 26AA 0460  28         b     @putv01
     26AC 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26AE 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26B0 0001     
0019 26B2 0460  28         b     @putv01
     26B4 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26B6 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26B8 FFFD     
0027 26BA 0460  28         b     @putv01
     26BC 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26BE 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26C0 0002     
0035 26C2 0460  28         b     @putv01
     26C4 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26C6 C83B  42 at      mov   *r11+,@wyx
     26C8 832A     
0019 26CA 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26CC B820  46 down    ab    @hb$01,@wyx
     26CE 2012     
     26D0 832A     
0028 26D2 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26D4 7820  46 up      sb    @hb$01,@wyx
     26D6 2012     
     26D8 832A     
0037 26DA 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26DC C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26DE D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26E0 832A     
0051 26E2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26E4 832A     
0052 26E6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26E8 C120  30 yx2px   mov   @wyx,tmp0
     26EA 832A     
0022 26EC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26EE 06C4  14         swpb  tmp0                  ; Y<->X
0024 26F0 04C5  14         clr   tmp1                  ; Clear before copy
0025 26F2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26F4 20A0  32         coc   @wbit1,config         ; f18a present ?
     26F6 201E     
0030 26F8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26FA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26FC 833A     
     26FE 2728     
0032 2700 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2702 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2704 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2706 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2708 0500     
0037 270A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 270E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2710 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2712 D105  18         movb  tmp1,tmp0
0051 2714 06C4  14         swpb  tmp0                  ; X<->Y
0052 2716 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2718 2020     
0053 271A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 271C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     271E 2012     
0059 2720 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2722 2024     
0060 2724 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2726 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2728 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 272A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 272C 06A0  32         bl    @putvr                ; Write once
     272E 2332     
0015 2730 391C             data  >391c                 ; VR1/57, value 00011100
0016 2732 06A0  32         bl    @putvr                ; Write twice
     2734 2332     
0017 2736 391C             data  >391c                 ; VR1/57, value 00011100
0018 2738 06A0  32         bl    @putvr
     273A 2332     
0019 273C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 273E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 2740 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2742 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2744 2332     
0030 2746 3900             data  >3900
0031 2748 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 274A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 274C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     274E 2332     
0044 2750 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2752 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2754 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2756 06A0  32         bl    @cpym2v
     2758 2486     
0060 275A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     275C 279E     
     275E 0008     
0061 2760 06A0  32         bl    @putvr
     2762 2332     
0062 2764 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2766 06A0  32         bl    @putvr
     2768 2332     
0064 276A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 276C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276E 2332     
0068 2770 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2772 0204  20         li    tmp0,>3f00
     2774 3F00     
0073 2776 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2778 22BA     
0074 277A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     277C 8800     
0075 277E 0984  32         srl   tmp0,8
0076 2780 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2782 8800     
0077 2784 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2786 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2788 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     278A BFFF     
0081 278C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 278E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     2790 4000     
0084               
0085               f18chk_exit:
0086 2792 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2794 228E     
0087 2796 3F00             data  >3f00,>00,6
     2798 0000     
     279A 0006     
0088 279C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 279E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27A0 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27A2 0340             data  >0340                 ; 3f04   0340  idle
0096 27A4 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27A6 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27A8 06A0  32         bl    @putvr
     27AA 2332     
0124 27AC 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27AE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27B0 2332     
0127 27B2 3900             data  >3900                 ; Lock the F18a
0128 27B4 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27B6 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27B8 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27BA 201E     
0149 27BC 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27BE C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27C0 8802     
0154 27C2 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27C4 2332     
0155 27C6 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27C8 04C4  14         clr   tmp0
0157 27CA D120  30         movb  @vdps,tmp0
     27CC 8802     
0158 27CE 0984  32         srl   tmp0,8
0159 27D0 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27D2 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27D4 832A     
0018 27D6 D17B  28         movb  *r11+,tmp1
0019 27D8 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27DA D1BB  28         movb  *r11+,tmp2
0021 27DC 0986  32         srl   tmp2,8                ; Repeat count
0022 27DE C1CB  18         mov   r11,tmp3
0023 27E0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27E2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27E4 020B  20         li    r11,hchar1
     27E6 27EC     
0028 27E8 0460  28         b     @xfilv                ; Draw
     27EA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27EC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27EE 2022     
0033 27F0 1302  14         jeq   hchar2                ; Yes, exit
0034 27F2 C2C7  18         mov   tmp3,r11
0035 27F4 10EE  14         jmp   hchar                 ; Next one
0036 27F6 05C7  14 hchar2  inct  tmp3
0037 27F8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27FA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27FC 8334     
0015 27FE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     2800 2006     
0016 2802 0204  20         li    tmp0,muttab
     2804 2814     
0017 2806 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2808 8400     
0018 280A D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 280C D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 280E D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 2810 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2812 045B  20         b     *r11
0023 2814 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2816 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2818 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     281A 8334     
0044 281C C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     281E 8336     
0045 2820 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2822 FFF8     
0046 2824 E0BB  30         soc   *r11+,config          ; Set options
0047 2826 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2828 2012     
     282A 831B     
0048 282C 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 282E 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     2830 2006     
0060 2832 1301  14         jeq   sdpla1                ; Yes, play
0061 2834 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2836 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2838 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     283A 831B     
     283C 2000     
0067 283E 1301  14         jeq   sdpla3                ; Play next note
0068 2840 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2842 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2844 2002     
0070 2846 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2848 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     284A 8336     
0075 284C 06C4  14         swpb  tmp0
0076 284E D804  30         movb  tmp0,@vdpa
     2850 8C02     
0077 2852 06C4  14         swpb  tmp0
0078 2854 D804  30         movb  tmp0,@vdpa
     2856 8C02     
0079 2858 04C4  14         clr   tmp0
0080 285A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     285C 8800     
0081 285E 131E  14         jeq   sdexit                ; Yes. exit
0082 2860 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2862 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2864 8336     
0084 2866 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2868 8800     
     286A 8400     
0085 286C 0604  14         dec   tmp0
0086 286E 16FB  14         jne   vdpla2
0087 2870 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2872 8800     
     2874 831B     
0088 2876 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2878 8336     
0089 287A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 287C C120  30 mmplay  mov   @wsdtmp,tmp0
     287E 8336     
0094 2880 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2882 130C  14         jeq   sdexit                ; Yes, exit
0096 2884 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2886 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2888 8336     
0098 288A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     288C 8400     
0099 288E 0605  14         dec   tmp1
0100 2890 16FC  14         jne   mmpla2
0101 2892 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2894 831B     
0102 2896 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2898 8336     
0103 289A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 289C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     289E 2004     
0108 28A0 1607  14         jne   sdexi2                ; No, exit
0109 28A2 C820  42         mov   @wsdlst,@wsdtmp
     28A4 8334     
     28A6 8336     
0110 28A8 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28AA 2012     
     28AC 831B     
0111 28AE 045B  20 sdexi1  b     *r11                  ; Exit
0112 28B0 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28B2 FFF8     
0113 28B4 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28B6 0649  14         dect  stack
0038 28B8 C64B  30         mov   r11,*stack            ; Push return address
0039 28BA 0649  14         dect  stack
0040 28BC C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28BE 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28C0 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28C2 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28C4 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28C6 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28C8 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28CA 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28CC E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28CE 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28D0 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28D2 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28D4 2912     
     28D6 83C6     
0074 28D8 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28DA 2914     
     28DC 83FA     
0075 28DE C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28E0 2916     
     28E2 83FE     
0076               
0077 28E4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28E6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28E8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28EA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28EC 83E0     
0084               
0085 28EE 06A0  28         bl    @kscan                ; Call KSCAN
     28F0 000E     
0086 28F2 02E0  18         lwpi  ws1                   ; Activate user workspace
     28F4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28F6 D120  30         movb  @>837c,tmp0           ; Get flag
     28F8 837C     
0091 28FA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28FC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28FE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     2900 8375     
0097 2902 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2904 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2906 A028     
0103 2908 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     290A 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 290C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 290E C2F9  30         mov   *stack+,r11           ; Pop r11
0110 2910 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2912 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2914 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2916 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2918 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 291A C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     291C 8340     
0025 291E 04E0  26         clr   @waux1
     2920 833C     
0026 2922 04E0  26         clr   @waux2
     2924 833E     
0027 2926 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2928 833C     
0028 292A C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 292C 0205  20         li    tmp1,4                ; 4 nibbles
     292E 0004     
0033 2930 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2932 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2934 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2936 0286  22         ci    tmp2,>000a
     2938 000A     
0039 293A 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 293C C21B  26         mov   *r11,tmp4
0045 293E 0988  32         srl   tmp4,8                ; Right justify
0046 2940 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2942 FFF6     
0047 2944 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2946 C21B  26         mov   *r11,tmp4
0054 2948 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     294A 00FF     
0055               
0056 294C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 294E 06C6  14         swpb  tmp2
0058 2950 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2952 0944  24         srl   tmp0,4                ; Next nibble
0060 2954 0605  14         dec   tmp1
0061 2956 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2958 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     295A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 295C C160  30         mov   @waux3,tmp1           ; Get pointer
     295E 8340     
0067 2960 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2962 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2964 C120  30         mov   @waux2,tmp0
     2966 833E     
0070 2968 06C4  14         swpb  tmp0
0071 296A DD44  32         movb  tmp0,*tmp1+
0072 296C 06C4  14         swpb  tmp0
0073 296E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2970 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2972 8340     
0078 2974 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2976 2016     
0079 2978 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 297A C120  30         mov   @waux1,tmp0
     297C 833C     
0084 297E 06C4  14         swpb  tmp0
0085 2980 DD44  32         movb  tmp0,*tmp1+
0086 2982 06C4  14         swpb  tmp0
0087 2984 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2986 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2988 2020     
0092 298A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 298C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 298E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2990 7FFF     
0098 2992 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2994 8340     
0099 2996 0460  28         b     @xutst0               ; Display string
     2998 2420     
0100 299A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 299C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     299E 832A     
0122 29A0 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29A2 8000     
0123 29A4 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29A6 0207  20 mknum   li    tmp3,5                ; Digit counter
     29A8 0005     
0020 29AA C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29AC C155  26         mov   *tmp1,tmp1            ; /
0022 29AE C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29B0 0228  22         ai    tmp4,4                ; Get end of buffer
     29B2 0004     
0024 29B4 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29B6 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29B8 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29BA 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29BC 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29BE B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29C0 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29C2 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29C4 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29C6 0607  14         dec   tmp3                  ; Decrease counter
0036 29C8 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29CA 0207  20         li    tmp3,4                ; Check first 4 digits
     29CC 0004     
0041 29CE 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29D0 C11B  26         mov   *r11,tmp0
0043 29D2 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29D4 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29D6 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29D8 05CB  14 mknum3  inct  r11
0047 29DA 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29DC 2020     
0048 29DE 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29E0 045B  20         b     *r11                  ; Exit
0050 29E2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29E4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29E6 13F8  14         jeq   mknum3                ; Yes, exit
0053 29E8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29EA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29EC 7FFF     
0058 29EE C10B  18         mov   r11,tmp0
0059 29F0 0224  22         ai    tmp0,-4
     29F2 FFFC     
0060 29F4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29F6 0206  20         li    tmp2,>0500            ; String length = 5
     29F8 0500     
0062 29FA 0460  28         b     @xutstr               ; Display string
     29FC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29FE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A00 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A02 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A04 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A06 0207  20         li    tmp3,5                ; Set counter
     2A08 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A0A 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A0C 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A0E 0584  14         inc   tmp0                  ; Next character
0106 2A10 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A12 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A14 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A16 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A18 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A1A 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A1C DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A1E 0607  14         dec   tmp3                  ; Last character ?
0122 2A20 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A22 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A24 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A26 832A     
0141 2A28 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A2A 8000     
0142 2A2C 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A2E 0649  14         dect  stack
0023 2A30 C64B  30         mov   r11,*stack            ; Save return address
0024 2A32 0649  14         dect  stack
0025 2A34 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A36 0649  14         dect  stack
0027 2A38 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A3A 0649  14         dect  stack
0029 2A3C C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A3E 0649  14         dect  stack
0031 2A40 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A42 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A44 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A46 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A48 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A4A 0649  14         dect  stack
0044 2A4C C64B  30         mov   r11,*stack            ; Save return address
0045 2A4E 0649  14         dect  stack
0046 2A50 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A52 0649  14         dect  stack
0048 2A54 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A56 0649  14         dect  stack
0050 2A58 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A5A 0649  14         dect  stack
0052 2A5C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A5E C1D4  26 !       mov   *tmp0,tmp3
0057 2A60 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A62 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A64 00FF     
0059 2A66 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A68 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A6A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A6C 0584  14         inc   tmp0                  ; Next byte
0067 2A6E 0607  14         dec   tmp3                  ; Shorten string length
0068 2A70 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A72 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A74 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A76 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A78 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A7A C187  18         mov   tmp3,tmp2
0078 2A7C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A7E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A80 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A82 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A84 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A86 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A88 FFCE     
0090 2A8A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A8C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A8E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A90 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A92 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A94 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A96 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A98 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A9A 0649  14         dect  stack
0124 2A9C C64B  30         mov   r11,*stack            ; Save return address
0125 2A9E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AA0 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AA2 0649  14         dect  stack
0128 2AA4 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AA6 0649  14         dect  stack
0130 2AA8 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AAA 0649  14         dect  stack
0132 2AAC C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AAE C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2AB0 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AB2 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AB4 0649  14         dect  stack
0144 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0145 2AB8 0649  14         dect  stack
0146 2ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ABC 0649  14         dect  stack
0148 2ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2AC0 0649  14         dect  stack
0150 2AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AC4 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AC6 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AC8 0586  14         inc   tmp2
0161 2ACA 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ACC 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ACE 0286  22         ci    tmp2,255
     2AD0 00FF     
0167 2AD2 1505  14         jgt   string.getlenc.panic
0168 2AD4 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AD6 0606  14         dec   tmp2                  ; One time adjustment
0174 2AD8 C806  30         mov   tmp2,@waux1           ; Store length
     2ADA 833C     
0175 2ADC 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2ADE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AE0 FFCE     
0181 2AE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AE4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AE6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AE8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AEC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AEE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AF0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2AF2 F000     
0024 2AF4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AF6 F002     
0025 2AF8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AFA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AFC 0200  20         li    r0,>8306              ; Scratchpad source address
     2AFE 8306     
0030 2B00 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B02 F006     
0031 2B04 0202  20         li    r2,62                 ; Loop counter
     2B06 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B08 CC70  46         mov   *r0+,*r1+
0037 2B0A CC70  46         mov   *r0+,*r1+
0038 2B0C 0642  14         dect  r2
0039 2B0E 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B10 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B12 83FE     
     2B14 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B16 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B18 F000     
0046 2B1A C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B1C F002     
0047 2B1E C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B20 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B22 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B24 0200  20         li    r0,cpu.scrpad.tgt
     2B26 F000     
0075 2B28 0201  20         li    r1,>8300
     2B2A 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B2C CC70  46         mov   *r0+,*r1+
0081 2B2E CC70  46         mov   *r0+,*r1+
0082 2B30 0281  22         ci    r1,>8400
     2B32 8400     
0083 2B34 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B36 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B38 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B3A CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B3C CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B3E CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B40 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B42 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B44 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B46 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B48 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B4A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B4C 8310     
0055                                                   ;        as of register r8
0056 2B4E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B50 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B52 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B5C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B62 0606  14         dec   tmp2
0069 2B64 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B66 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B68 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B6A 2B70     
0075                                                   ; R14=PC
0076 2B6C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B6E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B70 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B72 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B74 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B76 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B78 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B7A 8300     
0126 2B7C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B7E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B80 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B82 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B84 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B86 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B88 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B8A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B8C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B8E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B90 0606  14         dec   tmp2
0139 2B92 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B94 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B96 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B98 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B9A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B9C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B9E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BA0 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BA2 A428     
0064 2BA4 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BA6 201C     
0065 2BA8 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BAA 8356     
0066 2BAC C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BAE 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BB0 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BB2 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BB4 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BB6 06C0  14         swpb  r0                    ;
0075 2BB8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BBA 8C02     
0076 2BBC 06C0  14         swpb  r0                    ;
0077 2BBE D800  30         movb  r0,@vdpa              ; Send high byte
     2BC0 8C02     
0078 2BC2 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BC4 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BC6 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BC8 0704  14         seto  r4                    ; Init counter
0086 2BCA 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BCC A420     
0087 2BCE 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BD0 0584  14         inc   r4                    ; Increment char counter
0089 2BD2 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BD4 0007     
0090 2BD6 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BD8 80C4  18         c     r4,r3                 ; End of name?
0093 2BDA 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BDC 06C0  14         swpb  r0                    ;
0098 2BDE D800  30         movb  r0,@vdpa              ; Send low byte
     2BE0 8C02     
0099 2BE2 06C0  14         swpb  r0                    ;
0100 2BE4 D800  30         movb  r0,@vdpa              ; Send high byte
     2BE6 8C02     
0101 2BE8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BEA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BEC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BEE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BF0 2D0A     
0109 2BF2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BF4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BF6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BF8 04E0  26         clr   @>83d0
     2BFA 83D0     
0118 2BFC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BFE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C00 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C02 A432     
0121               
0122 2C04 0584  14         inc   r4                    ; Adjust for dot
0123 2C06 A804  30         a     r4,@>8356             ; Point to position after name
     2C08 8356     
0124 2C0A C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C0C 8356     
     2C0E A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C10 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C12 83E0     
0130 2C14 04C1  14         clr   r1                    ; Version found of dsr
0131 2C16 020C  20         li    r12,>0f00             ; Init cru address
     2C18 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C1A C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C1C 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C1E 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C20 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C22 0100     
0145 2C24 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C26 83D0     
0146 2C28 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C2A 2000     
0147 2C2C 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C2E C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C30 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C32 1D00  16         sbo   0                     ; Turn on ROM
0154 2C34 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C36 4000     
0155 2C38 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C3A 2D06     
0156 2C3C 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C3E A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C40 A40A     
0166 2C42 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C44 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C46 83D2     
0172                                                   ; subprogram
0173               
0174 2C48 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C4A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C4C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C4E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C50 83D2     
0183                                                   ; subprogram
0184               
0185 2C52 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C54 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C56 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C58 D160  30         movb  @>8355,r5             ; Get length as counter
     2C5A 8355     
0195 2C5C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C5E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C60 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C62 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C64 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C66 A420     
0206 2C68 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C6A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C6C 0605  14         dec   r5                    ; Update loop counter
0211 2C6E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C70 0581  14         inc   r1                    ; Next version found
0217 2C72 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C74 A42A     
0218 2C76 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C78 A42C     
0219 2C7A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C7C A430     
0220               
0221 2C7E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C80 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C82 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C84 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C86 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C88 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C8A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C8C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C8E A400     
0236 2C90 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C92 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C94 A428     
0242                                                   ; (8 or >a)
0243 2C96 0281  26         ci    r1,8                  ; was it 8?
     2C98 0008     
0244 2C9A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C9C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C9E 8350     
0246                                                   ; Get error byte from @>8350
0247 2CA0 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CA2 06C0  22         swpb  r0                    ;
0255 2CA4 D800  34         movb  r0,@vdpa              ; send low byte
     2CA6 8C02     
0256 2CA8 06C0  22         swpb  r0                    ;
0257 2CAA D800  34         movb  r0,@vdpa              ; send high byte
     2CAC 8C02     
0258 2CAE D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CB0 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CB2 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CB4 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CB6 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CB8 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CBA 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CBC A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CBE 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CC0 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CC2 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CC4 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CC6 201C     
0284                                                   ; / to indicate error
0285 2CC8 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CCA A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CCC 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CCE 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CD0 83E0     
0319               
0320 2CD2 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CD4 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CD6 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CD8 A42A     
0325 2CDA C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CDC C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CDE C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CE0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CE2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CE4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CE6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CE8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CEA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CEC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CEE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CF0 4000     
     2CF2 2D06     
0340 2CF4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CF6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CF8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CFA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CFC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CFE A400     
0358 2D00 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D02 A434     
0359               
0360 2D04 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D06 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D08 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D0A 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D0E C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D10 0649  22         dect  stack
0053 2D12 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D14 0204  24         li    tmp0,dsrlnk.savcru
     2D16 A42A     
0058 2D18 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D1A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D1C 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D1E 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D20 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D22 37D7     
0066 2D24 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D26 8370     
0067                                                   ; / location
0068 2D28 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D2A A44C     
0069 2D2C 04C5  22         clr   tmp1                  ; io.op.open
0070 2D2E 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D30 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D32 0649  22         dect  stack
0098 2D34 C64B  38         mov   r11,*stack            ; Save return address
0099 2D36 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D38 0001     
0100 2D3A 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D3C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D3E 0649  22         dect  stack
0126 2D40 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D42 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D44 0002     
0129 2D46 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D48 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D4A 0649  22         dect  stack
0156 2D4C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D4E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D50 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D52 0005     
0160               
0161 2D54 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D56 A43E     
0162               
0163 2D58 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D5A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D5C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D5E 0003     
0168 2D60 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D62 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D64 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D66 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D68 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D6A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D6C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D6E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D70 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D72 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D74 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D76 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D78 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D7A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D7C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D7E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D80 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D82 A44C     
0246               
0247 2D84 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D86 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D88 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D8A 0009     
0254 2D8C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D8E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D90 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D92 8322     
     2D94 833C     
0259               
0260 2D96 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D98 A42A     
0261 2D9A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D9C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D9E 2B9A     
0268 2DA0 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DA2 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DA4 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DA6 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DA8 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DAA C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DAC 833C     
     2DAE 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DB0 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DB2 A436     
0292 2DB4 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DB6 0005     
0293 2DB8 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DBA 22E4     
0294 2DBC C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DBE C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DC4 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DC6 0649  22         dect  stack
0038 2DC8 C64B  38         mov   r11,*stack            ; Save return address
0039 2DCA 0649  22         dect  stack
0040 2DCC C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DCE C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DD0 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DD2 0014     
0046               fg99.send.loop:
0047 2DD4 04E0  34         clr   @>6000                ; Signal new byte
     2DD6 6000     
0048 2DD8 0201  24         li    r1,>0038              ; >7000 >> 9
     2DDA 0038     
0049 2DDC D070  44         movb  *r0+,r1
0050 2DDE 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DE0 04D1  30         clr   *r1                   ; Send byte
0053 2DE2 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DE4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2DE6 04E0  34         clr   @>6000                ; Done sending filename
     2DE8 6000     
0057 2DEA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2DEC 0200  24         li    r0,>6000              ; check >6000->6200
     2DEE 6000     
0063 2DF0 0202  24         li    r2,>100
     2DF2 0100     
0064 2DF4 C070  46 !       mov   *r0+, r1
0065 2DF6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2DF8 0602  22         dec   r2
0067 2DFA 16FC  14         jne   -!
0068 2DFC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2DFE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E00 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E02 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E04 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E06 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E08 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E0A 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E0C 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E0E 201C     
0029 2E10 1602  14         jne   tmgr1a                ; No, so move on
0030 2E12 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E14 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E16 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E18 2020     
0035 2E1A 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E1C 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E1E 2010     
0048 2E20 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E22 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E24 200E     
0050 2E26 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E28 0460  28         b     @kthread              ; Run kernel thread
     2E2A 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E2C 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E2E 2014     
0056 2E30 13EB  14         jeq   tmgr1
0057 2E32 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E34 2012     
0058 2E36 16E8  14         jne   tmgr1
0059 2E38 C120  38         mov   @wtiusr,tmp0
     2E3A 832E     
0060 2E3C 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E3E 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E40 2EA0     
0065 2E42 C10A  30         mov   r10,tmp0
0066 2E44 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E46 00FF     
0067 2E48 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E4A 201C     
0068 2E4C 1303  14         jeq   tmgr5
0069 2E4E 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E50 003C     
0070 2E52 1002  14         jmp   tmgr6
0071 2E54 0284  26 tmgr5   ci    tmp0,50
     2E56 0032     
0072 2E58 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E5A 1001  14         jmp   tmgr8
0074 2E5C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E5E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E60 832C     
0079 2E62 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E64 FF00     
0080 2E66 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E68 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E6A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E6C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E6E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E70 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E72 830C     
     2E74 830D     
0089 2E76 1608  14         jne   tmgr10                ; No, get next slot
0090 2E78 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E7A FF00     
0091 2E7C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E7E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E80 8330     
0096 2E82 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E84 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E86 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E88 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E8A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E8C 8315     
     2E8E 8314     
0103 2E90 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E92 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E94 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E96 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E98 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E9A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E9C FF00     
0109 2E9E 10B4  14         jmp   tmgr1
0110 2EA0 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EA2 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EA4 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EA6 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EA8 2006     
0023 2EAA 1602  14         jne   kthread_kb
0024 2EAC 06A0  36         bl    @sdpla1               ; Run sound player
     2EAE 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2EB0 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2EB2 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2EB4 0460  28         b     @tmgr3                ; Exit
     2EB6 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2EB8 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2EBA 832E     
0018 2EBC E0A0  42         soc   @wbit7,config         ; Enable user hook
     2EBE 2012     
0019 2EC0 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EC2 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EC4 832E     
0029 2EC6 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EC8 FEFF     
0030 2ECA 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2ECC C13B  46 mkslot  mov   *r11+,tmp0
0018 2ECE C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2ED0 C184  30         mov   tmp0,tmp2
0023 2ED2 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2ED4 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2ED6 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2ED8 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EDA 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EDC C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EDE 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EE0 2022     
0035 2EE2 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EE4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EE6 05CB  22 mkslo1  inct  r11
0041 2EE8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EEA C13B  46 clslot  mov   *r11+,tmp0
0053 2EEC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EEE A120  38         a     @wtitab,tmp0          ; Add table base
     2EF0 832C     
0055 2EF2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EF4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EF6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EF8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EFA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2EFC A120  38         a     @wtitab,tmp0          ; Add table base
     2EFE 832C     
0071 2F00 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F02 C154  38         mov   *tmp0,tmp1
0073 2F04 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F06 FF00     
0074 2F08 C505  38         mov   tmp1,*tmp0
0075 2F0A 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 2F0C 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F0E 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 2F10 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F12 0000     
0283 2F14 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F16 8300     
0284 2F18 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F1A 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 2F1C 0202  20 runli2  li    r2,>8308
     2F1E 8308     
0289 2F20 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 2F22 0282  22         ci    r2,>8400
     2F24 8400     
0291 2F26 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 2F28 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F2A FFFF     
0296 2F2C 1602  14         jne   runli4                ; No, continue
0297 2F2E 0420  42         blwp  @0                    ; Yes, bye bye
     2F30 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 2F32 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F34 833C     
0302 2F36 04C1  14         clr   r1                    ; Reset counter
0303 2F38 0202  20         li    r2,10                 ; We test 10 times
     2F3A 000A     
0304 2F3C C0E0  30 runli5  mov   @vdps,r3
     2F3E 8802     
0305 2F40 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F42 2020     
0306 2F44 1302  14         jeq   runli6
0307 2F46 0581  14         inc   r1                    ; Increase counter
0308 2F48 10F9  14         jmp   runli5
0309 2F4A 0602  14 runli6  dec   r2                    ; Next test
0310 2F4C 16F7  14         jne   runli5
0311 2F4E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F50 1250     
0312 2F52 1202  14         jle   runli7                ; No, so it must be NTSC
0313 2F54 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F56 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 2F58 06A0  32 runli7  bl    @loadmc
     2F5A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 2F5C 04C1  14 runli9  clr   r1
0322 2F5E 04C2  14         clr   r2
0323 2F60 04C3  14         clr   r3
0324 2F62 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F64 A900     
0325 2F66 020F  20         li    r15,vdpw              ; Set VDP write address
     2F68 8C00     
0327 2F6A 06A0  32         bl    @mute                 ; Mute sound generators
     2F6C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 2F6E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F70 4A4A     
0334 2F72 1605  14         jne   runlia
0335 2F74 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F76 228E     
0336 2F78 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F7A 0000     
     2F7C 3000     
0341 2F7E 06A0  32 runlia  bl    @filv
     2F80 228E     
0342 2F82 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F84 00F4     
     2F86 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0349 2F88 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F8A 272A     
0350 2F8C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F8E 2754     
0351 2F90 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F92 2754     
0352 2F94 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F96 2754     
0353 2F98 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F9A 2740     
0354               
0355 2F9C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F9E 2332     
0356 2FA0 3201                   data >3201            ; F18a VR50 (>32), bit 1
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 2FA2 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2FA4 22F8     
0370 2FA6 7F10             data  spvmod                ; Equate selected video mode table
0371 2FA8 0204  20         li    tmp0,spfont           ; Get font option
     2FAA 0000     
0372 2FAC 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 2FAE 1304  14         jeq   runlid                ; Yes, skip it
0374 2FB0 06A0  32         bl    @ldfnt
     2FB2 2360     
0375 2FB4 1100             data  fntadr,spfont         ; Load specified font
     2FB6 0000     
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 2FB8 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FBA 4A4A     
0380 2FBC 1602  14         jne   runlie                ; No, continue
0381 2FBE 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FC0 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 2FC2 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FC4 0040     
0386 2FC6 0460  28         b     @main                 ; Give control to main program
     2FC8 6046     
                   < stevie_b1.asm
0053                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 2FCA 0649  14         dect  stack
0029 2FCC C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FCE 0649  14         dect  stack
0031 2FD0 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FD2 0649  14         dect  stack
0033 2FD4 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FD6 0649  14         dect  stack
0035 2FD8 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 2FDA C13B  30         mov   *r11+,tmp0            ; P0
0040 2FDC C17B  30         mov   *r11+,tmp1            ; P1
0041 2FDE C1BB  30         mov   *r11+,tmp2            ; P2
0042 2FE0 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 2FE2 0649  14         dect  stack
0048 2FE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 2FE6 0649  14         dect  stack
0050 2FE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 2FEA 0649  14         dect  stack
0052 2FEC C646  30         mov   tmp2,*stack           ; Push tmp2
0053 2FEE 0649  14         dect  stack
0054 2FF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 2FF2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FF4 6000     
0060 2FF6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 2FF8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FFA A228     
0064 2FFC 0647  14         dect  tmp3
0065 2FFE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 3000 0647  14         dect  tmp3
0067 3002 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 3004 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3006 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3008 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 300A 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 300C 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 300E 0224  22         ai    tmp0,>0800
     3010 0800     
0086 3012 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 3014 0285  22         ci    tmp1,>ffff
     3016 FFFF     
0095 3018 1602  14         jne   !
0096 301A C160  34         mov   @trmpvector,tmp1
     301C A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 301E C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 3020 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 3022 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 3024 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3026 FFCE     
0111 3028 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     302A 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 302C 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 302E C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     3030 A228     
0122 3032 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 3034 1312  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 3036 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 3038 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 303A 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134 303C 028B  22         ci    r11,>6000
     303E 6000     
0135 3040 110C  14         jlt   rom.farjump.bankswitch.failed2
0136 3042 028B  22         ci    r11,>7fff
     3044 7FFF     
0137 3046 1509  14         jgt   rom.farjump.bankswitch.failed2
0138               
0139 3048 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     304A A228     
0140               
0144               
0145                       ;------------------------------------------------------
0146                       ; Bankswitch to source 8K ROM bank
0147                       ;------------------------------------------------------
0148               rom.farjump.bankswitch.src.rom8k:
0149 304C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0150 304E 1009  14         jmp   rom.farjump.exit
0151                       ;------------------------------------------------------
0152                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0153                       ;------------------------------------------------------
0154               rom.farjump.bankswitch.src.advfg99:
0155 3050 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0156 3052 0225  22         ai    tmp1,>0800
     3054 0800     
0157 3056 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0158 3058 1004  14         jmp   rom.farjump.exit
0159                       ;------------------------------------------------------
0160                       ; Assert 2 failed after bank-switch
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.failed2:
0163 305A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     305C FFCE     
0164 305E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3060 2026     
0165                       ;-------------------------------------------------------
0166                       ; Exit
0167                       ;-------------------------------------------------------
0168               rom.farjump.exit:
0169 3062 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0170 3064 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0171 3066 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0172 3068 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0173                       ;
0174                       ; Attention!
0175                       ; r11 was popped from farjump stack, not from value stack!
0176                       ; See rom.farjump.return
0177                       ;
0178 306A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 306C 0649  14         dect  stack
0021 306E C64B  30         mov   r11,*stack            ; Save return address
0022 3070 0649  14         dect  stack
0023 3072 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3074 0649  14         dect  stack
0025 3076 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3078 0204  20         li    tmp0,fb.top
     307A D000     
0030 307C C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     307E A300     
0031 3080 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3082 A304     
0032 3084 04E0  34         clr   @fb.row               ; Current row=0
     3086 A306     
0033 3088 04E0  34         clr   @fb.column            ; Current column=0
     308A A30C     
0034               
0035 308C 0204  20         li    tmp0,colrow
     308E 0050     
0036 3090 C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     3092 A30E     
0037 3094 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3096 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3098 C160  34         mov   @tv.ruler.visible,tmp1
     309A A210     
0042 309C 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 309E 0204  20         li    tmp0,pane.botrow-2
     30A0 001B     
0044 30A2 1002  14         jmp   fb.init.cont
0045 30A4 0204  20 !       li    tmp0,pane.botrow-1
     30A6 001C     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 30A8 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     30AA A31C     
0051 30AC C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     30AE A31E     
0052               
0053 30B0 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30B2 A224     
0054 30B4 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30B6 A312     
0055 30B8 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30BA A318     
0056 30BC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30BE A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 30C0 06A0  32         bl    @film
     30C2 2236     
0061 30C4 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30C6 0000     
     30C8 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 30CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 30CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 30CE C2F9  30         mov   *stack+,r11           ; Pop r11
0069 30D0 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 30D2 0649  14         dect  stack
0025 30D4 C64B  30         mov   r11,*stack            ; Save return address
0026 30D6 0649  14         dect  stack
0027 30D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30DA C120  34         mov   @parm1,tmp0
     30DC A006     
0032 30DE A120  34         a     @fb.topline,tmp0
     30E0 A304     
0033 30E2 C804  38         mov   tmp0,@outparm1
     30E4 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30E8 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30EA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "fb.calc.pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 30EC 0649  14         dect  stack
0028 30EE C64B  30         mov   r11,*stack            ; Save return address
0029 30F0 0649  14         dect  stack
0030 30F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 30F4 0649  14         dect  stack
0032 30F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 30F8 C120  34         mov   @fb.row,tmp0
     30FA A306     
0037 30FC 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30FE A30E     
0038 3100 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     3102 A30C     
0039 3104 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3106 A300     
0040 3108 C805  38         mov   tmp1,@fb.current
     310A A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 310C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 310E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 3110 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3112 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3114 0649  14         dect  stack
0052 3116 C64B  30         mov   r11,*stack            ; Save return address
0053 3118 0649  14         dect  stack
0054 311A C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 311C 0204  20         li    tmp0,idx.top
     311E B000     
0059 3120 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3122 A502     
0060               
0061 3124 C120  34         mov   @tv.sams.b000,tmp0
     3126 A206     
0062 3128 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     312A A600     
0063 312C C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     312E A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3130 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3132 0004     
0068 3134 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3136 A604     
0069               
0070 3138 06A0  32         bl    @_idx.sams.mapcolumn.on
     313A 3156     
0071                                                   ; Index in continuous memory region
0072               
0073 313C 06A0  32         bl    @film
     313E 2236     
0074 3140 B000                   data idx.top,>00,idx.size * 5
     3142 0000     
     3144 5000     
0075                                                   ; Clear index
0076               
0077 3146 06A0  32         bl    @_idx.sams.mapcolumn.off
     3148 318A     
0078                                                   ; Restore memory window layout
0079               
0080 314A C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     314C A602     
     314E A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3150 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3152 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3154 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3156 0649  14         dect  stack
0102 3158 C64B  30         mov   r11,*stack            ; Push return address
0103 315A 0649  14         dect  stack
0104 315C C644  30         mov   tmp0,*stack           ; Push tmp0
0105 315E 0649  14         dect  stack
0106 3160 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3162 0649  14         dect  stack
0108 3164 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3166 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3168 A602     
0113 316A 0205  20         li    tmp1,idx.top
     316C B000     
0114 316E 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     3170 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 3172 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3174 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3176 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3178 0225  22         ai    tmp1,>1000            ; Next memory region
     317A 1000     
0124 317C 0606  14         dec   tmp2                  ; Update loop counter
0125 317E 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 3180 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 3182 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3184 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3186 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3188 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 318A 0649  14         dect  stack
0151 318C C64B  30         mov   r11,*stack            ; Push return address
0152 318E 0649  14         dect  stack
0153 3190 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 3192 0649  14         dect  stack
0155 3194 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3196 0649  14         dect  stack
0157 3198 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 319A 0649  14         dect  stack
0159 319C C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 319E 0205  20         li    tmp1,idx.top
     31A0 B000     
0164 31A2 0206  20         li    tmp2,5                ; Always 5 pages
     31A4 0005     
0165 31A6 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     31A8 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 31AA C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 31AC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     31AE 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 31B0 0225  22         ai    tmp1,>1000            ; Next memory region
     31B2 1000     
0176 31B4 0606  14         dec   tmp2                  ; Update loop counter
0177 31B6 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 31B8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 31BA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 31BC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 31BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 31C0 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 31C2 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 31C4 0649  14         dect  stack
0212 31C6 C64B  30         mov   r11,*stack            ; Save return address
0213 31C8 0649  14         dect  stack
0214 31CA C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31CC 0649  14         dect  stack
0216 31CE C645  30         mov   tmp1,*stack           ; Push tmp1
0217 31D0 0649  14         dect  stack
0218 31D2 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 31D4 C184  18         mov   tmp0,tmp2             ; Line number
0223 31D6 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 31D8 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     31DA 0800     
0225               
0226 31DC 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 31DE 0A16  18         sla   tmp2,1                ; line number * 2
0231 31E0 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     31E2 A018     
0232               
0233 31E4 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31E6 A602     
0234 31E8 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31EA A600     
0235               
0236 31EC 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 31EE C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31F0 A600     
0242 31F2 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31F4 A206     
0243 31F6 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31F8 0205  20         li    tmp1,>b000            ; Memory window for index page
     31FA B000     
0246               
0247 31FC 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31FE 2576     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 3200 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     3202 A604     
0254 3204 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3206 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     3208 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 320A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 320C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 320E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 3210 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 3212 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3214 0649  14         dect  stack
0023 3216 C64B  30         mov   r11,*stack            ; Save return address
0024 3218 0649  14         dect  stack
0025 321A C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 321C 0204  20         li    tmp0,edb.top          ; \
     321E C000     
0030 3220 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3222 A500     
0031 3224 C804  38         mov   tmp0,@edb.next_free.ptr
     3226 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 3228 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     322A A50A     
0035               
0036 322C 0204  20         li    tmp0,1
     322E 0001     
0037 3230 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3232 A504     
0038               
0039 3234 0720  34         seto  @edb.block.m1         ; Reset block start line
     3236 A50E     
0040 3238 0720  34         seto  @edb.block.m2         ; Reset block end line
     323A A510     
0041               
0042 323C 0204  20         li    tmp0,txt.newfile      ; "New file"
     323E 3ADE     
0043 3240 C804  38         mov   tmp0,@edb.filename.ptr
     3242 A514     
0044               
0045 3244 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3246 A440     
0046 3248 04E0  34         clr   @fh.kilobytes.prev    ; /
     324A A45C     
0047               
0048 324C 0204  20         li    tmp0,txt.filetype.none
     324E 3C4E     
0049 3250 C804  38         mov   tmp0,@edb.filetype.ptr
     3252 A516     
0050               
0051               edb.init.exit:
0052                       ;------------------------------------------------------
0053                       ; Exit
0054                       ;------------------------------------------------------
0055 3254 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 3256 C2F9  30         mov   *stack+,r11           ; Pop r11
0057 3258 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 325A 0649  14         dect  stack
0023 325C C64B  30         mov   r11,*stack            ; Save return address
0024 325E 0649  14         dect  stack
0025 3260 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3262 0649  14         dect  stack
0027 3264 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 3266 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3268 E000     
0032 326A C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     326C A700     
0033               
0034 326E 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     3270 A702     
0035 3272 0204  20         li    tmp0,6
     3274 0006     
0036 3276 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3278 A706     
0037 327A C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     327C A708     
0038               
0039 327E 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     3280 A718     
0040 3282 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3284 A71A     
0041 3286 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3288 A72C     
0042 328A 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     328C A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 328E 0204  20         li    tmp0,pane.botrow      ; \
     3290 001D     
0047 3292 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     3294 A706     
0048 3296 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     3298 833A     
0049 329A C105  18         mov   tmp1,tmp0             ; | Get result
0050 329C 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     329E 1800     
0051 32A0 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     32A2 A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 32A4 06A0  32         bl    @film
     32A6 2236     
0056 32A8 E000                   data  cmdb.top,>00,cmdb.size
     32AA 0000     
     32AC 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 32AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 32B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 32B2 C2F9  30         mov   *stack+,r11           ; Pop r11
0065 32B4 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0014                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 32B6 0649  14         dect  stack
0023 32B8 C64B  30         mov   r11,*stack            ; Save return address
0024 32BA 0649  14         dect  stack
0025 32BC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32BE 0649  14         dect  stack
0027 32C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32C2 0649  14         dect  stack
0029 32C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32C6 04E0  34         clr   @tv.error.visible     ; Set to hidden
     32C8 A22A     
0034 32CA 0204  20         li    tmp0,3
     32CC 0003     
0035 32CE C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     32D0 A22C     
0036               
0037 32D2 06A0  32         bl    @film
     32D4 2236     
0038 32D6 A234                   data tv.error.msg,0,160
     32D8 0000     
     32DA 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 32DC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 32DE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 32E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 32E2 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 32E4 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0015                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 32E6 0649  14         dect  stack
0023 32E8 C64B  30         mov   r11,*stack            ; Save return address
0024 32EA 0649  14         dect  stack
0025 32EC C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32EE 0649  14         dect  stack
0027 32F0 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32F2 0649  14         dect  stack
0029 32F4 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32F6 0204  20         li    tmp0,1                ; \ Set default color scheme
     32F8 0001     
0034 32FA C804  38         mov   tmp0,@tv.colorscheme  ; /
     32FC A212     
0035               
0036 32FE 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3300 A226     
0037 3302 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     3304 200C     
0038               
0039 3306 0204  20         li    tmp0,fj.bottom
     3308 B000     
0040 330A C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     330C A228     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 330E 06A0  32         bl    @cpym2m
     3310 24DA     
0045 3312 3D66                   data def.printer.fname,tv.printer.fname,7
     3314 DE00     
     3316 0007     
0046               
0047 3318 06A0  32         bl    @cpym2m
     331A 24DA     
0048 331C 3D6D                   data def.clip.fname.a,tv.clip.fname,10
     331E DE50     
     3320 000A     
0049               
0050 3322 06A0  32         bl    @cpym2m
     3324 24DA     
0051 3326 3DA5                   data def.mc.fname.c,tv.mc.fname,13
     3328 DEA0     
     332A 000D     
0052               
0053 332C 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     332E A50C     
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               tv.init.exit:
0058 3330 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0059 3332 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0060 3334 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0061 3336 C2F9  30         mov   *stack+,r11           ; Pop R11
0062 3338 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0016                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 333A 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     333C 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 333E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3340 2FCA     
0028 3342 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3344 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 3346 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0017                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 3348 0649  14         dect  stack
0024 334A C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 334C 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     334E 325A     
0029 3350 06A0  32         bl    @edb.init             ; Initialize editor buffer
     3352 3214     
0030 3354 06A0  32         bl    @idx.init             ; Initialize index
     3356 3114     
0031 3358 06A0  32         bl    @fb.init              ; Initialize framebuffer
     335A 306C     
0032 335C 06A0  32         bl    @errpane.init         ; Initialize error pane
     335E 32B6     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 3360 06A0  32         bl    @hchar
     3362 27D2     
0037 3364 0034                   byte 0,52,32,18       ; Remove markers
     3366 2012     
0038 3368 1D00                   byte pane.botrow,0,32,51
     336A 2033     
0039 336C FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 336E C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3370 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 3372 0649  14         dect  stack
0025 3374 C64B  30         mov   r11,*stack            ; Push return address
0026 3376 0649  14         dect  stack
0027 3378 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 337A 0649  14         dect  stack
0029 337C C645  30         mov   tmp1,*stack           ; Push tmp1
0030 337E 0649  14         dect  stack
0031 3380 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3382 0649  14         dect  stack
0033 3384 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 3386 0649  14         dect  stack
0035 3388 C640  30         mov   r0,*stack             ; Push r0
0036 338A 0649  14         dect  stack
0037 338C C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 338E C120  34         mov   @parm1,tmp0           ; Pointer to input string
     3390 A006     
0042 3392 04C5  14         clr   tmp1                  ; Termination character >00
0043 3394 04E0  34         clr   @outparm1             ; Reset output parameters
     3396 A018     
0044 3398 04E0  34         clr   @outparm2             ; Reset output parameters
     339A A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 339C 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     339E 2AB4     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 33A0 C1A0  30         mov   @waux1,tmp2           ; Get string length
     33A2 833C     
0056 33A4 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 33A6 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     33A8 0005     
0058 33AA 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 33AC C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33AE A006     
0063               
0064 33B0 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 33B2 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     33B4 FFF6     
0066 33B6 0746  18         abs   tmp2                  ; /
0067               
0068 33B8 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 33BA D174  28         movb  *tmp0+,tmp1           ; Get character
0074 33BC 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 33BE 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 33C0 0285  22         ci    tmp1,32               ; Blank ?
     33C2 0020     
0080 33C4 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 33C6 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     33C8 FFD0     
0085 33CA 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 33CC 0285  22         ci    tmp1,9
     33CE 0009     
0087 33D0 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 33D2 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     33D4 3400     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 33D6 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 33D8 A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 33DA 05C6  14         inct  tmp2                  ; Update loop counter
0102 33DC 0286  22         ci    tmp2,8                ; Last digit done?
     33DE 0008     
0103 33E0 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 33E2 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 33E4 04E0  34         clr   @outparm1             ; Empty uint16
     33E6 A018     
0110 33E8 0720  34         seto  @outparm2             ; Invalid input string
     33EA A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 33EC C807  38         mov   tmp3,@outparm1
     33EE A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 33F0 C079  30         mov   *stack+,r1            ; Pop r1
0121 33F2 C039  30         mov   *stack+,r0            ; Pop r0
0122 33F4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 33F6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 33F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 33FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 33FC C2F9  30         mov   *stack+,r11           ; Pop r11
0127 33FE 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 3400 2710             data  10000,1000,100,10,1
     3402 03E8     
     3404 0064     
     3406 000A     
     3408 0001     
0133               
                   < ram.resident.asm
0019                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 340A 0649  14         dect  stack
0022 340C C64B  30         mov   r11,*stack            ; Save return address
0023 340E 0649  14         dect  stack
0024 3410 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 3412 06A0  32         bl    @mknum                ; Convert unsigned number to string
     3414 29A6     
0029 3416 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 3418 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 341A 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 341B   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 341C 0204  20         li    tmp0,uint16.unpacked
     341E A02C     
0035 3420 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3422 04F4  30         clr   *tmp0+                ; Clear string 23
0037 3424 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 3426 06A0  32         bl    @trimnum              ; Trim unsigned number string
     3428 29FE     
0040 342A A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 342C A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 342E 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 3430 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3432 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 3434 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0020                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 3436 0649  14         dect  stack
0025 3438 C64B  30         mov   r11,*stack            ; Push return address
0026 343A 0649  14         dect  stack
0027 343C C644  30         mov   tmp0,*stack           ; Push tmp0
0028 343E 0649  14         dect  stack
0029 3440 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3442 0649  14         dect  stack
0031 3444 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3446 0649  14         dect  stack
0033 3448 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 344A C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     344C A006     
0038 344E D194  26         movb  *tmp0,tmp2            ; /
0039 3450 0986  32         srl   tmp2,8                ; Right align
0040 3452 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 3454 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3456 A008     
0043 3458 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 345A C120  34         mov   @parm1,tmp0           ; Get source address
     345C A006     
0048 345E C160  34         mov   @parm4,tmp1           ; Get destination address
     3460 A00C     
0049 3462 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 3464 0649  14         dect  stack
0052 3466 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3468 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     346A 24E0     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 346C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 346E C120  34         mov   @parm2,tmp0           ; Get requested length
     3470 A008     
0064 3472 0A84  32         sla   tmp0,8                ; Left align
0065 3474 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3476 A00C     
0066 3478 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 347A A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 347C 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 347E C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     3480 A008     
0073 3482 6187  18         s     tmp3,tmp2             ; |
0074 3484 0586  14         inc   tmp2                  ; /
0075               
0076 3486 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3488 A00A     
0077 348A 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 348C DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 348E 0606  14         dec   tmp2                  ; Update loop counter
0084 3490 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 3492 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     3494 A00C     
     3496 A018     
0087 3498 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 349A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     349C FFCE     
0093 349E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34A0 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 34A2 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 34A4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 34A6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 34A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 34AA C2F9  30         mov   *stack+,r11           ; Pop r11
0103 34AC 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0021                       ;-----------------------------------------------------------------------
0022                       ; Logic for Index management
0023                       ;-----------------------------------------------------------------------
0024                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 34AE 0649  14         dect  stack
0023 34B0 C64B  30         mov   r11,*stack            ; Save return address
0024 34B2 0649  14         dect  stack
0025 34B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 34B6 0649  14         dect  stack
0027 34B8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 34BA C120  34         mov   @parm1,tmp0           ; Get line number
     34BC A006     
0032 34BE C160  34         mov   @parm2,tmp1           ; Get pointer
     34C0 A008     
0033 34C2 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 34C4 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     34C6 0FFF     
0039 34C8 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 34CA 06E0  34         swpb  @parm3
     34CC A00A     
0044 34CE D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     34D0 A00A     
0045 34D2 06E0  34         swpb  @parm3                ; \ Restore original order again,
     34D4 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 34D6 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34D8 31C4     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 34DA C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     34DC A018     
0056 34DE C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     34E0 B000     
0057 34E2 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34E4 A018     
0058 34E6 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 34E8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     34EA 31C4     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 34EC C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     34EE A018     
0068 34F0 04E4  34         clr   @idx.top(tmp0)        ; /
     34F2 B000     
0069 34F4 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     34F6 A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 34F8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 34FA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 34FC C2F9  30         mov   *stack+,r11           ; Pop r11
0077 34FE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 3500 0649  14         dect  stack
0022 3502 C64B  30         mov   r11,*stack            ; Save return address
0023 3504 0649  14         dect  stack
0024 3506 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3508 0649  14         dect  stack
0026 350A C645  30         mov   tmp1,*stack           ; Push tmp1
0027 350C 0649  14         dect  stack
0028 350E C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3510 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3512 A006     
0033               
0034 3514 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     3516 31C4     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 3518 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     351A A018     
0039 351C C164  34         mov   @idx.top(tmp0),tmp1   ; /
     351E B000     
0040               
0041 3520 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 3522 C185  18         mov   tmp1,tmp2             ; \
0047 3524 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 3526 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     3528 00FF     
0052 352A 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 352C 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     352E C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 3530 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3532 A018     
0059 3534 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3536 A01A     
0060 3538 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 353A 04E0  34         clr   @outparm1
     353C A018     
0066 353E 04E0  34         clr   @outparm2
     3540 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3542 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3544 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3546 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3548 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 354A 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 354C 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     354E B000     
0018 3550 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3552 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3554 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3556 0606  14         dec   tmp2                  ; tmp2--
0026 3558 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 355A 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 355C 0649  14         dect  stack
0047 355E C64B  30         mov   r11,*stack            ; Save return address
0048 3560 0649  14         dect  stack
0049 3562 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 3564 0649  14         dect  stack
0051 3566 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3568 0649  14         dect  stack
0053 356A C646  30         mov   tmp2,*stack           ; Push tmp2
0054 356C 0649  14         dect  stack
0055 356E C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 3570 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3572 A006     
0060               
0061 3574 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3576 31C4     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3578 C120  34         mov   @outparm1,tmp0        ; Index offset
     357A A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 357C C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     357E A008     
0070 3580 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 3582 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3584 A006     
0074 3586 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3588 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     358A B000     
0081 358C 04D4  26         clr   *tmp0                 ; Clear index entry
0082 358E 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 3590 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     3592 A008     
0088 3594 0287  22         ci    tmp3,2048
     3596 0800     
0089 3598 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 359A 06A0  32         bl    @_idx.sams.mapcolumn.on
     359C 3156     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 359E C120  34         mov   @parm1,tmp0           ; Restore line number
     35A0 A006     
0103 35A2 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 35A4 06A0  32         bl    @_idx.entry.delete.reorg
     35A6 354C     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 35A8 06A0  32         bl    @_idx.sams.mapcolumn.off
     35AA 318A     
0111                                                   ; Restore memory window layout
0112               
0113 35AC 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 35AE 06A0  32         bl    @_idx.entry.delete.reorg
     35B0 354C     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 35B2 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 35B4 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 35B6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 35B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 35BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 35BC C2F9  30         mov   *stack+,r11           ; Pop r11
0132 35BE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0027                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 35C0 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     35C2 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 35C4 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 35C6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35C8 FFCE     
0027 35CA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35CC 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 35CE 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     35D0 B000     
0032 35D2 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 35D4 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 35D6 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 35D8 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 35DA 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 35DC 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 35DE A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 35E0 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     35E2 AFFC     
0043 35E4 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 35E6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     35E8 FFCE     
0049 35EA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     35EC 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 35EE C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 35F0 0644  14         dect  tmp0                  ; Move pointer up
0056 35F2 0645  14         dect  tmp1                  ; Move pointer up
0057 35F4 0606  14         dec   tmp2                  ; Next index entry
0058 35F6 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 35F8 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 35FA 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 35FC 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 35FE 0649  14         dect  stack
0089 3600 C64B  30         mov   r11,*stack            ; Save return address
0090 3602 0649  14         dect  stack
0091 3604 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 3606 0649  14         dect  stack
0093 3608 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 360A 0649  14         dect  stack
0095 360C C646  30         mov   tmp2,*stack           ; Push tmp2
0096 360E 0649  14         dect  stack
0097 3610 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 3612 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3614 A008     
0102 3616 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3618 A006     
0103 361A 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 361C C1E0  34         mov   @parm2,tmp3
     361E A008     
0110 3620 0287  22         ci    tmp3,2048
     3622 0800     
0111 3624 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 3626 06A0  32         bl    @_idx.sams.mapcolumn.on
     3628 3156     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 362A C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     362C A008     
0123 362E 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3630 06A0  32         bl    @_idx.entry.insert.reorg
     3632 35C0     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 3634 06A0  32         bl    @_idx.sams.mapcolumn.off
     3636 318A     
0131                                                   ; Restore memory window layout
0132               
0133 3638 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 363A C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     363C A008     
0139               
0140 363E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3640 31C4     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3642 C120  34         mov   @outparm1,tmp0        ; Index offset
     3644 A018     
0145               
0146 3646 06A0  32         bl    @_idx.entry.insert.reorg
     3648 35C0     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 364A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 364C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 364E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3650 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3652 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3654 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0028                       ;-----------------------------------------------------------------------
0029                       ; Logic for editor buffer
0030                       ;-----------------------------------------------------------------------
0031                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3656 0649  14         dect  stack
0022 3658 C64B  30         mov   r11,*stack            ; Push return address
0023 365A 0649  14         dect  stack
0024 365C C644  30         mov   tmp0,*stack           ; Push tmp0
0025 365E 0649  14         dect  stack
0026 3660 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 3662 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     3664 A504     
0031 3666 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3668 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     366A FFCE     
0037 366C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     366E 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 3670 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     3672 A006     
0043               
0044 3674 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3676 3500     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3678 C120  34         mov   @outparm2,tmp0        ; SAMS page
     367A A01A     
0050 367C C160  34         mov   @outparm1,tmp1        ; Pointer to line
     367E A018     
0051 3680 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 3682 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     3684 A208     
0057 3686 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3688 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     368A 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 368C C820  54         mov   @outparm2,@tv.sams.c000
     368E A01A     
     3690 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 3692 C820  54         mov   @outparm2,@edb.sams.page
     3694 A01A     
     3696 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3698 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 369A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 369C C2F9  30         mov   *stack+,r11           ; Pop r11
0077 369E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 36A0 0649  14         dect  stack
0022 36A2 C64B  30         mov   r11,*stack            ; Push return address
0023 36A4 0649  14         dect  stack
0024 36A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 36A8 0649  14         dect  stack
0026 36AA C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 36AC 04E0  34         clr   @outparm1             ; Reset length
     36AE A018     
0031 36B0 04E0  34         clr   @outparm2             ; Reset SAMS bank
     36B2 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 36B4 C120  34         mov   @parm1,tmp0           ; \
     36B6 A006     
0036 36B8 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 36BA 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     36BC A504     
0039 36BE 1101  14         jlt   !                     ; No, continue processing
0040 36C0 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 36C2 C120  34 !       mov   @parm1,tmp0           ; Get line
     36C4 A006     
0046               
0047 36C6 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     36C8 3656     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 36CA C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     36CC A018     
0053 36CE 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 36D0 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 36D2 C805  38         mov   tmp1,@outparm1        ; Save length
     36D4 A018     
0060 36D6 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 36D8 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     36DA A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 36DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 36DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 36E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 36E2 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 36E4 0649  14         dect  stack
0094 36E6 C64B  30         mov   r11,*stack            ; Save return address
0095 36E8 0649  14         dect  stack
0096 36EA C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 36EC C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     36EE A304     
0101 36F0 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     36F2 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 36F4 C804  38         mov   tmp0,@parm1
     36F6 A006     
0106 36F8 06A0  32         bl    @edb.line.getlength
     36FA 36A0     
0107 36FC C820  54         mov   @outparm1,@fb.row.length
     36FE A018     
     3700 A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 3702 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 3704 C2F9  30         mov   *stack+,r11           ; Pop R11
0115 3706 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0033                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 3708 0649  14         dect  stack
0021 370A C64B  30         mov   r11,*stack            ; Save return address
0022 370C 0649  14         dect  stack
0023 370E C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3710 0649  14         dect  stack
0025 3712 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 3714 C120  34         mov   @edb.next_free.ptr,tmp0
     3716 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 3718 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     371A 0FFF     
0035 371C 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     371E 0052     
0036 3720 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3722 0FF0     
0037 3724 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 3726 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     3728 A51A     
0043 372A C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     372C A500     
     372E A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 3730 C120  34         mov   @edb.sams.hipage,tmp0
     3732 A51A     
0050 3734 C160  34         mov   @edb.top.ptr,tmp1
     3736 A500     
0051 3738 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     373A 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 373C 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 373E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3740 FFCE     
0061 3742 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3744 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3746 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3748 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 374A C2F9  30         mov   *stack+,r11           ; Pop R11
0069 374C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0034                       ;-----------------------------------------------------------------------
0035                       ; Utility functions
0036                       ;-----------------------------------------------------------------------
0037                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 374E 0649  14         dect  stack
0022 3750 C64B  30         mov   r11,*stack            ; Push return address
0023 3752 0649  14         dect  stack
0024 3754 C660  42         mov   @wyx,*stack           ; Push cursor position
     3756 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3758 06A0  32         bl    @hchar
     375A 27D2     
0029 375C 0034                   byte 0,52,32,18
     375E 2012     
0030 3760 FFFF                   data EOL              ; Clear message
0031               
0032 3762 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     3764 A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3766 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3768 832A     
0038 376A C2F9  30         mov   *stack+,r11           ; Pop R11
0039 376C 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0038                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 376E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3770 27A6     
0028               
0029 3772 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     3774 22F8     
0030 3776 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 3778 06A0  32         bl    @scroff               ; Turn off screen
     377A 2686     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 377C 04E0  34         clr   @magic.str.w1
     377E A000     
0040 3780 04E0  34         clr   @magic.str.w2
     3782 A002     
0041 3784 04E0  34         clr   @magic.str.w3
     3786 A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 3788 C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     378A A232     
0046 378C 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     378E 2DC6     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 3790 020C  20         li    r12,>1e00             ; SAMS CRU address
     3792 1E00     
0053 3794 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 3796 0420  42         blwp @0                     ; Return to monitor
     3798 0000     
                   < ram.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Background tasks
0041                       ;-----------------------------------------------------------------------
0043                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 379A 0649  14         dect  stack
0009 379C C64B  30         mov   r11,*stack            ; Save return address
0010 379E 0649  14         dect  stack
0011 37A0 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 37A2 0649  14         dect  stack
0013 37A4 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 37A6 0649  14         dect  stack
0015 37A8 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 37AA C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     37AC A224     
0020               
0021 37AE 0284  22         ci    tmp0,pane.focus.fb
     37B0 0000     
0022 37B2 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 37B4 0284  22         ci    tmp0,pane.focus.cmdb
     37B6 0001     
0025 37B8 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 37BA C80B  38         mov   r11,@>ffce            ; \ Save caller address
     37BC FFCE     
0031 37BE 06A0  32         bl    @cpu.crash            ; / Halt system.
     37C0 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 37C2 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     37C4 A70A     
     37C6 832A     
0037 37C8 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     37CA 2020     
0038 37CC 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     37CE 26E8     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 37D0 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 37D2 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     37D4 2020     
0048 37D6 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     37D8 26E8     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 37DA C160  34         mov   @tv.ruler.visible,tmp1
     37DC A210     
0056 37DE 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 37E0 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     37E2 1000     
0058 37E4 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 37E6 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     37E8 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 37EA C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     37EC A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 37EE C160  34         mov   @tv.ruler.visible,tmp1
     37F0 A210     
0071                                                   ; Ruler visible?
0072 37F2 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 37F4 C160  34         mov   @cmdb.visible,tmp1
     37F6 A702     
0076 37F8 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     37FA FFFF     
0077 37FC 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 37FE 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     3800 FF00     
0081 3802 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     3804 00F0     
0082 3806 C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     3808 A05A     
0083               
0084 380A C120  34         mov   @ramsat,tmp0
     380C A056     
0085 380E 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     3810 00FF     
0086 3812 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     3814 0800     
0087 3816 C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     3818 A05E     
0088               
0089 381A 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 381C 04C5  14         clr   tmp1
0095 381E D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     3820 A05D     
0096                                                   ; / by transparant color
0097 3822 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     3824 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 3826 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     3828 2486     
0104 382A 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     382C A056     
     382E 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 3830 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 3832 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 3834 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 3836 C2F9  30         mov   *stack+,r11           ; Pop r11
0115 3838 0460  28         b     @slotok               ; Exit task
     383A 2E84     
                   < ram.resident.asm
0044                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 383C 0649  14         dect  stack
0009 383E C64B  30         mov   r11,*stack            ; Save return address
0010 3840 0649  14         dect  stack
0011 3842 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;------------------------------------------------------
0013                       ; Toggle cursor
0014                       ;------------------------------------------------------
0015 3844 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     3846 A314     
0016 3848 1304  14         jeq   task.vdp.cursor.visible
0017                       ;------------------------------------------------------
0018                       ; Hide cursor
0019                       ;------------------------------------------------------
0020 384A 04C4  14         clr   tmp0
0021 384C D804  38         movb  tmp0,@ramsat+3        ; Hide cursor
     384E A059     
0022 3850 1003  14         jmp   task.vdp.cursor.copy.sat
0023                                                   ; Update VDP SAT and exit task
0024                       ;------------------------------------------------------
0025                       ; Show cursor
0026                       ;------------------------------------------------------
0027               task.vdp.cursor.visible:
0028 3852 C820  54         mov   @tv.curshape,@ramsat+2
     3854 A214     
     3856 A058     
0029                                                   ; Get cursor shape and color
0030                       ;------------------------------------------------------
0031                       ; Copy SAT
0032                       ;------------------------------------------------------
0033               task.vdp.cursor.copy.sat:
0034 3858 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     385A 2486     
0035 385C 2180                   data sprsat,ramsat,4  ; \ i  p0 = VDP destination
     385E A056     
     3860 0004     
0036                                                   ; | i  p1 = ROM/RAM source
0037                                                   ; / i  p2 = Number of bytes to write
0038                       ;------------------------------------------------------
0039                       ; Exit
0040                       ;------------------------------------------------------
0041               task.vdp.cursor.exit:
0042 3862 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0043 3864 C2F9  30         mov   *stack+,r11           ; Pop r11
0044 3866 0460  28         b     @slotok               ; Exit task
     3868 2E84     
                   < ram.resident.asm
0048               
0049                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 386A C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     386C A226     
0010 386E 1301  14         jeq   task.oneshot.exit
0011               
0012 3870 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 3872 0460  28         b     @slotok                ; Exit task
     3874 2E84     
                   < ram.resident.asm
0050                       ;------------------------------------------------------
0051                       ; Program data
0052                       ;------------------------------------------------------
0053                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 3876 0000             data  >0000,>0001           ; Cursor
     3878 0001     
0014 387A 0000             data  >0000,>0101           ; Current line indicator     <
     387C 0101     
0015 387E 0820             data  >0820,>0201           ; Current column indicator   v
     3880 0201     
0016               nosprite:
0017 3882 D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               
0021               
0022               ***************************************************************
0023               * Stevie color schemes table
0024               *--------------------------------------------------------------
0025               * ; Word 1
0026               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0027               * ; B  MSB  low-nibble     Background color text line in frame buffer
0028               * ; C  LSB  high-nibble    Foreground color top/bottom line
0029               * ; D  LSB  low-nibble     Background color top/bottom line
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ; Word 3
0036               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0037               * ; J  MSB  low-nibble     Background color busy top/bottom line
0038               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0039               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0040               * ; Word 4
0041               * ; M  MSB  high-nibble    Foreground color command buffer header line
0042               * ; N  MSB  low-nibble     Background color command buffer header line
0043               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0044               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0045               *
0046               * ; Colors
0047               * ; 0  Transparant      8  Red
0048               * ; 1  black            9  Light Red
0049               * ; 2  Green            A  Yellow
0050               * ; 3  Light Green      B  Light Yellow
0051               * ; 4  Blue             C  Dark Green
0052               * ; 5  Light Blue       D  Magenta
0053               * ; 6  Dark Red         E  Grey
0054               * ; 7  Cyan             F  White
0055               *--------------------------------------------------------------
0056      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0057               tv.colorscheme.table:
0058                       ;                             ; #
0059                       ;      ABCD  EFGH  IJKL  MNOP ; -
0060 3884 F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     3886 F171     
     3888 1B1F     
     388A 7111     
0061 388C 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     388E 21FF     
     3890 F112     
     3892 21FF     
0062 3894 A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     3896 F0FF     
     3898 1F1A     
     389A F1FF     
0063 389C 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     389E 1E11     
     38A0 1EE1     
     38A2 1E11     
0064 38A4 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     38A6 1511     
     38A8 1F1F     
     38AA 1511     
0065 38AC 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     38AE 1311     
     38B0 1331     
     38B2 1311     
0066 38B4 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     38B6 1011     
     38B8 0171     
     38BA 1711     
0067 38BC 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     38BE F0FF     
     38C0 1F12     
     38C2 F1F6     
0068 38C4 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     38C6 1011     
     38C8 F1F1     
     38CA 1F11     
0069 38CC 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     38CE A111     
     38D0 1F1F     
     38D2 F11F     
0070 38D4 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     38D6 1911     
     38D8 1991     
     38DA 1911     
0071 38DC FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     38DE 1D11     
     38E0 FDDF     
     38E2 1D11     
0072               
0073                       even
0074               
0075               tv.tabs.table.lr:
0076 38E4 0007             byte  0,7,12,25             ; \   Default tab positions as used
     38E6 0C19     
0077 38E8 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     38EA 3B4F     
0078 38EC FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     38EE 0000     
0079                                                   ; /   >ff means end-of-list.
0080               
0081               tv.tabs.table.rl:
0082 38F0 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     38F2 2D1E     
0083 38F4 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     38F6 0700     
0084 38F8 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     38FA 0000     
0085                                                   ; /   >ff means end-of-list.
0086               
0087               ***************************************************************
0088               * Constants for numbers 0-10
0089               ********|*****|*********************|**************************
0090      2000     const.0       equ   w$0000          ; 0
0091      2002     const.1       equ   w$0001          ; 1
0092      2004     const.2       equ   w$0002          ; 2
0093 38FC 0003     const.3       data  3               ; 3
0094      2006     const.4       equ   w$0004          ; 4
0095 38FE 0005     const.5       data  5               ; 5
0096 3900 0006     const.6       data  6               ; 6
0097 3902 0007     const.7       data  7               ; 7
0098      2008     const.8       equ   w$0008          ; 8
0099 3904 0009     const.9       data  9               ; 9
0100 3906 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0054                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 3908 012C     txt.delim          stri ','
0009                                  even
0010 390A 0520     txt.bottom         stri '  BOT'
     390C 2042     
     390E 4F54     
0011                                  even
0012 3910 044F     txt.ovrwrite       stri 'OVR '
     3912 5652     
     3914 20       
0013                                  even
0014 3916 0449     txt.insert         stri 'INS '
     3918 4E53     
     391A 20       
0015                                  even
0016 391C 0449     txt.autoinsert     stri 'INS+'
     391E 4E53     
     3920 2B       
0017                                  even
0018 3922 012A     txt.star           stri '*'
0019                                  even
0020 3924 0A4C     txt.loading        stri 'Loading...'
     3926 6F61     
     3928 6469     
     392A 6E67     
     392C 2E2E     
     392E 2E       
0021                                  even
0022 3930 0A53     txt.saving         stri 'Saving....'
     3932 6176     
     3934 696E     
     3936 672E     
     3938 2E2E     
     393A 2E       
0023                                  even
0024 393C 1250     txt.printing       stri 'Printing file.....'
     393E 7269     
     3940 6E74     
     3942 696E     
     3944 6720     
     3946 6669     
     3948 6C65     
     394A 2E2E     
     394C 2E2E     
     394E 2E       
0025                                  even
0026 3950 1244     txt.block.del      stri 'Deleting block....'
     3952 656C     
     3954 6574     
     3956 696E     
     3958 6720     
     395A 626C     
     395C 6F63     
     395E 6B2E     
     3960 2E2E     
     3962 2E       
0027                                  even
0028 3964 1143     txt.block.copy     stri 'Copying block....'
     3966 6F70     
     3968 7969     
     396A 6E67     
     396C 2062     
     396E 6C6F     
     3970 636B     
     3972 2E2E     
     3974 2E2E     
0029                                  even
0030 3976 104D     txt.block.move     stri 'Moving block....'
     3978 6F76     
     397A 696E     
     397C 6720     
     397E 626C     
     3980 6F63     
     3982 6B2E     
     3984 2E2E     
     3986 2E       
0031                                  even
0032 3988 1853     txt.block.save     stri 'Saving block to file....'
     398A 6176     
     398C 696E     
     398E 6720     
     3990 626C     
     3992 6F63     
     3994 6B20     
     3996 746F     
     3998 2066     
     399A 696C     
     399C 652E     
     399E 2E2E     
     39A0 2E       
0033                                  even
0034 39A2 1843     txt.block.clip     stri 'Copying to clipboard....'
     39A4 6F70     
     39A6 7969     
     39A8 6E67     
     39AA 2074     
     39AC 6F20     
     39AE 636C     
     39B0 6970     
     39B2 626F     
     39B4 6172     
     39B6 642E     
     39B8 2E2E     
     39BA 2E       
0035                                  even
0036 39BC 1250     txt.block.print    stri 'Printing block....'
     39BE 7269     
     39C0 6E74     
     39C2 696E     
     39C4 6720     
     39C6 626C     
     39C8 6F63     
     39CA 6B2E     
     39CC 2E2E     
     39CE 2E       
0037                                  even
0038 39D0 1343     txt.clearmem       stri 'Clearing memory....'
     39D2 6C65     
     39D4 6172     
     39D6 696E     
     39D8 6720     
     39DA 6D65     
     39DC 6D6F     
     39DE 7279     
     39E0 2E2E     
     39E2 2E2E     
0039                                  even
0040 39E4 0E4C     txt.done.load      stri 'Load completed'
     39E6 6F61     
     39E8 6420     
     39EA 636F     
     39EC 6D70     
     39EE 6C65     
     39F0 7465     
     39F2 64       
0041                                  even
0042 39F4 1049     txt.done.insert    stri 'Insert completed'
     39F6 6E73     
     39F8 6572     
     39FA 7420     
     39FC 636F     
     39FE 6D70     
     3A00 6C65     
     3A02 7465     
     3A04 64       
0043                                  even
0044 3A06 1041     txt.done.append    stri 'Append completed'
     3A08 7070     
     3A0A 656E     
     3A0C 6420     
     3A0E 636F     
     3A10 6D70     
     3A12 6C65     
     3A14 7465     
     3A16 64       
0045                                  even
0046 3A18 0E53     txt.done.save      stri 'Save completed'
     3A1A 6176     
     3A1C 6520     
     3A1E 636F     
     3A20 6D70     
     3A22 6C65     
     3A24 7465     
     3A26 64       
0047                                  even
0048 3A28 0E43     txt.done.copy      stri 'Copy completed'
     3A2A 6F70     
     3A2C 7920     
     3A2E 636F     
     3A30 6D70     
     3A32 6C65     
     3A34 7465     
     3A36 64       
0049                                  even
0050 3A38 0F50     txt.done.print     stri 'Print completed'
     3A3A 7269     
     3A3C 6E74     
     3A3E 2063     
     3A40 6F6D     
     3A42 706C     
     3A44 6574     
     3A46 6564     
0051                                  even
0052 3A48 1044     txt.done.delete    stri 'Delete completed'
     3A4A 656C     
     3A4C 6574     
     3A4E 6520     
     3A50 636F     
     3A52 6D70     
     3A54 6C65     
     3A56 7465     
     3A58 64       
0053                                  even
0054 3A5A 0F43     txt.done.clipboard stri 'Clipboard saved'
     3A5C 6C69     
     3A5E 7062     
     3A60 6F61     
     3A62 7264     
     3A64 2073     
     3A66 6176     
     3A68 6564     
0055                                  even
0056 3A6A 0D43     txt.done.clipdev   stri 'Clipboard set'
     3A6C 6C69     
     3A6E 7062     
     3A70 6F61     
     3A72 7264     
     3A74 2073     
     3A76 6574     
0057                                  even
0058 3A78 124D     txt.done.mc        stri 'Master Catalog set'
     3A7A 6173     
     3A7C 7465     
     3A7E 7220     
     3A80 4361     
     3A82 7461     
     3A84 6C6F     
     3A86 6720     
     3A88 7365     
     3A8A 74       
0059                                  even
0060 3A8C 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3A8E 7574     
     3A90 6F69     
     3A92 6E73     
     3A94 6572     
     3A96 743A     
     3A98 206F     
     3A9A 6E       
0061                                  even
0062 3A9C 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3A9E 7574     
     3AA0 6F69     
     3AA2 6E73     
     3AA4 6572     
     3AA6 743A     
     3AA8 206F     
     3AAA 6666     
0063                                  even
0064 3AAC 0B46     txt.fastmode       stri 'Fastmode IO'
     3AAE 6173     
     3AB0 746D     
     3AB2 6F64     
     3AB4 6520     
     3AB6 494F     
0065                                  even
0066 3AB8 1B45     txt.uncrunching    stri 'Expanding TI Basic line....'
     3ABA 7870     
     3ABC 616E     
     3ABE 6469     
     3AC0 6E67     
     3AC2 2054     
     3AC4 4920     
     3AC6 4261     
     3AC8 7369     
     3ACA 6320     
     3ACC 6C69     
     3ACE 6E65     
     3AD0 2E2E     
     3AD2 2E2E     
0067                                  even
0068 3AD4 026B     txt.kb             stri 'kb'
     3AD6 62       
0069                                  even
0070 3AD8 054C     txt.lines          stri 'Lines'
     3ADA 696E     
     3ADC 6573     
0071                                  even
0072 3ADE 0A5B     txt.newfile        stri '[New file]'
     3AE0 4E65     
     3AE2 7720     
     3AE4 6669     
     3AE6 6C65     
     3AE8 5D       
0073                                  even
0074 3AEA 0D5B     txt.tib1           stri '[TI Basic #1]'
     3AEC 5449     
     3AEE 2042     
     3AF0 6173     
     3AF2 6963     
     3AF4 2023     
     3AF6 315D     
0075                                  even
0076 3AF8 0D5B     txt.tib2           stri '[TI Basic #2]'
     3AFA 5449     
     3AFC 2042     
     3AFE 6173     
     3B00 6963     
     3B02 2023     
     3B04 325D     
0077                                  even
0078 3B06 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B08 5449     
     3B0A 2042     
     3B0C 6173     
     3B0E 6963     
     3B10 2023     
     3B12 335D     
0079                                  even
0080 3B14 0D5B     txt.tib4           stri '[TI Basic #4]'
     3B16 5449     
     3B18 2042     
     3B1A 6173     
     3B1C 6963     
     3B1E 2023     
     3B20 345D     
0081                                  even
0082 3B22 0D5B     txt.tib5           stri '[TI Basic #5]'
     3B24 5449     
     3B26 2042     
     3B28 6173     
     3B2A 6963     
     3B2C 2023     
     3B2E 355D     
0083                                  even
0084 3B30 0444     txt.filetype.dv80  stri 'DV80'
     3B32 5638     
     3B34 30       
0085                                  even
0086 3B36 034D     txt.m1             stri 'M1='
     3B38 313D     
0087                                  even
0088 3B3A 034D     txt.m2             stri 'M2='
     3B3C 323D     
0089                                  even
0090 3B3E 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3B40 392D     
     3B42 4D65     
     3B44 6E75     
     3B46 2020     
     3B48 5E48     
     3B4A 2D48     
     3B4C 656C     
     3B4E 7020     
     3B50 205E     
     3B52 552D     
     3B54 5368     
     3B56 6F72     
     3B58 7463     
     3B5A 7574     
     3B5C 73       
0091                                  even
0092 3B5E 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3B60 392D     
     3B62 4D65     
     3B64 6E75     
     3B66 2020     
     3B68 5E48     
     3B6A 2D48     
     3B6C 656C     
     3B6E 7020     
     3B70 205E     
     3B72 552D     
     3B74 5368     
     3B76 6F72     
     3B78 7463     
     3B7A 7574     
     3B7C 7320     
     3B7E 2046     
     3B80 302D     
     3B82 4261     
     3B84 7369     
     3B86 6323     
0093                                  even
0094 3B88 3446     txt.keys.block     stri 'F9-Back  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3B8A 392D     
     3B8C 4261     
     3B8E 636B     
     3B90 2020     
     3B92 5E43     
     3B94 6F70     
     3B96 7920     
     3B98 5E4D     
     3B9A 6F76     
     3B9C 6520     
     3B9E 5E44     
     3BA0 656C     
     3BA2 205E     
     3BA4 5361     
     3BA6 7665     
     3BA8 205E     
     3BAA 5072     
     3BAC 696E     
     3BAE 7420     
     3BB0 5E5B     
     3BB2 312D     
     3BB4 335D     
     3BB6 436C     
     3BB8 6970     
     3BBA 6272     
     3BBC 64       
0095                                  even
0096 3BBE 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3BC0 392D     
     3BC2 4261     
     3BC4 636B     
     3BC6 2020     
     3BC8 4635     
     3BCA 2D41     
     3BCC 7574     
     3BCE 6F55     
     3BD0 6E70     
     3BD2 6163     
     3BD4 6B20     
     3BD6 2053     
     3BD8 5041     
     3BDA 4345     
     3BDC 2D55     
     3BDE 6E70     
     3BE0 6163     
     3BE2 6B20     
     3BE4 7072     
     3BE6 6F67     
     3BE8 7261     
     3BEA 6D       
0097                                  even
0098 3BEC 2E2E     txt.ruler          text    '.........'
     3BEE 2E2E     
     3BF0 2E2E     
     3BF2 2E2E     
     3BF4 2E       
0099 3BF5   12                        byte    18
0100 3BF6 2E2E                        text    '.........'
     3BF8 2E2E     
     3BFA 2E2E     
     3BFC 2E2E     
     3BFE 2E       
0101 3BFF   13                        byte    19
0102 3C00 2E2E                        text    '.........'
     3C02 2E2E     
     3C04 2E2E     
     3C06 2E2E     
     3C08 2E       
0103 3C09   14                        byte    20
0104 3C0A 2E2E                        text    '.........'
     3C0C 2E2E     
     3C0E 2E2E     
     3C10 2E2E     
     3C12 2E       
0105 3C13   15                        byte    21
0106 3C14 2E2E                        text    '.........'
     3C16 2E2E     
     3C18 2E2E     
     3C1A 2E2E     
     3C1C 2E       
0107 3C1D   16                        byte    22
0108 3C1E 2E2E                        text    '.........'
     3C20 2E2E     
     3C22 2E2E     
     3C24 2E2E     
     3C26 2E       
0109 3C27   17                        byte    23
0110 3C28 2E2E                        text    '.........'
     3C2A 2E2E     
     3C2C 2E2E     
     3C2E 2E2E     
     3C30 2E       
0111 3C31   18                        byte    24
0112 3C32 2E2E                        text    '.........'
     3C34 2E2E     
     3C36 2E2E     
     3C38 2E2E     
     3C3A 2E       
0113 3C3B   19                        byte    25
0114                                  even
0115 3C3C 020E     txt.alpha.down     data >020e,>0f00
     3C3E 0F00     
0116 3C40 0110     txt.vertline       data >0110
0117 3C42 011C     txt.keymarker      byte 1,28
0118               
0119 3C44 0120     txt.ws1            stri ' '
0120                                  even
0121 3C46 0220     txt.ws2            stri '  '
     3C48 20       
0122                                  even
0123 3C4A 0320     txt.ws3            stri '   '
     3C4C 2020     
0124                                  even
0125 3C4E 0420     txt.ws4            stri '    '
     3C50 2020     
     3C52 20       
0126                                  even
0127 3C54 0520     txt.ws5            stri '     '
     3C56 2020     
     3C58 2020     
0128                                  even
0129      3C4E     txt.filetype.none  equ txt.ws4
0130               
0131 3C5A 3E50     txt.msg.mastcat    stri 'Position cursor on filename in list and press ^O to load file.'
     3C5C 6F73     
     3C5E 6974     
     3C60 696F     
     3C62 6E20     
     3C64 6375     
     3C66 7273     
     3C68 6F72     
     3C6A 206F     
     3C6C 6E20     
     3C6E 6669     
     3C70 6C65     
     3C72 6E61     
     3C74 6D65     
     3C76 2069     
     3C78 6E20     
     3C7A 6C69     
     3C7C 7374     
     3C7E 2061     
     3C80 6E64     
     3C82 2070     
     3C84 7265     
     3C86 7373     
     3C88 205E     
     3C8A 4F20     
     3C8C 746F     
     3C8E 206C     
     3C90 6F61     
     3C92 6420     
     3C94 6669     
     3C96 6C65     
     3C98 2E       
0132                                  even
0133               
0134               
0135               ;--------------------------------------------------------------
0136               ; Strings for error line pane
0137               ;--------------------------------------------------------------
0138 3C9A 1546     txt.ioerr.load     stri 'Failed loading file: '
     3C9C 6169     
     3C9E 6C65     
     3CA0 6420     
     3CA2 6C6F     
     3CA4 6164     
     3CA6 696E     
     3CA8 6720     
     3CAA 6669     
     3CAC 6C65     
     3CAE 3A20     
0139                                  even
0140 3CB0 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CB2 6169     
     3CB4 6C65     
     3CB6 6420     
     3CB8 7361     
     3CBA 7669     
     3CBC 6E67     
     3CBE 2066     
     3CC0 696C     
     3CC2 653A     
     3CC4 20       
0141                                  even
0142 3CC6 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CC8 6169     
     3CCA 6C65     
     3CCC 6420     
     3CCE 7072     
     3CD0 696E     
     3CD2 7469     
     3CD4 6E67     
     3CD6 2074     
     3CD8 6F20     
     3CDA 6465     
     3CDC 7669     
     3CDE 6365     
     3CE0 3A20     
0143                                  even
0144 3CE2 164E     txt.io.nofile      stri 'No filename specified.'
     3CE4 6F20     
     3CE6 6669     
     3CE8 6C65     
     3CEA 6E61     
     3CEC 6D65     
     3CEE 2073     
     3CF0 7065     
     3CF2 6369     
     3CF4 6669     
     3CF6 6564     
     3CF8 2E       
0145                                  even
0146 3CFA 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3CFC 6E64     
     3CFE 6578     
     3D00 2066     
     3D02 756C     
     3D04 6C2E     
     3D06 2046     
     3D08 696C     
     3D0A 6520     
     3D0C 746F     
     3D0E 6F20     
     3D10 6C61     
     3D12 7267     
     3D14 6520     
     3D16 666F     
     3D18 7220     
     3D1A 6564     
     3D1C 6974     
     3D1E 6F72     
     3D20 2062     
     3D22 7566     
     3D24 6665     
     3D26 722E     
0147                                  even
0148 3D28 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D2A 6F70     
     3D2C 792F     
     3D2E 4D6F     
     3D30 7665     
     3D32 2074     
     3D34 6172     
     3D36 6765     
     3D38 7420     
     3D3A 6D75     
     3D3C 7374     
     3D3E 2062     
     3D40 6520     
     3D42 6F75     
     3D44 7473     
     3D46 6964     
     3D48 6520     
     3D4A 4D31     
     3D4C 2D4D     
     3D4E 3220     
     3D50 7261     
     3D52 6E67     
     3D54 652E     
0149                                  even
0150               
0151               ;--------------------------------------------------------------
0152               ; Strings for command buffer
0153               ;--------------------------------------------------------------
0154 3D56 013E     txt.cmdb.prompt    stri '>'
0155                                  even
0156 3D58 0D43     txt.colorscheme    stri 'Color scheme:'
     3D5A 6F6C     
     3D5C 6F72     
     3D5E 2073     
     3D60 6368     
     3D62 656D     
     3D64 653A     
0157                                  even
                   < ram.resident.asm
0055                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D66 0650     def.printer.fname   stri 'PI.PIO'
     3D68 492E     
     3D6A 5049     
     3D6C 4F       
0008 3D6D   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D6E 4453     
     3D70 4B31     
     3D72 2E43     
     3D74 4C49     
     3D76 50       
0009 3D77   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3D78 4453     
     3D7A 4B36     
     3D7C 2E43     
     3D7E 4C49     
     3D80 50       
0010 3D81   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3D82 5449     
     3D84 5049     
     3D86 2E43     
     3D88 4C49     
     3D8A 50       
0011 3D8B   0C     def.mc.fname.a      stri 'DSK1.MASTCAT'
     3D8C 4453     
     3D8E 4B31     
     3D90 2E4D     
     3D92 4153     
     3D94 5443     
     3D96 4154     
0012 3D98 0C44     def.mc.fname.b      stri 'DSK6.MASTCAT'
     3D9A 534B     
     3D9C 362E     
     3D9E 4D41     
     3DA0 5354     
     3DA2 4341     
     3DA4 54       
0013 3DA5   0C     def.mc.fname.c      stri 'TIPI.MASTCAT'
     3DA6 5449     
     3DA8 5049     
     3DAA 2E4D     
     3DAC 4153     
     3DAE 5443     
     3DB0 4154     
0014 3DB2 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DB4 4453     
     3DB6 4B2C     
     3DB8 4844     
     3DBA 582C     
     3DBC 4944     
     3DBE 452C     
     3DC0 5049     
     3DC2 2E2C     
     3DC4 5049     
     3DC6 4F2C     
     3DC8 5449     
     3DCA 5049     
     3DCC 2E2C     
     3DCE 5244     
     3DD0 2C53     
     3DD2 4353     
     3DD4 2C53     
     3DD6 4444     
     3DD8 2C57     
     3DDA 4453     
     3DDC 2C52     
     3DDE 5332     
     3DE0 3332     
                   < ram.resident.asm
0056                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3DE2 99              byte   >99                   ; \
0013 3DE3   4F            text   'OKFG99'              ; | Send this to reload
     3DE4 4B46     
     3DE6 4739     
     3DE8 39       
0014 3DE9   99            byte   >99                   ; /
0015 3DEA 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3DEC 4D44     
     3DEE 47       
0016 3DEF   00            byte   >00, >00, >00         ; /
     3DF0 0000     
0017 3DF2 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3DF4 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3DF6 99              byte   >99                   ; \
0026 3DF7   4F            text   'OKFG99'              ; | Send this to reload
     3DF8 4B46     
     3DFA 4739     
     3DFC 39       
0027 3DFD   99            byte   >99                   ; /
0028 3DFE 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3E00 3239     
     3E02 4745     
     3E04 4D47     
0029                      ;                            ; /
0030 3E06 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3E08 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E0A 99              byte   >99                   ; \
0039 3E0B   4F            text   'OKFG99'              ; | Send this to reload
     3E0C 4B46     
     3E0E 4739     
     3E10 39       
0040 3E11   99            byte   >99                   ; /
0041 3E12 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E14 4247     
0042 3E16 0000            byte   >00, >00, >00, >00    ; /
     3E18 0000     
0043 3E1A 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E1C 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E1E 99              byte   >99                   ; \
0052 3E1F   4F            text   'OKFG99'              ; | Send this to reload
     3E20 4B46     
     3E22 4739     
     3E24 39       
0053 3E25   99            byte   >99                   ; /
0054 3E26 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E28 464F     
     3E2A 5254     
     3E2C 4843     
0055                      ;                            ; /
0056 3E2E 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E30 0000            data   >0000                 ; Start address
0058                      even
                   < ram.resident.asm
                   < stevie_b1.asm
0054                       ;------------------------------------------------------
0055                       ; Activate bank 1 and branch to  >6036
0056                       ;------------------------------------------------------
0057 3E32 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E34 6002     
0058               
0062               
0063 3E36 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E38 6046     
0064               ***************************************************************
0065               * Step 3: Include main editor modules
0066               ********|*****|*********************|**************************
0067               main:
0068                       aorg  kickstart.code2       ; >6046
0069 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0070                       ;-----------------------------------------------------------------------
0071                       ; Include files
0072                       ;-----------------------------------------------------------------------
0073                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 27FA     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 2686     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 272A     
0043               
0045               
0046 605E 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6060 2332     
0047 6062 3140                   data >3140            ; F18a VR49 (>31), bit 40
0048               
0050               
0051 6064 06A0  32         bl    @putvr                ; Turn on position based attributes
     6066 2332     
0052 6068 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 606A 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     606C 2332     
0055 606E 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 6070 06A0  32         bl    @filv
     6072 228E     
0060 6074 0000                   data >0000,32,vdp.sit.size
     6076 0020     
     6078 0960     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 607A 06A0  32         bl    @film
     607C 2236     
0066 607E A000                   data >a000,00,20000   ; Clear a000-eedf
     6080 0000     
     6082 4E20     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 6084 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6086 26A6     
0071 6088 06A0  32         bl    @s8x8                 ; Small sprite
     608A 26B6     
0072               
0073 608C 06A0  32         bl    @cpym2m
     608E 24DA     
0074 6090 3876                   data romsat,ramsat,14 ; Load sprite SAT
     6092 A056     
     6094 000E     
0075               
0076 6096 C820  54         mov   @romsat+2,@tv.curshape
     6098 3878     
     609A A214     
0077                                                   ; Save cursor shape & color
0078               
0079 609C 06A0  32         bl    @vdp.dump.patterns    ; Dump sprite and character patterns to VDP
     609E 7B8E     
0080               
0081 60A0 04E0  34         clr   @parm1                ; Pick font 0
     60A2 A006     
0082 60A4 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     60A6 7BA2     
0083                                                   ; \ i  @parm1       = Font index (0-5)
0084                                                   ; / o  @tv.font.ptr = Pointer to font
0085               *--------------------------------------------------------------
0086               * Initialize
0087               *--------------------------------------------------------------
0088 60A8 06A0  32         bl    @mem.sams.setup.stevie
     60AA 6108     
0089                                                   ; Load SAMS pages for stevie
0090               
0091 60AC 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60AE 32E6     
0092 60B0 06A0  32         bl    @tv.reset             ; Reset editor
     60B2 3348     
0093                       ;------------------------------------------------------
0094                       ; Load colorscheme amd turn on screen
0095                       ;------------------------------------------------------
0096 60B4 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60B6 A006     
0097 60B8 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60BA A008     
0098 60BC 04E0  34         clr   @parm3                ; Colorize all panes
     60BE A00A     
0099               
0100 60C0 06A0  32         bl    @pane.action.colorscheme.load
     60C2 71FE     
0101                                                   ; Reload color scheme
0102                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0103                                                   ; | i  @parm2 = Skip colorizing marked lines
0104                                                   ; |             if >FFFF
0105                                                   ; | i  @parm3 = Only colorize CMDB pane
0106                                                   ; /             if >FFFF
0107               
0108                       ;-------------------------------------------------------
0109                       ; Setup editor tasks
0110                       ;-------------------------------------------------------
0111 60C4 06A0  32         bl    @at
     60C6 26C6     
0112 60C8 0000                   data  >0000           ; Cursor YX position = >0000
0113               
0114 60CA 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60CC A064     
0115 60CE C804  30         mov   tmp0,@wtitab          ; /
     60D0 832C     
0116               
0118               
0119 60D2 06A0  32         bl    @mkslot
     60D4 2ECC     
0120 60D6 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60D8 7192     
0121 60DA 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60DC 379A     
0122 60DE 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60E0 383C     
0123 60E2 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60E4 386A     
0124 60E6 FFFF                   data eol
0125               
0135               
0136 60E8 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60EA 0300     
0137 60EC C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60EE 8314     
0138                       ;-------------------------------------------------------
0139                       ; Setup keyboard scanning and start kernel/timers
0140                       ;-------------------------------------------------------
0141 60F0 06A0  32         bl    @mkhook
     60F2 2EB8     
0142 60F4 6126                   data edkey.keyscan.hook
0143                                                   ; Setup keyboard scanning hook
0144                       ;-------------------------------------------------------
0145                       ; Initialisation complete
0146                       ;-------------------------------------------------------
0147 60F6 06A0  32         bl    @magic.set            ; Set magic string
     60F8 7C94     
0148               
0149 60FA 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     60FC 37D7     
0150 60FE C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     6100 8370     
0151 6102 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0152                       ;-------------------------------------------------------
0153                       ; Start kernel
0154                       ;-------------------------------------------------------
0155 6104 0460  28         b     @tmgr                 ; Run kernel and timers
     6106 2E04     
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Low-level modules
0076                       ;-----------------------------------------------------------------------
0077                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 6108 0649  14         dect  stack
0018 610A C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 610C 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     610E 7C70     
0023               
0024 6110 06A0  32         bl    @sams.layout.copy
     6112 263E     
0025 6114 A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026               
0027 6116 C820  54         mov   @tv.sams.c000,@edb.sams.page
     6118 A208     
     611A A518     
0028 611C C820  54         mov   @edb.sams.page,@edb.sams.hipage
     611E A518     
     6120 A51A     
0029                                                   ; Track editor buffer SAMS page
0030                       ;------------------------------------------------------
0031                       ; Exit
0032                       ;------------------------------------------------------
0033               mem.sams.setup.stevie.exit:
0034 6122 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 6124 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Keyboard actions
0080                       ;-----------------------------------------------------------------------
0081                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 6126 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6128 A900     
0013                                                   ; on the stack anymore.
0014               
0015 612A 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 612C C80B  38         mov   r11,@>ffce            ; \ Save caller address
     612E FFCE     
0020 6130 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6132 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 6134 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     6136 200A     
0025 6138 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 613A 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     613C 200A     
0031 613E 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     6140 2002     
     6142 A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 6144 C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     6146 A028     
     6148 A02A     
0036 614A 0460  28         b     @edkey.key.process    ; Process key
     614C 616E     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 614E C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     6150 A026     
0042 6152 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     6154 2002     
0043 6156 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6158 04E0  34         clr   @keycode1             ; \
     615A A028     
0047 615C 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     615E A02A     
0048 6160 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     6162 0001     
0049 6164 C804  38         mov   tmp0,@kbflags         ; /
     6166 A026     
0050                       ;------------------------------------------------------
0051                       ; Keyboard debounce
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.debounce:
0054 6168 1000  14         nop                         ; No purpose anymore, but branched to
0055                                                   ; from several subroutines.
0056                                                   ; Needs to be refactored.
0057                       ;------------------------------------------------------
0058                       ; Exit keyboard hook
0059                       ;------------------------------------------------------
0060               edkey.keyscan.hook.exit:
0061 616A 0460  28         b     @hookok               ; Return
     616C 2E08     
                   < stevie_b1.asm
0082                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 616E C160  34         mov   @keycode1,tmp1        ; Get key pressed
     6170 A028     
0009 6172 0A85  32         sla   tmp1,8                ; Move to MSB
0010 6174 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 6176 C1A0  34         mov   @tv.pane.focus,tmp2
     6178 A224     
0015 617A 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     617C 0000     
0016 617E 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 6180 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     6182 0001     
0020 6184 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 6186 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6188 FFCE     
0026 618A 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     618C 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 618E 0285  22         ci    tmp1,>2000            ; Space key pressed?
     6190 2000     
0032 6192 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 6194 0649  14         dect  stack
0038 6196 C644  30         mov   tmp0,*stack           ; Push tmp0
0039 6198 0649  14         dect  stack
0040 619A C645  30         mov   tmp1,*stack           ; Push tmp1
0041 619C 0649  14         dect  stack
0042 619E C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 61A0 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 61A2 020C  20         li    r12,>0024             ; CRU address decoder
     61A4 0024     
0046 61A6 30C4  30         ldcr  tmp0,3                ; Select column
0047 61A8 020C  20         li    r12,>0006             ; Address of the first row
     61AA 0006     
0048 61AC 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61AE 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61B0 4000     
0050 61B2 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61B4 C339  30         mov   *stack+,r12           ; Pop r12
0056 61B6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61B8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61BA 0460  28         b     @edkey.action.block.mark
     61BC 69C2     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61BE C339  30         mov   *stack+,r12           ; Pop r12
0065 61C0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61C4 0206  20         li    tmp2,keymap_actions.editor
     61C6 7CCA     
0072 61C8 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61CA 0206  20         li    tmp2,keymap_actions.cmdb
     61CC 7DA4     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 61CE 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61D0 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 61D2 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61D4 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 61D6 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61D8 6100     
0096 61DA 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61DC 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61DE 7A00     
0099 61E0 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61E2 0225  22         ai    tmp1,->2000           ; Make uppercase
     61E4 E000     
0102 61E6 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61E8 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 61EA 0225  22         ai    tmp1,>2000            ; Make lowercase
     61EC 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61EE 0226  22         ai    tmp2,4                ; Skip current entry
     61F0 0004     
0112 61F2 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 61F4 0586  14         inc   tmp2                  ; Move to scope
0118 61F6 9816  42         cb    *tmp2,@tv.pane.focus+1
     61F8 A225     
0119                                                   ; (1) Process key if scope matches pane
0120 61FA 1309  14         jeq   edkey.key.process.action
0121               
0122 61FC 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     61FE A71D     
0123 6200 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 6202 0226  22         ai    tmp2,3                ; Skip current entry
     6204 0003     
0128 6206 C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     6208 A028     
0129 620A 0A85  32         sla   tmp1,8                ; Move to MSB
0130 620C 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 620E 0586  14         inc   tmp2                  ; Move to action address
0136 6210 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 6212 0204  20         li    tmp0,id.dialog.unsaved
     6214 0065     
0139 6216 8120  34         c     @cmdb.dialog,tmp0
     6218 A71C     
0140 621A 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 621C C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     621E A72C     
0143 6220 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 6222 C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     6224 A224     
0149 6226 1602  14         jne   !                     ; No, skip frame buffer
0150 6228 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     622A 6810     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 622C 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     622E 0001     
0155 6230 1607  14         jne   edkey.key.process.crash
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
0160 6232 C120  34         mov   @cmdb.dialog,tmp0
     6234 A71C     
0161 6236 0284  22         ci    tmp0,99
     6238 0063     
0162 623A 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 623C 0460  28         b     @edkey.action.cmdb.char
     623E 6B50     
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
0172 6240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6242 FFCE     
0173 6244 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6246 2026     
0174                       ;-------------------------------------------------------
0175                       ; Check ENTER key if ID >= 100 and close pane if match
0176                       ;-------------------------------------------------------
0177               edkey.key.process.enter:
0178 6248 C120  34         mov   @keycode1,tmp0        ; Get key
     624A A028     
0179 624C 0284  22         ci    tmp0,key.space        ; SPACE ?
     624E 0020     
0180 6250 1602  14         jne   edkey.key.process.exit
0181 6252 0460  28         b     @edkey.action.cmdb.close.dialog
     6254 6F22     
0182                       ;-------------------------------------------------------
0183                       ; Exit
0184                       ;-------------------------------------------------------
0185               edkey.key.process.exit:
0186 6256 0460  28         b     @edkey.keyscan.hook.debounce
     6258 6168     
0187                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; Keyboard actions - Framebuffer (1)
0085                       ;-----------------------------------------------------------------------
0086                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 625A C120  34         mov   @fb.column,tmp0
     625C A30C     
0009 625E 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6260 0620  34         dec   @fb.column            ; Column-- in screen buffer
     6262 A30C     
0014 6264 0620  26         dec   @wyx                  ; Column-- VDP cursor
     6266 832A     
0015 6268 0620  34         dec   @fb.current
     626A A302     
0016 626C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     626E A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 6270 0460  28 !       b     @edkey.keyscan.hook.debounce
     6272 6168     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 6274 8820  50         c     @fb.column,@fb.row.length
     6276 A30C     
     6278 A308     
0029 627A 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 627C 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     627E A30C     
0034 6280 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6282 832A     
0035 6284 05A0  34         inc   @fb.current
     6286 A302     
0036 6288 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     628A A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 628C 0460  28 !       b     @edkey.keyscan.hook.debounce
     628E 6168     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 6290 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     6292 7AFC     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 6294 0460  28         b     @edkey.keyscan.hook.debounce
     6296 6168     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 6298 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     629A A31A     
0061 629C C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     629E A308     
0062 62A0 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     62A2 0050     
0063 62A4 1102  14         jlt   !                     ; | is right of last character on line,
0064 62A6 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     62A8 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 62AA C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     62AC A30C     
0069 62AE 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     62B0 26DE     
0070               
0071 62B2 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     62B4 30EC     
0072                                                   ; \ i   @fb.top      = Address top row in FB
0073                                                   ; | i   @fb.topline  = Top line in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; |                  (offset 0..@fb.scrrows)
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; | i   @fb.colsline = Columns per line FB
0078                                                   ; |
0079                                                   ; / o   @fb.current  = Updated pointer
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083 62B6 0460  28         b     @edkey.keyscan.hook.debounce
     62B8 6168     
0084                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 62BA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62BC A31A     
0009 62BE C120  34         mov   @fb.column,tmp0
     62C0 A30C     
0010 62C2 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62C4 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62C6 A302     
0015 62C8 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62CA 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 62CC 0605  14         dec   tmp1
0022 62CE 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62D0 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 62D2 D195  26         movb  *tmp1,tmp2            ; Get character
0030 62D4 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62D6 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62D8 0986  32         srl   tmp2,8                ; Right justify
0033 62DA 0286  22         ci    tmp2,32               ; Space character found?
     62DC 0020     
0034 62DE 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 62E0 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62E2 2020     
0040 62E4 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62E6 0287  22         ci    tmp3,>20ff            ; First character is space
     62E8 20FF     
0043 62EA 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62EC C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62EE A30C     
0048 62F0 61C4  18         s     tmp0,tmp3
0049 62F2 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62F4 0002     
0050 62F6 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 62F8 0585  14         inc   tmp1
0056 62FA 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 62FC C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     62FE A30C     
0062 6300 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6302 26DE     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 6304 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6306 30EC     
0068                                                   ; \ i   @fb.top      = Address top row in FB
0069                                                   ; | i   @fb.topline  = Top line in FB
0070                                                   ; | i   @fb.row      = Current row in FB
0071                                                   ; |                  (offset 0..@fb.scrrows)
0072                                                   ; | i   @fb.column   = Current column in FB
0073                                                   ; | i   @fb.colsline = Columns per line FB
0074                                                   ; |
0075                                                   ; / o   @fb.current  = Updated pointer
0076               
0077 6308 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     630A 6168     
0078               
0079               
0080               
0081               *---------------------------------------------------------------
0082               * Cursor next word
0083               *---------------------------------------------------------------
0084               edkey.action.nword:
0085 630C 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     630E A31A     
0086 6310 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0087 6312 C120  34         mov   @fb.column,tmp0
     6314 A30C     
0088 6316 8804  34         c     tmp0,@fb.row.length
     6318 A308     
0089 631A 1426  14         jhe   !                     ; column=last char ? Skip further processing
0090                       ;-------------------------------------------------------
0091                       ; Prepare 2 char buffer
0092                       ;-------------------------------------------------------
0093 631C C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     631E A302     
0094 6320 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0095 6322 1006  14         jmp   edkey.action.nword_scan_char
0096                       ;-------------------------------------------------------
0097                       ; Multiple spaces mode
0098                       ;-------------------------------------------------------
0099               edkey.action.nword_ms:
0100 6324 0708  14         seto  tmp4                  ; Set multiple spaces mode
0101                       ;-------------------------------------------------------
0102                       ; Scan forward to first character following space
0103                       ;-------------------------------------------------------
0104               edkey.action.nword_scan
0105 6326 0585  14         inc   tmp1
0106 6328 0584  14         inc   tmp0                  ; Column++ in screen buffer
0107 632A 8804  34         c     tmp0,@fb.row.length
     632C A308     
0108 632E 1316  14         jeq   edkey.action.nword_done
0109                                                   ; Column=last char ? Skip further processing
0110                       ;-------------------------------------------------------
0111                       ; Check character
0112                       ;-------------------------------------------------------
0113               edkey.action.nword_scan_char
0114 6330 D195  26         movb  *tmp1,tmp2            ; Get character
0115 6332 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0116 6334 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0117 6336 0986  32         srl   tmp2,8                ; Right justify
0118               
0119 6338 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     633A FFFF     
0120 633C 1604  14         jne   edkey.action.nword_scan_char_other
0121                       ;-------------------------------------------------------
0122                       ; Special handling if multiple spaces found
0123                       ;-------------------------------------------------------
0124               edkey.action.nword_scan_char_ms:
0125 633E 0286  22         ci    tmp2,32
     6340 0020     
0126 6342 160C  14         jne   edkey.action.nword_done
0127                                                   ; Exit if non-space found
0128 6344 10F0  14         jmp   edkey.action.nword_scan
0129                       ;-------------------------------------------------------
0130                       ; Normal handling
0131                       ;-------------------------------------------------------
0132               edkey.action.nword_scan_char_other:
0133 6346 0286  22         ci    tmp2,32               ; Space character found?
     6348 0020     
0134 634A 16ED  14         jne   edkey.action.nword_scan
0135                                                   ; No space found, try again
0136                       ;-------------------------------------------------------
0137                       ; Space found, now look closer
0138                       ;-------------------------------------------------------
0139 634C 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     634E 2020     
0140 6350 13E9  14         jeq   edkey.action.nword_ms
0141                                                   ; Yes, so continue scanning
0142 6352 0287  22         ci    tmp3,>20ff            ; First characer is space?
     6354 20FF     
0143 6356 13E7  14         jeq   edkey.action.nword_scan
0144                       ;--------------------------------------------------------
0145                       ; Set cursor following space
0146                       ;--------------------------------------------------------
0147 6358 0585  14         inc   tmp1
0148 635A 0584  14         inc   tmp0                  ; Column++ in screen buffer
0149                       ;-------------------------------------------------------
0150                       ; Save position and position hardware cursor
0151                       ;-------------------------------------------------------
0152               edkey.action.nword_done:
0153 635C C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     635E A30C     
0154 6360 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6362 26DE     
0155                       ;-------------------------------------------------------
0156                       ; Exit
0157                       ;-------------------------------------------------------
0158               edkey.action.nword.exit:
0159 6364 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6366 30EC     
0160                                                   ; \ i   @fb.top      = Address top row in FB
0161                                                   ; | i   @fb.topline  = Top line in FB
0162                                                   ; | i   @fb.row      = Current row in FB
0163                                                   ; |                  (offset 0..@fb.scrrows)
0164                                                   ; | i   @fb.column   = Current column in FB
0165                                                   ; | i   @fb.colsline = Columns per line FB
0166                                                   ; |
0167                                                   ; / o   @fb.current  = Updated pointer
0168               
0169 6368 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     636A 6168     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 636C C120  34         mov   @fb.vwco,tmp0
     636E A310     
0009 6370 0284  22         ci    tmp0,16
     6372 0010     
0010 6374 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 6376 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6378 04E0  34         clr   @parm1
     637A A006     
0016 637C 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 637E 0224  22 !       ai    tmp0,-16              ; Scroll left
     6380 FFF0     
0021 6382 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     6384 A006     
0022               
0023 6386 0204  20         li    tmp0,16               ; Temporary constant
     6388 0010     
0024 638A 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     638C A30C     
     638E 200E     
0025 6390 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 6392 A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     6394 A30C     
0030 6396 A804  30         a     tmp0,@wyx             ; VDP Cursor
     6398 832A     
0031 639A A804  38         a     tmp0,@fb.current
     639C A302     
0032 639E 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 63A0 C120  34         mov   @fb.vwco,tmp0
     63A2 A310     
0040 63A4 0284  22         ci    tmp0,175
     63A6 00AF     
0041 63A8 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 63AA 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 63AC 04E0  34         clr   @parm1
     63AE A006     
0047 63B0 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63B2 0224  22 !       ai    tmp0,16               ; Scroll right
     63B4 0010     
0052 63B6 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63B8 A006     
0053               
0054 63BA 0204  20         li    tmp0,16               ; Temporary constant
     63BC 0010     
0055 63BE 8120  34         c     @fb.column,tmp0
     63C0 A30C     
0056 63C2 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63C4 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63C6 A30C     
0061 63C8 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63CA 832A     
0062 63CC 6804  38         s     tmp0,@fb.current
     63CE A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 63D0 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63D2 7AAC     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 63D4 0460  28         b     @edkey.keyscan.hook.debounce
     63D6 6168     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0089                       copy  "edkey.fb.mov.updown.asm"     ; Move line up / down
     **** ****     > edkey.fb.mov.updown.asm
0001               * FILE......: edkey.fb.mov.updown.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor up
0006               *---------------------------------------------------------------
0007               edkey.action.up:
0008 63D8 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     63DA 7AE8     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012               edkey.action.up.exit:
0013 63DC 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63DE 6168     
0014               
0015               
0016               
0017               *---------------------------------------------------------------
0018               * Cursor down
0019               *---------------------------------------------------------------
0020               edkey.action.down:
0021 63E0 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     63E2 7AF2     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.down.exit:
0026 63E4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63E6 6168     
                   < stevie_b1.asm
0090                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 63E8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63EA A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63EC 8820  50         c     @fb.row.dirty,@w$ffff
     63EE A30A     
     63F0 2022     
0013 63F2 1604  14         jne   edkey.action.ppage.sanity
0014               
0015 63F4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63F6 6FF4     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.row      = Current row in FB
0018                                                   ; | i   @fb.column   = Current column in FB
0019                                                   ; / i   @fb.colsline = Cols per line in FB
0020               
0021 63F8 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63FA A30A     
0022                       ;-------------------------------------------------------
0023                       ; Assert
0024                       ;-------------------------------------------------------
0025               edkey.action.ppage.sanity:
0026 63FC C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63FE A304     
0027 6400 1312  14         jeq   edkey.action.ppage.exit
0028                       ;-------------------------------------------------------
0029                       ; Special treatment top page
0030                       ;-------------------------------------------------------
0031 6402 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     6404 A31C     
0032 6406 1503  14         jgt   edkey.action.ppage.topline
0033 6408 04E0  34         clr   @fb.topline           ; topline = 0
     640A A304     
0034 640C 1003  14         jmp   edkey.action.ppage.refresh
0035                       ;-------------------------------------------------------
0036                       ; Adjust topline
0037                       ;-------------------------------------------------------
0038               edkey.action.ppage.topline:
0039 640E 6820  54         s     @fb.scrrows,@fb.topline
     6410 A31C     
     6412 A304     
0040                       ;-------------------------------------------------------
0041                       ; Refresh page
0042                       ;-------------------------------------------------------
0043               edkey.action.ppage.refresh:
0044 6414 C820  54         mov   @fb.topline,@parm1
     6416 A304     
     6418 A006     
0045 641A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     641C A312     
0046               
0047 641E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6420 A008     
0048               
0049 6422 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6424 6528     
0050                                                   ; | i  @parm1 = Top line in editor buffer
0051                                                   ; / i  @parm2 = Row offset in frame buffer
0052                       ;-------------------------------------------------------
0053                       ; Exit
0054                       ;-------------------------------------------------------
0055               edkey.action.ppage.exit:
0056 6426 0460  28         b     @edkey.keyscan.hook.debounce
     6428 6168     
0057                                                   ; Back to editor main
0058               
0059               
0060               
0061               
0062               *---------------------------------------------------------------
0063               * Next page
0064               *---------------------------------------------------------------
0065               edkey.action.npage:
0066 642A 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     642C A31A     
0067                       ;-------------------------------------------------------
0068                       ; Crunch current row if dirty
0069                       ;-------------------------------------------------------
0070 642E 8820  50         c     @fb.row.dirty,@w$ffff
     6430 A30A     
     6432 2022     
0071 6434 1604  14         jne   edkey.action.npage.sanity
0072               
0073 6436 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6438 6FF4     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.row      = Current row in FB
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; / i   @fb.colsline = Cols per line in FB
0078               
0079 643A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     643C A30A     
0080                       ;-------------------------------------------------------
0081                       ; Assert
0082                       ;-------------------------------------------------------
0083               edkey.action.npage.sanity:
0084 643E C120  34         mov   @fb.topline,tmp0
     6440 A304     
0085 6442 A120  34         a     @fb.scrrows,tmp0
     6444 A31C     
0086 6446 0584  14         inc   tmp0                  ; Base 1 offset !
0087 6448 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     644A A504     
0088 644C 150C  14         jgt   edkey.action.npage.exit
0089                       ;-------------------------------------------------------
0090                       ; Adjust topline
0091                       ;-------------------------------------------------------
0092               edkey.action.npage.topline:
0093 644E A820  54         a     @fb.scrrows,@fb.topline
     6450 A31C     
     6452 A304     
0094                       ;-------------------------------------------------------
0095                       ; Refresh page
0096                       ;-------------------------------------------------------
0097               edkey.action.npage.refresh:
0098 6454 C820  54         mov   @fb.topline,@parm1
     6456 A304     
     6458 A006     
0099 645A 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     645C A312     
0100               
0101 645E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6460 A008     
0102               
0103 6462 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6464 6528     
0104                                                   ; | i  @parm1 = Top line in editor buffer
0105                                                   ; / i  @parm2 = Row offset in frame buffer
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               edkey.action.npage.exit:
0110 6466 0460  28         b     @edkey.keyscan.hook.debounce
     6468 6168     
0111                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008                       ;-------------------------------------------------------
0009                       ; Crunch current row if dirty
0010                       ;-------------------------------------------------------
0011 646A 8820  50         c     @fb.row.dirty,@w$ffff
     646C A30A     
     646E 2022     
0012 6470 1604  14         jne   edkey.action.top.refresh
0013               
0014 6472 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6474 6FF4     
0015                                                   ; \ i   @fb.top      = Address top row in FB
0016                                                   ; | i   @fb.row      = Current row in FB
0017                                                   ; | i   @fb.column   = Current column in FB
0018                                                   ; / i   @fb.colsline = Cols per line in FB
0019               
0020 6476 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6478 A30A     
0021                       ;-------------------------------------------------------
0022                       ; Refresh page
0023                       ;-------------------------------------------------------
0024               edkey.action.top.refresh:
0025 647A 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     647C A006     
0026 647E 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6480 A312     
0027               
0028 6482 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6484 A008     
0029               
0030 6486 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6488 6528     
0031                                                   ; | i  @parm1 = Top line in editor buffer
0032                                                   ; / i  @parm2 = Row offset in frame buffer
0033               
0034               *---------------------------------------------------------------
0035               * Goto top of screen
0036               *---------------------------------------------------------------
0037               edkey.action.topscr:
0038                       ;-------------------------------------------------------
0039                       ; Crunch current row if dirty
0040                       ;-------------------------------------------------------
0041 648A 8820  50         c     @fb.row.dirty,@w$ffff
     648C A30A     
     648E 2022     
0042 6490 1604  14         jne   edkey.action.topscr.refresh
0043               
0044 6492 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6494 6FF4     
0045                                                   ; \ i   @fb.top      = Address top row in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; | i   @fb.column   = Current column in FB
0048                                                   ; / i   @fb.colsline = Cols per line in FB
0049               
0050 6496 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6498 A30A     
0051                       ;-------------------------------------------------------
0052                       ; Refresh screen
0053                       ;-------------------------------------------------------
0054               edkey.action.topscr.refresh:
0055 649A C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     649C A304     
     649E A006     
0056 64A0 04E0  34         clr   @parm2                ; No row offset in frame buffer
     64A2 A008     
0057               
0058 64A4 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64A6 6528     
0059                                                   ; | i  @parm1 = Top line in editor buffer
0060                                                   ; / i  @parm2 = Row offset in frame buffer
0061               
0062               *---------------------------------------------------------------
0063               * Goto bottom of file
0064               *---------------------------------------------------------------
0065               edkey.action.bot:
0066                       ;-------------------------------------------------------
0067                       ; Crunch current row if dirty
0068                       ;-------------------------------------------------------
0069 64A8 8820  50         c     @fb.row.dirty,@w$ffff
     64AA A30A     
     64AC 2022     
0070 64AE 1604  14         jne   edkey.action.bot.refresh
0071               
0072 64B0 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64B2 6FF4     
0073                                                   ; \ i   @fb.top      = Address top row in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; | i   @fb.column   = Current column in FB
0076                                                   ; / i   @fb.colsline = Cols per line in FB
0077               
0078 64B4 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64B6 A30A     
0079                       ;-------------------------------------------------------
0080                       ; Refresh page
0081                       ;-------------------------------------------------------
0082               edkey.action.bot.refresh:
0083 64B8 8820  50         c     @edb.lines,@fb.scrrows
     64BA A504     
     64BC A31C     
0084 64BE 120C  14         jle   edkey.action.bot.exit ; Skip if whole editor buffer on screen
0085               
0086 64C0 C120  34         mov   @edb.lines,tmp0
     64C2 A504     
0087 64C4 6120  34         s     @fb.scrrows,tmp0
     64C6 A31C     
0088 64C8 C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     64CA A006     
0089 64CC 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64CE A312     
0090               
0091 64D0 04E0  34         clr   @parm2                ; No row offset in frame buffer
     64D2 A008     
0092               
0093 64D4 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     64D6 6528     
0094                                                   ; | i  @parm1 = Top line in editor buffer
0095                                                   ; / i  @parm2 = Row offset in frame buffer
0096               
0097                       ;-------------------------------------------------------
0098                       ; Exit
0099                       ;-------------------------------------------------------
0100               edkey.action.bot.exit:
0101 64D8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64DA 6168     
0102               
0103               
0104               
0105               *---------------------------------------------------------------
0106               * Goto bottom of screen
0107               *---------------------------------------------------------------
0108               edkey.action.botscr:
0109 64DC 0649  14         dect  stack
0110 64DE C644  30         mov   tmp0,*stack           ; Push tmp0
0111                       ;-------------------------------------------------------
0112                       ; Crunch current row if dirty
0113                       ;-------------------------------------------------------
0114 64E0 8820  50         c     @fb.row.dirty,@w$ffff
     64E2 A30A     
     64E4 2022     
0115 64E6 1604  14         jne   edkey.action.botscr.cursor
0116               
0117 64E8 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64EA 6FF4     
0118                                                   ; \ i   @fb.top      = Address top row in FB
0119                                                   ; | i   @fb.row      = Current row in FB
0120                                                   ; | i   @fb.column   = Current column in FB
0121                                                   ; / i   @fb.colsline = Cols per line in FB
0122               
0123 64EC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64EE A30A     
0124                       ;-------------------------------------------------------
0125                       ; Position cursor
0126                       ;-------------------------------------------------------
0127               edkey.action.botscr.cursor:
0128 64F0 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64F2 A31A     
0129               
0130 64F4 8820  50         c     @fb.scrrows,@edb.lines
     64F6 A31C     
     64F8 A504     
0131 64FA 1503  14         jgt   edkey.action.botscr.eof
0132 64FC C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     64FE A31C     
0133 6500 1002  14         jmp   !
0134                       ;-------------------------------------------------------
0135                       ; Cursor at EOF
0136                       ;-------------------------------------------------------
0137               edkey.action.botscr.eof:
0138 6502 C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     6504 A504     
0139                       ;-------------------------------------------------------
0140                       ; Position cursor
0141                       ;-------------------------------------------------------
0142 6506 0604  14 !       dec   tmp0                  ; Base 0
0143 6508 C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     650A A306     
0144 650C 04E0  34         clr   @fb.column            ; Frame buffer column 0
     650E A30C     
0145               
0146 6510 C120  34         mov   @fb.row,tmp0          ;
     6512 A306     
0147 6514 0A84  32         sla   tmp0,8                ; Position cursor
0148 6516 C804  30         mov   tmp0,@wyx             ;
     6518 832A     
0149               
0150 651A 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     651C 30EC     
0151                                                   ; \ i   @fb.top      = Address top row in FB
0152                                                   ; | i   @fb.topline  = Top line in FB
0153                                                   ; | i   @fb.row      = Current row in FB
0154                                                   ; |                  (offset 0..@fb.scrrows)
0155                                                   ; | i   @fb.column   = Current column in FB
0156                                                   ; | i   @fb.colsline = Columns per line FB
0157                                                   ; |
0158                                                   ; / o   @fb.current  = Updated pointer
0159               
0160 651E 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6520 36E4     
0161                                                   ; | i  @fb.row        = Row in frame buffer
0162                                                   ; / o  @fb.row.length = Length of row
0163                       ;-------------------------------------------------------
0164                       ; Exit
0165                       ;-------------------------------------------------------
0166               edkey.action.botscr.exit:
0167 6522 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0168 6524 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6526 6168     
                   < stevie_b1.asm
0092                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               * @parm2  = Row offset in frame buffer
0018               *
0019               * Register usage
0020               * none
0021               ********|*****|*********************|**************************
0022               edkey.fb.goto.toprow:
0023 6528 0649  14         dect  stack
0024 652A C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Assert on line
0027                       ;-------------------------------------------------------
0028 652C C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     652E A006     
0029 6530 8120  34         c     @edb.lines,tmp0       ; /
     6532 A504     
0030 6534 1B05  14         jh    !                     ; No, keep on going
0031 6536 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     6538 A504     
     653A A006     
0032 653C 0620  34         dec   @parm1                ; / Base 0
     653E A006     
0033                       ;-------------------------------------------------------
0034                       ; Assert on row offset in frame buffer
0035                       ;-------------------------------------------------------
0036 6540 8820  50 !       c     @parm2,@fb.scrrows    ; Row offset off page ?
     6542 A008     
     6544 A31C     
0037 6546 1104  14         jlt   edkey.fb.goto.row     ; No, use row offset
0038 6548 C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     654A A31C     
     654C A306     
0039 654E 1003  14         jmp   edkey.fb.goto.line    ; Goto line
0040               edkey.fb.goto.row:
0041 6550 C820  54         mov   @parm2,@fb.row        ; Set row offset
     6552 A008     
     6554 A306     
0042                       ;-------------------------------------------------------
0043                       ; Goto line
0044                       ;-------------------------------------------------------
0045               edkey.fb.goto.line:
0046 6556 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6558 A31A     
0047               
0048 655A 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     655C 7AC0     
0049                                                   ; | i  @parm1 = Line to start with
0050                                                   ; /             (becomes @fb.topline)
0051               
0052 655E 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6560 A30C     
0053               
0054 6562 C120  34         mov   @fb.row,tmp0          ; \
     6564 A306     
0055 6566 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0056 6568 C804  30         mov   tmp0,@wyx             ; /
     656A 832A     
0057               
0058 656C 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     656E 30EC     
0059                                                   ; \ i   @fb.top      = Address top row in FB
0060                                                   ; | i   @fb.topline  = Top line in FB
0061                                                   ; | i   @fb.row      = Current row in FB
0062                                                   ; |                  (offset 0..@fb.scrrows)
0063                                                   ; | i   @fb.column   = Current column in FB
0064                                                   ; | i   @fb.colsline = Columns per line FB
0065                                                   ; |
0066                                                   ; / o   @fb.current  = Updated pointer
0067               
0068 6570 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6572 36E4     
0069                                                   ; | i  @fb.row        = Row in frame buffer
0070                                                   ; / o  @fb.row.length = Length of row
0071               
0072                       ;-------------------------------------------------------
0073                       ; Exit
0074                       ;-------------------------------------------------------
0075 6574 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 6576 0460  28         b     @edkey.keyscan.hook.debounce
     6578 6168     
0077                                                   ; Back to editor main
0078               
0079               
0080               *---------------------------------------------------------------
0081               * Goto specified line (@parm1) in editor buffer
0082               *---------------------------------------------------------------
0083               edkey.action.goto:
0084                       ;-------------------------------------------------------
0085                       ; Crunch current row if dirty
0086                       ;-------------------------------------------------------
0087 657A 8820  50         c     @fb.row.dirty,@w$ffff
     657C A30A     
     657E 2022     
0088 6580 1609  14         jne   edkey.action.goto.refresh
0089               
0090 6582 0649  14         dect  stack
0091 6584 C660  46         mov   @parm1,*stack         ; Push parm1
     6586 A006     
0092               
0093 6588 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     658A 6FF4     
0094                                                   ; \ i   @fb.top      = Address top row in FB
0095                                                   ; | i   @fb.row      = Current row in FB
0096                                                   ; | i   @fb.column   = Current column in FB
0097                                                   ; / i   @fb.colsline = Cols per line in FB
0098               
0099 658C C839  50         mov   *stack+,@parm1        ; Pop parm1
     658E A006     
0100 6590 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6592 A30A     
0101                       ;-------------------------------------------------------
0102                       ; Refresh page
0103                       ;-------------------------------------------------------
0104               edkey.action.goto.refresh:
0105 6594 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6596 A312     
0106               
0107 6598 04E0  34         clr   @parm2                ; No row offset in frame buffer
     659A A008     
0108               
0109 659C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     659E 6528     
0110                                                   ; | i  @parm1 = Top line in editor buffer
0111                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0093                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008 65A0 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     65A2 A506     
0009               
0010 65A4 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     65A6 30EC     
0011                                                   ; \ i   @fb.top      = Address top row in FB
0012                                                   ; | i   @fb.topline  = Top line in FB
0013                                                   ; | i   @fb.row      = Current row in FB
0014                                                   ; |                  (offset 0..@fb.scrrows)
0015                                                   ; | i   @fb.column   = Current column in FB
0016                                                   ; | i   @fb.colsline = Columns per line FB
0017                                                   ; |
0018                                                   ; / o   @fb.current  = Updated pointer
0019                       ;-------------------------------------------------------
0020                       ; Assert 1 - Empty line
0021                       ;-------------------------------------------------------
0022               edkey.action.del_char.sanity1:
0023 65A8 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     65AA A308     
0024 65AC 1336  14         jeq   edkey.action.del_char.exit
0025                                                   ; Exit if empty line
0026               
0027 65AE C120  34         mov   @fb.current,tmp0      ; Get pointer
     65B0 A302     
0028                       ;-------------------------------------------------------
0029                       ; Assert 2 - Already at EOL
0030                       ;-------------------------------------------------------
0031               edkey.action.del_char.sanity2:
0032 65B2 C1C6  18         mov   tmp2,tmp3             ; \
0033 65B4 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0034 65B6 81E0  34         c     @fb.column,tmp3
     65B8 A30C     
0035 65BA 110A  14         jlt   edkey.action.del_char.sanity3
0036               
0037                       ;------------------------------------------------------
0038                       ; At EOL - clear current character
0039                       ;------------------------------------------------------
0040 65BC 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0041 65BE D505  30         movb  tmp1,*tmp0            ; /
0042 65C0 C820  54         mov   @fb.column,@fb.row.length
     65C2 A30C     
     65C4 A308     
0043                                                   ; Row length - 1
0044 65C6 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65C8 A30A     
0045 65CA 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65CC A318     
0046 65CE 1025  14         jmp  edkey.action.del_char.exit
0047                       ;-------------------------------------------------------
0048                       ; Assert 3 - Abort if row length > 80
0049                       ;-------------------------------------------------------
0050               edkey.action.del_char.sanity3:
0051 65D0 0286  22         ci    tmp2,colrow
     65D2 0050     
0052 65D4 1204  14         jle   edkey.action.del_char.prep
0053                                                   ; Continue if row length <= 80
0054                       ;-----------------------------------------------------------------------
0055                       ; CPU crash
0056                       ;-----------------------------------------------------------------------
0057 65D6 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     65D8 FFCE     
0058 65DA 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     65DC 2026     
0059                       ;-------------------------------------------------------
0060                       ; Calculate number of characters to move
0061                       ;-------------------------------------------------------
0062               edkey.action.del_char.prep:
0063 65DE C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0064 65E0 61E0  34         s     @fb.column,tmp3
     65E2 A30C     
0065 65E4 0607  14         dec   tmp3                  ; Remove base 1 offset
0066 65E6 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0067 65E8 C144  18         mov   tmp0,tmp1
0068 65EA 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0069 65EC 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     65EE A30C     
0070                       ;-------------------------------------------------------
0071                       ; Setup pointers
0072                       ;-------------------------------------------------------
0073 65F0 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65F2 A302     
0074 65F4 C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0075 65F6 0585  14         inc   tmp1                  ; / tmp1 = Next character
0076                       ;-------------------------------------------------------
0077                       ; Loop from current character until end of line
0078                       ;-------------------------------------------------------
0079               edkey.action.del_char.loop:
0080 65F8 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0081 65FA 0606  14         dec   tmp2
0082 65FC 16FD  14         jne   edkey.action.del_char.loop
0083                       ;-------------------------------------------------------
0084                       ; Special treatment if line 80 characters long
0085                       ;-------------------------------------------------------
0086 65FE 0206  20         li    tmp2,colrow
     6600 0050     
0087 6602 81A0  34         c     @fb.row.length,tmp2
     6604 A308     
0088 6606 1603  14         jne   edkey.action.del_char.save
0089 6608 0604  14         dec   tmp0                  ; One time adjustment
0090 660A 04C5  14         clr   tmp1
0091 660C D505  30         movb  tmp1,*tmp0            ; Write >00 character
0092                       ;-------------------------------------------------------
0093                       ; Save variables
0094                       ;-------------------------------------------------------
0095               edkey.action.del_char.save:
0096 660E 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6610 A30A     
0097 6612 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6614 A318     
0098 6616 0620  34         dec   @fb.row.length        ; @fb.row.length--
     6618 A308     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.del_char.exit:
0103 661A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     661C 6168     
0104               
0105               
0106               *---------------------------------------------------------------
0107               * Delete until end of line
0108               *---------------------------------------------------------------
0109               edkey.action.del_eol:
0110 661E 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6620 A506     
0111               
0112 6622 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6624 30EC     
0113                                                   ; \ i   @fb.top      = Address top row in FB
0114                                                   ; | i   @fb.topline  = Top line in FB
0115                                                   ; | i   @fb.row      = Current row in FB
0116                                                   ; |                  (offset 0..@fb.scrrows)
0117                                                   ; | i   @fb.column   = Current column in FB
0118                                                   ; | i   @fb.colsline = Columns per line FB
0119                                                   ; |
0120                                                   ; / o   @fb.current  = Updated pointer
0121               
0122 6626 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6628 A308     
0123 662A 1311  14         jeq   edkey.action.del_eol.exit
0124                                                   ; Exit if empty line
0125                       ;-------------------------------------------------------
0126                       ; Prepare for erase operation
0127                       ;-------------------------------------------------------
0128 662C C120  34         mov   @fb.current,tmp0      ; Get pointer
     662E A302     
0129 6630 C1A0  34         mov   @fb.colsline,tmp2
     6632 A30E     
0130 6634 61A0  34         s     @fb.column,tmp2
     6636 A30C     
0131 6638 04C5  14         clr   tmp1
0132                       ;-------------------------------------------------------
0133                       ; Loop until last column in frame buffer
0134                       ;-------------------------------------------------------
0135               edkey.action.del_eol_loop:
0136 663A DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0137 663C 0606  14         dec   tmp2
0138 663E 16FD  14         jne   edkey.action.del_eol_loop
0139                       ;-------------------------------------------------------
0140                       ; Save variables
0141                       ;-------------------------------------------------------
0142 6640 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6642 A30A     
0143 6644 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6646 A318     
0144               
0145 6648 C820  54         mov   @fb.column,@fb.row.length
     664A A30C     
     664C A308     
0146                                                   ; Set new row length
0147                       ;-------------------------------------------------------
0148                       ; Exit
0149                       ;-------------------------------------------------------
0150               edkey.action.del_eol.exit:
0151 664E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6650 6168     
0152               
0153               
0154               *---------------------------------------------------------------
0155               * Delete current line
0156               *---------------------------------------------------------------
0157               edkey.action.del_line:
0158                       ;-------------------------------------------------------
0159                       ; Get current line in editor buffer
0160                       ;-------------------------------------------------------
0161 6652 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6654 30EC     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 6656 04E0  34         clr   @fb.row.dirty         ; Discard current line
     6658 A30A     
0172               
0173 665A C820  54         mov   @fb.topline,@parm1    ; \
     665C A304     
     665E A006     
0174 6660 A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     6662 A306     
     6664 A006     
0175 6666 05A0  34         inc   @parm1                ; /
     6668 A006     
0176               
0177                       ;-------------------------------------------------------
0178                       ; Special handling if at BOT (no real line)
0179                       ;-------------------------------------------------------
0180 666A 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     666C A006     
     666E A504     
0181 6670 1207  14         jle   edkey.action.del_line.doit
0182                                                   ; No, is real line. Continue with delete.
0183               
0184 6672 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6674 A304     
     6676 A006     
0185 6678 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     667A 7AC0     
0186                                                   ; \ i  @parm1 = Line to start with
0187                                                   ; /
0188 667C 0460  28         b     @edkey.action.up      ; Move cursor one line up
     667E 63D8     
0189                       ;-------------------------------------------------------
0190                       ; Delete line in editor buffer
0191                       ;-------------------------------------------------------
0192               edkey.action.del_line.doit:
0193 6680 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     6682 7B72     
0194                                                   ; \ i  @parm1 = Line number to delete
0195                                                   ; /
0196               
0197 6684 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     6686 A006     
     6688 A504     
0198 668A 1302  14         jeq   edkey.action.del_line.refresh
0199                                                   ; Yes, skip get length. No need for garbage.
0200                       ;-------------------------------------------------------
0201                       ; Get length of current row in frame buffer
0202                       ;-------------------------------------------------------
0203 668C 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     668E 36E4     
0204                                                   ; \ i  @fb.row        = Current row
0205                                                   ; / o  @fb.row.length = Length of row
0206                       ;-------------------------------------------------------
0207                       ; Refresh frame buffer
0208                       ;-------------------------------------------------------
0209               edkey.action.del_line.refresh:
0210 6690 C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6692 A304     
     6694 A006     
0211               
0212 6696 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6698 7AC0     
0213                                                   ; \ i  @parm1 = Line to start with
0214                                                   ; /
0215               
0216 669A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     669C A506     
0217                       ;-------------------------------------------------------
0218                       ; Special treatment if current line was last line
0219                       ;-------------------------------------------------------
0220 669E C120  34         mov   @fb.topline,tmp0
     66A0 A304     
0221 66A2 A120  34         a     @fb.row,tmp0
     66A4 A306     
0222               
0223 66A6 8804  34         c     tmp0,@edb.lines       ; Was last line?
     66A8 A504     
0224 66AA 1102  14         jlt   edkey.action.del_line.exit
0225               
0226 66AC 0460  28         b     @edkey.action.up      ; Move cursor one line up
     66AE 63D8     
0227                       ;-------------------------------------------------------
0228                       ; Exit
0229                       ;-------------------------------------------------------
0230               edkey.action.del_line.exit:
0231 66B0 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     66B2 6290     
                   < stevie_b1.asm
0094                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010 66B4 0204  20         li    tmp0,>2000            ; White space
     66B6 2000     
0011 66B8 C804  38         mov   tmp0,@parm1
     66BA A006     
0012               edkey.action.ins_char:
0013 66BC 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66BE A506     
0014               
0015 66C0 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     66C2 30EC     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.topline  = Top line in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; |                  (offset 0..@fb.scrrows)
0020                                                   ; | i   @fb.column   = Current column in FB
0021                                                   ; | i   @fb.colsline = Columns per line FB
0022                                                   ; |
0023                                                   ; / o   @fb.current  = Updated pointer
0024                       ;-------------------------------------------------------
0025                       ; Check 1 - Empty line
0026                       ;-------------------------------------------------------
0027               edkey.actions.ins.char.empty_line:
0028 66C4 C120  34         mov   @fb.current,tmp0      ; Get pointer
     66C6 A302     
0029 66C8 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     66CA A308     
0030 66CC 1342  14         jeq   edkey.action.ins_char.append
0031                                                   ; Add character in append mode
0032                       ;-------------------------------------------------------
0033                       ; Check 2 - line-wrap if at character 80
0034                       ;-------------------------------------------------------
0035 66CE C160  34         mov   @fb.column,tmp1
     66D0 A30C     
0036 66D2 0285  22         ci    tmp1,colrow-1         ; At 80th character?
     66D4 004F     
0037 66D6 1118  14         jlt   !
0038 66D8 C160  34         mov   @fb.row.length,tmp1
     66DA A308     
0039 66DC 0285  22         ci    tmp1,colrow
     66DE 0050     
0040 66E0 1613  14         jne   !
0041                       ;-------------------------------------------------------
0042                       ; Wrap to new line
0043                       ;-------------------------------------------------------
0044 66E2 0649  14         dect  Stack
0045 66E4 C660  46         mov   @parm1,*stack         ; Save character to add
     66E6 A006     
0046 66E8 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66EA A506     
0047               
0048 66EC 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     66EE 6FF4     
0049                                                   ; \ i   @fb.top      = Address top row in FB
0050                                                   ; | i   @fb.row      = Current row in FB
0051                                                   ; | i   @fb.column   = Current column in FB
0052                                                   ; / i   @fb.colsline = Cols per line in FB
0053               
0054 66F0 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     66F2 A30A     
0055 66F4 0720  34         seto  @parm1                ; Insert on following line
     66F6 A006     
0056               
0057 66F8 06A0  32         bl    @fb.insert.line       ; Insert empty line
     66FA 7B06     
0058                                                   ; \ i  @parm1 = 0 for insert current line
0059                                                   ; /            >0 for insert following line
0060               
0061 66FC 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     66FE 7AF2     
0062 6700 04C6  14         clr   tmp2                  ; Clear line length
0063 6702 C839  50         mov   *stack+,@parm1        ; Restore character to add
     6704 A006     
0064 6706 1025  14         jmp   edkey.action.ins_char.append
0065                       ;-------------------------------------------------------
0066                       ; Check 3 - EOL
0067                       ;-------------------------------------------------------
0068 6708 8820  50 !       c     @fb.column,@fb.row.length
     670A A30C     
     670C A308     
0069 670E 1321  14         jeq   edkey.action.ins_char.append
0070                                                   ; Add character in append mode
0071                       ;-------------------------------------------------------
0072                       ; Check 4 - Insert only until line length reaches 80th column
0073                       ;-------------------------------------------------------
0074 6710 C160  34         mov   @fb.row.length,tmp1
     6712 A308     
0075 6714 0285  22         ci    tmp1,colrow
     6716 0050     
0076 6718 1101  14         jlt   edkey.action.ins_char.prep
0077 671A 101D  14         jmp   edkey.action.ins_char.exit
0078                       ;-------------------------------------------------------
0079                       ; Calculate number of characters to move
0080                       ;-------------------------------------------------------
0081               edkey.action.ins_char.prep:
0082 671C C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0083 671E 61E0  34         s     @fb.column,tmp3
     6720 A30C     
0084 6722 0607  14         dec   tmp3                  ; Remove base 1 offset
0085 6724 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0086 6726 C144  18         mov   tmp0,tmp1
0087 6728 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0088 672A 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     672C A30C     
0089                       ;-------------------------------------------------------
0090                       ; Loop from end of line until current character
0091                       ;-------------------------------------------------------
0092               edkey.action.ins_char.loop:
0093 672E D554  38         movb  *tmp0,*tmp1           ; Move char to the right
0094 6730 0604  14         dec   tmp0
0095 6732 0605  14         dec   tmp1
0096 6734 0606  14         dec   tmp2
0097 6736 16FB  14         jne   edkey.action.ins_char.loop
0098                       ;-------------------------------------------------------
0099                       ; Insert specified character at current position
0100                       ;-------------------------------------------------------
0101 6738 D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     673A A006     
0102                       ;-------------------------------------------------------
0103                       ; Save variables and exit
0104                       ;-------------------------------------------------------
0105 673C 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     673E A30A     
0106 6740 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6742 A318     
0107 6744 05A0  34         inc   @fb.column
     6746 A30C     
0108 6748 05A0  26         inc   @wyx
     674A 832A     
0109 674C 05A0  34         inc   @fb.row.length        ; @fb.row.length
     674E A308     
0110 6750 1002  14         jmp   edkey.action.ins_char.exit
0111                       ;-------------------------------------------------------
0112                       ; Add character in append mode
0113                       ;-------------------------------------------------------
0114               edkey.action.ins_char.append:
0115 6752 0460  28         b     @edkey.action.char.overwrite
     6754 6836     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               edkey.action.ins_char.exit:
0120 6756 0460  28         b     @edkey.keyscan.hook.debounce
     6758 6168     
0121                                                   ; Back to editor main
0122               
0123               
0124               
0125               
0126               *---------------------------------------------------------------
0127               * Insert new line on current line
0128               *---------------------------------------------------------------
0129               edkey.action.ins_line:
0130 675A 04E0  34         clr   @parm1                ; Insert new line on curren line
     675C A006     
0131               
0132 675E 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6760 7B06     
0133                                                   ; \ i  @parm1 = 0 for insert current line
0134                                                   ; /            >0 for insert following line
0135                       ;-------------------------------------------------------
0136                       ; Exit
0137                       ;-------------------------------------------------------
0138               edkey.action.ins_line.exit:
0139 6762 0460  28         b     @edkey.keyscan.hook.debounce
     6764 6168     
0140                                                   ; Back to editor main
0141               
0142               
0143               *---------------------------------------------------------------
0144               * Insert new line on following line
0145               *---------------------------------------------------------------
0146               edkey.action.ins_line_after:
0147 6766 0720  34         seto  @parm1                ; Insert new line on following line
     6768 A006     
0148               
0149 676A 06A0  32         bl    @fb.insert.line       ; Insert empty line
     676C 7B06     
0150                                                   ; \ i  @parm1 = 0 for insert current line
0151                                                   ; /            >0 for insert following line
0152                       ;-------------------------------------------------------
0153                       ; Exit
0154                       ;-------------------------------------------------------
0155               edkey.action.ins_line_after.exit:
0156 676E 0460  28         b     @edkey.keyscan.hook.debounce
     6770 6168     
0157                                                   ; Back to editor main
                   < stevie_b1.asm
0095                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 6772 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6774 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 6776 8820  50         c     @fb.row.dirty,@w$ffff
     6778 A30A     
     677A 2022     
0013 677C 1606  14         jne   edkey.action.enter.newline
0014 677E 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6780 A506     
0015               
0016 6782 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6784 6FF4     
0017                                                   ; \ i   @fb.top      = Address top row in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; | i   @fb.column   = Current column in FB
0020                                                   ; / i   @fb.colsline = Cols per line in FB
0021               
0022 6786 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6788 A30A     
0023                       ;-------------------------------------------------------
0024                       ; Insert a new line if insert mode is on
0025                       ;-------------------------------------------------------
0026               edkey.action.enter.newline:
0027 678A C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     678C A50A     
0028 678E 1307  14         jeq   edkey.action.enter.upd_counter
0029                                                   ; Overwrite mode, skip insert
0030               
0031 6790 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     6792 A50C     
0032 6794 1304  14         jeq   edkey.action.enter.upd_counter
0033                                                   ; Autoinsert off, skip insert
0034               
0035 6796 0720  34         seto  @parm1                ; Insert line on following line
     6798 A006     
0036               
0037 679A 06A0  32         bl    @fb.insert.line       ; Insert a new line
     679C 7B06     
0038                                                   ; \  i  @parm1 = current/following line
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Update line counter
0042                       ;-------------------------------------------------------
0043               edkey.action.enter.upd_counter:
0044 679E C120  34         mov   @fb.topline,tmp0
     67A0 A304     
0045 67A2 A120  34         a     @fb.row,tmp0
     67A4 A306     
0046 67A6 0584  14         inc   tmp0
0047 67A8 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     67AA A504     
0048 67AC 1102  14         jlt   edkey.action.newline  ; No, continue newline
0049 67AE 05A0  34         inc   @edb.lines            ; Total lines++
     67B0 A504     
0050                       ;-------------------------------------------------------
0051                       ; Process newline
0052                       ;-------------------------------------------------------
0053               edkey.action.newline:
0054                       ;-------------------------------------------------------
0055                       ; Scroll 1 line if cursor at bottom row of screen
0056                       ;-------------------------------------------------------
0057 67B2 C120  34         mov   @fb.scrrows,tmp0
     67B4 A31C     
0058 67B6 0604  14         dec   tmp0
0059 67B8 8120  34         c     @fb.row,tmp0
     67BA A306     
0060 67BC 110C  14         jlt   edkey.action.newline.down
0061                       ;-------------------------------------------------------
0062                       ; Scroll
0063                       ;-------------------------------------------------------
0064 67BE C120  34         mov   @fb.scrrows,tmp0
     67C0 A31C     
0065 67C2 C820  54         mov   @fb.topline,@parm1
     67C4 A304     
     67C6 A006     
0066 67C8 05A0  34         inc   @parm1
     67CA A006     
0067 67CC 06A0  32         bl    @fb.refresh
     67CE 7AC0     
0068 67D0 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     67D2 A312     
0069 67D4 1004  14         jmp   edkey.action.newline.rest
0070                       ;-------------------------------------------------------
0071                       ; Move cursor down a row, there are still rows left
0072                       ;-------------------------------------------------------
0073               edkey.action.newline.down:
0074 67D6 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     67D8 A306     
0075 67DA 06A0  32         bl    @down                 ; Row++ VDP cursor
     67DC 26CC     
0076                       ;-------------------------------------------------------
0077                       ; Set VDP cursor and save variables
0078                       ;-------------------------------------------------------
0079               edkey.action.newline.rest:
0080 67DE 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     67E0 7ACA     
0081                                                   ; | o  @outparm1 = Matching column
0082                                                   ; / o  @outparm2 = Char on matching column
0083               
0084 67E2 C120  34         mov   @outparm1,tmp0
     67E4 A018     
0085 67E6 C804  38         mov   tmp0,@fb.column
     67E8 A30C     
0086 67EA 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     67EC 26DE     
0087 67EE 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     67F0 36E4     
0088               
0089 67F2 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     67F4 30EC     
0090                                                   ; \ i   @fb.top      = Address top row in FB
0091                                                   ; | i   @fb.topline  = Top line in FB
0092                                                   ; | i   @fb.row      = Current row in FB
0093                                                   ; |                  (offset 0..@fb.scrrows)
0094                                                   ; | i   @fb.column   = Current column in FB
0095                                                   ; | i   @fb.colsline = Columns per line FB
0096                                                   ; |
0097                                                   ; / o   @fb.current  = Updated pointer
0098               
0099 67F6 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     67F8 A318     
0100                       ;-------------------------------------------------------
0101                       ; Exit
0102                       ;-------------------------------------------------------
0103               edkey.action.newline.exit:
0104 67FA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67FC 6168     
0105               
0106               
0107               
0108               
0109               *---------------------------------------------------------------
0110               * Toggle insert/overwrite mode
0111               *---------------------------------------------------------------
0112               edkey.action.ins_onoff:
0113 67FE 0649  14         dect  stack
0114 6800 C64B  30         mov   r11,*stack            ; Save return address
0115               
0116 6802 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6804 A31A     
0117 6806 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     6808 A50A     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_onoff.exit:
0122 680A C2F9  30         mov   *stack+,r11           ; Pop r11
0123 680C 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     680E 6168     
0124               
0125               
0126               
0127               *---------------------------------------------------------------
0128               * Add character (frame buffer)
0129               *---------------------------------------------------------------
0130               edkey.action.char:
0131 6810 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6812 A31A     
0132                       ;-------------------------------------------------------
0133                       ; Asserts
0134                       ;-------------------------------------------------------
0135 6814 D105  18         movb  tmp1,tmp0             ; Get keycode
0136 6816 0984  32         srl   tmp0,8                ; MSB to LSB
0137               
0138 6818 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     681A 0020     
0139 681C 112B  14         jlt   edkey.action.char.exit
0140                                                   ; Yes, skip
0141               
0142 681E 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6820 007E     
0143 6822 1528  14         jgt   edkey.action.char.exit
0144                                                   ; Yes, skip
0145                       ;-------------------------------------------------------
0146                       ; Setup
0147                       ;-------------------------------------------------------
0148 6824 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6826 A506     
0149 6828 D805  38         movb  tmp1,@parm1           ; Store character for insert
     682A A006     
0150 682C C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     682E A50A     
0151 6830 1302  14         jeq   edkey.action.char.overwrite
0152                       ;-------------------------------------------------------
0153                       ; Insert mode
0154                       ;-------------------------------------------------------
0155               edkey.action.char.insert:
0156 6832 0460  28         b     @edkey.action.ins_char
     6834 66BC     
0157                       ;-------------------------------------------------------
0158                       ; Overwrite mode - Write character
0159                       ;-------------------------------------------------------
0160               edkey.action.char.overwrite:
0161 6836 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6838 30EC     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 683A C120  34         mov   @fb.current,tmp0      ; Get pointer
     683C A302     
0172               
0173 683E D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     6840 A006     
0174 6842 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6844 A30A     
0175 6846 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6848 A318     
0176                       ;-------------------------------------------------------
0177                       ; Last column on screen reached?
0178                       ;-------------------------------------------------------
0179 684A C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79.
     684C A30C     
0180 684E 0285  22         ci    tmp1,colrow - 1       ; / Last column on screen?
     6850 004F     
0181 6852 1105  14         jlt   edkey.action.char.overwrite.incx
0182                                                   ; No, increase X position
0183               
0184 6854 0205  20         li    tmp1,colrow           ; \
     6856 0050     
0185 6858 C805  38         mov   tmp1,@fb.row.length   ; / Yes, Set row length and exit.
     685A A308     
0186 685C 100B  14         jmp   edkey.action.char.exit
0187                       ;-------------------------------------------------------
0188                       ; Increase column
0189                       ;-------------------------------------------------------
0190               edkey.action.char.overwrite.incx:
0191 685E 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6860 A30C     
0192 6862 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6864 832A     
0193                       ;-------------------------------------------------------
0194                       ; Update line length in frame buffer
0195                       ;-------------------------------------------------------
0196 6866 8820  50         c     @fb.column,@fb.row.length
     6868 A30C     
     686A A308     
0197                                                   ; column < line length ?
0198 686C 1103  14         jlt   edkey.action.char.exit
0199                                                   ; Yes, don't update row length
0200 686E C820  54         mov   @fb.column,@fb.row.length
     6870 A30C     
     6872 A308     
0201                                                   ; Set row length
0202                       ;-------------------------------------------------------
0203                       ; Exit
0204                       ;-------------------------------------------------------
0205               edkey.action.char.exit:
0206 6874 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6876 6168     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 6878 0649  14         dect  stack
0009 687A C644  30         mov   tmp0,*stack           ; Push tmp0
0010 687C 0649  14         dect  stack
0011 687E C660  42         mov   @wyx,*stack           ; Push cursor YX
     6880 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6882 C120  34         mov   @tv.ruler.visible,tmp0
     6884 A210     
0016                                                   ; Ruler currently off?
0017 6886 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 6888 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     688A A318     
0024 688C 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     688E A210     
0025 6890 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 6892 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6894 A31C     
0031 6896 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 6898 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     689A A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 689C 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 689E 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     68A0 A318     
0038 68A2 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     68A4 A210     
0039 68A6 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     68A8 7A8E     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 68AA 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     68AC 7A04     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 68AE C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     68B0 832A     
0050 68B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 68B4 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68B6 6168     
                   < stevie_b1.asm
0097                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 68B8 C120  34         mov   @edb.dirty,tmp0
     68BA A506     
0012 68BC 1302  14         jeq   !
0013 68BE 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     68C0 7956     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 68C2 0460  28 !       b     @tv.quit
     68C4 333A     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 68C6 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     68C8 A50E     
     68CA 2022     
0025 68CC 1302  14         jeq   !
0026 68CE 0460  28         b     @edkey.action.block.copy
     68D0 69E6     
0027                                                   ; Copy code block
0028 68D2 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     68D4 7964     
                   < stevie_b1.asm
0098                       copy  "edkey.fb.file.decinc.asm"    ; Filename increase/decrease suffix
     **** ****     > edkey.fb.file.decinc.asm
0001               * FILE......: edkey.fb.file.decinc.asm
0002               * Purpose...: File loading actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load previous file based on last char in suffix
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.fname.dec.load
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @cmdb.cmdlen
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.fname.dec.load:
0016 68D6 0649  14         dect  stack
0017 68D8 C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 68DA 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     68DC A008     
0022               
0023 68DE 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     68E0 68D6     
0024 68E2 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68E4 A72C     
0025                                                   ; in "Unsaved changes" dialog
0026               
0027 68E6 1009  14         jmp   edkey.action.fb.fname.doit
0028                                                   ; Load file
0029               
0030               
0031               *---------------------------------------------------------------
0032               * Load next file based on last char in suffix
0033               *---------------------------------------------------------------
0034               * b   @edkey.action.fb.fname.inc.load
0035               *---------------------------------------------------------------
0036               * INPUT
0037               * @cmdb.cmdlen
0038               *--------------------------------------------------------------
0039               * Register usage
0040               * none
0041               ********|*****|*********************|**************************
0042               edkey.action.fb.fname.inc.load:
0043 68E8 0649  14         dect  stack
0044 68EA C644  30         mov   tmp0,*stack           ; Push tmp0
0045                       ;------------------------------------------------------
0046                       ; Adjust filename
0047                       ;------------------------------------------------------
0048 68EC 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     68EE A008     
0049               
0050 68F0 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     68F2 68E8     
0051 68F4 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     68F6 A72C     
0052                                                   ; in "Unsaved changes" dialog
0053               
0054 68F8 1000  14         jmp   edkey.action.fb.fname.doit
0055                                                   ; Load file
0056               
0057               *---------------------------------------------------------------
0058               * Adjust filename and load file
0059               *---------------------------------------------------------------
0060               * b   @edkey.action.fb.fname.doit
0061               *---------------------------------------------------------------
0062               * INPUT
0063               * @cmdb.cmdlen
0064               *--------------------------------------------------------------
0065               * Register usage
0066               * none
0067               ********|*****|*********************|**************************
0068               edkey.action.fb.fname.doit:
0069                       ;------------------------------------------------------
0070                       ; Process filename
0071                       ;------------------------------------------------------
0072 68FA C120  34         mov   @edb.filename.ptr,tmp0
     68FC A514     
0073 68FE 1311  14         jeq   edkey.action.fb.fname.doit.exit
0074                                                   ; Exit early if new file.
0075               
0076 6900 0284  22         ci    tmp0,txt.newfile
     6902 3ADE     
0077 6904 130E  14         jeq   edkey.action.fb.fname.doit.exit
0078                                                   ; Exit early if "[New file]"
0079               
0080 6906 C804  38         mov   tmp0,@parm1           ; Set filename
     6908 A006     
0081                       ;------------------------------------------------------
0082                       ; Show dialog "Unsaved changed" if editor buffer dirty
0083                       ;------------------------------------------------------
0084 690A C120  34         mov   @edb.dirty,tmp0
     690C A506     
0085 690E 1303  14         jeq   !
0086 6910 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 6912 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6914 7956     
0088                       ;------------------------------------------------------
0089                       ; Update suffix
0090                       ;------------------------------------------------------
0091 6916 06A0  32 !       bl    @fm.browse.fname.suffix
     6918 78D0     
0092                                                   ; Filename suffix adjust
0093                                                   ; i  \ parm1 = Pointer to filename
0094                                                   ; i  / parm2 = >FFFF or >0000
0095                       ;------------------------------------------------------
0096                       ; Load file
0097                       ;------------------------------------------------------
0098               edkey.action.fb.fname.doit.loadfile:
0099 691A 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     691C 7A04     
0100               
0101 691E 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6920 7892     
0102                                                   ; \ i  parm1 = Pointer to length-prefixed
0103                                                   ; /            device/filename string
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               edkey.action.fb.fname.doit.exit:
0108 6922 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 6924 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6926 646A     
                   < stevie_b1.asm
0099                       copy  "edkey.fb.file.load.asm"      ; Load file into editor
     **** ****     > edkey.fb.file.load.asm
0001               * FILE......: edkey.fb.file.load.asm
0002               * Purpose...: Load file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.file
0006               * Load file into editor
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to filename string
0012               * @parm2 = Type of special file to load
0013               ********|*****|*********************|**************************
0014               edkey.action.fb.load.file:
0015 6928 0649  14         dect  stack
0016 692A C64B  30         mov   r11,*stack            ; Save return address
0017 692C 0649  14         dect  stack
0018 692E C644  30         mov   tmp0,*stack           ; Push tmp0
0019 6930 0649  14         dect  stack
0020 6932 C645  30         mov   tmp1,*stack           ; Push tmp1
0021                       ;-------------------------------------------------------
0022                       ; Load file
0023                       ;-------------------------------------------------------
0024 6934 C160  34         mov   @parm2,tmp1           ; Backup @parm1
     6936 A008     
0025               
0026 6938 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     693A 7A04     
0027               
0028 693C C120  34         mov   @parm1,tmp0           ; Pointer to filename set?
     693E A006     
0029 6940 1607  14         jne   !                     ; Yes, continue
0030                       ;-------------------------------------------------------
0031                       ; Show error "No filename specified"
0032                       ;-------------------------------------------------------
0033 6942 0204  20         li    tmp0,txt.io.nofile    ; \
     6944 3CE2     
0034 6946 C804  38         mov   tmp0,@parm1           ; / Error message
     6948 A006     
0035               
0036 694A 06A0  32         bl    @error.display        ; Show error message
     694C 7A72     
0037                                                   ; \ i  @parm1 = Pointer to error message
0038                                                   ; /
0039               
0040 694E 1023  14         jmp   edkey.action.fb.load.file.exit2
0041                       ;------------------------------------------------------
0042                       ; Show dialog "Unsaved changed" if editor buffer dirty
0043                       ;------------------------------------------------------
0044 6950 C120  34 !       mov   @edb.dirty,tmp0
     6952 A506     
0045 6954 1301  14         jeq   edkey.action.fb.load.check.mastcat
0046 6956 1024  14         jmp   edkey.action.fb.load.file.exit3
0047                       ;-------------------------------------------------------
0048                       ; Special handling Master Catalog
0049                       ;-------------------------------------------------------
0050               edkey.action.fb.load.check.mastcat:
0051 6958 C120  34         mov   @edb.special.file,tmp0  ; \ Master catalog previously open?
     695A A520     
0052 695C 0284  22         ci    tmp0,id.special.mastcat ; /
     695E 0001     
0053               
0054 6960 1606  14         jne   edkey.action.fb.load.loadfile
0055                                                     ; No, just load file
0056               
0057 6962 C820  54         mov   @fb.topline,@edb.bk.fb.topline
     6964 A304     
     6966 A51C     
0058                                                     ; Backup @fb.topline
0059 6968 C820  54         mov   @fb.row,@edb.bk.fb.row  ; Backup @fb.row
     696A A306     
     696C A51E     
0060                       ;-------------------------------------------------------
0061                       ; Load file
0062                       ;-------------------------------------------------------
0063               edkey.action.fb.load.loadfile:
0064 696E 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6970 7892     
0065                                                   ; \ i  @parm1 = Pointer to length-prefixed
0066                                                   ; /             device/filename string
0067                       ;-------------------------------------------------------
0068                       ; Handle special files
0069                       ;-------------------------------------------------------
0070 6972 C805  38         mov   tmp1,@edb.special.file   ; \ Restore @parm2
     6974 A520     
0071                                                      ; / Set special file (0=normal file)
0072               
0073 6976 0285  22         ci    tmp1,id.special.mastcat  ; Is master catalog?
     6978 0001     
0074 697A 160D  14         jne   edkey.action.fb.load.file.exit2
0075                                                      ; No, goto top of file and exit
0076                       ;-------------------------------------------------------
0077                       ; Goto line in file and exit
0078                       ;-------------------------------------------------------
0079               edkey.action.fb.load.file.exit1:
0080 697C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0081 697E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0082 6980 C2F9  30         mov   *stack+,r11           ; Pop R11
0083               
0084 6982 C820  54         mov   @edb.bk.fb.topline,@parm1
     6984 A51C     
     6986 A006     
0085 6988 C820  54         mov   @edb.bk.fb.row,@parm2
     698A A51E     
     698C A008     
0086               
0087 698E 0620  34         dec   @fb.scrrows           ; Need space for info message
     6990 A31C     
0088               
0089 6992 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6994 6528     
0090                                                   ; | i  @parm1 = Top line in editor buffer
0091                                                   ; / i  @parm2 = Row offset in frame buffer
0092                       ;-------------------------------------------------------
0093                       ; Goto top of file (TOF) and exit
0094                       ;-------------------------------------------------------
0095               edkey.action.fb.load.file.exit2:
0096 6996 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0097 6998 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0098 699A C2F9  30         mov   *stack+,r11           ; Pop R11
0099 699C 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     699E 646A     
0100                       ;-------------------------------------------------------
0101                       ; Show dialog "Unsaved changes" and exit
0102                       ;-------------------------------------------------------
0103               edkey.action.fb.load.file.exit3:
0104 69A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0105 69A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0106 69A4 C2F9  30         mov   *stack+,r11           ; Pop R11
0107 69A6 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     69A8 646A     
0108 69AA 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     69AC 7956     
                   < stevie_b1.asm
0100                       copy  "edkey.fb.file.load.mc.asm"   ; Load Master Catalog into editor
     **** ****     > edkey.fb.file.load.mc.asm
0001               * FILE......: edkey.fb.file.load.mc.asm
0002               * Purpose...: Load Master Catalog into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.mc
0006               * Load master catalog into editor
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.mc
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               ********|*****|*********************|**************************
0013               edkey.action.fb.load.mc:
0014                       ;-------------------------------------------------------
0015                       ; Set filename
0016                       ;-------------------------------------------------------
0017 69AE 0204  20         li    tmp0,tv.mc.fname
     69B0 DEA0     
0018 69B2 C804  38         mov   tmp0,@parm1
     69B4 A006     
0019                       ;-------------------------------------------------------
0020                       ; Set special file type to 'Master Catalog'
0021                       ;-------------------------------------------------------
0022 69B6 0204  20         li    tmp0,id.special.mastcat
     69B8 0001     
0023 69BA C804  38         mov   tmp0,@parm2
     69BC A008     
0024                       ;-------------------------------------------------------
0025                       ; Load file
0026                       ;-------------------------------------------------------
0027 69BE 0460  28         b     @edkey.action.fb.load.file
     69C0 6928     
0028                                                   ; \ Load file into editor
0029                                                   ; | i  @parm1 = Pointer to filename string
0030                                                   ; | i  @parm2 = Type of special file to load
0031                                                   ; /
                   < stevie_b1.asm
0101                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 69C2 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     69C4 7B2C     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 69C6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69C8 6168     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 69CA 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     69CC 7B36     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 69CE 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     69D0 6F22     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 69D2 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     69D4 7B40     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 69D6 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     69D8 6F22     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 69DA 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     69DC 75FA     
0042 69DE 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     69E0 7B54     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 69E2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69E4 6168     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 69E6 0649  14         dect  stack
0054 69E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 69EA 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     69EC A510     
     69EE 2022     
0059 69F0 1315  14         jeq   edkey.action.block.copy.exit
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
0064 69F2 C120  30         mov   @wyx,tmp0             ; Get cursor position
     69F4 832A     
0065 69F6 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     69F8 FF00     
0066 69FA C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     69FC A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 69FE 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6A00 75FA     
0071               
0072 6A02 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     6A04 A006     
0073 6A06 06A0  32         bl    @edb.block.copy       ; Copy code block
     6A08 7B68     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 6A0A 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     6A0C A018     
     6A0E 2000     
0078 6A10 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 6A12 C820  54         mov   @fb.yxsave,@parm1
     6A14 A316     
     6A16 A006     
0082 6A18 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     6A1A 7AB6     
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
0089 6A1C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 6A1E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A20 6168     
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
0102 6A22 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6A24 A510     
     6A26 2022     
0103 6A28 1311  14         jeq   edkey.action.block.delete.exit
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
0108 6A2A 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6A2C 75FA     
0109               
0110 6A2E 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     6A30 A006     
0111 6A32 06A0  32         bl    @edb.block.delete     ; Delete code block
     6A34 7B5E     
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
0117 6A36 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6A38 A018     
     6A3A 2000     
0118 6A3C 1307  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 6A3E C820  54         mov   @fb.topline,@parm1
     6A40 A304     
     6A42 A006     
0122 6A44 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6A46 A008     
0123               
0124 6A48 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A4A 6528     
0125                                                   ; | i  @parm1 = Top line in editor buffer
0126                                                   ; / i  @parm2 = Row offset in frame buffer
0127                       ;-------------------------------------------------------
0128                       ; Exit
0129                       ;-------------------------------------------------------
0130               edkey.action.block.delete.exit:
0131 6A4C 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A4E 6168     
0132               
0133               
0134               *---------------------------------------------------------------
0135               * Move code block
0136               ********|*****|*********************|**************************
0137               edkey.action.block.move:
0138                       ;-------------------------------------------------------
0139                       ; Exit early if nothing to do
0140                       ;-------------------------------------------------------
0141 6A50 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6A52 A510     
     6A54 2022     
0142 6A56 1315  14         jeq   edkey.action.block.move.exit
0143                                                   ; Yes, exit early
0144                       ;-------------------------------------------------------
0145                       ; Delete
0146                       ;-------------------------------------------------------
0147 6A58 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6A5A 75FA     
0148               
0149 6A5C 0720  34         seto  @parm1                ; Set message to "Moving block..."
     6A5E A006     
0150 6A60 06A0  32         bl    @edb.block.copy       ; Copy code block
     6A62 7B68     
0151                                                   ; \ i  @parm1    = Message flag
0152                                                   ; / o  @outparm1 = >ffff if success
0153               
0154 6A64 0720  34         seto  @parm1                ; Don't display delete message
     6A66 A006     
0155 6A68 06A0  32         bl    @edb.block.delete     ; Delete code block
     6A6A 7B5E     
0156                                                   ; \ i  @parm1    = Display message Yes/No
0157                                                   ; / o  @outparm1 = >ffff if success
0158                       ;-------------------------------------------------------
0159                       ; Reposition in frame buffer
0160                       ;-------------------------------------------------------
0161 6A6C 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6A6E A018     
     6A70 2000     
0162 6A72 13EC  14         jeq   edkey.action.block.delete.exit
0163                                                   ; If yes, exit early
0164               
0165 6A74 C820  54         mov   @fb.topline,@parm1
     6A76 A304     
     6A78 A006     
0166 6A7A 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6A7C A008     
0167               
0168 6A7E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6A80 6528     
0169                                                   ; | i  @parm1 = Top line in editor buffer
0170                                                   ; / i  @parm2 = Row offset in frame buffer
0171                       ;-------------------------------------------------------
0172                       ; Exit
0173                       ;-------------------------------------------------------
0174               edkey.action.block.move.exit:
0175 6A82 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A84 6168     
0176               
0177               
0178               *---------------------------------------------------------------
0179               * Goto marker M1
0180               ********|*****|*********************|**************************
0181               edkey.action.block.goto.m1:
0182 6A86 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6A88 A50E     
     6A8A 2022     
0183 6A8C 1307  14         jeq   edkey.action.block.goto.m1.exit
0184                                                   ; Yes, exit early
0185                       ;-------------------------------------------------------
0186                       ; Goto marker M1
0187                       ;-------------------------------------------------------
0188 6A8E C820  54         mov   @edb.block.m1,@parm1
     6A90 A50E     
     6A92 A006     
0189 6A94 0620  34         dec   @parm1                ; Base 0 offset
     6A96 A006     
0190               
0191 6A98 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     6A9A 657A     
0192                                                   ; \ i @parm1 = Target line in EB
0193                                                   ; /
0194                       ;-------------------------------------------------------
0195                       ; Exit
0196                       ;-------------------------------------------------------
0197               edkey.action.block.goto.m1.exit:
0198 6A9C 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A9E 6168     
                   < stevie_b1.asm
0102                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
0008 6AA0 0649  14         dect  stack
0009 6AA2 C64B  30         mov   r11,*stack            ; Save return address
0010 6AA4 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     6AA6 7AD4     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
0015 6AA8 C2F9  30         mov   *stack+,r11           ; Pop r11
0016 6AAA 0460  28         b     @edkey.keyscan.hook.debounce
     6AAC 6168     
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
0024 6AAE 0649  14         dect  stack
0025 6AB0 C64B  30         mov   r11,*stack            ; Save return address
0026 6AB2 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     6AB4 7ADE     
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
0031 6AB6 C2F9  30         mov   *stack+,r11           ; Pop r11
0032 6AB8 0460  28         b     @edkey.keyscan.hook.debounce
     6ABA 6168     
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0103                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 6ABC 0649  14         dect  stack
0017 6ABE C644  30         mov   tmp0,*stack           ; Push tmp0
0018 6AC0 0204  20         li    tmp0,clip1
     6AC2 3100     
0019 6AC4 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 6AC6 0649  14         dect  stack
0022 6AC8 C644  30         mov   tmp0,*stack           ; Push tmp0
0023 6ACA 0204  20         li    tmp0,clip2
     6ACC 3200     
0024 6ACE 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 6AD0 0649  14         dect  stack
0027 6AD2 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6AD4 0204  20         li    tmp0,clip3
     6AD6 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 6AD8 C804  38 !       mov   tmp0,@parm1
     6ADA A006     
0033 6ADC 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     6ADE 7B4A     
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
0040 6AE0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 6AE2 C820  54         mov   @fb.topline,@parm1    ; Get topline
     6AE4 A304     
     6AE6 A006     
0043 6AE8 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6AEA A008     
0044               
0045 6AEC 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6AEE 6528     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0104                       ;-----------------------------------------------------------------------
0105                       ; Keyboard actions - Command Buffer
0106                       ;-----------------------------------------------------------------------
0107                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
0008 6AF0 C120  34         mov   @cmdb.column,tmp0
     6AF2 A714     
0009 6AF4 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 6AF6 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     6AF8 A714     
0014 6AFA 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     6AFC A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 6AFE 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6B00 6168     
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
0025 6B02 06A0  32         bl    @cmdb.cmd.getlength
     6B04 7A2C     
0026 6B06 8820  50         c     @cmdb.column,@outparm1
     6B08 A714     
     6B0A A018     
0027 6B0C 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 6B0E 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     6B10 A714     
0032 6B12 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     6B14 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 6B16 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6B18 6168     
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
0044 6B1A 04C4  14         clr   tmp0
0045 6B1C C804  38         mov   tmp0,@cmdb.column      ; First column
     6B1E A714     
0046 6B20 0584  14         inc   tmp0
0047 6B22 D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     6B24 A70A     
0048 6B26 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     6B28 A70A     
0049               
0050 6B2A 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6B2C 6168     
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
0056 6B2E D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     6B30 A72E     
0057 6B32 0984  32         srl   tmp0,8                 ; Right justify
0058 6B34 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     6B36 A714     
0059 6B38 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 6B3A 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 6B3C D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     6B3E A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 6B40 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6B42 6168     
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 6B44 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6B46 7A22     
0026 6B48 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6B4A A71A     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 6B4C 0460  28         b     @edkey.action.cmdb.home
     6B4E 6B1A     
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
0057 6B50 0649  14         dect  stack
0058 6B52 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6B54 0649  14         dect  stack
0060 6B56 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6B58 C120  34         mov   @keycode1,tmp0        ; Get keycode
     6B5A A028     
0065 6B5C 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6B5E 0020     
0066 6B60 1117  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6B62 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6B64 007E     
0070 6B66 1514  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073                       ;-------------------------------------------------------
0074                       ; Add character
0075                       ;-------------------------------------------------------
0076 6B68 C144  18         mov   tmp0,tmp1             ; \
0077 6B6A 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0078               
0079 6B6C 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6B6E A71A     
0080               
0081 6B70 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6B72 A72F     
0082 6B74 A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6B76 A714     
0083 6B78 D505  30         movb  tmp1,*tmp0            ; Add character
0084 6B7A 05A0  34         inc   @cmdb.column          ; Next column
     6B7C A714     
0085 6B7E 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6B80 A70A     
0086               
0087 6B82 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B84 7A2C     
0088                                                   ; \ i  @cmdb.cmd = Command string
0089                                                   ; / o  @outparm1 = Length of command
0090                       ;-------------------------------------------------------
0091                       ; Addjust length
0092                       ;-------------------------------------------------------
0093 6B86 C120  34         mov   @outparm1,tmp0
     6B88 A018     
0094 6B8A 0A84  32         sla   tmp0,8               ; Move to MSB
0095 6B8C D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B8E A72E     
0096                       ;-------------------------------------------------------
0097                       ; Exit
0098                       ;-------------------------------------------------------
0099               edkey.action.cmdb.char.exit:
0100 6B90 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 6B92 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 6B94 0460  28         b     @edkey.keyscan.hook.debounce
     6B96 6168     
0103                                                   ; Back to editor main
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6B98 C120  34         mov   @cmdb.visible,tmp0
     6B9A A702     
0009 6B9C 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6B9E 04E0  34         clr   @cmdb.column          ; Column = 0
     6BA0 A714     
0015 6BA2 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6BA4 79FA     
0016 6BA6 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6BA8 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6BAA 7A04     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6BAC 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6BAE 6168     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.cfg.clip.asm"     ; Configure clipboard
     **** ****     > edkey.cmdb.cfg.clip.asm
0001               * FILE......: edkey.cmdb.cfg.clip.asm
0002               * Purpose...: Configure clipboard
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.clip:
0008 6BB0 0649  14         dect  stack
0009 6BB2 C64B  30         mov   r11,*stack            ; Save return address
0010 6BB4 0649  14         dect  stack
0011 6BB6 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6BB8 0204  20         li    tmp0,tv.clip.fname    ; \
     6BBA DE50     
0016 6BBC C804  38         mov   tmp0,@parm1           ; / Pointer clipboard filename buffer
     6BBE A006     
0017               
0018 6BC0 0204  20         li    tmp0,txt.done.clipdev ; \
     6BC2 3A6A     
0019 6BC4 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6BC6 A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6BC8 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6BCA 7A68     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.clip.exit:
0030 6BCC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6BCE C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6BD0 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6BD2 646A     
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.cfg.mc.asm"       ; Configure Master Catalog
     **** ****     > edkey.cmdb.cfg.mc.asm
0001               * FILE......: edkey.cmdb.cfg.mc.asm
0002               * Purpose...: Configure Master Catalog
0003               
0004               *---------------------------------------------------------------
0005               * Configure Master Catalog
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.mc:
0008 6BD4 0649  14         dect  stack
0009 6BD6 C64B  30         mov   r11,*stack            ; Save return address
0010 6BD8 0649  14         dect  stack
0011 6BDA C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6BDC 0204  20         li    tmp0,tv.mc.fname      ; \
     6BDE DEA0     
0016 6BE0 C804  38         mov   tmp0,@parm1           ; / Pointer Master Catalog filename buffer
     6BE2 A006     
0017               
0018 6BE4 0204  20         li    tmp0,txt.done.mc      ; \
     6BE6 3A78     
0019 6BE8 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6BEA A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6BEC 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6BEE 7A68     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.mc.exit:
0030 6BF0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6BF2 C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6BF4 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6BF6 646A     
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6BF8 0649  14         dect  stack
0012 6BFA C64B  30         mov   r11,*stack            ; Save return address
0013 6BFC 0649  14         dect  stack
0014 6BFE C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6C00 C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6C02 A506     
0019 6C04 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6C06 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6C08 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6C0A 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6C0C 7956     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6C0E 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C10 7A04     
0028 6C12 06A0  32         bl    @fm.newfile           ; New file in editor
     6C14 78F4     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6C16 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6C18 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6C1A 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6C1C 646A     
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008                       ;-------------------------------------------------------
0009                       ; Load file
0010                       ;-------------------------------------------------------
0011 6C1E 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C20 7A04     
0012               
0013 6C22 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C24 7A2C     
0014 6C26 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C28 A018     
0015 6C2A 1607  14         jne   !                     ; No, prepare for load
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6C2C 0204  20         li    tmp0,txt.io.nofile    ; \
     6C2E 3CE2     
0020 6C30 C804  38         mov   tmp0,@parm1           ; / Error message
     6C32 A006     
0021               
0022 6C34 06A0  32         bl    @error.display        ; Show error message
     6C36 7A72     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6C38 101D  14         jmp   edkey.action.cmdb.load.exit
0027                       ;-------------------------------------------------------
0028                       ; Get filename
0029                       ;-------------------------------------------------------
0030 6C3A 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6C3C D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C3E A72E     
0032               
0033 6C40 06A0  32         bl    @cpym2m
     6C42 24DA     
0034 6C44 A72E                   data cmdb.cmdlen,heap.top,80
     6C46 F000     
     6C48 0050     
0035                                                  ; Copy filename from command line to buffer
0036                       ;-------------------------------------------------------
0037                       ; Special handling Master Catalog
0038                       ;-------------------------------------------------------
0039 6C4A C120  34         mov   @edb.special.file,tmp0  ; \ Master catalog previously open?
     6C4C A520     
0040 6C4E 0284  22         ci    tmp0,id.special.mastcat ; /
     6C50 0001     
0041               
0042 6C52 1608  14         jne   edkey.action.cmdb.load.file
0043                                                  ; No, just load file
0044               
0045 6C54 C820  54         mov   @fb.topline,@edb.bk.fb.topline
     6C56 A304     
     6C58 A51C     
0046                                                  ; Backup @fb.topline
0047 6C5A C820  54         mov   @fb.row,@edb.bk.fb.row
     6C5C A306     
     6C5E A51E     
0048                                                  ; Backup @fb.row
0049               
0050 6C60 04E0  34         clr   @edb.dirty           ; No confirmation, always load immediately.
     6C62 A506     
0051                       ;-------------------------------------------------------
0052                       ; Load file
0053                       ;-------------------------------------------------------
0054               edkey.action.cmdb.load.file:
0055 6C64 04E0  34         clr   @edb.special.file    ; Reset special file flag
     6C66 A520     
0056               
0057 6C68 0204  20         li    tmp0,heap.top        ; Pass filename as parm1
     6C6A F000     
0058 6C6C C804  38         mov   tmp0,@parm1          ; (1st line in heap)
     6C6E A006     
0059               
0060 6C70 06A0  32         bl    @fm.loadfile         ; Load DV80 file
     6C72 7892     
0061                                                  ; \ i  parm1 = Pointer to length-prefixed
0062                                                  ; /            device/filename string
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.cmdb.load.exit:
0067 6C74 0460  28         b    @edkey.action.top     ; Goto 1st line in editor buffer
     6C76 646A     
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6C78 0649  14         dect  stack
0009 6C7A C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C7C 0649  14         dect  stack
0011 6C7E C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C80 A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6C82 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C84 7A04     
0016               
0017 6C86 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C88 7A2C     
0018 6C8A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C8C A018     
0019 6C8E 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6C90 0204  20         li    tmp0,txt.io.nofile    ; \
     6C92 3CE2     
0024 6C94 C804  38         mov   tmp0,@parm1           ; / Error message
     6C96 A006     
0025               
0026 6C98 06A0  32         bl    @error.display        ; Show error message
     6C9A 7A72     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6C9C 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6C9E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CA0 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CA2 A72E     
0036               
0037 6CA4 06A0  32         bl    @cpym2m
     6CA6 24DA     
0038 6CA8 A72E                   data cmdb.cmdall,heap.top,80
     6CAA F000     
     6CAC 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6CAE 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CB0 F000     
0044 6CB2 C804  38         mov   tmp0,@parm1
     6CB4 A006     
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
0052 6CB6 C820  54         mov   @fb.row,@parm1
     6CB8 A306     
     6CBA A006     
0053 6CBC 06A0  32         bl    @fb.row2line          ; Row to editor line
     6CBE 30D2     
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
0058 6CC0 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6CC2 A018     
     6CC4 A008     
0059 6CC6 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6CC8 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6CCA 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CCC F000     
0064 6CCE C804  38         mov   tmp0,@parm1
     6CD0 A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6CD2 0204  20         li    tmp0,id.file.insertfile
     6CD4 0002     
0069 6CD6 C804  38         mov   tmp0,@parm3           ; Set work mode
     6CD8 A00A     
0070               
0071 6CDA 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6CDC 78B8     
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
0079 6CDE 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6CE0 A318     
0080 6CE2 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6CE4 A506     
0081               
0082 6CE6 C820  54         mov   @fb.topline,@parm1
     6CE8 A304     
     6CEA A006     
0083 6CEC 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6CEE 7AC0     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
0091 6CF0 C839  50         mov   *stack+,@parm1        ; Pop top row
     6CF2 A006     
0092 6CF4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093               
0094 6CF6 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6CF8 A008     
0095               
0096 6CFA 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6CFC 6528     
0097                                                   ; | i  @parm1 = Top line in editor buffer
0098                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0115                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6CFE 0649  14         dect  stack
0009 6D00 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D02 0649  14         dect  stack
0011 6D04 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D06 A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6D08 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D0A 7A04     
0016               
0017 6D0C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D0E 7A2C     
0018 6D10 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D12 A018     
0019 6D14 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D16 0204  20         li    tmp0,txt.io.nofile    ; \
     6D18 3CE2     
0024 6D1A C804  38         mov   tmp0,@parm1           ; / Error message
     6D1C A006     
0025               
0026 6D1E 06A0  32         bl    @error.display        ; Show error message
     6D20 7A72     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D22 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D24 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D26 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D28 A72E     
0036               
0037 6D2A 06A0  32         bl    @cpym2m
     6D2C 24DA     
0038 6D2E A72E                   data cmdb.cmdall,heap.top,80
     6D30 F000     
     6D32 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6D34 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D36 F000     
0044 6D38 C804  38         mov   tmp0,@parm1
     6D3A A006     
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
0049 6D3C C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6D3E A504     
     6D40 A008     
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
0054 6D42 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D44 F000     
0055 6D46 C804  38         mov   tmp0,@parm1
     6D48 A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6D4A 0204  20         li    tmp0,id.file.appendfile
     6D4C 0003     
0060 6D4E C804  38         mov   tmp0,@parm3           ; Set work mode
     6D50 A00A     
0061               
0062 6D52 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6D54 78B8     
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
0070 6D56 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6D58 A318     
0071 6D5A 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6D5C A506     
0072               
0073 6D5E C820  54         mov   @fb.topline,@parm1
     6D60 A304     
     6D62 A006     
0074 6D64 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6D66 7AC0     
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
0082 6D68 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D6A A006     
0083 6D6C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084               
0085 6D6E 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6D70 A008     
0086               
0087 6D72 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D74 6528     
0088                                                   ; | i  @parm1 = Top line in editor buffer
0089                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0116                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6D76 0204  20         li    tmp0,clip1
     6D78 3100     
0009 6D7A 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6D7C 0204  20         li    tmp0,clip2
     6D7E 3200     
0013 6D80 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6D82 0204  20         li    tmp0,clip3
     6D84 3300     
0017 6D86 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6D88 0204  20         li    tmp0,clip4
     6D8A 3400     
0021 6D8C 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6D8E 0204  20         li    tmp0,clip5
     6D90 3500     
0025 6D92 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6D94 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6D96 A006     
0030               
0031 6D98 06A0  32         bl    @film
     6D9A 2236     
0032 6D9C A72E                   data cmdb.cmdall,>00,80
     6D9E 0000     
     6DA0 0050     
0033               
0034 6DA2 06A0  32         bl    @cpym2m
     6DA4 24DA     
0035 6DA6 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6DA8 A72E     
     6DAA 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6DAC C120  34         mov   @tv.clip.fname,tmp0
     6DAE DE50     
0040 6DB0 C144  18         mov   tmp0,tmp1
0041 6DB2 0984  32         srl   tmp0,8                ; Get string length
0042 6DB4 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6DB6 A72E     
0043 6DB8 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6DBA D520  46         movb  @parm1,*tmp0          ; Append suffix
     6DBC A006     
0045               
0046 6DBE 0460  28         b     @edkey.action.cmdb.insert
     6DC0 6C78     
0047                                                   ; Insert file
                   < stevie_b1.asm
0117                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6DC2 0649  14         dect  stack
0009 6DC4 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6DC6 0649  14         dect  stack
0011 6DC8 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6DCA A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6DCC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6DCE 7A04     
0016               
0017 6DD0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6DD2 7A2C     
0018 6DD4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6DD6 A018     
0019 6DD8 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6DDA 0204  20         li    tmp0,txt.io.nofile    ; \
     6DDC 3CE2     
0024 6DDE C804  38         mov   tmp0,@parm1           ; / Error message
     6DE0 A006     
0025               
0026 6DE2 06A0  32         bl    @error.display        ; Show error message
     6DE4 7A72     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6DE6 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6DE8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6DEA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6DEC A72E     
0036               
0037 6DEE 06A0  32         bl    @cpym2m
     6DF0 24DA     
0038 6DF2 A72E                   data cmdb.cmdlen,heap.top,80
     6DF4 F000     
     6DF6 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6DF8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6DFA F000     
0044 6DFC C804  38         mov   tmp0,@parm1
     6DFE A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6E00 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6E02 A510     
     6E04 2022     
0049 6E06 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6E08 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6E0A A50E     
     6E0C A008     
0055 6E0E 0620  34         dec   @parm2                ; /
     6E10 A008     
0056               
0057 6E12 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6E14 A510     
     6E16 A00A     
0058               
0059 6E18 0204  20         li    tmp0,id.file.saveblock
     6E1A 0005     
0060 6E1C 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6E1E 04E0  34         clr   @parm2                ; First line to save
     6E20 A008     
0066 6E22 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6E24 A504     
     6E26 A00A     
0067               
0068 6E28 0204  20         li    tmp0,id.file.savefile
     6E2A 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6E2C C804  38         mov   tmp0,@parm4           ; Set work mode
     6E2E A00C     
0074               
0075 6E30 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6E32 78E2     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6E34 C839  50         mov   *stack+,@parm1        ; Pop top row
     6E36 A006     
0087 6E38 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6E3A 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6E3C A008     
0090               
0091 6E3E 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6E40 6528     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0118                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6E42 0649  14         dect  stack
0009 6E44 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6E46 0649  14         dect  stack
0011 6E48 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6E4A A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6E4C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6E4E 7A04     
0016               
0017 6E50 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6E52 7A2C     
0018 6E54 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6E56 A018     
0019 6E58 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6E5A 0204  20         li    tmp0,txt.io.nofile    ; \
     6E5C 3CE2     
0024 6E5E C804  38         mov   tmp0,@parm1           ; / Error message
     6E60 A006     
0025               
0026 6E62 06A0  32         bl    @error.display        ; Show error message
     6E64 7A72     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6E66 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6E68 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6E6A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6E6C A72E     
0036               
0037 6E6E 06A0  32         bl    @cpym2m
     6E70 24DA     
0038 6E72 A72E                   data cmdb.cmdlen,heap.top,80
     6E74 F000     
     6E76 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6E78 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6E7A F000     
0044 6E7C C804  38         mov   tmp0,@parm1
     6E7E A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6E80 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6E82 A510     
     6E84 2022     
0049 6E86 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6E88 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6E8A A50E     
     6E8C A008     
0055 6E8E 0620  34         dec   @parm2                ; /
     6E90 A008     
0056               
0057 6E92 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6E94 A510     
     6E96 A00A     
0058               
0059 6E98 0204  20         li    tmp0,id.file.printblock
     6E9A 0008     
0060 6E9C 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6E9E 04E0  34         clr   @parm2                ; First line to save
     6EA0 A008     
0066 6EA2 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6EA4 A504     
     6EA6 A00A     
0067               
0068 6EA8 0204  20         li    tmp0,id.file.printfile
     6EAA 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6EAC C804  38         mov   tmp0,@parm4           ; Set work mode
     6EAE A00C     
0074               
0075 6EB0 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6EB2 78E2     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6EB4 C839  50         mov   *stack+,@parm1        ; Pop top row
     6EB6 A006     
0087 6EB8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6EBA 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6EBC A008     
0090               
0091 6EBE 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6EC0 6528     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0119                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6EC2 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6EC4 A506     
0021 6EC6 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6EC8 7452     
0022 6ECA 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6ECC 7A22     
0023 6ECE C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6ED0 A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6ED2 0284  22         ci    tmp0,>2000
     6ED4 2000     
0028 6ED6 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6ED8 0284  22         ci    tmp0,>7fff
     6EDA 7FFF     
0031 6EDC 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6EDE 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6EE0 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6EE2 FFCE     
0040 6EE4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6EE6 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6EE8 0460  28         b     @edkey.keyscan.hook.debounce
     6EEA 6168     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6EEC 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6EEE 7A5E     
0065 6EF0 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EF2 A71A     
0066 6EF4 0460  28        b     @edkey.keyscan.hook.debounce
     6EF6 6168     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.am.toggle
0072               * Toggle 'AutoUnpack' on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.am.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.am.toggle:
0083 6EF8 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     6EFA 7A54     
0084 6EFC 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6EFE A71A     
0085 6F00 0460  28        b     @edkey.keyscan.hook.debounce
     6F02 6168     
0086                                                   ; Back to editor main
0087               
0088               
0089               
0090               ***************************************************************
0091               * edkey.action.cmdb.preset
0092               * Set command value to preset
0093               ***************************************************************
0094               * b   @edkey.action.cmdb.preset
0095               *--------------------------------------------------------------
0096               * INPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * none
0101               ********|*****|*********************|**************************
0102               edkey.action.cmdb.preset:
0103 6F04 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6F06 7A36     
0104 6F08 0460  28        b     @edkey.keyscan.hook.debounce
     6F0A 6168     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * dialog.close
0111               * Close dialog "Help"
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.close.about
0114               *--------------------------------------------------------------
0115               * OUTPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.close.about:
0122 6F0C 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6F0E A71E     
0123                       ;------------------------------------------------------
0124                       ; Erase header line
0125                       ;------------------------------------------------------
0126 6F10 06A0  32         bl    @hchar
     6F12 27D2     
0127 6F14 0000                   byte 0,0,32,80*2
     6F16 20A0     
0128 6F18 FFFF                   data EOL
0129               
0130 6F1A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F1C 6FE0     
0131                       ;-------------------------------------------------------
0132                       ; Exit
0133                       ;-------------------------------------------------------
0134 6F1E 0460  28         b     @edkey.keyscan.hook.debounce
     6F20 6168     
0135                                                   ; Back to editor main
0136               
0137               
0138               
0139               ***************************************************************
0140               * edkey.action.cmdb.close.dialog
0141               * Close dialog
0142               ***************************************************************
0143               * b   @edkey.action.cmdb.close.dialog
0144               *--------------------------------------------------------------
0145               * OUTPUT
0146               * none
0147               *--------------------------------------------------------------
0148               * Register usage
0149               * none
0150               ********|*****|*********************|**************************
0151               edkey.action.cmdb.close.dialog:
0152 6F22 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F24 6FE0     
0153                       ;-------------------------------------------------------
0154                       ; Exit
0155                       ;-------------------------------------------------------
0156               edkey.action.cmdb.close.dialog.exit:
0157 6F26 0460  28         b     @edkey.keyscan.hook.debounce
     6F28 6168     
0158                                                   ; Back to editor main
                   < stevie_b1.asm
0120                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 6F2A 06A0  32         bl    @hchar
     6F2C 27D2     
0009 6F2E 0034                   byte 0,52,32,20
     6F30 2014     
0010 6F32 FFFF                   data EOL              ; Erase any previous message
0011               
0012 6F34 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6F36 A50C     
0013 6F38 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6F3A 06A0  32         bl    @putat
     6F3C 2442     
0018 6F3E 0034                   byte 0,52
0019 6F40 3A8C                   data txt.autoins.on   ; AutoInsert on
0020 6F42 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6F44 06A0  32 !       bl    @putat
     6F46 2442     
0025 6F48 0034                   byte 0,52
0026 6F4A 3A9C                   data txt.autoins.off   ; AutoInsert off
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
0031 6F4C 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6F4E 374E     
0032 6F50 C804  38         mov   tmp0,@tv.task.oneshot
     6F52 A226     
0033               
0034 6F54 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6F56 2EF8     
0035 6F58 0003                   data 3                ; / for getting consistent delay
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
0040 6F5A 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F5C 6FE0     
0041 6F5E 0460  28         b     @edkey.keyscan.hook.debounce
     6F60 6168     
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0121                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
0011 6F62 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6F64 7A2C     
0012 6F66 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6F68 A018     
0013 6F6A 1324  14         jeq   edkey.action.cmdb.goto.exit
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
0018 6F6C 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6F6E A72F     
0019 6F70 C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6F72 A006     
0020               
0021 6F74 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6F76 3372     
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
0032 6F78 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6F7A A01A     
     6F7C 2022     
0033 6F7E 131A  14         jeq   edkey.action.cmdb.goto.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Assert - Line number is invalid
0037                       ;-------------------------------------------------------
0038 6F80 C120  34         mov   @outparm1,tmp0
     6F82 A018     
0039 6F84 1317  14         jeq   edkey.action.cmdb.goto.exit
0040                                                   ; Yes, exit
0041                       ;-------------------------------------------------------
0042                       ; Prepare for goto
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.goto.prepare:
0045 6F86 0649  14         dect  stack
0046 6F88 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6F8A A018     
0047               
0048 6F8C 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6F8E 6FE0     
0049                       ;-------------------------------------------------------
0050                       ; Crunch current row if dirty
0051                       ;-------------------------------------------------------
0052 6F90 8820  50         c     @fb.row.dirty,@w$ffff
     6F92 A30A     
     6F94 2022     
0053 6F96 1604  14         jne   edkey.action.cmdb.goto.line
0054               
0055 6F98 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F9A 6FF4     
0056                                                   ; \ i   @fb.top      = Address top row in FB
0057                                                   ; | i   @fb.row      = Current row in FB
0058                                                   ; | i   @fb.column   = Current column in FB
0059                                                   ; / i   @fb.colsline = Cols per line in FB
0060               
0061 6F9C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F9E A30A     
0062                       ;-------------------------------------------------------
0063                       ; Goto line
0064                       ;-------------------------------------------------------
0065               edkey.action.cmdb.goto.line:
0066 6FA0 C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6FA2 A006     
0067 6FA4 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6FA6 A006     
0068               
0069 6FA8 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6FAA A312     
0070               
0071 6FAC 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6FAE A008     
0072               
0073 6FB0 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6FB2 6528     
0074                                                   ; | i  @parm1 = Top line in editor buffer
0075                                                   ; / i  @parm2 = Row offset in frame buffer
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079               edkey.action.cmdb.goto.exit:
0080 6FB4 0460  28         b     @edkey.keyscan.hook.debounce
     6FB6 6168     
0081                                                   ; Back to editor main
                   < stevie_b1.asm
0122                       copy  "edkey.cmdb.font.asm"         ; Set font
     **** ****     > edkey.cmdb.font.asm
0001               * FILE......: edkey.cmdb.font.asm
0002               * Purpose...: Set specified font
0003               
0004               *---------------------------------------------------------------
0005               * Load font
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.font1:
0008 6FB8 04C4  14         clr   tmp0                  ; Load font 1
0009 6FBA 100C  14         jmp   edkey.action.cmdb.font.load
0010               edkey.action.cmdb.font2:
0011 6FBC 0204  20         li    tmp0,1                ; Load font 2
     6FBE 0001     
0012 6FC0 1009  14         jmp   edkey.action.cmdb.font.load
0013               edkey.action.cmdb.font3:
0014 6FC2 0204  20         li    tmp0,2                ; Load font 3
     6FC4 0002     
0015 6FC6 1006  14         jmp   edkey.action.cmdb.font.load
0016               edkey.action.cmdb.font4:
0017 6FC8 0204  20         li    tmp0,3                ; Load font 4
     6FCA 0003     
0018 6FCC 1003  14         jmp   edkey.action.cmdb.font.load
0019               edkey.action.cmdb.font5:
0020 6FCE 0204  20         li    tmp0,4                ; Load font 5
     6FD0 0004     
0021 6FD2 1000  14         jmp   edkey.action.cmdb.font.load
0022                       ;-------------------------------------------------------
0023                       ; Load font
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.font.load:
0026 6FD4 C804  38         mov   tmp0,@parm1
     6FD6 A006     
0027 6FD8 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     6FDA 7BA2     
0028                                                   ; \ i  @parm1       = Font index (0-5)
0029                                                   ; / o  @tv.font.ptr = Pointer to font
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.cmdb.font.exit:
0034 6FDC 0460  28         b     @edkey.keyscan.hook.debounce
     6FDE 6168     
0035                                                   ; Back to editor main
                   < stevie_b1.asm
0123                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 6FE0 0649  14         dect  stack
0018 6FE2 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6FE4 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6FE6 A71C     
0023 6FE8 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6FEA 7A04     
0024 6FEC 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6FEE A31A     
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
0029 6FF0 C2F9  30         mov   *stack+,r11           ; Pop r11
0030 6FF2 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0124                       ;-----------------------------------------------------------------------
0125                       ; Logic for Editor Buffer
0126                       ;-----------------------------------------------------------------------
0127                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 6FF4 0649  14         dect  stack
0028 6FF6 C64B  30         mov   r11,*stack            ; Save return address
0029 6FF8 0649  14         dect  stack
0030 6FFA C644  30         mov   tmp0,*stack           ; Push tmp0
0031 6FFC 0649  14         dect  stack
0032 6FFE C645  30         mov   tmp1,*stack           ; Push tmp1
0033 7000 0649  14         dect  stack
0034 7002 C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7004 0649  14         dect  stack
0036 7006 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7008 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     700A A30C     
     700C A100     
0041 700E 04E0  34         clr   @fb.column
     7010 A30C     
0042               
0043 7012 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     7014 30EC     
0044                                                   ; \ i   @fb.top      = Address top row in FB
0045                                                   ; | i   @fb.topline  = Top line in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; |                  (offset 0..@fb.scrrows)
0048                                                   ; | i   @fb.column   = Current column in FB
0049                                                   ; | i   @fb.colsline = Columns per line FB
0050                                                   ; |
0051                                                   ; / o   @fb.current  = Updated pointer
0052                       ;------------------------------------------------------
0053                       ; Prepare scan
0054                       ;------------------------------------------------------
0055 7016 04C4  14         clr   tmp0                  ; Counter
0056 7018 C160  34         mov   @fb.current,tmp1      ; Get position
     701A A302     
0057 701C C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     701E A102     
0058 7020 04C7  14         clr   tmp3                  ; Counter for whitespace
0059                       ;------------------------------------------------------
0060                       ; 1. Scan line for >00 byte termination
0061                       ;------------------------------------------------------
0062               edb.line.pack.fb.scan:
0063 7022 D1B5  28         movb  *tmp1+,tmp2           ; Get char
0064 7024 0986  32         srl   tmp2,8                ; Right justify
0065 7026 130D  14         jeq   edb.line.pack.fb.check_setpage
0066                                                   ; Stop scan if >00 found
0067 7028 0584  14         inc   tmp0                  ; Increase string length
0068                       ;------------------------------------------------------
0069                       ; Check for trailing whitespace
0070                       ;------------------------------------------------------
0071 702A 0286  22         ci    tmp2,32               ; Was it a space character?
     702C 0020     
0072 702E 1301  14         jeq   edb.line.pack.fb.check80
0073 7030 C1C4  18         mov   tmp0,tmp3
0074                       ;------------------------------------------------------
0075                       ; Not more than 80 characters
0076                       ;------------------------------------------------------
0077               edb.line.pack.fb.check80:
0078 7032 0284  22         ci    tmp0,colrow
     7034 0050     
0079 7036 1305  14         jeq   edb.line.pack.fb.check_setpage
0080                                                   ; Stop scan if 80 characters processed
0081 7038 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0082                       ;------------------------------------------------------
0083                       ; Check failed, crash CPU!
0084                       ;------------------------------------------------------
0085               edb.line.pack.fb.crash:
0086 703A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     703C FFCE     
0087 703E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7040 2026     
0088                       ;------------------------------------------------------
0089                       ; Check if highest SAMS page needs to be increased
0090                       ;------------------------------------------------------
0091               edb.line.pack.fb.check_setpage:
0092 7042 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0093 7044 1103  14         jlt   edb.line.pack.fb.rtrim
0094 7046 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     7048 A104     
0095 704A 100C  14         jmp   !
0096               edb.line.pack.fb.rtrim:
0097                       ;------------------------------------------------------
0098                       ; Remove trailing blanks from line
0099                       ;------------------------------------------------------
0100 704C C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     704E A104     
0101               
0102 7050 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0103               
0104 7052 C184  18         mov   tmp0,tmp2             ; \
0105 7054 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0106 7056 0586  14         inc   tmp2                  ; /
0107               
0108 7058 C107  18         mov   tmp3,tmp0             ; \
0109 705A A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     705C A102     
0110               
0111               edb.line.pack.fb.rtrim.loop:
0112 705E DD05  32         movb  tmp1,*tmp0+
0113 7060 0606  14         dec   tmp2
0114 7062 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0115                       ;------------------------------------------------------
0116                       ; Check and increase highest SAMS page
0117                       ;------------------------------------------------------
0118 7064 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     7066 3708     
0119                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0120                                                   ; /                         free line
0121                       ;------------------------------------------------------
0122                       ; 2. Prepare for storing line
0123                       ;------------------------------------------------------
0124               edb.line.pack.fb.prepare:
0125 7068 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     706A A304     
     706C A006     
0126 706E A820  54         a     @fb.row,@parm1        ; /
     7070 A306     
     7072 A006     
0127                       ;------------------------------------------------------
0128                       ; 2a. Update index
0129                       ;------------------------------------------------------
0130               edb.line.pack.fb.update_index:
0131 7074 C820  54         mov   @edb.next_free.ptr,@parm2
     7076 A508     
     7078 A008     
0132                                                   ; Pointer to new line
0133 707A C820  54         mov   @edb.sams.hipage,@parm3
     707C A51A     
     707E A00A     
0134                                                   ; SAMS page to use
0135               
0136 7080 06A0  32         bl    @idx.entry.update     ; Update index
     7082 34AE     
0137                                                   ; \ i  parm1 = Line number in editor buffer
0138                                                   ; | i  parm2 = pointer to line in
0139                                                   ; |            editor buffer
0140                                                   ; / i  parm3 = SAMS page
0141                       ;------------------------------------------------------
0142                       ; 3. Set line prefix in editor buffer
0143                       ;------------------------------------------------------
0144 7084 C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     7086 A102     
0145 7088 C160  34         mov   @edb.next_free.ptr,tmp1
     708A A508     
0146                                                   ; Address of line in editor buffer
0147               
0148 708C 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     708E A508     
0149               
0150 7090 C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     7092 A104     
0151 7094 CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0152 7096 1317  14         jeq   edb.line.pack.fb.prepexit
0153                                                   ; Nothing to copy if empty line
0154                       ;------------------------------------------------------
0155                       ; 4. Copy line from framebuffer to editor buffer
0156                       ;------------------------------------------------------
0157               edb.line.pack.fb.copyline:
0158 7098 0286  22         ci    tmp2,2
     709A 0002     
0159 709C 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0160 709E DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0161 70A0 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0162 70A2 1007  14         jmp   edb.line.pack.fb.copyline.align16
0163               
0164               edb.line.pack.fb.copyline.checkbyte:
0165 70A4 0286  22         ci    tmp2,1
     70A6 0001     
0166 70A8 1602  14         jne   edb.line.pack.fb.copyline.block
0167 70AA D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0168 70AC 1002  14         jmp   edb.line.pack.fb.copyline.align16
0169               
0170               edb.line.pack.fb.copyline.block:
0171 70AE 06A0  32         bl    @xpym2m               ; Copy memory block
     70B0 24E0     
0172                                                   ; \ i  tmp0 = source
0173                                                   ; | i  tmp1 = destination
0174                                                   ; / i  tmp2 = bytes to copy
0175                       ;------------------------------------------------------
0176                       ; 5: Align pointer to multiple of 16 memory address
0177                       ;------------------------------------------------------
0178               edb.line.pack.fb.copyline.align16:
0179 70B2 A820  54         a     @rambuf+4,@edb.next_free.ptr
     70B4 A104     
     70B6 A508     
0180                                                      ; Add length of line
0181               
0182 70B8 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     70BA A508     
0183 70BC 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0184 70BE 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     70C0 000F     
0185 70C2 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     70C4 A508     
0186                       ;------------------------------------------------------
0187                       ; 6: Restore SAMS page and prepare for exit
0188                       ;------------------------------------------------------
0189               edb.line.pack.fb.prepexit:
0190 70C6 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     70C8 A100     
     70CA A30C     
0191               
0192 70CC 8820  50         c     @edb.sams.hipage,@edb.sams.page
     70CE A51A     
     70D0 A518     
0193 70D2 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0194               
0195 70D4 C120  34         mov   @edb.sams.page,tmp0
     70D6 A518     
0196 70D8 C160  34         mov   @edb.top.ptr,tmp1
     70DA A500     
0197 70DC 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     70DE 2576     
0198                                                   ; \ i  tmp0 = SAMS page number
0199                                                   ; / i  tmp1 = Memory address
0200                       ;------------------------------------------------------
0201                       ; Exit
0202                       ;------------------------------------------------------
0203               edb.line.pack.fb.exit:
0204 70E0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0205 70E2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0206 70E4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0207 70E6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0208 70E8 C2F9  30         mov   *stack+,r11           ; Pop R11
0209 70EA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0128                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 70EC 0649  14         dect  stack
0031 70EE C64B  30         mov   r11,*stack            ; Save return address
0032 70F0 0649  14         dect  stack
0033 70F2 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 70F4 0649  14         dect  stack
0035 70F6 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 70F8 0649  14         dect  stack
0037 70FA C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 70FC C820  54         mov   @parm1,@rambuf
     70FE A006     
     7100 A100     
0042 7102 C820  54         mov   @parm2,@rambuf+2
     7104 A008     
     7106 A102     
0043 7108 C820  54         mov   @parm3,@rambuf+4
     710A A00A     
     710C A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 710E C120  34         mov   @fb.colsline,tmp0
     7110 A30E     
0048 7112 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     7114 A008     
0049 7116 C1A0  34         mov   @fb.top.ptr,tmp2
     7118 A300     
0050 711A A146  18         a     tmp2,tmp1             ; Add base to offset
0051 711C C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     711E A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 7120 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     7122 A006     
     7124 A504     
0056 7126 1103  14         jlt   !                     ; No, continue processing
0057               
0058 7128 04E0  34         clr   @rambuf+10            ; Set line length = 0
     712A A10A     
0059 712C 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 712E C120  34 !       mov   @parm1,tmp0
     7130 A006     
0064 7132 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     7134 3656     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 7136 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     7138 A018     
0072 713A 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 713C 04E0  34         clr   @rambuf+10            ; Set length=0
     713E A10A     
0076 7140 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 7142 C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     7144 A10A     
0082 7146 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     7148 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 714A C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     714C A108     
0088 714E 04C5  14         clr   tmp1                  ; | Fill with >00
0089 7150 0206  20         li    tmp2,80               ; /
     7152 0050     
0090               
0091 7154 06A0  32         bl    @xfilm                ; Fill CPU memory
     7156 223C     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 7158 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     715A A10A     
0100 715C C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     715E A018     
0101 7160 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 7162 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     7164 A104     
0105 7166 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 7168 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     716A A108     
0109 716C 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     716E A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 7170 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 7172 0286  22         ci    tmp2,80               ; Check line length
     7174 0050     
0117 7176 1202  14         jle   edb.line.unpack.fb.copy
0118 7178 0206  20         li    tmp2,80               ; Only process first 80 characters
     717A 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 717C C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     717E A106     
0124 7180 A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     7182 A104     
0125               
0126               
0127 7184 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     7186 24E0     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 7188 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 718A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 718C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 718E C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7190 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0129                       ;-----------------------------------------------------------------------
0130                       ; Background tasks
0131                       ;-----------------------------------------------------------------------
0132                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 7192 0649  14         dect  stack
0009 7194 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7196 06A0  32         bl    @pane.vdpdump
     7198 77D0     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 719A C2F9  30         mov   *stack+,r11           ; Pop r11
0019 719C 0460  28         b     @slotok
     719E 2E84     
                   < stevie_b1.asm
0133                       ;-----------------------------------------------------------------------
0134                       ; Screen pane utilities
0135                       ;-----------------------------------------------------------------------
0136                       copy  "pane.utils.colorscheme.asm"  ; Colorscheme handling in panes
     **** ****     > pane.utils.colorscheme.asm
0001               
0002               
0003               
0004               * FILE......: pane.utils.colorscheme.asm
0005               * Purpose...: Stevie Editor - Color scheme for panes
0006               
0007               ***************************************************************
0008               * pane.action.colorscheme.cycle
0009               * Cycle through available color scheme
0010               ***************************************************************
0011               * bl  @pane.action.colorscheme.cycle
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.action.colorscheme.cycle:
0020 71A0 0649  14         dect  stack
0021 71A2 C64B  30         mov   r11,*stack            ; Push return address
0022 71A4 0649  14         dect  stack
0023 71A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0024               
0025 71A8 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     71AA A212     
0026 71AC 0284  22         ci    tmp0,tv.colorscheme.entries
     71AE 000C     
0027                                                   ; Last entry reached?
0028 71B0 1103  14         jlt   !
0029 71B2 0204  20         li    tmp0,1                ; Reset color scheme index
     71B4 0001     
0030 71B6 1001  14         jmp   pane.action.colorscheme.switch
0031 71B8 0584  14 !       inc   tmp0
0032                       ;-------------------------------------------------------
0033                       ; Switch to new color scheme
0034                       ;-------------------------------------------------------
0035               pane.action.colorscheme.switch:
0036 71BA C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     71BC A212     
0037               
0038 71BE 06A0  32         bl    @pane.action.colorscheme.load
     71C0 71FE     
0039                                                   ; Load current color scheme
0040                       ;-------------------------------------------------------
0041                       ; Show current color palette message
0042                       ;-------------------------------------------------------
0043 71C2 C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     71C4 832A     
     71C6 833C     
0044               
0045 71C8 06A0  32         bl    @putnum
     71CA 2A24     
0046 71CC 003E                   byte 0,62
0047 71CE A212                   data tv.colorscheme,rambuf,>3020
     71D0 A100     
     71D2 3020     
0048               
0049 71D4 06A0  32         bl    @putat
     71D6 2442     
0050 71D8 0034                   byte 0,52
0051 71DA 3D58                   data txt.colorscheme  ; Show color palette message
0052               
0053 71DC C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     71DE 833C     
     71E0 832A     
0054                       ;-------------------------------------------------------
0055                       ; Delay
0056                       ;-------------------------------------------------------
0057 71E2 0204  20         li    tmp0,6000
     71E4 1770     
0058 71E6 0604  14 !       dec   tmp0
0059 71E8 16FE  14         jne   -!
0060                       ;-------------------------------------------------------
0061                       ; Setup one shot task for removing message
0062                       ;-------------------------------------------------------
0063 71EA 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     71EC 374E     
0064 71EE C804  38         mov   tmp0,@tv.task.oneshot
     71F0 A226     
0065               
0066 71F2 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     71F4 2EF8     
0067 71F6 0003                   data 3                ; / for getting consistent delay
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               pane.action.colorscheme.cycle.exit:
0072 71F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 71FA C2F9  30         mov   *stack+,r11           ; Pop R11
0074 71FC 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * pane.action.colorscheme.load
0080               * Load color scheme
0081               ***************************************************************
0082               * bl  @pane.action.colorscheme.load
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * @tv.colorscheme = Index into color scheme table
0086               * @parm1          = Skip screen off if >FFFF
0087               * @parm2          = Skip colorizing marked lines if >FFFF
0088               * @parm3          = Only colorize CMDB pane if >FFFF
0089               *--------------------------------------------------------------
0090               * OUTPUT
0091               * none
0092               *--------------------------------------------------------------
0093               * Register usage
0094               * tmp0,tmp1,tmp2,tmp3,tmp4
0095               ********|*****|*********************|**************************
0096               pane.action.colorscheme.load:
0097 71FE 0649  14         dect  stack
0098 7200 C64B  30         mov   r11,*stack            ; Save return address
0099 7202 0649  14         dect  stack
0100 7204 C644  30         mov   tmp0,*stack           ; Push tmp0
0101 7206 0649  14         dect  stack
0102 7208 C645  30         mov   tmp1,*stack           ; Push tmp1
0103 720A 0649  14         dect  stack
0104 720C C646  30         mov   tmp2,*stack           ; Push tmp2
0105 720E 0649  14         dect  stack
0106 7210 C647  30         mov   tmp3,*stack           ; Push tmp3
0107 7212 0649  14         dect  stack
0108 7214 C648  30         mov   tmp4,*stack           ; Push tmp4
0109 7216 0649  14         dect  stack
0110 7218 C660  46         mov   @parm1,*stack         ; Push parm1
     721A A006     
0111 721C 0649  14         dect  stack
0112 721E C660  46         mov   @parm2,*stack         ; Push parm2
     7220 A008     
0113 7222 0649  14         dect  stack
0114 7224 C660  46         mov   @parm3,*stack         ; Push parm3
     7226 A00A     
0115                       ;-------------------------------------------------------
0116                       ; Turn screen off
0117                       ;-------------------------------------------------------
0118 7228 C120  34         mov   @parm1,tmp0
     722A A006     
0119 722C 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     722E FFFF     
0120 7230 1302  14         jeq   !                     ; Yes, so skip screen off
0121 7232 06A0  32         bl    @scroff               ; Turn screen off
     7234 2686     
0122                       ;-------------------------------------------------------
0123                       ; Get FG/BG colors framebuffer text
0124                       ;-------------------------------------------------------
0125 7236 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     7238 A212     
0126 723A 0604  14         dec   tmp0                  ; Internally work with base 0
0127               
0128 723C 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0129 723E 0224  22         ai    tmp0,tv.colorscheme.table
     7240 3884     
0130                                                   ; Add base for color scheme data table
0131 7242 C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0132 7244 C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     7246 A218     
0133                       ;-------------------------------------------------------
0134                       ; Get and save cursor color
0135                       ;-------------------------------------------------------
0136 7248 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0137 724A 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     724C 00FF     
0138 724E C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     7250 A216     
0139                       ;-------------------------------------------------------
0140                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0141                       ;-------------------------------------------------------
0142 7252 C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0143 7254 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     7256 FF00     
0144 7258 0988  32         srl   tmp4,8                ; MSB to LSB
0145               
0146 725A C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0147 725C C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0148 725E 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0149 7260 C806  38         mov   tmp2,@tv.busycolor    ; /
     7262 A21C     
0150               
0151 7264 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     7266 00FF     
0152 7268 C805  38         mov   tmp1,@tv.markcolor    ; /
     726A A21A     
0153               
0154 726C C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0155 726E 0985  32         srl   tmp1,8                ; \ Right align MN and
0156 7270 C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     7272 A220     
0157                       ;-------------------------------------------------------
0158                       ; Check if only CMDB needs to be colorized
0159                       ;-------------------------------------------------------
0160 7274 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     7276 A00A     
     7278 2022     
0161 727A 1340  14         jeq   pane.action.colorscheme.cmdbpane
0162                                                   ; Yes, shortcut jump to CMDB pane
0163                       ;-------------------------------------------------------
0164                       ; Get FG color for ruler
0165                       ;-------------------------------------------------------
0166 727C C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0167 727E 0245  22         andi  tmp1,>000f            ; Only keep P
     7280 000F     
0168 7282 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0169 7284 C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     7286 A21E     
0170                       ;-------------------------------------------------------
0171                       ; Write sprite color of line and column indicators to SAT
0172                       ;-------------------------------------------------------
0173 7288 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0174 728A 0245  22         andi  tmp1,>00f0            ; Only keep O
     728C 00F0     
0175 728E 0A45  24         sla   tmp1,4                ; Move O to MSB
0176 7290 D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     7292 A05D     
0177 7294 D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     7296 A061     
0178                       ;-------------------------------------------------------
0179                       ; Dump colors to VDP register 7 (text mode)
0180                       ;-------------------------------------------------------
0181 7298 C147  18         mov   tmp3,tmp1             ; Get work copy
0182 729A 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0183 729C 0265  22         ori   tmp1,>0700
     729E 0700     
0184 72A0 C105  18         mov   tmp1,tmp0
0185 72A2 06A0  32         bl    @putvrx               ; Write VDP register
     72A4 2334     
0186                       ;-------------------------------------------------------
0187                       ; Dump colors for frame buffer pane (TAT)
0188                       ;-------------------------------------------------------
0189 72A6 C120  34         mov   @tv.ruler.visible,tmp0
     72A8 A210     
0190 72AA 130C  14         jeq   pane.action.colorscheme.fbdump.noruler
0191               
0192 72AC C120  34         mov   @cmdb.dialog,tmp0
     72AE A71C     
0193 72B0 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     72B2 0068     
0194 72B4 1307  14         jeq   pane.action.colorscheme.fbdump.noruler
0195                                                   ; Yes, skip ruler
0196                       ;-------------------------------------------------------
0197                       ; Ruler visible on screen (TAT)
0198                       ;-------------------------------------------------------
0199 72B6 C120  34         mov   @cmdb.vdptop,tmp0     ;
     72B8 A70E     
0200 72BA 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     72BC 0050     
0201 72BE 0206  20         li    tmp2,(pane.botrow-2)*80
     72C0 0870     
0202                                                   ; Number of bytes to fill
0203 72C2 1004  14         jmp   pane.action.colorscheme.checkcmdb
0204               
0205               pane.action.colorscheme.fbdump.noruler:
0206                       ;-------------------------------------------------------
0207                       ; No ruler visible on screen (TAT)
0208                       ;-------------------------------------------------------
0209 72C4 0204  20         li    tmp0,vdp.fb.toprow.tat
     72C6 1850     
0210                                                   ; VDP start address (frame buffer area)
0211 72C8 0206  20         li    tmp2,(pane.botrow-1)*80
     72CA 08C0     
0212                                                   ; Number of bytes to fill
0213                       ;-------------------------------------------------------
0214                       ; Adjust bottom of frame buffer if CMDB visible
0215                       ;-------------------------------------------------------
0216               pane.action.colorscheme.checkcmdb:
0217 72CC C820  54         mov   @cmdb.visible,@cmdb.visible
     72CE A702     
     72D0 A702     
0218 72D2 1302  14         jeq   pane.action.colorscheme.fbdump
0219                                                   ; Not visible, skip adjustment
0220 72D4 0226  22         ai    tmp2,-320             ; CMDB adjustment
     72D6 FEC0     
0221                       ;-------------------------------------------------------
0222                       ; Dump colors to VDP (TAT)
0223                       ;-------------------------------------------------------
0224               pane.action.colorscheme.fbdump:
0225 72D8 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0226 72DA 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0227               
0228 72DC 06A0  32         bl    @xfilv                ; Fill colors
     72DE 2294     
0229                                                   ; i \  tmp0 = start address
0230                                                   ; i |  tmp1 = byte to fill
0231                                                   ; i /  tmp2 = number of bytes to fill
0232                       ;-------------------------------------------------------
0233                       ; Colorize marked lines
0234                       ;-------------------------------------------------------
0235 72E0 C120  34         mov   @cmdb.dialog,tmp0
     72E2 A71C     
0236 72E4 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     72E6 0068     
0237 72E8 1309  14         jeq   pane.action.colorscheme.cmdbpane
0238                                                   ; Yes, skip marked lines
0239               
0240 72EA C120  34         mov   @parm2,tmp0
     72EC A008     
0241 72EE 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     72F0 FFFF     
0242 72F2 1304  14         jeq   pane.action.colorscheme.cmdbpane
0243               
0244 72F4 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     72F6 A312     
0245               
0246 72F8 06A0  32         bl    @fb.colorlines        ; Colorize lines
     72FA 7A98     
0247                                                   ; \ i  @parm1       = Force refresh if >ffff
0248                                                   ; / i  @fb.colorize = Colorize if >ffff
0249                       ;-------------------------------------------------------
0250                       ; Dump colors for CMDB header line (TAT)
0251                       ;-------------------------------------------------------
0252               pane.action.colorscheme.cmdbpane:
0253 72FC C120  34         mov   @cmdb.visible,tmp0
     72FE A702     
0254 7300 1338  14         jeq   pane.action.colorscheme.errpane
0255                                                   ; Skip if CMDB pane is hidden
0256               
0257 7302 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7304 A70E     
0258 7306 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     7308 A220     
0259 730A 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     730C 0040     
0260 730E 06A0  32         bl    @xfilv                ; Fill colors
     7310 2294     
0261                                                   ; i \  tmp0 = start address
0262                                                   ; i |  tmp1 = byte to fill
0263                                                   ; i /  tmp2 = number of bytes to fill
0264                       ;-------------------------------------------------------
0265                       ; Dump colors for CMDB Stevie logo (TAT)
0266                       ;-------------------------------------------------------
0267 7312 C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     7314 A70E     
0268 7316 0224  22         ai    tmp0,64               ; Add offset for logo
     7318 0040     
0269 731A C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     731C A220     
0270 731E D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     7320 A221     
0271                                                   ; Copy same value into MSB
0272 7322 0945  24         srl   tmp1,4                ;
0273 7324 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     7326 00FF     
0274               
0275 7328 0206  20         li    tmp2,16               ; Number of bytes to fill
     732A 0010     
0276 732C 06A0  32         bl    @xfilv                ; Fill colors
     732E 2294     
0277                                                   ; i \  tmp0 = start address
0278                                                   ; i |  tmp1 = byte to fill
0279                                                   ; i /  tmp2 = number of bytes to fill
0280                       ;-------------------------------------------------------
0281                       ; Dump colors for CMDB pane content (TAT)
0282                       ;-------------------------------------------------------
0283 7330 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7332 A70E     
0284 7334 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     7336 0050     
0285                                                   ;
0286 7338 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0287 733A 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     733C 00A0     
0288 733E 06A0  32         bl    @xfilv                ; Fill colors
     7340 2294     
0289                                                   ; i \  tmp0 = start address
0290                                                   ; i |  tmp1 = byte to fill
0291                                                   ; i /  tmp2 = number of bytes to fill
0292               
0293 7342 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7344 A70E     
0294 7346 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     7348 00F0     
0295                                                   ;
0296 734A C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     734C A220     
0297 734E 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     7350 0050     
0298 7352 06A0  32         bl    @xfilv                ; Fill colors
     7354 2294     
0299                                                   ; i \  tmp0 = start address
0300                                                   ; i |  tmp1 = byte to fill
0301                                                   ; i /  tmp2 = number of bytes to fill
0302               
0303 7356 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7358 A70E     
0304 735A 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     735C 0140     
0305                                                   ;
0306 735E C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0307 7360 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     7362 00A0     
0308 7364 06A0  32         bl    @xfilv                ; Fill colors
     7366 2294     
0309                                                   ; i \  tmp0 = start address
0310                                                   ; i |  tmp1 = byte to fill
0311                                                   ; i /  tmp2 = number of bytes to fill
0312                       ;-------------------------------------------------------
0313                       ; Exit early if only CMDB needed to be colorized
0314                       ;-------------------------------------------------------
0315 7368 C120  34         mov   @parm3,tmp0
     736A A00A     
0316 736C 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     736E FFFF     
0317 7370 133A  14         jeq   pane.action.colorscheme.cursorcolor.cmdb
0318                                                   ; Yes, shortcut to CMDB cursor color
0319                       ;-------------------------------------------------------
0320                       ; Dump colors for error pane (TAT)
0321                       ;-------------------------------------------------------
0322               pane.action.colorscheme.errpane:
0323 7372 C120  34         mov   @tv.error.visible,tmp0
     7374 A22A     
0324 7376 1306  14         jeq   pane.action.colorscheme.statline
0325                                                   ; Skip if error pane is hidden
0326               
0327 7378 0205  20         li    tmp1,>00f6            ; White on dark red
     737A 00F6     
0328 737C C805  38         mov   tmp1,@parm1           ; Pass color combination
     737E A006     
0329               
0330 7380 06A0  32         bl    @pane.errline.drawcolor
     7382 7566     
0331                                                   ; Draw color on rows in error pane
0332                                                   ; \ i  @tv.error.rows = Number of rows
0333                                                   ; / i  @parm1         = Color combination
0334                       ;-------------------------------------------------------
0335                       ; Dump colors for top line and bottom line (TAT)
0336                       ;-------------------------------------------------------
0337               pane.action.colorscheme.statline:
0338 7384 C160  34         mov   @tv.color,tmp1
     7386 A218     
0339 7388 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     738A 00FF     
0340 738C C805  38         mov   tmp1,@parm1           ; Set color combination
     738E A006     
0341               
0342               
0343 7390 04E0  34         clr   @parm2                ; Top row on screen
     7392 A008     
0344 7394 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7396 7472     
0345                                                   ; \ i  @parm1 = Color combination
0346                                                   ; / i  @parm2 = Row on physical screen
0347               
0348 7398 0205  20         li    tmp1,pane.botrow
     739A 001D     
0349 739C C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     739E A008     
0350 73A0 06A0  32         bl    @colors.line.set      ; Load color combination for line
     73A2 7472     
0351                                                   ; \ i  @parm1 = Color combination
0352                                                   ; / i  @parm2 = Row on physical screen
0353                       ;-------------------------------------------------------
0354                       ; Dump color for hearts in TI Basic dialog (TAT)
0355                       ;-------------------------------------------------------
0356 73A4 C160  34         mov   @cmdb.dialog,tmp1
     73A6 A71C     
0357 73A8 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     73AA 006B     
0358 73AC 1606  14         jne   pane.action.colorscheme.ruler
0359               
0360 73AE 0204  20         li    tmp0,11               ; 1st Heart after string "Session: 1"
     73B0 000B     
0361 73B2 C804  38         mov   tmp0,@parm1           ; Set parameter
     73B4 A006     
0362               
0363 73B6 06A0  32         bl    @dialog.hearts.tat    ; Dump colors for hearts
     73B8 7A4A     
0364                                                   ; \ i  @parm1 = Start column (pos 1st heart)
0365                                                   ; /
0366                       ;-------------------------------------------------------
0367                       ; Dump colors for ruler if visible (TAT)
0368                       ;-------------------------------------------------------
0369               pane.action.colorscheme.ruler:
0370 73BA C160  34         mov   @cmdb.dialog,tmp1
     73BC A71C     
0371 73BE 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     73C0 0068     
0372 73C2 130A  14         jeq   pane.action.colorscheme.cursorcolor
0373                                                   ; Yes, skip ruler
0374               
0375 73C4 C160  34         mov   @tv.ruler.visible,tmp1
     73C6 A210     
0376 73C8 1307  14         jeq   pane.action.colorscheme.cursorcolor
0377               
0378 73CA 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     73CC 7A8E     
0379 73CE 06A0  32         bl    @cpym2v
     73D0 2486     
0380 73D2 1850                   data vdp.fb.toprow.tat
0381 73D4 A370                   data fb.ruler.tat
0382 73D6 0050                   data 80               ; Show ruler colors
0383                       ;-------------------------------------------------------
0384                       ; Dump cursor FG color to sprite table (SAT)
0385                       ;-------------------------------------------------------
0386               pane.action.colorscheme.cursorcolor:
0387 73D8 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     73DA A216     
0388               
0389 73DC C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     73DE A224     
0390 73E0 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     73E2 0000     
0391 73E4 1304  14         jeq   pane.action.colorscheme.cursorcolor.fb
0392                                                   ; Yes, set cursor color
0393               
0394               pane.action.colorscheme.cursorcolor.cmdb:
0395 73E6 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     73E8 00F0     
0396 73EA 0A48  24         sla   tmp4,4                ; Move to MSB
0397 73EC 1003  14         jmp   !
0398               
0399               pane.action.colorscheme.cursorcolor.fb:
0400 73EE 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     73F0 000F     
0401 73F2 0A88  32         sla   tmp4,8                ; Move to MSB
0402               
0403 73F4 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     73F6 A059     
0404 73F8 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     73FA A215     
0405                       ;-------------------------------------------------------
0406                       ; Exit
0407                       ;-------------------------------------------------------
0408               pane.action.colorscheme.load.exit:
0409 73FC 06A0  32         bl    @scron                ; Turn screen on
     73FE 268E     
0410 7400 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7402 A00A     
0411 7404 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7406 A008     
0412 7408 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     740A A006     
0413 740C C239  30         mov   *stack+,tmp4          ; Pop tmp4
0414 740E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0415 7410 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0416 7412 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0417 7414 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0418 7416 C2F9  30         mov   *stack+,r11           ; Pop R11
0419 7418 045B  20         b     *r11                  ; Return to caller
0420               
0421               
0422               
0423               ***************************************************************
0424               * pane.action.colorscheme.statline
0425               * Set color combination for bottom status line
0426               ***************************************************************
0427               * bl @pane.action.colorscheme.statlines
0428               *--------------------------------------------------------------
0429               * INPUT
0430               * @parm1 = Color combination to set
0431               *--------------------------------------------------------------
0432               * OUTPUT
0433               * none
0434               *--------------------------------------------------------------
0435               * Register usage
0436               * tmp0, tmp1, tmp2
0437               ********|*****|*********************|**************************
0438               pane.action.colorscheme.statlines:
0439 741A 0649  14         dect  stack
0440 741C C64B  30         mov   r11,*stack            ; Save return address
0441 741E 0649  14         dect  stack
0442 7420 C644  30         mov   tmp0,*stack           ; Push tmp0
0443                       ;------------------------------------------------------
0444                       ; Bottom line
0445                       ;------------------------------------------------------
0446 7422 0204  20         li    tmp0,pane.botrow
     7424 001D     
0447 7426 C804  38         mov   tmp0,@parm2           ; Last row on screen
     7428 A008     
0448 742A 06A0  32         bl    @colors.line.set      ; Load color combination for line
     742C 7472     
0449                                                   ; \ i  @parm1 = Color combination
0450                                                   ; / i  @parm2 = Row on physical screen
0451                       ;------------------------------------------------------
0452                       ; Exit
0453                       ;------------------------------------------------------
0454               pane.action.colorscheme.statlines.exit:
0455 742E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0456 7430 C2F9  30         mov   *stack+,r11           ; Pop R11
0457 7432 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0137                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 7434 0649  14         dect  stack
0021 7436 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7438 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     743A 228E     
0026 743C 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     743E 0000     
     7440 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 7442 06A0  32         bl    @clslot
     7444 2EEA     
0031 7446 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 7448 06A0  32         bl    @clslot
     744A 2EEA     
0034 744C 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 744E C2F9  30         mov   *stack+,r11           ; Pop R11
0040 7450 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 7452 0649  14         dect  stack
0061 7454 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 7456 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7458 228E     
0066 745A 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     745C 0000     
     745E 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 7460 06A0  32         bl    @mkslot
     7462 2ECC     
0073 7464 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     7466 379A     
0074 7468 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     746A 383C     
0075 746C FFFF                   data eol
0076               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 746E C2F9  30         mov   *stack+,r11           ; Pop R11
0090 7470 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0138                       ;-----------------------------------------------------------------------
0139                       ; Screen panes
0140                       ;-----------------------------------------------------------------------
0141                       copy  "colors.line.set.asm"         ; Set color combination for line
     **** ****     > colors.line.set.asm
0001               * FILE......: colors.line.set
0002               * Purpose...: Set color combination for line
0003               
0004               ***************************************************************
0005               * colors.line.set
0006               * Set color combination for line in VDP TAT
0007               ***************************************************************
0008               * bl  @colors.line.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Foreground / Background color
0012               * @parm2 = Row on physical screen
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               colors.line.set:
0021 7472 0649  14         dect  stack
0022 7474 C64B  30         mov   r11,*stack            ; Save return address
0023 7476 0649  14         dect  stack
0024 7478 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 747A 0649  14         dect  stack
0026 747C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 747E 0649  14         dect  stack
0028 7480 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 7482 0649  14         dect  stack
0030 7484 C660  46         mov   @parm1,*stack         ; Push parm1
     7486 A006     
0031 7488 0649  14         dect  stack
0032 748A C660  46         mov   @parm2,*stack         ; Push parm2
     748C A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 748E C120  34         mov   @parm2,tmp0           ; Get target line
     7490 A008     
0037 7492 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     7494 0050     
0038 7496 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 7498 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 749A 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     749C 1800     
0042 749E C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     74A0 A006     
0043 74A2 0206  20         li    tmp2,80               ; Number of bytes to fill
     74A4 0050     
0044               
0045 74A6 06A0  32         bl    @xfilv                ; Fill colors
     74A8 2294     
0046                                                   ; i \  tmp0 = start address
0047                                                   ; i |  tmp1 = byte to fill
0048                                                   ; i /  tmp2 = number of bytes to fill
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               colors.line.set.exit:
0053 74AA C839  50         mov   *stack+,@parm2        ; Pop @parm2
     74AC A008     
0054 74AE C839  50         mov   *stack+,@parm1        ; Pop @parm1
     74B0 A006     
0055 74B2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 74B4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 74B6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 74B8 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 74BA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0142                       copy  "pane.topline.asm"            ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
0017 74BC 0649  14         dect  stack
0018 74BE C64B  30         mov   r11,*stack            ; Save return address
0019 74C0 0649  14         dect  stack
0020 74C2 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 74C4 0649  14         dect  stack
0022 74C6 C660  42         mov   @wyx,*stack           ; Push cursor position
     74C8 832A     
0023                       ;------------------------------------------------------
0024                       ; Show current file
0025                       ;------------------------------------------------------
0026               pane.topline.file:
0027 74CA 06A0  32         bl    @at
     74CC 26C6     
0028 74CE 0000                   byte 0,0              ; y=0, x=0
0029               
0030 74D0 C820  54         mov   @edb.filename.ptr,@parm1
     74D2 A514     
     74D4 A006     
0031                                                   ; Get string to display
0032 74D6 0204  20         li    tmp0,47
     74D8 002F     
0033 74DA C804  38         mov   tmp0,@parm2           ; Set requested length
     74DC A008     
0034 74DE 0204  20         li    tmp0,32
     74E0 0020     
0035 74E2 C804  38         mov   tmp0,@parm3           ; Set character to fill
     74E4 A00A     
0036 74E6 0204  20         li    tmp0,rambuf
     74E8 A100     
0037 74EA C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     74EC A00C     
0038               
0039               
0040 74EE 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     74F0 3436     
0041                                                   ; \ i  @parm1 = Pointer to string
0042                                                   ; | i  @parm2 = Requested length
0043                                                   ; | i  @parm3 = Fill characgter
0044                                                   ; | i  @parm4 = Pointer to buffer with
0045                                                   ; /             output string
0046               
0047 74F2 C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     74F4 A018     
0048 74F6 06A0  32         bl    @xutst0               ; /
     74F8 2420     
0049                       ;------------------------------------------------------
0050                       ; Check if M1/M2 markers need to be shown
0051                       ;------------------------------------------------------
0052               pane.topline.showmarkers:
0053 74FA C120  34         mov   @edb.block.m1,tmp0    ; \
     74FC A50E     
0054 74FE 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     7500 FFFF     
0055 7502 132C  14         jeq   pane.topline.exit     ; /
0056               
0057 7504 C120  34         mov   @tv.task.oneshot,tmp0 ; \
     7506 A226     
0058 7508 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     750A 374E     
0059                                                   ; | Exit early if overlay message visible
0060 750C 1327  14         jeq   pane.topline.exit     ; /
0061                       ;------------------------------------------------------
0062                       ; Show M1 marker
0063                       ;------------------------------------------------------
0064 750E 06A0  32         bl    @putat
     7510 2442     
0065 7512 0034                   byte 0,52
0066 7514 3B36                   data txt.m1           ; Show M1 marker message
0067               
0068 7516 C820  54         mov   @edb.block.m1,@parm1
     7518 A50E     
     751A A006     
0069 751C 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     751E 340A     
0070                                                   ; \ i @parm1           = uint16
0071                                                   ; / o @uint16.unpacked = Output string
0072               
0073 7520 0204  20         li    tmp0,>0500
     7522 0500     
0074 7524 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     7526 A02C     
0075               
0076 7528 06A0  32         bl    @putat
     752A 2442     
0077 752C 0037                   byte 0,55
0078 752E A02C                   data uint16.unpacked  ; Show M1 value
0079                       ;------------------------------------------------------
0080                       ; Show M2 marker
0081                       ;------------------------------------------------------
0082 7530 C120  34         mov   @edb.block.m2,tmp0    ; \
     7532 A510     
0083 7534 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     7536 FFFF     
0084 7538 1311  14         jeq   pane.topline.exit     ; /
0085               
0086 753A 06A0  32         bl    @putat
     753C 2442     
0087 753E 003E                   byte 0,62
0088 7540 3B3A                   data txt.m2           ; Show M2 marker message
0089               
0090 7542 C820  54         mov   @edb.block.m2,@parm1
     7544 A510     
     7546 A006     
0091 7548 06A0  32         bl    @tv.uint16.unpack     ; Unpack 16 bit unsigned integer to string
     754A 340A     
0092                                                   ; \ i @parm1           = uint16
0093                                                   ; / o @uint16.unpacked = Output string
0094               
0095 754C 0204  20         li    tmp0,>0500
     754E 0500     
0096 7550 D804  38         movb  tmp0,@uint16.unpacked ; Set string length to 5 (padding)
     7552 A02C     
0097               
0098 7554 06A0  32         bl    @putat
     7556 2442     
0099 7558 0041                   byte 0,65
0100 755A A02C                   data uint16.unpacked  ; Show M2 value
0101                       ;------------------------------------------------------
0102                       ; Exit
0103                       ;------------------------------------------------------
0104               pane.topline.exit:
0105 755C C839  42         mov   *stack+,@wyx          ; Pop cursor position
     755E 832A     
0106 7560 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0107 7562 C2F9  30         mov   *stack+,r11           ; Pop r11
0108 7564 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0143                       copy  "pane.errline.asm"            ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
0023 7566 0649  14         dect  stack
0024 7568 C64B  30         mov   r11,*stack            ; Save return address
0025 756A 0649  14         dect  stack
0026 756C C644  30         mov   tmp0,*stack           ; Push tmp0
0027 756E 0649  14         dect  stack
0028 7570 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 7572 0649  14         dect  stack
0030 7574 C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 7576 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     7578 001D     
0035 757A C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 757C 6160  34         s     @tv.error.rows,tmp1   ; /
     757E A22C     
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
0041 7580 C805  38         mov   tmp1,@parm2           ; Row on physical screen
     7582 A008     
0042               
0043 7584 06A0  32         bl    @colors.line.set      ; Load color combination for line
     7586 7472     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 7588 0585  14         inc   tmp1                  ; Next row
0048 758A 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 758C 11F9  14         jlt   pane.errline.drawcolor.loop
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
0055 758E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 7590 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 7592 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 7594 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 7596 045B  20         b     *r11                  ; Return to caller
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
0082 7598 0649  14         dect  stack
0083 759A C64B  30         mov   r11,*stack            ; Save return address
0084 759C 0649  14         dect  stack
0085 759E C644  30         mov   tmp0,*stack           ; Push tmp0
0086 75A0 0649  14         dect  stack
0087 75A2 C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 75A4 0205  20         li    tmp1,>00f6            ; White on dark red
     75A6 00F6     
0090 75A8 C805  38         mov   tmp1,@parm1
     75AA A006     
0091               
0092 75AC 06A0  32         bl    @pane.errline.drawcolor
     75AE 7566     
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
0099 75B0 0204  20         li    tmp0,tv.error.msg
     75B2 A234     
0100 75B4 C804  38         mov   tmp0,@parm1           ; Get pointer to string
     75B6 A006     
0101               
0102 75B8 0204  20         li    tmp0,240
     75BA 00F0     
0103 75BC C804  38         mov   tmp0,@parm2           ; Set requested length
     75BE A008     
0104               
0105 75C0 0204  20         li    tmp0,32
     75C2 0020     
0106 75C4 C804  38         mov   tmp0,@parm3           ; Set character to fill
     75C6 A00A     
0107               
0108 75C8 0204  20         li    tmp0,rambuf
     75CA A100     
0109 75CC C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     75CE A00C     
0110               
0111 75D0 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     75D2 3436     
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
0120 75D4 06A0  32         bl    @at
     75D6 26C6     
0121 75D8 1A00                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 75DA C160  34         mov   @outparm1,tmp1        ; \ Display error message
     75DC A018     
0124 75DE 06A0  32         bl    @xutst0               ; /
     75E0 2420     
0125               
0126 75E2 C120  34         mov   @fb.scrrows.max,tmp0  ; \
     75E4 A31E     
0127 75E6 6120  34         s     @tv.error.rows,tmp0   ; | Adjust number of rows in frame buffer
     75E8 A22C     
0128 75EA C804  38         mov   tmp0,@fb.scrrows      ; /
     75EC A31C     
0129               
0130 75EE 0720  34         seto  @tv.error.visible     ; Error line is visible
     75F0 A22A     
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               pane.errline.show.exit:
0135 75F2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 75F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 75F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 75F8 045B  20         b     *r11                  ; Return to caller
0139               
0140               
0141               
0142               ***************************************************************
0143               * pane.errline.hide
0144               * Hide error line
0145               ***************************************************************
0146               * bl @pane.errline.hide
0147               *--------------------------------------------------------------
0148               * INPUT
0149               * none
0150               *--------------------------------------------------------------
0151               * OUTPUT
0152               * none
0153               *--------------------------------------------------------------
0154               * Register usage
0155               * none
0156               *--------------------------------------------------------------
0157               * Hiding the error line passes pane focus to frame buffer.
0158               ********|*****|*********************|**************************
0159               pane.errline.hide:
0160 75FA 0649  14         dect  stack
0161 75FC C64B  30         mov   r11,*stack            ; Save return address
0162 75FE 0649  14         dect  stack
0163 7600 C644  30         mov   tmp0,*stack           ; Push tmp0
0164                       ;------------------------------------------------------
0165                       ; Get color combination
0166                       ;------------------------------------------------------
0167 7602 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     7604 32B6     
0168               
0169 7606 C120  34         mov   @cmdb.visible,tmp0
     7608 A702     
0170 760A 1303  14         jeq   pane.errline.hide.fbcolor
0171                       ;------------------------------------------------------
0172                       ; CMDB pane color
0173                       ;------------------------------------------------------
0174 760C C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     760E A220     
0175 7610 1003  14         jmp   !
0176                       ;------------------------------------------------------
0177                       ; Frame buffer color
0178                       ;------------------------------------------------------
0179               pane.errline.hide.fbcolor:
0180 7612 C120  34         mov   @tv.color,tmp0        ; Get colors
     7614 A218     
0181 7616 0984  32         srl   tmp0,8                ; Get rid of status line colors
0182                       ;------------------------------------------------------
0183                       ; Dump colors
0184                       ;------------------------------------------------------
0185 7618 C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     761A A006     
0186               
0187 761C 06A0  32         bl    @pane.errline.drawcolor
     761E 7566     
0188                                                   ; Draw color on rows in error pane
0189                                                   ; \ i  @tv.error.rows = Number of rows
0190                                                   ; / i  @parm1         = Color combination
0191               
0192 7620 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     7622 A22A     
0193 7624 C820  54         mov   @fb.scrrows.max,@fb.scrrows
     7626 A31E     
     7628 A31C     
0194                                                   ; Set frame buffer to full size again
0195                       ;------------------------------------------------------
0196                       ; Exit
0197                       ;------------------------------------------------------
0198               pane.errline.hide.exit:
0199 762A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0200 762C C2F9  30         mov   *stack+,r11           ; Pop r11
0201 762E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0144                       copy  "pane.botline.asm"            ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.botline:
0017 7630 0649  14         dect  stack
0018 7632 C64B  30         mov   r11,*stack            ; Save return address
0019 7634 0649  14         dect  stack
0020 7636 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7638 0649  14         dect  stack
0022 763A C660  42         mov   @wyx,*stack           ; Push cursor position
     763C 832A     
0023                       ;------------------------------------------------------
0024                       ; Show Master Catalog message if on
0025                       ;------------------------------------------------------
0026               pane.botline.mc:
0027 763E C120  34         mov   @edb.special.file,tmp0
     7640 A520     
0028                                                   ; \
0029                                                   ; / Check if special file (0=normal file)
0030               
0031 7642 0284  22         ci    tmp0,id.special.mastcat
     7644 0001     
0032                                                   ; Is master catalog?
0033 7646 1604  14         jne   pane.botline.shortcuts
0034                                                   ; No, skip message
0035               
0036 7648 06A0  32         bl    @putat
     764A 2442     
0037 764C 1C00                   byte pane.botrow-1,0
0038 764E 3C5A                   data txt.msg.mastcat  ; Show Master Catalog message
0039                       ;------------------------------------------------------
0040                       ; Show block shortcuts if set
0041                       ;------------------------------------------------------
0042               pane.botline.shortcuts:
0043 7650 C120  34         mov   @edb.block.m2,tmp0    ; \
     7652 A510     
0044 7654 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0045                                                   ; /
0046 7656 1305  14         jeq   pane.botline.show_keys
0047               
0048 7658 06A0  32         bl    @putat
     765A 2442     
0049 765C 1D00                   byte pane.botrow,0
0050 765E 3B88                   data txt.keys.block   ; Show block shortcuts
0051               
0052 7660 1015  14         jmp   pane.botline.show_mode
0053                       ;------------------------------------------------------
0054                       ; Show default message
0055                       ;------------------------------------------------------
0056               pane.botline.show_keys:
0057 7662 C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     7664 A0B4     
0058 7666 130E  14         jeq   !
0059                       ;------------------------------------------------------
0060                       ; Show TI Basic session ID
0061                       ;------------------------------------------------------
0062 7668 06A0  32         bl    @putat
     766A 2442     
0063 766C 1D00                   byte pane.botrow,0
0064 766E 3B5E                   data txt.keys.defaultb
0065                                                   ; Show defaults + TI Basic
0066               
0067 7670 C120  34         mov   @tib.session,tmp0     ; Get Session ID
     7672 A0B4     
0068 7674 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     7676 0130     
0069                                                   ; | length-byte prefix and
0070                                                   ; / ASCII offset 48 (>30)
0071               
0072 7678 C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     767A A100     
0073               
0074 767C 06A0  32         bl    @putat                ; \
     767E 2442     
0075 7680 1D29                   byte pane.botrow,41   ; | Display session-ID string
0076 7682 A100                   data rambuf           ; / Y=bottom row, X=41
0077                       ;------------------------------------------------------
0078                       ; Show default keys
0079                       ;------------------------------------------------------
0080 7684 06A0  32 !       bl    @putat
     7686 2442     
0081 7688 1D00                   byte pane.botrow,0
0082 768A 3B3E                   data txt.keys.default ; Show default keys
0083                       ;------------------------------------------------------
0084                       ; Show text editing mode
0085                       ;------------------------------------------------------
0086               pane.botline.show_mode:
0087 768C C120  34         mov   @edb.insmode,tmp0
     768E A50A     
0088 7690 1605  14         jne   pane.botline.show_mode.insert
0089                       ;------------------------------------------------------
0090                       ; Overwrite mode
0091                       ;------------------------------------------------------
0092 7692 06A0  32         bl    @putat
     7694 2442     
0093 7696 1D36                   byte  pane.botrow,54
0094 7698 3910                   data  txt.ovrwrite
0095 769A 100C  14         jmp   pane.botline.show_dirty
0096                       ;------------------------------------------------------
0097                       ; Insert mode
0098                       ;------------------------------------------------------
0099               pane.botline.show_mode.insert:
0100 769C C120  34         mov   @edb.autoinsert,tmp0
     769E A50C     
0101 76A0 1305  14         jeq   pane.botline.show_mode.insert.noauto
0102                       ;------------------------------------------------------
0103                       ; Auto-Insert
0104                       ;------------------------------------------------------
0105 76A2 06A0  32         bl    @putat
     76A4 2442     
0106 76A6 1D36                   byte  pane.botrow,54
0107 76A8 391C                   data  txt.autoinsert
0108 76AA 1004  14         jmp   pane.botline.show_dirty
0109                       ;------------------------------------------------------
0110                       ; No Auto-Insert
0111                       ;------------------------------------------------------
0112               pane.botline.show_mode.insert.noauto:
0113 76AC 06A0  32         bl    @putat
     76AE 2442     
0114 76B0 1D36                   byte  pane.botrow,54
0115 76B2 3916                   data  txt.insert
0116                       ;------------------------------------------------------
0117                       ; Show if text was changed in editor buffer
0118                       ;------------------------------------------------------
0119               pane.botline.show_dirty:
0120 76B4 C120  34         mov   @edb.dirty,tmp0
     76B6 A506     
0121 76B8 1305  14         jeq   pane.botline.nochange
0122                       ;------------------------------------------------------
0123                       ; Show "*"
0124                       ;------------------------------------------------------
0125 76BA 06A0  32         bl    @putat
     76BC 2442     
0126 76BE 1D3A                   byte pane.botrow,58
0127 76C0 3922                   data txt.star
0128 76C2 1004  14         jmp   pane.botline.show_linecol
0129                       ;------------------------------------------------------
0130                       ; Show " "
0131                       ;------------------------------------------------------
0132               pane.botline.nochange:
0133 76C4 06A0  32         bl    @putat
     76C6 2442     
0134 76C8 1D3A                   byte pane.botrow,58
0135 76CA 3C44                   data txt.ws1          ; Single white space
0136                       ;------------------------------------------------------
0137                       ; Show "line,column"
0138                       ;------------------------------------------------------
0139               pane.botline.show_linecol:
0140 76CC C820  54         mov   @fb.row,@parm1
     76CE A306     
     76D0 A006     
0141 76D2 06A0  32         bl    @fb.row2line          ; Row to editor line
     76D4 30D2     
0142                                                   ; \ i @fb.topline = Top line in frame buffer
0143                                                   ; | i @parm1      = Row in frame buffer
0144                                                   ; / o @outparm1   = Matching line in EB
0145               
0146 76D6 05A0  34         inc   @outparm1             ; Add base 1
     76D8 A018     
0147                       ;------------------------------------------------------
0148                       ; Show line
0149                       ;------------------------------------------------------
0150 76DA 06A0  32         bl    @putnum
     76DC 2A24     
0151 76DE 1D3B                   byte  pane.botrow,59  ; YX
0152 76E0 A018                   data  outparm1,rambuf
     76E2 A100     
0153 76E4 30                     byte  48              ; ASCII offset
0154 76E5   20                   byte  32              ; Padding character
0155                       ;------------------------------------------------------
0156                       ; Show comma
0157                       ;------------------------------------------------------
0158 76E6 06A0  32         bl    @putat
     76E8 2442     
0159 76EA 1D40                   byte  pane.botrow,64
0160 76EC 3908                   data  txt.delim
0161                       ;------------------------------------------------------
0162                       ; Show column
0163                       ;------------------------------------------------------
0164 76EE 06A0  32         bl    @film
     76F0 2236     
0165 76F2 A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     76F4 0020     
     76F6 000C     
0166               
0167 76F8 C120  34         mov   @fb.column,tmp0       ; Get column
     76FA A30C     
0168 76FC A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     76FE A310     
0169 7700 0584  14         inc   tmp0                  ; Offset 1
0170 7702 C804  30         mov   tmp0,@waux1           ; Save in temporary
     7704 833C     
0171               
0172 7706 06A0  32         bl    @mknum                ; Convert unsigned number to string
     7708 29A6     
0173 770A 833C                   data  waux1,rambuf
     770C A100     
0174 770E 30                     byte  48              ; ASCII offset
0175 770F   20                   byte  32              ; Fill character
0176               
0177 7710 06A0  32         bl    @trimnum              ; Trim number to the left
     7712 29FE     
0178 7714 A100                   data  rambuf,rambuf+5,32
     7716 A105     
     7718 0020     
0179               
0180 771A 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     771C 0600     
0181 771E D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     7720 A105     
0182               
0183                       ;------------------------------------------------------
0184                       ; Decide if row length is to be shown
0185                       ;------------------------------------------------------
0186 7722 C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     7724 A30C     
0187 7726 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7728 A310     
0188 772A 0584  14         inc   tmp0                  ; /
0189 772C 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     772E A308     
0190 7730 1101  14         jlt   pane.botline.show_linecol.linelen
0191 7732 102E  14         jmp   pane.botline.show_linecol.colstring
0192                                                   ; Yes, skip showing row length
0193                       ;------------------------------------------------------
0194                       ; Add ',' delimiter and length of line to string
0195                       ;------------------------------------------------------
0196               pane.botline.show_linecol.linelen:
0197 7734 C120  34         mov   @fb.column,tmp0       ; \
     7736 A30C     
0198 7738 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     773A A310     
0199 773C 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     773E A107     
0200 7740 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     7742 0009     
0201 7744 1101  14         jlt   !                     ; | column.
0202 7746 0585  14         inc   tmp1                  ; /
0203               
0204 7748 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     774A 2F00     
0205 774C DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0206               
0207 774E C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     7750 833C     
0208               
0209 7752 06A0  32         bl    @mknum
     7754 29A6     
0210 7756 A308                   data  fb.row.length,rambuf
     7758 A100     
0211 775A 30                     byte  48              ; ASCII offset
0212 775B   20                   byte  32              ; Padding character
0213               
0214 775C C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     775E 833C     
0215               
0216 7760 C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     7762 A308     
0217 7764 0284  22         ci    tmp0,10               ; /
     7766 000A     
0218 7768 110C  14         jlt   pane.botline.show_line.1digit
0219                       ;------------------------------------------------------
0220                       ; Assert
0221                       ;------------------------------------------------------
0222 776A 0284  22         ci    tmp0,99
     776C 0063     
0223 776E 1205  14         jle   pane.botline.show_line.2digits
0224                       ;------------------------------------------------------
0225                       ; Show length of line (3 digits)
0226                       ;------------------------------------------------------
0227               pane.botline.show_line.3digits:
0228 7770 0204  20         li    tmp0,rambuf+2
     7772 A102     
0229 7774 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0230 7776 DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0231 7778 1006  14         jmp   pane.botline.show_line.rest
0232                       ;------------------------------------------------------
0233                       ; Show length of line (2 digits)
0234                       ;------------------------------------------------------
0235               pane.botline.show_line.2digits:
0236 777A 0204  20         li    tmp0,rambuf+3
     777C A103     
0237 777E DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0238 7780 1002  14         jmp   pane.botline.show_line.rest
0239                       ;------------------------------------------------------
0240                       ; Show length of line (1 digit)
0241                       ;------------------------------------------------------
0242               pane.botline.show_line.1digit:
0243 7782 0204  20         li    tmp0,rambuf+4
     7784 A104     
0244               pane.botline.show_line.rest:
0245 7786 DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0246 7788 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     778A A100     
0247 778C DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     778E A100     
0248                       ;------------------------------------------------------
0249                       ; Show column string
0250                       ;------------------------------------------------------
0251               pane.botline.show_linecol.colstring:
0252 7790 06A0  32         bl    @putat
     7792 2442     
0253 7794 1D41                   byte pane.botrow,65
0254 7796 A105                   data rambuf+5         ; Show string
0255                       ;------------------------------------------------------
0256                       ; Show lines in buffer unless on last line in file
0257                       ;------------------------------------------------------
0258 7798 C820  54         mov   @fb.row,@parm1
     779A A306     
     779C A006     
0259 779E 06A0  32         bl    @fb.row2line
     77A0 30D2     
0260 77A2 8820  50         c     @edb.lines,@outparm1
     77A4 A504     
     77A6 A018     
0261 77A8 1605  14         jne   pane.botline.show_lines_in_buffer
0262               
0263 77AA 06A0  32         bl    @putat
     77AC 2442     
0264 77AE 1D48                   byte pane.botrow,72
0265 77B0 390A                   data txt.bottom
0266               
0267 77B2 1009  14         jmp   pane.botline.exit
0268                       ;------------------------------------------------------
0269                       ; Show lines in buffer
0270                       ;------------------------------------------------------
0271               pane.botline.show_lines_in_buffer:
0272 77B4 C820  46         mov   @edb.lines,@waux1
     77B6 A504     
     77B8 833C     
0273               
0274 77BA 06A0  32         bl    @putnum
     77BC 2A24     
0275 77BE 1D48                   byte pane.botrow,72   ; YX
0276 77C0 833C                   data waux1,rambuf
     77C2 A100     
0277 77C4 30                     byte 48
0278 77C5   20                   byte 32
0279                       ;------------------------------------------------------
0280                       ; Exit
0281                       ;------------------------------------------------------
0282               pane.botline.exit:
0283 77C6 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     77C8 832A     
0284 77CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0285 77CC C2F9  30         mov   *stack+,r11           ; Pop r11
0286 77CE 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0145                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 77D0 0649  14         dect  stack
0025 77D2 C64B  30         mov   r11,*stack            ; Save return address
0026 77D4 0649  14         dect  stack
0027 77D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 77D8 0649  14         dect  stack
0029 77DA C660  42         mov   @wyx,*stack           ; Push cursor position
     77DC 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 77DE 20A0  32         coc   @wbit10,config
     77E0 200C     
0035 77E2 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 77E4 06A0  32         bl    @putat
     77E6 2442     
0040 77E8 1D4E                   byte pane.botrow,78
0041 77EA 3C4E                   data txt.ws4
0042 77EC 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 77EE 06A0  32         bl    @putat
     77F0 2442     
0048 77F2 1D4E                   byte pane.botrow,78
0049 77F4 3C3C                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 77F6 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     77F8 A702     
0055 77FA 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 77FC C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     77FE A71A     
0061 7800 1343  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 7802 0284  22         ci    tmp0,tv.1timeonly
     7804 00FE     
0066 7806 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 7808 0649  14         dect  stack
0073 780A C660  46         mov   @parm1,*stack         ; Push @parm1
     780C A006     
0074 780E 0649  14         dect  stack
0075 7810 C660  46         mov   @parm2,*stack         ; Push @parm2
     7812 A008     
0076 7814 0649  14         dect  stack
0077 7816 C660  46         mov   @parm3,*stack         ; Push @parm3
     7818 A00A     
0078               
0079 781A 0720  34         seto  @parm1                ; Do not turn screen off
     781C A006     
0080 781E 0720  34         seto  @parm2                ; Skip colorzing marked lines
     7820 A008     
0081 7822 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7824 A00A     
0082               
0083 7826 06A0  32         bl    @pane.action.colorscheme.load
     7828 71FE     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 782A C839  50         mov   *stack+,@parm3        ; Pop @parm3
     782C A00A     
0092 782E C839  50         mov   *stack+,@parm2        ; Pop @parm2
     7830 A008     
0093 7832 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7834 A006     
0094               
0095 7836 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7838 A71A     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 783A 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     783C 7A0E     
0101 783E 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     7840 A71A     
0102 7842 1022  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7844 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7846 A318     
0107 7848 130E  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109                       ;------------------------------------------------------
0110                       ; Dump frame buffer to VDP
0111                       ;------------------------------------------------------
0112               pane.vdpdump.dump:
0113 784A C820  54         mov   @fb.scrrows,@parm1    ; Number of lines to dump
     784C A31C     
     784E A006     
0114               
0115 7850 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     7852 7AA2     
0116                                                   ; \ i  @parm1 = number of lines to dump
0117                                                   ; /
0118                       ;------------------------------------------------------
0119                       ; Color the lines in the framebuffer (TAT)
0120                       ;------------------------------------------------------
0121 7854 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7856 A312     
0122 7858 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0123               
0124                       ; Colorize marked block if set (M1/M2)
0125               
0126 785A 06A0  32         bl    @fb.colorlines        ; Colorize lines
     785C 7A98     
0127                                                   ; \ i  @parm1       = Force refresh if >ffff
0128                                                   ; / i  @fb.colorize = Colorize if >ffff
0129                       ;-------------------------------------------------------
0130                       ; Finished with frame buffer
0131                       ;-------------------------------------------------------
0132               pane.vdpdump.dumped:
0133 785E 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     7860 A318     
0134 7862 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     7864 A31A     
0135                       ;-------------------------------------------------------
0136                       ; Refresh top and bottom line
0137                       ;-------------------------------------------------------
0138               pane.vdpdump.statlines:
0139 7866 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     7868 A31A     
0140 786A 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0141               
0142 786C 06A0  32         bl    @pane.topline         ; Draw top line
     786E 74BC     
0143 7870 06A0  32         bl    @pane.botline         ; Draw bottom line
     7872 7630     
0144 7874 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     7876 A31A     
0145                       ;------------------------------------------------------
0146                       ; Show ruler with tab positions
0147                       ;------------------------------------------------------
0148 7878 C120  34         mov   @tv.ruler.visible,tmp0
     787A A210     
0149                                                   ; Should ruler be visible?
0150 787C 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0151               
0152 787E 06A0  32         bl    @cpym2v
     7880 2486     
0153 7882 0050                   data vdp.fb.toprow.sit
0154 7884 A320                   data fb.ruler.sit
0155 7886 0050                   data 80               ; Show ruler
0156                       ;------------------------------------------------------
0157                       ; Exit task
0158                       ;------------------------------------------------------
0159               pane.vdpdump.exit:
0160 7888 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     788A 832A     
0161 788C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0162 788E C2F9  30         mov   *stack+,r11           ; Pop r11
0163 7890 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0146                       ;-----------------------------------------------------------------------
0147                       ; Stubs
0148                       ;-----------------------------------------------------------------------
0149                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 7892 0649  14         dect  stack
0010 7894 C64B  30         mov   r11,*stack            ; Save return address
0011 7896 0649  14         dect  stack
0012 7898 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 789A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     789C 2FCA     
0017 789E 6004                   data bank2.rom        ; | i  p0 = bank address
0018 78A0 7F40                   data vec.1            ; | i  p1 = Vector with target address
0019 78A2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 78A4 C120  34         mov   @outparm1,tmp0
     78A6 A018     
0024 78A8 1304  14         jeq   fm.loadfile.exit
0025               
0026 78AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 78AC C2F9  30         mov   *stack+,r11           ; Pop r11
0028 78AE 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     78B0 7956     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 78B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 78B4 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 78B6 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 78B8 0649  14         dect  stack
0044 78BA C64B  30         mov   r11,*stack            ; Save return address
0045 78BC 0649  14         dect  stack
0046 78BE C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 78C0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78C2 2FCA     
0051 78C4 6004                   data bank2.rom        ; | i  p0 = bank address
0052 78C6 7F42                   data vec.2            ; | i  p1 = Vector with target address
0053 78C8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 78CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 78CC C2F9  30         mov   *stack+,r11           ; Pop r11
0060 78CE 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               **************************************************************
0064               * Stub for "fm.browse.fname.suffix"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.browse.fname.suffix:
0068 78D0 0649  14         dect  stack
0069 78D2 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 78D4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78D6 2FCA     
0074 78D8 6004                   data bank2.rom        ; | i  p0 = bank address
0075 78DA 7F44                   data vec.3            ; | i  p1 = Vector with target address
0076 78DC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 78DE C2F9  30         mov   *stack+,r11           ; Pop r11
0081 78E0 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
0089 78E2 0649  14         dect  stack
0090 78E4 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 78E6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78E8 2FCA     
0095 78EA 6004                   data bank2.rom        ; | i  p0 = bank address
0096 78EC 7F46                   data vec.4            ; | i  p1 = Vector with target address
0097 78EE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 78F0 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 78F2 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
0110 78F4 0649  14         dect  stack
0111 78F6 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 78F8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78FA 2FCA     
0116 78FC 6004                   data bank2.rom        ; | i  p0 = bank address
0117 78FE 7F48                   data vec.5            ; | i  p1 = Vector with target address
0118 7900 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 7902 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 7904 045B  20         b     *r11                  ; Return to caller
0124               
0125               
0126               ***************************************************************
0127               * Stub for dialog "Help"
0128               * bank3 vec.1
0129               ********|*****|*********************|**************************
0130               dialog.help.next:
0131 7906 8820  50         c     @w$0008,@cmdb.dialog.var
     7908 2008     
     790A A71E     
0132 790C 1304  14         jeq   !
0133 790E A820  54         a     @w$0008,@cmdb.dialog.var
     7910 2008     
     7912 A71E     
0134 7914 1002  14         jmp   dialog.help
0135 7916 04E0  34 !       clr   @cmdb.dialog.var
     7918 A71E     
0136               dialog.help:
0137 791A C820  54         mov   @dialog.help.vector,@trmpvector
     791C 7922     
     791E A034     
0138 7920 105E  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 7922 7F40             data  vec.1
0141               
0142               
0143               ***************************************************************
0144               * Stub for dialog "Load file"
0145               * bank3 vec.2
0146               ********|*****|*********************|**************************
0147               dialog.load:
0148 7924 C820  54         mov   @dialog.load.vector,@trmpvector
     7926 792C     
     7928 A034     
0149 792A 1059  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 792C 7F42             data  vec.2
0152               
0153               
0154               ***************************************************************
0155               * Stub for dialog "Save file"
0156               * bank3 vec.3
0157               ********|*****|*********************|**************************
0158               dialog.save:
0159 792E C820  54         mov   @dialog.save.vector,@trmpvector
     7930 7936     
     7932 A034     
0160 7934 1054  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 7936 7F44             data  vec.3
0163               
0164               
0165               ***************************************************************
0166               * Stub for dialog "Insert file at line"
0167               * bank3 vec.4
0168               ********|*****|*********************|**************************
0169               dialog.insert:
0170 7938 C820  54         mov   @dialog.insert.vector,@trmpvector
     793A 7940     
     793C A034     
0171 793E 104F  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 7940 7F46             data  vec.4
0174               
0175               
0176               ***************************************************************
0177               * Stub for dialog "Print file"
0178               * bank3 vec.5
0179               ********|*****|*********************|**************************
0180               dialog.print:
0181 7942 C820  54         mov   @dialog.print.vector,@trmpvector
     7944 794A     
     7946 A034     
0182 7948 104A  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 794A 7F48             data  vec.5
0185               
0186               
0187               ***************************************************************
0188               * Stub for dialog "File"
0189               * bank3 vec.6
0190               ********|*****|*********************|**************************
0191               dialog.file:
0192 794C C820  54         mov   @dialog.file.vector,@trmpvector
     794E 7954     
     7950 A034     
0193 7952 1045  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 7954 7F4A             data  vec.6
0196               
0197               
0198               ***************************************************************
0199               * Stub for dialog "Unsaved Changes"
0200               * bank3 vec.7
0201               ********|*****|*********************|**************************
0202               dialog.unsaved:
0203 7956 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     7958 A728     
0204 795A C820  54         mov   @dialog.unsaved.vector,@trmpvector
     795C 7962     
     795E A034     
0205 7960 103E  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 7962 7F4C             data  vec.7
0208               
0209               
0210               ***************************************************************
0211               * Stub for dialog "Copy clipboard to line ..."
0212               * bank3 vec.8
0213               ********|*****|*********************|**************************
0214               dialog.clipboard:
0215 7964 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     7966 796C     
     7968 A034     
0216 796A 1039  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 796C 7F4E             data  vec.8
0219               
0220               
0221               ***************************************************************
0222               * Stub for dialog "Configure clipboard device"
0223               * bank3 vec.9
0224               ********|*****|*********************|**************************
0225               dialog.clipdev:
0226 796E C820  54         mov   @dialog.clipdev.vector,@trmpvector
     7970 7976     
     7972 A034     
0227 7974 1034  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 7976 7F50             data  vec.9
0230               
0231               
0232               ***************************************************************
0233               * Stub for dialog "Configure"
0234               * bank3 vec.10
0235               ********|*****|*********************|**************************
0236               dialog.config:
0237 7978 C820  54         mov   @dialog.config.vector,@trmpvector
     797A 7980     
     797C A034     
0238 797E 102F  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 7980 7F52             data  vec.10
0241               
0242               
0243               ***************************************************************
0244               * Stub for dialog "Append file"
0245               * bank3 vec.11
0246               ********|*****|*********************|**************************
0247               dialog.append:
0248 7982 C820  54         mov   @dialog.append.vector,@trmpvector
     7984 798A     
     7986 A034     
0249 7988 102A  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 798A 7F54             data  vec.11
0252               
0253               
0254               ***************************************************************
0255               * Stub for dialog "Cartridge"
0256               * bank3 vec.12
0257               ********|*****|*********************|**************************
0258               dialog.cartridge:
0259 798C C820  54         mov   @dialog.cartridge.vector,@trmpvector
     798E 7994     
     7990 A034     
0260 7992 1025  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 7994 7F56             data  vec.12
0263               
0264               
0265               ***************************************************************
0266               * Stub for dialog "Basic"
0267               * bank3 vec.13
0268               ********|*****|*********************|**************************
0269               dialog.basic:
0270 7996 C820  54         mov   @dialog.basic.vector,@trmpvector
     7998 799E     
     799A A034     
0271 799C 1020  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 799E 7F58             data  vec.13
0274               
0275               
0276               ***************************************************************
0277               * Stub for dialog "Shortcuts"
0278               * bank3 vec.14
0279               ********|*****|*********************|**************************
0280               dialog.shortcuts:
0281 79A0 C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     79A2 79A8     
     79A4 A034     
0282 79A6 101B  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 79A8 7F5A             data  vec.14
0285               
0286               
0287               ***************************************************************
0288               * Stub for dialog "Go to line"
0289               * bank3 vec.16
0290               ********|*****|*********************|**************************
0291               dialog.goto:
0292 79AA C820  54         mov   @dialog.goto.vector,@trmpvector
     79AC 79B2     
     79AE A034     
0293 79B0 1016  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.goto.vector:
0295 79B2 7F5E             data  vec.16
0296               
0297               
0298               ***************************************************************
0299               * Stub for dialog "Configure font"
0300               * bank3 vec.17
0301               ********|*****|*********************|**************************
0302               dialog.font:
0303 79B4 C820  54         mov   @dialog.font.vector,@trmpvector
     79B6 79BC     
     79B8 A034     
0304 79BA 1011  14         jmp   _trampoline.bank3     ; Show dialog
0305               dialog.font.vector:
0306 79BC 7F60             data  vec.17
0307               
0308               
0309               ***************************************************************
0310               * Stub for dialog "Configure Master Catalog"
0311               * bank3 vec.18
0312               ********|*****|*********************|**************************
0313               dialog.cfg.mc:
0314 79BE C820  54         mov   @dialog.cfg.mc.vector,@trmpvector
     79C0 79C6     
     79C2 A034     
0315 79C4 100C  14         jmp   _trampoline.bank3     ; Show dialog
0316               dialog.cfg.mc.vector:
0317 79C6 7F62             data  vec.18
0318               
0319               
0320               ***************************************************************
0321               * Stub for dialog "Main Menu"
0322               * bank3 vec.30
0323               ********|*****|*********************|**************************
0324               dialog.menu:
0325                       ;------------------------------------------------------
0326                       ; Check if block mode is active
0327                       ;------------------------------------------------------
0328 79C8 C120  34         mov   @edb.block.m2,tmp0    ; \
     79CA A510     
0329 79CC 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0330                                                   ; /
0331 79CE 1302  14         jeq   !                     ; Block mode inactive, show dialog
0332                       ;------------------------------------------------------
0333                       ; Special treatment for block mode
0334                       ;------------------------------------------------------
0335 79D0 0460  28         b     @edkey.action.block.reset
     79D2 69DA     
0336                                                   ; Reset block mode
0337                       ;------------------------------------------------------
0338                       ; Show dialog
0339                       ;------------------------------------------------------
0340 79D4 C820  54 !       mov   @dialog.menu.vector,@trmpvector
     79D6 79DC     
     79D8 A034     
0341 79DA 1001  14         jmp   _trampoline.bank3     ; Show dialog
0342               dialog.menu.vector:
0343 79DC 7F7A             data  vec.30
0344               
0345               
0346               
0347               ***************************************************************
0348               * Trampoline 1 (bank 3, dialog)
0349               ********|*****|*********************|**************************
0350               _trampoline.bank3:
0351 79DE 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     79E0 7434     
0352                       ;------------------------------------------------------
0353                       ; Call routine in specified bank
0354                       ;------------------------------------------------------
0355 79E2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79E4 2FCA     
0356 79E6 6006                   data bank3.rom        ; | i  p0 = bank address
0357 79E8 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0358                                                   ; |         (deref @trmpvector)
0359 79EA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363 79EC 0460  28         b     @edkey.action.cmdb.show
     79EE 6B9E     
0364                                                   ; Show dialog in CMDB pane
0365               
0366               
0367               
0368               
0369               ***************************************************************
0370               * Stub for "pane.show_hintx"
0371               * bank3 vec.19
0372               ********|*****|*********************|**************************
0373               pane.show_hintx:
0374 79F0 C820  54         mov   @pane.show_hintx.vector,@trmpvector
     79F2 79F8     
     79F4 A034     
0375 79F6 1042  14         jmp   _trampoline.bank3.ret ; Longjump
0376               pane.show_hintx.vector:
0377 79F8 7F64             data  vec.19
0378               
0379               
0380               ***************************************************************
0381               * Stub for "pane.cmdb.show"
0382               * bank3 vec.20
0383               ********|*****|*********************|**************************
0384               pane.cmdb.show:
0385 79FA C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     79FC 7A02     
     79FE A034     
0386 7A00 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0387               pane.cmdb.show.vector:
0388 7A02 7F66             data  vec.20
0389               
0390               
0391               ***************************************************************
0392               * Stub for "pane.cmdb.hide"
0393               * bank3 vec.21
0394               ********|*****|*********************|**************************
0395               pane.cmdb.hide:
0396 7A04 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7A06 7A0C     
     7A08 A034     
0397 7A0A 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0398               pane.cmdb.hide.vector:
0399 7A0C 7F68             data  vec.21
0400               
0401               
0402               ***************************************************************
0403               * Stub for "pane.cmdb.draw"
0404               * bank3 vec.22
0405               ********|*****|*********************|**************************
0406               pane.cmdb.draw:
0407 7A0E C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7A10 7A16     
     7A12 A034     
0408 7A14 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0409               pane.cmdb.draw.vector:
0410 7A16 7F6A             data  vec.22
0411               
0412               
0413               ***************************************************************
0414               * Stub for "cmdb.refresh"
0415               * bank3 vec.24
0416               ********|*****|*********************|**************************
0417               cmdb.refresh:
0418 7A18 C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7A1A 7A20     
     7A1C A034     
0419 7A1E 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0420               cmdb.refresh.vector:
0421 7A20 7F6E             data  vec.24
0422               
0423               
0424               ***************************************************************
0425               * Stub for "cmdb.cmd.clear"
0426               * bank3 vec.25
0427               ********|*****|*********************|**************************
0428               cmdb.cmd.clear:
0429 7A22 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7A24 7A2A     
     7A26 A034     
0430 7A28 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0431               cmdb.cmd.clear.vector:
0432 7A2A 7F70             data  vec.25
0433               
0434               
0435               ***************************************************************
0436               * Stub for "cmdb.cmdb.getlength"
0437               * bank3 vec.26
0438               ********|*****|*********************|**************************
0439               cmdb.cmd.getlength:
0440 7A2C C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7A2E 7A34     
     7A30 A034     
0441 7A32 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0442               cmdb.cmd.getlength.vector:
0443 7A34 7F72             data  vec.26
0444               
0445               
0446               ***************************************************************
0447               * Stub for "cmdb.cmdb.preset"
0448               * bank3 vec.27
0449               ********|*****|*********************|**************************
0450               cmdb.cmd.preset:
0451 7A36 C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7A38 7A3E     
     7A3A A034     
0452 7A3C 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0453               cmdb.cmd.preset.vector:
0454 7A3E 7F74             data  vec.27
0455               
0456               
0457               ***************************************************************
0458               * Stub for "cmdb.cmdb.set"
0459               * bank3 vec.28
0460               ********|*****|*********************|**************************
0461               cmdb.cmd.set:
0462 7A40 C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     7A42 7A48     
     7A44 A034     
0463 7A46 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0464               cmdb.cmd.set.vector:
0465 7A48 7F76             data  vec.28
0466               
0467               
0468               
0469               ***************************************************************
0470               * Stub for "dialog.hearts.tat"
0471               * bank3 vec.29
0472               ********|*****|*********************|**************************
0473               dialog.hearts.tat:
0474 7A4A C820  54         mov   @dialog.hearts.tat.vector,@trmpvector
     7A4C 7A52     
     7A4E A034     
0475 7A50 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0476               dialog.hearts.tat.vector:
0477 7A52 7F78             data  vec.29
0478               
0479               
0480               
0481               **************************************************************
0482               * Stub for "tibasic.am.toggle"
0483               * bank3 vec.31
0484               ********|*****|*********************|**************************
0485               tibasic.am.toggle:
0486 7A54 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     7A56 7A5C     
     7A58 A034     
0487 7A5A 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0488               tibasic.am.toggle.vector:
0489 7A5C 7F7C             data  vec.31
0490               
0491               
0492               **************************************************************
0493               * Stub for "fm.fastmode"
0494               * bank3 vec.32
0495               ********|*****|*********************|**************************
0496               fm.fastmode:
0497 7A5E C820  54         mov   @fm.fastmode.vector,@trmpvector
     7A60 7A66     
     7A62 A034     
0498 7A64 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0499               fm.fastmode.vector:
0500 7A66 7F7E             data  vec.32
0501               
0502               
0503               **************************************************************
0504               * Stub for "cmdb.cfg.fname"
0505               * bank3 vec.33
0506               ********|*****|*********************|**************************
0507               cmdb.cfg.fname:
0508 7A68 C820  54         mov   @cmdb.cfg.fname.vector,@trmpvector
     7A6A 7A70     
     7A6C A034     
0509 7A6E 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0510               cmdb.cfg.fname.vector:
0511 7A70 7F80             data  vec.33
0512               
0513               
0514               ***************************************************************
0515               * Stub for "error.display"
0516               * bank3 vec.48
0517               ********|*****|*********************|**************************
0518               error.display:
0519 7A72 C820  54         mov   @error.display.vector,@trmpvector
     7A74 7A7A     
     7A76 A034     
0520 7A78 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0521               error.display.vector:
0522 7A7A 7F9E             data  vec.48
0523               
0524               
0525               
0526               ***************************************************************
0527               * Trampoline bank 3 with return
0528               ********|*****|*********************|**************************
0529               _trampoline.bank3.ret:
0530 7A7C 0649  14         dect  stack
0531 7A7E C64B  30         mov   r11,*stack            ; Save return address
0532                       ;------------------------------------------------------
0533                       ; Call routine in specified bank
0534                       ;------------------------------------------------------
0535 7A80 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7A82 2FCA     
0536 7A84 6006                   data bank3.rom        ; | i  p0 = bank address
0537 7A86 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0538                                                   ; |         (deref @trmpvector)
0539 7A88 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0540                       ;------------------------------------------------------
0541                       ; Exit
0542                       ;------------------------------------------------------
0543 7A8A C2F9  30         mov   *stack+,r11           ; Pop r11
0544 7A8C 045B  20         b     *r11                  ; Return to caller
0545               
0546               
0547               **************************************************************
0548               * Stub for "fb.ruler.init"
0549               * bank4 vec.2
0550               ********|*****|*********************|**************************
0551               fb.ruler.init:
0552 7A8E C820  54         mov   @fb.ruler.init.vector,@trmpvector
     7A90 7A96     
     7A92 A034     
0553 7A94 103D  14         jmp   _trampoline.bank4.ret ; Longjump
0554               fb.ruler.init.vector:
0555 7A96 7F42             data  vec.2
0556               
0557               
0558               **************************************************************
0559               * Stub for "fb.colorlines"
0560               * bank4 vec.3
0561               ********|*****|*********************|**************************
0562               fb.colorlines:
0563 7A98 C820  54         mov   @fb.colorlines.vector,@trmpvector
     7A9A 7AA0     
     7A9C A034     
0564 7A9E 1038  14         jmp   _trampoline.bank4.ret ; Longjump
0565               fb.colorlines.vector:
0566 7AA0 7F44             data  vec.3
0567               
0568               
0569               **************************************************************
0570               * Stub for "fb.vdpdump"
0571               * bank4 vec.4
0572               ********|*****|*********************|**************************
0573               fb.vdpdump:
0574 7AA2 C820  54         mov   @fb.vdpdump.vector,@trmpvector
     7AA4 7AAA     
     7AA6 A034     
0575 7AA8 1033  14         jmp   _trampoline.bank4.ret ; Longjump
0576               fb.vdpdump.vector:
0577 7AAA 7F46             data  vec.4
0578               
0579               
0580               **************************************************************
0581               * Stub for "fb.hscroll"
0582               * bank4 vec.6
0583               ********|*****|*********************|**************************
0584               fb.hscroll:
0585 7AAC C820  54         mov   @fb.hscroll.vector,@trmpvector
     7AAE 7AB4     
     7AB0 A034     
0586 7AB2 102E  14         jmp   _trampoline.bank4.ret ; Longjump
0587               fb.hscroll.vector:
0588 7AB4 7F4A             data  vec.6
0589               
0590               
0591               **************************************************************
0592               * Stub for "fb.restore"
0593               * bank4 vec.7
0594               ********|*****|*********************|**************************
0595               fb.restore:
0596 7AB6 C820  54         mov   @fb.restore.vector,@trmpvector
     7AB8 7ABE     
     7ABA A034     
0597 7ABC 1029  14         jmp   _trampoline.bank4.ret ; Longjump
0598               fb.restore.vector:
0599 7ABE 7F4C             data  vec.7
0600               
0601               
0602               **************************************************************
0603               * Stub for "fb.refresh"
0604               * bank4 vec.8
0605               ********|*****|*********************|**************************
0606               fb.refresh:
0607 7AC0 C820  54         mov   @fb.refresh.vector,@trmpvector
     7AC2 7AC8     
     7AC4 A034     
0608 7AC6 1024  14         jmp   _trampoline.bank4.ret ; Longjump
0609               fb.refresh.vector:
0610 7AC8 7F4E             data  vec.8
0611               
0612               
0613               **************************************************************
0614               * Stub for "fb.get.nonblank"
0615               * bank4 vec.9
0616               ********|*****|*********************|**************************
0617               fb.get.nonblank:
0618 7ACA C820  54         mov   @fb.get.nonblank.vector,@trmpvector
     7ACC 7AD2     
     7ACE A034     
0619 7AD0 101F  14         jmp   _trampoline.bank4.ret ; Longjump
0620               fb.get.nonblank.vector:
0621 7AD2 7F50             data  vec.9
0622               
0623               
0624               **************************************************************
0625               * Stub for "fb.tab.prev"
0626               * bank4 vec.10
0627               ********|*****|*********************|**************************
0628               fb.tab.prev:
0629 7AD4 C820  54         mov   @fb.tab.prev.vector,@trmpvector
     7AD6 7ADC     
     7AD8 A034     
0630 7ADA 101A  14         jmp   _trampoline.bank4.ret ; Longjump
0631               fb.tab.prev.vector:
0632 7ADC 7F52             data  vec.10
0633               
0634               
0635               **************************************************************
0636               * Stub for "fb.tab.next"
0637               * bank4 vec.11
0638               ********|*****|*********************|**************************
0639               fb.tab.next:
0640 7ADE C820  54         mov   @fb.tab.next.vector,@trmpvector
     7AE0 7AE6     
     7AE2 A034     
0641 7AE4 1015  14         jmp   _trampoline.bank4.ret ; Longjump
0642               fb.tab.next.vector:
0643 7AE6 7F54             data  vec.11
0644               
0645               
0646               **************************************************************
0647               * Stub for "fb.cursor.up"
0648               * bank4 vec.12
0649               ********|*****|*********************|**************************
0650               fb.cursor.up:
0651 7AE8 C820  54         mov   @fb.cursor.up.vector,@trmpvector
     7AEA 7AF0     
     7AEC A034     
0652 7AEE 1010  14         jmp   _trampoline.bank4.ret ; Longjump
0653               fb.cursor.up.vector:
0654 7AF0 7F56             data  vec.12
0655               
0656               
0657               **************************************************************
0658               * Stub for "fb.cursor.down"
0659               * bank4 vec.13
0660               ********|*****|*********************|**************************
0661               fb.cursor.down:
0662 7AF2 C820  54         mov   @fb.cursor.down.vector,@trmpvector
     7AF4 7AFA     
     7AF6 A034     
0663 7AF8 100B  14         jmp   _trampoline.bank4.ret ; Longjump
0664               fb.cursor.down.vector:
0665 7AFA 7F58             data  vec.13
0666               
0667               
0668               **************************************************************
0669               * Stub for "fb.cursor.home"
0670               * bank4 vec.14
0671               ********|*****|*********************|**************************
0672               fb.cursor.home:
0673 7AFC C820  54         mov   @fb.cursor.home.vector,@trmpvector
     7AFE 7B04     
     7B00 A034     
0674 7B02 1006  14         jmp   _trampoline.bank4.ret ; Longjump
0675               fb.cursor.home.vector:
0676 7B04 7F5A             data  vec.14
0677               
0678               
0679               **************************************************************
0680               * Stub for "fb.insert.line"
0681               * bank4 vec.15
0682               ********|*****|*********************|**************************
0683               fb.insert.line:
0684 7B06 C820  54         mov   @fb.insert.line.vector,@trmpvector
     7B08 7B0E     
     7B0A A034     
0685 7B0C 1001  14         jmp   _trampoline.bank4.ret ; Longjump
0686               fb.insert.line.vector:
0687 7B0E 7F5C             data  vec.15
0688               
0689               
0690               ***************************************************************
0691               * Trampoline bank 4 with return
0692               ********|*****|*********************|**************************
0693               _trampoline.bank4.ret:
0694 7B10 0649  14         dect  stack
0695 7B12 C64B  30         mov   r11,*stack            ; Save return address
0696                       ;------------------------------------------------------
0697                       ; Call routine in specified bank
0698                       ;------------------------------------------------------
0699 7B14 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B16 2FCA     
0700 7B18 6008                   data bank4.rom        ; | i  p0 = bank address
0701 7B1A FFFF                   data >ffff            ; | i  p1 = Vector with target address
0702                                                   ; |         (deref @trmpvector)
0703 7B1C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0704                       ;------------------------------------------------------
0705                       ; Exit
0706                       ;------------------------------------------------------
0707 7B1E C2F9  30         mov   *stack+,r11           ; Pop r11
0708 7B20 045B  20         b     *r11                  ; Return to caller
0709               
0710               
0711               
0712               **************************************************************
0713               * Stub for "edb.clear.sams"
0714               * bank5 vec.1
0715               ********|*****|*********************|**************************
0716               edb.clear.sams:
0717 7B22 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7B24 7B2A     
     7B26 A034     
0718 7B28 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0719               edb.clear.sams.vector:
0720 7B2A 7F40             data  vec.1
0721               
0722               
0723               **************************************************************
0724               * Stub for "edb.block.mark"
0725               * bank5 vec.3
0726               ********|*****|*********************|**************************
0727               edb.block.mark:
0728 7B2C C820  54         mov   @edb.block.mark.vector,@trmpvector
     7B2E 7B34     
     7B30 A034     
0729 7B32 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0730               edb.block.mark.vector:
0731 7B34 7F44             data  vec.3
0732               
0733               
0734               **************************************************************
0735               * Stub for "edb.block.mark.m1"
0736               * bank5 vec.4
0737               ********|*****|*********************|**************************
0738               edb.block.mark.m1:
0739 7B36 C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7B38 7B3E     
     7B3A A034     
0740 7B3C 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0741               edb.block.mark.m1.vector:
0742 7B3E 7F46             data  vec.4
0743               
0744               
0745               **************************************************************
0746               * Stub for "edb.block.mark.m2"
0747               * bank5 vec.5
0748               ********|*****|*********************|**************************
0749               edb.block.mark.m2:
0750 7B40 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7B42 7B48     
     7B44 A034     
0751 7B46 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0752               edb.block.mark.m2.vector:
0753 7B48 7F48             data  vec.5
0754               
0755               
0756               **************************************************************
0757               * Stub for "edb.block.clip"
0758               * bank5 vec.6
0759               ********|*****|*********************|**************************
0760               edb.block.clip:
0761 7B4A C820  54         mov   @edb.block.clip.vector,@trmpvector
     7B4C 7B52     
     7B4E A034     
0762 7B50 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0763               edb.block.clip.vector:
0764 7B52 7F4A             data  vec.6
0765               
0766               
0767               **************************************************************
0768               * Stub for "edb.block.reset"
0769               * bank5 vec.7
0770               ********|*****|*********************|**************************
0771               edb.block.reset:
0772 7B54 C820  54         mov   @edb.block.reset.vector,@trmpvector
     7B56 7B5C     
     7B58 A034     
0773 7B5A 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0774               edb.block.reset.vector:
0775 7B5C 7F4C             data  vec.7
0776               
0777               
0778               **************************************************************
0779               * Stub for "edb.block.delete"
0780               * bank5 vec.8
0781               ********|*****|*********************|**************************
0782               edb.block.delete:
0783 7B5E C820  54         mov   @edb.block.delete.vector,@trmpvector
     7B60 7B66     
     7B62 A034     
0784 7B64 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0785               edb.block.delete.vector:
0786 7B66 7F4E             data  vec.8
0787               
0788               
0789               **************************************************************
0790               * Stub for "edb.block.copy"
0791               * bank5 vec.9
0792               ********|*****|*********************|**************************
0793               edb.block.copy:
0794 7B68 C820  54         mov   @edb.block.copy.vector,@trmpvector
     7B6A 7B70     
     7B6C A034     
0795 7B6E 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0796               edb.block.copy.vector:
0797 7B70 7F50             data  vec.9
0798               
0799               
0800               **************************************************************
0801               * Stub for "edb.line.del"
0802               * bank5 vec.10
0803               ********|*****|*********************|**************************
0804               edb.line.del:
0805 7B72 C820  54         mov   @edb.line.del.vector,@trmpvector
     7B74 7B7A     
     7B76 A034     
0806 7B78 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0807               edb.line.del.vector:
0808 7B7A 7F52             data  vec.10
0809               
0810               
0811               
0812               ***************************************************************
0813               * Trampoline bank 5 with return
0814               ********|*****|*********************|**************************
0815               _trampoline.bank5.ret:
0816 7B7C 0649  14         dect  stack
0817 7B7E C64B  30         mov   r11,*stack            ; Save return address
0818                       ;------------------------------------------------------
0819                       ; Call routine in specified bank
0820                       ;------------------------------------------------------
0821 7B80 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B82 2FCA     
0822 7B84 600A                   data bank5.rom        ; | i  p0 = bank address
0823 7B86 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0824                                                   ; |         (deref @trmpvector)
0825 7B88 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0826                       ;------------------------------------------------------
0827                       ; Exit
0828                       ;------------------------------------------------------
0829 7B8A C2F9  30         mov   *stack+,r11           ; Pop r11
0830 7B8C 045B  20         b     *r11                  ; Return to caller
0831               
0832               
0833               ***************************************************************
0834               * Stub for "vdp.dump.patterns"
0835               * bank6 vec.1
0836               ********|*****|*********************|**************************
0837               vdp.dump.patterns:
0838 7B8E C820  54         mov   @vdp.dump.patterns.vector,@trmpvector
     7B90 7B96     
     7B92 A034     
0839 7B94 100B  14         jmp   _trampoline.bank6.ret ; Longjump
0840               vdp.dump.patterns.vector:
0841 7B96 7F40             data  vec.1
0842               
0843               
0844               ***************************************************************
0845               * Stub for "vdp.dump.font"
0846               * bank6 vec.2
0847               ********|*****|*********************|**************************
0848               vdp.dump.font:
0849 7B98 C820  54         mov   @vdp.dump.font.vector,@trmpvector
     7B9A 7BA0     
     7B9C A034     
0850 7B9E 1006  14         jmp   _trampoline.bank6.ret ; Longjump
0851               vdp.dump.font.vector:
0852 7BA0 7F42             data  vec.2
0853               
0854               
0855               ***************************************************************
0856               * Stub for "tv.set.font"
0857               * bank6 vec.3
0858               ********|*****|*********************|**************************
0859               tv.set.font:
0860 7BA2 C820  54         mov   @tv.set.font.vector,@trmpvector
     7BA4 7BAA     
     7BA6 A034     
0861 7BA8 1001  14         jmp   _trampoline.bank6.ret ; Longjump
0862               tv.set.font.vector:
0863 7BAA 7F44             data  vec.3
0864               
0865               
0866               ***************************************************************
0867               * Trampoline bank 6 with return
0868               ********|*****|*********************|**************************
0869               _trampoline.bank6.ret:
0870 7BAC 0649  14         dect  stack
0871 7BAE C64B  30         mov   r11,*stack            ; Save return address
0872                       ;------------------------------------------------------
0873                       ; Call routine in specified bank
0874                       ;------------------------------------------------------
0875 7BB0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BB2 2FCA     
0876 7BB4 600C                   data bank6.rom        ; | i  p0 = bank address
0877 7BB6 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0878                                                   ; |         (deref @trmpvector)
0879 7BB8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0880                       ;------------------------------------------------------
0881                       ; Exit
0882                       ;------------------------------------------------------
0883 7BBA C2F9  30         mov   *stack+,r11           ; Pop r11
0884 7BBC 045B  20         b     *r11                  ; Return to caller
0885               
0886               
0887               ***************************************************************
0888               * Stub for "tibasic"
0889               * bank7 vec.10
0890               ********|*****|*********************|**************************
0891               tibasic1:
0892 7BBE C820  54         mov   @const.1,@tib.session
     7BC0 2002     
     7BC2 A0B4     
0893 7BC4 100F  14         jmp   tibasic
0894               tibasic2:
0895 7BC6 C820  54         mov   @const.2,@tib.session
     7BC8 2004     
     7BCA A0B4     
0896 7BCC 100B  14         jmp   tibasic
0897               tibasic3:
0898 7BCE C820  54         mov   @const.3,@tib.session
     7BD0 38FC     
     7BD2 A0B4     
0899 7BD4 1007  14         jmp   tibasic
0900               tibasic4:
0901 7BD6 C820  54         mov   @const.4,@tib.session
     7BD8 2006     
     7BDA A0B4     
0902 7BDC 1003  14         jmp   tibasic
0903               tibasic5:
0904 7BDE C820  54         mov   @const.5,@tib.session
     7BE0 38FE     
     7BE2 A0B4     
0905               tibasic:
0906 7BE4 0649  14         dect  stack
0907 7BE6 C64B  30         mov   r11,*stack            ; Save return address
0908 7BE8 0649  14         dect  stack
0909 7BEA C644  30         mov   tmp0,*stack           ; Push tmp0
0910                       ;------------------------------------------------------
0911                       ; Exit early if no TI Basic session
0912                       ;------------------------------------------------------
0913 7BEC C120  34         mov   @tib.session,tmp0     ; Get session ID
     7BEE A0B4     
0914 7BF0 130A  14         jeq   tibasic.exit          ; Exit early if no session
0915                       ;------------------------------------------------------
0916                       ; Run TI Basic session
0917                       ;------------------------------------------------------
0918 7BF2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BF4 2FCA     
0919 7BF6 600E                   data bank7.rom        ; | i  p0 = bank address
0920 7BF8 7F52                   data vec.10           ; | i  p1 = Vector with target address
0921 7BFA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0922               
0923 7BFC C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     7BFE A0C0     
0924 7C00 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
0925               
0926 7C02 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7C04 7C10     
0927                       ;------------------------------------------------------
0928                       ; Exit
0929                       ;------------------------------------------------------
0930               tibasic.exit:
0931 7C06 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7C08 A31A     
0932 7C0A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0933 7C0C C2F9  30         mov   *stack+,r11           ; Pop r11
0934 7C0E 045B  20         b     *r11                  ; Return to caller
0935               
0936               
0937               
0938               ***************************************************************
0939               * Stub for "tibasic.uncrunch"
0940               * bank7 vec.11
0941               ********|*****|*********************|**************************
0942               tibasic.uncrunch:
0943 7C10 0649  14         dect  stack
0944 7C12 C64B  30         mov   r11,*stack            ; Save return address
0945                       ;------------------------------------------------------
0946                       ; Uncrunch TI basic program
0947                       ;------------------------------------------------------
0948 7C14 C820  54         mov   @tib.session,@parm1   ; Get current session
     7C16 A0B4     
     7C18 A006     
0949 7C1A 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
0950               
0951 7C1C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C1E 2FCA     
0952 7C20 600E                   data bank7.rom        ; | i  p0 = bank address
0953 7C22 7F54                   data vec.11           ; | i  p1 = Vector with target address
0954 7C24 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0955                       ;------------------------------------------------------
0956                       ; Exit
0957                       ;------------------------------------------------------
0958               tibasic.uncrunch.exit:
0959 7C26 C2F9  30         mov   *stack+,r11           ; Pop r11
0960 7C28 045B  20         b     *r11                  ; Return to caller
0961               
0962               
0963               
0964               ***************************************************************
0965               * Stub for "fg99.run"
0966               ********|*****|*********************|**************************
0967               fg99.run.xbgem:
0968 7C2A 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7C2C 3DF6     
0969 7C2E C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C30 A232     
0970 7C32 100F  14         jmp   fg99.run.stub
0971               
0972               fg99.run.rxb:
0973 7C34 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7C36 3E0A     
0974 7C38 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C3A A232     
0975 7C3C 100A  14         jmp   fg99.run.stub
0976               
0977               fg99.run.fcmd:
0978 7C3E 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     7C40 3DE2     
0979 7C42 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7C44 A232     
0980 7C46 1005  14         jmp   fg99.run.stub
0981               
0982               fg99.run.fbforth:
0983 7C48 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7C4A 3E1E     
0984 7C4C C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     7C4E A232     
0985 7C50 1000  14         jmp   fg99.run.stub
0986               
0987               fg99.run.stub:
0988 7C52 0649  14         dect  stack
0989 7C54 C64B  30         mov   r11,*stack            ; Save return address
0990                       ;------------------------------------------------------
0991                       ; Run FinalGROM cartridge image
0992                       ;------------------------------------------------------
0993 7C56 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7C58 376E     
0994                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
0995                                                   ; /
0996                       ;------------------------------------------------------
0997                       ; Exit
0998                       ;------------------------------------------------------
0999               fg99.run.stub.exit:
1000 7C5A C2F9  30         mov   *stack+,r11           ; Pop r11
1001 7C5C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0150                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 7C5E 0649  14         dect  stack
0035 7C60 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7C62 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C64 2FCA     
0040 7C66 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7C68 7F40                   data vec.1            ; | i  p1 = Vector with target address
0042 7C6A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7C6C C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7C6E 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 7C70 0649  14         dect  stack
0058 7C72 C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7C74 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C76 2FCA     
0063 7C78 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7C7A 7F42                   data vec.2            ; | i  p1 = Vector with target address
0065 7C7C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7C7E C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7C80 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7C82 0649  14         dect  stack
0081 7C84 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7C86 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C88 2FCA     
0086 7C8A 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7C8C 7F44                   data vec.3            ; | i  p1 = Vector with target address
0088 7C8E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7C90 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7C92 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 7C94 0649  14         dect  stack
0104 7C96 C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7C98 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C9A 2FCA     
0109 7C9C 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7C9E 7F66                   data vec.20           ; | i  p1 = Vector with target address
0111 7CA0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 7CA2 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 7CA4 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 7CA6 0649  14         dect  stack
0127 7CA8 C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7CAA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CAC 2FCA     
0132 7CAE 600E                   data bank7.rom        ; | i  p0 = bank address
0133 7CB0 7F68                   data vec.21           ; | i  p1 = Vector with target address
0134 7CB2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 7CB4 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7CB6 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 7CB8 0649  14         dect  stack
0150 7CBA C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7CBC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CBE 2FCA     
0155 7CC0 600E                   data bank7.rom        ; | i  p0 = bank address
0156 7CC2 7F6A                   data vec.22           ; | i  p1 = Vector with target address
0157 7CC4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7CC6 C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7CC8 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0151                       ;-----------------------------------------------------------------------
0152                       ; Program data
0153                       ;-----------------------------------------------------------------------
0154                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 7CCA 0D00             byte  key.enter, pane.focus.fb
0012 7CCC 6772             data  edkey.action.enter
0013               
0014 7CCE 0800             byte  key.fctn.s, pane.focus.fb
0015 7CD0 625A             data  edkey.action.left
0016               
0017 7CD2 0900             byte  key.fctn.d, pane.focus.fb
0018 7CD4 6274             data  edkey.action.right
0019               
0020 7CD6 0B00             byte  key.fctn.e, pane.focus.fb
0021 7CD8 63D8             data  edkey.action.up
0022               
0023 7CDA 0A00             byte  key.fctn.x, pane.focus.fb
0024 7CDC 63E0             data  edkey.action.down
0025               
0026 7CDE BF00             byte  key.fctn.h, pane.focus.fb
0027 7CE0 6290             data  edkey.action.home
0028               
0029 7CE2 C000             byte  key.fctn.j, pane.focus.fb
0030 7CE4 62BA             data  edkey.action.pword
0031               
0032 7CE6 C100             byte  key.fctn.k, pane.focus.fb
0033 7CE8 630C             data  edkey.action.nword
0034               
0035 7CEA C200             byte  key.fctn.l, pane.focus.fb
0036 7CEC 6298             data  edkey.action.end
0037               
0038 7CEE 0200             byte  key.fctn.4, pane.focus.fb
0039 7CF0 642A             data  edkey.action.npage
0040               
0041 7CF2 0E00             byte  key.fctn.5, pane.focus.fb
0042 7CF4 63A0             data  edkey.action.scroll.right
0043               
0044 7CF6 0C00             byte  key.fctn.6, pane.focus.fb
0045 7CF8 63E8             data  edkey.action.ppage
0046               
0047 7CFA B700             byte  key.ctrl.7, pane.focus.fb
0048 7CFC 6AA0             data  edkey.action.fb.tab.prev
0049               
0050 7CFE 0100             byte  key.fctn.7, pane.focus.fb
0051 7D00 6AAE             data  edkey.action.fb.tab.next
0052               
0053 7D02 8500             byte  key.ctrl.e, pane.focus.fb
0054 7D04 63E8             data  edkey.action.ppage
0055               
0056 7D06 8700             byte  key.ctrl.g, pane.focus.fb
0057 7D08 79AA             data  dialog.goto
0058               
0059 7D0A 9800             byte  key.ctrl.x, pane.focus.fb
0060 7D0C 642A             data  edkey.action.npage
0061               
0062 7D0E 7F00             byte  key.fctn.v, pane.focus.fb
0063 7D10 648A             data  edkey.action.topscr
0064               
0065 7D12 BE00             byte  key.fctn.b, pane.focus.fb
0066 7D14 64DC             data  edkey.action.botscr
0067               
0068 7D16 9600             byte  key.ctrl.v, pane.focus.fb
0069 7D18 646A             data  edkey.action.top
0070               
0071 7D1A 8200             byte  key.ctrl.b, pane.focus.fb
0072 7D1C 64A8             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 7D1E 0300             byte  key.fctn.1, pane.focus.fb
0077 7D20 65A0             data  edkey.action.del_char
0078               
0079 7D22 0700             byte  key.fctn.3, pane.focus.fb
0080 7D24 6652             data  edkey.action.del_line
0081               
0082 7D26 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7D28 661E             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7D2A 0400             byte  key.fctn.2, pane.focus.fb
0088 7D2C 66B4             data  edkey.action.ins_char.ws
0089               
0090 7D2E B900             byte  key.fctn.dot, pane.focus.fb
0091 7D30 67FE             data  edkey.action.ins_onoff
0092               
0093 7D32 0600             byte  key.fctn.8, pane.focus.fb
0094 7D34 675A             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7D36 F000             byte  key.ctrl.space, pane.focus.fb
0099 7D38 69C2             data  edkey.action.block.mark
0100               
0101 7D3A 8300             byte  key.ctrl.c, pane.focus.fb
0102 7D3C 68C6             data  edkey.action.copyblock_or_clipboard
0103               
0104 7D3E 8400             byte  key.ctrl.d, pane.focus.fb
0105 7D40 6A22             data  edkey.action.block.delete
0106               
0107 7D42 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7D44 6A50             data  edkey.action.block.move
0109               
0110 7D46 8700             byte  key.ctrl.g, pane.focus.fb
0111 7D48 6A86             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7D4A B100             byte  key.ctrl.1, pane.focus.fb
0116 7D4C 6ABC             data  edkey.action.fb.clip.save.1
0117               
0118 7D4E B200             byte  key.ctrl.2, pane.focus.fb
0119 7D50 6AC6             data  edkey.action.fb.clip.save.2
0120               
0121 7D52 B300             byte  key.ctrl.3, pane.focus.fb
0122 7D54 6AD0             data  edkey.action.fb.clip.save.3
0123                       ;-------------------------------------------------------
0124                       ; Other action keys
0125                       ;-------------------------------------------------------
0126 7D56 0500             byte  key.fctn.plus, pane.focus.fb
0127 7D58 68B8             data  edkey.action.quit
0128               
0129 7D5A B500             byte  key.ctrl.5, pane.focus.fb
0130 7D5C 636C             data  edkey.action.scroll.left
0131               
0132 7D5E 9100             byte  key.ctrl.q, pane.focus.fb
0133 7D60 68B8             data  edkey.action.quit
0134               
0135 7D62 9200             byte  key.ctrl.r, pane.focus.fb
0136 7D64 6878             data  edkey.action.toggle.ruler
0137               
0138 7D66 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7D68 71A0             data  pane.action.colorscheme.cycle
0140               
0141 7D6A 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7D6C 68D6             data  edkey.action.fb.fname.dec.load
0143               
0144 7D6E 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 7D70 68E8             data  edkey.action.fb.fname.inc.load
0146               
0147 7D72 BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7D74 7996             data  dialog.basic
0149               
0150 7D76 BC00             byte  key.fctn.0, pane.focus.fb
0151 7D78 7BE4             data  tibasic
0152               
0153 7D7A B000             byte  key.ctrl.0, pane.focus.fb
0154 7D7C 69AE             data  edkey.action.fb.load.mc
0155                       ;-------------------------------------------------------
0156                       ; Dialog keys
0157                       ;-------------------------------------------------------
0158 7D7E 8100             byte  key.ctrl.a, pane.focus.fb
0159 7D80 7982             data  dialog.append
0160               
0161 7D82 8800             byte  key.ctrl.h, pane.focus.fb
0162 7D84 791A             data  dialog.help
0163               
0164 7D86 8600             byte  key.ctrl.f, pane.focus.fb
0165 7D88 794C             data  dialog.file
0166               
0167 7D8A 8900             byte  key.ctrl.i, pane.focus.fb
0168 7D8C 7938             data  dialog.insert
0169               
0170 7D8E 9300             byte  key.ctrl.s, pane.focus.fb
0171 7D90 792E             data  dialog.save
0172               
0173 7D92 8F00             byte  key.ctrl.o, pane.focus.fb
0174 7D94 7924             data  dialog.load
0175               
0176 7D96 9500             byte  key.ctrl.u, pane.focus.fb
0177 7D98 79A0             data  dialog.shortcuts
0178               
0179 7D9A 9000             byte  key.ctrl.p, pane.focus.fb
0180 7D9C 7942             data  dialog.print
0181               
0182                       ;
0183                       ; FCTN-9 has multiple purposes, if block mode is on
0184                       ; reset block, otherwise show dialog "Main Menu".
0185                       ;
0186 7D9E 0F00             byte  key.fctn.9, pane.focus.fb
0187 7DA0 79C8             data  dialog.menu
0188                       ;-------------------------------------------------------
0189                       ; End of list
0190                       ;-------------------------------------------------------
0191 7DA2 FFFF             data  EOL                           ; EOL
0192               
0193               
0194               *---------------------------------------------------------------
0195               * Action keys mapping table: Command Buffer (CMDB)
0196               *---------------------------------------------------------------
0197               keymap_actions.cmdb:
0198                       ;-------------------------------------------------------
0199                       ; Dialog: Main Menu
0200                       ;-------------------------------------------------------
0201 7DA4 4664             byte  key.uc.f, id.dialog.menu
0202 7DA6 794C             data  dialog.file
0203               
0204 7DA8 4264             byte  key.uc.b, id.dialog.menu
0205 7DAA 7996             data  dialog.basic
0206               
0207 7DAC 4364             byte  key.uc.c, id.dialog.menu
0208 7DAE 798C             data  dialog.cartridge
0209               
0210 7DB0 4F64             byte  key.uc.o, id.dialog.menu
0211 7DB2 7978             data  dialog.config
0212               
0213 7DB4 5364             byte  key.uc.s, id.dialog.menu
0214 7DB6 79A0             data  dialog.shortcuts
0215               
0216 7DB8 4864             byte  key.uc.h, id.dialog.menu
0217 7DBA 791A             data  dialog.help
0218               
0219 7DBC 5164             byte  key.uc.q, id.dialog.menu
0220 7DBE 68B8             data  edkey.action.quit
0221               
0222 7DC0 0F64             byte  key.fctn.9, id.dialog.menu
0223 7DC2 6F22             data  edkey.action.cmdb.close.dialog
0224                       ;-------------------------------------------------------
0225                       ; Dialog: File
0226                       ;-------------------------------------------------------
0227 7DC4 4E69             byte  key.uc.n, id.dialog.file
0228 7DC6 6BF8             data  edkey.action.cmdb.file.new
0229               
0230 7DC8 5369             byte  key.uc.s, id.dialog.file
0231 7DCA 792E             data  dialog.save
0232               
0233 7DCC 4F69             byte  key.uc.o, id.dialog.file
0234 7DCE 7924             data  dialog.load
0235               
0236 7DD0 4969             byte  key.uc.i, id.dialog.file
0237 7DD2 7938             data  dialog.insert
0238               
0239 7DD4 4169             byte  key.uc.a, id.dialog.file
0240 7DD6 7982             data  dialog.append
0241               
0242 7DD8 5069             byte  key.uc.p, id.dialog.file
0243 7DDA 7942             data  dialog.print
0244                       ;-------------------------------------------------------
0245                       ; Dialog: Open file
0246                       ;-------------------------------------------------------
0247 7DDC 0E0A             byte  key.fctn.5, id.dialog.load
0248 7DDE 6EEC             data  edkey.action.cmdb.fastmode.toggle
0249               
0250 7DE0 0D0A             byte  key.enter, id.dialog.load
0251 7DE2 6C1E             data  edkey.action.cmdb.load
0252                       ;-------------------------------------------------------
0253                       ; Dialog: Insert file at line ...
0254                       ;-------------------------------------------------------
0255 7DE4 0E0D             byte  key.fctn.5, id.dialog.insert
0256 7DE6 6EEC             data  edkey.action.cmdb.fastmode.toggle
0257               
0258 7DE8 0D0D             byte  key.enter, id.dialog.insert
0259 7DEA 6C78             data  edkey.action.cmdb.insert
0260                       ;-------------------------------------------------------
0261                       ; Dialog: Append file
0262                       ;-------------------------------------------------------
0263 7DEC 0E0E             byte  key.fctn.5, id.dialog.append
0264 7DEE 6EEC             data  edkey.action.cmdb.fastmode.toggle
0265               
0266 7DF0 0D0E             byte  key.enter, id.dialog.append
0267 7DF2 6CFE             data  edkey.action.cmdb.append
0268                       ;-------------------------------------------------------
0269                       ; Dialog: Copy clipboard to line ...
0270                       ;-------------------------------------------------------
0271 7DF4 0E67             byte  key.fctn.5, id.dialog.clipboard
0272 7DF6 6EEC             data  edkey.action.cmdb.fastmode.toggle
0273               
0274 7DF8 0167             byte  key.fctn.7, id.dialog.clipboard
0275 7DFA 796E             data  dialog.clipdev
0276               
0277 7DFC 3167             byte  key.num.1, id.dialog.clipboard
0278 7DFE 6D76             data  edkey.action.cmdb.clip.1
0279               
0280 7E00 3267             byte  key.num.2, id.dialog.clipboard
0281 7E02 6D7C             data  edkey.action.cmdb.clip.2
0282               
0283 7E04 3367             byte  key.num.3, id.dialog.clipboard
0284 7E06 6D82             data  edkey.action.cmdb.clip.3
0285               
0286 7E08 3467             byte  key.num.4, id.dialog.clipboard
0287 7E0A 6D88             data  edkey.action.cmdb.clip.4
0288               
0289 7E0C 3567             byte  key.num.5, id.dialog.clipboard
0290 7E0E 6D8E             data  edkey.action.cmdb.clip.5
0291                       ;-------------------------------------------------------
0292                       ; Dialog: Configure
0293                       ;-------------------------------------------------------
0294 7E10 436C             byte  key.uc.c, id.dialog.cfg
0295 7E12 796E             data  dialog.clipdev
0296               
0297 7E14 466C             byte  key.uc.f, id.dialog.cfg
0298 7E16 79B4             data  dialog.font
0299               
0300 7E18 4D6C             byte  key.uc.m, id.dialog.cfg
0301 7E1A 79BE             data  dialog.cfg.mc
0302                       ;-------------------------------------------------------
0303                       ; Dialog: Configure clipboard
0304                       ;-------------------------------------------------------
0305 7E1C 0D11             byte  key.enter, id.dialog.cfg.clip
0306 7E1E 6BB0             data  edkey.action.cmdb.cfg.clip
0307                       ;-------------------------------------------------------
0308                       ; Dialog: Configure font
0309                       ;-------------------------------------------------------
0310 7E20 316E             byte  key.num.1, id.dialog.font
0311 7E22 6FB8             data  edkey.action.cmdb.font1
0312               
0313 7E24 326E             byte  key.num.2, id.dialog.font
0314 7E26 6FBC             data  edkey.action.cmdb.font2
0315               
0316 7E28 336E             byte  key.num.3, id.dialog.font
0317 7E2A 6FC2             data  edkey.action.cmdb.font3
0318               
0319 7E2C 346E             byte  key.num.4, id.dialog.font
0320 7E2E 6FC8             data  edkey.action.cmdb.font4
0321               
0322 7E30 356E             byte  key.num.5, id.dialog.font
0323 7E32 6FCE             data  edkey.action.cmdb.font5
0324                       ;-------------------------------------------------------
0325                       ; Dialog: Configure Master Catalog
0326                       ;-------------------------------------------------------
0327 7E34 0D12             byte  key.enter, id.dialog.cfg.mc
0328 7E36 6BD4             data  edkey.action.cmdb.cfg.mc
0329                       ;-------------------------------------------------------
0330                       ; Dialog: Save file
0331                       ;-------------------------------------------------------
0332 7E38 0D0B             byte  key.enter, id.dialog.save
0333 7E3A 6DC2             data  edkey.action.cmdb.save
0334               
0335 7E3C 0D0C             byte  key.enter, id.dialog.saveblock
0336 7E3E 6DC2             data  edkey.action.cmdb.save
0337                       ;-------------------------------------------------------
0338                       ; Dialog: Print file
0339                       ;-------------------------------------------------------
0340 7E40 0D0F             byte  key.enter, id.dialog.print
0341 7E42 6E42             data  edkey.action.cmdb.print
0342               
0343 7E44 0D10             byte  key.enter, id.dialog.printblock
0344 7E46 6E42             data  edkey.action.cmdb.print
0345                       ;-------------------------------------------------------
0346                       ; Dialog: Unsaved changes
0347                       ;-------------------------------------------------------
0348 7E48 0C65             byte  key.fctn.6, id.dialog.unsaved
0349 7E4A 6EC2             data  edkey.action.cmdb.proceed
0350               
0351 7E4C 2065             byte  key.space, id.dialog.unsaved
0352 7E4E 6EC2             data  edkey.action.cmdb.proceed
0353               
0354 7E50 0D65             byte  key.enter, id.dialog.unsaved
0355 7E52 792E             data  dialog.save
0356                       ;-------------------------------------------------------
0357                       ; Dialog: Cartridge
0358                       ;-------------------------------------------------------
0359 7E54 586A             byte  key.uc.x, id.dialog.cartridge
0360 7E56 7C2A             data  fg99.run.xbgem
0361               
0362 7E58 526A             byte  key.uc.r, id.dialog.cartridge
0363 7E5A 7C34             data  fg99.run.rxb
0364               
0365 7E5C 436A             byte  key.uc.c, id.dialog.cartridge
0366 7E5E 7C3E             data  fg99.run.fcmd
0367               
0368 7E60 466A             byte  key.uc.f, id.dialog.cartridge
0369 7E62 7C48             data  fg99.run.fbforth
0370                       ;-------------------------------------------------------
0371                       ; Dialog: Basic
0372                       ;-------------------------------------------------------
0373 7E64 316B             byte  key.num.1, id.dialog.basic
0374 7E66 7BBE             data  tibasic1
0375               
0376 7E68 326B             byte  key.num.2, id.dialog.basic
0377 7E6A 7BC6             data  tibasic2
0378               
0379 7E6C 336B             byte  key.num.3, id.dialog.basic
0380 7E6E 7BCE             data  tibasic3
0381               
0382 7E70 346B             byte  key.num.4, id.dialog.basic
0383 7E72 7BD6             data  tibasic4
0384               
0385 7E74 356B             byte  key.num.5, id.dialog.basic
0386 7E76 7BDE             data  tibasic5
0387               
0388 7E78 0E6B             byte  key.fctn.5, id.dialog.basic
0389 7E7A 6EF8             data  edkey.action.cmdb.am.toggle
0390               
0391 7E7C 206B             byte  key.space, id.dialog.basic
0392 7E7E 7C10             data  tibasic.uncrunch
0393                       ;-------------------------------------------------------
0394                       ; Dialog: Shortcuts
0395                       ;-------------------------------------------------------
0396 7E80 436F             byte  key.uc.c, id.dialog.shortcuts
0397 7E82 71A0             data  pane.action.colorscheme.cycle
0398               
0399 7E84 526F             byte  key.uc.r, id.dialog.shortcuts
0400 7E86 6878             data  edkey.action.toggle.ruler
0401               
0402 7E88 416F             byte  key.uc.a, id.dialog.shortcuts
0403 7E8A 6F2A             data  edkey.action.cmdb.autoinsert
0404               
0405 7E8C 316F             byte  key.num.1, id.dialog.shortcuts
0406 7E8E 69CA             data  edkey.action.block.m1
0407               
0408 7E90 326F             byte  key.num.2, id.dialog.shortcuts
0409 7E92 69D2             data  edkey.action.block.m2
0410               
0411 7E94 476F             byte  key.uc.g, id.dialog.shortcuts
0412 7E96 79AA             data  dialog.goto
0413               
0414 7E98 4D6F             byte  key.uc.m, id.dialog.shortcuts
0415 7E9A 69AE             data  edkey.action.fb.load.mc
0416                       ;-------------------------------------------------------
0417                       ; Dialog: Goto
0418                       ;-------------------------------------------------------
0419 7E9C 0D13             byte  key.enter, id.dialog.goto
0420 7E9E 6F62             data  edkey.action.cmdb.goto
0421                       ;-------------------------------------------------------
0422                       ; Dialog: Help
0423                       ;-------------------------------------------------------
0424 7EA0 2068             byte  key.space, id.dialog.help
0425 7EA2 7906             data  dialog.help.next
0426               
0427 7EA4 0F68             byte  key.fctn.9, id.dialog.help
0428 7EA6 6F0C             data  edkey.action.cmdb.close.about
0429               
0430 7EA8 0D68             byte  key.enter, id.dialog.help
0431 7EAA 6F0C             data  edkey.action.cmdb.close.about
0432                       ;-------------------------------------------------------
0433                       ; Movement keys
0434                       ;-------------------------------------------------------
0435 7EAC 0801             byte  key.fctn.s, pane.focus.cmdb
0436 7EAE 6AF0             data  edkey.action.cmdb.left
0437               
0438 7EB0 0901             byte  key.fctn.d, pane.focus.cmdb
0439 7EB2 6B02             data  edkey.action.cmdb.right
0440               
0441 7EB4 BF01             byte  key.fctn.h, pane.focus.cmdb
0442 7EB6 6B1A             data  edkey.action.cmdb.home
0443               
0444 7EB8 C201             byte  key.fctn.l, pane.focus.cmdb
0445 7EBA 6B2E             data  edkey.action.cmdb.end
0446                       ;-------------------------------------------------------
0447                       ; Modifier keys
0448                       ;-------------------------------------------------------
0449 7EBC 0701             byte  key.fctn.3, pane.focus.cmdb
0450 7EBE 6B44             data  edkey.action.cmdb.clear
0451                       ;-------------------------------------------------------
0452                       ; Other action keys
0453                       ;-------------------------------------------------------
0454 7EC0 0F01             byte  key.fctn.9, pane.focus.cmdb
0455 7EC2 79C8             data  dialog.menu
0456               
0457 7EC4 0501             byte  key.fctn.plus, pane.focus.cmdb
0458 7EC6 68B8             data  edkey.action.quit
0459               
0460 7EC8 8101             byte  key.ctrl.a, pane.focus.cmdb
0461 7ECA 6F04             data  edkey.action.cmdb.preset
0462               
0463 7ECC 8201             byte  key.ctrl.b, pane.focus.cmdb
0464 7ECE 6F04             data  edkey.action.cmdb.preset
0465               
0466 7ED0 8301             byte  key.ctrl.c, pane.focus.cmdb
0467 7ED2 6F04             data  edkey.action.cmdb.preset
0468               
0469 7ED4 9A01             byte  key.ctrl.z, pane.focus.cmdb
0470 7ED6 71A0             data  pane.action.colorscheme.cycle
0471               
0472 7ED8 B001             byte  key.ctrl.0, pane.focus.cmdb
0473 7EDA 69AE             data  edkey.action.fb.load.mc
0474                       ;------------------------------------------------------
0475                       ; End of list
0476                       ;-------------------------------------------------------
0477 7EDC FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0155                       ;-----------------------------------------------------------------------
0156                       ; Bank full check
0157                       ;-----------------------------------------------------------------------
0161                       ;-----------------------------------------------------------------------
0162                       ; Show ROM bank in CPU crash screen
0163                       ;-----------------------------------------------------------------------
0164                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F38                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b1.asm
0165                       ;-----------------------------------------------------------------------
0166                       ; Table for VDP modes
0167                       ;-----------------------------------------------------------------------
0168                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equates.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b1.asm
0169                       ;-----------------------------------------------------------------------
0170                       ; Vector table
0171                       ;-----------------------------------------------------------------------
0172                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F38 0552             stri 'ROM#1'
     7F3A 4F4D     
     7F3C 2331     
0009               *--------------------------------------------------------------
0010               * ROM 1: Vectors 1-32
0011               *--------------------------------------------------------------
0012                       aorg  bankx.vectab
0013 7F40 6108     vec.1   data  mem.sams.setup.stevie ;
0014 7F42 2026     vec.2   data  cpu.crash             ;
0015 7F44 2026     vec.3   data  cpu.crash             ;
0016 7F46 2026     vec.4   data  cpu.crash             ;
0017 7F48 2026     vec.5   data  cpu.crash             ;
0018 7F4A 2026     vec.6   data  cpu.crash             ;
0019 7F4C 2026     vec.7   data  cpu.crash             ;
0020 7F4E 2026     vec.8   data  cpu.crash             ;
0021 7F50 2026     vec.9   data  cpu.crash             ;
0022 7F52 6FF4     vec.10  data  edb.line.pack.fb      ;
0023 7F54 70EC     vec.11  data  edb.line.unpack.fb    ;
0024 7F56 7B22     vec.12  data  edb.clear.sams        ;
0025 7F58 2026     vec.13  data  cpu.crash             ;
0026 7F5A 2026     vec.14  data  cpu.crash             ;
0027 7F5C 6B9E     vec.15  data  edkey.action.cmdb.show
0028 7F5E 2026     vec.16  data  cpu.crash             ;
0029 7F60 2026     vec.17  data  cpu.crash             ;
0030 7F62 6FE0     vec.18  data  cmdb.dialog.close     ;
0031 7F64 7A22     vec.19  data  cmdb.cmd.clear        ;
0032 7F66 2026     vec.20  data  cpu.crash             ;
0033 7F68 7AA2     vec.21  data  fb.vdpdump            ;
0034 7F6A 30D2     vec.22  data  fb.row2line           ;
0035 7F6C 2026     vec.23  data  cpu.crash             ;
0036 7F6E 2026     vec.24  data  cpu.crash             ;
0037 7F70 2026     vec.25  data  cpu.crash             ;
0038 7F72 2026     vec.26  data  cpu.crash             ;
0039 7F74 75FA     vec.27  data  pane.errline.hide     ;
0040 7F76 7452     vec.28  data  pane.cursor.blink     ;
0041 7F78 7434     vec.29  data  pane.cursor.hide      ;
0042 7F7A 7598     vec.30  data  pane.errline.show     ;
0043 7F7C 71FE     vec.31  data  pane.action.colorscheme.load
0044 7F7E 741A     vec.32  data  pane.action.colorscheme.statlines
0045               *--------------------------------------------------------------
0046               * ROM 1: Vectors 33-64
0047               *--------------------------------------------------------------
0048 7F80 2026     vec.33  data  cpu.crash             ;
0049 7F82 2026     vec.34  data  cpu.crash             ;
0050 7F84 2026     vec.35  data  cpu.crash             ;
0051 7F86 2026     vec.36  data  cpu.crash             ;
0052 7F88 2026     vec.37  data  cpu.crash             ;
0053 7F8A 2026     vec.38  data  cpu.crash             ;
0054 7F8C 2026     vec.39  data  cpu.crash             ;
0055 7F8E 2026     vec.40  data  cpu.crash             ;
0056 7F90 2026     vec.41  data  cpu.crash             ;
0057 7F92 2026     vec.42  data  cpu.crash             ;
0058 7F94 2026     vec.43  data  cpu.crash             ;
0059 7F96 2026     vec.44  data  cpu.crash             ;
0060 7F98 2026     vec.45  data  cpu.crash             ;
0061 7F9A 2026     vec.46  data  cpu.crash             ;
0062 7F9C 2026     vec.47  data  cpu.crash             ;
0063 7F9E 2026     vec.48  data  cpu.crash             ;
0064 7FA0 2026     vec.49  data  cpu.crash             ;
0065 7FA2 2026     vec.50  data  cpu.crash             ;
0066 7FA4 2026     vec.51  data  cpu.crash             ;
0067 7FA6 2026     vec.52  data  cpu.crash             ;
0068 7FA8 2026     vec.53  data  cpu.crash             ;
0069 7FAA 2026     vec.54  data  cpu.crash             ;
0070 7FAC 2026     vec.55  data  cpu.crash             ;
0071 7FAE 2026     vec.56  data  cpu.crash             ;
0072 7FB0 2026     vec.57  data  cpu.crash             ;
0073 7FB2 2026     vec.58  data  cpu.crash             ;
0074 7FB4 2026     vec.59  data  cpu.crash             ;
0075 7FB6 2026     vec.60  data  cpu.crash             ;
0076 7FB8 2026     vec.61  data  cpu.crash             ;
0077 7FBA 2026     vec.62  data  cpu.crash             ;
0078 7FBC 2026     vec.63  data  cpu.crash             ;
0079 7FBE 2026     vec.64  data  cpu.crash             ;
0080               *--------------------------------------------------------------
0081               * ROM 1: Vectors 65-96
0082               *--------------------------------------------------------------
0083 7FC0 2026     vec.65  data  cpu.crash             ;
0084 7FC2 2026     vec.66  data  cpu.crash             ;
0085 7FC4 2026     vec.67  data  cpu.crash             ;
0086 7FC6 2026     vec.68  data  cpu.crash             ;
0087 7FC8 2026     vec.69  data  cpu.crash             ;
0088 7FCA 2026     vec.70  data  cpu.crash             ;
0089 7FCC 2026     vec.71  data  cpu.crash             ;
0090 7FCE 2026     vec.72  data  cpu.crash             ;
0091 7FD0 2026     vec.73  data  cpu.crash             ;
0092 7FD2 2026     vec.74  data  cpu.crash             ;
0093 7FD4 2026     vec.75  data  cpu.crash             ;
0094 7FD6 2026     vec.76  data  cpu.crash             ;
0095 7FD8 2026     vec.77  data  cpu.crash             ;
0096 7FDA 2026     vec.78  data  cpu.crash             ;
0097 7FDC 2026     vec.79  data  cpu.crash             ;
0098 7FDE 2026     vec.80  data  cpu.crash             ;
0099 7FE0 2026     vec.81  data  cpu.crash             ;
0100 7FE2 2026     vec.82  data  cpu.crash             ;
0101 7FE4 2026     vec.83  data  cpu.crash             ;
0102 7FE6 2026     vec.84  data  cpu.crash             ;
0103 7FE8 2026     vec.85  data  cpu.crash             ;
0104 7FEA 2026     vec.86  data  cpu.crash             ;
0105 7FEC 2026     vec.87  data  cpu.crash             ;
0106 7FEE 2026     vec.88  data  cpu.crash             ;
0107 7FF0 2026     vec.89  data  cpu.crash             ;
0108 7FF2 2026     vec.90  data  cpu.crash             ;
0109 7FF4 2026     vec.91  data  cpu.crash             ;
0110 7FF6 2026     vec.92  data  cpu.crash             ;
0111 7FF8 2026     vec.93  data  cpu.crash             ;
0112 7FFA 2026     vec.94  data  cpu.crash             ;
0113 7FFC 2026     vec.95  data  cpu.crash             ;
0114 7FFE 2026     vec.96  data  cpu.crash             ;
                   < stevie_b1.asm
0173                                                   ; Vector table bank 1

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CFG.FNAME...... >7A68 :     
    CMDB.CFG.FNAME.VECTOR >7A70 :     
    CMDB.CMD............ >A72F :     
    CMDB.CMD.CLEAR...... >7A22 :     
    CMDB.CMD.CLEAR.VECTOR >7A2A :     
    CMDB.CMD.GETLENGTH.. >7A2C :     
    CMDB.CMD.GETLENGTH.VECTOR >7A34 :     
    CMDB.CMD.PRESET..... >7A36 :     
    CMDB.CMD.PRESET.VECTOR >7A3E :     
    CMDB.CMD.SET........ >7A40 :     
    CMDB.CMD.SET.VECTOR. >7A48 :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.CLOSE... >6FE0 :     
    CMDB.DIALOG.CLOSE.EXIT >6FF0 :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >325A :     
    CMDB.INIT.EXIT...... >32AE :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.REFRESH........ >7A18 :     
    CMDB.REFRESH.VECTOR. >7A20 :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLORS.LINE.SET..... >7472 :     
    COLORS.LINE.SET.EXIT >74AA :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3906 :     
    CONST.2............. >2004 :     
    CONST.3............. >38FC :     
    CONST.4............. >2006 :     
    CONST.5............. >38FE :     
    CONST.6............. >3900 :     
    CONST.7............. >3902 :     
    CONST.8............. >2008 :     
    CONST.9............. >3904 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F38 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D6D :     
    DEF.CLIP.FNAME.B.... >3D77 :     
    DEF.CLIP.FNAME.C.... >3D81 :     
    DEF.DEVICES......... >3DB2 :     
    DEF.MC.FNAME.A...... >3D8B :     
    DEF.MC.FNAME.B...... >3D98 :     
    DEF.MC.FNAME.C...... >3DA5 :     
    DEF.PRINTER.FNAME... >3D66 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >7982 :     
    DIALOG.APPEND.VECTOR >798A :     
    DIALOG.BASIC........ >7996 :     
    DIALOG.BASIC.VECTOR. >799E :     
    DIALOG.CARTRIDGE.... >798C :     
    DIALOG.CARTRIDGE.VECTOR >7994 :     
    DIALOG.CFG.MC....... >79BE :     
    DIALOG.CFG.MC.VECTOR >79C6 :     
    DIALOG.CLIPBOARD.... >7964 :     
    DIALOG.CLIPBOARD.VECTOR >796C :     
    DIALOG.CLIPDEV...... >796E :     
    DIALOG.CLIPDEV.VECTOR >7976 :     
    DIALOG.CONFIG....... >7978 :     
    DIALOG.CONFIG.VECTOR >7980 :     
    DIALOG.FILE......... >794C :     
    DIALOG.FILE.VECTOR.. >7954 :     
    DIALOG.FONT......... >79B4 :     
    DIALOG.FONT.VECTOR.. >79BC :     
    DIALOG.GOTO......... >79AA :     
    DIALOG.GOTO.VECTOR.. >79B2 :     
    DIALOG.HEARTS.TAT... >7A4A :     
    DIALOG.HEARTS.TAT.VECTOR >7A52 :     
    DIALOG.HELP......... >791A :     
    DIALOG.HELP.NEXT.... >7906 :     
    DIALOG.HELP.VECTOR.. >7922 :     
    DIALOG.INSERT....... >7938 :     
    DIALOG.INSERT.VECTOR >7940 :     
    DIALOG.LOAD......... >7924 :     
    DIALOG.LOAD.VECTOR.. >792C :     
    DIALOG.MENU......... >79C8 :     
    DIALOG.MENU.VECTOR.. >79DC :     
    DIALOG.PRINT........ >7942 :     
    DIALOG.PRINT.VECTOR. >794A :     
    DIALOG.SAVE......... >792E :     
    DIALOG.SAVE.VECTOR.. >7936 :     
    DIALOG.SHORTCUTS.... >79A0 :     
    DIALOG.SHORTCUTS.VECTOR >79A8 :     
    DIALOG.UNSAVED...... >7956 :     
    DIALOG.UNSAVED.VECTOR >7962 :     
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A51E :     
    EDB.BK.FB.TOPLINE... >A51C :     
    EDB.BLOCK.CLIP...... >7B4A :     
    EDB.BLOCK.CLIP.VECTOR >7B52 :     
    EDB.BLOCK.COPY...... >7B68 :     
    EDB.BLOCK.COPY.VECTOR >7B70 :     
    EDB.BLOCK.DELETE.... >7B5E :     
    EDB.BLOCK.DELETE.VECTOR >7B66 :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7B2C :     
    EDB.BLOCK.MARK.M1... >7B36 :     
    EDB.BLOCK.MARK.M1.VECTOR >7B3E :     
    EDB.BLOCK.MARK.M2... >7B40 :     
    EDB.BLOCK.MARK.M2.VECTOR >7B48 :     
    EDB.BLOCK.MARK.VECTOR >7B34 :     
    EDB.BLOCK.RESET..... >7B54 :     
    EDB.BLOCK.RESET.VECTOR >7B5C :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7B22 :     
    EDB.CLEAR.SAMS.VECTOR >7B2A :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A522 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A572 :     
    EDB.HIPAGE.ALLOC.... >3708 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >3714 :     
    EDB.HIPAGE.ALLOC.CRASH >373E :     
    EDB.HIPAGE.ALLOC.EXIT >3746 :     
    EDB.HIPAGE.ALLOC.SETPAGE >3730 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3214 :     
    EDB.INIT.EXIT....... >3254 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7B72 :     
    EDB.LINE.DEL.VECTOR. >7B7A :     
    EDB.LINE.GETLENGTH.. >36A0 :     
    EDB.LINE.GETLENGTH.EXIT >36DC :     
    EDB.LINE.GETLENGTH.NULL >36D8 :     
    EDB.LINE.GETLENGTH2. >36E4 :     
    EDB.LINE.GETLENGTH2.EXIT >3702 :     
    EDB.LINE.MAPPAGE.... >3656 :     
    EDB.LINE.MAPPAGE.EXIT >3698 :     
    EDB.LINE.MAPPAGE.LOOKUP >3670 :     
    EDB.LINE.PACK.FB.... >6FF4 :     
    EDB.LINE.PACK.FB.CHECK80 >7032 :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >7042 :     
    EDB.LINE.PACK.FB.COPYLINE >7098 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >70B2 :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >70AE :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >70A4 :     
    EDB.LINE.PACK.FB.CRASH >703A :     
    EDB.LINE.PACK.FB.EXIT >70E0 :     
    EDB.LINE.PACK.FB.PREPARE >7068 :     
    EDB.LINE.PACK.FB.PREPEXIT >70C6 :     
    EDB.LINE.PACK.FB.RTRIM >704C :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >705E :     
    EDB.LINE.PACK.FB.SCAN >7022 :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >7074 :     
    EDB.LINE.UNPACK.FB.. >70EC :     
    EDB.LINE.UNPACK.FB.CLEAR >714A :     
    EDB.LINE.UNPACK.FB.COPY >717C :     
    EDB.LINE.UNPACK.FB.EXIT >7188 :     
    EDB.LINE.UNPACK.FB.GETLEN >7142 :     
    EDB.LINE.UNPACK.FB.PREPARE >7158 :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A520 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.BLOCK.COPY >69E6 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >6A1C :     
    EDKEY.ACTION.BLOCK.DELETE >6A22 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >6A4C :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >6A86 :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >6A9C :     
    EDKEY.ACTION.BLOCK.M1 >69CA :     
    EDKEY.ACTION.BLOCK.M2 >69D2 :     
    EDKEY.ACTION.BLOCK.MARK >69C2 :     
    EDKEY.ACTION.BLOCK.MOVE >6A50 :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6A82 :     
    EDKEY.ACTION.BLOCK.RESET >69DA :     
    EDKEY.ACTION.BOT.... >64A8 :     
    EDKEY.ACTION.BOT.EXIT >64D8 :     
    EDKEY.ACTION.BOT.REFRESH >64B8 :     
    EDKEY.ACTION.BOTSCR. >64DC :     
    EDKEY.ACTION.BOTSCR.CURSOR >64F0 :     
    EDKEY.ACTION.BOTSCR.EOF >6502 :     
    EDKEY.ACTION.BOTSCR.EXIT >6522 :     
    EDKEY.ACTION.CHAR... >6810 :     
    EDKEY.ACTION.CHAR.EXIT >6874 :     
    EDKEY.ACTION.CHAR.INSERT >6832 :     
    EDKEY.ACTION.CHAR.OVERWRITE >6836 :     
    EDKEY.ACTION.CHAR.OVERWRITE.INCX >685E :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6EF8 :     
    EDKEY.ACTION.CMDB.APPEND >6CFE :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6D68 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6D3C :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6F2A :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6F5A :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6F4C :     
    EDKEY.ACTION.CMDB.CFG.CLIP >6BB0 :     
    EDKEY.ACTION.CMDB.CFG.CLIP.EXIT >6BCC :     
    EDKEY.ACTION.CMDB.CFG.MC >6BD4 :     
    EDKEY.ACTION.CMDB.CFG.MC.EXIT >6BF0 :     
    EDKEY.ACTION.CMDB.CHAR >6B50 :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6B90 :     
    EDKEY.ACTION.CMDB.CLEAR >6B44 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6B4C :     
    EDKEY.ACTION.CMDB.CLIP >6D94 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6D76 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6D7C :     
    EDKEY.ACTION.CMDB.CLIP.3 >6D82 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6D88 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6D8E :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6F0C :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6F22 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6F26 :     
    EDKEY.ACTION.CMDB.END >6B2E :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6EEC :     
    EDKEY.ACTION.CMDB.FILE.NEW >6BF8 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6C16 :     
    EDKEY.ACTION.CMDB.FONT.EXIT >6FDC :     
    EDKEY.ACTION.CMDB.FONT.LOAD >6FD4 :     
    EDKEY.ACTION.CMDB.FONT1 >6FB8 :     
    EDKEY.ACTION.CMDB.FONT2 >6FBC :     
    EDKEY.ACTION.CMDB.FONT3 >6FC2 :     
    EDKEY.ACTION.CMDB.FONT4 >6FC8 :     
    EDKEY.ACTION.CMDB.FONT5 >6FCE :     
    EDKEY.ACTION.CMDB.GOTO >6F62 :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6FB4 :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6FA0 :     
    EDKEY.ACTION.CMDB.GOTO.PREPARE >6F86 :     
    EDKEY.ACTION.CMDB.HIDE >6BA8 :     
    EDKEY.ACTION.CMDB.HOME >6B1A :     
    EDKEY.ACTION.CMDB.INSERT >6C78 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6CF0 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6CB6 :     
    EDKEY.ACTION.CMDB.LEFT >6AF0 :     
    EDKEY.ACTION.CMDB.LOAD >6C1E :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6C74 :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6C64 :     
    EDKEY.ACTION.CMDB.PRESET >6F04 :     
    EDKEY.ACTION.CMDB.PRINT >6E42 :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6E9E :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6EB4 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6EAC :     
    EDKEY.ACTION.CMDB.PROCEED >6EC2 :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6EE8 :     
    EDKEY.ACTION.CMDB.RIGHT >6B02 :     
    EDKEY.ACTION.CMDB.SAVE >6DC2 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6E1E :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6E34 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6E2C :     
    EDKEY.ACTION.CMDB.SHOW >6B9E :     
    EDKEY.ACTION.CMDB.TOGGLE >6B98 :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6BAC :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >68C6 :     
    EDKEY.ACTION.DEL_CHAR >65A0 :     
    EDKEY.ACTION.DEL_CHAR.EXIT >661A :     
    EDKEY.ACTION.DEL_CHAR.LOOP >65F8 :     
    EDKEY.ACTION.DEL_CHAR.PREP >65DE :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >65A8 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >65B2 :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >65D0 :     
    EDKEY.ACTION.DEL_CHAR.SAVE >660E :     
    EDKEY.ACTION.DEL_EOL >661E :     
    EDKEY.ACTION.DEL_EOL.EXIT >664E :     
    EDKEY.ACTION.DEL_EOL_LOOP >663A :     
    EDKEY.ACTION.DEL_LINE >6652 :     
    EDKEY.ACTION.DEL_LINE.DOIT >6680 :     
    EDKEY.ACTION.DEL_LINE.EXIT >66B0 :     
    EDKEY.ACTION.DEL_LINE.REFRESH >6690 :     
    EDKEY.ACTION.DOWN... >63E0 :     
    EDKEY.ACTION.DOWN.EXIT >63E4 :     
    EDKEY.ACTION.END.... >6298 :     
    EDKEY.ACTION.ENTER.. >6772 :     
    EDKEY.ACTION.ENTER.NEWLINE >678A :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >679E :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >6ABC :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >6AC6 :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >6AD0 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >6AE0 :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >68D6 :     
    EDKEY.ACTION.FB.FNAME.DOIT >68FA :     
    EDKEY.ACTION.FB.FNAME.DOIT.EXIT >6922 :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >691A :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >68E8 :     
    EDKEY.ACTION.FB.LOAD.CHECK.MASTCAT >6958 :     
    EDKEY.ACTION.FB.LOAD.FILE >6928 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT1 >697C :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT2 >6996 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT3 >69A0 :     
    EDKEY.ACTION.FB.LOAD.LOADFILE >696E :     
    EDKEY.ACTION.FB.LOAD.MC >69AE :     
    EDKEY.ACTION.FB.TAB.NEXT >6AAE :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >6AB6 :     
    EDKEY.ACTION.FB.TAB.PREV >6AA0 :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >6AA8 :     
    EDKEY.ACTION.GOTO... >657A :     
    EDKEY.ACTION.GOTO.REFRESH >6594 :     
    EDKEY.ACTION.HOME... >6290 :     
    EDKEY.ACTION.INS_CHAR >66BC :     
    EDKEY.ACTION.INS_CHAR.APPEND >6752 :     
    EDKEY.ACTION.INS_CHAR.EXIT >6756 :     
    EDKEY.ACTION.INS_CHAR.LOOP >672E :     
    EDKEY.ACTION.INS_CHAR.PREP >671C :     
    EDKEY.ACTION.INS_CHAR.WS >66B4 :     
    EDKEY.ACTION.INS_LINE >675A :     
    EDKEY.ACTION.INS_LINE.EXIT >6762 :     
    EDKEY.ACTION.INS_LINE_AFTER >6766 :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >676E :     
    EDKEY.ACTION.INS_ONOFF >67FE :     
    EDKEY.ACTION.INS_ONOFF.EXIT >680A :     
    EDKEY.ACTION.LEFT... >625A :     
    EDKEY.ACTION.NEWLINE >67B2 :     
    EDKEY.ACTION.NEWLINE.DOWN >67D6 :     
    EDKEY.ACTION.NEWLINE.EXIT >67FA :     
    EDKEY.ACTION.NEWLINE.REST >67DE :     
    EDKEY.ACTION.NPAGE.. >642A :     
    EDKEY.ACTION.NPAGE.EXIT >6466 :     
    EDKEY.ACTION.NPAGE.REFRESH >6454 :     
    EDKEY.ACTION.NPAGE.SANITY >643E :     
    EDKEY.ACTION.NPAGE.TOPLINE >644E :     
    EDKEY.ACTION.NWORD.. >630C :     
    EDKEY.ACTION.NWORD.EXIT >6364 :     
    EDKEY.ACTION.NWORD_DONE >635C :     
    EDKEY.ACTION.NWORD_MS >6324 :     
    EDKEY.ACTION.NWORD_SCAN >6326 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >6330 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >633E :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >6346 :     
    EDKEY.ACTION.PPAGE.. >63E8 :     
    EDKEY.ACTION.PPAGE.EXIT >6426 :     
    EDKEY.ACTION.PPAGE.REFRESH >6414 :     
    EDKEY.ACTION.PPAGE.SANITY >63FC :     
    EDKEY.ACTION.PPAGE.TOPLINE >640E :     
    EDKEY.ACTION.PWORD.. >62BA :     
    EDKEY.ACTION.PWORD.EXIT >6304 :     
    EDKEY.ACTION.PWORD_DONE >62FC :     
    EDKEY.ACTION.PWORD_SCAN >62CC :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62D2 :     
    EDKEY.ACTION.QUIT... >68B8 :     
    EDKEY.ACTION.RIGHT.. >6274 :     
    EDKEY.ACTION.SCROLL.LEFT >636C :     
    EDKEY.ACTION.SCROLL.RIGHT >63A0 :     
    EDKEY.ACTION.TOGGLE.RULER >6878 :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >68AE :     
    EDKEY.ACTION.TOGGLE.RULER.FB >68AA :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >6888 :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6892 :     
    EDKEY.ACTION.TOP.... >646A :     
    EDKEY.ACTION.TOP.REFRESH >647A :     
    EDKEY.ACTION.TOPSCR. >648A :     
    EDKEY.ACTION.TOPSCR.REFRESH >649A :     
    EDKEY.ACTION.UP..... >63D8 :     
    EDKEY.ACTION.UP.EXIT >63DC :     
    EDKEY.ACTIONS.INS.CHAR.EMPTY_LINE >66C4 :     
    EDKEY.FB.GOTO.LINE.. >6556 :     
    EDKEY.FB.GOTO.ROW... >6550 :     
    EDKEY.FB.GOTO.TOPROW >6528 :     
    EDKEY.KEY.CHECK.NEXT >61CE :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61EE :     
    EDKEY.KEY.CHECK.SCOPE >61F4 :     
    EDKEY.KEY.PROCESS... >616E :     
    EDKEY.KEY.PROCESS.ACTION >620E :     
    EDKEY.KEY.PROCESS.ADDBUFFER >6222 :     
    EDKEY.KEY.PROCESS.CRASH >6240 :     
    EDKEY.KEY.PROCESS.ENTER >6248 :     
    EDKEY.KEY.PROCESS.EXIT >6256 :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61CA :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61C4 :     
    EDKEY.KEY.PROCESS.SPECIAL >618E :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61BE :     
    EDKEY.KEYSCAN.HOOK.. >6126 :     
    EDKEY.KEYSCAN.HOOK.CLEAR >614E :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >6168 :     
    EDKEY.KEYSCAN.HOOK.EXIT >616A :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >7A72 :     
    ERROR.DISPLAY.VECTOR >7A7A :     
    ERRPANE.EXIT........ >32DC :     
    ERRPANE.INIT........ >32B6 :     
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
    fb.calc.pointer..... >30EC :     
    fb.calc.pointer.EXIT >310C :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7A98 :     
    FB.COLORLINES.VECTOR >7AA0 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.DOWN...... >7AF2 :     
    FB.CURSOR.DOWN.VECTOR >7AFA :     
    FB.CURSOR.HOME...... >7AFC :     
    FB.CURSOR.HOME.VECTOR >7B04 :     
    FB.CURSOR.UP........ >7AE8 :     
    FB.CURSOR.UP.VECTOR. >7AF0 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >7ACA :     
    FB.GET.NONBLANK.VECTOR >7AD2 :     
    FB.HSCROLL.......... >7AAC :     
    FB.HSCROLL.VECTOR... >7AB4 :     
    FB.INIT............. >306C :     
    FB.INIT.CONT........ >30A8 :     
    FB.INIT.EXIT........ >30CA :     
    FB.INSERT.LINE...... >7B06 :     
    FB.INSERT.LINE.VECTOR >7B0E :     
    FB.REFRESH.......... >7AC0 :     
    FB.REFRESH.VECTOR... >7AC8 :     
    FB.RESTORE.......... >7AB6 :     
    FB.RESTORE.VECTOR... >7ABE :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30D2 :     
    FB.ROW2LINE.EXIT.... >30E6 :     
    FB.RULER.INIT....... >7A8E :     
    FB.RULER.INIT.VECTOR >7A96 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >7ADE :     
    FB.TAB.NEXT.VECTOR.. >7AE6 :     
    FB.TAB.PREV......... >7AD4 :     
    FB.TAB.PREV.VECTOR.. >7ADC :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >7AA2 :     
    FB.VDPDUMP.VECTOR... >7AAA :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3E1E :     
    FG99.CART.FCMD...... >3DE2 :     
    FG99.CART.RXB....... >3E0A :     
    FG99.CART.XBGEM..... >3DF6 :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >376E :     
    FG99.RUN.FBFORTH.... >7C48 :     
    FG99.RUN.FCMD....... >7C3E :     
    FG99.RUN.RXB........ >7C34 :     
    FG99.RUN.STUB....... >7C52 :     
    FG99.RUN.STUB.EXIT.. >7C5A :     
    FG99.RUN.XBGEM...... >7C2A :     
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.SUFFIX >78D0 :     
    FM.FASTMODE......... >7A5E :     
    FM.FASTMODE.VECTOR.. >7A66 :     
    FM.INSERTFILE....... >78B8 :     
    FM.INSERTFILE.EXIT.. >78CA :     
    FM.LOADFILE......... >7892 :     
    FM.LOADFILE.EXIT.... >78B2 :     
    FM.NEWFILE.......... >78F4 :     
    FM.SAVEFILE......... >78E2 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CFG.MC.... >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >355C :     
    IDX.ENTRY.DELETE.EXIT >35B4 :     
    IDX.ENTRY.DELETE.LASTLINE >3588 :     
    IDX.ENTRY.DELETE.REORG >3590 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >359A :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35AE :     
    IDX.ENTRY.INSERT.... >35FE :     
    IDX.ENTRY.INSERT.EXIT >364A :     
    IDX.ENTRY.INSERT.REORG >361C :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >3626 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >363A :     
    IDX.ENTRY.UPDATE.... >34AE :     
    IDX.ENTRY.UPDATE.CLEAR >34E8 :     
    IDX.ENTRY.UPDATE.EXIT >34F8 :     
    IDX.ENTRY.UPDATE.SAVE >34D6 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3114 :     
    IDX.INIT.EXIT....... >3150 :     
    IDX.POINTER.GET..... >3500 :     
    IDX.POINTER.GET.EXIT >3542 :     
    IDX.POINTER.GET.PARM >3530 :     
    IDX.POINTER.GET.PARM.NULL >353A :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >7DA4 :     
    KEYMAP_ACTIONS.EDITOR >7CCA :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >7CB8 :     
    MAGIC.CLEAR......... >7CA6 :     
    MAGIC.SET........... >7C94 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7C70 :     
    MEM.SAMS.SET.LEGACY. >7C5E :     
    MEM.SAMS.SET.STEVIE. >7C82 :     
    MEM.SAMS.SETUP.STEVIE >6108 :     
    MEM.SAMS.SETUP.STEVIE.EXIT >6122 :     
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3882 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.CHECKCMDB >72CC :     
    PANE.ACTION.COLORSCHEME.CMDBPANE >72FC :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR >73D8 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.CMDB >73E6 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.FB >73EE :     
    PANE.ACTION.COLORSCHEME.CYCLE >71A0 :     
    PANE.ACTION.COLORSCHEME.CYCLE.EXIT >71F8 :     
    PANE.ACTION.COLORSCHEME.ERRPANE >7372 :     
    PANE.ACTION.COLORSCHEME.FBDUMP >72D8 :     
    PANE.ACTION.COLORSCHEME.FBDUMP.NORULER >72C4 :     
    PANE.ACTION.COLORSCHEME.LOAD >71FE :     
    PANE.ACTION.COLORSCHEME.LOAD.EXIT >73FC :     
    PANE.ACTION.COLORSCHEME.RULER >73BA :     
    PANE.ACTION.COLORSCHEME.STATLINE >7384 :     
    PANE.ACTION.COLORSCHEME.STATLINES >741A :     
    PANE.ACTION.COLORSCHEME.STATLINES.EXIT >742E :     
    PANE.ACTION.COLORSCHEME.SWITCH >71BA :     
    PANE.BOTLINE........ >7630 :     
    PANE.BOTLINE.EXIT... >77C6 :     
    PANE.BOTLINE.MC..... >763E :     
    PANE.BOTLINE.NOCHANGE >76C4 :     
    PANE.BOTLINE.SHORTCUTS >7650 :     
    PANE.BOTLINE.SHOW_DIRTY >76B4 :     
    PANE.BOTLINE.SHOW_KEYS >7662 :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >7782 :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >777A :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >7770 :     
    PANE.BOTLINE.SHOW_LINE.REST >7786 :     
    PANE.BOTLINE.SHOW_LINECOL >76CC :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >7790 :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >7734 :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >77B4 :     
    PANE.BOTLINE.SHOW_MODE >768C :     
    PANE.BOTLINE.SHOW_MODE.INSERT >769C :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >76AC :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >7A0E :     
    PANE.CMDB.DRAW.VECTOR >7A16 :     
    PANE.CMDB.HIDE...... >7A04 :     
    PANE.CMDB.HIDE.VECTOR >7A0C :     
    PANE.CMDB.SHOW...... >79FA :     
    PANE.CMDB.SHOW.VECTOR >7A02 :     
    PANE.CURSOR.BLINK... >7452 :     
    PANE.CURSOR.BLINK.EXIT >746E :     
    PANE.CURSOR.HIDE.... >7434 :     
    PANE.CURSOR.HIDE.EXIT >744E :     
    PANE.ERRLINE.DRAWCOLOR >7566 :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >758E :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >7580 :     
    PANE.ERRLINE.HIDE... >75FA :     
    PANE.ERRLINE.HIDE.EXIT >762A :     
    PANE.ERRLINE.HIDE.FBCOLOR >7612 :     
    PANE.ERRLINE.SHOW... >7598 :     
    PANE.ERRLINE.SHOW.EXIT >75F2 :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >79F0 :     
    PANE.SHOW_HINTX.VECTOR >79F8 :     
    PANE.TOPLINE........ >74BC :     
    PANE.TOPLINE.EXIT... >755C :     
    PANE.TOPLINE.FILE... >74CA :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >374E :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3766 :     
    PANE.TOPLINE.SHOWMARKERS >74FA :     
    PANE.VDPDUMP........ >77D0 :     
    PANE.VDPDUMP.ALPHA_LOCK >77DE :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >77EE :     
    PANE.VDPDUMP.CMDB.CHECK >77F6 :     
    PANE.VDPDUMP.CMDB.DRAW >77FC :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >7808 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >783A :     
    PANE.VDPDUMP.DUMP... >784A :     
    PANE.VDPDUMP.DUMPED. >785E :     
    PANE.VDPDUMP.EXIT... >7888 :     
    PANE.VDPDUMP.STATLINES >7866 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FCA :     
    ROM.FARJUMP.BANKSWITCH.CALL >302C :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3024 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >305A :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >3050 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >304C :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3014 :     
    ROM.FARJUMP.EXIT.... >3062 :     
    ROM.FARJUMP.RETURN.. >302E :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3876 :     
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2FA2 :     
    RUNLID.............. >2FB8 :     
    RUNLIE.............. >2FC2 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >386A :     
    TASK.ONESHOT.EXIT... >3872 :     
    TASK.VDP.COPY.SAT... >379A :     
    TASK.VDP.COPY.SAT.CMDB >37C2 :     
    TASK.VDP.COPY.SAT.EXIT >3830 :     
    TASK.VDP.COPY.SAT.FB >37D2 :     
    TASK.VDP.COPY.SAT.FB.NORULER >37E6 :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >381C :     
    TASK.VDP.COPY.SAT.WRITE >37EA :     
    TASK.VDP.COPY.SAT.WRITE2 >3826 :     
    TASK.VDP.CURSOR..... >383C :     
    TASK.VDP.CURSOR.COPY.SAT >3858 :     
    TASK.VDP.CURSOR.EXIT >3862 :     
    TASK.VDP.CURSOR.VISIBLE >3852 :     
    TASK.VDP.PANES...... >7192 :     
    TASK.VDP.PANES.EXIT. >719A :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >7BE4 :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIBASIC.AM.TOGGLE... >7A54 :     
    TIBASIC.AM.TOGGLE.VECTOR >7A5C :     
    TIBASIC.EXIT........ >7C06 :     
    TIBASIC.UNCRUNCH.... >7C10 :     
    TIBASIC.UNCRUNCH.EXIT >7C26 :     
    TIBASIC1............ >7BBE :     
    TIBASIC2............ >7BC6 :     
    TIBASIC3............ >7BCE :     
    TIBASIC4............ >7BD6 :     
    TIBASIC5............ >7BDE :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >3884 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A234 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D4 :     
    TV.INIT............. >32E6 :     
    TV.INIT.EXIT........ >3330 :     
    TV.MARKCOLOR........ >A21A :     
    TV.MC.FNAME......... >DEA0 :     
    TV.PAD.STRING....... >3436 :     
    TV.PAD.STRING.EXIT.. >34A2 :     
    TV.PAD.STRING.LOOP.. >348C :     
    TV.PAD.STRING.PANIC. >349A :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >333A :     
    TV.RESET............ >3348 :     
    TV.RESET.EXIT....... >336E :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SET.FONT......... >7BA2 :     
    TV.SET.FONT.VECTOR.. >7BAA :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.TABS.TABLE.LR.... >38E4 :     
    TV.TABS.TABLE.RL.... >38F0 :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.TOP.............. >A200 :     
    TV.UINT16.MPY....... >3400 :     
    TV.UINT16.PACK...... >3372 :     
    TV.UINT16.PACK.DONE. >33EC :     
    TV.UINT16.PACK.ERROR >33E4 :     
    TV.UINT16.PACK.EXIT. >33F0 :     
    TV.UINT16.PACK.LOOP. >33BA :     
    TV.UINT16.UNPACK.... >340A :     
    TV.UINT16.UNPACK.EXIT >3430 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C3C :     
    TXT.AUTOINS.OFF..... >3A9C :     
    TXT.AUTOINS.ON...... >3A8C :     
    TXT.AUTOINSERT...... >391C :     
    TXT.BLOCK.CLIP...... >39A2 :     
    TXT.BLOCK.COPY...... >3964 :     
    TXT.BLOCK.DEL....... >3950 :     
    TXT.BLOCK.INSIDE.... >3D28 :     
    TXT.BLOCK.MOVE...... >3976 :     
    TXT.BLOCK.PRINT..... >39BC :     
    TXT.BLOCK.SAVE...... >3988 :     
    TXT.BOTTOM.......... >390A :     
    TXT.CLEARMEM........ >39D0 :     
    TXT.CMDB.PROMPT..... >3D56 :     
    TXT.COLORSCHEME..... >3D58 :     
    TXT.DELIM........... >3908 :     
    TXT.DONE.APPEND..... >3A06 :     
    TXT.DONE.CLIPBOARD.. >3A5A :     
    TXT.DONE.CLIPDEV.... >3A6A :     
    TXT.DONE.COPY....... >3A28 :     
    TXT.DONE.DELETE..... >3A48 :     
    TXT.DONE.INSERT..... >39F4 :     
    TXT.DONE.LOAD....... >39E4 :     
    TXT.DONE.MC......... >3A78 :     
    TXT.DONE.PRINT...... >3A38 :     
    TXT.DONE.SAVE....... >3A18 :     
    TXT.FASTMODE........ >3AAC :     
    TXT.FILETYPE.DV80... >3B30 :     
    TXT.FILETYPE.NONE... >3C4E :     
    TXT.INSERT.......... >3916 :     
    TXT.IO.NOFILE....... >3CE2 :     
    TXT.IOERR.LOAD...... >3C9A :     
    TXT.IOERR.PRINT..... >3CC6 :     
    TXT.IOERR.SAVE...... >3CB0 :     
    TXT.KB.............. >3AD4 :     
    TXT.KEYMARKER....... >3C42 :     
    TXT.KEYS.BASIC1..... >3BBE :     
    TXT.KEYS.BLOCK...... >3B88 :     
    TXT.KEYS.DEFAULT.... >3B3E :     
    TXT.KEYS.DEFAULTB... >3B5E :     
    TXT.LINES........... >3AD8 :     
    TXT.LOADING......... >3924 :     
    TXT.M1.............. >3B36 :     
    TXT.M2.............. >3B3A :     
    TXT.MEMFULL.LOAD.... >3CFA :     
    TXT.MSG.MASTCAT..... >3C5A :     
    TXT.NEWFILE......... >3ADE :     
    TXT.OVRWRITE........ >3910 :     
    TXT.PRINTING........ >393C :     
    TXT.RULER........... >3BEC :     
    TXT.SAVING.......... >3930 :     
    TXT.STAR............ >3922 :     
    TXT.TIB1............ >3AEA :     
    TXT.TIB2............ >3AF8 :     
    TXT.TIB3............ >3B06 :     
    TXT.TIB4............ >3B14 :     
    TXT.TIB5............ >3B22 :     
    TXT.UNCRUNCHING..... >3AB8 :     
    TXT.VERTLINE........ >3C40 :     
    TXT.WS1............. >3C44 :     
    TXT.WS2............. >3C46 :     
    TXT.WS3............. >3C4A :     
    TXT.WS4............. >3C4E :     
    TXT.WS5............. >3C54 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.DUMP.FONT....... >7B98 :     
    VDP.DUMP.FONT.VECTOR >7BA0 :     
    VDP.DUMP.PATTERNS... >7B8E :     
    VDP.DUMP.PATTERNS.VECTOR >7B96 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F40 :     
    VEC.10.............. >7F52 :     
    VEC.11.............. >7F54 :     
    VEC.12.............. >7F56 :     
    VEC.13.............. >7F58 :     
    VEC.14.............. >7F5A :     
    VEC.15.............. >7F5C :     
    VEC.16.............. >7F5E :     
    VEC.17.............. >7F60 :     
    VEC.18.............. >7F62 :     
    VEC.19.............. >7F64 :     
    VEC.2............... >7F42 :     
    VEC.20.............. >7F66 :     
    VEC.21.............. >7F68 :     
    VEC.22.............. >7F6A :     
    VEC.23.............. >7F6C :     
    VEC.24.............. >7F6E :     
    VEC.25.............. >7F70 :     
    VEC.26.............. >7F72 :     
    VEC.27.............. >7F74 :     
    VEC.28.............. >7F76 :     
    VEC.29.............. >7F78 :     
    VEC.3............... >7F44 :     
    VEC.30.............. >7F7A :     
    VEC.31.............. >7F7C :     
    VEC.32.............. >7F7E :     
    VEC.33.............. >7F80 :     
    VEC.34.............. >7F82 :     
    VEC.35.............. >7F84 :     
    VEC.36.............. >7F86 :     
    VEC.37.............. >7F88 :     
    VEC.38.............. >7F8A :     
    VEC.39.............. >7F8C :     
    VEC.4............... >7F46 :     
    VEC.40.............. >7F8E :     
    VEC.41.............. >7F90 :     
    VEC.42.............. >7F92 :     
    VEC.43.............. >7F94 :     
    VEC.44.............. >7F96 :     
    VEC.45.............. >7F98 :     
    VEC.46.............. >7F9A :     
    VEC.47.............. >7F9C :     
    VEC.48.............. >7F9E :     
    VEC.49.............. >7FA0 :     
    VEC.5............... >7F48 :     
    VEC.50.............. >7FA2 :     
    VEC.51.............. >7FA4 :     
    VEC.52.............. >7FA6 :     
    VEC.53.............. >7FA8 :     
    VEC.54.............. >7FAA :     
    VEC.55.............. >7FAC :     
    VEC.56.............. >7FAE :     
    VEC.57.............. >7FB0 :     
    VEC.58.............. >7FB2 :     
    VEC.59.............. >7FB4 :     
    VEC.6............... >7F4A :     
    VEC.60.............. >7FB6 :     
    VEC.61.............. >7FB8 :     
    VEC.62.............. >7FBA :     
    VEC.63.............. >7FBC :     
    VEC.64.............. >7FBE :     
    VEC.65.............. >7FC0 :     
    VEC.66.............. >7FC2 :     
    VEC.67.............. >7FC4 :     
    VEC.68.............. >7FC6 :     
    VEC.69.............. >7FC8 :     
    VEC.7............... >7F4C :     
    VEC.70.............. >7FCA :     
    VEC.71.............. >7FCC :     
    VEC.72.............. >7FCE :     
    VEC.73.............. >7FD0 :     
    VEC.74.............. >7FD2 :     
    VEC.75.............. >7FD4 :     
    VEC.76.............. >7FD6 :     
    VEC.77.............. >7FD8 :     
    VEC.78.............. >7FDA :     
    VEC.79.............. >7FDC :     
    VEC.8............... >7F4E :     
    VEC.80.............. >7FDE :     
    VEC.81.............. >7FE0 :     
    VEC.82.............. >7FE2 :     
    VEC.83.............. >7FE4 :     
    VEC.84.............. >7FE6 :     
    VEC.85.............. >7FE8 :     
    VEC.86.............. >7FEA :     
    VEC.87.............. >7FEC :     
    VEC.88.............. >7FEE :     
    VEC.89.............. >7FF0 :     
    VEC.9............... >7F50 :     
    VEC.90.............. >7FF2 :     
    VEC.91.............. >7FF4 :     
    VEC.92.............. >7FF6 :     
    VEC.93.............. >7FF8 :     
    VEC.94.............. >7FFA :     
    VEC.95.............. >7FFC :     
    VEC.96.............. >7FFE :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
    XROM.FARJUMP........ >2FE2 :     
    XROM.FARJUMP.PUSH_RETURN >2FF2 :     
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
    _EDKEY.ACTION.SCROLL >63D0 :     
    _EDKEY.ACTION.SCROLL.EXIT >63D4 :     
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
    _IDX.ENTRY.DELETE.REORG >354C :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3554 :     
    _IDX.ENTRY.INSERT.REORG >35C0 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >35C6 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >35EE :     
    _IDX.SAMS.MAPCOLUMN.OFF >318A :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31B8 :     
    _IDX.SAMS.MAPCOLUMN.ON >3156 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >3180 :     
    _IDX.SAMSPAGE.GET... >31C4 :     
    _IDX.SAMSPAGE.GET.EXIT >320A :     
    _TRAMPOLINE.BANK3... >79DE :     
    _TRAMPOLINE.BANK3.RET >7A7C :     
    _TRAMPOLINE.BANK4.RET >7B10 :     
    _TRAMPOLINE.BANK5.RET >7B7C :     
    _TRAMPOLINE.BANK6.RET >7BAC :     
