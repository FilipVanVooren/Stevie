XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2023 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 230430-2016000
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037      0000     debug                     equ  0       ; Turn on debugging mode
0038               
0039               
0040               *--------------------------------------------------------------
0041               * ROM layout
0042               *--------------------------------------------------------------
0043      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0044      7F10     bankx.vdptab              equ  >7f10   ; VDP mode tables
0045      7F40     bankx.vectab              equ  >7f40   ; Vector table
0046      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       ;-----------------------------------------------------------------------
0028                       ; Equates
0029                       ;-----------------------------------------------------------------------
0030                       copy  "equates.vdp.asm"     ; VDP configuration (F18a/9938/...)
     **** ****     > equates.vdp.asm
0001               * FILE......: equates.vdp.asm
0002               * Purpose...: VDP configuration (F18a, 9938, ...)
0003               
0004               ***************************** F18a 24x80 ***************************************
0008               
0009               ***************************** F18a 24x80 ***************************************
0013               
0014               ***************************** F18a 30x80 ***************************************
0016                   copy 'equates.f18a.3080.asm'        ; Sprite cursor/rulers
     **** ****     > equates.f18a.3080.asm
0001               * FILE......: equates.f18a.3080.asm
0002               * Purpose...: F18a 30x80 mode (with sprite cursor/rulers)
0003               
0005               
0006               *===============================================================================
0007               * VDP RAM F18a (0000-47ff)
0008               *
0009               *     Mem range   Bytes    Hex    Purpose
0010               *     =========   =====   =====   =================================
0011               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0012               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0013               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0014               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0015               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0016               *                                      (Position based colors F18a, 80 colums)
0017               *     2180                        SAT: Sprite Attribute Table
0018               *                                      (Cursor in F18a, 80 cols mode)
0019               *     2800                        SPT: Sprite Pattern Table
0020               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0021               *===============================================================================
0022               
0023               *--------------------------------------------------------------
0024               * Video mode configuration (stevie) - Graphics mode 30x80
0025               *--------------------------------------------------------------
0026      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0027      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0028      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0029      0960     vdp.sit.size              equ  30*80   ; VDP SIT size 80 columns, 30 rows
0030      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0031      0960     vdp.tat.size              equ  30*80   ; VDP TAT size 80 columns, 60 rows
0032      1000     vdp.pdt.base              equ  >1000   ; VDP PDT base address
0033               
0034               *--------------------------------------------------------------
0035               * Video mode configuration (stevie)
0036               *--------------------------------------------------------------
0037      001D     pane.botrow               equ  29      ; Bottom row on screen
0038      0050     colrow                    equ  80      ; Columns per row
0039      0960     fh.vrecbuf                equ  >0960   ; VDP address record buffer
0040      0A60     fh.vpab                   equ  >0a60   ; VDP address PAB
0041      0001     device.f18a               equ  1       ; F18a on
0042      0001     spritecursor              equ  1       ; Use sprites for cursor and ruler
0043               
0044               
0045               *--------------------------------------------------------------
0046               * Video mode configuration (spectra2)
0047               *--------------------------------------------------------------
0048      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0049      0004     spfbck  equ   >04                   ; Screen background color.
0050      7F10     spvmod  equ   bankx.vdptab          ; Video mode.   See VIDTAB for details.
0051      0000     spfont  equ   0                     ; Font to load. See LDFONT for details.
0052               
0053      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0054      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0055      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0056      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table
0057               
                   < equates.vdp.asm
0018               
0019               ***************************** F18a 30x80 ***************************************
                   < stevie_b1.asm
0031                       copy  "equates.asm"         ; Stevie main configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-603f      64       0   Cartridge header
0014               *     6040-7fff    8128       0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-603f      64     1-7   Cartridge header
0018               *     6040-7fef    7744     1-7   Stevie program code
0019               *     7f00-7fff     384     1-7   Vector table (32 vectors)
0020               *===============================================================================
0021               
0022               
0023               ;-----------------------------------------------------------------
0024               ; Stevie Dialog / Pane specific equates
0025               ;-----------------------------------------------------------------
0026      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0027      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0028               ;-----------------------------------------------------------------
0029               ;   Dialog ID's
0030               ;-----------------------------------------------------------------
0031      000A     id.dialog.load            equ  10      ; "Load file"
0032      000B     id.dialog.save            equ  11      ; "Save file"
0033      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0034      000D     id.dialog.insert          equ  13      ; "Insert file"
0035      000E     id.dialog.append          equ  14      ; "Append file"
0036      000F     id.dialog.print           equ  15      ; "Print file"
0037      0010     id.dialog.printblock      equ  16      ; "Print block"
0038      0011     id.dialog.cfg.clip        equ  17      ; "Configure clipboard"
0039      0012     id.dialog.cfg.mc          equ  18      ; "Configure Master Catalog"
0040      0013     id.dialog.goto            equ  19      ; "Goto"
0041               ;-----------------------------------------------------------------
0042               ;   Dialog ID's >= 100 indicate that command prompt should be
0043               ;   hidden and no characters added to CMDB keyboard buffer.
0044               ;-----------------------------------------------------------------
0045      0064     id.dialog.menu            equ  100     ; "Main Menu"
0046      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0047      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0048      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0049      0068     id.dialog.help            equ  104     ; "About"
0050      0069     id.dialog.file            equ  105     ; "File"
0051      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0052      006B     id.dialog.basic           equ  107     ; "TI Basic"
0053      006C     id.dialog.cfg             equ  108     ; "Configure"
0054      006D     id.dialog.editor          equ  109     ; "Configure editor"
0055      006E     id.dialog.font            equ  110     ; "Configure font"
0056      006F     id.dialog.shortcuts       equ  111     ; "Shortcuts"
0057               ;-----------------------------------------------------------------
0058               ; Suffix characters for clipboards
0059               ;-----------------------------------------------------------------
0060      3100     clip1                     equ  >3100   ; '1'
0061      3200     clip2                     equ  >3200   ; '2'
0062      3300     clip3                     equ  >3300   ; '3'
0063      3400     clip4                     equ  >3400   ; '4'
0064      3500     clip5                     equ  >3500   ; '5'
0065               ;-----------------------------------------------------------------
0066               ; Keyboard flags in Stevie
0067               ;-----------------------------------------------------------------
0068      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0069               ;-----------------------------------------------------------------
0070               ; File work mode
0071               ;-----------------------------------------------------------------
0072      0001     id.file.loadfile          equ  1       ; Load file
0073      0002     id.file.insertfile        equ  2       ; Insert file
0074      0003     id.file.appendfile        equ  3       ; Append file
0075      0004     id.file.savefile          equ  4       ; Save file
0076      0005     id.file.saveblock         equ  5       ; Save block to file
0077      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0078      0007     id.file.printfile         equ  7       ; Print file
0079      0008     id.file.printblock        equ  8       ; Print block
0080               ;-----------------------------------------------------------------
0081               ; Special file indicator
0082               ;-----------------------------------------------------------------
0083      0000     id.special.normal         equ  0       ; Normal file
0084      0001     id.special.mastcat        equ  1       ; Master catalog
0085      0002     id.special.readonly       equ  2       ; Read-only file
0086      0003     id.special.basic          equ  3       ; TI Basic program
0087               ;-----------------------------------------------------------------
0088               ; Stevie core 1 RAM                    @>a000-a0ff   (256 bytes)
0089               ;-----------------------------------------------------------------
0090      A000     core1.top         equ  >a000           ; Structure begin
0091      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0092      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0093      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0094      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0095      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0096      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0097      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0098      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0099      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0100      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0101      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0102      A016     parm9             equ  core1.top + 22  ; Function parameter 9
0103      A018     outparm1          equ  core1.top + 24  ; Function output parameter 1
0104      A01A     outparm2          equ  core1.top + 26  ; Function output parameter 2
0105      A01C     outparm3          equ  core1.top + 28  ; Function output parameter 3
0106      A01E     outparm4          equ  core1.top + 30  ; Function output parameter 4
0107      A020     outparm5          equ  core1.top + 32  ; Function output parameter 5
0108      A022     outparm6          equ  core1.top + 34  ; Function output parameter 6
0109      A024     outparm7          equ  core1.top + 36  ; Function output parameter 7
0110      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0111      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0112      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0113      A02C     uint16.unpacked   equ  core1.top + 44  ; Unpacked uint16 (len-prefixed string)
0114      A032     uint16.packed     equ  core1.top + 50  ; Packed uint16 (2 bytes)
0115      A034     trmpvector        equ  core1.top + 52  ; Vector trampoline (if p1|tmp1 = >ffff)
0116      A036     core1.free1       equ  core1.top + 54  ; 54-85 **free**
0117      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0118      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0119                                 ;--------------------------------------------
0120                                 ; TI Basic related
0121                                 ;--------------------------------------------
0122      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0123      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0124      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0125      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0126      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0127      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0128      A0C0     tib.autounpk      equ  core1.top + 192 ; TI-Basic AutoUnpack (uncrunch)
0129      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0130      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0131      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0132      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0133      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0134      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0135      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0136      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0137      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0138      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0139      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0140      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0141      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0142      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0143      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0144      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0145      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0146      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0147      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0148      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0149      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0150      A100     core1.free        equ  core1.top + 256 ; End of structure
0151               ;-----------------------------------------------------------------
0152               ; Stevie core 2 RAM                    @>a100-a1ff   (256 bytes)
0153               ;-----------------------------------------------------------------
0154      A100     core2.top         equ  >a100           ; Structure begin
0155      A100     rambuf            equ  core2.top       ; RAM workbuffer
0156      A200     core2.free        equ  core2.top + 256 ; End of structure
0157               ;-----------------------------------------------------------------
0158               ; Stevie Editor shared structures      @>a200-a2ff   (256 bytes)
0159               ;-----------------------------------------------------------------
0160      A200     tv.struct         equ  >a200           ; Structure begin
0161      A202     tv.sams.3000      equ  tv.struct + 2   ; SAMS page in window >3000-3fff
0162      A200     tv.sams.2000      equ  tv.struct + 0   ; SAMS page in window >2000-2fff
0163      A204     tv.sams.a000      equ  tv.struct + 4   ; SAMS page in window >a000-afff
0164      A206     tv.sams.b000      equ  tv.struct + 6   ; SAMS page in window >b000-bfff
0165      A208     tv.sams.c000      equ  tv.struct + 8   ; SAMS page in window >c000-cfff
0166      A20A     tv.sams.d000      equ  tv.struct + 10  ; SAMS page in window >d000-dfff
0167      A20C     tv.sams.e000      equ  tv.struct + 12  ; SAMS page in window >e000-efff
0168      A20E     tv.sams.f000      equ  tv.struct + 14  ; SAMS page in window >f000-ffff
0169      A210     tv.ruler.visible  equ  tv.struct + 16  ; Show ruler with tab positions
0170      A212     tv.colorscheme    equ  tv.struct + 18  ; Current color scheme (0-xx)
0171      A214     tv.curshape       equ  tv.struct + 20  ; Cursor shape and color (sprite)
0172      A216     tv.curcolor       equ  tv.struct + 22  ; Cursor color1 + color2 (color scheme)
0173      A218     tv.color          equ  tv.struct + 24  ; FG/BG-color framebuffer + status lines
0174      A21A     tv.markcolor      equ  tv.struct + 26  ; FG/BG-color marked lines in framebuffer
0175      A21C     tv.busycolor      equ  tv.struct + 28  ; FG/BG-color bottom line when busy
0176      A21E     tv.rulercolor     equ  tv.struct + 30  ; FG/BG-color ruler line
0177      A220     tv.cmdb.hcolor    equ  tv.struct + 32  ; FG/BG-color command buffer header line
0178      A222     tv.font.ptr       equ  tv.struct + 34  ; Pointer to font (in ROM bank 6 or RAM)
0179      A224     tv.pane.focus     equ  tv.struct + 36  ; Identify pane that has focus
0180      A226     tv.task.oneshot   equ  tv.struct + 38  ; Pointer to one-shot routine
0181      A228     tv.fj.stackpnt    equ  tv.struct + 40  ; Pointer to farjump return stack
0182      A22A     tv.error.visible  equ  tv.struct + 42  ; Error pane visible
0183      A22C     tv.error.rows     equ  tv.struct + 44  ; Number of rows in error pane
0184      A22E     tv.sp2.conf       equ  tv.struct + 46  ; Backup of SP2 config register
0185      A230     tv.sp2.stack      equ  tv.struct + 48  ; Backup of SP2 stack register
0186      A232     tv.fg99.img.ptr   equ  tv.struct + 50  ; Pointer to Final GROM cartridge to load
0187      A234     tv.specmsg.ptr    equ  tv.struct + 52  ; Pointer to special message above botrow
0188      A236     tv.lineterm       equ  tv.struct + 54  ; Default line termination character(s)
0189      A238     tv.error.msg      equ  tv.struct + 56  ; Error message (max. 160 characters)
0190      A2D8     tv.free           equ  tv.struct + 216 ; End of structure
0191               ;-----------------------------------------------------------------
0192               ; Frame buffer structure               @>a300-a3ff   (256 bytes)
0193               ;-----------------------------------------------------------------
0194      A300     fb.struct         equ  >a300           ; Structure begin
0195      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0196      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0197      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0198                                                      ; line X in editor buffer).
0199      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0200                                                      ; (offset 0 .. @fb.scrrows)
0201      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0202      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0203      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0204      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0205      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0206      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0207      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle (00=on <>00=off)
0208      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0209      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0210      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0211      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0212      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0213      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0214      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0215      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0216               ;-----------------------------------------------------------------
0217               ; File handle structure                @>a400-a4ff   (256 bytes)
0218               ;-----------------------------------------------------------------
0219      A400     fh.struct         equ  >a400           ; stevie file handling structures
0220               ;*******************************************************************************
0221               ; ATTENTION: dsrlnk vars must form a continuous memory block & keep their order!
0222               ;*******************************************************************************
0223      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0224      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0225      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0226      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0227      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0228      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0229      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0230      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0231      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0232      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0233      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0234      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0235      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0236      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0237      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0238      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0239      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0240      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0241      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0242      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0243      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0244      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0245      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0246      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0247      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0248      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0249      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0250      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0251      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0252      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0253      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0254      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0255      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0256      A466     fh.pabtpl.ptr     equ  fh.struct +102  ; Pointer to PAB template in ROM/RAM
0257      A468     fh.membuffer      equ  fh.struct +104  ; 80 bytes file memory buffer
0258      A4B8     fh.free           equ  fh.struct +184  ; End of structure
0259               ;-----------------------------------------------------------------
0260               ; File handle structure for generic    @>a400-a4ff   (256 bytes)
0261               ; Overloads file handle structure
0262               ;-----------------------------------------------------------------
0263      A45A     fh.ftype.init     equ  fh.struct + 90  ; File type/mode (becomes fh.filetype)
0264      A45C     fh.ram.ptr        equ  fh.struct + 92  ; RAM destination address
0265               ;-----------------------------------------------------------------
0266               ; Editor buffer structure              @>a500-a5ff   (256 bytes)
0267               ;-----------------------------------------------------------------
0268      A500     edb.struct        equ  >a500           ; Begin structure
0269      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0270      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0271      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0272      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0273      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0274      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0275      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0276      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0277      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0278      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0279      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0280                                                      ; with current filename.
0281      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0282                                                      ; with current file type.
0283      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0284      A51A     edb.sams.lopage   equ  edb.struct + 26 ; Lowest SAMS page in use
0285      A51C     edb.sams.hipage   equ  edb.struct + 28 ; Highest SAMS page in use
0286      A51E     edb.bk.fb.topline equ  edb.struct + 30 ; Backup of @fb.topline before opening
0287                                                      ; other file from special file.
0288      A520     edb.bk.fb.row     equ  edb.struct + 32 ; Backup of @fb.row before opening
0289                                                      ; other file from special file.
0290      A522     edb.special.file  equ  edb.struct + 34 ; Special file in editor buffer
0291      A524     edb.lineterm      equ  edb.struct + 36 ; Line termination character
0292                                                      ; MSB: Mode on (>ff) or off (>00)
0293                                                      ; LSB: Line termination character
0294      A526     edb.filename      equ  edb.struct + 38 ; 80 characters inline buffer reserved
0295                                                      ; for filename, but not always used.
0296      A576     edb.free          equ  edb.struct + 118; End of structure
0297               ;-----------------------------------------------------------------
0298               ; Index structure                      @>a600-a6ff   (256 bytes)
0299               ;-----------------------------------------------------------------
0300      A600     idx.struct        equ  >a600           ; stevie index structure
0301      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0302      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0303      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0304      A606     idx.free          equ  idx.struct + 6  ; End of structure
0305               ;-----------------------------------------------------------------
0306               ; Command buffer structure             @>a700-a7ff   (256 bytes)
0307               ;-----------------------------------------------------------------
0308      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0309      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0310      A702     cmdb.visible      equ  cmdb.struct+ 2  ; Command buffer visible? (>ffff=visible)
0311      A704     cmdb.fb.yxsave    equ  cmdb.struct+ 4  ; Copy of FB WYX when entering cmdb pane
0312      A706     cmdb.scrrows      equ  cmdb.struct+ 6  ; Current size of CMDB pane (in rows)
0313      A708     cmdb.default      equ  cmdb.struct+ 8  ; Default size of CMDB pane (in rows)
0314      A70A     cmdb.cursor       equ  cmdb.struct+ 10 ; Screen YX of cursor in CMDB pane
0315      A70C     cmdb.yxsave       equ  cmdb.struct+ 12 ; Copy of WYX
0316      A70E     cmdb.vdptop       equ  cmdb.struct+ 14 ; VDP address CMDB pane header line (TAT)
0317      A710     cmdb.yxtop        equ  cmdb.struct+ 16 ; YX position CMDB pane header line
0318      A712     cmdb.yxprompt     equ  cmdb.struct+ 18 ; YX position of command buffer prompt
0319      A714     cmdb.column       equ  cmdb.struct+ 20 ; Current column in command buffer pane
0320      A716     cmdb.length       equ  cmdb.struct+ 22 ; Length of current row in CMDB
0321      A718     cmdb.lines        equ  cmdb.struct+ 24 ; Total lines in CMDB
0322      A71A     cmdb.dirty        equ  cmdb.struct+ 26 ; Command buffer dirty (Text changed!)
0323      A71C     cmdb.dialog       equ  cmdb.struct+ 28 ; Dialog identifier
0324      A71E     cmdb.dialog.var   equ  cmdb.struct+ 30 ; Dialog private variable or pointer
0325      A720     cmdb.panhead      equ  cmdb.struct+ 32 ; Pointer to string pane header
0326      A722     cmdb.paninfo      equ  cmdb.struct+ 34 ; Pointer to string pane info (1st line)
0327      A724     cmdb.panhint      equ  cmdb.struct+ 36 ; Pointer to string pane hint (2nd line)
0328      A726     cmdb.panhint2     equ  cmdb.struct+ 38 ; Pointer to string pane hint (extra)
0329      A728     cmdb.panmarkers   equ  cmdb.struct+ 40 ; Pointer to key marker list  (3rd line)
0330      A72A     cmdb.pankeys      equ  cmdb.struct+ 42 ; Pointer to string pane keys (stat line)
0331      A72C     cmdb.action.ptr   equ  cmdb.struct+ 44 ; Pointer to function to execute
0332      A72E     cmdb.cmdall       equ  cmdb.struct+ 46 ; Current command including length-byte
0333      A72E     cmdb.cmdlen       equ  cmdb.struct+ 46 ; Length of current command (MSB byte!)
0334      A72F     cmdb.cmd          equ  cmdb.struct+ 47 ; Current command (80 bytes max.)
0335      A780     cmdb.panhead.buf  equ  cmdb.struct+128 ; String buffer for pane header
0336      A7B2     cmdb.dflt.fname   equ  cmdb.struct+178 ; Default for filename
0337      A800     cmdb.free         equ  cmdb.struct+256 ; End of structure
0338               ;-----------------------------------------------------------------
0339               ; Stevie value stack                   @>a800-a8ff   (256 bytes)
0340               ;-----------------------------------------------------------------
0341      A900     sp2.stktop        equ  >a900           ; \
0342                                                      ; | The stack grows from high memory
0343                                                      ; | towards low memory.
0344                                                      ; |
0345                                                      ; | Stack leaking is checked in SP2
0346                                                      ; | user hook "edkey.keyscan.hook"
0347                                                      ; /
0348               ;-----------------------------------------------------------------
0349               ; Scratchpad memory work copy          @>ad00-aeff   (256 bytes)
0350               ;-----------------------------------------------------------------
0351      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0352                                                      ; / stored in cartridge ROM bank7.asm
0353               
0354      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0355                                                      ; | scratchpad backup/restore routines.
0356                                                      ; /
0357               
0358      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0359               
0360      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0361                                                      ; calling TI Basic/External programs
0362               ;-----------------------------------------------------------------
0363               ; Farjump return stack                 @>af00-afff   (256 bytes)
0364               ;-----------------------------------------------------------------
0365      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0366                                                      ; Grows downwards from high to low.
0367               ;-----------------------------------------------------------------
0368               ; Index                                @>b000-bfff  (4096 bytes)
0369               ;-----------------------------------------------------------------
0370      B000     idx.top           equ  >b000           ; Top of index
0371      1000     idx.size          equ  4096            ; Index size
0372               ;-----------------------------------------------------------------
0373               ; Editor buffer                        @>c000-cfff  (4096 bytes)
0374               ;-----------------------------------------------------------------
0375      C000     edb.top           equ  >c000           ; Editor buffer high memory
0376      1000     edb.size          equ  4096            ; Editor buffer size
0377               ;-----------------------------------------------------------------
0378               ; Frame buffer & uncrunch area         @>d000-dcff  (3584 bytes)
0379               ;-----------------------------------------------------------------
0380      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0381      0960     fb.size           equ  80*30           ; Frame buffer size
0382      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0383                                                      ; / >d960->dcff
0384               ;-----------------------------------------------------------------
0385               ; Defaults area                        @>de00-dfff  (3584 bytes)
0386               ;-----------------------------------------------------------------
0387      DE00     tv.printer.fname  equ  >de00           ; Default printer        (80 bytes)
0388      DE50     tv.clip.fname     equ  >de50           ; Default clipboard      (80 bytes)
0389      DEA0     tv.mc.fname       equ  >dea0           ; Default Master Catalog (80 bytes)
0390               ;-----------------------------------------------------------------
0391               ; Command buffer history               @>e000-efff  (4096 bytes)
0392               ;-----------------------------------------------------------------
0393      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0394      1000     cmdb.size         equ  4096            ; Command buffer size
0395               ;-----------------------------------------------------------------
0396               ; Heap & Strings area                  @>f000-ffff  (4096 bytes)
0397               ;-----------------------------------------------------------------
0398      F000     heap.top          equ  >f000           ; 80 Current filename
0399      F050     ram.msg1          equ  >f050           ; 80 txt.hint.memstat
0400      F0A0     ram.msg2          equ  >f0a0           ; 80 txt.hint.lineterm
0401               ;-----------------------------------------------------------------
0402               ; Stevie specific equates
0403               ;-----------------------------------------------------------------
0404      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0405      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0406      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0407      0005     cmdb.rows                 equ  5       ; Number of rows in CMDB pane
0408      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0409               
0410      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0411      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
0412      0100     tv.sams.maxpage           equ  256     ; Max SAMS pages supported
                   < stevie_b1.asm
0032                       copy  "equates.c99.asm"     ; Classic99 emulator configuration
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0033                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0044     key.uc.d      equ >44               ; D
0025      0045     key.uc.e      equ >45               ; E
0026      0046     key.uc.f      equ >46               ; F
0027      0047     key.uc.g      equ >47               ; G
0028      0048     key.uc.h      equ >48               ; H
0029      0049     key.uc.i      equ >49               ; I
0030      004A     key.uc.j      equ >4a               ; J
0031      004B     key.uc.k      equ >4b               ; K
0032      004C     key.uc.l      equ >4c               ; L
0033      004D     key.uc.m      equ >4d               ; M
0034      004E     key.uc.n      equ >4e               ; N
0035      0052     key.uc.r      equ >52               ; R
0036      0053     key.uc.s      equ >53               ; S
0037      004F     key.uc.o      equ >4f               ; O
0038      0050     key.uc.p      equ >50               ; P
0039      0051     key.uc.q      equ >51               ; Q
0040      0052     key.uc.r      equ >52               ; R
0041      0058     key.uc.x      equ >58               ; X
0042      00A2     key.lc.b      equ >a2               ; b
0043      00A5     key.lc.e      equ >a5               ; e
0044      00A6     key.lc.f      equ >a6               ; f
0045      00A8     key.lc.h      equ >a8               ; h
0046      006E     key.lc.n      equ >6e               ; n
0047      0073     key.lc.s      equ >73               ; s
0048      006F     key.lc.o      equ >6f               ; o
0049      0070     key.lc.p      equ >70               ; p
0050      0071     key.lc.q      equ >71               ; q
0051      0072     key.lc.r      equ >72               ; r
0052      0078     key.lc.x      equ >78               ; x
0053               *---------------------------------------------------------------
0054               * Keyboard scancodes - Function keys
0055               *-------------|---------------------|---------------------------
0056      00BC     key.fctn.0    equ >bc               ; fctn + 0
0057      0003     key.fctn.1    equ >03               ; fctn + 1
0058      0004     key.fctn.2    equ >04               ; fctn + 2
0059      0007     key.fctn.3    equ >07               ; fctn + 3
0060      0002     key.fctn.4    equ >02               ; fctn + 4
0061      000E     key.fctn.5    equ >0e               ; fctn + 5
0062      000C     key.fctn.6    equ >0c               ; fctn + 6
0063      0001     key.fctn.7    equ >01               ; fctn + 7
0064      0006     key.fctn.8    equ >06               ; fctn + 8
0065      000F     key.fctn.9    equ >0f               ; fctn + 9
0066      0000     key.fctn.a    equ >00               ; fctn + a
0067      00BE     key.fctn.b    equ >be               ; fctn + b
0068      0000     key.fctn.c    equ >00               ; fctn + c
0069      0009     key.fctn.d    equ >09               ; fctn + d
0070      000B     key.fctn.e    equ >0b               ; fctn + e
0071      0000     key.fctn.f    equ >00               ; fctn + f
0072      0000     key.fctn.g    equ >00               ; fctn + g
0073      00BF     key.fctn.h    equ >bf               ; fctn + h
0074      0000     key.fctn.i    equ >00               ; fctn + i
0075      00C0     key.fctn.j    equ >c0               ; fctn + j
0076      00C1     key.fctn.k    equ >c1               ; fctn + k
0077      00C2     key.fctn.l    equ >c2               ; fctn + l
0078      00C3     key.fctn.m    equ >c3               ; fctn + m
0079      00C4     key.fctn.n    equ >c4               ; fctn + n
0080      0000     key.fctn.o    equ >00               ; fctn + o
0081      0000     key.fctn.p    equ >00               ; fctn + p
0082      00C5     key.fctn.q    equ >c5               ; fctn + q
0083      0000     key.fctn.r    equ >00               ; fctn + r
0084      0008     key.fctn.s    equ >08               ; fctn + s
0085      0000     key.fctn.t    equ >00               ; fctn + t
0086      0000     key.fctn.u    equ >00               ; fctn + u
0087      007F     key.fctn.v    equ >7f               ; fctn + v
0088      007E     key.fctn.w    equ >7e               ; fctn + w
0089      000A     key.fctn.x    equ >0a               ; fctn + x
0090      00C6     key.fctn.y    equ >c6               ; fctn + y
0091      0000     key.fctn.z    equ >00               ; fctn + z
0092               *---------------------------------------------------------------
0093               * Keyboard scancodes - Function keys extra
0094               *---------------------------------------------------------------
0095      00B9     key.fctn.dot    equ >b9             ; fctn + .
0096      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0097      0005     key.fctn.plus   equ >05             ; fctn + +
0098               *---------------------------------------------------------------
0099               * Keyboard scancodes - control keys
0100               *-------------|---------------------|---------------------------
0101      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0102      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0103      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0104      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0105      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0106      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0107      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0108      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0109      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0110      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0111      0081     key.ctrl.a    equ >81               ; ctrl + a
0112      0082     key.ctrl.b    equ >82               ; ctrl + b
0113      0083     key.ctrl.c    equ >83               ; ctrl + c
0114      0084     key.ctrl.d    equ >84               ; ctrl + d
0115      0085     key.ctrl.e    equ >85               ; ctrl + e
0116      0086     key.ctrl.f    equ >86               ; ctrl + f
0117      0087     key.ctrl.g    equ >87               ; ctrl + g
0118      0088     key.ctrl.h    equ >88               ; ctrl + h
0119      0089     key.ctrl.i    equ >89               ; ctrl + i
0120      008A     key.ctrl.j    equ >8a               ; ctrl + j
0121      008B     key.ctrl.k    equ >8b               ; ctrl + k
0122      008C     key.ctrl.l    equ >8c               ; ctrl + l
0123      008D     key.ctrl.m    equ >8d               ; ctrl + m
0124      008E     key.ctrl.n    equ >8e               ; ctrl + n
0125      008F     key.ctrl.o    equ >8f               ; ctrl + o
0126      0090     key.ctrl.p    equ >90               ; ctrl + p
0127      0091     key.ctrl.q    equ >91               ; ctrl + q
0128      0092     key.ctrl.r    equ >92               ; ctrl + r
0129      0093     key.ctrl.s    equ >93               ; ctrl + s
0130      0094     key.ctrl.t    equ >94               ; ctrl + t
0131      0095     key.ctrl.u    equ >95               ; ctrl + u
0132      0096     key.ctrl.v    equ >96               ; ctrl + v
0133      0097     key.ctrl.w    equ >97               ; ctrl + w
0134      0098     key.ctrl.x    equ >98               ; ctrl + x
0135      0099     key.ctrl.y    equ >99               ; ctrl + y
0136      009A     key.ctrl.z    equ >9a               ; ctrl + z
0137               *---------------------------------------------------------------
0138               * Keyboard scancodes - control keys extra
0139               *---------------------------------------------------------------
0140      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0141      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0142      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0143      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0144      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0145               *---------------------------------------------------------------
0146               * Special keys
0147               *---------------------------------------------------------------
0148      000D     key.enter     equ >0d               ; enter
0149      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0034               
0035               ***************************************************************
0036               * BANK 1
0037               ********|*****|*********************|**************************
0038      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0039                       aorg  >6000
0040                       save  >6000,>8000           ; Save bank
0041                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015                       ;
0016                       ; Change to rom.program1 to add the menu option RESET STEVIE MEMORY.
0017                       ; That option can be used in the case where we jump to TI Basic, but
0018                       ; resuming fails afterwards (e.g. memory overwritten by ext. program).
0019                       ;
0020                       ; If resume fails, you can only reset the TI-99/4a by turning of
0021                       ; the memory expansion, it's not sufficient to reset the console.
0022                       ;
0023 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0024                                                   ; 7  /
0025               
0026 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0027                                                   ; 9  /
0028               
0029 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0030                                                   ; 11 /
0031               
0032                       ;-----------------------------------------------------------------------
0033                       ; Program list entry
0034                       ;-----------------------------------------------------------------------
0035               rom.program1:
0036 600C 6024             data  rom.program2          ; 12 \ Next program list entry         >600c
0037                                                   ; 13 / (no more items following)
0038               
0039 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0040                                                   ; 15 /
0041               
0042 6010 1352             stri 'RESET STEVIE MEMORY'
     6012 4553     
     6014 4554     
     6016 2053     
     6018 5445     
     601A 5649     
     601C 4520     
     601E 4D45     
     6020 4D4F     
     6022 5259     
0043               
0044                       ;-----------------------------------------------------------------------
0045                       ; Program list entry
0046                       ;-----------------------------------------------------------------------
0047               rom.program2:
0048 6024 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0049                                                   ; 13 / (no more items following)
0050               
0051 6026 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0052                                                   ; 15 /
0053               
0055 6028 0C53                 stri 'STEVIE 1.5.5'
     602A 5445     
     602C 5649     
     602E 4520     
     6030 312E     
     6032 352E     
     6034 35       
0057               
0061               
0065               
                   < stevie_b1.asm
0042               
0043               ***************************************************************
0044               * Step 1: Switch to bank 0 (uniform code accross all banks)
0045               ********|*****|*********************|**************************
0046                       aorg  kickstart.code1       ; >6040
0047 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0048               ***************************************************************
0049               * Step 2: Satisfy assembler, must know relocated code
0050               ********|*****|*********************|**************************
0051                       aorg  >2000                 ; Relocate to >2000
0052                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               * skip_fg99                 equ  1  ; Skip support for FinalGROM99 loading
0070               *
0071               * == Startup behaviour
0072               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0073               *                                   ; to pre-defined backup address
0074               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0075               *******************************************************************************
0076               
0077               *//////////////////////////////////////////////////////////////
0078               *                       RUNLIB SETUP
0079               *//////////////////////////////////////////////////////////////
0080               
0081                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0082                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0083                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0084                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0085                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0086               
0090               
0091                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0092                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0093                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2F10     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 22F8     
0078 208A 21F2                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 2360     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 228E     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 228E     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2442     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2182     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 299C     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2442     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 2198     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 299C     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2442     
0117 20D4 0300                   byte 3,0
0118 20D6 21B4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2442     
0120 20DC 0400                   byte 4,0
0121 20DE 21BA                   data cpu.crash.msg.st
0122                       ;------------------------------------------------------
0123                       ; Show crash registers WP, ST, R0 - R15
0124                       ;------------------------------------------------------
0125 20E0 06A0  32         bl    @at                   ; Put cursor at YX
     20E2 26C6     
0126 20E4 0304                   byte 3,4              ; \ i p0 = YX position
0127                                                   ; /
0128               
0129 20E6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20E8 FFDC     
0130 20EA 04C6  14         clr   tmp2                  ; Loop counter
0131               
0132               cpu.crash.showreg:
0133 20EC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0134               
0135 20EE 0649  14         dect  stack
0136 20F0 C644  30         mov   tmp0,*stack           ; Push tmp0
0137 20F2 0649  14         dect  stack
0138 20F4 C645  30         mov   tmp1,*stack           ; Push tmp1
0139 20F6 0649  14         dect  stack
0140 20F8 C646  30         mov   tmp2,*stack           ; Push tmp2
0141                       ;------------------------------------------------------
0142                       ; Display crash register number
0143                       ;------------------------------------------------------
0144               cpu.crash.showreg.label:
0145 20FA C046  18         mov   tmp2,r1               ; Save register number
0146 20FC 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     20FE 0001     
0147 2100 1220  14         jle   cpu.crash.showreg.content
0148                                                   ; Yes, skip
0149               
0150 2102 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0151 2104 06A0  32         bl    @mknum
     2106 29A6     
0152 2108 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0153 210A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0154 210C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0155                                                   ; /         LSB offset for ASCII digit 0-9
0156               
0157 210E 06A0  32         bl    @setx                 ; Set cursor X position
     2110 26DC     
0158 2112 0000                   data 0                ; \ i  p0 =  Cursor Y position
0159                                                   ; /
0160               
0161 2114 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2116 0400     
0162 2118 D804  38         movb  tmp0,@rambuf          ;
     211A A100     
0163               
0164 211C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     211E 241E     
0165 2120 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0166                                                   ; /
0167               
0168 2122 06A0  32         bl    @setx                 ; Set cursor X position
     2124 26DC     
0169 2126 0002                   data 2                ; \ i  p0 =  Cursor Y position
0170                                                   ; /
0171               
0172 2128 0281  22         ci    r1,10
     212A 000A     
0173 212C 1102  14         jlt   !
0174 212E 0620  26         dec   @wyx                  ; x=x-1
     2130 832A     
0175               
0176 2132 06A0  32 !       bl    @putstr
     2134 241E     
0177 2136 21AE                   data cpu.crash.msg.r
0178               
0179 2138 06A0  32         bl    @mknum
     213A 29A6     
0180 213C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0181 213E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0182 2140 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0183                                                   ; /         LSB offset for ASCII digit 0-9
0184                       ;------------------------------------------------------
0185                       ; Display crash register content
0186                       ;------------------------------------------------------
0187               cpu.crash.showreg.content:
0188 2142 06A0  32         bl    @mkhex                ; Convert hex word to string
     2144 2918     
0189 2146 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0190 2148 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0191 214A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0192                                                   ; /         LSB offset for ASCII digit 0-9
0193               
0194 214C 06A0  32         bl    @setx                 ; Set cursor X position
     214E 26DC     
0195 2150 0004                   data 4                ; \ i  p0 =  Cursor Y position
0196                                                   ; /
0197               
0198 2152 06A0  32         bl    @putstr               ; Put '  >'
     2154 241E     
0199 2156 21B0                   data cpu.crash.msg.marker
0200               
0201 2158 06A0  32         bl    @setx                 ; Set cursor X position
     215A 26DC     
0202 215C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0203                                                   ; /
0204               
0205 215E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2160 0400     
0206 2162 D804  38         movb  tmp0,@rambuf          ;
     2164 A100     
0207               
0208 2166 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2168 241E     
0209 216A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0210                                                   ; /
0211               
0212 216C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0213 216E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0214 2170 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0215               
0216 2172 06A0  32         bl    @down                 ; y=y+1
     2174 26CC     
0217               
0218 2176 0586  14         inc   tmp2
0219 2178 0286  22         ci    tmp2,17
     217A 0011     
0220 217C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0221                       ;------------------------------------------------------
0222                       ; Kernel takes over
0223                       ;------------------------------------------------------
0224 217E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2180 7F00     
0225               
0226               
0227 2182 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2184 7973     
     2186 7465     
     2188 6D20     
     218A 6372     
     218C 6173     
     218E 6865     
     2190 6420     
     2192 6E65     
     2194 6172     
     2196 203E     
0228                                          even
0229 2198 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     219A 616C     
     219C 6C65     
     219E 7220     
     21A0 6164     
     21A2 6472     
     21A4 6573     
     21A6 7320     
     21A8 6E65     
     21AA 6172     
     21AC 203E     
0230                                          even
0231 21AE 0152     cpu.crash.msg.r            stri 'R'
0232                                          even
0233 21B0 0320     cpu.crash.msg.marker       stri '  >'
     21B2 203E     
0234                                          even
0235 21B4 042A     cpu.crash.msg.wp           stri '**WP'
     21B6 2A57     
     21B8 50       
0236                                          even
0237 21BA 042A     cpu.crash.msg.st           stri '**ST'
     21BC 2A53     
     21BE 54       
0238                                          even
0239 21C0 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21C2 6F75     
     21C4 7263     
     21C6 6520     
     21C8 2020     
     21CA 2025     
     21CC 2562     
     21CE 7569     
     21D0 6C64     
     21D2 5F73     
     21D4 7263     
     21D6 2525     
0240                                          even
0241 21D8 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21DA 7569     
     21DC 6C64     
     21DE 2D49     
     21E0 4420     
     21E2 2025     
     21E4 2562     
     21E6 7569     
     21E8 6C64     
     21EA 5F64     
     21EC 6174     
     21EE 6525     
     21F0 25       
0242                                          even
                   < runlib.asm
0094                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21F2 00E2     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     21F4 000E     
     21F6 0106     
     21F8 0204     
     21FA 0020     
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 21FC 00F2     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     21FE 000E     
     2200 0106     
     2202 00F4     
     2204 0028     
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2206 04F0     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2208 003F     
     220A 0240     
     220C 03F4     
     220E 0050     
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0095                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 2210 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2212 16FD             data  >16fd                 ; |         jne   mcloop
0015 2214 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2216 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2218 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 221A 0201  20         li    r1,mccode             ; Machinecode to patch
     221C 2210     
0037 221E 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     2220 8322     
0038 2222 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2224 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2226 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2228 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 222A C0F9  30 popr3   mov   *stack+,r3
0057 222C C0B9  30 popr2   mov   *stack+,r2
0058 222E C079  30 popr1   mov   *stack+,r1
0059 2230 C039  30 popr0   mov   *stack+,r0
0060 2232 C2F9  30 poprt   mov   *stack+,r11
0061 2234 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2236 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2238 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 223A C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 223C C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 223E 1604  14         jne   filchk                ; No, continue checking
0093               
0094 2240 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2242 FFCE     
0095 2244 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2246 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2248 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     224A 830B     
     224C 830A     
0100               
0101 224E 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     2250 0001     
0102 2252 1602  14         jne   filchk2
0103 2254 DD05  32         movb  tmp1,*tmp0+
0104 2256 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2258 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     225A 0002     
0109 225C 1603  14         jne   filchk3
0110 225E DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 2260 DD05  32         movb  tmp1,*tmp0+
0112 2262 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2264 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2266 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2268 0001     
0118 226A 1305  14         jeq   fil16b
0119 226C DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 226E 0606  14         dec   tmp2
0121 2270 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2272 0002     
0122 2274 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2276 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2278 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     227A 0001     
0128 227C 1301  14         jeq   dofill
0129 227E 0606  14         dec   tmp2                  ; Make TMP2 even
0130 2280 CD05  34 dofill  mov   tmp1,*tmp0+
0131 2282 0646  14         dect  tmp2
0132 2284 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2286 C1C7  18         mov   tmp3,tmp3
0137 2288 1301  14         jeq   fil.exit
0138 228A DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 228C 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 228E C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 2290 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 2292 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 2294 0264  22 xfilv   ori   tmp0,>4000
     2296 4000     
0166 2298 06C4  14         swpb  tmp0
0167 229A D804  30         movb  tmp0,@vdpa
     229C 8C02     
0168 229E 06C4  14         swpb  tmp0
0169 22A0 D804  30         movb  tmp0,@vdpa
     22A2 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22A4 020F  20         li    r15,vdpw              ; Set VDP write address
     22A6 8C00     
0174 22A8 06C5  14         swpb  tmp1
0175 22AA C820  46         mov   @filzz,@mcloop        ; Setup move command
     22AC 22B4     
     22AE 8320     
0176 22B0 0460  24         b     @mcloop               ; Write data to VDP
     22B2 8320     
0177               *--------------------------------------------------------------
0181 22B4 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22B6 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22B8 4000     
0202 22BA 06C4  14 vdra    swpb  tmp0
0203 22BC D804  30         movb  tmp0,@vdpa
     22BE 8C02     
0204 22C0 06C4  14         swpb  tmp0
0205 22C2 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22C4 8C02     
0206 22C6 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22C8 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22CA C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22CC 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22CE 4000     
0223 22D0 06C4  14         swpb  tmp0                  ; \
0224 22D2 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22D4 8C02     
0225 22D6 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22D8 D804  30         movb  tmp0,@vdpa            ; /
     22DA 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22DC 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22DE D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22E0 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22E2 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22E4 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22E6 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22E8 8C02     
0257 22EA 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22EC D804  30         movb  tmp0,@vdpa            ; /
     22EE 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22F0 D120  30         movb  @vdpr,tmp0            ; Read byte
     22F2 8800     
0263 22F4 0984  32         srl   tmp0,8                ; Right align
0264 22F6 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 22F8 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 22FA C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 22FC C144  18         mov   tmp0,tmp1
0289 22FE 05C5  14         inct  tmp1
0290 2300 D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2302 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2304 FF00     
0292 2306 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2308 C805  30         mov   tmp1,@wbase           ; Store calculated base
     230A 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 230C 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     230E 8000     
0298 2310 0206  20         li    tmp2,8
     2312 0008     
0299 2314 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2316 830B     
0300 2318 06C5  14         swpb  tmp1
0301 231A D805  30         movb  tmp1,@vdpa
     231C 8C02     
0302 231E 06C5  14         swpb  tmp1
0303 2320 D805  30         movb  tmp1,@vdpa
     2322 8C02     
0304 2324 0225  22         ai    tmp1,>0100
     2326 0100     
0305 2328 0606  14         dec   tmp2
0306 232A 16F4  14         jne   vidta1                ; Next register
0307 232C C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     232E 833A     
0308 2330 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2332 C13B  30 putvr   mov   *r11+,tmp0
0326 2334 0264  22 putvrx  ori   tmp0,>8000
     2336 8000     
0327 2338 06C4  14         swpb  tmp0
0328 233A D804  30         movb  tmp0,@vdpa
     233C 8C02     
0329 233E 06C4  14         swpb  tmp0
0330 2340 D804  30         movb  tmp0,@vdpa
     2342 8C02     
0331 2344 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2346 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2348 C10E  18         mov   r14,tmp0
0341 234A 0984  32         srl   tmp0,8
0342 234C 06A0  32         bl    @putvrx               ; Write VR#0
     234E 2334     
0343 2350 0204  20         li    tmp0,>0100
     2352 0100     
0344 2354 D820  42         movb  @r14lb,@tmp0lb
     2356 831D     
     2358 8309     
0345 235A 06A0  32         bl    @putvrx               ; Write VR#1
     235C 2334     
0346 235E 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 2360 C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2362 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2364 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2366 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2368 7FFF     
0364 236A 2120  32         coc   @wbit0,tmp0
     236C 2020     
0365 236E 1604  14         jne   ldfnt1
0366 2370 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2372 8000     
0367 2374 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2376 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2378 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     237A 23E2     
0372 237C D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     237E 9C02     
0373 2380 06C4  14         swpb  tmp0
0374 2382 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2384 9C02     
0375 2386 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2388 9800     
0376 238A 06C5  14         swpb  tmp1
0377 238C D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     238E 9800     
0378 2390 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 2392 D805  38         movb  tmp1,@grmwa
     2394 9C02     
0383 2396 06C5  14         swpb  tmp1
0384 2398 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     239A 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 239C C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 239E 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23A0 22B6     
0390 23A2 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23A4 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23A6 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23A8 7FFF     
0393 23AA C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23AC 23E4     
0394 23AE C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23B0 23E6     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23B2 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23B4 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23B6 D120  34         movb  @grmrd,tmp0
     23B8 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23BA 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23BC 2020     
0405 23BE 1603  14         jne   ldfnt3                ; No, so skip
0406 23C0 D1C4  18         movb  tmp0,tmp3
0407 23C2 0917  18         srl   tmp3,1
0408 23C4 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23C6 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23C8 8C00     
0413 23CA 0606  14         dec   tmp2
0414 23CC 16F2  14         jne   ldfnt2
0415 23CE 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23D0 020F  20         li    r15,vdpw              ; Set VDP write address
     23D2 8C00     
0417 23D4 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23D6 7FFF     
0418 23D8 0458  20         b     *tmp4                 ; Exit
0419 23DA D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23DC 2000     
     23DE 8C00     
0420 23E0 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23E2 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23E4 0200     
     23E6 0000     
0425 23E8 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23EA 01C0     
     23EC 0101     
0426 23EE 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23F0 02A0     
     23F2 0101     
0427 23F4 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     23F6 00E0     
     23F8 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 23FA C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 23FC C3A0  30         mov   @wyx,r14              ; Get YX
     23FE 832A     
0447 2400 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2402 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2404 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2406 C3A0  30         mov   @wyx,r14              ; Get YX
     2408 832A     
0454 240A 024E  22         andi  r14,>00ff             ; Remove Y
     240C 00FF     
0455 240E A3CE  18         a     r14,r15               ; pos = pos + X
0456 2410 A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2412 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2414 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2416 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2418 020F  20         li    r15,vdpw              ; VDP write address
     241A 8C00     
0463 241C 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 241E C17B  30 putstr  mov   *r11+,tmp1
0482 2420 D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2422 C1CB  18 xutstr  mov   r11,tmp3
0484 2424 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2426 23FA     
0485 2428 C2C7  18         mov   tmp3,r11
0486 242A 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 242C C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 242E 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 2430 0286  22         ci    tmp2,255              ; Length > 255 ?
     2432 00FF     
0494 2434 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2436 0460  28         b     @xpym2v               ; Display string
     2438 248C     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 243A C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     243C FFCE     
0501 243E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2440 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2442 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2444 832A     
0518 2446 0460  28         b     @putstr
     2448 241E     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 244A 0649  14         dect  stack
0540 244C C64B  30         mov   r11,*stack            ; Save return address
0541 244E 0649  14         dect  stack
0542 2450 C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2452 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2454 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2456 0649  14         dect  stack
0551 2458 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 245A 0649  14         dect  stack
0553 245C C646  30         mov   tmp2,*stack           ; Push tmp2
0554 245E 0649  14         dect  stack
0555 2460 C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2462 06A0  32         bl    @xutst0               ; Display string
     2464 2420     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2466 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2468 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 246A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 246C 06A0  32         bl    @down                 ; Move cursor down
     246E 26CC     
0566               
0567 2470 A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2472 0585  14         inc   tmp1                  ; Consider length byte
0569 2474 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2476 2002     
0570 2478 1301  14         jeq   !                     ; Yes, skip adjustment
0571 247A 0585  14         inc   tmp1                  ; Make address even
0572 247C 0606  14 !       dec   tmp2
0573 247E 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 2480 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2482 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2484 045B  20         b     *r11                  ; Return
                   < runlib.asm
0096               
0098                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2486 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2488 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 248A C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 248C C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 248E 1604  14         jne   !                     ; No, continue
0028               
0029 2490 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2492 FFCE     
0030 2494 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2496 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 2498 0264  22 !       ori   tmp0,>4000
     249A 4000     
0035 249C 06C4  14         swpb  tmp0
0036 249E D804  30         movb  tmp0,@vdpa
     24A0 8C02     
0037 24A2 06C4  14         swpb  tmp0
0038 24A4 D804  30         movb  tmp0,@vdpa
     24A6 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24A8 020F  20         li    r15,vdpw              ; Set VDP write address
     24AA 8C00     
0043 24AC C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24AE 24B6     
     24B0 8320     
0044 24B2 0460  24         b     @mcloop               ; Write data to VDP and return
     24B4 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24B6 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0100               
0102                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24B8 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24BA C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24BC C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24BE 06C4  14 xpyv2m  swpb  tmp0
0027 24C0 D804  30         movb  tmp0,@vdpa
     24C2 8C02     
0028 24C4 06C4  14         swpb  tmp0
0029 24C6 D804  30         movb  tmp0,@vdpa
     24C8 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24CA 020F  20         li    r15,vdpr              ; Set VDP read address
     24CC 8800     
0034 24CE C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24D0 24D8     
     24D2 8320     
0035 24D4 0460  24         b     @mcloop               ; Read data from VDP
     24D6 8320     
0036 24D8 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0104               
0106                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24DA C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24DC C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24DE C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24E0 C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24E2 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24E4 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24E6 FFCE     
0034 24E8 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24EA 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24EC 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24EE 0001     
0039 24F0 1603  14         jne   cpym0                 ; No, continue checking
0040 24F2 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 24F4 04C6  14         clr   tmp2                  ; Reset counter
0042 24F6 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 24F8 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     24FA 7FFF     
0047 24FC C1C4  18         mov   tmp0,tmp3
0048 24FE 0247  22         andi  tmp3,1
     2500 0001     
0049 2502 1618  14         jne   cpyodd                ; Odd source address handling
0050 2504 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2506 0247  22         andi  tmp3,1
     2508 0001     
0052 250A 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 250C 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     250E 2020     
0057 2510 1605  14         jne   cpym3
0058 2512 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2514 253A     
     2516 8320     
0059 2518 0460  24         b     @mcloop               ; Copy memory and exit
     251A 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 251C C1C6  18 cpym3   mov   tmp2,tmp3
0064 251E 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2520 0001     
0065 2522 1301  14         jeq   cpym4
0066 2524 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2526 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2528 0646  14         dect  tmp2
0069 252A 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 252C C1C7  18         mov   tmp3,tmp3
0074 252E 1301  14         jeq   cpymz
0075 2530 D554  38         movb  *tmp0,*tmp1
0076 2532 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2534 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2536 8000     
0081 2538 10E9  14         jmp   cpym2
0082 253A DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0108               
0112               
0116               
0118                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 253C C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 253E 0649  14         dect  stack
0065 2540 C64B  30         mov   r11,*stack            ; Push return address
0066 2542 0649  14         dect  stack
0067 2544 C640  30         mov   r0,*stack             ; Push r0
0068 2546 0649  14         dect  stack
0069 2548 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 254A 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 254C 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 254E 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     2550 4000     
0077 2552 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2554 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2556 020C  20         li    r12,>1e00             ; SAMS CRU address
     2558 1E00     
0082 255A 04C0  14         clr   r0
0083 255C 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 255E D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 2560 D100  18         movb  r0,tmp0
0086 2562 0984  32         srl   tmp0,8                ; Right align
0087 2564 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2566 833C     
0088 2568 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 256A C339  30         mov   *stack+,r12           ; Pop r12
0094 256C C039  30         mov   *stack+,r0            ; Pop r0
0095 256E C2F9  30         mov   *stack+,r11           ; Pop return address
0096 2570 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2572 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2574 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2576 0649  14         dect  stack
0135 2578 C64B  30         mov   r11,*stack            ; Push return address
0136 257A 0649  14         dect  stack
0137 257C C640  30         mov   r0,*stack             ; Push r0
0138 257E 0649  14         dect  stack
0139 2580 C64C  30         mov   r12,*stack            ; Push r12
0140 2582 0649  14         dect  stack
0141 2584 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2586 0649  14         dect  stack
0143 2588 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 258A 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 258C 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 258E 0284  22         ci    tmp0,255              ; Crash if page > 255
     2590 00FF     
0153 2592 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 2594 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     2596 001E     
0158 2598 150A  14         jgt   !
0159 259A 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     259C 0004     
0160 259E 1107  14         jlt   !
0161 25A0 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25A2 0012     
0162 25A4 1508  14         jgt   sams.page.set.switch_page
0163 25A6 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25A8 0006     
0164 25AA 1501  14         jgt   !
0165 25AC 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25AE C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25B0 FFCE     
0170 25B2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25B4 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25B6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25B8 1E00     
0176 25BA C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25BC 06C0  14         swpb  r0                    ; LSB to MSB
0178 25BE 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25C0 D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25C2 4000     
0180 25C4 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25C6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25C8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25CA C339  30         mov   *stack+,r12           ; Pop r12
0188 25CC C039  30         mov   *stack+,r0            ; Pop r0
0189 25CE C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25D0 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25D2 0649  14         dect  stack
0205 25D4 C64C  30         mov   r12,*stack            ; Push r12
0206 25D6 020C  20         li    r12,>1e00             ; SAMS CRU address
     25D8 1E00     
0207 25DA 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25DC C339  30         mov   *stack+,r12           ; Pop r12
0213 25DE 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25E0 0649  14         dect  stack
0231 25E2 C64C  30         mov   r12,*stack            ; Push r12
0232 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0233 25E8 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25EA C339  30         mov   *stack+,r12           ; Pop r12
0239 25EC 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25EE C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25F0 0649  14         dect  stack
0271 25F2 C64B  30         mov   r11,*stack            ; Save return address
0272 25F4 0649  14         dect  stack
0273 25F6 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 25F8 0649  14         dect  stack
0275 25FA C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 25FC 020C  20         li    r12,>1e00             ; SAMS CRU address
     25FE 1E00     
0280 2600 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2602 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2604 4004     
0283 2606 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2608 4006     
0284 260A C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     260C 4014     
0285 260E C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     2610 4016     
0286 2612 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2614 4018     
0287 2616 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2618 401A     
0288 261A C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     261C 401C     
0289 261E C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     2620 401E     
0290               
0291 2622 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2624 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2626 C339  30         mov   *stack+,r12           ; Pop r12
0298 2628 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 262A C2F9  30         mov   *stack+,r11           ; Pop r11
0300 262C 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 262E 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 2630 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2632 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2634 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2636 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2638 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 263A 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 263C 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 263E C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 2640 0649  14         dect  stack
0335 2642 C64B  30         mov   r11,*stack            ; Push return address
0336 2644 0649  14         dect  stack
0337 2646 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2648 0649  14         dect  stack
0339 264A C645  30         mov   tmp1,*stack           ; Push tmp1
0340 264C 0649  14         dect  stack
0341 264E C646  30         mov   tmp2,*stack           ; Push tmp2
0342 2650 0649  14         dect  stack
0343 2652 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2654 0205  20         li    tmp1,sams.layout.copy.data
     2656 2676     
0348 2658 0206  20         li    tmp2,8                ; Set loop counter
     265A 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 265C C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 265E 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     2660 253E     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2662 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2664 833C     
0359               
0360 2666 0606  14         dec   tmp2                  ; Next iteration
0361 2668 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 266A C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 266C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 266E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 2670 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2672 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2674 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2676 2000             data  >2000                 ; >2000-2fff
0377 2678 3000             data  >3000                 ; >3000-3fff
0378 267A A000             data  >a000                 ; >a000-afff
0379 267C B000             data  >b000                 ; >b000-bfff
0380 267E C000             data  >c000                 ; >c000-cfff
0381 2680 D000             data  >d000                 ; >d000-dfff
0382 2682 E000             data  >e000                 ; >e000-efff
0383 2684 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0120               
0124               
0126                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2686 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2688 FFBF     
0010 268A 0460  28         b     @putv01
     268C 2346     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 268E 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     2690 0040     
0018 2692 0460  28         b     @putv01
     2694 2346     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 2696 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     2698 FFDF     
0026 269A 0460  28         b     @putv01
     269C 2346     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 269E 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26A0 0020     
0034 26A2 0460  28         b     @putv01
     26A4 2346     
                   < runlib.asm
0128               
0130                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26A6 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26A8 FFFE     
0011 26AA 0460  28         b     @putv01
     26AC 2346     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26AE 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26B0 0001     
0019 26B2 0460  28         b     @putv01
     26B4 2346     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26B6 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26B8 FFFD     
0027 26BA 0460  28         b     @putv01
     26BC 2346     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26BE 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26C0 0002     
0035 26C2 0460  28         b     @putv01
     26C4 2346     
                   < runlib.asm
0132               
0134                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26C6 C83B  42 at      mov   *r11+,@wyx
     26C8 832A     
0019 26CA 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26CC B820  46 down    ab    @hb$01,@wyx
     26CE 2012     
     26D0 832A     
0028 26D2 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26D4 7820  46 up      sb    @hb$01,@wyx
     26D6 2012     
     26D8 832A     
0037 26DA 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26DC C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26DE D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26E0 832A     
0051 26E2 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26E4 832A     
0052 26E6 045B  20         b     *r11
                   < runlib.asm
0136               
0138                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26E8 C120  30 yx2px   mov   @wyx,tmp0
     26EA 832A     
0022 26EC C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26EE 06C4  14         swpb  tmp0                  ; Y<->X
0024 26F0 04C5  14         clr   tmp1                  ; Clear before copy
0025 26F2 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 26F4 20A0  32         coc   @wbit1,config         ; f18a present ?
     26F6 201E     
0030 26F8 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 26FA 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     26FC 833A     
     26FE 2728     
0032 2700 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2702 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2704 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2706 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2708 0500     
0037 270A 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 270C D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 270E 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 2710 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2712 D105  18         movb  tmp1,tmp0
0051 2714 06C4  14         swpb  tmp0                  ; X<->Y
0052 2716 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2718 2020     
0053 271A 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 271C 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     271E 2012     
0059 2720 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2722 2024     
0060 2724 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2726 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2728 0050            data   80
0067               
0068               
                   < runlib.asm
0140               
0144               
0148               
0150                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 272A C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 272C 06A0  32         bl    @putvr                ; Write once
     272E 2332     
0015 2730 391C             data  >391c                 ; VR1/57, value 00011100
0016 2732 06A0  32         bl    @putvr                ; Write twice
     2734 2332     
0017 2736 391C             data  >391c                 ; VR1/57, value 00011100
0018 2738 06A0  32         bl    @putvr
     273A 2332     
0019 273C 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 273E 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 2740 C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2742 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2744 2332     
0030 2746 3900             data  >3900
0031 2748 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 274A C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 274C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     274E 2332     
0044 2750 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2752 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2754 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2756 06A0  32         bl    @cpym2v
     2758 2486     
0060 275A 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     275C 279E     
     275E 0008     
0061 2760 06A0  32         bl    @putvr
     2762 2332     
0062 2764 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2766 06A0  32         bl    @putvr
     2768 2332     
0064 276A 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 276C 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     276E 2332     
0068 2770 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2772 0204  20         li    tmp0,>3f00
     2774 3F00     
0073 2776 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2778 22BA     
0074 277A D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     277C 8800     
0075 277E 0984  32         srl   tmp0,8
0076 2780 D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2782 8800     
0077 2784 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2786 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2788 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     278A BFFF     
0081 278C 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 278E 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     2790 4000     
0084               
0085               f18chk_exit:
0086 2792 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     2794 228E     
0087 2796 3F00             data  >3f00,>00,6
     2798 0000     
     279A 0006     
0088 279C 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 279E 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27A0 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27A2 0340             data  >0340                 ; 3f04   0340  idle
0096 27A4 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27A6 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27A8 06A0  32         bl    @putvr
     27AA 2332     
0124 27AC 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27AE 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27B0 2332     
0127 27B2 3900             data  >3900                 ; Lock the F18a
0128 27B4 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27B6 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27B8 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27BA 201E     
0149 27BC 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27BE C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27C0 8802     
0154 27C2 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27C4 2332     
0155 27C6 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27C8 04C4  14         clr   tmp0
0157 27CA D120  30         movb  @vdps,tmp0
     27CC 8802     
0158 27CE 0984  32         srl   tmp0,8
0159 27D0 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0152               
0154                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27D2 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27D4 832A     
0018 27D6 D17B  28         movb  *r11+,tmp1
0019 27D8 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27DA D1BB  28         movb  *r11+,tmp2
0021 27DC 0986  32         srl   tmp2,8                ; Repeat count
0022 27DE C1CB  18         mov   r11,tmp3
0023 27E0 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27E2 23FA     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27E4 020B  20         li    r11,hchar1
     27E6 27EC     
0028 27E8 0460  28         b     @xfilv                ; Draw
     27EA 2294     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27EC 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27EE 2022     
0033 27F0 1302  14         jeq   hchar2                ; Yes, exit
0034 27F2 C2C7  18         mov   tmp3,r11
0035 27F4 10EE  14         jmp   hchar                 ; Next one
0036 27F6 05C7  14 hchar2  inct  tmp3
0037 27F8 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0156               
0160               
0164               
0168               
0170                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 27FA 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     27FC 8334     
0015 27FE 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     2800 2006     
0016 2802 0204  20         li    tmp0,muttab
     2804 2814     
0017 2806 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2808 8400     
0018 280A D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 280C D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 280E D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 2810 D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2812 045B  20         b     *r11
0023 2814 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2816 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2818 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     281A 8334     
0044 281C C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     281E 8336     
0045 2820 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2822 FFF8     
0046 2824 E0BB  30         soc   *r11+,config          ; Set options
0047 2826 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2828 2012     
     282A 831B     
0048 282C 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 282E 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     2830 2006     
0060 2832 1301  14         jeq   sdpla1                ; Yes, play
0061 2834 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2836 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2838 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     283A 831B     
     283C 2000     
0067 283E 1301  14         jeq   sdpla3                ; Play next note
0068 2840 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2842 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2844 2002     
0070 2846 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2848 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     284A 8336     
0075 284C 06C4  14         swpb  tmp0
0076 284E D804  30         movb  tmp0,@vdpa
     2850 8C02     
0077 2852 06C4  14         swpb  tmp0
0078 2854 D804  30         movb  tmp0,@vdpa
     2856 8C02     
0079 2858 04C4  14         clr   tmp0
0080 285A D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     285C 8800     
0081 285E 131E  14         jeq   sdexit                ; Yes. exit
0082 2860 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2862 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2864 8336     
0084 2866 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2868 8800     
     286A 8400     
0085 286C 0604  14         dec   tmp0
0086 286E 16FB  14         jne   vdpla2
0087 2870 D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2872 8800     
     2874 831B     
0088 2876 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2878 8336     
0089 287A 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 287C C120  30 mmplay  mov   @wsdtmp,tmp0
     287E 8336     
0094 2880 D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2882 130C  14         jeq   sdexit                ; Yes, exit
0096 2884 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2886 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2888 8336     
0098 288A D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     288C 8400     
0099 288E 0605  14         dec   tmp1
0100 2890 16FC  14         jne   mmpla2
0101 2892 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     2894 831B     
0102 2896 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2898 8336     
0103 289A 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 289C 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     289E 2004     
0108 28A0 1607  14         jne   sdexi2                ; No, exit
0109 28A2 C820  42         mov   @wsdlst,@wsdtmp
     28A4 8334     
     28A6 8336     
0110 28A8 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28AA 2012     
     28AC 831B     
0111 28AE 045B  20 sdexi1  b     *r11                  ; Exit
0112 28B0 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28B2 FFF8     
0113 28B4 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0172               
0176               
0180               
0184               
0187                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28B6 0649  14         dect  stack
0038 28B8 C64B  30         mov   r11,*stack            ; Push return address
0039 28BA 0649  14         dect  stack
0040 28BC C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28BE 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28C0 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28C2 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28C4 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28C6 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28C8 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28CA 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28CC E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28CE 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28D0 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28D2 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28D4 2912     
     28D6 83C6     
0074 28D8 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28DA 2914     
     28DC 83FA     
0075 28DE C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28E0 2916     
     28E2 83FE     
0076               
0077 28E4 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28E6 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28E8 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28EA 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28EC 83E0     
0084               
0085 28EE 06A0  28         bl    @kscan                ; Call KSCAN
     28F0 000E     
0086 28F2 02E0  18         lwpi  ws1                   ; Activate user workspace
     28F4 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 28F6 D120  30         movb  @>837c,tmp0           ; Get flag
     28F8 837C     
0091 28FA 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 28FC 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 28FE D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     2900 8375     
0097 2902 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2904 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2906 A028     
0103 2908 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     290A 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 290C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 290E C2F9  30         mov   *stack+,r11           ; Pop r11
0110 2910 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2912 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2914 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2916 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0192               
0194                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2918 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 291A C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     291C 8340     
0025 291E 04E0  26         clr   @waux1
     2920 833C     
0026 2922 04E0  26         clr   @waux2
     2924 833E     
0027 2926 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2928 833C     
0028 292A C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 292C 0205  20         li    tmp1,4                ; 4 nibbles
     292E 0004     
0033 2930 C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2932 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2934 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2936 0286  22         ci    tmp2,>000a
     2938 000A     
0039 293A 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 293C C21B  26         mov   *r11,tmp4
0045 293E 0988  32         srl   tmp4,8                ; Right justify
0046 2940 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2942 FFF6     
0047 2944 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2946 C21B  26         mov   *r11,tmp4
0054 2948 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     294A 00FF     
0055               
0056 294C A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 294E 06C6  14         swpb  tmp2
0058 2950 DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2952 0944  24         srl   tmp0,4                ; Next nibble
0060 2954 0605  14         dec   tmp1
0061 2956 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2958 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     295A BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 295C C160  30         mov   @waux3,tmp1           ; Get pointer
     295E 8340     
0067 2960 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2962 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2964 C120  30         mov   @waux2,tmp0
     2966 833E     
0070 2968 06C4  14         swpb  tmp0
0071 296A DD44  32         movb  tmp0,*tmp1+
0072 296C 06C4  14         swpb  tmp0
0073 296E DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 2970 C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2972 8340     
0078 2974 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2976 2016     
0079 2978 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 297A C120  30         mov   @waux1,tmp0
     297C 833C     
0084 297E 06C4  14         swpb  tmp0
0085 2980 DD44  32         movb  tmp0,*tmp1+
0086 2982 06C4  14         swpb  tmp0
0087 2984 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2986 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2988 2020     
0092 298A 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 298C 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 298E 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     2990 7FFF     
0098 2992 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     2994 8340     
0099 2996 0460  28         b     @xutst0               ; Display string
     2998 2420     
0100 299A 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 299C C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     299E 832A     
0122 29A0 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29A2 8000     
0123 29A4 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0196               
0198                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29A6 0207  20 mknum   li    tmp3,5                ; Digit counter
     29A8 0005     
0020 29AA C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29AC C155  26         mov   *tmp1,tmp1            ; /
0022 29AE C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29B0 0228  22         ai    tmp4,4                ; Get end of buffer
     29B2 0004     
0024 29B4 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29B6 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29B8 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29BA 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29BC 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29BE B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29C0 D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29C2 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29C4 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29C6 0607  14         dec   tmp3                  ; Decrease counter
0036 29C8 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29CA 0207  20         li    tmp3,4                ; Check first 4 digits
     29CC 0004     
0041 29CE 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29D0 C11B  26         mov   *r11,tmp0
0043 29D2 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29D4 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29D6 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29D8 05CB  14 mknum3  inct  r11
0047 29DA 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29DC 2020     
0048 29DE 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29E0 045B  20         b     *r11                  ; Exit
0050 29E2 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29E4 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29E6 13F8  14         jeq   mknum3                ; Yes, exit
0053 29E8 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29EA 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29EC 7FFF     
0058 29EE C10B  18         mov   r11,tmp0
0059 29F0 0224  22         ai    tmp0,-4
     29F2 FFFC     
0060 29F4 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 29F6 0206  20         li    tmp2,>0500            ; String length = 5
     29F8 0500     
0062 29FA 0460  28         b     @xutstr               ; Display string
     29FC 2422     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 29FE C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A00 C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A02 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A04 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A06 0207  20         li    tmp3,5                ; Set counter
     2A08 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A0A 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A0C 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A0E 0584  14         inc   tmp0                  ; Next character
0106 2A10 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A12 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A14 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A16 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A18 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A1A 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A1C DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A1E 0607  14         dec   tmp3                  ; Last character ?
0122 2A20 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A22 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A24 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A26 832A     
0141 2A28 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A2A 8000     
0142 2A2C 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0200               
0204               
0208               
0212               
0216               
0218                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A2E 0649  14         dect  stack
0023 2A30 C64B  30         mov   r11,*stack            ; Save return address
0024 2A32 0649  14         dect  stack
0025 2A34 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A36 0649  14         dect  stack
0027 2A38 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A3A 0649  14         dect  stack
0029 2A3C C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A3E 0649  14         dect  stack
0031 2A40 C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A42 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A44 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A46 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A48 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A4A 0649  14         dect  stack
0044 2A4C C64B  30         mov   r11,*stack            ; Save return address
0045 2A4E 0649  14         dect  stack
0046 2A50 C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A52 0649  14         dect  stack
0048 2A54 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A56 0649  14         dect  stack
0050 2A58 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A5A 0649  14         dect  stack
0052 2A5C C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A5E C1D4  26 !       mov   *tmp0,tmp3
0057 2A60 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A62 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A64 00FF     
0059 2A66 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A68 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A6A 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A6C 0584  14         inc   tmp0                  ; Next byte
0067 2A6E 0607  14         dec   tmp3                  ; Shorten string length
0068 2A70 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A72 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A74 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A76 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A78 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A7A C187  18         mov   tmp3,tmp2
0078 2A7C 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A7E DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A80 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A82 24E0     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A84 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A86 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A88 FFCE     
0090 2A8A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A8C 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A8E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A90 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2A92 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2A94 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2A96 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2A98 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2A9A 0649  14         dect  stack
0124 2A9C C64B  30         mov   r11,*stack            ; Save return address
0125 2A9E 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AA0 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AA2 0649  14         dect  stack
0128 2AA4 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AA6 0649  14         dect  stack
0130 2AA8 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AAA 0649  14         dect  stack
0132 2AAC C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2AAE C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2AB0 C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AB2 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AB4 0649  14         dect  stack
0144 2AB6 C64B  30         mov   r11,*stack            ; Save return address
0145 2AB8 0649  14         dect  stack
0146 2ABA C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ABC 0649  14         dect  stack
0148 2ABE C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2AC0 0649  14         dect  stack
0150 2AC2 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AC4 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AC6 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AC8 0586  14         inc   tmp2
0161 2ACA 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ACC 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ACE 0286  22         ci    tmp2,255
     2AD0 00FF     
0167 2AD2 1505  14         jgt   string.getlenc.panic
0168 2AD4 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AD6 0606  14         dec   tmp2                  ; One time adjustment
0174 2AD8 C806  30         mov   tmp2,@waux1           ; Store length
     2ADA 833C     
0175 2ADC 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2ADE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AE0 FFCE     
0181 2AE2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AE4 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AE6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AE8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AEA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AEC C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AEE 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0220               
0224               
0226                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AF0 C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2AF2 F000     
0024 2AF4 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2AF6 F002     
0025 2AF8 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2AFA F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2AFC 0200  20         li    r0,>8306              ; Scratchpad source address
     2AFE 8306     
0030 2B00 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B02 F006     
0031 2B04 0202  20         li    r2,62                 ; Loop counter
     2B06 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B08 CC70  46         mov   *r0+,*r1+
0037 2B0A CC70  46         mov   *r0+,*r1+
0038 2B0C 0642  14         dect  r2
0039 2B0E 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B10 C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B12 83FE     
     2B14 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B16 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B18 F000     
0046 2B1A C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B1C F002     
0047 2B1E C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B20 F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B22 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B24 0200  20         li    r0,cpu.scrpad.tgt
     2B26 F000     
0075 2B28 0201  20         li    r1,>8300
     2B2A 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B2C CC70  46         mov   *r0+,*r1+
0081 2B2E CC70  46         mov   *r0+,*r1+
0082 2B30 0281  22         ci    r1,>8400
     2B32 8400     
0083 2B34 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B36 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0227                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B38 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B3A CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B3C CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B3E CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B40 CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B42 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B44 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B46 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B48 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B4A 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B4C 8310     
0055                                                   ;        as of register r8
0056 2B4E 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B50 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B52 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B54 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B56 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B58 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B5A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B5C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B5E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B60 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B62 0606  14         dec   tmp2
0069 2B64 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B66 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B68 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B6A 2B70     
0075                                                   ; R14=PC
0076 2B6C 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B6E 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B70 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B72 2B24     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B74 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B76 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B78 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B7A 8300     
0126 2B7C 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B7E 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B80 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B82 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B84 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B86 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B88 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B8A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B8C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B8E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B90 0606  14         dec   tmp2
0139 2B92 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2B94 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2B96 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2B98 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0229               
0231                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0232                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2B9A A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2B9C 2B9E             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2B9E C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BA0 C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BA2 A428     
0064 2BA4 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BA6 201C     
0065 2BA8 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BAA 8356     
0066 2BAC C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BAE 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BB0 FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BB2 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BB4 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BB6 06C0  14         swpb  r0                    ;
0075 2BB8 D800  30         movb  r0,@vdpa              ; Send low byte
     2BBA 8C02     
0076 2BBC 06C0  14         swpb  r0                    ;
0077 2BBE D800  30         movb  r0,@vdpa              ; Send high byte
     2BC0 8C02     
0078 2BC2 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BC4 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BC6 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BC8 0704  14         seto  r4                    ; Init counter
0086 2BCA 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BCC A420     
0087 2BCE 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BD0 0584  14         inc   r4                    ; Increment char counter
0089 2BD2 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BD4 0007     
0090 2BD6 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BD8 80C4  18         c     r4,r3                 ; End of name?
0093 2BDA 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BDC 06C0  14         swpb  r0                    ;
0098 2BDE D800  30         movb  r0,@vdpa              ; Send low byte
     2BE0 8C02     
0099 2BE2 06C0  14         swpb  r0                    ;
0100 2BE4 D800  30         movb  r0,@vdpa              ; Send high byte
     2BE6 8C02     
0101 2BE8 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BEA 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BEC DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BEE 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BF0 2D0A     
0109 2BF2 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2BF4 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2BF6 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2BF8 04E0  26         clr   @>83d0
     2BFA 83D0     
0118 2BFC C804  30         mov   r4,@>8354             ; Save name length for search (length
     2BFE 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C00 C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C02 A432     
0121               
0122 2C04 0584  14         inc   r4                    ; Adjust for dot
0123 2C06 A804  30         a     r4,@>8356             ; Point to position after name
     2C08 8356     
0124 2C0A C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C0C 8356     
     2C0E A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C10 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C12 83E0     
0130 2C14 04C1  14         clr   r1                    ; Version found of dsr
0131 2C16 020C  20         li    r12,>0f00             ; Init cru address
     2C18 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C1A C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C1C 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C1E 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C20 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C22 0100     
0145 2C24 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C26 83D0     
0146 2C28 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C2A 2000     
0147 2C2C 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C2E C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C30 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C32 1D00  16         sbo   0                     ; Turn on ROM
0154 2C34 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C36 4000     
0155 2C38 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C3A 2D06     
0156 2C3C 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C3E A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C40 A40A     
0166 2C42 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C44 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C46 83D2     
0172                                                   ; subprogram
0173               
0174 2C48 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C4A C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C4C 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C4E C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C50 83D2     
0183                                                   ; subprogram
0184               
0185 2C52 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C54 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C56 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C58 D160  30         movb  @>8355,r5             ; Get length as counter
     2C5A 8355     
0195 2C5C 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C5E 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C60 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C62 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C64 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C66 A420     
0206 2C68 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C6A 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C6C 0605  14         dec   r5                    ; Update loop counter
0211 2C6E 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C70 0581  14         inc   r1                    ; Next version found
0217 2C72 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C74 A42A     
0218 2C76 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C78 A42C     
0219 2C7A C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C7C A430     
0220               
0221 2C7E 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C80 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C82 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C84 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C86 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C88 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C8A 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C8C 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C8E A400     
0236 2C90 C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2C92 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2C94 A428     
0242                                                   ; (8 or >a)
0243 2C96 0281  26         ci    r1,8                  ; was it 8?
     2C98 0008     
0244 2C9A 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2C9C D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2C9E 8350     
0246                                                   ; Get error byte from @>8350
0247 2CA0 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CA2 06C0  22         swpb  r0                    ;
0255 2CA4 D800  34         movb  r0,@vdpa              ; send low byte
     2CA6 8C02     
0256 2CA8 06C0  22         swpb  r0                    ;
0257 2CAA D800  34         movb  r0,@vdpa              ; send high byte
     2CAC 8C02     
0258 2CAE D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CB0 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CB2 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CB4 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CB6 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CB8 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CBA 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CBC A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CBE 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CC0 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CC2 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CC4 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CC6 201C     
0284                                                   ; / to indicate error
0285 2CC8 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CCA A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CCC 2CCE             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CCE 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CD0 83E0     
0319               
0320 2CD2 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CD4 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CD6 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CD8 A42A     
0325 2CDA C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CDC C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CDE C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CE0 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CE2 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CE4 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CE6 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CE8 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CEA 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CEC 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CEE 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CF0 4000     
     2CF2 2D06     
0340 2CF4 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2CF6 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2CF8 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2CFA 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2CFC 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2CFE A400     
0358 2D00 C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D02 A434     
0359               
0360 2D04 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D06 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D08 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D0A 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0233                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR to return
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 chars maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (fixed records only)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name
0021               ;                                             (Device + '.' + File name)
0022               ;       even
0023               ***************************************************************
0024               
0025               
0026               ***************************************************************
0027               * file.open - Open File for procesing
0028               ***************************************************************
0029               *  bl   @file.open
0030               *       data P0,P1
0031               *--------------------------------------------------------------
0032               *  P0 = Address of PAB in VDP RAM
0033               *  P1 = LSB contains File type/mode
0034               *--------------------------------------------------------------
0035               *  bl   @xfile.open
0036               *
0037               *  R0 = Address of PAB in VDP RAM
0038               *  R1 = LSB contains File type/mode
0039               *--------------------------------------------------------------
0040               *  Output:
0041               *  tmp0     = Copy of VDP PAB byte 1 after operation
0042               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0043               *  tmp2 LSB = Copy of status register after operation
0044               ********|*****|*********************|**************************
0045               file.open:
0046 2D0C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0047 2D0E C07B  46         mov   *r11+,r1              ; Get file type/mode
0048               *--------------------------------------------------------------
0049               * Initialisation
0050               *--------------------------------------------------------------
0051               xfile.open:
0052 2D10 0649  22         dect  stack
0053 2D12 C64B  38         mov   r11,*stack            ; Save return address
0054                       ;------------------------------------------------------
0055                       ; Initialisation
0056                       ;------------------------------------------------------
0057 2D14 0204  24         li    tmp0,dsrlnk.savcru
     2D16 A42A     
0058 2D18 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0059 2D1A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0060 2D1C 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0061 2D1E 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0062                       ;------------------------------------------------------
0063                       ; Set pointer to VDP disk buffer header
0064                       ;------------------------------------------------------
0065 2D20 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D22 37D7     
0066 2D24 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D26 8370     
0067                                                   ; / location
0068 2D28 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D2A A44C     
0069 2D2C 04C5  22         clr   tmp1                  ; io.op.open
0070 2D2E 101F  14         jmp   _file.record.fop      ; Do file operation
0071               
0072               
0073               
0074               ***************************************************************
0075               * file.close - Close currently open file
0076               ***************************************************************
0077               *  bl   @file.close
0078               *       data P0
0079               *--------------------------------------------------------------
0080               *  P0 = Address of PAB in VDP RAM
0081               *--------------------------------------------------------------
0082               *  bl   @xfile.close
0083               *
0084               *  R0 = Address of PAB in VDP RAM
0085               *--------------------------------------------------------------
0086               *  Output:
0087               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0088               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0089               *  tmp2 LSB = Copy of status register after operation
0090               ********|*****|*********************|**************************
0091               file.close:
0092 2D30 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0093               *--------------------------------------------------------------
0094               * Initialisation
0095               *--------------------------------------------------------------
0096               xfile.close:
0097 2D32 0649  22         dect  stack
0098 2D34 C64B  38         mov   r11,*stack            ; Save return address
0099 2D36 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D38 0001     
0100 2D3A 1019  14         jmp   _file.record.fop      ; Do file operation
0101               
0102               
0103               ***************************************************************
0104               * file.record.read - Read record from file
0105               ***************************************************************
0106               *  bl   @file.record.read
0107               *       data P0
0108               *--------------------------------------------------------------
0109               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0110               *--------------------------------------------------------------
0111               *  bl   @xfile.record.read
0112               *
0113               *  R0 = Address of PAB in VDP RAM
0114               *--------------------------------------------------------------
0115               *  Output:
0116               *  tmp0     = Copy of VDP PAB byte 1 after operation
0117               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0118               *  tmp2 LSB = Copy of status register after operation
0119               ********|*****|*********************|**************************
0120               file.record.read:
0121 2D3C C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0122               *--------------------------------------------------------------
0123               * Initialisation
0124               *--------------------------------------------------------------
0125 2D3E 0649  22         dect  stack
0126 2D40 C64B  38         mov   r11,*stack            ; Save return address
0127               
0128 2D42 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D44 0002     
0129 2D46 1013  14         jmp   _file.record.fop      ; Do file operation
0130               
0131               
0132               
0133               ***************************************************************
0134               * file.record.write - Write record to file
0135               ***************************************************************
0136               *  bl   @file.record.write
0137               *       data P0
0138               *--------------------------------------------------------------
0139               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0140               *--------------------------------------------------------------
0141               *  bl   @xfile.record.write
0142               *
0143               *  R0 = Address of PAB in VDP RAM
0144               *--------------------------------------------------------------
0145               *  Output:
0146               *  tmp0     = Copy of VDP PAB byte 1 after operation
0147               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0148               *  tmp2 LSB = Copy of status register after operation
0149               ********|*****|*********************|**************************
0150               file.record.write:
0151 2D48 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0152               *--------------------------------------------------------------
0153               * Initialisation
0154               *--------------------------------------------------------------
0155 2D4A 0649  22         dect  stack
0156 2D4C C64B  38         mov   r11,*stack            ; Save return address
0157               
0158 2D4E C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0159 2D50 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D52 0005     
0160               
0161 2D54 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D56 A43E     
0162               
0163 2D58 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D5A 22CC     
0164                                                   ; \ i  tmp0 = VDP target address
0165                                                   ; / i  tmp1 = Byte to write
0166               
0167 2D5C 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D5E 0003     
0168 2D60 1006  14         jmp   _file.record.fop      ; Do file operation
0169               
0170               
0171               
0172               file.record.seek:
0173 2D62 1000  14         nop                         ; Not yet supported
0174               
0175               
0176               file.image.load:
0177 2D64 1000  14         nop                         ; Not yet supported
0178               
0179               
0180               file.image.save:
0181 2D66 1000  14         nop                         ; Not yet supported
0182               
0183               
0184               file.delete:
0185 2D68 1000  14         nop                         ; Not yet supported
0186               
0187               file.rename:
0188 2D6A 1000  14         nop                         ; Not yet supported
0189               
0190               
0191               file.status:
0192 2D6C 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D6E C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D70 A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D72 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D74 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D76 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D78 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D7A 22CC     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D7C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D7E 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D80 C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D82 A44C     
0246               
0247 2D84 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D86 22CC     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D88 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D8A 0009     
0254 2D8C C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D8E 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D90 C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2D92 8322     
     2D94 833C     
0259               
0260 2D96 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2D98 A42A     
0261 2D9A 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2D9C 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2D9E 2B9A     
0268 2DA0 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DA2 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DA4 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DA6 2CCA     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DA8 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DAA C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DAC 833C     
     2DAE 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DB0 C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DB2 A436     
0292 2DB4 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DB6 0005     
0293 2DB8 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DBA 22E4     
0294 2DBC C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DBE C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DC0 C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DC2 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0235               
0237                       copy  "rom_fg99.asm"             ; FinalGROM 99 support
     **** ****     > rom_fg99.asm
0001               * FILE......: rom_fg99.asm
0002               * Purpose...: FinalGROM 99 reload code
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               FinalGROM 99 reload cartridge code
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * fg99 - Load cartridge from flash card into FinalGROM99
0010               ***************************************************************
0011               *  bl   @fg99
0012               *       data p0
0013               *
0014               *  p0 = Pointer to FG99 cartridge table entry
0015               *--------------------------------------------------------------
0016               *  bl   @xfg99
0017               *
0018               *  tmp0 = Pointer to FG99 cartridge table entry
0019               *--------------------------------------------------------------
0020               * Remark
0021               * https://github.com/endlos99/finalgrom99/blob/master/lib/reload_example.a99
0022               *
0023               * NOTE: You must use shortened 8.3 upper-case filenames here.
0024               *       For example, to reload "mylongfile.bin", use "MYLONG~1.BIN".
0025               *       If there are multiple files with prefix "MYLONG" in the
0026               *       folder, you may have to replace the suffix "~1" by "~2",
0027               *       "~3", ... to select the correct file.
0028               *
0029               *       PAD filename with >00 bytes so that it's always 8 bytes.
0030               *       Code is expected to run from RAM, not from the cartridge space.
0031               ********|*****|*********************|**************************
0032 2DC4 C13B  46 fg99    mov   *r11+,tmp0            ; Get p0
0033               *--------------------------------------------------------------
0034               * Register version
0035               *--------------------------------------------------------------
0036               xfg99:
0037 2DC6 0649  22         dect  stack
0038 2DC8 C64B  38         mov   r11,*stack            ; Save return address
0039 2DCA 0649  22         dect  stack
0040 2DCC C644  38         mov   tmp0,*stack           ; Push tmp0
0041               *--------------------------------------------------------------
0042               * (1) Send prefix and filename to FinalGROM
0043               *--------------------------------------------------------------
0044 2DCE C004  30         mov   tmp0,r0               ; Get Pointer
0045 2DD0 0202  24         li    r2,20                 ; Len = prefix (8) + fname (8) + suffix (4)
     2DD2 0014     
0046               fg99.send.loop:
0047 2DD4 04E0  34         clr   @>6000                ; Signal new byte
     2DD6 6000     
0048 2DD8 0201  24         li    r1,>0038              ; >7000 >> 9
     2DDA 0038     
0049 2DDC D070  44         movb  *r0+,r1
0050 2DDE 0B71  38         src   r1,7                  ; >7000 + (byte << 1)
0051               
0052 2DE0 04D1  30         clr   *r1                   ; Send byte
0053 2DE2 0602  22         dec   r2                    ; Prepare for next iteration
0054 2DE4 16F7  14         jne   fg99.send.loop        ; Next byte
0055               
0056 2DE6 04E0  34         clr   @>6000                ; Done sending filename
     2DE8 6000     
0057 2DEA 0B80  40         src   r0,8                  ; Burn at least 21 cycles
0058               *--------------------------------------------------------------
0059               * (3) Wait for image to be loaded by FinalGROM
0060               *--------------------------------------------------------------
0061               fg99.wait:
0062 2DEC 0200  24         li    r0,>6000              ; check >6000->6200
     2DEE 6000     
0063 2DF0 0202  24         li    r2,>100
     2DF2 0100     
0064 2DF4 C070  46 !       mov   *r0+, r1
0065 2DF6 1603  14         jne   fg99.exit             ; Done loading, run cartridge
0066 2DF8 0602  22         dec   r2
0067 2DFA 16FC  14         jne   -!
0068 2DFC 10F7  14         jmp   fg99.wait
0069               *--------------------------------------------------------------
0070               * (4) Image finished loading
0071               *--------------------------------------------------------------
0072               fg99.exit:
0073 2DFE C139  46         mov   *stack+,tmp0          ; Pop tmp0
0074 2E00 C2F9  46         mov   *stack+,r11           ; Pop R11
0075 2E02 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0239               
0240               *//////////////////////////////////////////////////////////////
0241               *                            TIMERS
0242               *//////////////////////////////////////////////////////////////
0243               
0244                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2E04 0300  22 tmgr    limi  0                     ; No interrupt processing
     2E06 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2E08 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2E0A 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2E0C 2360  32         coc   @wbit2,r13            ; C flag on ?
     2E0E 201C     
0029 2E10 1602  14         jne   tmgr1a                ; No, so move on
0030 2E12 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2E14 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2E16 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2E18 2020     
0035 2E1A 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2E1C 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2E1E 2010     
0048 2E20 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2E22 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2E24 200E     
0050 2E26 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2E28 0460  28         b     @kthread              ; Run kernel thread
     2E2A 2EA2     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2E2C 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2E2E 2014     
0056 2E30 13EB  14         jeq   tmgr1
0057 2E32 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E34 2012     
0058 2E36 16E8  14         jne   tmgr1
0059 2E38 C120  38         mov   @wtiusr,tmp0
     2E3A 832E     
0060 2E3C 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E3E 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E40 2EA0     
0065 2E42 C10A  30         mov   r10,tmp0
0066 2E44 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E46 00FF     
0067 2E48 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E4A 201C     
0068 2E4C 1303  14         jeq   tmgr5
0069 2E4E 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E50 003C     
0070 2E52 1002  14         jmp   tmgr6
0071 2E54 0284  26 tmgr5   ci    tmp0,50
     2E56 0032     
0072 2E58 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E5A 1001  14         jmp   tmgr8
0074 2E5C 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E5E C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E60 832C     
0079 2E62 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E64 FF00     
0080 2E66 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E68 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E6A 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E6C 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E6E C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E70 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E72 830C     
     2E74 830D     
0089 2E76 1608  14         jne   tmgr10                ; No, get next slot
0090 2E78 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E7A FF00     
0091 2E7C C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E7E C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E80 8330     
0096 2E82 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E84 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E86 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E88 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E8A 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E8C 8315     
     2E8E 8314     
0103 2E90 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E92 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E94 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E96 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E98 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E9A 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E9C FF00     
0109 2E9E 10B4  14         jmp   tmgr1
0110 2EA0 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0245                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2EA2 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2EA4 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2EA6 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2EA8 2006     
0023 2EAA 1602  14         jne   kthread_kb
0024 2EAC 06A0  36         bl    @sdpla1               ; Run sound player
     2EAE 2836     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2EB0 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2EB2 28B6     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2EB4 0460  28         b     @tmgr3                ; Exit
     2EB6 2E2C     
                   < runlib.asm
0246                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2EB8 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2EBA 832E     
0018 2EBC E0A0  42         soc   @wbit7,config         ; Enable user hook
     2EBE 2012     
0019 2EC0 045B  24 mkhoo1  b     *r11                  ; Return
0020      2E08     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2EC2 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2EC4 832E     
0029 2EC6 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2EC8 FEFF     
0030 2ECA 045B  24         b     *r11                  ; Return
                   < runlib.asm
0247               
0249                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2ECC C13B  46 mkslot  mov   *r11+,tmp0
0018 2ECE C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2ED0 C184  30         mov   tmp0,tmp2
0023 2ED2 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2ED4 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2ED6 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2ED8 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EDA 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EDC C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EDE 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EE0 2022     
0035 2EE2 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EE4 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EE6 05CB  22 mkslo1  inct  r11
0041 2EE8 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EEA C13B  46 clslot  mov   *r11+,tmp0
0053 2EEC 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EEE A120  38         a     @wtitab,tmp0          ; Add table base
     2EF0 832C     
0055 2EF2 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EF4 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EF6 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EF8 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EFA 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2EFC A120  38         a     @wtitab,tmp0          ; Add table base
     2EFE 832C     
0071 2F00 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2F02 C154  38         mov   *tmp0,tmp1
0073 2F04 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2F06 FF00     
0074 2F08 C505  38         mov   tmp1,*tmp0
0075 2F0A 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0251               
0252               
0253               
0254               *//////////////////////////////////////////////////////////////
0255               *                    RUNLIB INITIALISATION
0256               *//////////////////////////////////////////////////////////////
0257               
0258               ***************************************************************
0259               *  RUNLIB - Runtime library initalisation
0260               ***************************************************************
0261               *  B  @RUNLIB
0262               *--------------------------------------------------------------
0263               *  REMARKS
0264               *  if R0 in WS1 equals >4a4a we were called from the system
0265               *  crash handler so we return there after initialisation.
0266               
0267               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0268               *  after clearing scratchpad memory. This has higher priority
0269               *  as crash handler flag R0.
0270               ********|*****|*********************|**************************
0277 2F0C 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2F0E 8302     
0279               *--------------------------------------------------------------
0280               * Alternative entry point
0281               *--------------------------------------------------------------
0282 2F10 0300  22 runli1  limi  0                     ; Turn off interrupts
     2F12 0000     
0283 2F14 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2F16 8300     
0284 2F18 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2F1A 83C0     
0285               *--------------------------------------------------------------
0286               * Clear scratch-pad memory from R4 upwards
0287               *--------------------------------------------------------------
0288 2F1C 0202  20 runli2  li    r2,>8308
     2F1E 8308     
0289 2F20 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0290 2F22 0282  22         ci    r2,>8400
     2F24 8400     
0291 2F26 16FC  14         jne   runli3
0292               *--------------------------------------------------------------
0293               * Exit to TI-99/4A title screen ?
0294               *--------------------------------------------------------------
0295 2F28 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2F2A FFFF     
0296 2F2C 1602  14         jne   runli4                ; No, continue
0297 2F2E 0420  42         blwp  @0                    ; Yes, bye bye
     2F30 0000     
0298               *--------------------------------------------------------------
0299               * Determine if VDP is PAL or NTSC
0300               *--------------------------------------------------------------
0301 2F32 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F34 833C     
0302 2F36 04C1  14         clr   r1                    ; Reset counter
0303 2F38 0202  20         li    r2,10                 ; We test 10 times
     2F3A 000A     
0304 2F3C C0E0  30 runli5  mov   @vdps,r3
     2F3E 8802     
0305 2F40 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F42 2020     
0306 2F44 1302  14         jeq   runli6
0307 2F46 0581  14         inc   r1                    ; Increase counter
0308 2F48 10F9  14         jmp   runli5
0309 2F4A 0602  14 runli6  dec   r2                    ; Next test
0310 2F4C 16F7  14         jne   runli5
0311 2F4E 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F50 1250     
0312 2F52 1202  14         jle   runli7                ; No, so it must be NTSC
0313 2F54 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F56 201C     
0314               *--------------------------------------------------------------
0315               * Copy machine code to scratchpad (prepare tight loop)
0316               *--------------------------------------------------------------
0317 2F58 06A0  32 runli7  bl    @loadmc
     2F5A 221A     
0318               *--------------------------------------------------------------
0319               * Initialize registers, memory, ...
0320               *--------------------------------------------------------------
0321 2F5C 04C1  14 runli9  clr   r1
0322 2F5E 04C2  14         clr   r2
0323 2F60 04C3  14         clr   r3
0324 2F62 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F64 A900     
0325 2F66 020F  20         li    r15,vdpw              ; Set VDP write address
     2F68 8C00     
0327 2F6A 06A0  32         bl    @mute                 ; Mute sound generators
     2F6C 27FA     
0329               *--------------------------------------------------------------
0330               * Setup video memory
0331               *--------------------------------------------------------------
0333 2F6E 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F70 4A4A     
0334 2F72 1605  14         jne   runlia
0335 2F74 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F76 228E     
0336 2F78 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F7A 0000     
     2F7C 3000     
0341 2F7E 06A0  32 runlia  bl    @filv
     2F80 228E     
0342 2F82 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F84 00F4     
     2F86 0010     
0343               *--------------------------------------------------------------
0344               * Check if there is a F18A present
0345               *--------------------------------------------------------------
0349 2F88 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F8A 272A     
0350 2F8C 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F8E 2754     
0351 2F90 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F92 2754     
0352 2F94 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F96 2754     
0353 2F98 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F9A 2740     
0354               
0355 2F9C 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F9E 2332     
0356 2FA0 3201                   data >3201            ; F18a VR50 (>32), bit 1
0358               *--------------------------------------------------------------
0359               * Check if there is a speech synthesizer attached
0360               *--------------------------------------------------------------
0362               *       <<skipped>>
0366               *--------------------------------------------------------------
0367               * Load video mode table & font
0368               *--------------------------------------------------------------
0369 2FA2 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2FA4 22F8     
0370 2FA6 7F10             data  spvmod                ; Equate selected video mode table
0371 2FA8 0204  20         li    tmp0,spfont           ; Get font option
     2FAA 0000     
0372 2FAC 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0373 2FAE 1304  14         jeq   runlid                ; Yes, skip it
0374 2FB0 06A0  32         bl    @ldfnt
     2FB2 2360     
0375 2FB4 1100             data  fntadr,spfont         ; Load specified font
     2FB6 0000     
0376               *--------------------------------------------------------------
0377               * Did a system crash occur before runlib was called?
0378               *--------------------------------------------------------------
0379 2FB8 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2FBA 4A4A     
0380 2FBC 1602  14         jne   runlie                ; No, continue
0381 2FBE 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2FC0 2086     
0382               *--------------------------------------------------------------
0383               * Branch to main program
0384               *--------------------------------------------------------------
0385 2FC2 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2FC4 0040     
0386 2FC6 0460  28         b     @main                 ; Give control to main program
     2FC8 6046     
                   < stevie_b1.asm
0053                       copy  "rom.resident.asm"
     **** ****     > rom.resident.asm
0001               * FILE......: rom.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP RAM callable from all ROM banks.
0003               
0004                 ; Watch out! Avoid relying on calling code stored in the cartridge ROM area.
0005                 ; It's easier to directly do farjmp call, and this is what we do.
0006                 ; Especially for the spectra2 tasks
0007               
0008                       ;------------------------------------------------------
0009                       ; Low-level modules
0010                       ;------------------------------------------------------
0011                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1,p2
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2,tmp3
0022               *--------------------------------------------------------------
0023               *  Remarks
0024               *  r11 gets pushed/popped from farjump stack, not from normal
0025               *  value stack.
0026               ********|*****|*********************|**************************
0027               rom.farjump:
0028 2FCA 0649  14         dect  stack
0029 2FCC C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FCE 0649  14         dect  stack
0031 2FD0 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FD2 0649  14         dect  stack
0033 2FD4 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FD6 0649  14         dect  stack
0035 2FD8 C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Parameters
0038                       ;------------------------------------------------------
0039 2FDA C13B  30         mov   *r11+,tmp0            ; P0
0040 2FDC C17B  30         mov   *r11+,tmp1            ; P1
0041 2FDE C1BB  30         mov   *r11+,tmp2            ; P2
0042 2FE0 1008  14         jmp   xrom.farjump.push_return
0043                       ;------------------------------------------------------
0044                       ; Push registers to value stack (but not r11!)
0045                       ;------------------------------------------------------
0046               xrom.farjump:
0047 2FE2 0649  14         dect  stack
0048 2FE4 C644  30         mov   tmp0,*stack           ; Push tmp0
0049 2FE6 0649  14         dect  stack
0050 2FE8 C645  30         mov   tmp1,*stack           ; Push tmp1
0051 2FEA 0649  14         dect  stack
0052 2FEC C646  30         mov   tmp2,*stack           ; Push tmp2
0053 2FEE 0649  14         dect  stack
0054 2FF0 C647  30         mov   tmp3,*stack           ; Push tmp3
0055                       ;------------------------------------------------------
0056                       ; Push to farjump return stack
0057                       ;------------------------------------------------------
0058               xrom.farjump.push_return:
0059 2FF2 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FF4 6000     
0060 2FF6 1116  14         jlt   rom.farjump.bankswitch.failed1
0061                                                   ; Crash if bogus value in bank write address
0062               
0063 2FF8 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FFA A228     
0064 2FFC 0647  14         dect  tmp3
0065 2FFE C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0066 3000 0647  14         dect  tmp3
0067 3002 C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0068 3004 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     3006 A228     
0069               
0073               
0074                       ;------------------------------------------------------
0075                       ; Bankswitch to target 8K ROM bank
0076                       ;------------------------------------------------------
0077               rom.farjump.bankswitch.target.rom8k:
0078 3008 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0079 300A 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0080                       ;------------------------------------------------------
0081                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0082                       ;------------------------------------------------------
0083               rom.farjump.bankswitch.tgt.advfg99:
0084 300C 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0085 300E 0224  22         ai    tmp0,>0800
     3010 0800     
0086 3012 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0087                       ;------------------------------------------------------
0088                       ; Bankswitch to target bank(s) completed
0089                       ;------------------------------------------------------
0090               rom.farjump.bankswitch.tgt.done:
0091                       ;------------------------------------------------------
0092                       ; Deref vector from @trmpvector if >ffff
0093                       ;------------------------------------------------------
0094 3014 0285  22         ci    tmp1,>ffff
     3016 FFFF     
0095 3018 1602  14         jne   !
0096 301A C160  34         mov   @trmpvector,tmp1
     301C A034     
0097                       ;------------------------------------------------------
0098                       ; Deref value in vector
0099                       ;------------------------------------------------------
0100 301E C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0101 3020 1301  14         jeq   rom.farjump.bankswitch.failed1
0102                                                   ; Crash if null-pointer in vector
0103               
0104 3022 1004  14         jmp   rom.farjump.bankswitch.call
0105                                                   ; Call function in target bank
0106                       ;------------------------------------------------------
0107                       ; Assert 1 failed before bank-switch
0108                       ;------------------------------------------------------
0109               rom.farjump.bankswitch.failed1:
0110 3024 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3026 FFCE     
0111 3028 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     302A 2026     
0112                       ;------------------------------------------------------
0113                       ; Call function in target bank
0114                       ;------------------------------------------------------
0115               rom.farjump.bankswitch.call:
0116 302C 0694  24         bl    *tmp0                 ; Call function
0117                       ;------------------------------------------------------
0118                       ; Bankswitch back to source bank
0119                       ;------------------------------------------------------
0120               rom.farjump.return:
0121 302E C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     3030 A228     
0122 3032 C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0123 3034 1319  14         jeq   rom.farjump.bankswitch.failed2
0124                                                   ; Crash if null-pointer in address
0125               
0126 3036 04F4  30         clr   *tmp0+                ; Remove bank write address from
0127                                                   ; farjump stack
0128               
0129 3038 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0130               
0131 303A 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0132                                                   ; farjump stack
0133               
0134                       ;------------------------------------------------------
0135                       ; Assert on memory source address in cartridge space
0136                       ;------------------------------------------------------
0137               rom.farjump.assert.cart:
0138 303C 028B  22         ci    r11,>6000
     303E 6000     
0139 3040 1104  14         jlt   rom.farjump.assert.lowmem
0140 3042 028B  22         ci    r11,>7fff
     3044 7FFF     
0141 3046 1510  14         jgt   rom.farjump.bankswitch.failed2
0142 3048 1006  14         jmp   !
0143                       ;------------------------------------------------------
0144                       ; Assert on memory source address in low memory expansion
0145                       ;------------------------------------------------------
0146               rom.farjump.assert.lowmem:
0147 304A 028B  22         ci    r11,>2000
     304C 2000     
0148 304E 110C  14         jlt   rom.farjump.bankswitch.failed2
0149 3050 028B  22         ci    r11,>3fff
     3052 3FFF     
0150 3054 1509  14         jgt   rom.farjump.bankswitch.failed2
0151                       ;------------------------------------------------------
0152                       ; Update farjump return stack pointer
0153                       ;------------------------------------------------------
0154 3056 C804  38 !       mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3058 A228     
0155               
0159                       ;------------------------------------------------------
0160                       ; Bankswitch to source 8K ROM bank
0161                       ;------------------------------------------------------
0162               rom.farjump.bankswitch.src.rom8k:
0163 305A 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0164 305C 1009  14         jmp   rom.farjump.exit
0165                       ;------------------------------------------------------
0166                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0167                       ;------------------------------------------------------
0168               rom.farjump.bankswitch.src.advfg99:
0169 305E 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0170 3060 0225  22         ai    tmp1,>0800
     3062 0800     
0171 3064 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0172 3066 1004  14         jmp   rom.farjump.exit
0173                       ;------------------------------------------------------
0174                       ; Assert 2 failed after bank-switch
0175                       ;------------------------------------------------------
0176               rom.farjump.bankswitch.failed2:
0177 3068 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     306A FFCE     
0178 306C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     306E 2026     
0179                       ;-------------------------------------------------------
0180                       ; Exit
0181                       ;-------------------------------------------------------
0182               rom.farjump.exit:
0183 3070 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0184 3072 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0185 3074 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 3076 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187                       ;
0188                       ; Attention!
0189                       ; r11 was popped from farjump stack, not from value stack!
0190                       ; See rom.farjump.return
0191                       ;
0192 3078 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0012                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Initialize framebuffer
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 307A 0649  14         dect  stack
0021 307C C64B  30         mov   r11,*stack            ; Save return address
0022 307E 0649  14         dect  stack
0023 3080 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3082 0649  14         dect  stack
0025 3084 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3086 0204  20         li    tmp0,fb.top
     3088 D000     
0030 308A C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     308C A300     
0031 308E 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     3090 A304     
0032 3092 04E0  34         clr   @fb.row               ; Current row=0
     3094 A306     
0033 3096 04E0  34         clr   @fb.column            ; Current column=0
     3098 A30C     
0034               
0035 309A 0204  20         li    tmp0,colrow
     309C 0050     
0036 309E C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     30A0 A30E     
0037 30A2 04E0  34         clr   @fb.vwco              ; Set view window column offset
     30A4 A310     
0038               
0039 30A6 0204  20         li    tmp0,pane.botrow-1    ; \ Framebuffer
     30A8 001C     
0040 30AA C804  38         mov   tmp0,@fb.scrrows.max  ; / Maximum number of physical rows for fb
     30AC A31E     
0041               
0042 30AE 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     30B0 3116     
0043                                                   ; \ i  @tv.ruler.visible = Ruler visible
0044                                                   ; | i  @edb.special.file = Special file flag
0045                                                   ; / i  @tv.error.visible = Error visible
0046               
0047 30B2 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     30B4 A224     
0048 30B6 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     30B8 A312     
0049 30BA 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     30BC A318     
0050 30BE 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     30C0 A31A     
0051                       ;------------------------------------------------------
0052                       ; Clear frame buffer
0053                       ;------------------------------------------------------
0054 30C2 06A0  32         bl    @film
     30C4 2236     
0055 30C6 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     30C8 0000     
     30CA 0960     
0056                       ;------------------------------------------------------
0057                       ; Exit
0058                       ;------------------------------------------------------
0059               fb.init.exit:
0060 30CC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0061 30CE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 30D0 C2F9  30         mov   *stack+,r11           ; Pop r11
0063 30D2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0013                       copy  "fb.row2line.asm"        ; Calculate line in editor buffer
     **** ****     > fb.row2line.asm
0001               * FILE......: fb.row2line.asm
0002               * Purpose...: Calculate line in editor buffer
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 30D4 0649  14         dect  stack
0025 30D6 C64B  30         mov   r11,*stack            ; Save return address
0026 30D8 0649  14         dect  stack
0027 30DA C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 30DC C120  34         mov   @parm1,tmp0
     30DE A006     
0032 30E0 A120  34         a     @fb.topline,tmp0
     30E2 A304     
0033 30E4 C804  38         mov   tmp0,@outparm1
     30E6 A018     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30EA C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30EC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0014                       copy  "fb.calc.pointer.asm"    ; Calculate pointer address frame buffer
     **** ****     > fb.calc.pointer.asm
0001               * FILE......: fb.calc.pointer.asm
0002               * Purpose...: Calculate pointer address in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.pointer
0006               * Calculate pointer address in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.pointer
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.topline   = Top line in frame buffer
0013               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0014               * @fb.column    = Current column in frame buffer
0015               * @fb.colsline  = Columns per line in frame buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @fb.current   = Updated pointer
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1
0022               *--------------------------------------------------------------
0023               * Formula
0024               * pointer = row * colsline + column + deref(@fb.top.ptr)
0025               ********|*****|*********************|**************************
0026               fb.calc.pointer:
0027 30EE 0649  14         dect  stack
0028 30F0 C64B  30         mov   r11,*stack            ; Save return address
0029 30F2 0649  14         dect  stack
0030 30F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 30F6 0649  14         dect  stack
0032 30F8 C645  30         mov   tmp1,*stack           ; Push tmp1
0033                       ;------------------------------------------------------
0034                       ; Calculate pointer
0035                       ;------------------------------------------------------
0036 30FA C120  34         mov   @fb.row,tmp0
     30FC A306     
0037 30FE 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     3100 A30E     
0038 3102 A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     3104 A30C     
0039 3106 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     3108 A300     
0040 310A C805  38         mov   tmp1,@fb.current
     310C A302     
0041                       ;------------------------------------------------------
0042                       ; Exit
0043                       ;------------------------------------------------------
0044               fb.calc.pointer.exit:
0045 310E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0046 3110 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 3112 C2F9  30         mov   *stack+,r11           ; Pop r11
0048 3114 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0015                       copy  "fb.calc.scrrows.asm"    ; Calculate number of rows frame buffer
     **** ****     > fb.calc.scrrows.asm
0001               * FILE......: fb.calc.scrrows.asm
0002               * Purpose...: Calculate number of available rows in frame buffer
0003               
0004               ***************************************************************
0005               * fb.calc.scrrows
0006               * Calculate number of available rows in frame buffer
0007               ***************************************************************
0008               * bl @fb.calc.scrrows
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.ruler.visible = Ruler visible on screen flag
0012               * @edb.special.file = Special file flag (e.g. Master Catalog)
0013               * @tv.error.visible = Error area visible on screen flag
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @fb.scrrows = Number of available rows in frame buffer
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * none
0020               *--------------------------------------------------------------
0021               * Remarks
0022               * none
0023               ********|*****|*********************|**************************
0024               fb.calc.scrrows:
0025 3116 0649  14         dect  stack
0026 3118 C64B  30         mov   r11,*stack            ; Save return address
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 311A C820  54         mov   @fb.scrrows.max,@fb.scrrows
     311C A31E     
     311E A31C     
0031                                                   ; Set maximum number of available rows
0032                       ;------------------------------------------------------
0033                       ; (1) Handle ruler visible on screen
0034                       ;------------------------------------------------------
0035               fb.calc.scrrows.handle.ruler:
0036 3120 0760  38         abs   @tv.ruler.visible     ; Ruler visible?
     3122 A210     
0037 3124 1302  14         jeq   fb.calc.scrrows.handle.mc
0038 3126 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     3128 A31C     
0039                       ;------------------------------------------------------
0040                       ; (2) Handle Master Catalog
0041                       ;------------------------------------------------------
0042               fb.calc.scrrows.handle.mc:
0043 312A 8820  50         c     @edb.special.file,@const.0
     312C A522     
     312E 2000     
0044 3130 1302  14         jeq   fb.calc.scrrows.handle.errors
0045 3132 0620  34         dec   @fb.scrrows           ; Yes, adjust rows
     3134 A31C     
0046                       ;------------------------------------------------------
0047                       ; (3) Handle error area
0048                       ;------------------------------------------------------
0049               fb.calc.scrrows.handle.errors:
0050 3136 0760  38         abs   @tv.error.visible     ; Error area visible?
     3138 A22A     
0051 313A 1303  14         jeq   fb.calc.scrrows.exit
0052 313C 6820  54         s     @tv.error.rows,@fb.scrrows
     313E A22C     
     3140 A31C     
0053                                                   ; Yes, adjust rows
0054                       ;-------------------------------------------------------
0055                       ; Exit
0056                       ;-------------------------------------------------------
0057               fb.calc.scrrows.exit:
0058 3142 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 3144 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0016                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 3146 0649  14         dect  stack
0052 3148 C64B  30         mov   r11,*stack            ; Save return address
0053 314A 0649  14         dect  stack
0054 314C C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 314E 0204  20         li    tmp0,idx.top
     3150 B000     
0059 3152 C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     3154 A502     
0060               
0061 3156 C120  34         mov   @tv.sams.b000,tmp0
     3158 A206     
0062 315A C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     315C A600     
0063 315E C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     3160 A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 3162 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     3164 0004     
0068 3166 C804  38         mov   tmp0,@idx.sams.hipage ; /
     3168 A604     
0069               
0070 316A 06A0  32         bl    @_idx.sams.mapcolumn.on
     316C 3188     
0071                                                   ; Index in continuous memory region
0072               
0073 316E 06A0  32         bl    @film
     3170 2236     
0074 3172 B000                   data idx.top,>00,idx.size * 5
     3174 0000     
     3176 5000     
0075                                                   ; Clear index
0076               
0077 3178 06A0  32         bl    @_idx.sams.mapcolumn.off
     317A 31BC     
0078                                                   ; Restore memory window layout
0079               
0080 317C C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     317E A602     
     3180 A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 3182 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 3184 C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3186 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3188 0649  14         dect  stack
0102 318A C64B  30         mov   r11,*stack            ; Push return address
0103 318C 0649  14         dect  stack
0104 318E C644  30         mov   tmp0,*stack           ; Push tmp0
0105 3190 0649  14         dect  stack
0106 3192 C645  30         mov   tmp1,*stack           ; Push tmp1
0107 3194 0649  14         dect  stack
0108 3196 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3198 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     319A A602     
0113 319C 0205  20         li    tmp1,idx.top
     319E B000     
0114 31A0 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     31A2 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 31A4 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     31A6 2576     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 31A8 0584  14         inc   tmp0                  ; Next SAMS index page
0123 31AA 0225  22         ai    tmp1,>1000            ; Next memory region
     31AC 1000     
0124 31AE 0606  14         dec   tmp2                  ; Update loop counter
0125 31B0 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 31B2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 31B4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 31B6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 31B8 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 31BA 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 31BC 0649  14         dect  stack
0151 31BE C64B  30         mov   r11,*stack            ; Push return address
0152 31C0 0649  14         dect  stack
0153 31C2 C644  30         mov   tmp0,*stack           ; Push tmp0
0154 31C4 0649  14         dect  stack
0155 31C6 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 31C8 0649  14         dect  stack
0157 31CA C646  30         mov   tmp2,*stack           ; Push tmp2
0158 31CC 0649  14         dect  stack
0159 31CE C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 31D0 0205  20         li    tmp1,idx.top
     31D2 B000     
0164 31D4 0206  20         li    tmp2,5                ; Always 5 pages
     31D6 0005     
0165 31D8 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     31DA A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 31DC C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 31DE 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     31E0 2576     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 31E2 0225  22         ai    tmp1,>1000            ; Next memory region
     31E4 1000     
0176 31E6 0606  14         dec   tmp2                  ; Update loop counter
0177 31E8 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 31EA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 31EC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 31EE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 31F0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 31F2 C2F9  30         mov   *stack+,r11           ; Pop return address
0187 31F4 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 31F6 0649  14         dect  stack
0212 31F8 C64B  30         mov   r11,*stack            ; Save return address
0213 31FA 0649  14         dect  stack
0214 31FC C644  30         mov   tmp0,*stack           ; Push tmp0
0215 31FE 0649  14         dect  stack
0216 3200 C645  30         mov   tmp1,*stack           ; Push tmp1
0217 3202 0649  14         dect  stack
0218 3204 C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3206 C184  18         mov   tmp0,tmp2             ; Line number
0223 3208 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 320A 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     320C 0800     
0225               
0226 320E 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 3210 0A16  18         sla   tmp2,1                ; line number * 2
0231 3212 C806  38         mov   tmp2,@outparm1        ; Offset index entry
     3214 A018     
0232               
0233 3216 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     3218 A602     
0234 321A 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     321C A600     
0235               
0236 321E 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 3220 C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     3222 A600     
0242 3224 C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     3226 A206     
0243 3228 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 322A 0205  20         li    tmp1,>b000            ; Memory window for index page
     322C B000     
0246               
0247 322E 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     3230 2576     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 3232 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     3234 A604     
0254 3236 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 3238 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     323A A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 323C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 323E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 3240 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 3242 C2F9  30         mov   *stack+,r11           ; Pop r11
0265 3244 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0017                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 3246 0649  14         dect  stack
0023 3248 C64B  30         mov   r11,*stack            ; Save return address
0024 324A 0649  14         dect  stack
0025 324C C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 324E 0204  20         li    tmp0,edb.top          ; \
     3250 C000     
0030 3252 C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     3254 A500     
0031 3256 C804  38         mov   tmp0,@edb.next_free.ptr
     3258 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 325A 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     325C A50A     
0035               
0036 325E 0204  20         li    tmp0,1
     3260 0001     
0037 3262 C804  38         mov   tmp0,@edb.lines       ; Lines=1
     3264 A504     
0038               
0039 3266 0720  34         seto  @edb.block.m1         ; Reset block start line
     3268 A50E     
0040 326A 0720  34         seto  @edb.block.m2         ; Reset block end line
     326C A510     
0041               
0042 326E C820  54         mov   @tv.lineterm,@edb.lineterm
     3270 A236     
     3272 A524     
0043                                                   ; Set line termination char from default
0044               
0045 3274 0204  20         li    tmp0,txt.newfile      ; "New file"
     3276 3B10     
0046 3278 C804  38         mov   tmp0,@edb.filename.ptr
     327A A514     
0047               
0048 327C 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     327E A440     
0049 3280 04E0  34         clr   @fh.kilobytes.prev    ; /
     3282 A45C     
0050               
0051 3284 0204  20         li    tmp0,txt.filetype.none
     3286 3C30     
0052 3288 C804  38         mov   tmp0,@edb.filetype.ptr
     328A A516     
0053               
0054               edb.init.exit:
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058 328C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 328E C2F9  30         mov   *stack+,r11           ; Pop r11
0060 3290 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0018                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 3292 0649  14         dect  stack
0023 3294 C64B  30         mov   r11,*stack            ; Save return address
0024 3296 0649  14         dect  stack
0025 3298 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 329A 0649  14         dect  stack
0027 329C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Initialize
0030                       ;------------------------------------------------------
0031 329E 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     32A0 E000     
0032 32A2 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     32A4 A700     
0033               
0034 32A6 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     32A8 A702     
0035 32AA 0204  20         li    tmp0,6
     32AC 0006     
0036 32AE C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     32B0 A706     
0037 32B2 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     32B4 A708     
0038               
0039 32B6 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     32B8 A718     
0040 32BA 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     32BC A71A     
0041 32BE 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     32C0 A72C     
0042 32C2 0720  34         seto  @cmdb.fb.yxsave       ; Reset (removes "write protection")
     32C4 A704     
0043                       ;------------------------------------------------------
0044                       ; Calculate VDP address of CMDB top row (TAT!)
0045                       ;------------------------------------------------------
0046 32C6 0204  20         li    tmp0,pane.botrow      ; \
     32C8 001D     
0047 32CA 6120  34         s     @cmdb.scrrows,tmp0    ; | pos = Y * (columns per row)
     32CC A706     
0048 32CE 3920  70         mpy   @wcolmn,tmp0          ; | result is in tmp1
     32D0 833A     
0049 32D2 C105  18         mov   tmp1,tmp0             ; | Get result
0050 32D4 0224  22         ai    tmp0,vdp.tat.base     ; | Add VDP TAT base address
     32D6 1800     
0051 32D8 C804  38         mov   tmp0,@cmdb.vdptop     ; /
     32DA A70E     
0052                       ;------------------------------------------------------
0053                       ; Clear command buffer
0054                       ;------------------------------------------------------
0055 32DC 06A0  32         bl    @film
     32DE 2236     
0056 32E0 E000                   data  cmdb.top,>00,cmdb.size
     32E2 0000     
     32E4 1000     
0057                                                   ; Clear it all the way
0058                       ;------------------------------------------------------
0059                       ; Exit
0060                       ;------------------------------------------------------
0061               cmdb.init.exit:
0062 32E6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0063 32E8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0064 32EA C2F9  30         mov   *stack+,r11           ; Pop r11
0065 32EC 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0019                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 32EE 0649  14         dect  stack
0023 32F0 C64B  30         mov   r11,*stack            ; Save return address
0024 32F2 0649  14         dect  stack
0025 32F4 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 32F6 0649  14         dect  stack
0027 32F8 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 32FA 0649  14         dect  stack
0029 32FC C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 32FE 04E0  34         clr   @tv.error.visible     ; Set to hidden
     3300 A22A     
0034 3302 0204  20         li    tmp0,3
     3304 0003     
0035 3306 C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3308 A22C     
0036               
0037 330A 06A0  32         bl    @film
     330C 2236     
0038 330E A238                   data tv.error.msg,0,160
     3310 0000     
     3312 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 3314 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 3316 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3318 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 331A C2F9  30         mov   *stack+,r11           ; Pop R11
0047 331C 045B  20         b     *r11                  ; Return to caller
0048               
                   < rom.resident.asm
0020                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 331E 0649  14         dect  stack
0023 3320 C64B  30         mov   r11,*stack            ; Save return address
0024 3322 0649  14         dect  stack
0025 3324 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 3326 0649  14         dect  stack
0027 3328 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 332A 0649  14         dect  stack
0029 332C C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 332E 0204  20         li    tmp0,1                ; \ Set default color scheme
     3330 0001     
0034 3332 C804  38         mov   tmp0,@tv.colorscheme  ; /
     3334 A212     
0035               
0036 3336 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     3338 A226     
0037 333A E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     333C 200C     
0038               
0039 333E 0204  20         li    tmp0,fj.bottom
     3340 B000     
0040 3342 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     3344 A228     
0041               
0042 3346 04E0  34         clr   @tv.specmsg.ptr       ; No special message
     3348 A234     
0043                       ;------------------------------------------------------
0044                       ; Set defaults
0045                       ;------------------------------------------------------
0046 334A 06A0  32         bl    @cpym2m
     334C 24DA     
0047 334E 3D5C                   data def.printer.fname,tv.printer.fname,7
     3350 DE00     
     3352 0007     
0048               
0049 3354 06A0  32         bl    @cpym2m
     3356 24DA     
0050 3358 3D63                   data def.clip.fname.a,tv.clip.fname,10
     335A DE50     
     335C 000A     
0051               
0052 335E 06A0  32         bl    @cpym2m
     3360 24DA     
0053 3362 3D9B                   data def.mc.fname.c,tv.mc.fname,13
     3364 DEA0     
     3366 000D     
0054               
0055 3368 04E0  34         clr   @edb.autoinsert       ; Set AutoInsert off by default
     336A A50C     
0056               
0057 336C 0204  20         li    tmp0,13               ; \
     336E 000D     
0058 3370 C804  38         mov   tmp0,@tv.lineterm     ; | MSB = 00 Line termination mode off
     3372 A236     
0059                                                   ; / LSB = 13 Carriage return
0060                       ;-------------------------------------------------------
0061                       ; Exit
0062                       ;-------------------------------------------------------
0063               tv.init.exit:
0064 3374 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0065 3376 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 3378 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067 337A C2F9  30         mov   *stack+,r11           ; Pop R11
0068 337C 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0021                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 337E 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     3380 27A6     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 3382 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3384 2FCA     
0028 3386 600E                   data bank7.rom        ; | i  p0 = bank address
0029 3388 7F40                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 338A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < rom.resident.asm
0022                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 338C 0649  14         dect  stack
0024 338E C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 3390 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     3392 3292     
0029 3394 06A0  32         bl    @edb.init             ; Initialize editor buffer
     3396 3246     
0030 3398 06A0  32         bl    @idx.init             ; Initialize index
     339A 3146     
0031 339C 06A0  32         bl    @fb.init              ; Initialize framebuffer
     339E 307A     
0032 33A0 06A0  32         bl    @errpane.init         ; Initialize error pane
     33A2 32EE     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 33A4 06A0  32         bl    @hchar
     33A6 27D2     
0037 33A8 0034                   byte 0,52,32,18       ; Remove markers
     33AA 2012     
0038 33AC 1D00                   byte pane.botrow,0,32,51
     33AE 2033     
0039 33B0 FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 33B2 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 33B4 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0023                       copy  "tv.uint16.pack.asm"     ; Pack string to 16bit unsigned integer
     **** ****     > tv.uint16.pack.asm
0001               * FILE......: tv.uint16.pack.asm
0002               * Purpose...: Pack string to 16bit unsigned integer
0003               
0004               ***************************************************************
0005               * tv.uint16.pack
0006               * Pack (number) string to 16bit unsigned integer
0007               ***************************************************************
0008               * bl @tv.uint16.pack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to input string (no length-byte prefix!)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = 16bit unsigned integer
0015               * @outparm2 = 0 conversion ok, >FFFF invalid input
0016               *--------------------------------------------------------------
0017               * REMARK
0018               * None
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0, tmp1, tmp2, tmp3, r0, r1
0022               ***************************************************************
0023               tv.uint16.pack:
0024 33B6 0649  14         dect  stack
0025 33B8 C64B  30         mov   r11,*stack            ; Push return address
0026 33BA 0649  14         dect  stack
0027 33BC C644  30         mov   tmp0,*stack           ; Push tmp0
0028 33BE 0649  14         dect  stack
0029 33C0 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 33C2 0649  14         dect  stack
0031 33C4 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 33C6 0649  14         dect  stack
0033 33C8 C647  30         mov   tmp3,*stack           ; Push tmp3
0034 33CA 0649  14         dect  stack
0035 33CC C640  30         mov   r0,*stack             ; Push r0
0036 33CE 0649  14         dect  stack
0037 33D0 C641  30         mov   r1,*stack             ; Push r1
0038                       ;------------------------------------------------------
0039                       ; Initialisation
0040                       ;------------------------------------------------------
0041 33D2 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33D4 A006     
0042 33D6 04C5  14         clr   tmp1                  ; Termination character >00
0043 33D8 04E0  34         clr   @outparm1             ; Reset output parameters
     33DA A018     
0044 33DC 04E0  34         clr   @outparm2             ; Reset output parameters
     33DE A01A     
0045                       ;------------------------------------------------------
0046                       ; Get string length
0047                       ;------------------------------------------------------
0048 33E0 06A0  32         bl    @xstring.getlenc      ; Get length of C-style string
     33E2 2AB4     
0049                                                   ; \ i  tmp0   = Pointer to C-style string
0050                                                   ; | i  tmp1   = Termination character
0051                                                   ; / o  @waux1 = Length of string
0052                       ;------------------------------------------------------
0053                       ; Assert
0054                       ;------------------------------------------------------
0055 33E4 C1A0  30         mov   @waux1,tmp2           ; Get string length
     33E6 833C     
0056 33E8 131F  14         jeq   tv.uint16.pack.error  ; No input string given
0057 33EA 0286  22         ci    tmp2,5                ; Maximum 5 digits ?
     33EC 0005     
0058 33EE 151C  14         jgt   tv.uint16.pack.error  ; Input string too long
0059                       ;------------------------------------------------------
0060                       ; Prepare register values
0061                       ;------------------------------------------------------
0062 33F0 C120  34         mov   @parm1,tmp0           ; Pointer to input string
     33F2 A006     
0063               
0064 33F4 A186  18         a     tmp2,tmp2             ; \ Starting offset in tv.uint16.mpy
0065 33F6 0226  22         ai    tmp2,-10              ; |    10 - (tmp2 * 2)
     33F8 FFF6     
0066 33FA 0746  18         abs   tmp2                  ; /
0067               
0068 33FC 04C7  14         clr   tmp3                  ; Clear final uint16
0069                       ;------------------------------------------------------
0070                       ; Get character
0071                       ;------------------------------------------------------
0072               tv.uint16.pack.loop:
0073 33FE D174  28         movb  *tmp0+,tmp1           ; Get character
0074 3400 0985  32         srl   tmp1,8                ; MSB to LSB
0075                       ;------------------------------------------------------
0076                       ; Character is ASCII 0 or blank (ASCII 32) ?
0077                       ;------------------------------------------------------
0078 3402 1318  14         jeq   tv.uint16.pack.exit   ; End of string reached
0079 3404 0285  22         ci    tmp1,32               ; Blank ?
     3406 0020     
0080 3408 1315  14         jeq   tv.uint16.pack.exit   ; End of string reached
0081                       ;------------------------------------------------------
0082                       ; Character in range 0..9 ?
0083                       ;------------------------------------------------------
0084 340A 0225  22         ai    tmp1,-48              ; Remove ASCII offset
     340C FFD0     
0085 340E 110C  14         jlt   tv.uint16.pack.error  ; Invalid character, exit
0086 3410 0285  22         ci    tmp1,9
     3412 0009     
0087 3414 1509  14         jgt   tv.uint16.pack.error  ; Invalid character, exit
0088                       ;------------------------------------------------------
0089                       ; Get base 10 multiplier for digit
0090                       ;------------------------------------------------------
0091 3416 C026  34         mov   @tv.uint16.mpy(tmp2),r0
     3418 3444     
0092                       ;------------------------------------------------------
0093                       ; Convert number to decimal 10 (final result in tmp3)
0094                       ;------------------------------------------------------
0095 341A 3805  58         mpy   tmp1,r0               ; Multiply digit with r0, 32bit result is
0096                                                   ; in r0 and r1. We need r1 (LSW)
0097 341C A1C1  18         a     r1,tmp3               ; Add base10 value to final uint16
0098                       ;------------------------------------------------------
0099                       ; Prepare for next digit
0100                       ;------------------------------------------------------
0101 341E 05C6  14         inct  tmp2                  ; Update loop counter
0102 3420 0286  22         ci    tmp2,8                ; Last digit done?
     3422 0008     
0103 3424 12EC  14         jle   tv.uint16.pack.loop   ; Next iteration
0104 3426 1004  14         jmp   tv.uint16.pack.done   ; Done packing uint16, exit
0105                       ;------------------------------------------------------
0106                       ; Invalid character, stop packing and exit
0107                       ;------------------------------------------------------
0108               tv.uint16.pack.error:
0109 3428 04E0  34         clr   @outparm1             ; Empty uint16
     342A A018     
0110 342C 0720  34         seto  @outparm2             ; Invalid input string
     342E A01A     
0111                       ;-------------------------------------------------------
0112                       ; Save final uint16
0113                       ;-------------------------------------------------------
0114               tv.uint16.pack.done:
0115 3430 C807  38         mov   tmp3,@outparm1
     3432 A018     
0116                       ;-------------------------------------------------------
0117                       ; Exit
0118                       ;-------------------------------------------------------
0119               tv.uint16.pack.exit:
0120 3434 C079  30         mov   *stack+,r1            ; Pop r1
0121 3436 C039  30         mov   *stack+,r0            ; Pop r0
0122 3438 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0123 343A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0124 343C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0125 343E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 3440 C2F9  30         mov   *stack+,r11           ; Pop r11
0127 3442 045B  20         b     *r11                  ; Return to caller
0128                       ;-------------------------------------------------------
0129                       ; Constants for base 10 mmultipliers
0130                       ;-------------------------------------------------------
0131               tv.uint16.mpy:
0132 3444 2710             data  10000,1000,100,10,1
     3446 03E8     
     3448 0064     
     344A 000A     
     344C 0001     
0133               
                   < rom.resident.asm
0024                       copy  "tv.uint16.unpack.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.uint16.unpack.asm
0001               * FILE......: tv.uint16.unpack.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.uint16.unpack
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.uint16.unpack
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @uint16.unpacked = Length-prefixed string with unpacked uint16
0015               *                    (6 bytes max)
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ***************************************************************
0020               tv.uint16.unpack:
0021 344E 0649  14         dect  stack
0022 3450 C64B  30         mov   r11,*stack            ; Save return address
0023 3452 0649  14         dect  stack
0024 3454 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Initialize
0027                       ;------------------------------------------------------
0028 3456 06A0  32         bl    @mknum                ; Convert unsigned number to string
     3458 29A6     
0029 345A A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0030 345C A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0031 345E 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0032 345F   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0033               
0034 3460 0204  20         li    tmp0,uint16.unpacked
     3462 A02C     
0035 3464 04F4  30         clr   *tmp0+                ; Clear string 01
0036 3466 04F4  30         clr   *tmp0+                ; Clear string 23
0037 3468 04F4  30         clr   *tmp0+                ; Clear string 34
0038               
0039 346A 06A0  32         bl    @trimnum              ; Trim unsigned number string
     346C 29FE     
0040 346E A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0041 3470 A02C                   data uint16.unpacked  ; | i p1  = Pointer to output buffer
0042 3472 0020                   data 32               ; / i p2  = Padding char to match against
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               tv.uint16.unpack.exit:
0047 3474 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0048 3476 C2F9  30         mov   *stack+,r11           ; Pop r11
0049 3478 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0025                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 347A 0649  14         dect  stack
0025 347C C64B  30         mov   r11,*stack            ; Push return address
0026 347E 0649  14         dect  stack
0027 3480 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3482 0649  14         dect  stack
0029 3484 C645  30         mov   tmp1,*stack           ; Push tmp1
0030 3486 0649  14         dect  stack
0031 3488 C646  30         mov   tmp2,*stack           ; Push tmp2
0032 348A 0649  14         dect  stack
0033 348C C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 348E C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3490 A006     
0038 3492 D194  26         movb  *tmp0,tmp2            ; /
0039 3494 0986  32         srl   tmp2,8                ; Right align
0040 3496 C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 3498 8806  34         c     tmp2,@parm2           ; String length > requested length?
     349A A008     
0043 349C 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 349E C120  34         mov   @parm1,tmp0           ; Get source address
     34A0 A006     
0048 34A2 C160  34         mov   @parm4,tmp1           ; Get destination address
     34A4 A00C     
0049 34A6 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 34A8 0649  14         dect  stack
0052 34AA C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 34AC 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     34AE 24E0     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 34B0 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 34B2 C120  34         mov   @parm2,tmp0           ; Get requested length
     34B4 A008     
0064 34B6 0A84  32         sla   tmp0,8                ; Left align
0065 34B8 C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     34BA A00C     
0066 34BC D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 34BE A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 34C0 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 34C2 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     34C4 A008     
0073 34C6 6187  18         s     tmp3,tmp2             ; |
0074 34C8 0586  14         inc   tmp2                  ; /
0075               
0076 34CA C120  34         mov   @parm3,tmp0           ; Get byte to padd
     34CC A00A     
0077 34CE 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 34D0 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 34D2 0606  14         dec   tmp2                  ; Update loop counter
0084 34D4 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 34D6 C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     34D8 A00C     
     34DA A018     
0087 34DC 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 34DE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34E0 FFCE     
0093 34E2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34E4 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 34E6 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 34E8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 34EA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 34EC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 34EE C2F9  30         mov   *stack+,r11           ; Pop r11
0103 34F0 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0026                       ;-----------------------------------------------------------------------
0027                       ; Logic for Index management
0028                       ;-----------------------------------------------------------------------
0029                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 34F2 0649  14         dect  stack
0023 34F4 C64B  30         mov   r11,*stack            ; Save return address
0024 34F6 0649  14         dect  stack
0025 34F8 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 34FA 0649  14         dect  stack
0027 34FC C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 34FE C120  34         mov   @parm1,tmp0           ; Get line number
     3500 A006     
0032 3502 C160  34         mov   @parm2,tmp1           ; Get pointer
     3504 A008     
0033 3506 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 3508 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     350A 0FFF     
0039 350C 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 350E 06E0  34         swpb  @parm3
     3510 A00A     
0044 3512 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     3514 A00A     
0045 3516 06E0  34         swpb  @parm3                ; \ Restore original order again,
     3518 A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 351A 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     351C 31F6     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 351E C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     3520 A018     
0056 3522 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     3524 B000     
0057 3526 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     3528 A018     
0058 352A 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 352C 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     352E 31F6     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 3530 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     3532 A018     
0068 3534 04E4  34         clr   @idx.top(tmp0)        ; /
     3536 B000     
0069 3538 C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     353A A018     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 353C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 353E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3540 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3542 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0030                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 3544 0649  14         dect  stack
0022 3546 C64B  30         mov   r11,*stack            ; Save return address
0023 3548 0649  14         dect  stack
0024 354A C644  30         mov   tmp0,*stack           ; Push tmp0
0025 354C 0649  14         dect  stack
0026 354E C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3550 0649  14         dect  stack
0028 3552 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 3554 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     3556 A006     
0033               
0034 3558 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     355A 31F6     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 355C C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     355E A018     
0039 3560 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3562 B000     
0040               
0041 3564 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 3566 C185  18         mov   tmp1,tmp2             ; \
0047 3568 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 356A 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     356C 00FF     
0052 356E 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3570 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3572 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 3574 C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     3576 A018     
0059 3578 C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     357A A01A     
0060 357C 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 357E 04E0  34         clr   @outparm1
     3580 A018     
0066 3582 04E0  34         clr   @outparm2
     3584 A01A     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 3586 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 3588 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 358A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 358C C2F9  30         mov   *stack+,r11           ; Pop r11
0075 358E 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0031                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3590 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3592 B000     
0018 3594 C144  18         mov   tmp0,tmp1             ; a = current slot
0019 3596 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 3598 CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 359A 0606  14         dec   tmp2                  ; tmp2--
0026 359C 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 359E 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 35A0 0649  14         dect  stack
0047 35A2 C64B  30         mov   r11,*stack            ; Save return address
0048 35A4 0649  14         dect  stack
0049 35A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0050 35A8 0649  14         dect  stack
0051 35AA C645  30         mov   tmp1,*stack           ; Push tmp1
0052 35AC 0649  14         dect  stack
0053 35AE C646  30         mov   tmp2,*stack           ; Push tmp2
0054 35B0 0649  14         dect  stack
0055 35B2 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 35B4 C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     35B6 A006     
0060               
0061 35B8 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     35BA 31F6     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 35BC C120  34         mov   @outparm1,tmp0        ; Index offset
     35BE A018     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 35C0 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     35C2 A008     
0070 35C4 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 35C6 61A0  34         s     @parm1,tmp2           ; Calculate loop
     35C8 A006     
0074 35CA 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 35CC 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     35CE B000     
0081 35D0 04D4  26         clr   *tmp0                 ; Clear index entry
0082 35D2 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 35D4 C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     35D6 A008     
0088 35D8 0287  22         ci    tmp3,2048
     35DA 0800     
0089 35DC 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 35DE 06A0  32         bl    @_idx.sams.mapcolumn.on
     35E0 3188     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 35E2 C120  34         mov   @parm1,tmp0           ; Restore line number
     35E4 A006     
0103 35E6 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 35E8 06A0  32         bl    @_idx.entry.delete.reorg
     35EA 3590     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 35EC 06A0  32         bl    @_idx.sams.mapcolumn.off
     35EE 31BC     
0111                                                   ; Restore memory window layout
0112               
0113 35F0 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 35F2 06A0  32         bl    @_idx.entry.delete.reorg
     35F4 3590     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 35F6 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 35F8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 35FA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 35FC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 35FE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 3600 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 3602 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0032                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 3604 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     3606 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 3608 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 360A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     360C FFCE     
0027 360E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3610 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 3612 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     3614 B000     
0032 3616 C144  18         mov   tmp0,tmp1             ; a = current slot
0033 3618 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 361A 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 361C C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 361E 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 3620 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 3622 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 3624 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     3626 AFFC     
0043 3628 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 362A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     362C FFCE     
0049 362E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3630 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 3632 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 3634 0644  14         dect  tmp0                  ; Move pointer up
0056 3636 0645  14         dect  tmp1                  ; Move pointer up
0057 3638 0606  14         dec   tmp2                  ; Next index entry
0058 363A 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 363C 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 363E 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 3640 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 3642 0649  14         dect  stack
0089 3644 C64B  30         mov   r11,*stack            ; Save return address
0090 3646 0649  14         dect  stack
0091 3648 C644  30         mov   tmp0,*stack           ; Push tmp0
0092 364A 0649  14         dect  stack
0093 364C C645  30         mov   tmp1,*stack           ; Push tmp1
0094 364E 0649  14         dect  stack
0095 3650 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3652 0649  14         dect  stack
0097 3654 C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 3656 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3658 A008     
0102 365A 61A0  34         s     @parm1,tmp2           ; Calculate loop
     365C A006     
0103 365E 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 3660 C1E0  34         mov   @parm2,tmp3
     3662 A008     
0110 3664 0287  22         ci    tmp3,2048
     3666 0800     
0111 3668 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 366A 06A0  32         bl    @_idx.sams.mapcolumn.on
     366C 3188     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 366E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3670 A008     
0123 3672 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 3674 06A0  32         bl    @_idx.entry.insert.reorg
     3676 3604     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 3678 06A0  32         bl    @_idx.sams.mapcolumn.off
     367A 31BC     
0131                                                   ; Restore memory window layout
0132               
0133 367C 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 367E C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3680 A008     
0139               
0140 3682 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3684 31F6     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 3686 C120  34         mov   @outparm1,tmp0        ; Index offset
     3688 A018     
0145               
0146 368A 06A0  32         bl    @_idx.entry.insert.reorg
     368C 3604     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 368E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3690 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3692 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 3694 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 3696 C2F9  30         mov   *stack+,r11           ; Pop r11
0160 3698 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0033                       ;-----------------------------------------------------------------------
0034                       ; Logic for editor buffer
0035                       ;-----------------------------------------------------------------------
0036                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 369A 0649  14         dect  stack
0022 369C C64B  30         mov   r11,*stack            ; Push return address
0023 369E 0649  14         dect  stack
0024 36A0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 36A2 0649  14         dect  stack
0026 36A4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 36A6 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     36A8 A504     
0031 36AA 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 36AC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     36AE FFCE     
0037 36B0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     36B2 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 36B4 C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     36B6 A006     
0043               
0044 36B8 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     36BA 3544     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 36BC C120  34         mov   @outparm2,tmp0        ; SAMS page
     36BE A01A     
0050 36C0 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     36C2 A018     
0051 36C4 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 36C6 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     36C8 A208     
0057 36CA 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 36CC 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     36CE 2576     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 36D0 C820  54         mov   @outparm2,@tv.sams.c000
     36D2 A01A     
     36D4 A208     
0066                                                   ; Set page in shadow registers
0067               
0068 36D6 C820  54         mov   @outparm2,@edb.sams.page
     36D8 A01A     
     36DA A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 36DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 36DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 36E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 36E2 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0037                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 36E4 0649  14         dect  stack
0022 36E6 C64B  30         mov   r11,*stack            ; Push return address
0023 36E8 0649  14         dect  stack
0024 36EA C644  30         mov   tmp0,*stack           ; Push tmp0
0025 36EC 0649  14         dect  stack
0026 36EE C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 36F0 04E0  34         clr   @outparm1             ; Reset length
     36F2 A018     
0031 36F4 04E0  34         clr   @outparm2             ; Reset SAMS bank
     36F6 A01A     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 36F8 C120  34         mov   @parm1,tmp0           ; \
     36FA A006     
0036 36FC 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 36FE 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     3700 A504     
0039 3702 1101  14         jlt   !                     ; No, continue processing
0040 3704 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 3706 C120  34 !       mov   @parm1,tmp0           ; Get line
     3708 A006     
0046               
0047 370A 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     370C 369A     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 370E C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     3710 A018     
0053 3712 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 3714 C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 3716 C805  38         mov   tmp1,@outparm1        ; Save length
     3718 A018     
0060 371A 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 371C 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     371E A018     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 3720 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 3722 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 3724 C2F9  30         mov   *stack+,r11           ; Pop r11
0073 3726 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 3728 0649  14         dect  stack
0094 372A C64B  30         mov   r11,*stack            ; Save return address
0095 372C 0649  14         dect  stack
0096 372E C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 3730 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     3732 A304     
0101 3734 A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     3736 A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 3738 C804  38         mov   tmp0,@parm1
     373A A006     
0106 373C 06A0  32         bl    @edb.line.getlength
     373E 36E4     
0107 3740 C820  54         mov   @outparm1,@fb.row.length
     3742 A018     
     3744 A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 3746 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 3748 C2F9  30         mov   *stack+,r11           ; Pop R11
0115 374A 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0038                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 374C 0649  14         dect  stack
0021 374E C64B  30         mov   r11,*stack            ; Save return address
0022 3750 0649  14         dect  stack
0023 3752 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3754 0649  14         dect  stack
0025 3756 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 3758 C120  34         mov   @edb.next_free.ptr,tmp0
     375A A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 375C 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     375E 0FFF     
0035 3760 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3762 0052     
0036 3764 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     3766 0FF0     
0037 3768 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 376A 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     376C A51C     
0043 376E C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3770 A500     
     3772 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 3774 C120  34         mov   @edb.sams.hipage,tmp0
     3776 A51C     
0050 3778 C160  34         mov   @edb.top.ptr,tmp1
     377A A500     
0051 377C 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     377E 2576     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3780 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3782 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3784 FFCE     
0061 3786 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3788 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 378A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 378C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 378E C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3790 045B  20         b     *r11                  ; Return to caller
                   < rom.resident.asm
0039                       ;-----------------------------------------------------------------------
0040                       ; Utility functions
0041                       ;-----------------------------------------------------------------------
0042                       copy  "pane.topline.clearmsg.asm"   ; Remove overlay msg in top line
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3792 0649  14         dect  stack
0022 3794 C64B  30         mov   r11,*stack            ; Push return address
0023 3796 0649  14         dect  stack
0024 3798 C660  42         mov   @wyx,*stack           ; Push cursor position
     379A 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 379C 06A0  32         bl    @hchar
     379E 27D2     
0029 37A0 0034                   byte 0,52,32,18
     37A2 2012     
0030 37A4 FFFF                   data EOL              ; Clear message
0031               
0032 37A6 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     37A8 A226     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 37AA C839  42         mov   *stack+,@wyx          ; Pop cursor position
     37AC 832A     
0038 37AE C2F9  30         mov   *stack+,r11           ; Pop R11
0039 37B0 045B  20         b     *r11                  ; Return to task
                   < rom.resident.asm
0043                       copy  "fg99.run.asm"                ; Run FinalGROM cartridge image
     **** ****     > fg99.run.asm
0001               * FILE......: fg99.run.asm
0002               * Purpose...: Run FinalGROM cartridge image
0003               
0004               
0005               ***************************************************************
0006               * fg99.run
0007               * Run FinalGROM cartridge image
0008               ***************************************************************
0009               * bl   @fg99.run
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @tv.fg99.img.ptr = Pointer to cartridge image entry
0013               *
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r1 in GPL WS, tmp0, tmp1, tmp2, r12
0019               *--------------------------------------------------------------
0020               * Remarks
0021               * Based on tib.run
0022               ********|*****|*********************|**************************
0023               fg99.run:
0024                       ;-------------------------------------------------------
0025                       ; Put VDP in TI Basic compatible mode (32x24)
0026                       ;-------------------------------------------------------
0027 37B2 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     37B4 27A6     
0028               
0029 37B6 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     37B8 22F8     
0030 37BA 7F24                   data tibasic.32x24    ; Equate selected video mode table
0031               
0032 37BC 06A0  32         bl    @scroff               ; Turn off screen
     37BE 2686     
0033                       ;------------------------------------------------------
0034                       ; Clear magic string
0035                       ;------------------------------------------------------
0036                       ; Clear the bytes 'DEAD994ABEEF' in core memory.
0037                       ; Indicate it's unsafe to resume Stevie and initialization
0038                       ; is necessary.
0039 37C0 04E0  34         clr   @magic.str.w1
     37C2 A000     
0040 37C4 04E0  34         clr   @magic.str.w2
     37C6 A002     
0041 37C8 04E0  34         clr   @magic.str.w3
     37CA A004     
0042                       ;-------------------------------------------------------
0043                       ; Load FG99 cartridge, but do not start cartridge yet
0044                       ;-------------------------------------------------------
0045 37CC C120  34         mov   @tv.fg99.img.ptr,tmp0 ; Get pointer to cartridge image
     37CE A232     
0046 37D0 06A0  32         bl    @xfg99                ; Run FinalGROM cartridge image
     37D2 2DC6     
0047                                                   ; \ i tmp0 = Pointer to cartridge image
0048                                                   ; /
0049                       ;-------------------------------------------------------
0050                       ; Turn SAMS mapper off and exit to monitor
0051                       ;-------------------------------------------------------
0052 37D4 020C  20         li    r12,>1e00             ; SAMS CRU address
     37D6 1E00     
0053 37D8 1E01  16         sbz   1                     ; Disable SAMS mapper
0054                                                   ; \ We keep the mapper off while
0055                                                   ; | running TI Basic or other external
0056                                                   ; / programs.
0057               
0058 37DA 0420  42         blwp @0                     ; Return to monitor
     37DC 0000     
                   < rom.resident.asm
0044                       ;-----------------------------------------------------------------------
0045                       ; Background tasks
0046                       ;-----------------------------------------------------------------------
0048               
0049                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 37DE 0649  14         dect  stack
0009 37E0 C64B  30         mov   r11,*stack            ; Save return address
0010 37E2 0649  14         dect  stack
0011 37E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 37E6 0649  14         dect  stack
0013 37E8 C645  30         mov   tmp1,*stack           ; Push tmp1
0014 37EA 0649  14         dect  stack
0015 37EC C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 37EE C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     37F0 A224     
0020               
0021 37F2 0284  22         ci    tmp0,pane.focus.fb
     37F4 0000     
0022 37F6 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 37F8 0284  22         ci    tmp0,pane.focus.cmdb
     37FA 0001     
0025 37FC 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 37FE C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3800 FFCE     
0031 3802 06A0  32         bl    @cpu.crash            ; / Halt system.
     3804 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 3806 C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     3808 A70A     
     380A 832A     
0037 380C E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     380E 2020     
0038 3810 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     3812 26E8     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 3814 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 3816 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     3818 2020     
0048 381A 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     381C 26E8     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 381E C160  34         mov   @tv.ruler.visible,tmp1
     3820 A210     
0056 3822 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 3824 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     3826 1000     
0058 3828 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 382A 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     382C 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 382E C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     3830 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 3832 C160  34         mov   @tv.ruler.visible,tmp1
     3834 A210     
0071                                                   ; Ruler visible?
0072 3836 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 3838 C160  34         mov   @cmdb.visible,tmp1
     383A A702     
0076 383C 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     383E FFFF     
0077 3840 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 3842 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     3844 FF00     
0081 3846 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     3848 00F0     
0082 384A C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     384C A05A     
0083               
0084 384E C120  34         mov   @ramsat,tmp0
     3850 A056     
0085 3852 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     3854 00FF     
0086 3856 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     3858 0800     
0087 385A C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     385C A05E     
0088               
0089 385E 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 3860 04C5  14         clr   tmp1
0095 3862 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     3864 A05D     
0096                                                   ; / by transparant color
0097 3866 D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     3868 A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 386A 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     386C 2486     
0104 386E 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     3870 A056     
     3872 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 3874 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 3876 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 3878 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 387A C2F9  30         mov   *stack+,r11           ; Pop r11
0115 387C 0460  28         b     @slotok               ; Exit task
     387E 2E84     
                   < rom.resident.asm
0050                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 3880 0649  14         dect  stack
0009 3882 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Set cursor shape (sprite version)
0012                       ;------------------------------------------------------
0013 3884 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     3886 2FCA     
0014 3888 600C                   data bank6.rom        ; | i  p0 = bank address
0015 388A 7F4A                   data vec.6            ; | i  p1 = Vector with target address
0016 388C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0017                       ;------------------------------------------------------
0018                       ; Exit
0019                       ;------------------------------------------------------
0020               task.vdp.cursor.exit:
0021 388E C2F9  30         mov   *stack+,r11           ; Pop r11
0022 3890 0460  28         b     @slotok               ; Exit task
     3892 2E84     
                   < rom.resident.asm
0051               
0057               
0058                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 3894 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     3896 A226     
0010 3898 1301  14         jeq   task.oneshot.exit
0011               
0012 389A 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 389C 0460  28         b     @slotok                ; Exit task
     389E 2E84     
                   < rom.resident.asm
0059                       ;------------------------------------------------------
0060                       ; Program data
0061                       ;------------------------------------------------------
0062                       even
0063                       copy  "data.constants.asm"          ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               ***************************************************************
0009               * Sprite Attribute Table
0010               *--------------------------------------------------------------
0011               romsat:
0012                                                   ; YX, initial shape and color
0013 38A0 0000             data  >0000,>0001           ; Cursor
     38A2 0001     
0014 38A4 0000             data  >0000,>0101           ; Current line indicator     <
     38A6 0101     
0015 38A8 0820             data  >0820,>0201           ; Current column indicator   v
     38AA 0201     
0016               nosprite:
0017 38AC D000             data  >d000                 ; End-of-Sprites list
0018               
0019               
0020               
0021               
0022               ***************************************************************
0023               * Stevie color schemes table
0024               *--------------------------------------------------------------
0025               * ; Word 1
0026               * ; A  MSB  high-nibble    Foreground color text line in frame buffer
0027               * ; B  MSB  low-nibble     Background color text line in frame buffer
0028               * ; C  LSB  high-nibble    Foreground color top/bottom line
0029               * ; D  LSB  low-nibble     Background color top/bottom line
0030               * ; Word 2
0031               * ; E  MSB  high-nibble    Foreground color cmdb pane
0032               * ; F  MSB  low-nibble     Background color cmdb pane
0033               * ; G  LSB  high-nibble    Cursor foreground color cmdb pane
0034               * ; H  LSB  low-nibble     Cursor foreground color frame buffer
0035               * ; Word 3
0036               * ; I  MSB  high-nibble    Foreground color busy top/bottom line
0037               * ; J  MSB  low-nibble     Background color busy top/bottom line
0038               * ; K  LSB  high-nibble    Foreground color marked line in frame buffer
0039               * ; L  LSB  low-nibble     Background color marked line in frame buffer
0040               * ; Word 4
0041               * ; M  MSB  high-nibble    Foreground color command buffer header line
0042               * ; N  MSB  low-nibble     Background color command buffer header line
0043               * ; O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0044               * ; P  LSB  low-nibble     Foreground color ruler frame buffer
0045               *
0046               * ; Colors
0047               * ; 0  Transparant      8  Red
0048               * ; 1  black            9  Light Red
0049               * ; 2  Green            A  Yellow
0050               * ; 3  Light Green      B  Light Yellow
0051               * ; 4  Blue             C  Dark Green
0052               * ; 5  Light Blue       D  Magenta
0053               * ; 6  Dark Red         E  Grey
0054               * ; 7  Cyan             F  White
0055               *--------------------------------------------------------------
0056      000C     tv.colorscheme.entries  equ 12        ; Entries in table
0057               tv.colorscheme.table:
0058                       ;                             ; #
0059                       ;      ABCD  EFGH  IJKL  MNOP ; -
0060 38AE F417             data  >f417,>f171,>1b1f,>7111 ; 1  White on blue with cyan touch
     38B0 F171     
     38B2 1B1F     
     38B4 7111     
0061 38B6 21F0             data  >21f0,>21ff,>f112,>21ff ; 2  Dark green on black (minimalistic)
     38B8 21FF     
     38BA F112     
     38BC 21FF     
0062 38BE A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 3  Dark yellow on black
     38C0 F0FF     
     38C2 1F1A     
     38C4 F1FF     
0063 38C6 1E1E             data  >1e1e,>1e11,>1ee1,>1e11 ; 4  Black on grey (minimalistic)
     38C8 1E11     
     38CA 1EE1     
     38CC 1E11     
0064 38CE 151F             data  >151f,>1511,>1f1f,>1511 ; 5  Black on light blue
     38D0 1511     
     38D2 1F1F     
     38D4 1511     
0065 38D6 1313             data  >1313,>1311,>1331,>1311 ; 6  Black on light green (minimalistic)
     38D8 1311     
     38DA 1331     
     38DC 1311     
0066 38DE 1771             data  >1771,>1011,>0171,>1711 ; 7  Black on cyan
     38E0 1011     
     38E2 0171     
     38E4 1711     
0067 38E6 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 8  Dark green on black
     38E8 F0FF     
     38EA 1F12     
     38EC F1F6     
0068 38EE 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 9  Black on white
     38F0 1011     
     38F2 F1F1     
     38F4 1F11     
0069 38F6 1AF1             data  >1af1,>a111,>1f1f,>f11f ; 10 Black on dark yellow
     38F8 A111     
     38FA 1F1F     
     38FC F11F     
0070 38FE 1919             data  >1919,>1911,>1991,>1911 ; 11 Black on light red (minimalistic)
     3900 1911     
     3902 1991     
     3904 1911     
0071 3906 FDF1             data  >fdf1,>1d11,>fddf,>1d11 ; 12 White on magenta
     3908 1D11     
     390A FDDF     
     390C 1D11     
0072               
0073                       even
0074               
0075               tv.tabs.table.lr:
0076 390E 0007             byte  0,7,12,25             ; \   Default tab positions as used
     3910 0C19     
0077 3912 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     3914 3B4F     
0078 3916 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3918 0000     
0079                                                   ; /   >ff means end-of-list.
0080               
0081               tv.tabs.table.rl:
0082 391A 4F3B             byte  79,59,45,30           ; \   Default tab positions as used
     391C 2D1E     
0083 391E 190C             byte  25,12,7,0             ; |   in Editor/Assembler module.
     3920 0700     
0084 3922 FF00             byte  >ff,0,0,0             ; |   Up to 11 positions supported.
     3924 0000     
0085                                                   ; /   >ff means end-of-list.
0086               
0087               ***************************************************************
0088               * Constants for numbers 0-10
0089               ********|*****|*********************|**************************
0090      2000     const.0       equ   w$0000          ; 0
0091      2002     const.1       equ   w$0001          ; 1
0092      2004     const.2       equ   w$0002          ; 2
0093 3926 0003     const.3       data  3               ; 3
0094      2006     const.4       equ   w$0004          ; 4
0095 3928 0005     const.5       data  5               ; 5
0096 392A 0006     const.6       data  6               ; 6
0097 392C 0007     const.7       data  7               ; 7
0098      2008     const.8       equ   w$0008          ; 8
0099 392E 0009     const.9       data  9               ; 9
0100 3930 000A     const.10      data  10              ; 10
0101 3932 0020     const.32      data  32              ; 32
0102 3934 0050     const.80      data  80              ; 80
                   < rom.resident.asm
0064                       copy  "data.strings.asm"            ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: ROM shared strings
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007 3936 012C     txt.delim          stri ','
0008                                  even
0009 3938 0520     txt.bottom         stri '  BOT'
     393A 2042     
     393C 4F54     
0010                                  even
0011 393E 044F     txt.ovrwrite       stri 'OVR '
     3940 5652     
     3942 20       
0012                                  even
0013 3944 0449     txt.insert         stri 'INS '
     3946 4E53     
     3948 20       
0014                                  even
0015 394A 0449     txt.autoinsert     stri 'INS+'
     394C 4E53     
     394E 2B       
0016                                  even
0017 3950 012A     txt.star           stri '*'
0018                                  even
0019 3952 0A4C     txt.loading        stri 'Loading...'
     3954 6F61     
     3956 6469     
     3958 6E67     
     395A 2E2E     
     395C 2E       
0020                                  even
0021 395E 0A53     txt.saving         stri 'Saving....'
     3960 6176     
     3962 696E     
     3964 672E     
     3966 2E2E     
     3968 2E       
0022                                  even
0023 396A 1250     txt.printing       stri 'Printing file.....'
     396C 7269     
     396E 6E74     
     3970 696E     
     3972 6720     
     3974 6669     
     3976 6C65     
     3978 2E2E     
     397A 2E2E     
     397C 2E       
0024                                  even
0025 397E 1244     txt.block.del      stri 'Deleting block....'
     3980 656C     
     3982 6574     
     3984 696E     
     3986 6720     
     3988 626C     
     398A 6F63     
     398C 6B2E     
     398E 2E2E     
     3990 2E       
0026                                  even
0027 3992 1143     txt.block.copy     stri 'Copying block....'
     3994 6F70     
     3996 7969     
     3998 6E67     
     399A 2062     
     399C 6C6F     
     399E 636B     
     39A0 2E2E     
     39A2 2E2E     
0028                                  even
0029 39A4 104D     txt.block.move     stri 'Moving block....'
     39A6 6F76     
     39A8 696E     
     39AA 6720     
     39AC 626C     
     39AE 6F63     
     39B0 6B2E     
     39B2 2E2E     
     39B4 2E       
0030                                  even
0031 39B6 1853     txt.block.save     stri 'Saving block to file....'
     39B8 6176     
     39BA 696E     
     39BC 6720     
     39BE 626C     
     39C0 6F63     
     39C2 6B20     
     39C4 746F     
     39C6 2066     
     39C8 696C     
     39CA 652E     
     39CC 2E2E     
     39CE 2E       
0032                                  even
0033 39D0 1843     txt.block.clip     stri 'Copying to clipboard....'
     39D2 6F70     
     39D4 7969     
     39D6 6E67     
     39D8 2074     
     39DA 6F20     
     39DC 636C     
     39DE 6970     
     39E0 626F     
     39E2 6172     
     39E4 642E     
     39E6 2E2E     
     39E8 2E       
0034                                  even
0035 39EA 1250     txt.block.print    stri 'Printing block....'
     39EC 7269     
     39EE 6E74     
     39F0 696E     
     39F2 6720     
     39F4 626C     
     39F6 6F63     
     39F8 6B2E     
     39FA 2E2E     
     39FC 2E       
0036                                  even
0037 39FE 1343     txt.clearmem       stri 'Clearing memory....'
     3A00 6C65     
     3A02 6172     
     3A04 696E     
     3A06 6720     
     3A08 6D65     
     3A0A 6D6F     
     3A0C 7279     
     3A0E 2E2E     
     3A10 2E2E     
0038                                  even
0039 3A12 0E4C     txt.done.load      stri 'Load completed'
     3A14 6F61     
     3A16 6420     
     3A18 636F     
     3A1A 6D70     
     3A1C 6C65     
     3A1E 7465     
     3A20 64       
0040                                  even
0041 3A22 1049     txt.done.insert    stri 'Insert completed'
     3A24 6E73     
     3A26 6572     
     3A28 7420     
     3A2A 636F     
     3A2C 6D70     
     3A2E 6C65     
     3A30 7465     
     3A32 64       
0042                                  even
0043 3A34 1041     txt.done.append    stri 'Append completed'
     3A36 7070     
     3A38 656E     
     3A3A 6420     
     3A3C 636F     
     3A3E 6D70     
     3A40 6C65     
     3A42 7465     
     3A44 64       
0044                                  even
0045 3A46 0E53     txt.done.save      stri 'Save completed'
     3A48 6176     
     3A4A 6520     
     3A4C 636F     
     3A4E 6D70     
     3A50 6C65     
     3A52 7465     
     3A54 64       
0046                                  even
0047 3A56 0E43     txt.done.copy      stri 'Copy completed'
     3A58 6F70     
     3A5A 7920     
     3A5C 636F     
     3A5E 6D70     
     3A60 6C65     
     3A62 7465     
     3A64 64       
0048                                  even
0049 3A66 0F50     txt.done.print     stri 'Print completed'
     3A68 7269     
     3A6A 6E74     
     3A6C 2063     
     3A6E 6F6D     
     3A70 706C     
     3A72 6574     
     3A74 6564     
0050                                  even
0051 3A76 1044     txt.done.delete    stri 'Delete completed'
     3A78 656C     
     3A7A 6574     
     3A7C 6520     
     3A7E 636F     
     3A80 6D70     
     3A82 6C65     
     3A84 7465     
     3A86 64       
0052                                  even
0053 3A88 0F43     txt.done.clipboard stri 'Clipboard saved'
     3A8A 6C69     
     3A8C 7062     
     3A8E 6F61     
     3A90 7264     
     3A92 2073     
     3A94 6176     
     3A96 6564     
0054                                  even
0055 3A98 0D43     txt.done.clipdev   stri 'Clipboard set'
     3A9A 6C69     
     3A9C 7062     
     3A9E 6F61     
     3AA0 7264     
     3AA2 2073     
     3AA4 6574     
0056                                  even
0057 3AA6 124D     txt.done.mc        stri 'Master Catalog set'
     3AA8 6173     
     3AAA 7465     
     3AAC 7220     
     3AAE 4361     
     3AB0 7461     
     3AB2 6C6F     
     3AB4 6720     
     3AB6 7365     
     3AB8 74       
0058                                  even
0059 3ABA 0E41     txt.autoins.on     stri 'Autoinsert: on'
     3ABC 7574     
     3ABE 6F69     
     3AC0 6E73     
     3AC2 6572     
     3AC4 743A     
     3AC6 206F     
     3AC8 6E       
0060                                  even
0061 3ACA 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3ACC 7574     
     3ACE 6F69     
     3AD0 6E73     
     3AD2 6572     
     3AD4 743A     
     3AD6 206F     
     3AD8 6666     
0062                                  even
0063 3ADA 0B46     txt.fastmode       stri 'Fastmode IO'
     3ADC 6173     
     3ADE 746D     
     3AE0 6F64     
     3AE2 6520     
     3AE4 494F     
0064                                  even
0065 3AE6 1E44     txt.uncrunching    stri 'Detokenizing TI Basic line....'
     3AE8 6574     
     3AEA 6F6B     
     3AEC 656E     
     3AEE 697A     
     3AF0 696E     
     3AF2 6720     
     3AF4 5449     
     3AF6 2042     
     3AF8 6173     
     3AFA 6963     
     3AFC 206C     
     3AFE 696E     
     3B00 652E     
     3B02 2E2E     
     3B04 2E       
0066                                  even
0067 3B06 026B     txt.kb             stri 'kb'
     3B08 62       
0068                                  even
0069 3B0A 054C     txt.lines          stri 'Lines'
     3B0C 696E     
     3B0E 6573     
0070                                  even
0071 3B10 0A5B     txt.newfile        stri '[New file]'
     3B12 4E65     
     3B14 7720     
     3B16 6669     
     3B18 6C65     
     3B1A 5D       
0072                                  even
0073 3B1C 0D5B     txt.tib1           stri '[TI Basic #1]'
     3B1E 5449     
     3B20 2042     
     3B22 6173     
     3B24 6963     
     3B26 2023     
     3B28 315D     
0074                                  even
0075 3B2A 0D5B     txt.tib2           stri '[TI Basic #2]'
     3B2C 5449     
     3B2E 2042     
     3B30 6173     
     3B32 6963     
     3B34 2023     
     3B36 325D     
0076                                  even
0077 3B38 0D5B     txt.tib3           stri '[TI Basic #3]'
     3B3A 5449     
     3B3C 2042     
     3B3E 6173     
     3B40 6963     
     3B42 2023     
     3B44 335D     
0078                                  even
0079 3B46 0D5B     txt.tib4           stri '[TI Basic #4]'
     3B48 5449     
     3B4A 2042     
     3B4C 6173     
     3B4E 6963     
     3B50 2023     
     3B52 345D     
0080                                  even
0081 3B54 0D5B     txt.tib5           stri '[TI Basic #5]'
     3B56 5449     
     3B58 2042     
     3B5A 6173     
     3B5C 6963     
     3B5E 2023     
     3B60 355D     
0082                                  even
0083 3B62 0444     txt.filetype.dv80  stri 'DV80'
     3B64 5638     
     3B66 30       
0084                                  even
0085 3B68 034D     txt.m1             stri 'M1='
     3B6A 313D     
0086                                  even
0087 3B6C 034D     txt.m2             stri 'M2='
     3B6E 323D     
0088                                  even
0089 3B70 1E46     txt.keys.default   stri 'F9-Menu  ^H-Help  ^U-Shortcuts'
     3B72 392D     
     3B74 4D65     
     3B76 6E75     
     3B78 2020     
     3B7A 5E48     
     3B7C 2D48     
     3B7E 656C     
     3B80 7020     
     3B82 205E     
     3B84 552D     
     3B86 5368     
     3B88 6F72     
     3B8A 7463     
     3B8C 7574     
     3B8E 73       
0090                                  even
0091 3B90 2946     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  ^U-Shortcuts  F0-Basic#'
     3B92 392D     
     3B94 4D65     
     3B96 6E75     
     3B98 2020     
     3B9A 5E48     
     3B9C 2D48     
     3B9E 656C     
     3BA0 7020     
     3BA2 205E     
     3BA4 552D     
     3BA6 5368     
     3BA8 6F72     
     3BAA 7463     
     3BAC 7574     
     3BAE 7320     
     3BB0 2046     
     3BB2 302D     
     3BB4 4261     
     3BB6 7369     
     3BB8 6323     
0092                                  even
0093 3BBA 3446     txt.keys.block     stri 'F9-Exit  ^Copy ^Move ^Del ^Save ^Print ^[1-3]Clipbrd'
     3BBC 392D     
     3BBE 4578     
     3BC0 6974     
     3BC2 2020     
     3BC4 5E43     
     3BC6 6F70     
     3BC8 7920     
     3BCA 5E4D     
     3BCC 6F76     
     3BCE 6520     
     3BD0 5E44     
     3BD2 656C     
     3BD4 205E     
     3BD6 5361     
     3BD8 7665     
     3BDA 205E     
     3BDC 5072     
     3BDE 696E     
     3BE0 7420     
     3BE2 5E5B     
     3BE4 312D     
     3BE6 335D     
     3BE8 436C     
     3BEA 6970     
     3BEC 6272     
     3BEE 64       
0094                                  even
0095 3BF0 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoUnpack  SPACE-Unpack program'
     3BF2 392D     
     3BF4 4261     
     3BF6 636B     
     3BF8 2020     
     3BFA 4635     
     3BFC 2D41     
     3BFE 7574     
     3C00 6F55     
     3C02 6E70     
     3C04 6163     
     3C06 6B20     
     3C08 2053     
     3C0A 5041     
     3C0C 4345     
     3C0E 2D55     
     3C10 6E70     
     3C12 6163     
     3C14 6B20     
     3C16 7072     
     3C18 6F67     
     3C1A 7261     
     3C1C 6D       
0096                                  even
0097 3C1E 020E     txt.alpha.down     data >020e,>0f00
     3C20 0F00     
0098 3C22 0110     txt.vertline       data >0110
0099 3C24 011C     txt.keymarker      byte 1,28
0100                                  even
0101 3C26 0120     txt.ws1            stri ' '
0102                                  even
0103 3C28 0220     txt.ws2            stri '  '
     3C2A 20       
0104                                  even
0105 3C2C 0320     txt.ws3            stri '   '
     3C2E 2020     
0106                                  even
0107 3C30 0420     txt.ws4            stri '    '
     3C32 2020     
     3C34 20       
0108                                  even
0109 3C36 0520     txt.ws5            stri '     '
     3C38 2020     
     3C3A 2020     
0110                                  even
0111      3C30     txt.filetype.none  equ txt.ws4
0112               
0113 3C3C 3550     txt.msg.mastcat    stri 'Put cursor on file in list and press ^O to load file.'
     3C3E 7574     
     3C40 2063     
     3C42 7572     
     3C44 736F     
     3C46 7220     
     3C48 6F6E     
     3C4A 2066     
     3C4C 696C     
     3C4E 6520     
     3C50 696E     
     3C52 206C     
     3C54 6973     
     3C56 7420     
     3C58 616E     
     3C5A 6420     
     3C5C 7072     
     3C5E 6573     
     3C60 7320     
     3C62 5E4F     
     3C64 2074     
     3C66 6F20     
     3C68 6C6F     
     3C6A 6164     
     3C6C 2066     
     3C6E 696C     
     3C70 652E     
0114                                  even
0115               
0116 3C72 1D54     txt.msg.tibasic    stri 'TI Basic program mode active.'
     3C74 4920     
     3C76 4261     
     3C78 7369     
     3C7A 6320     
     3C7C 7072     
     3C7E 6F67     
     3C80 7261     
     3C82 6D20     
     3C84 6D6F     
     3C86 6465     
     3C88 2061     
     3C8A 6374     
     3C8C 6976     
     3C8E 652E     
0117                                  even
0118               
0119               ;--------------------------------------------------------------
0120               ; Strings for error line pane
0121               ;--------------------------------------------------------------
0122 3C90 1546     txt.ioerr.load     stri 'Failed loading file: '
     3C92 6169     
     3C94 6C65     
     3C96 6420     
     3C98 6C6F     
     3C9A 6164     
     3C9C 696E     
     3C9E 6720     
     3CA0 6669     
     3CA2 6C65     
     3CA4 3A20     
0123                                  even
0124 3CA6 1446     txt.ioerr.save     stri 'Failed saving file: '
     3CA8 6169     
     3CAA 6C65     
     3CAC 6420     
     3CAE 7361     
     3CB0 7669     
     3CB2 6E67     
     3CB4 2066     
     3CB6 696C     
     3CB8 653A     
     3CBA 20       
0125                                  even
0126 3CBC 1B46     txt.ioerr.print    stri 'Failed printing to device: '
     3CBE 6169     
     3CC0 6C65     
     3CC2 6420     
     3CC4 7072     
     3CC6 696E     
     3CC8 7469     
     3CCA 6E67     
     3CCC 2074     
     3CCE 6F20     
     3CD0 6465     
     3CD2 7669     
     3CD4 6365     
     3CD6 3A20     
0127                                  even
0128 3CD8 164E     txt.io.nofile      stri 'No filename specified.'
     3CDA 6F20     
     3CDC 6669     
     3CDE 6C65     
     3CE0 6E61     
     3CE2 6D65     
     3CE4 2073     
     3CE6 7065     
     3CE8 6369     
     3CEA 6669     
     3CEC 6564     
     3CEE 2E       
0129                                  even
0130 3CF0 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3CF2 6E64     
     3CF4 6578     
     3CF6 2066     
     3CF8 756C     
     3CFA 6C2E     
     3CFC 2046     
     3CFE 696C     
     3D00 6520     
     3D02 746F     
     3D04 6F20     
     3D06 6C61     
     3D08 7267     
     3D0A 6520     
     3D0C 666F     
     3D0E 7220     
     3D10 6564     
     3D12 6974     
     3D14 6F72     
     3D16 2062     
     3D18 7566     
     3D1A 6665     
     3D1C 722E     
0131                                  even
0132 3D1E 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3D20 6F70     
     3D22 792F     
     3D24 4D6F     
     3D26 7665     
     3D28 2074     
     3D2A 6172     
     3D2C 6765     
     3D2E 7420     
     3D30 6D75     
     3D32 7374     
     3D34 2062     
     3D36 6520     
     3D38 6F75     
     3D3A 7473     
     3D3C 6964     
     3D3E 6520     
     3D40 4D31     
     3D42 2D4D     
     3D44 3220     
     3D46 7261     
     3D48 6E67     
     3D4A 652E     
0133                                  even
0134               
0135               ;--------------------------------------------------------------
0136               ; Strings for command buffer
0137               ;--------------------------------------------------------------
0138 3D4C 013E     txt.cmdb.prompt    stri '>'
0139                                  even
0140 3D4E 0D43     txt.colorscheme    stri 'Color scheme:'
     3D50 6F6C     
     3D52 6F72     
     3D54 2073     
     3D56 6368     
     3D58 656D     
     3D5A 653A     
0141                                  even
                   < rom.resident.asm
0065                       copy  "data.defaults.asm"           ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3D5C 0650     def.printer.fname   stri 'PI.PIO'
     3D5E 492E     
     3D60 5049     
     3D62 4F       
0008 3D63   09     def.clip.fname.a    stri 'DSK1.CLIP'
     3D64 4453     
     3D66 4B31     
     3D68 2E43     
     3D6A 4C49     
     3D6C 50       
0009 3D6D   09     def.clip.fname.b    stri 'DSK6.CLIP'
     3D6E 4453     
     3D70 4B36     
     3D72 2E43     
     3D74 4C49     
     3D76 50       
0010 3D77   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3D78 5449     
     3D7A 5049     
     3D7C 2E43     
     3D7E 4C49     
     3D80 50       
0011 3D81   0C     def.mc.fname.a      stri 'DSK1.MASTCAT'
     3D82 4453     
     3D84 4B31     
     3D86 2E4D     
     3D88 4153     
     3D8A 5443     
     3D8C 4154     
0012 3D8E 0C44     def.mc.fname.b      stri 'DSK6.MASTCAT'
     3D90 534B     
     3D92 362E     
     3D94 4D41     
     3D96 5354     
     3D98 4341     
     3D9A 54       
0013 3D9B   0C     def.mc.fname.c      stri 'TIPI.MASTCAT'
     3D9C 5449     
     3D9E 5049     
     3DA0 2E4D     
     3DA2 4153     
     3DA4 5443     
     3DA6 4154     
0014 3DA8 2F2C     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3DAA 4453     
     3DAC 4B2C     
     3DAE 4844     
     3DB0 582C     
     3DB2 4944     
     3DB4 452C     
     3DB6 5049     
     3DB8 2E2C     
     3DBA 5049     
     3DBC 4F2C     
     3DBE 5449     
     3DC0 5049     
     3DC2 2E2C     
     3DC4 5244     
     3DC6 2C53     
     3DC8 4353     
     3DCA 2C53     
     3DCC 4444     
     3DCE 2C57     
     3DD0 4453     
     3DD2 2C52     
     3DD4 5332     
     3DD6 3332     
                   < rom.resident.asm
0066                       copy  "data.fg99.carts.asm"         ; Cartridge images
     **** ****     > data.fg99.carts.asm
0001               * FILE......: data.fg99.carts.asm
0002               * Purpose...: FinalGROM cartridge images
0003               
0004               ***************************************************************
0005               *                   Cartridge images
0006               ***************************************************************
0007                      even
0008               *--------------------------------------------------------------
0009               * Cartridge 'Force Command'
0010               *--------------------------------------------------------------
0011               fg99.cart.fcmd:
0012 3DD8 99              byte   >99                   ; \
0013 3DD9   4F            text   'OKFG99'              ; | Send this to reload
     3DDA 4B46     
     3DDC 4739     
     3DDE 39       
0014 3DDF   99            byte   >99                   ; /
0015 3DE0 4643            text   "FCMDG"               ; \ File to load (8 chars, pad with >00)
     3DE2 4D44     
     3DE4 47       
0016 3DE5   00            byte   >00, >00, >00         ; /
     3DE6 0000     
0017 3DE8 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0018 3DEA 0000            data   >0000                 ; Start address
0019                      even
0020               
0021               *--------------------------------------------------------------
0022               * Cartridge 'Extended Basic GEM'
0023               *--------------------------------------------------------------
0024               fg99.cart.xbgem:
0025 3DEC 99              byte   >99                   ; \
0026 3DED   4F            text   'OKFG99'              ; | Send this to reload
     3DEE 4B46     
     3DF0 4739     
     3DF2 39       
0027 3DF3   99            byte   >99                   ; /
0028 3DF4 5842            text   "XB29GEMG"            ; \ File to load (8 chars, pad with >00)
     3DF6 3239     
     3DF8 4745     
     3DFA 4D47     
0029                      ;                            ; /
0030 3DFC 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0031 3DFE 0000            data   >0000                 ; Start address
0032                      even
0033               
0034               *--------------------------------------------------------------
0035               * Cartridge 'Rich Extended Basic'
0036               *--------------------------------------------------------------
0037               fg99.cart.rxb:
0038 3E00 99              byte   >99                   ; \
0039 3E01   4F            text   'OKFG99'              ; | Send this to reload
     3E02 4B46     
     3E04 4739     
     3E06 39       
0040 3E07   99            byte   >99                   ; /
0041 3E08 5258            text   "RXBG"                ; \ File to load (8 chars, pad with >00)
     3E0A 4247     
0042 3E0C 0000            byte   >00, >00, >00, >00    ; /
     3E0E 0000     
0043 3E10 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0044 3E12 0000            data   >0000                 ; Start address
0045                      even
0046               
0047               *--------------------------------------------------------------
0048               * Cartridge 'fbForth'
0049               *--------------------------------------------------------------
0050               fg99.cart.fbforth:
0051 3E14 99              byte   >99                   ; \
0052 3E15   4F            text   'OKFG99'              ; | Send this to reload
     3E16 4B46     
     3E18 4739     
     3E1A 39       
0053 3E1B   99            byte   >99                   ; /
0054 3E1C 4642            text   "FBFORTHC"            ; \ File to load (8 chars, pad with >00)
     3E1E 464F     
     3E20 5254     
     3E22 4843     
0055                      ;                            ; /
0056 3E24 0000            data   >0000                 ; >0000 for GROM/mixed, >FFFF for ROM only
0057 3E26 0000            data   >0000                 ; Start address
0058                      even
                   < rom.resident.asm
                   < stevie_b1.asm
0054                       ;------------------------------------------------------
0055                       ; Activate bank 1 and branch to  >6036
0056                       ;------------------------------------------------------
0057 3E28 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3E2A 6002     
0058               
0062               
0063 3E2C 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3E2E 6046     
0064               ***************************************************************
0065               * Step 3: Include main editor modules
0066               ********|*****|*********************|**************************
0067               main:
0068                       aorg  kickstart.code2       ; >6046
0069 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0070                       ;-----------------------------------------------------------------------
0071                       ; Include files
0072                       ;-----------------------------------------------------------------------
0073                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 27FA     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 2686     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 272A     
0043               
0045               
0046 605E 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6060 2332     
0047 6062 3140                   data >3140            ; F18a VR49 (>31), bit 40
0048               
0050               
0051 6064 06A0  32         bl    @putvr                ; Turn on position based attributes
     6066 2332     
0052 6068 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 606A 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     606C 2332     
0055 606E 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 6070 06A0  32         bl    @filv
     6072 228E     
0060 6074 0000                   data >0000,32,vdp.sit.size
     6076 0020     
     6078 0960     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 607A 06A0  32         bl    @film
     607C 2236     
0066 607E A000                   data >a000,00,20000   ; Clear a000-eedf
     6080 0000     
     6082 4E20     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 6084 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6086 26A6     
0071 6088 06A0  32         bl    @s8x8                 ; Small sprite
     608A 26B6     
0072               
0073 608C 06A0  32         bl    @cpym2m
     608E 24DA     
0074 6090 38A0                   data romsat,ramsat,14 ; Load sprite SAT
     6092 A056     
     6094 000E     
0075               
0076 6096 C820  54         mov   @romsat+2,@tv.curshape
     6098 38A2     
     609A A214     
0077                                                   ; Save cursor shape & color
0078               
0079 609C 06A0  32         bl    @vdp.dump.patterns    ; Dump sprite and character patterns to VDP
     609E 7780     
0080               
0081 60A0 04E0  34         clr   @parm1                ; Pick font 0
     60A2 A006     
0082 60A4 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     60A6 779E     
0083                                                   ; \ i  @parm1       = Font index (0-5)
0084                                                   ; / o  @tv.font.ptr = Pointer to font
0085               *--------------------------------------------------------------
0086               * Initialize
0087               *--------------------------------------------------------------
0088 60A8 06A0  32         bl    @mem.sams.setup.stevie
     60AA 610C     
0089                                                   ; Load SAMS pages for stevie
0090               
0091 60AC 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60AE 331E     
0092 60B0 06A0  32         bl    @tv.reset             ; Reset editor
     60B2 338C     
0093               
0094 60B4 06A0  32         bl    @dialog               ; Setup memory for dialogs stringa
     60B6 75EC     
0095                       ;------------------------------------------------------
0096                       ; Load colorscheme amd turn on screen
0097                       ;------------------------------------------------------
0098 60B8 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60BA A006     
0099 60BC 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60BE A008     
0100 60C0 04E0  34         clr   @parm3                ; Colorize all panes
     60C2 A00A     
0101               
0102 60C4 06A0  32         bl    @pane.colorscheme.load
     60C6 70C8     
0103                                                   ; Reload color scheme
0104                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0105                                                   ; | i  @parm2 = Skip colorizing marked lines
0106                                                   ; |             if >FFFF
0107                                                   ; | i  @parm3 = Only colorize CMDB pane
0108                                                   ; /             if >FFFF
0109               
0110                       ;-------------------------------------------------------
0111                       ; Setup editor tasks
0112                       ;-------------------------------------------------------
0113 60C8 06A0  32         bl    @at
     60CA 26C6     
0114 60CC 0000                   data  >0000           ; Cursor YX position = >0000
0115               
0116 60CE 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60D0 A064     
0117 60D2 C804  30         mov   tmp0,@wtitab          ; /
     60D4 832C     
0118               
0120               
0121 60D6 06A0  32         bl    @mkslot
     60D8 2ECC     
0122 60DA 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60DC 705C     
0123 60DE 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60E0 37DE     
0124 60E2 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60E4 3880     
0125 60E6 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60E8 3894     
0126 60EA FFFF                   data eol
0127               
0137               
0138 60EC 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60EE 0300     
0139 60F0 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60F2 8314     
0140                       ;-------------------------------------------------------
0141                       ; Setup keyboard scanning and start kernel/timers
0142                       ;-------------------------------------------------------
0143 60F4 06A0  32         bl    @mkhook
     60F6 2EB8     
0144 60F8 6130                   data edkey.keyscan.hook
0145                                                   ; Setup keyboard scanning hook
0146                       ;-------------------------------------------------------
0147                       ; Initialisation complete
0148                       ;-------------------------------------------------------
0149 60FA 06A0  32         bl    @magic.set            ; Set magic string
     60FC 7890     
0150               
0151 60FE 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     6100 37D7     
0152 6102 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     6104 8370     
0153 6106 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0154                       ;-------------------------------------------------------
0155                       ; Start kernel
0156                       ;-------------------------------------------------------
0157 6108 0460  28         b     @tmgr                 ; Run kernel and timers
     610A 2E04     
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Low-level modules
0076                       ;-----------------------------------------------------------------------
0077                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 610C 0649  14         dect  stack
0018 610E C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 6110 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     6112 786C     
0023               
0024 6114 06A0  32         bl    @sams.layout.copy
     6116 263E     
0025 6118 A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026                       ;------------------------------------------------------
0027                       ; Set lowest / highest page in use for editor buffer
0028                       ;------------------------------------------------------
0029 611A C820  54         mov   @tv.sams.c000,@edb.sams.page
     611C A208     
     611E A518     
0030 6120 C820  54         mov   @edb.sams.page,@edb.sams.lopage
     6122 A518     
     6124 A51A     
0031 6126 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6128 A518     
     612A A51C     
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               mem.sams.setup.stevie.exit:
0036 612C C2F9  30         mov   *stack+,r11           ; Pop r11
0037 612E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0078                       ;-----------------------------------------------------------------------
0079                       ; Keyboard actions
0080                       ;-----------------------------------------------------------------------
0081                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 6130 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6132 A900     
0013                                                   ; on the stack anymore.
0014               
0015 6134 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6136 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6138 FFCE     
0020 613A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     613C 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 613E 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     6140 200A     
0025 6142 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 6144 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6146 200A     
0031 6148 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     614A 2002     
     614C A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 614E C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     6150 A028     
     6152 A02A     
0036 6154 0460  28         b     @edkey.key.process    ; Process key
     6156 6178     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 6158 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     615A A026     
0042 615C 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     615E 2002     
0043 6160 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6162 04E0  34         clr   @keycode1             ; \
     6164 A028     
0047 6166 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6168 A02A     
0048 616A 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     616C 0001     
0049 616E C804  38         mov   tmp0,@kbflags         ; /
     6170 A026     
0050                       ;------------------------------------------------------
0051                       ; Keyboard debounce
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.debounce:
0054 6172 1000  14         nop                         ; No purpose anymore, but branched to
0055                                                   ; from several subroutines.
0056                                                   ; Needs to be refactored.
0057                       ;------------------------------------------------------
0058                       ; Exit keyboard hook
0059                       ;------------------------------------------------------
0060               edkey.keyscan.hook.exit:
0061 6174 0460  28         b     @hookok               ; Return
     6176 2E08     
                   < stevie_b1.asm
0082                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 6178 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     617A A028     
0009 617C 0A85  32         sla   tmp1,8                ; Move to MSB
0010 617E 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 6180 C1A0  34         mov   @tv.pane.focus,tmp2
     6182 A224     
0015 6184 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     6186 0000     
0016 6188 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 618A 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     618C 0001     
0020 618E 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 6190 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6192 FFCE     
0026 6194 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6196 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 6198 0285  22         ci    tmp1,>2000            ; Space key pressed?
     619A 2000     
0032 619C 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 619E 0649  14         dect  stack
0038 61A0 C644  30         mov   tmp0,*stack           ; Push tmp0
0039 61A2 0649  14         dect  stack
0040 61A4 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 61A6 0649  14         dect  stack
0042 61A8 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 61AA 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 61AC 020C  20         li    r12,>0024             ; CRU address decoder
     61AE 0024     
0046 61B0 30C4  30         ldcr  tmp0,3                ; Select column
0047 61B2 020C  20         li    r12,>0006             ; Address of the first row
     61B4 0006     
0048 61B6 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61B8 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61BA 4000     
0050 61BC 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61BE C339  30         mov   *stack+,r12           ; Pop r12
0056 61C0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61C4 0460  28         b     @edkey.action.block.mark
     61C6 6870     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61C8 C339  30         mov   *stack+,r12           ; Pop r12
0065 61CA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61CC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61CE 0206  20         li    tmp2,keymap_actions.editor
     61D0 78C6     
0072 61D2 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61D4 0206  20         li    tmp2,keymap_actions.cmdb
     61D6 79A0     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 61D8 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61DA 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 61DC 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61DE 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 61E0 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61E2 6100     
0096 61E4 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61E6 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61E8 7A00     
0099 61EA 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61EC 0225  22         ai    tmp1,->2000           ; Make uppercase
     61EE E000     
0102 61F0 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61F2 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 61F4 0225  22         ai    tmp1,>2000            ; Make lowercase
     61F6 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61F8 0226  22         ai    tmp2,4                ; Skip current entry
     61FA 0004     
0112 61FC 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 61FE 0586  14         inc   tmp2                  ; Move to scope
0118 6200 9816  42         cb    *tmp2,@tv.pane.focus+1
     6202 A225     
0119                                                   ; (1) Process key if scope matches pane
0120 6204 1309  14         jeq   edkey.key.process.action
0121               
0122 6206 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     6208 A71D     
0123 620A 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 620C 0226  22         ai    tmp2,3                ; Skip current entry
     620E 0003     
0128 6210 C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     6212 A028     
0129 6214 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6216 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 6218 0586  14         inc   tmp2                  ; Move to action address
0136 621A C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 621C 0204  20         li    tmp0,id.dialog.unsaved
     621E 0065     
0139 6220 8120  34         c     @cmdb.dialog,tmp0
     6222 A71C     
0140 6224 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6226 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6228 A72C     
0143 622A 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 622C C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     622E A224     
0149 6230 1602  14         jne   !                     ; No, skip frame buffer
0150 6232 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6234 66E6     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 6236 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     6238 0001     
0155 623A 1607  14         jne   edkey.key.process.crash
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
0160 623C C120  34         mov   @cmdb.dialog,tmp0
     623E A71C     
0161 6240 0284  22         ci    tmp0,99
     6242 0063     
0162 6244 1506  14         jgt   edkey.key.process.enter
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 6246 0460  28         b     @edkey.action.cmdb.char
     6248 69FE     
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
0172 624A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     624C FFCE     
0173 624E 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6250 2026     
0174                       ;-------------------------------------------------------
0175                       ; Check ENTER key if ID >= 100 and close pane if match
0176                       ;-------------------------------------------------------
0177               edkey.key.process.enter:
0178 6252 C120  34         mov   @keycode1,tmp0        ; Get key
     6254 A028     
0179 6256 0284  22         ci    tmp0,key.space        ; SPACE ?
     6258 0020     
0180 625A 1602  14         jne   edkey.key.process.exit
0181 625C 0460  28         b     @edkey.action.cmdb.close.dialog
     625E 6DEC     
0182                       ;-------------------------------------------------------
0183                       ; Exit
0184                       ;-------------------------------------------------------
0185               edkey.key.process.exit:
0186 6260 0460  28         b     @edkey.keyscan.hook.debounce
     6262 6172     
0187                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       ;-----------------------------------------------------------------------
0084                       ; Keyboard actions - Framebuffer (1)
0085                       ;-----------------------------------------------------------------------
0086                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 6264 C120  34         mov   @fb.column,tmp0
     6266 A30C     
0009 6268 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 626A 0620  34         dec   @fb.column            ; Column-- in screen buffer
     626C A30C     
0014 626E 0620  26         dec   @wyx                  ; Column-- VDP cursor
     6270 832A     
0015 6272 0620  34         dec   @fb.current
     6274 A302     
0016 6276 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6278 A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 627A 0460  28 !       b     @edkey.keyscan.hook.debounce
     627C 6172     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 627E 8820  50         c     @fb.column,@fb.row.length
     6280 A30C     
     6282 A308     
0029 6284 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 6286 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6288 A30C     
0034 628A 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     628C 832A     
0035 628E 05A0  34         inc   @fb.current
     6290 A302     
0036 6292 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6294 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 6296 0460  28 !       b     @edkey.keyscan.hook.debounce
     6298 6172     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 629A 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     629C 7680     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 629E 0460  28         b     @edkey.keyscan.hook.debounce
     62A0 6172     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 62A2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62A4 A31A     
0061 62A6 C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     62A8 A308     
0062 62AA 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     62AC 0050     
0063 62AE 1102  14         jlt   !                     ; | is right of last character on line,
0064 62B0 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     62B2 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 62B4 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     62B6 A30C     
0069 62B8 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     62BA 26DE     
0070               
0071 62BC 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     62BE 30EE     
0072                                                   ; \ i   @fb.top      = Address top row in FB
0073                                                   ; | i   @fb.topline  = Top line in FB
0074                                                   ; | i   @fb.row      = Current row in FB
0075                                                   ; |                  (offset 0..@fb.scrrows)
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; | i   @fb.colsline = Columns per line FB
0078                                                   ; |
0079                                                   ; / o   @fb.current  = Updated pointer
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083 62C0 0460  28         b     @edkey.keyscan.hook.debounce
     62C2 6172     
0084                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 62C4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62C6 A31A     
0009 62C8 C120  34         mov   @fb.column,tmp0
     62CA A30C     
0010 62CC 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62CE C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62D0 A302     
0015 62D2 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62D4 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 62D6 0605  14         dec   tmp1
0022 62D8 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62DA 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 62DC D195  26         movb  *tmp1,tmp2            ; Get character
0030 62DE 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62E0 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62E2 0986  32         srl   tmp2,8                ; Right justify
0033 62E4 0286  22         ci    tmp2,32               ; Space character found?
     62E6 0020     
0034 62E8 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 62EA 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62EC 2020     
0040 62EE 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62F0 0287  22         ci    tmp3,>20ff            ; First character is space
     62F2 20FF     
0043 62F4 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62F6 C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62F8 A30C     
0048 62FA 61C4  18         s     tmp0,tmp3
0049 62FC 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62FE 0002     
0050 6300 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 6302 0585  14         inc   tmp1
0056 6304 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 6306 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6308 A30C     
0062 630A 06A0  32         bl    @xsetx                ; Set VDP cursor X
     630C 26DE     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 630E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6310 30EE     
0068                                                   ; \ i   @fb.top      = Address top row in FB
0069                                                   ; | i   @fb.topline  = Top line in FB
0070                                                   ; | i   @fb.row      = Current row in FB
0071                                                   ; |                  (offset 0..@fb.scrrows)
0072                                                   ; | i   @fb.column   = Current column in FB
0073                                                   ; | i   @fb.colsline = Columns per line FB
0074                                                   ; |
0075                                                   ; / o   @fb.current  = Updated pointer
0076               
0077 6312 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6314 6172     
0078               
0079               
0080               
0081               *---------------------------------------------------------------
0082               * Cursor next word
0083               *---------------------------------------------------------------
0084               edkey.action.nword:
0085 6316 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6318 A31A     
0086 631A 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0087 631C C120  34         mov   @fb.column,tmp0
     631E A30C     
0088 6320 8804  34         c     tmp0,@fb.row.length
     6322 A308     
0089 6324 1426  14         jhe   !                     ; column=last char ? Skip further processing
0090                       ;-------------------------------------------------------
0091                       ; Prepare 2 char buffer
0092                       ;-------------------------------------------------------
0093 6326 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6328 A302     
0094 632A 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0095 632C 1006  14         jmp   edkey.action.nword_scan_char
0096                       ;-------------------------------------------------------
0097                       ; Multiple spaces mode
0098                       ;-------------------------------------------------------
0099               edkey.action.nword_ms:
0100 632E 0708  14         seto  tmp4                  ; Set multiple spaces mode
0101                       ;-------------------------------------------------------
0102                       ; Scan forward to first character following space
0103                       ;-------------------------------------------------------
0104               edkey.action.nword_scan
0105 6330 0585  14         inc   tmp1
0106 6332 0584  14         inc   tmp0                  ; Column++ in screen buffer
0107 6334 8804  34         c     tmp0,@fb.row.length
     6336 A308     
0108 6338 1316  14         jeq   edkey.action.nword_done
0109                                                   ; Column=last char ? Skip further processing
0110                       ;-------------------------------------------------------
0111                       ; Check character
0112                       ;-------------------------------------------------------
0113               edkey.action.nword_scan_char
0114 633A D195  26         movb  *tmp1,tmp2            ; Get character
0115 633C 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0116 633E D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0117 6340 0986  32         srl   tmp2,8                ; Right justify
0118               
0119 6342 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6344 FFFF     
0120 6346 1604  14         jne   edkey.action.nword_scan_char_other
0121                       ;-------------------------------------------------------
0122                       ; Special handling if multiple spaces found
0123                       ;-------------------------------------------------------
0124               edkey.action.nword_scan_char_ms:
0125 6348 0286  22         ci    tmp2,32
     634A 0020     
0126 634C 160C  14         jne   edkey.action.nword_done
0127                                                   ; Exit if non-space found
0128 634E 10F0  14         jmp   edkey.action.nword_scan
0129                       ;-------------------------------------------------------
0130                       ; Normal handling
0131                       ;-------------------------------------------------------
0132               edkey.action.nword_scan_char_other:
0133 6350 0286  22         ci    tmp2,32               ; Space character found?
     6352 0020     
0134 6354 16ED  14         jne   edkey.action.nword_scan
0135                                                   ; No space found, try again
0136                       ;-------------------------------------------------------
0137                       ; Space found, now look closer
0138                       ;-------------------------------------------------------
0139 6356 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6358 2020     
0140 635A 13E9  14         jeq   edkey.action.nword_ms
0141                                                   ; Yes, so continue scanning
0142 635C 0287  22         ci    tmp3,>20ff            ; First characer is space?
     635E 20FF     
0143 6360 13E7  14         jeq   edkey.action.nword_scan
0144                       ;--------------------------------------------------------
0145                       ; Set cursor following space
0146                       ;--------------------------------------------------------
0147 6362 0585  14         inc   tmp1
0148 6364 0584  14         inc   tmp0                  ; Column++ in screen buffer
0149                       ;-------------------------------------------------------
0150                       ; Save position and position hardware cursor
0151                       ;-------------------------------------------------------
0152               edkey.action.nword_done:
0153 6366 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6368 A30C     
0154 636A 06A0  32         bl    @xsetx                ; Set VDP cursor X
     636C 26DE     
0155                       ;-------------------------------------------------------
0156                       ; Exit
0157                       ;-------------------------------------------------------
0158               edkey.action.nword.exit:
0159 636E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6370 30EE     
0160                                                   ; \ i   @fb.top      = Address top row in FB
0161                                                   ; | i   @fb.topline  = Top line in FB
0162                                                   ; | i   @fb.row      = Current row in FB
0163                                                   ; |                  (offset 0..@fb.scrrows)
0164                                                   ; | i   @fb.column   = Current column in FB
0165                                                   ; | i   @fb.colsline = Columns per line FB
0166                                                   ; |
0167                                                   ; / o   @fb.current  = Updated pointer
0168               
0169 6372 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6374 6172     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 6376 C120  34         mov   @fb.vwco,tmp0
     6378 A310     
0009 637A 0284  22         ci    tmp0,16
     637C 0010     
0010 637E 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 6380 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6382 04E0  34         clr   @parm1
     6384 A006     
0016 6386 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 6388 0224  22 !       ai    tmp0,-16              ; Scroll left
     638A FFF0     
0021 638C C804  38         mov   tmp0,@parm1           ; View Window Column offset
     638E A006     
0022               
0023 6390 0204  20         li    tmp0,16               ; Temporary constant
     6392 0010     
0024 6394 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     6396 A30C     
     6398 200E     
0025 639A 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 639C A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     639E A30C     
0030 63A0 A804  30         a     tmp0,@wyx             ; VDP Cursor
     63A2 832A     
0031 63A4 A804  38         a     tmp0,@fb.current
     63A6 A302     
0032 63A8 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 63AA C120  34         mov   @fb.vwco,tmp0
     63AC A310     
0040 63AE 0284  22         ci    tmp0,175
     63B0 00AF     
0041 63B2 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 63B4 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 63B6 04E0  34         clr   @parm1
     63B8 A006     
0047 63BA 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 63BC 0224  22 !       ai    tmp0,16               ; Scroll right
     63BE 0010     
0052 63C0 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63C2 A006     
0053               
0054 63C4 0204  20         li    tmp0,16               ; Temporary constant
     63C6 0010     
0055 63C8 8120  34         c     @fb.column,tmp0
     63CA A30C     
0056 63CC 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63CE 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63D0 A30C     
0061 63D2 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63D4 832A     
0062 63D6 6804  38         s     tmp0,@fb.current
     63D8 A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 63DA 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63DC 7630     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 63DE 0460  28         b     @edkey.keyscan.hook.debounce
     63E0 6172     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0089                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 63E2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63E4 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63E6 8820  50         c     @fb.row.dirty,@w$ffff
     63E8 A30A     
     63EA 2022     
0013 63EC 1604  14         jne   edkey.action.ppage.sanity
0014               
0015 63EE 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63F0 6EBE     
0016                                                   ; \ i   @fb.top      = Address top row in FB
0017                                                   ; | i   @fb.row      = Current row in FB
0018                                                   ; | i   @fb.column   = Current column in FB
0019                                                   ; / i   @fb.colsline = Cols per line in FB
0020               
0021 63F2 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63F4 A30A     
0022                       ;-------------------------------------------------------
0023                       ; Assert
0024                       ;-------------------------------------------------------
0025               edkey.action.ppage.sanity:
0026 63F6 C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63F8 A304     
0027 63FA 1312  14         jeq   edkey.action.ppage.exit
0028                       ;-------------------------------------------------------
0029                       ; Special treatment top page
0030                       ;-------------------------------------------------------
0031 63FC 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63FE A31C     
0032 6400 1503  14         jgt   edkey.action.ppage.topline
0033 6402 04E0  34         clr   @fb.topline           ; topline = 0
     6404 A304     
0034 6406 1003  14         jmp   edkey.action.ppage.refresh
0035                       ;-------------------------------------------------------
0036                       ; Adjust topline
0037                       ;-------------------------------------------------------
0038               edkey.action.ppage.topline:
0039 6408 6820  54         s     @fb.scrrows,@fb.topline
     640A A31C     
     640C A304     
0040                       ;-------------------------------------------------------
0041                       ; Refresh page
0042                       ;-------------------------------------------------------
0043               edkey.action.ppage.refresh:
0044 640E C820  54         mov   @fb.topline,@parm1
     6410 A304     
     6412 A006     
0045 6414 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6416 A312     
0046               
0047 6418 04E0  34         clr   @parm2                ; No row offset in frame buffer
     641A A008     
0048               
0049 641C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     641E 6494     
0050                                                   ; | i  @parm1 = Top line in editor buffer
0051                                                   ; / i  @parm2 = Row offset in frame buffer
0052                       ;-------------------------------------------------------
0053                       ; Exit
0054                       ;-------------------------------------------------------
0055               edkey.action.ppage.exit:
0056 6420 0460  28         b     @edkey.keyscan.hook.debounce
     6422 6172     
0057                                                   ; Back to editor main
0058               
0059               
0060               
0061               
0062               *---------------------------------------------------------------
0063               * Next page
0064               *---------------------------------------------------------------
0065               edkey.action.npage:
0066 6424 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6426 A31A     
0067                       ;-------------------------------------------------------
0068                       ; Crunch current row if dirty
0069                       ;-------------------------------------------------------
0070 6428 8820  50         c     @fb.row.dirty,@w$ffff
     642A A30A     
     642C 2022     
0071 642E 1604  14         jne   edkey.action.npage.sanity
0072               
0073 6430 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6432 6EBE     
0074                                                   ; \ i   @fb.top      = Address top row in FB
0075                                                   ; | i   @fb.row      = Current row in FB
0076                                                   ; | i   @fb.column   = Current column in FB
0077                                                   ; / i   @fb.colsline = Cols per line in FB
0078               
0079 6434 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6436 A30A     
0080                       ;-------------------------------------------------------
0081                       ; Assert
0082                       ;-------------------------------------------------------
0083               edkey.action.npage.sanity:
0084 6438 C120  34         mov   @fb.topline,tmp0
     643A A304     
0085 643C A120  34         a     @fb.scrrows,tmp0
     643E A31C     
0086 6440 0584  14         inc   tmp0                  ; Base 1 offset !
0087 6442 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     6444 A504     
0088 6446 150C  14         jgt   edkey.action.npage.exit
0089                       ;-------------------------------------------------------
0090                       ; Adjust topline
0091                       ;-------------------------------------------------------
0092               edkey.action.npage.topline:
0093 6448 A820  54         a     @fb.scrrows,@fb.topline
     644A A31C     
     644C A304     
0094                       ;-------------------------------------------------------
0095                       ; Refresh page
0096                       ;-------------------------------------------------------
0097               edkey.action.npage.refresh:
0098 644E C820  54         mov   @fb.topline,@parm1
     6450 A304     
     6452 A006     
0099 6454 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6456 A312     
0100               
0101 6458 04E0  34         clr   @parm2                ; No row offset in frame buffer
     645A A008     
0102               
0103 645C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     645E 6494     
0104                                                   ; | i  @parm1 = Top line in editor buffer
0105                                                   ; / i  @parm2 = Row offset in frame buffer
0106                       ;-------------------------------------------------------
0107                       ; Exit
0108                       ;-------------------------------------------------------
0109               edkey.action.npage.exit:
0110 6460 0460  28         b     @edkey.keyscan.hook.debounce
     6462 6172     
0111                                                   ; Back to editor main
                   < stevie_b1.asm
0090                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008 6464 06A0  32         bl    @fb.cursor.top        ; Goto top of file
     6466 7694     
0009 6468 0460  28         b     @edkey.keyscan.hook.debounce
     646A 6172     
0010                                                   ; Back to editor main
0011               
0012               *---------------------------------------------------------------
0013               * Goto top of screen
0014               *---------------------------------------------------------------
0015               edkey.action.topscr:
0016 646C 06A0  32         bl    @fb.cursor.topscr     ; Goto top of screen
     646E 769E     
0017 6470 0460  28         b     @edkey.keyscan.hook.debounce
     6472 6172     
0018                                                   ; Back to editor main
0019               
0020               *---------------------------------------------------------------
0021               * Goto bottom of file
0022               *---------------------------------------------------------------
0023               edkey.action.bot:
0024 6474 06A0  32         bl    @fb.cursor.bot        ; Goto bottom of file
     6476 76A8     
0025 6478 0460  28         b     @edkey.keyscan.hook.debounce
     647A 6172     
0026                                                   ; Back to editor main
0027               
0028               *---------------------------------------------------------------
0029               * Goto bottom of screen
0030               *---------------------------------------------------------------
0031               edkey.action.botscr:
0032 647C 06A0  32         bl    @fb.cursor.botscr     ; Goto bottom of screen
     647E 76B2     
0033 6480 0460  28         b     @edkey.keyscan.hook.debounce
     6482 6172     
0034                                                   ; Back to editor main
0035               
0036               *---------------------------------------------------------------
0037               * Cursor up
0038               *---------------------------------------------------------------
0039               edkey.action.up:
0040 6484 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     6486 766C     
0041 6488 0460  28         b     @edkey.keyscan.hook.debounce
     648A 6172     
0042                                                   ; Back to editor main
0043               
0044               *---------------------------------------------------------------
0045               * Cursor down
0046               *---------------------------------------------------------------
0047               edkey.action.down:
0048 648C 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     648E 7676     
0049 6490 0460  28         b     @edkey.keyscan.hook.debounce
     6492 6172     
0050                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.goto.asm"           ; Goto line in editor buffer
     **** ****     > edkey.fb.goto.asm
0001               * FILE......: edkey.fb.goto.asm
0002               * Purpose...: Goto specified line
0003               
0004               ***************************************************************
0005               * edkey.fb.goto.toprow
0006               *
0007               * Refresh frame buffer with specified top-row and row offset,
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.fb.goto.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               * @parm2  = Row offset in frame buffer
0018               *
0019               * Register usage
0020               * none
0021               ********|*****|*********************|**************************
0022               edkey.fb.goto.toprow:
0023 6494 0649  14         dect  stack
0024 6496 C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;-------------------------------------------------------
0026                       ; Assert on line
0027                       ;-------------------------------------------------------
0028 6498 C120  34         mov   @parm1,tmp0           ; \ Goto beyond EOF ?
     649A A006     
0029 649C 8120  34         c     @edb.lines,tmp0       ; /
     649E A504     
0030 64A0 1B05  14         jh    !                     ; No, keep on going
0031 64A2 C820  54         mov   @edb.lines,@parm1     ; \ Goto EOF
     64A4 A504     
     64A6 A006     
0032 64A8 0620  34         dec   @parm1                ; / Base 0
     64AA A006     
0033                       ;-------------------------------------------------------
0034                       ; Assert on row offset in frame buffer
0035                       ;-------------------------------------------------------
0036 64AC 8820  50 !       c     @parm2,@fb.scrrows    ; Row offset off page ?
     64AE A008     
     64B0 A31C     
0037 64B2 1104  14         jlt   edkey.fb.goto.row     ; No, use row offset
0038 64B4 C820  54         mov   @fb.scrrows,@fb.row   ; Limit row offset
     64B6 A31C     
     64B8 A306     
0039 64BA 1003  14         jmp   edkey.fb.goto.line    ; Goto line
0040               edkey.fb.goto.row:
0041 64BC C820  54         mov   @parm2,@fb.row        ; Set row offset
     64BE A008     
     64C0 A306     
0042                       ;-------------------------------------------------------
0043                       ; Goto line
0044                       ;-------------------------------------------------------
0045               edkey.fb.goto.line:
0046 64C2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64C4 A31A     
0047               
0048 64C6 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     64C8 7644     
0049                                                   ; | i  @parm1 = Line to start with
0050                                                   ; /             (becomes @fb.topline)
0051               
0052 64CA 04E0  34         clr   @fb.column            ; Frame buffer column 0
     64CC A30C     
0053               
0054 64CE C120  34         mov   @fb.row,tmp0          ; \
     64D0 A306     
0055 64D2 0A84  32         sla   tmp0,8                ; | Position VDP cursor
0056 64D4 C804  30         mov   tmp0,@wyx             ; /
     64D6 832A     
0057               
0058 64D8 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     64DA 30EE     
0059                                                   ; \ i   @fb.top      = Address top row in FB
0060                                                   ; | i   @fb.topline  = Top line in FB
0061                                                   ; | i   @fb.row      = Current row in FB
0062                                                   ; |                  (offset 0..@fb.scrrows)
0063                                                   ; | i   @fb.column   = Current column in FB
0064                                                   ; | i   @fb.colsline = Columns per line FB
0065                                                   ; |
0066                                                   ; / o   @fb.current  = Updated pointer
0067               
0068 64DC 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     64DE 3728     
0069                                                   ; | i  @fb.row        = Row in frame buffer
0070                                                   ; / o  @fb.row.length = Length of row
0071               
0072                       ;-------------------------------------------------------
0073                       ; Exit
0074                       ;-------------------------------------------------------
0075 64E0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 64E2 0460  28         b     @edkey.keyscan.hook.debounce
     64E4 6172     
0077                                                   ; Back to editor main
0078               
0079               
0080               *---------------------------------------------------------------
0081               * Goto specified line (@parm1) in editor buffer
0082               *---------------------------------------------------------------
0083               edkey.action.goto:
0084                       ;-------------------------------------------------------
0085                       ; Crunch current row if dirty
0086                       ;-------------------------------------------------------
0087 64E6 8820  50         c     @fb.row.dirty,@w$ffff
     64E8 A30A     
     64EA 2022     
0088 64EC 1609  14         jne   edkey.action.goto.refresh
0089               
0090 64EE 0649  14         dect  stack
0091 64F0 C660  46         mov   @parm1,*stack         ; Push parm1
     64F2 A006     
0092               
0093 64F4 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64F6 6EBE     
0094                                                   ; \ i   @fb.top      = Address top row in FB
0095                                                   ; | i   @fb.row      = Current row in FB
0096                                                   ; | i   @fb.column   = Current column in FB
0097                                                   ; / i   @fb.colsline = Cols per line in FB
0098               
0099 64F8 C839  50         mov   *stack+,@parm1        ; Pop parm1
     64FA A006     
0100 64FC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64FE A30A     
0101                       ;-------------------------------------------------------
0102                       ; Refresh page
0103                       ;-------------------------------------------------------
0104               edkey.action.goto.refresh:
0105 6500 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6502 A312     
0106               
0107 6504 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6506 A008     
0108               
0109 6508 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     650A 6494     
0110                                                   ; | i  @parm1 = Top line in editor buffer
0111                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0092                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008 650C 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     650E A506     
0009               
0010 6510 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6512 30EE     
0011                                                   ; \ i   @fb.top      = Address top row in FB
0012                                                   ; | i   @fb.topline  = Top line in FB
0013                                                   ; | i   @fb.row      = Current row in FB
0014                                                   ; |                  (offset 0..@fb.scrrows)
0015                                                   ; | i   @fb.column   = Current column in FB
0016                                                   ; | i   @fb.colsline = Columns per line FB
0017                                                   ; |
0018                                                   ; / o   @fb.current  = Updated pointer
0019                       ;-------------------------------------------------------
0020                       ; Assert 1 - Empty line
0021                       ;-------------------------------------------------------
0022               edkey.action.del_char.sanity1:
0023 6514 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6516 A308     
0024 6518 1336  14         jeq   edkey.action.del_char.exit
0025                                                   ; Exit if empty line
0026               
0027 651A C120  34         mov   @fb.current,tmp0      ; Get pointer
     651C A302     
0028                       ;-------------------------------------------------------
0029                       ; Assert 2 - Already at EOL
0030                       ;-------------------------------------------------------
0031               edkey.action.del_char.sanity2:
0032 651E C1C6  18         mov   tmp2,tmp3             ; \
0033 6520 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0034 6522 81E0  34         c     @fb.column,tmp3
     6524 A30C     
0035 6526 110A  14         jlt   edkey.action.del_char.sanity3
0036               
0037                       ;------------------------------------------------------
0038                       ; At EOL - clear current character
0039                       ;------------------------------------------------------
0040 6528 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0041 652A D505  30         movb  tmp1,*tmp0            ; /
0042 652C C820  54         mov   @fb.column,@fb.row.length
     652E A30C     
     6530 A308     
0043                                                   ; Row length - 1
0044 6532 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6534 A30A     
0045 6536 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6538 A318     
0046 653A 1025  14         jmp  edkey.action.del_char.exit
0047                       ;-------------------------------------------------------
0048                       ; Assert 3 - Abort if row length > 80
0049                       ;-------------------------------------------------------
0050               edkey.action.del_char.sanity3:
0051 653C 0286  22         ci    tmp2,colrow
     653E 0050     
0052 6540 1204  14         jle   edkey.action.del_char.prep
0053                                                   ; Continue if row length <= 80
0054                       ;-----------------------------------------------------------------------
0055                       ; CPU crash
0056                       ;-----------------------------------------------------------------------
0057 6542 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6544 FFCE     
0058 6546 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6548 2026     
0059                       ;-------------------------------------------------------
0060                       ; Calculate number of characters to move
0061                       ;-------------------------------------------------------
0062               edkey.action.del_char.prep:
0063 654A C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0064 654C 61E0  34         s     @fb.column,tmp3
     654E A30C     
0065 6550 0607  14         dec   tmp3                  ; Remove base 1 offset
0066 6552 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0067 6554 C144  18         mov   tmp0,tmp1
0068 6556 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0069 6558 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     655A A30C     
0070                       ;-------------------------------------------------------
0071                       ; Setup pointers
0072                       ;-------------------------------------------------------
0073 655C C120  34         mov   @fb.current,tmp0      ; Get pointer
     655E A302     
0074 6560 C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0075 6562 0585  14         inc   tmp1                  ; / tmp1 = Next character
0076                       ;-------------------------------------------------------
0077                       ; Loop from current character until end of line
0078                       ;-------------------------------------------------------
0079               edkey.action.del_char.loop:
0080 6564 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0081 6566 0606  14         dec   tmp2
0082 6568 16FD  14         jne   edkey.action.del_char.loop
0083                       ;-------------------------------------------------------
0084                       ; Special treatment if line 80 characters long
0085                       ;-------------------------------------------------------
0086 656A 0206  20         li    tmp2,colrow
     656C 0050     
0087 656E 81A0  34         c     @fb.row.length,tmp2
     6570 A308     
0088 6572 1603  14         jne   edkey.action.del_char.save
0089 6574 0604  14         dec   tmp0                  ; One time adjustment
0090 6576 04C5  14         clr   tmp1
0091 6578 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0092                       ;-------------------------------------------------------
0093                       ; Save variables
0094                       ;-------------------------------------------------------
0095               edkey.action.del_char.save:
0096 657A 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     657C A30A     
0097 657E 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6580 A318     
0098 6582 0620  34         dec   @fb.row.length        ; @fb.row.length--
     6584 A308     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.del_char.exit:
0103 6586 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6588 6172     
0104               
0105               
0106               *---------------------------------------------------------------
0107               * Delete until end of line
0108               *---------------------------------------------------------------
0109               edkey.action.del_eol:
0110 658A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     658C A506     
0111               
0112 658E 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6590 30EE     
0113                                                   ; \ i   @fb.top      = Address top row in FB
0114                                                   ; | i   @fb.topline  = Top line in FB
0115                                                   ; | i   @fb.row      = Current row in FB
0116                                                   ; |                  (offset 0..@fb.scrrows)
0117                                                   ; | i   @fb.column   = Current column in FB
0118                                                   ; | i   @fb.colsline = Columns per line FB
0119                                                   ; |
0120                                                   ; / o   @fb.current  = Updated pointer
0121               
0122 6592 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6594 A308     
0123 6596 1311  14         jeq   edkey.action.del_eol.exit
0124                                                   ; Exit if empty line
0125                       ;-------------------------------------------------------
0126                       ; Prepare for erase operation
0127                       ;-------------------------------------------------------
0128 6598 C120  34         mov   @fb.current,tmp0      ; Get pointer
     659A A302     
0129 659C C1A0  34         mov   @fb.colsline,tmp2
     659E A30E     
0130 65A0 61A0  34         s     @fb.column,tmp2
     65A2 A30C     
0131 65A4 04C5  14         clr   tmp1
0132                       ;-------------------------------------------------------
0133                       ; Loop until last column in frame buffer
0134                       ;-------------------------------------------------------
0135               edkey.action.del_eol_loop:
0136 65A6 DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0137 65A8 0606  14         dec   tmp2
0138 65AA 16FD  14         jne   edkey.action.del_eol_loop
0139                       ;-------------------------------------------------------
0140                       ; Save variables
0141                       ;-------------------------------------------------------
0142 65AC 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65AE A30A     
0143 65B0 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65B2 A318     
0144               
0145 65B4 C820  54         mov   @fb.column,@fb.row.length
     65B6 A30C     
     65B8 A308     
0146                                                   ; Set new row length
0147                       ;-------------------------------------------------------
0148                       ; Exit
0149                       ;-------------------------------------------------------
0150               edkey.action.del_eol.exit:
0151 65BA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65BC 6172     
0152               
0153               
0154               *---------------------------------------------------------------
0155               * Delete current line
0156               *---------------------------------------------------------------
0157               edkey.action.del_line:
0158                       ;-------------------------------------------------------
0159                       ; Get current line in editor buffer
0160                       ;-------------------------------------------------------
0161 65BE 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     65C0 30EE     
0162                                                   ; \ i   @fb.top      = Address top row in FB
0163                                                   ; | i   @fb.topline  = Top line in FB
0164                                                   ; | i   @fb.row      = Current row in FB
0165                                                   ; |                  (offset 0..@fb.scrrows)
0166                                                   ; | i   @fb.column   = Current column in FB
0167                                                   ; | i   @fb.colsline = Columns per line FB
0168                                                   ; |
0169                                                   ; / o   @fb.current  = Updated pointer
0170               
0171 65C2 04E0  34         clr   @fb.row.dirty         ; Discard current line
     65C4 A30A     
0172               
0173 65C6 C820  54         mov   @fb.topline,@parm1    ; \
     65C8 A304     
     65CA A006     
0174 65CC A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     65CE A306     
     65D0 A006     
0175 65D2 05A0  34         inc   @parm1                ; /
     65D4 A006     
0176               
0177                       ;-------------------------------------------------------
0178                       ; Special handling if at BOT (no real line)
0179                       ;-------------------------------------------------------
0180 65D6 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     65D8 A006     
     65DA A504     
0181 65DC 1207  14         jle   edkey.action.del_line.doit
0182                                                   ; No, is real line. Continue with delete.
0183               
0184 65DE C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     65E0 A304     
     65E2 A006     
0185 65E4 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     65E6 7644     
0186                                                   ; \ i  @parm1 = Line to start with
0187                                                   ; /
0188 65E8 0460  28         b     @edkey.action.up      ; Move cursor one line up
     65EA 6484     
0189                       ;-------------------------------------------------------
0190                       ; Delete line in editor buffer
0191                       ;-------------------------------------------------------
0192               edkey.action.del_line.doit:
0193 65EC 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     65EE 7764     
0194                                                   ; \ i  @parm1 = Line number to delete
0195                                                   ; /
0196               
0197 65F0 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     65F2 A006     
     65F4 A504     
0198 65F6 1302  14         jeq   edkey.action.del_line.refresh
0199                                                   ; Yes, skip get length. No need for garbage.
0200                       ;-------------------------------------------------------
0201                       ; Get length of current row in frame buffer
0202                       ;-------------------------------------------------------
0203 65F8 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     65FA 3728     
0204                                                   ; \ i  @fb.row        = Current row
0205                                                   ; / o  @fb.row.length = Length of row
0206                       ;-------------------------------------------------------
0207                       ; Refresh frame buffer
0208                       ;-------------------------------------------------------
0209               edkey.action.del_line.refresh:
0210 65FC C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     65FE A304     
     6600 A006     
0211               
0212 6602 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6604 7644     
0213                                                   ; \ i  @parm1 = Line to start with
0214                                                   ; /
0215               
0216 6606 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6608 A506     
0217                       ;-------------------------------------------------------
0218                       ; Special treatment if current line was last line
0219                       ;-------------------------------------------------------
0220 660A C120  34         mov   @fb.topline,tmp0
     660C A304     
0221 660E A120  34         a     @fb.row,tmp0
     6610 A306     
0222               
0223 6612 8804  34         c     tmp0,@edb.lines       ; Was last line?
     6614 A504     
0224 6616 1102  14         jlt   edkey.action.del_line.exit
0225               
0226 6618 0460  28         b     @edkey.action.up      ; Move cursor one line up
     661A 6484     
0227                       ;-------------------------------------------------------
0228                       ; Exit
0229                       ;-------------------------------------------------------
0230               edkey.action.del_line.exit:
0231 661C 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     661E 629A     
                   < stevie_b1.asm
0093                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010 6620 C820  54         mov   @edkey.actions.ins.char.ws.data,@parm1
     6622 662E     
     6624 A006     
0011                                                   ; White space, freeze cursor
0012               
0013 6626 06A0  32         bl    @fb.insert.char       ; Insert character
     6628 76BC     
0014                                                   ; \ i  @parm1 = MSB character to insert
0015                                                   ; |             LSB = 0 move cursor right
0016                                                   ; /             LSB > 0 do not move cursor
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020               edkey.action.ins_char.ws.exit:
0021 662A 0460  28         b     @edkey.keyscan.hook.debounce
     662C 6172     
0022                                                   ; Back to editor main
0023 662E 20FF     edkey.actions.ins.char.ws.data   data  >20ff
0024               
0025               *---------------------------------------------------------------
0026               * Insert new line on current line
0027               *---------------------------------------------------------------
0028               edkey.action.ins_line:
0029 6630 04E0  34         clr   @parm1                ; Insert new line on curren line
     6632 A006     
0030               
0031 6634 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6636 768A     
0032                                                   ; \ i  @parm1 = 0 for insert current line
0033                                                   ; /            >0 for insert following line
0034                       ;-------------------------------------------------------
0035                       ; Exit
0036                       ;-------------------------------------------------------
0037               edkey.action.ins_line.exit:
0038 6638 0460  28         b     @edkey.keyscan.hook.debounce
     663A 6172     
0039                                                   ; Back to editor main
0040               
0041               
0042               *---------------------------------------------------------------
0043               * Insert new line on following line
0044               *---------------------------------------------------------------
0045               edkey.action.ins_line_after:
0046 663C 0720  34         seto  @parm1                ; Insert new line on following line
     663E A006     
0047               
0048 6640 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6642 768A     
0049                                                   ; \ i  @parm1 = 0 for insert current line
0050                                                   ; /            >0 for insert following line
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               edkey.action.ins_line_after.exit:
0055 6644 0460  28         b     @edkey.keyscan.hook.debounce
     6646 6172     
0056                                                   ; Back to editor main
                   < stevie_b1.asm
0094                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 6648 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     664A A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 664C 8820  50         c     @fb.row.dirty,@w$ffff
     664E A30A     
     6650 2022     
0013 6652 1606  14         jne   edkey.action.enter.newline
0014 6654 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6656 A506     
0015               
0016 6658 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     665A 6EBE     
0017                                                   ; \ i   @fb.top      = Address top row in FB
0018                                                   ; | i   @fb.row      = Current row in FB
0019                                                   ; | i   @fb.column   = Current column in FB
0020                                                   ; / i   @fb.colsline = Cols per line in FB
0021               
0022 665C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     665E A30A     
0023                       ;-------------------------------------------------------
0024                       ; Insert a new line if insert mode is on
0025                       ;-------------------------------------------------------
0026               edkey.action.enter.newline:
0027 6660 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6662 A50A     
0028 6664 1307  14         jeq   edkey.action.enter.upd_counter
0029                                                   ; Overwrite mode, skip insert
0030               
0031 6666 C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     6668 A50C     
0032 666A 1304  14         jeq   edkey.action.enter.upd_counter
0033                                                   ; Autoinsert off, skip insert
0034               
0035 666C 0720  34         seto  @parm1                ; Insert line on following line
     666E A006     
0036               
0037 6670 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6672 768A     
0038                                                   ; \  i  @parm1 = current/following line
0039                                                   ; /
0040                       ;-------------------------------------------------------
0041                       ; Update line counter
0042                       ;-------------------------------------------------------
0043               edkey.action.enter.upd_counter:
0044 6674 C120  34         mov   @fb.topline,tmp0
     6676 A304     
0045 6678 A120  34         a     @fb.row,tmp0
     667A A306     
0046 667C 0584  14         inc   tmp0
0047 667E 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     6680 A504     
0048 6682 1102  14         jlt   edkey.action.newline  ; No, continue newline
0049 6684 05A0  34         inc   @edb.lines            ; Total lines++
     6686 A504     
0050                       ;-------------------------------------------------------
0051                       ; Process newline
0052                       ;-------------------------------------------------------
0053               edkey.action.newline:
0054                       ;-------------------------------------------------------
0055                       ; Scroll 1 line if cursor at bottom row of screen
0056                       ;-------------------------------------------------------
0057 6688 C120  34         mov   @fb.scrrows,tmp0
     668A A31C     
0058 668C 0604  14         dec   tmp0
0059 668E 8120  34         c     @fb.row,tmp0
     6690 A306     
0060 6692 110C  14         jlt   edkey.action.newline.down
0061                       ;-------------------------------------------------------
0062                       ; Scroll
0063                       ;-------------------------------------------------------
0064 6694 C120  34         mov   @fb.scrrows,tmp0
     6696 A31C     
0065 6698 C820  54         mov   @fb.topline,@parm1
     669A A304     
     669C A006     
0066 669E 05A0  34         inc   @parm1
     66A0 A006     
0067 66A2 06A0  32         bl    @fb.refresh
     66A4 7644     
0068 66A6 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     66A8 A312     
0069 66AA 1004  14         jmp   edkey.action.newline.rest
0070                       ;-------------------------------------------------------
0071                       ; Move cursor down a row, there are still rows left
0072                       ;-------------------------------------------------------
0073               edkey.action.newline.down:
0074 66AC 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     66AE A306     
0075 66B0 06A0  32         bl    @down                 ; Row++ VDP cursor
     66B2 26CC     
0076                       ;-------------------------------------------------------
0077                       ; Set VDP cursor and save variables
0078                       ;-------------------------------------------------------
0079               edkey.action.newline.rest:
0080 66B4 06A0  32         bl    @fb.get.nonblank      ; \ Get column of first nonblank character
     66B6 764E     
0081                                                   ; | o  @outparm1 = Matching column
0082                                                   ; / o  @outparm2 = Char on matching column
0083               
0084 66B8 C120  34         mov   @outparm1,tmp0
     66BA A018     
0085 66BC C804  38         mov   tmp0,@fb.column
     66BE A30C     
0086 66C0 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     66C2 26DE     
0087 66C4 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     66C6 3728     
0088               
0089 66C8 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     66CA 30EE     
0090                                                   ; \ i   @fb.top      = Address top row in FB
0091                                                   ; | i   @fb.topline  = Top line in FB
0092                                                   ; | i   @fb.row      = Current row in FB
0093                                                   ; |                  (offset 0..@fb.scrrows)
0094                                                   ; | i   @fb.column   = Current column in FB
0095                                                   ; | i   @fb.colsline = Columns per line FB
0096                                                   ; |
0097                                                   ; / o   @fb.current  = Updated pointer
0098               
0099 66CC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     66CE A318     
0100                       ;-------------------------------------------------------
0101                       ; Exit
0102                       ;-------------------------------------------------------
0103               edkey.action.newline.exit:
0104 66D0 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     66D2 6172     
0105               
0106               
0107               
0108               
0109               *---------------------------------------------------------------
0110               * Toggle insert/overwrite mode
0111               *---------------------------------------------------------------
0112               edkey.action.ins_onoff:
0113 66D4 0649  14         dect  stack
0114 66D6 C64B  30         mov   r11,*stack            ; Save return address
0115               
0116 66D8 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     66DA A31A     
0117 66DC 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     66DE A50A     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_onoff.exit:
0122 66E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 66E2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     66E4 6172     
0124               
0125               
0126               
0127               *---------------------------------------------------------------
0128               * Add character (frame buffer)
0129               *---------------------------------------------------------------
0130               edkey.action.char:
0131 66E6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     66E8 A31A     
0132                       ;-------------------------------------------------------
0133                       ; Asserts
0134                       ;-------------------------------------------------------
0135 66EA D105  18         movb  tmp1,tmp0             ; Get keycode
0136 66EC 0984  32         srl   tmp0,8                ; MSB to LSB
0137               
0138 66EE 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     66F0 0020     
0139 66F2 1111  14         jlt   edkey.action.char.exit
0140                                                   ; Yes, skip
0141               
0142 66F4 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     66F6 007E     
0143 66F8 150E  14         jgt   edkey.action.char.exit
0144                                                   ; Yes, skip
0145                       ;-------------------------------------------------------
0146                       ; Setup
0147                       ;-------------------------------------------------------
0148 66FA 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     66FC A506     
0149 66FE 04E0  34         clr   @parm1
     6700 A006     
0150 6702 D805  38         movb  tmp1,@parm1           ; Store character for insert
     6704 A006     
0151 6706 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6708 A50A     
0152 670A 1303  14         jeq   edkey.action.char.overwrite
0153                       ;-------------------------------------------------------
0154                       ; Insert mode
0155                       ;-------------------------------------------------------
0156 670C 06A0  32         bl    @fb.insert.char       ; Insert character
     670E 76BC     
0157                                                   ; \ i  @parm1 = MSB character to insert
0158                                                   ; |             LSB = 0 move cursor right
0159                                                   ; /             LSB > 0 do not move cursor
0160               
0161 6710 1002  14         jmp   edkey.action.char.exit
0162                       ;-------------------------------------------------------
0163                       ; Overwrite mode - Write character
0164                       ;-------------------------------------------------------
0165               edkey.action.char.overwrite:
0166 6712 06A0  32         bl    @fb.replace.char      ; Replace (overwrite) character
     6714 76C6     
0167                                                   ; \ i  @parm1 = MSB character to replace
0168                                                   ; /
0169                       ;-------------------------------------------------------
0170                       ; Exit
0171                       ;-------------------------------------------------------
0172               edkey.action.char.exit:
0173 6716 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6718 6172     
                   < stevie_b1.asm
0095                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 671A 0649  14         dect  stack
0009 671C C644  30         mov   tmp0,*stack           ; Push tmp0
0010 671E 0649  14         dect  stack
0011 6720 C660  42         mov   @wyx,*stack           ; Push cursor YX
     6722 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 6724 C120  34         mov   @tv.ruler.visible,tmp0
     6726 A210     
0016                                                   ; Ruler currently off?
0017 6728 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 672A 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     672C A318     
0024 672E 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     6730 A210     
0025 6732 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 6734 C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6736 A31C     
0031 6738 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 673A 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     673C A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 673E 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 6740 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6742 A318     
0038 6744 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     6746 A210     
0039 6748 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     674A 7612     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 674C 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     674E 7574     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 6750 C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     6752 832A     
0050 6754 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6756 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6758 6172     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 675A C120  34         mov   @edb.dirty,tmp0
     675C A506     
0012 675E 1302  14         jeq   !
0013 6760 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6762 74C6     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 6764 0460  28 !       b     @tv.quit
     6766 337E     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 6768 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     676A A50E     
     676C 2022     
0025 676E 1302  14         jeq   !
0026 6770 0460  28         b     @edkey.action.block.copy
     6772 6894     
0027                                                   ; Copy code block
0028 6774 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     6776 74D4     
                   < stevie_b1.asm
0097                       copy  "edkey.fb.file.decinc.asm"    ; Filename increase/decrease suffix
     **** ****     > edkey.fb.file.decinc.asm
0001               * FILE......: edkey.fb.file.decinc.asm
0002               * Purpose...: File loading actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load previous file based on last char in suffix
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.fname.dec.load
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * @cmdb.cmdlen
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * none
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.fname.dec.load:
0016 6778 0649  14         dect  stack
0017 677A C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;------------------------------------------------------
0019                       ; Adjust filename
0020                       ;------------------------------------------------------
0021 677C 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     677E A008     
0022               
0023 6780 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     6782 6778     
0024 6784 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     6786 A72C     
0025                                                   ; in "Unsaved changes" dialog
0026               
0027 6788 1009  14         jmp   edkey.action.fb.fname.doit
0028                                                   ; Load file
0029               
0030               
0031               *---------------------------------------------------------------
0032               * Load next file based on last char in suffix
0033               *---------------------------------------------------------------
0034               * b   @edkey.action.fb.fname.inc.load
0035               *---------------------------------------------------------------
0036               * INPUT
0037               * @cmdb.cmdlen
0038               *--------------------------------------------------------------
0039               * Register usage
0040               * none
0041               ********|*****|*********************|**************************
0042               edkey.action.fb.fname.inc.load:
0043 678A 0649  14         dect  stack
0044 678C C644  30         mov   tmp0,*stack           ; Push tmp0
0045                       ;------------------------------------------------------
0046                       ; Adjust filename
0047                       ;------------------------------------------------------
0048 678E 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     6790 A008     
0049               
0050 6792 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     6794 678A     
0051 6796 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     6798 A72C     
0052                                                   ; in "Unsaved changes" dialog
0053               
0054 679A 1000  14         jmp   edkey.action.fb.fname.doit
0055                                                   ; Load file
0056               
0057               *---------------------------------------------------------------
0058               * Adjust filename and load file
0059               *---------------------------------------------------------------
0060               * b   @edkey.action.fb.fname.doit
0061               *---------------------------------------------------------------
0062               * INPUT
0063               * @cmdb.cmdlen
0064               *--------------------------------------------------------------
0065               * Register usage
0066               * none
0067               ********|*****|*********************|**************************
0068               edkey.action.fb.fname.doit:
0069                       ;------------------------------------------------------
0070                       ; Process filename
0071                       ;------------------------------------------------------
0072 679C C120  34         mov   @edb.filename.ptr,tmp0
     679E A514     
0073 67A0 1311  14         jeq   edkey.action.fb.fname.doit.exit
0074                                                   ; Exit early if new file.
0075               
0076 67A2 0284  22         ci    tmp0,txt.newfile
     67A4 3B10     
0077 67A6 130E  14         jeq   edkey.action.fb.fname.doit.exit
0078                                                   ; Exit early if "[New file]"
0079               
0080 67A8 C804  38         mov   tmp0,@parm1           ; Set filename
     67AA A006     
0081                       ;------------------------------------------------------
0082                       ; Show dialog "Unsaved changed" if editor buffer dirty
0083                       ;------------------------------------------------------
0084 67AC C120  34         mov   @edb.dirty,tmp0
     67AE A506     
0085 67B0 1303  14         jeq   !
0086 67B2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 67B4 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     67B6 74C6     
0088                       ;------------------------------------------------------
0089                       ; Update suffix
0090                       ;------------------------------------------------------
0091 67B8 06A0  32 !       bl    @fm.browse.fname.suffix
     67BA 7440     
0092                                                   ; Filename suffix adjust
0093                                                   ; i  \ parm1 = Pointer to filename
0094                                                   ; i  / parm2 = >FFFF or >0000
0095                       ;------------------------------------------------------
0096                       ; Load file
0097                       ;------------------------------------------------------
0098               edkey.action.fb.fname.doit.loadfile:
0099 67BC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     67BE 7574     
0100               
0101 67C0 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     67C2 7402     
0102                                                   ; \ i  parm1 = Pointer to length-prefixed
0103                                                   ; /            device/filename string
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               edkey.action.fb.fname.doit.exit:
0108 67C4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 67C6 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     67C8 6464     
                   < stevie_b1.asm
0098                       copy  "edkey.fb.file.load.asm"      ; Load file into editor
     **** ****     > edkey.fb.file.load.asm
0001               * FILE......: edkey.fb.file.load.asm
0002               * Purpose...: Load file into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.file
0006               * Load file directly into editor (without CMDB "Open File")
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.file
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Pointer to filename string
0012               * @parm2 = Type of special file to load
0013               ********|*****|*********************|**************************
0014               edkey.action.fb.load.file:
0015 67CA 0649  14         dect  stack
0016 67CC C64B  30         mov   r11,*stack            ; Save return address
0017 67CE 0649  14         dect  stack
0018 67D0 C644  30         mov   tmp0,*stack           ; Push tmp0
0019 67D2 0649  14         dect  stack
0020 67D4 C645  30         mov   tmp1,*stack           ; Push tmp1
0021                       ;-------------------------------------------------------
0022                       ; Load file
0023                       ;-------------------------------------------------------
0024 67D6 C160  34         mov   @parm2,tmp1           ; Backup @parm2
     67D8 A008     
0025               
0026 67DA 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     67DC 7574     
0027               
0028 67DE C120  34         mov   @parm1,tmp0           ; Pointer to filename set?
     67E0 A006     
0029 67E2 1607  14         jne   !                     ; Yes, continue
0030                       ;-------------------------------------------------------
0031                       ; Show error "No filename specified"
0032                       ;-------------------------------------------------------
0033 67E4 0204  20         li    tmp0,txt.io.nofile    ; \
     67E6 3CD8     
0034 67E8 C804  38         mov   tmp0,@parm1           ; / Error message
     67EA A006     
0035               
0036 67EC 06A0  32         bl    @error.display        ; Show error message
     67EE 75F6     
0037                                                   ; \ i  @parm1 = Pointer to error message
0038                                                   ; /
0039               
0040 67F0 1021  14         jmp   edkey.action.fb.load.file.exit2
0041                       ;------------------------------------------------------
0042                       ; Show dialog "Unsaved changed" if editor buffer dirty
0043                       ;------------------------------------------------------
0044 67F2 C120  34 !       mov   @edb.dirty,tmp0       ; Editor buffer dirty?
     67F4 A506     
0045 67F6 1301  14         jeq   edkey.action.fb.load.check.mastcat
0046                                                   ; No, continue processing
0047 67F8 1022  14         jmp   edkey.action.fb.load.file.exit3
0048                                                   ; Dirty, exit
0049                       ;-------------------------------------------------------
0050                       ; Check special handling Master Catalog
0051                       ;-------------------------------------------------------
0052               edkey.action.fb.load.check.mastcat:
0053 67FA C120  34         mov   @edb.special.file,tmp0
     67FC A522     
0054 67FE 0284  22         ci    tmp0,id.special.mastcat
     6800 0001     
0055                                                   ; Master catalog previously open?
0056 6802 1606  14         jne   edkey.action.fb.load.loadfile
0057                                                   ; No, just load file
0058                       ;-------------------------------------------------------
0059                       ; Master Catalog previously open
0060                       ;-------------------------------------------------------
0061 6804 C820  54         mov   @fb.topline,@edb.bk.fb.topline
     6806 A304     
     6808 A51E     
0062                                                   ; Backup @fb.topline
0063 680A C820  54         mov   @fb.row,@edb.bk.fb.row
     680C A306     
     680E A520     
0064                                                   ; Backup @fb.row
0065                       ;-------------------------------------------------------
0066                       ; Load file
0067                       ;-------------------------------------------------------
0068               edkey.action.fb.load.loadfile:
0069 6810 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6812 7402     
0070                                                   ; \ i  @parm1 = Pointer to length-prefixed
0071                                                   ; /             device/filename string
0072                       ;-------------------------------------------------------
0073                       ; Handle special files
0074                       ;-------------------------------------------------------
0075 6814 C805  38         mov   tmp1,@edb.special.file
     6816 A522     
0076                                                   ; \ Restore @parm2
0077                                                   ; / Set special file (0=normal file)
0078               
0079 6818 0285  22         ci    tmp1,id.special.mastcat
     681A 0001     
0080                                                   ; Is master catalog?
0081 681C 160B  14         jne   edkey.action.fb.load.file.exit2
0082                                                   ; No, goto top of file and exit
0083                       ;-------------------------------------------------------
0084                       ; Goto line in file and exit
0085                       ;-------------------------------------------------------
0086               edkey.action.fb.load.file.exit1:
0087 681E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0088 6820 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0089 6822 C2F9  30         mov   *stack+,r11           ; Pop R11
0090               
0091 6824 C820  54         mov   @edb.bk.fb.topline,@parm1
     6826 A51E     
     6828 A006     
0092 682A C820  54         mov   @edb.bk.fb.row,@parm2
     682C A520     
     682E A008     
0093               
0094 6830 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6832 6494     
0095                                                   ; | i  @parm1 = Top line in editor buffer
0096                                                   ; / i  @parm2 = Row offset in frame buffer
0097                       ;-------------------------------------------------------
0098                       ; Goto top of file (TOF) and exit
0099                       ;-------------------------------------------------------
0100               edkey.action.fb.load.file.exit2:
0101 6834 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0102 6836 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0103 6838 C2F9  30         mov   *stack+,r11           ; Pop R11
0104 683A 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     683C 6464     
0105                       ;-------------------------------------------------------
0106                       ; Show dialog "Unsaved changes" and exit
0107                       ;-------------------------------------------------------
0108               edkey.action.fb.load.file.exit3:
0109 683E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0110 6840 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0111 6842 C2F9  30         mov   *stack+,r11           ; Pop R11
0112 6844 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6846 74C6     
                   < stevie_b1.asm
0099                       copy  "edkey.fb.file.load.mc.asm"   ; Load Master Catalog into editor
     **** ****     > edkey.fb.file.load.mc.asm
0001               * FILE......: edkey.fb.file.load.mc.asm
0002               * Purpose...: Load Master Catalog into editor
0003               
0004               ***************************************************************
0005               * edkey.action.fb.load.mc
0006               * Load master catalog into editor
0007               ***************************************************************
0008               * b  @edkey.action.fb.load.mc
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               ********|*****|*********************|**************************
0013               edkey.action.fb.load.mc:
0014 6848 0649  14         dect  stack
0015 684A C64B  30         mov   r11,*stack            ; Save return address
0016 684C 0649  14         dect  stack
0017 684E C644  30         mov   tmp0,*stack           ; Push tmp0
0018                       ;-------------------------------------------------------
0019                       ; Set filename
0020                       ;-------------------------------------------------------
0021 6850 0204  20         li    tmp0,tv.mc.fname
     6852 DEA0     
0022 6854 C804  38         mov   tmp0,@parm1
     6856 A006     
0023                       ;-------------------------------------------------------
0024                       ; Set special file type to 'Master Catalog'
0025                       ;-------------------------------------------------------
0026 6858 0204  20         li    tmp0,id.special.mastcat
     685A 0001     
0027 685C C804  38         mov   tmp0,@parm2           ; Set special file type
     685E A008     
0028                       ;-------------------------------------------------------
0029                       ; Set special message
0030                       ;-------------------------------------------------------
0031 6860 0204  20         li    tmp0,txt.msg.mastcat  ; \ Set pointer to special message
     6862 3C3C     
0032 6864 C804  38         mov   tmp0,@tv.specmsg.ptr  ; / of Master Catalog
     6866 A234     
0033                       ;-------------------------------------------------------
0034                       ; Load file
0035                       ;-------------------------------------------------------
0036 6868 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0037 686A C2F9  30         mov   *stack+,r11           ; Pop R11
0038               
0039 686C 0460  28         b     @edkey.action.fb.load.file
     686E 67CA     
0040                                                   ; \ Load file into editor
0041                                                   ; | i  @parm1 = Pointer to filename string
0042                                                   ; | i  @parm2 = Type of special file to load
0043                                                   ; /
                   < stevie_b1.asm
0100                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 6870 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     6872 771E     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 6874 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6876 6172     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 6878 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     687A 7728     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 687C 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     687E 6DEC     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 6880 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     6882 7732     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 6884 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     6886 6DEC     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 6888 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     688A 76EE     
0042 688C 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     688E 7746     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 6890 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6892 6172     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 6894 0649  14         dect  stack
0054 6896 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 6898 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     689A A510     
     689C 2022     
0059 689E 1315  14         jeq   edkey.action.block.copy.exit
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
0064 68A0 C120  30         mov   @wyx,tmp0             ; Get cursor position
     68A2 832A     
0065 68A4 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     68A6 FF00     
0066 68A8 C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     68AA A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 68AC 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     68AE 76EE     
0071               
0072 68B0 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     68B2 A006     
0073 68B4 06A0  32         bl    @edb.block.copy       ; Copy code block
     68B6 775A     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 68B8 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     68BA A018     
     68BC 2000     
0078 68BE 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 68C0 C820  54         mov   @fb.yxsave,@parm1
     68C2 A316     
     68C4 A006     
0082 68C6 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     68C8 763A     
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
0089 68CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 68CC 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68CE 6172     
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
0102 68D0 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     68D2 A510     
     68D4 2022     
0103 68D6 1311  14         jeq   edkey.action.block.delete.exit
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
0108 68D8 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     68DA 76EE     
0109               
0110 68DC 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     68DE A006     
0111 68E0 06A0  32         bl    @edb.block.delete     ; Delete code block
     68E2 7750     
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
0117 68E4 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     68E6 A018     
     68E8 2000     
0118 68EA 1307  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 68EC C820  54         mov   @fb.topline,@parm1
     68EE A304     
     68F0 A006     
0122 68F2 04E0  34         clr   @parm2                ; No row offset in frame buffer
     68F4 A008     
0123               
0124 68F6 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     68F8 6494     
0125                                                   ; | i  @parm1 = Top line in editor buffer
0126                                                   ; / i  @parm2 = Row offset in frame buffer
0127                       ;-------------------------------------------------------
0128                       ; Exit
0129                       ;-------------------------------------------------------
0130               edkey.action.block.delete.exit:
0131 68FA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68FC 6172     
0132               
0133               
0134               *---------------------------------------------------------------
0135               * Move code block
0136               ********|*****|*********************|**************************
0137               edkey.action.block.move:
0138                       ;-------------------------------------------------------
0139                       ; Exit early if nothing to do
0140                       ;-------------------------------------------------------
0141 68FE 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6900 A510     
     6902 2022     
0142 6904 1315  14         jeq   edkey.action.block.move.exit
0143                                                   ; Yes, exit early
0144                       ;-------------------------------------------------------
0145                       ; Delete
0146                       ;-------------------------------------------------------
0147 6906 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6908 76EE     
0148               
0149 690A 0720  34         seto  @parm1                ; Set message to "Moving block..."
     690C A006     
0150 690E 06A0  32         bl    @edb.block.copy       ; Copy code block
     6910 775A     
0151                                                   ; \ i  @parm1    = Message flag
0152                                                   ; / o  @outparm1 = >ffff if success
0153               
0154 6912 0720  34         seto  @parm1                ; Don't display delete message
     6914 A006     
0155 6916 06A0  32         bl    @edb.block.delete     ; Delete code block
     6918 7750     
0156                                                   ; \ i  @parm1    = Display message Yes/No
0157                                                   ; / o  @outparm1 = >ffff if success
0158                       ;-------------------------------------------------------
0159                       ; Reposition in frame buffer
0160                       ;-------------------------------------------------------
0161 691A 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     691C A018     
     691E 2000     
0162 6920 13EC  14         jeq   edkey.action.block.delete.exit
0163                                                   ; If yes, exit early
0164               
0165 6922 C820  54         mov   @fb.topline,@parm1
     6924 A304     
     6926 A006     
0166 6928 04E0  34         clr   @parm2                ; No row offset in frame buffer
     692A A008     
0167               
0168 692C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     692E 6494     
0169                                                   ; | i  @parm1 = Top line in editor buffer
0170                                                   ; / i  @parm2 = Row offset in frame buffer
0171                       ;-------------------------------------------------------
0172                       ; Exit
0173                       ;-------------------------------------------------------
0174               edkey.action.block.move.exit:
0175 6930 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6932 6172     
0176               
0177               
0178               *---------------------------------------------------------------
0179               * Goto marker M1
0180               ********|*****|*********************|**************************
0181               edkey.action.block.goto.m1:
0182 6934 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6936 A50E     
     6938 2022     
0183 693A 1307  14         jeq   edkey.action.block.goto.m1.exit
0184                                                   ; Yes, exit early
0185                       ;-------------------------------------------------------
0186                       ; Goto marker M1
0187                       ;-------------------------------------------------------
0188 693C C820  54         mov   @edb.block.m1,@parm1
     693E A50E     
     6940 A006     
0189 6942 0620  34         dec   @parm1                ; Base 0 offset
     6944 A006     
0190               
0191 6946 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     6948 64E6     
0192                                                   ; \ i @parm1 = Target line in EB
0193                                                   ; /
0194                       ;-------------------------------------------------------
0195                       ; Exit
0196                       ;-------------------------------------------------------
0197               edkey.action.block.goto.m1.exit:
0198 694A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     694C 6172     
                   < stevie_b1.asm
0101                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on previous tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.prev:
0008 694E 0649  14         dect  stack
0009 6950 C64B  30         mov   r11,*stack            ; Save return address
0010 6952 06A0  32         bl    @fb.tab.prev          ; Jump to previous tab position on line
     6954 7658     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.prev.exit:
0015 6956 C2F9  30         mov   *stack+,r11           ; Pop r11
0016 6958 0460  28         b     @edkey.keyscan.hook.debounce
     695A 6172     
0017                                                   ; Back to editor main
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Cursor on next tab
0022               *---------------------------------------------------------------
0023               edkey.action.fb.tab.next:
0024 695C 0649  14         dect  stack
0025 695E C64B  30         mov   r11,*stack            ; Save return address
0026 6960 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     6962 7662     
0027                       ;------------------------------------------------------
0028                       ; Exit
0029                       ;------------------------------------------------------
0030               edkey.action.fb.tab.next.exit:
0031 6964 C2F9  30         mov   *stack+,r11           ; Pop r11
0032 6966 0460  28         b     @edkey.keyscan.hook.debounce
     6968 6172     
0033                                                   ; Back to editor main
                   < stevie_b1.asm
0102                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 696A 0649  14         dect  stack
0017 696C C644  30         mov   tmp0,*stack           ; Push tmp0
0018 696E 0204  20         li    tmp0,clip1
     6970 3100     
0019 6972 1009  14         jmp   !
0020               edkey.action.fb.clip.save.2:
0021 6974 0649  14         dect  stack
0022 6976 C644  30         mov   tmp0,*stack           ; Push tmp0
0023 6978 0204  20         li    tmp0,clip2
     697A 3200     
0024 697C 1004  14         jmp   !
0025               edkey.action.fb.clip.save.3:
0026 697E 0649  14         dect  stack
0027 6980 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 6982 0204  20         li    tmp0,clip3
     6984 3300     
0029                       ;-------------------------------------------------------
0030                       ; Save block to clipboard
0031                       ;-------------------------------------------------------
0032 6986 C804  38 !       mov   tmp0,@parm1
     6988 A006     
0033 698A 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     698C 773C     
0034                                                   ; \ i  @parm1 = Suffix clipboard filename
0035                                                   ; /
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.fb.clip.save.exit:
0040 698E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0041               
0042 6990 C820  54         mov   @fb.topline,@parm1    ; Get topline
     6992 A304     
     6994 A006     
0043 6996 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6998 A008     
0044               
0045 699A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     699C 6494     
0046                                                   ; | i  @parm1 = Top line in editor buffer
0047                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0103                       ;-----------------------------------------------------------------------
0104                       ; Keyboard actions - Command Buffer
0105                       ;-----------------------------------------------------------------------
0106                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
0008 699E C120  34         mov   @cmdb.column,tmp0
     69A0 A714     
0009 69A2 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 69A4 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     69A6 A714     
0014 69A8 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     69AA A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 69AC 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     69AE 6172     
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
0025 69B0 06A0  32         bl    @cmdb.cmd.getlength
     69B2 759C     
0026 69B4 8820  50         c     @cmdb.column,@outparm1
     69B6 A714     
     69B8 A018     
0027 69BA 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 69BC 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     69BE A714     
0032 69C0 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     69C2 A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 69C4 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     69C6 6172     
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
0044 69C8 04C4  14         clr   tmp0
0045 69CA C804  38         mov   tmp0,@cmdb.column      ; First column
     69CC A714     
0046 69CE 0584  14         inc   tmp0
0047 69D0 D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     69D2 A70A     
0048 69D4 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     69D6 A70A     
0049               
0050 69D8 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     69DA 6172     
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
0056 69DC D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     69DE A72E     
0057 69E0 0984  32         srl   tmp0,8                 ; Right justify
0058 69E2 C804  38         mov   tmp0,@cmdb.column      ; Save column position
     69E4 A714     
0059 69E6 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 69E8 06C4  14         swpb  tmp0                   ; LSB TO MSB
0061 69EA D804  38         movb  tmp0,@cmdb.cursor+1    ; Set cursor position
     69EC A70B     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 69EE 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     69F0 6172     
                   < stevie_b1.asm
0107                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 69F2 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     69F4 7592     
0026 69F6 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     69F8 A71A     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 69FA 0460  28         b     @edkey.action.cmdb.home
     69FC 69C8     
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
0057 69FE 0649  14         dect  stack
0058 6A00 C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6A02 0649  14         dect  stack
0060 6A04 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6A06 C120  34         mov   @keycode1,tmp0        ; Get keycode
     6A08 A028     
0065 6A0A 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6A0C 0020     
0066 6A0E 1117  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6A10 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6A12 007E     
0070 6A14 1514  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073                       ;-------------------------------------------------------
0074                       ; Add character
0075                       ;-------------------------------------------------------
0076 6A16 C144  18         mov   tmp0,tmp1             ; \
0077 6A18 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0078               
0079 6A1A 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A1C A71A     
0080               
0081 6A1E 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6A20 A72F     
0082 6A22 A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6A24 A714     
0083 6A26 D505  30         movb  tmp1,*tmp0            ; Add character
0084 6A28 05A0  34         inc   @cmdb.column          ; Next column
     6A2A A714     
0085 6A2C 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6A2E A70A     
0086               
0087 6A30 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6A32 759C     
0088                                                   ; \ i  @cmdb.cmd = Command string
0089                                                   ; / o  @outparm1 = Length of command
0090                       ;-------------------------------------------------------
0091                       ; Addjust length
0092                       ;-------------------------------------------------------
0093 6A34 C120  34         mov   @outparm1,tmp0
     6A36 A018     
0094 6A38 0A84  32         sla   tmp0,8               ; Move to MSB
0095 6A3A D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6A3C A72E     
0096                       ;-------------------------------------------------------
0097                       ; Exit
0098                       ;-------------------------------------------------------
0099               edkey.action.cmdb.char.exit:
0100 6A3E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 6A40 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 6A42 0460  28         b     @edkey.keyscan.hook.debounce
     6A44 6172     
0103                                                   ; Back to editor main
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6A46 C120  34         mov   @cmdb.visible,tmp0
     6A48 A702     
0009 6A4A 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6A4C 04E0  34         clr   @cmdb.column          ; Column = 0
     6A4E A714     
0015 6A50 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6A52 756A     
0016 6A54 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6A56 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6A58 7574     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6A5A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A5C 6172     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.cfg.clip.asm"     ; Configure clipboard
     **** ****     > edkey.cmdb.cfg.clip.asm
0001               * FILE......: edkey.cmdb.cfg.clip.asm
0002               * Purpose...: Configure clipboard
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.clip:
0008 6A5E 0649  14         dect  stack
0009 6A60 C64B  30         mov   r11,*stack            ; Save return address
0010 6A62 0649  14         dect  stack
0011 6A64 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6A66 0204  20         li    tmp0,tv.clip.fname    ; \
     6A68 DE50     
0016 6A6A C804  38         mov   tmp0,@parm1           ; / Pointer clipboard filename buffer
     6A6C A006     
0017               
0018 6A6E 0204  20         li    tmp0,txt.done.clipdev ; \
     6A70 3A98     
0019 6A72 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6A74 A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6A76 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6A78 75D8     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.clip.exit:
0030 6A7A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6A7C C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6A7E 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6A80 6464     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.cfg.mc.asm"       ; Configure Master Catalog
     **** ****     > edkey.cmdb.cfg.mc.asm
0001               * FILE......: edkey.cmdb.cfg.mc.asm
0002               * Purpose...: Configure Master Catalog
0003               
0004               *---------------------------------------------------------------
0005               * Configure Master Catalog
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.cfg.mc:
0008 6A82 0649  14         dect  stack
0009 6A84 C64B  30         mov   r11,*stack            ; Save return address
0010 6A86 0649  14         dect  stack
0011 6A88 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Set filename
0014                       ;-------------------------------------------------------
0015 6A8A 0204  20         li    tmp0,tv.mc.fname      ; \
     6A8C DEA0     
0016 6A8E C804  38         mov   tmp0,@parm1           ; / Pointer Master Catalog filename buffer
     6A90 A006     
0017               
0018 6A92 0204  20         li    tmp0,txt.done.mc      ; \
     6A94 3AA6     
0019 6A96 C804  38         mov   tmp0,@parm2           ; / Message to display when done
     6A98 A008     
0020                       ;-------------------------------------------------------
0021                       ; Set filename
0022                       ;-------------------------------------------------------
0023 6A9A 06A0  32         bl    @cmdb.cfg.fname       ; Set filename
     6A9C 75D8     
0024                                                   ; \ i  @parm1 = Pointer to 80 bytes buffer
0025                                                   ; / i  @parm2 = Pointer to message
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               edkey.action.cmdb.cfg.mc.exit:
0030 6A9E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0031 6AA0 C2F9  30         mov   *stack+,r11           ; Pop R11
0032 6AA2 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6AA4 6464     
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6AA6 0649  14         dect  stack
0012 6AA8 C64B  30         mov   r11,*stack            ; Save return address
0013 6AAA 0649  14         dect  stack
0014 6AAC C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6AAE C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6AB0 A506     
0019 6AB2 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6AB4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6AB6 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6AB8 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6ABA 74C6     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6ABC 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6ABE 7574     
0028 6AC0 06A0  32         bl    @fm.newfile           ; New file in editor
     6AC2 7464     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6AC4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6AC6 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6AC8 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6ACA 6464     
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008 6ACC 0649  14         dect  stack
0009 6ACE C64B  30         mov   r11,*stack            ; Save return address
0010 6AD0 0649  14         dect  stack
0011 6AD2 C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;-------------------------------------------------------
0013                       ; Load file
0014                       ;-------------------------------------------------------
0015 6AD4 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AD6 7574     
0016               
0017 6AD8 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6ADA 759C     
0018 6ADC C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6ADE A018     
0019 6AE0 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6AE2 0204  20         li    tmp0,txt.io.nofile    ; \
     6AE4 3CD8     
0024 6AE6 C804  38         mov   tmp0,@parm1           ; / Error message
     6AE8 A006     
0025               
0026 6AEA 06A0  32         bl    @error.display        ; Show error message
     6AEC 75F6     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6AEE 101F  14         jmp   edkey.action.cmdb.load.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6AF0 0A84  32 !       sla   tmp0,8                ; LSB to MSB
0035 6AF2 D804  38         movb  tmp0,@cmdb.cmdlen     ; Set length-prefix of command line string
     6AF4 A72E     
0036               
0037 6AF6 06A0  32         bl    @cpym2m
     6AF8 24DA     
0038 6AFA A72E                   data cmdb.cmdlen,heap.top,80
     6AFC F000     
     6AFE 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Special handling Master Catalog
0042                       ;-------------------------------------------------------
0043 6B00 C120  34         mov   @edb.special.file,tmp0  ; \ Master catalog previously open?
     6B02 A522     
0044 6B04 0284  22         ci    tmp0,id.special.mastcat ; /
     6B06 0001     
0045               
0046 6B08 1608  14         jne   edkey.action.cmdb.load.file
0047                                                   ; No, just load file
0048               
0049 6B0A C820  54         mov   @fb.topline,@edb.bk.fb.topline
     6B0C A304     
     6B0E A51E     
0050                                                   ; Backup @fb.topline
0051 6B10 C820  54         mov   @fb.row,@edb.bk.fb.row
     6B12 A306     
     6B14 A520     
0052                                                   ; Backup @fb.row
0053               
0054 6B16 04E0  34         clr   @edb.dirty            ; No confirmation, always load immediately.
     6B18 A506     
0055                       ;-------------------------------------------------------
0056                       ; Load file
0057                       ;-------------------------------------------------------
0058               edkey.action.cmdb.load.file:
0059 6B1A 04E0  34         clr   @edb.special.file     ; Reset special file flag
     6B1C A522     
0060 6B1E 04E0  34         clr   @tv.specmsg.ptr       ; Reset special message
     6B20 A234     
0061               
0062 6B22 0204  20         li    tmp0,heap.top         ; Pass filename as parm1
     6B24 F000     
0063 6B26 C804  38         mov   tmp0,@parm1           ; (1st line in heap)
     6B28 A006     
0064               
0065 6B2A 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6B2C 7402     
0066                                                   ; \ i  parm1 = Pointer to length-prefixed
0067                                                   ; /            device/filename string
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               edkey.action.cmdb.load.exit:
0072 6B2E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 6B30 C2F9  30         mov   *stack+,r11           ; Pop R11
0074 6B32 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6B34 6464     
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6B36 0649  14         dect  stack
0009 6B38 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B3A 0649  14         dect  stack
0011 6B3C C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B3E A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6B40 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B42 7574     
0016               
0017 6B44 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B46 759C     
0018 6B48 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B4A A018     
0019 6B4C 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6B4E 0204  20         li    tmp0,txt.io.nofile    ; \
     6B50 3CD8     
0024 6B52 C804  38         mov   tmp0,@parm1           ; / Error message
     6B54 A006     
0025               
0026 6B56 06A0  32         bl    @error.display        ; Show error message
     6B58 75F6     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6B5A 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6B5C 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6B5E D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B60 A72E     
0036               
0037 6B62 06A0  32         bl    @cpym2m
     6B64 24DA     
0038 6B66 A72E                   data cmdb.cmdall,heap.top,80
     6B68 F000     
     6B6A 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6B6C 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B6E F000     
0044 6B70 C804  38         mov   tmp0,@parm1
     6B72 A006     
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
0052 6B74 C820  54         mov   @fb.row,@parm1
     6B76 A306     
     6B78 A006     
0053 6B7A 06A0  32         bl    @fb.row2line          ; Row to editor line
     6B7C 30D4     
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
0058 6B7E C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6B80 A018     
     6B82 A008     
0059 6B84 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6B86 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6B88 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B8A F000     
0064 6B8C C804  38         mov   tmp0,@parm1
     6B8E A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6B90 0204  20         li    tmp0,id.file.insertfile
     6B92 0002     
0069 6B94 C804  38         mov   tmp0,@parm3           ; Set work mode
     6B96 A00A     
0070               
0071 6B98 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6B9A 7428     
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
0079 6B9C 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6B9E A318     
0080 6BA0 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6BA2 A506     
0081               
0082 6BA4 C820  54         mov   @fb.topline,@parm1
     6BA6 A304     
     6BA8 A006     
0083 6BAA 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6BAC 7644     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
0091 6BAE C839  50         mov   *stack+,@parm1        ; Pop top row
     6BB0 A006     
0092 6BB2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093               
0094 6BB4 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6BB6 A008     
0095               
0096 6BB8 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6BBA 6494     
0097                                                   ; | i  @parm1 = Top line in editor buffer
0098                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0114                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6BBC 0649  14         dect  stack
0009 6BBE C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6BC0 0649  14         dect  stack
0011 6BC2 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6BC4 A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6BC6 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6BC8 7574     
0016               
0017 6BCA 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6BCC 759C     
0018 6BCE C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6BD0 A018     
0019 6BD2 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6BD4 0204  20         li    tmp0,txt.io.nofile    ; \
     6BD6 3CD8     
0024 6BD8 C804  38         mov   tmp0,@parm1           ; / Error message
     6BDA A006     
0025               
0026 6BDC 06A0  32         bl    @error.display        ; Show error message
     6BDE 75F6     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6BE0 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6BE2 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6BE4 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BE6 A72E     
0036               
0037 6BE8 06A0  32         bl    @cpym2m
     6BEA 24DA     
0038 6BEC A72E                   data cmdb.cmdall,heap.top,80
     6BEE F000     
     6BF0 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6BF2 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BF4 F000     
0044 6BF6 C804  38         mov   tmp0,@parm1
     6BF8 A006     
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
0049 6BFA C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6BFC A504     
     6BFE A008     
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
0054 6C00 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6C02 F000     
0055 6C04 C804  38         mov   tmp0,@parm1
     6C06 A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6C08 0204  20         li    tmp0,id.file.appendfile
     6C0A 0003     
0060 6C0C C804  38         mov   tmp0,@parm3           ; Set work mode
     6C0E A00A     
0061               
0062 6C10 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6C12 7428     
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
0070 6C14 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6C16 A318     
0071 6C18 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6C1A A506     
0072               
0073 6C1C C820  54         mov   @fb.topline,@parm1
     6C1E A304     
     6C20 A006     
0074 6C22 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6C24 7644     
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
0082 6C26 C839  50         mov   *stack+,@parm1        ; Pop top row
     6C28 A006     
0083 6C2A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084               
0085 6C2C 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6C2E A008     
0086               
0087 6C30 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6C32 6494     
0088                                                   ; | i  @parm1 = Top line in editor buffer
0089                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0115                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6C34 0204  20         li    tmp0,clip1
     6C36 3100     
0009 6C38 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6C3A 0204  20         li    tmp0,clip2
     6C3C 3200     
0013 6C3E 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6C40 0204  20         li    tmp0,clip3
     6C42 3300     
0017 6C44 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6C46 0204  20         li    tmp0,clip4
     6C48 3400     
0021 6C4A 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6C4C 0204  20         li    tmp0,clip5
     6C4E 3500     
0025 6C50 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6C52 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6C54 A006     
0030               
0031 6C56 06A0  32         bl    @film
     6C58 2236     
0032 6C5A A72E                   data cmdb.cmdall,>00,80
     6C5C 0000     
     6C5E 0050     
0033               
0034 6C60 06A0  32         bl    @cpym2m
     6C62 24DA     
0035 6C64 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6C66 A72E     
     6C68 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6C6A C120  34         mov   @tv.clip.fname,tmp0
     6C6C DE50     
0040 6C6E C144  18         mov   tmp0,tmp1
0041 6C70 0984  32         srl   tmp0,8                ; Get string length
0042 6C72 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6C74 A72E     
0043 6C76 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6C78 D520  46         movb  @parm1,*tmp0          ; Append suffix
     6C7A A006     
0045               
0046 6C7C 0460  28         b     @edkey.action.cmdb.insert
     6C7E 6B36     
0047                                                   ; Insert file
                   < stevie_b1.asm
0116                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6C80 0649  14         dect  stack
0009 6C82 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C84 0649  14         dect  stack
0011 6C86 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C88 A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6C8A 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C8C 7574     
0016               
0017 6C8E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C90 759C     
0018 6C92 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C94 A018     
0019 6C96 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6C98 0204  20         li    tmp0,txt.io.nofile    ; \
     6C9A 3CD8     
0024 6C9C C804  38         mov   tmp0,@parm1           ; / Error message
     6C9E A006     
0025               
0026 6CA0 06A0  32         bl    @error.display        ; Show error message
     6CA2 75F6     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6CA4 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6CA6 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CA8 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CAA A72E     
0036               
0037 6CAC 06A0  32         bl    @cpym2m
     6CAE 24DA     
0038 6CB0 A72E                   data cmdb.cmdlen,heap.top,80
     6CB2 F000     
     6CB4 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6CB6 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CB8 F000     
0044 6CBA C804  38         mov   tmp0,@parm1
     6CBC A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6CBE 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6CC0 A510     
     6CC2 2022     
0049 6CC4 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6CC6 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6CC8 A50E     
     6CCA A008     
0055 6CCC 0620  34         dec   @parm2                ; /
     6CCE A008     
0056               
0057 6CD0 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6CD2 A510     
     6CD4 A00A     
0058               
0059 6CD6 0204  20         li    tmp0,id.file.saveblock
     6CD8 0005     
0060 6CDA 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6CDC 04E0  34         clr   @parm2                ; First line to save
     6CDE A008     
0066 6CE0 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6CE2 A504     
     6CE4 A00A     
0067               
0068 6CE6 0204  20         li    tmp0,id.file.savefile
     6CE8 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6CEA C804  38         mov   tmp0,@parm4           ; Set work mode
     6CEC A00C     
0074               
0075 6CEE 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6CF0 7452     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6CF2 C839  50         mov   *stack+,@parm1        ; Pop top row
     6CF4 A006     
0087 6CF6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6CF8 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6CFA A008     
0090               
0091 6CFC 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6CFE 6494     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0117                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6D00 0649  14         dect  stack
0009 6D02 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D04 0649  14         dect  stack
0011 6D06 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D08 A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6D0A 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D0C 7574     
0016               
0017 6D0E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D10 759C     
0018 6D12 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D14 A018     
0019 6D16 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D18 0204  20         li    tmp0,txt.io.nofile    ; \
     6D1A 3CD8     
0024 6D1C C804  38         mov   tmp0,@parm1           ; / Error message
     6D1E A006     
0025               
0026 6D20 06A0  32         bl    @error.display        ; Show error message
     6D22 75F6     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D24 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D26 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D28 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D2A A72E     
0036               
0037 6D2C 06A0  32         bl    @cpym2m
     6D2E 24DA     
0038 6D30 A72E                   data cmdb.cmdlen,heap.top,80
     6D32 F000     
     6D34 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6D36 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D38 F000     
0044 6D3A C804  38         mov   tmp0,@parm1
     6D3C A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D3E 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D40 A510     
     6D42 2022     
0049 6D44 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6D46 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D48 A50E     
     6D4A A008     
0055 6D4C 0620  34         dec   @parm2                ; /
     6D4E A008     
0056               
0057 6D50 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D52 A510     
     6D54 A00A     
0058               
0059 6D56 0204  20         li    tmp0,id.file.printblock
     6D58 0008     
0060 6D5A 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6D5C 04E0  34         clr   @parm2                ; First line to save
     6D5E A008     
0066 6D60 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D62 A504     
     6D64 A00A     
0067               
0068 6D66 0204  20         li    tmp0,id.file.printfile
     6D68 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6D6A C804  38         mov   tmp0,@parm4           ; Set work mode
     6D6C A00C     
0074               
0075 6D6E 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D70 7452     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6D72 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D74 A006     
0087 6D76 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088               
0089 6D78 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6D7A A008     
0090               
0091 6D7C 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6D7E 6494     
0092                                                   ; | i  @parm1 = Top line in editor buffer
0093                                                   ; / i  @parm2 = Row offset in frame buffer
                   < stevie_b1.asm
0118                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6D80 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6D82 A506     
0021 6D84 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6D86 731C     
0022 6D88 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6D8A 7592     
0023 6D8C C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6D8E A72C     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6D90 0284  22         ci    tmp0,>2000
     6D92 2000     
0028 6D94 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6D96 0284  22         ci    tmp0,>7fff
     6D98 7FFF     
0031 6D9A 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6D9C 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6D9E C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6DA0 FFCE     
0040 6DA2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6DA4 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6DA6 0460  28         b     @edkey.keyscan.hook.debounce
     6DA8 6172     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6DAA 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6DAC 75CE     
0065 6DAE 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DB0 A71A     
0066 6DB2 0460  28        b     @edkey.keyscan.hook.debounce
     6DB4 6172     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.lineterm.toggle
0072               * Toggle line termination on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.lineterm.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.lineterm.toggle:
0083 6DB6 06A0  32        bl    @fm.lineterm           ; Toggle line termination mode
     6DB8 75E2     
0084 6DBA 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DBC A71A     
0085 6DBE 0460  28        b     @edkey.keyscan.hook.debounce
     6DC0 6172     
0086                                                   ; Back to editor main
0087               
0088               
0089               ***************************************************************
0090               * edkey.action.cmdb.am.toggle
0091               * Toggle 'AutoUnpack' on/off
0092               ***************************************************************
0093               * b   @edkey.action.cmdb.am.toggle
0094               *--------------------------------------------------------------
0095               * INPUT
0096               * none
0097               *--------------------------------------------------------------
0098               * Register usage
0099               * none
0100               ********|*****|*********************|**************************
0101               edkey.action.cmdb.am.toggle:
0102 6DC2 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoUnpack
     6DC4 75C4     
0103 6DC6 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DC8 A71A     
0104 6DCA 0460  28        b     @edkey.keyscan.hook.debounce
     6DCC 6172     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * edkey.action.cmdb.preset
0111               * Set command value to preset
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.preset
0114               *--------------------------------------------------------------
0115               * INPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.preset:
0122 6DCE 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6DD0 75A6     
0123 6DD2 0460  28        b     @edkey.keyscan.hook.debounce
     6DD4 6172     
0124                                                   ; Back to editor main
0125               
0126               
0127               
0128               ***************************************************************
0129               * dialog.close
0130               * Close dialog "Help"
0131               ***************************************************************
0132               * b   @edkey.action.cmdb.close.about
0133               *--------------------------------------------------------------
0134               * OUTPUT
0135               * none
0136               *--------------------------------------------------------------
0137               * Register usage
0138               * none
0139               ********|*****|*********************|**************************
0140               edkey.action.cmdb.close.about:
0141 6DD6 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6DD8 A71E     
0142                       ;------------------------------------------------------
0143                       ; Erase header line
0144                       ;------------------------------------------------------
0145 6DDA 06A0  32         bl    @hchar
     6DDC 27D2     
0146 6DDE 0000                   byte 0,0,32,80*2
     6DE0 20A0     
0147 6DE2 FFFF                   data EOL
0148               
0149 6DE4 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6DE6 6EAA     
0150                       ;-------------------------------------------------------
0151                       ; Exit
0152                       ;-------------------------------------------------------
0153 6DE8 0460  28         b     @edkey.keyscan.hook.debounce
     6DEA 6172     
0154                                                   ; Back to editor main
0155               
0156               
0157               
0158               ***************************************************************
0159               * edkey.action.cmdb.close.dialog
0160               * Close dialog
0161               ***************************************************************
0162               * b   @edkey.action.cmdb.close.dialog
0163               *--------------------------------------------------------------
0164               * OUTPUT
0165               * none
0166               *--------------------------------------------------------------
0167               * Register usage
0168               * none
0169               ********|*****|*********************|**************************
0170               edkey.action.cmdb.close.dialog:
0171 6DEC 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6DEE 6EAA     
0172                       ;-------------------------------------------------------
0173                       ; Exit
0174                       ;-------------------------------------------------------
0175               edkey.action.cmdb.close.dialog.exit:
0176 6DF0 0460  28         b     @edkey.keyscan.hook.debounce
     6DF2 6172     
0177                                                   ; Back to editor main
                   < stevie_b1.asm
0119                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 6DF4 06A0  32         bl    @hchar
     6DF6 27D2     
0009 6DF8 0034                   byte 0,52,32,20
     6DFA 2014     
0010 6DFC FFFF                   data EOL              ; Erase any previous message
0011               
0012 6DFE 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6E00 A50C     
0013 6E02 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6E04 06A0  32         bl    @putat
     6E06 2442     
0018 6E08 0034                   byte 0,52
0019 6E0A 3ABA                   data txt.autoins.on   ; AutoInsert on
0020 6E0C 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6E0E 06A0  32 !       bl    @putat
     6E10 2442     
0025 6E12 0034                   byte 0,52
0026 6E14 3ACA                   data txt.autoins.off   ; AutoInsert off
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
0031 6E16 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6E18 3792     
0032 6E1A C804  38         mov   tmp0,@tv.task.oneshot
     6E1C A226     
0033               
0034 6E1E 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6E20 2EF8     
0035 6E22 0003                   data 3                ; / for getting consistent delay
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
0040 6E24 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E26 6EAA     
0041 6E28 0460  28         b     @edkey.keyscan.hook.debounce
     6E2A 6172     
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0120                       copy  "edkey.cmdb.goto.asm"         ; Goto line
     **** ****     > edkey.cmdb.goto.asm
0001               * FILE......: edkey.cmdb.goto.asm
0002               * Purpose...: Actions in Goto dialog
0003               
0004               *---------------------------------------------------------------
0005               * Goto line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.goto:
0008                       ;-------------------------------------------------------
0009                       ; Exit on empty input string
0010                       ;-------------------------------------------------------
0011 6E2C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6E2E 759C     
0012 6E30 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6E32 A018     
0013 6E34 1324  14         jeq   edkey.action.cmdb.goto.exit
0014                                                   ; Yes, exit
0015                       ;-------------------------------------------------------
0016                       ; Scan input line number and pack as uint16
0017                       ;-------------------------------------------------------
0018 6E36 0204  20         li    tmp0,cmdb.cmd         ; \ Pointer to command
     6E38 A72F     
0019 6E3A C804  38         mov   tmp0,@parm1           ; / (no length-byte prefix)
     6E3C A006     
0020               
0021 6E3E 06A0  32         bl    @tv.uint16.pack       ; Pack string to 16bit unsigned integer
     6E40 33B6     
0022                                                   ; \ i  @parm1 = Pointer to input string
0023                                                   ; |             (no length-byte prefix)
0024                                                   ; |
0025                                                   ; | o  @outparm1 = 16bit unsigned integer
0026                                                   ; | o  @outparm2 = 0 conversion ok,
0027                                                   ; /                >FFFF invalid input
0028               
0029                       ;-------------------------------------------------------
0030                       ; Assert - Line number could not be parsed
0031                       ;-------------------------------------------------------
0032 6E42 8820  50         c     @outparm2,@w$ffff     ; Invalid number?
     6E44 A01A     
     6E46 2022     
0033 6E48 131A  14         jeq   edkey.action.cmdb.goto.exit
0034                                                   ; Yes, exit
0035                       ;-------------------------------------------------------
0036                       ; Assert - Line number is invalid
0037                       ;-------------------------------------------------------
0038 6E4A C120  34         mov   @outparm1,tmp0
     6E4C A018     
0039 6E4E 1317  14         jeq   edkey.action.cmdb.goto.exit
0040                                                   ; Yes, exit
0041                       ;-------------------------------------------------------
0042                       ; Prepare for goto
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.goto.prepare:
0045 6E50 0649  14         dect  stack
0046 6E52 C660  46         mov   @outparm1,*stack      ; Push @outparm1
     6E54 A018     
0047               
0048 6E56 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E58 6EAA     
0049                       ;-------------------------------------------------------
0050                       ; Crunch current row if dirty
0051                       ;-------------------------------------------------------
0052 6E5A 8820  50         c     @fb.row.dirty,@w$ffff
     6E5C A30A     
     6E5E 2022     
0053 6E60 1604  14         jne   edkey.action.cmdb.goto.line
0054               
0055 6E62 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6E64 6EBE     
0056                                                   ; \ i   @fb.top      = Address top row in FB
0057                                                   ; | i   @fb.row      = Current row in FB
0058                                                   ; | i   @fb.column   = Current column in FB
0059                                                   ; / i   @fb.colsline = Cols per line in FB
0060               
0061 6E66 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6E68 A30A     
0062                       ;-------------------------------------------------------
0063                       ; Goto line
0064                       ;-------------------------------------------------------
0065               edkey.action.cmdb.goto.line:
0066 6E6A C839  50         mov   *stack+,@parm1        ; Pop @outparm1 as @parm1
     6E6C A006     
0067 6E6E 0620  34         dec   @parm1                ; Base 0 offset in editor buffer
     6E70 A006     
0068               
0069 6E72 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6E74 A312     
0070               
0071 6E76 04E0  34         clr   @parm2                ; No row offset in frame buffer
     6E78 A008     
0072               
0073 6E7A 0460  28         b     @edkey.fb.goto.toprow ; \ Position cursor and exit
     6E7C 6494     
0074                                                   ; | i  @parm1 = Top line in editor buffer
0075                                                   ; / i  @parm2 = Row offset in frame buffer
0076                       ;-------------------------------------------------------
0077                       ; Exit
0078                       ;-------------------------------------------------------
0079               edkey.action.cmdb.goto.exit:
0080 6E7E 0460  28         b     @edkey.keyscan.hook.debounce
     6E80 6172     
0081                                                   ; Back to editor main
                   < stevie_b1.asm
0121                       copy  "edkey.cmdb.font.asm"         ; Set font
     **** ****     > edkey.cmdb.font.asm
0001               * FILE......: edkey.cmdb.font.asm
0002               * Purpose...: Set specified font
0003               
0004               *---------------------------------------------------------------
0005               * Load font
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.font1:
0008 6E82 04C4  14         clr   tmp0                  ; Load font 1
0009 6E84 100C  14         jmp   edkey.action.cmdb.font.load
0010               edkey.action.cmdb.font2:
0011 6E86 0204  20         li    tmp0,1                ; Load font 2
     6E88 0001     
0012 6E8A 1009  14         jmp   edkey.action.cmdb.font.load
0013               edkey.action.cmdb.font3:
0014 6E8C 0204  20         li    tmp0,2                ; Load font 3
     6E8E 0002     
0015 6E90 1006  14         jmp   edkey.action.cmdb.font.load
0016               edkey.action.cmdb.font4:
0017 6E92 0204  20         li    tmp0,3                ; Load font 4
     6E94 0003     
0018 6E96 1003  14         jmp   edkey.action.cmdb.font.load
0019               edkey.action.cmdb.font5:
0020 6E98 0204  20         li    tmp0,4                ; Load font 5
     6E9A 0004     
0021 6E9C 1000  14         jmp   edkey.action.cmdb.font.load
0022                       ;-------------------------------------------------------
0023                       ; Load font
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.font.load:
0026 6E9E C804  38         mov   tmp0,@parm1
     6EA0 A006     
0027 6EA2 06A0  32         bl    @tv.set.font          ; Set current font (dumps font to VDP)
     6EA4 779E     
0028                                                   ; \ i  @parm1       = Font index (0-5)
0029                                                   ; / o  @tv.font.ptr = Pointer to font
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.cmdb.font.exit:
0034 6EA6 0460  28         b     @edkey.keyscan.hook.debounce
     6EA8 6172     
0035                                                   ; Back to editor main
                   < stevie_b1.asm
0122                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 6EAA 0649  14         dect  stack
0018 6EAC C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6EAE 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6EB0 A71C     
0023 6EB2 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6EB4 7574     
0024 6EB6 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6EB8 A31A     
0025                       ;-------------------------------------------------------
0026                       ; Exit
0027                       ;-------------------------------------------------------
0028               cmdb.dialog.close.exit:
0029 6EBA C2F9  30         mov   *stack+,r11           ; Pop r11
0030 6EBC 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0123                       ;-----------------------------------------------------------------------
0124                       ; Logic for Editor Buffer
0125                       ;-----------------------------------------------------------------------
0126                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 6EBE 0649  14         dect  stack
0028 6EC0 C64B  30         mov   r11,*stack            ; Save return address
0029 6EC2 0649  14         dect  stack
0030 6EC4 C644  30         mov   tmp0,*stack           ; Push tmp0
0031 6EC6 0649  14         dect  stack
0032 6EC8 C645  30         mov   tmp1,*stack           ; Push tmp1
0033 6ECA 0649  14         dect  stack
0034 6ECC C646  30         mov   tmp2,*stack           ; Push tmp2
0035 6ECE 0649  14         dect  stack
0036 6ED0 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 6ED2 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     6ED4 A30C     
     6ED6 A100     
0041 6ED8 04E0  34         clr   @fb.column
     6EDA A30C     
0042               
0043 6EDC 06A0  32         bl    @fb.calc.pointer      ; Calculate position in frame buffer
     6EDE 30EE     
0044                                                   ; \ i   @fb.top      = Address top row in FB
0045                                                   ; | i   @fb.topline  = Top line in FB
0046                                                   ; | i   @fb.row      = Current row in FB
0047                                                   ; |                  (offset 0..@fb.scrrows)
0048                                                   ; | i   @fb.column   = Current column in FB
0049                                                   ; | i   @fb.colsline = Columns per line FB
0050                                                   ; |
0051                                                   ; / o   @fb.current  = Updated pointer
0052                       ;------------------------------------------------------
0053                       ; Prepare scan
0054                       ;------------------------------------------------------
0055 6EE0 04C4  14         clr   tmp0                  ; Counter
0056 6EE2 C160  34         mov   @fb.current,tmp1      ; Get position
     6EE4 A302     
0057 6EE6 C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     6EE8 A102     
0058 6EEA 04C7  14         clr   tmp3                  ; Counter for whitespace
0059                       ;------------------------------------------------------
0060                       ; 1. Scan line for >00 byte termination
0061                       ;------------------------------------------------------
0062               edb.line.pack.fb.scan:
0063 6EEC D1B5  28         movb  *tmp1+,tmp2           ; Get char
0064 6EEE 0986  32         srl   tmp2,8                ; Right justify
0065 6EF0 130D  14         jeq   edb.line.pack.fb.check_setpage
0066                                                   ; Stop scan if >00 found
0067 6EF2 0584  14         inc   tmp0                  ; Increase string length
0068                       ;------------------------------------------------------
0069                       ; Check for trailing whitespace
0070                       ;------------------------------------------------------
0071 6EF4 0286  22         ci    tmp2,32               ; Was it a space character?
     6EF6 0020     
0072 6EF8 1301  14         jeq   edb.line.pack.fb.check80
0073 6EFA C1C4  18         mov   tmp0,tmp3
0074                       ;------------------------------------------------------
0075                       ; Not more than 80 characters
0076                       ;------------------------------------------------------
0077               edb.line.pack.fb.check80:
0078 6EFC 0284  22         ci    tmp0,colrow
     6EFE 0050     
0079 6F00 1305  14         jeq   edb.line.pack.fb.check_setpage
0080                                                   ; Stop scan if 80 characters processed
0081 6F02 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0082                       ;------------------------------------------------------
0083                       ; Check failed, crash CPU!
0084                       ;------------------------------------------------------
0085               edb.line.pack.fb.crash:
0086 6F04 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6F06 FFCE     
0087 6F08 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6F0A 2026     
0088                       ;------------------------------------------------------
0089                       ; Check if highest SAMS page needs to be increased
0090                       ;------------------------------------------------------
0091               edb.line.pack.fb.check_setpage:
0092 6F0C 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0093 6F0E 1103  14         jlt   edb.line.pack.fb.rtrim
0094 6F10 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     6F12 A104     
0095 6F14 100C  14         jmp   !
0096               edb.line.pack.fb.rtrim:
0097                       ;------------------------------------------------------
0098                       ; Remove trailing blanks from line
0099                       ;------------------------------------------------------
0100 6F16 C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     6F18 A104     
0101               
0102 6F1A 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0103               
0104 6F1C C184  18         mov   tmp0,tmp2             ; \
0105 6F1E 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0106 6F20 0586  14         inc   tmp2                  ; /
0107               
0108 6F22 C107  18         mov   tmp3,tmp0             ; \
0109 6F24 A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     6F26 A102     
0110               
0111               edb.line.pack.fb.rtrim.loop:
0112 6F28 DD05  32         movb  tmp1,*tmp0+
0113 6F2A 0606  14         dec   tmp2
0114 6F2C 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0115                       ;------------------------------------------------------
0116                       ; Check and increase highest SAMS page
0117                       ;------------------------------------------------------
0118 6F2E 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     6F30 374C     
0119                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0120                                                   ; /                         free line
0121                       ;------------------------------------------------------
0122                       ; 2. Prepare for storing line
0123                       ;------------------------------------------------------
0124               edb.line.pack.fb.prepare:
0125 6F32 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     6F34 A304     
     6F36 A006     
0126 6F38 A820  54         a     @fb.row,@parm1        ; /
     6F3A A306     
     6F3C A006     
0127                       ;------------------------------------------------------
0128                       ; 2a. Update index
0129                       ;------------------------------------------------------
0130               edb.line.pack.fb.update_index:
0131 6F3E C820  54         mov   @edb.next_free.ptr,@parm2
     6F40 A508     
     6F42 A008     
0132                                                   ; Pointer to new line
0133 6F44 C820  54         mov   @edb.sams.hipage,@parm3
     6F46 A51C     
     6F48 A00A     
0134                                                   ; SAMS page to use
0135               
0136 6F4A 06A0  32         bl    @idx.entry.update     ; Update index
     6F4C 34F2     
0137                                                   ; \ i  parm1 = Line number in editor buffer
0138                                                   ; | i  parm2 = pointer to line in
0139                                                   ; |            editor buffer
0140                                                   ; / i  parm3 = SAMS page
0141                       ;------------------------------------------------------
0142                       ; 3. Set line prefix in editor buffer
0143                       ;------------------------------------------------------
0144 6F4E C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     6F50 A102     
0145 6F52 C160  34         mov   @edb.next_free.ptr,tmp1
     6F54 A508     
0146                                                   ; Address of line in editor buffer
0147               
0148 6F56 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     6F58 A508     
0149               
0150 6F5A C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     6F5C A104     
0151 6F5E CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0152 6F60 1317  14         jeq   edb.line.pack.fb.prepexit
0153                                                   ; Nothing to copy if empty line
0154                       ;------------------------------------------------------
0155                       ; 4. Copy line from framebuffer to editor buffer
0156                       ;------------------------------------------------------
0157               edb.line.pack.fb.copyline:
0158 6F62 0286  22         ci    tmp2,2
     6F64 0002     
0159 6F66 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0160 6F68 DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0161 6F6A DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0162 6F6C 1007  14         jmp   edb.line.pack.fb.copyline.align16
0163               
0164               edb.line.pack.fb.copyline.checkbyte:
0165 6F6E 0286  22         ci    tmp2,1
     6F70 0001     
0166 6F72 1602  14         jne   edb.line.pack.fb.copyline.block
0167 6F74 D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0168 6F76 1002  14         jmp   edb.line.pack.fb.copyline.align16
0169               
0170               edb.line.pack.fb.copyline.block:
0171 6F78 06A0  32         bl    @xpym2m               ; Copy memory block
     6F7A 24E0     
0172                                                   ; \ i  tmp0 = source
0173                                                   ; | i  tmp1 = destination
0174                                                   ; / i  tmp2 = bytes to copy
0175                       ;------------------------------------------------------
0176                       ; 5: Align pointer to multiple of 16 memory address
0177                       ;------------------------------------------------------
0178               edb.line.pack.fb.copyline.align16:
0179 6F7C A820  54         a     @rambuf+4,@edb.next_free.ptr
     6F7E A104     
     6F80 A508     
0180                                                      ; Add length of line
0181               
0182 6F82 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     6F84 A508     
0183 6F86 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0184 6F88 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     6F8A 000F     
0185 6F8C A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     6F8E A508     
0186                       ;------------------------------------------------------
0187                       ; 6: Restore SAMS page and prepare for exit
0188                       ;------------------------------------------------------
0189               edb.line.pack.fb.prepexit:
0190 6F90 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     6F92 A100     
     6F94 A30C     
0191               
0192 6F96 8820  50         c     @edb.sams.hipage,@edb.sams.page
     6F98 A51C     
     6F9A A518     
0193 6F9C 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0194               
0195 6F9E C120  34         mov   @edb.sams.page,tmp0
     6FA0 A518     
0196 6FA2 C160  34         mov   @edb.top.ptr,tmp1
     6FA4 A500     
0197 6FA6 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     6FA8 2576     
0198                                                   ; \ i  tmp0 = SAMS page number
0199                                                   ; / i  tmp1 = Memory address
0200                       ;------------------------------------------------------
0201                       ; Exit
0202                       ;------------------------------------------------------
0203               edb.line.pack.fb.exit:
0204 6FAA C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0205 6FAC C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0206 6FAE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0207 6FB0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0208 6FB2 C2F9  30         mov   *stack+,r11           ; Pop R11
0209 6FB4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0127                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 6FB6 0649  14         dect  stack
0031 6FB8 C64B  30         mov   r11,*stack            ; Save return address
0032 6FBA 0649  14         dect  stack
0033 6FBC C644  30         mov   tmp0,*stack           ; Push tmp0
0034 6FBE 0649  14         dect  stack
0035 6FC0 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 6FC2 0649  14         dect  stack
0037 6FC4 C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 6FC6 C820  54         mov   @parm1,@rambuf
     6FC8 A006     
     6FCA A100     
0042 6FCC C820  54         mov   @parm2,@rambuf+2
     6FCE A008     
     6FD0 A102     
0043 6FD2 C820  54         mov   @parm3,@rambuf+4
     6FD4 A00A     
     6FD6 A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 6FD8 C120  34         mov   @fb.colsline,tmp0
     6FDA A30E     
0048 6FDC 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     6FDE A008     
0049 6FE0 C1A0  34         mov   @fb.top.ptr,tmp2
     6FE2 A300     
0050 6FE4 A146  18         a     tmp2,tmp1             ; Add base to offset
0051 6FE6 C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     6FE8 A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 6FEA 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     6FEC A006     
     6FEE A504     
0056 6FF0 1103  14         jlt   !                     ; No, continue processing
0057               
0058 6FF2 04E0  34         clr   @rambuf+10            ; Set line length = 0
     6FF4 A10A     
0059 6FF6 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 6FF8 C120  34 !       mov   @parm1,tmp0
     6FFA A006     
0064 6FFC 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     6FFE 369A     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 7000 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     7002 A018     
0072 7004 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 7006 04E0  34         clr   @rambuf+10            ; Set length=0
     7008 A10A     
0076 700A 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 700C C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     700E A10A     
0082 7010 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     7012 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 7014 C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     7016 A108     
0088 7018 04C5  14         clr   tmp1                  ; | Fill with >00
0089 701A 0206  20         li    tmp2,80               ; /
     701C 0050     
0090               
0091 701E 06A0  32         bl    @xfilm                ; Fill CPU memory
     7020 223C     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 7022 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     7024 A10A     
0100 7026 C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     7028 A018     
0101 702A 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 702C 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     702E A104     
0105 7030 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 7032 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     7034 A108     
0109 7036 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     7038 A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 703A 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 703C 0286  22         ci    tmp2,80               ; Check line length
     703E 0050     
0117 7040 1202  14         jle   edb.line.unpack.fb.copy
0118 7042 0206  20         li    tmp2,80               ; Only process first 80 characters
     7044 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 7046 C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     7048 A106     
0124 704A A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     704C A104     
0125               
0126               
0127 704E 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     7050 24E0     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 7052 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 7054 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 7056 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 7058 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 705A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0128                       ;-----------------------------------------------------------------------
0129                       ; Background tasks
0130                       ;-----------------------------------------------------------------------
0131                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 705C 0649  14         dect  stack
0009 705E C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7060 06A0  32         bl    @pane.vdpdump
     7062 733C     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 7064 C2F9  30         mov   *stack+,r11           ; Pop r11
0019 7066 0460  28         b     @slotok
     7068 2E84     
                   < stevie_b1.asm
0132                       ;-----------------------------------------------------------------------
0133                       ; Screen pane utilities
0134                       ;-----------------------------------------------------------------------
0135                       copy  "pane.colorscheme.cycle.asm"  ; Cycle through color schemes
     **** ****     > pane.colorscheme.cycle.asm
0001               * FILE......: pane.colorscheme.cycle.asm
0002               * Purpose...: Cycle through available color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.cycle
0006               * Cycle through available color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.cycle
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.colorscheme.cycle:
0017 706A 0649  14         dect  stack
0018 706C C64B  30         mov   r11,*stack            ; Push return address
0019 706E 0649  14         dect  stack
0020 7070 C644  30         mov   tmp0,*stack           ; Push tmp0
0021               
0022 7072 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     7074 A212     
0023 7076 0284  22         ci    tmp0,tv.colorscheme.entries
     7078 000C     
0024                                                   ; Last entry reached?
0025 707A 1103  14         jlt   !
0026 707C 0204  20         li    tmp0,1                ; Reset color scheme index
     707E 0001     
0027 7080 1001  14         jmp   pane.colorscheme.switch
0028 7082 0584  14 !       inc   tmp0
0029                       ;-------------------------------------------------------
0030                       ; Switch to new color scheme
0031                       ;-------------------------------------------------------
0032               pane.colorscheme.switch:
0033 7084 C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     7086 A212     
0034               
0035 7088 06A0  32         bl    @pane.colorscheme.load
     708A 70C8     
0036                                                   ; Load current color scheme
0037                       ;-------------------------------------------------------
0038                       ; Show current color palette message
0039                       ;-------------------------------------------------------
0040 708C C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     708E 832A     
     7090 833C     
0041               
0042 7092 06A0  32         bl    @putnum
     7094 2A24     
0043 7096 003E                   byte 0,62
0044 7098 A212                   data tv.colorscheme,rambuf,>3020
     709A A100     
     709C 3020     
0045               
0046 709E 06A0  32         bl    @putat
     70A0 2442     
0047 70A2 0034                   byte 0,52
0048 70A4 3D4E                   data txt.colorscheme  ; Show color palette message
0049               
0050 70A6 C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     70A8 833C     
     70AA 832A     
0051                       ;-------------------------------------------------------
0052                       ; Delay
0053                       ;-------------------------------------------------------
0054 70AC 0204  20         li    tmp0,6000
     70AE 1770     
0055 70B0 0604  14 !       dec   tmp0
0056 70B2 16FE  14         jne   -!
0057                       ;-------------------------------------------------------
0058                       ; Setup one shot task for removing message
0059                       ;-------------------------------------------------------
0060 70B4 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     70B6 3792     
0061 70B8 C804  38         mov   tmp0,@tv.task.oneshot
     70BA A226     
0062               
0063 70BC 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     70BE 2EF8     
0064 70C0 0003                   data 3                ; / for getting consistent delay
0065                       ;-------------------------------------------------------
0066                       ; Exit
0067                       ;-------------------------------------------------------
0068               pane.colorscheme.cycle.exit:
0069 70C2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0070 70C4 C2F9  30         mov   *stack+,r11           ; Pop R11
0071 70C6 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0136                       copy  "pane.colorscheme.load.asm"   ; Load color scheme
     **** ****     > pane.colorscheme.load.asm
0001               * FILE......: pane.colorscheme.load.asm
0002               * Purpose...: Load color scheme
0003               
0004               ***************************************************************
0005               * pane.colorscheme.load
0006               * Load color scheme
0007               ***************************************************************
0008               * bl  @pane.colorscheme.load
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.colorscheme = Index into color scheme table
0012               * @parm1          = Skip screen off if >FFFF
0013               * @parm2          = Skip colorizing marked lines if >FFFF
0014               * @parm3          = Only colorize CMDB pane if >FFFF
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               * none
0018               *--------------------------------------------------------------
0019               * Register usage
0020               * tmp0,tmp1,tmp2,tmp3,tmp4
0021               ********|*****|*********************|**************************
0022               pane.colorscheme.load:
0023 70C8 0649  14         dect  stack
0024 70CA C64B  30         mov   r11,*stack            ; Save return address
0025 70CC 0649  14         dect  stack
0026 70CE C644  30         mov   tmp0,*stack           ; Push tmp0
0027 70D0 0649  14         dect  stack
0028 70D2 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 70D4 0649  14         dect  stack
0030 70D6 C646  30         mov   tmp2,*stack           ; Push tmp2
0031 70D8 0649  14         dect  stack
0032 70DA C647  30         mov   tmp3,*stack           ; Push tmp3
0033 70DC 0649  14         dect  stack
0034 70DE C648  30         mov   tmp4,*stack           ; Push tmp4
0035 70E0 0649  14         dect  stack
0036 70E2 C660  46         mov   @parm1,*stack         ; Push parm1
     70E4 A006     
0037 70E6 0649  14         dect  stack
0038 70E8 C660  46         mov   @parm2,*stack         ; Push parm2
     70EA A008     
0039 70EC 0649  14         dect  stack
0040 70EE C660  46         mov   @parm3,*stack         ; Push parm3
     70F0 A00A     
0041                       ;-------------------------------------------------------
0042                       ; Turn screen off
0043                       ;-------------------------------------------------------
0044 70F2 C120  34         mov   @parm1,tmp0
     70F4 A006     
0045 70F6 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     70F8 FFFF     
0046 70FA 1302  14         jeq   !                     ; Yes, so skip screen off
0047 70FC 06A0  32         bl    @scroff               ; Turn screen off
     70FE 2686     
0048                       ;-------------------------------------------------------
0049                       ; Get FG/BG colors framebuffer text
0050                       ;-------------------------------------------------------
0051 7100 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     7102 A212     
0052 7104 0604  14         dec   tmp0                  ; Internally work with base 0
0053               
0054 7106 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0055 7108 0224  22         ai    tmp0,tv.colorscheme.table
     710A 38AE     
0056                                                   ; Add base for color scheme data table
0057 710C C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0058 710E C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     7110 A218     
0059                       ;-------------------------------------------------------
0060                       ; Get and save cursor color
0061                       ;-------------------------------------------------------
0062 7112 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0063 7114 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     7116 00FF     
0064 7118 C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     711A A216     
0065                       ;-------------------------------------------------------
0066                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0067                       ;-------------------------------------------------------
0068 711C C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0069 711E 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     7120 FF00     
0070 7122 0988  32         srl   tmp4,8                ; MSB to LSB
0071               
0072 7124 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0073 7126 C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0074 7128 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0075 712A C806  38         mov   tmp2,@tv.busycolor    ; /
     712C A21C     
0076               
0077 712E 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     7130 00FF     
0078 7132 C805  38         mov   tmp1,@tv.markcolor    ; /
     7134 A21A     
0079               
0080 7136 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0081 7138 0985  32         srl   tmp1,8                ; \ Right align MN and
0082 713A C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     713C A220     
0083                       ;-------------------------------------------------------
0084                       ; Check if only CMDB needs to be colorized
0085                       ;-------------------------------------------------------
0086 713E 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     7140 A00A     
     7142 2022     
0087 7144 1340  14         jeq   pane.colorscheme.cmdbpane
0088                                                   ; Yes, shortcut jump to CMDB pane
0089                       ;-------------------------------------------------------
0090                       ; Get FG color for ruler
0091                       ;-------------------------------------------------------
0092 7146 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0093 7148 0245  22         andi  tmp1,>000f            ; Only keep P
     714A 000F     
0094 714C 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0095 714E C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     7150 A21E     
0096                       ;-------------------------------------------------------
0097                       ; Write sprite color of line and column indicators to SAT
0098                       ;-------------------------------------------------------
0099 7152 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0100 7154 0245  22         andi  tmp1,>00f0            ; Only keep O
     7156 00F0     
0101 7158 0A45  24         sla   tmp1,4                ; Move O to MSB
0102 715A D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     715C A05D     
0103 715E D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     7160 A061     
0104                       ;-------------------------------------------------------
0105                       ; Dump colors to VDP register 7 (text mode)
0106                       ;-------------------------------------------------------
0107 7162 C147  18         mov   tmp3,tmp1             ; Get work copy
0108 7164 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0109 7166 0265  22         ori   tmp1,>0700
     7168 0700     
0110 716A C105  18         mov   tmp1,tmp0
0111 716C 06A0  32         bl    @putvrx               ; Write VDP register
     716E 2334     
0112                       ;-------------------------------------------------------
0113                       ; Dump colors for frame buffer pane (TAT)
0114                       ;-------------------------------------------------------
0115 7170 C120  34         mov   @tv.ruler.visible,tmp0
     7172 A210     
0116 7174 130C  14         jeq   pane.colorscheme.fbdump.noruler
0117               
0118 7176 C120  34         mov   @cmdb.dialog,tmp0
     7178 A71C     
0119 717A 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     717C 0068     
0120 717E 1307  14         jeq   pane.colorscheme.fbdump.noruler
0121                                                   ; Yes, skip ruler
0122                       ;-------------------------------------------------------
0123                       ; Ruler visible on screen (TAT)
0124                       ;-------------------------------------------------------
0125 7180 C120  34         mov   @cmdb.vdptop,tmp0     ;
     7182 A70E     
0126 7184 0224  22         ai    tmp0,80               ; VDP start address (frame buffer area)
     7186 0050     
0127 7188 0206  20         li    tmp2,(pane.botrow-2)*80
     718A 0870     
0128                                                   ; Number of bytes to fill
0129 718C 1004  14         jmp   pane.colorscheme.checkcmdb
0130               
0131               pane.colorscheme.fbdump.noruler:
0132                       ;-------------------------------------------------------
0133                       ; No ruler visible on screen (TAT)
0134                       ;-------------------------------------------------------
0135 718E 0204  20         li    tmp0,vdp.fb.toprow.tat
     7190 1850     
0136                                                   ; VDP start address (frame buffer area)
0137 7192 0206  20         li    tmp2,(pane.botrow-1)*80
     7194 08C0     
0138                                                   ; Number of bytes to fill
0139                       ;-------------------------------------------------------
0140                       ; Adjust bottom of frame buffer if CMDB visible
0141                       ;-------------------------------------------------------
0142               pane.colorscheme.checkcmdb:
0143 7196 C820  54         mov   @cmdb.visible,@cmdb.visible
     7198 A702     
     719A A702     
0144 719C 1302  14         jeq   pane.colorscheme.fbdump
0145                                                   ; Not visible, skip adjustment
0146 719E 0226  22         ai    tmp2,-320             ; CMDB adjustment
     71A0 FEC0     
0147                       ;-------------------------------------------------------
0148                       ; Dump colors to VDP (TAT)
0149                       ;-------------------------------------------------------
0150               pane.colorscheme.fbdump:
0151 71A2 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0152 71A4 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0153               
0154 71A6 06A0  32         bl    @xfilv                ; Fill colors
     71A8 2294     
0155                                                   ; i \  tmp0 = start address
0156                                                   ; i |  tmp1 = byte to fill
0157                                                   ; i /  tmp2 = number of bytes to fill
0158                       ;-------------------------------------------------------
0159                       ; Colorize marked lines
0160                       ;-------------------------------------------------------
0161 71AA C120  34         mov   @cmdb.dialog,tmp0
     71AC A71C     
0162 71AE 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     71B0 0068     
0163 71B2 1309  14         jeq   pane.colorscheme.cmdbpane
0164                                                   ; Yes, skip marked lines
0165               
0166 71B4 C120  34         mov   @parm2,tmp0
     71B6 A008     
0167 71B8 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     71BA FFFF     
0168 71BC 1304  14         jeq   pane.colorscheme.cmdbpane
0169               
0170 71BE 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     71C0 A312     
0171               
0172 71C2 06A0  32         bl    @fb.colorlines        ; Colorize lines
     71C4 761C     
0173                                                   ; \ i  @parm1       = Force refresh if >ffff
0174                                                   ; / i  @fb.colorize = Colorize if >ffff
0175                       ;-------------------------------------------------------
0176                       ; Dump colors for CMDB header line (TAT)
0177                       ;-------------------------------------------------------
0178               pane.colorscheme.cmdbpane:
0179 71C6 C120  34         mov   @cmdb.visible,tmp0
     71C8 A702     
0180 71CA 1338  14         jeq   pane.colorscheme.errpane
0181                                                   ; Skip if CMDB pane is hidden
0182               
0183 71CC C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     71CE A70E     
0184 71D0 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     71D2 A220     
0185 71D4 0206  20         li    tmp2,1*64             ; Number of bytes to fill
     71D6 0040     
0186 71D8 06A0  32         bl    @xfilv                ; Fill colors
     71DA 2294     
0187                                                   ; i \  tmp0 = start address
0188                                                   ; i |  tmp1 = byte to fill
0189                                                   ; i /  tmp2 = number of bytes to fill
0190                       ;-------------------------------------------------------
0191                       ; Dump colors for CMDB Stevie logo (TAT)
0192                       ;-------------------------------------------------------
0193 71DC C120  34         mov   @cmdb.vdptop,tmp0     ; Get VDP start address
     71DE A70E     
0194 71E0 0224  22         ai    tmp0,64               ; Add offset for logo
     71E2 0040     
0195 71E4 C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     71E6 A220     
0196 71E8 D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     71EA A221     
0197                                                   ; Copy same value into MSB
0198 71EC 0945  24         srl   tmp1,4                ;
0199 71EE 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     71F0 00FF     
0200               
0201 71F2 0206  20         li    tmp2,16               ; Number of bytes to fill
     71F4 0010     
0202 71F6 06A0  32         bl    @xfilv                ; Fill colors
     71F8 2294     
0203                                                   ; i \  tmp0 = start address
0204                                                   ; i |  tmp1 = byte to fill
0205                                                   ; i /  tmp2 = number of bytes to fill
0206                       ;-------------------------------------------------------
0207                       ; Dump colors for CMDB pane content (TAT)
0208                       ;-------------------------------------------------------
0209 71FA C120  34         mov   @cmdb.vdptop,tmp0     ; \
     71FC A70E     
0210 71FE 0224  22         ai    tmp0,80               ; / VDP start address (CMDB top line + 1)
     7200 0050     
0211                                                   ;
0212 7202 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0213 7204 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     7206 00A0     
0214 7208 06A0  32         bl    @xfilv                ; Fill colors
     720A 2294     
0215                                                   ; i \  tmp0 = start address
0216                                                   ; i |  tmp1 = byte to fill
0217                                                   ; i /  tmp2 = number of bytes to fill
0218               
0219 720C C120  34         mov   @cmdb.vdptop,tmp0     ; \
     720E A70E     
0220 7210 0224  22         ai    tmp0,240              ; / VDP start address (CMDB top line + 3)
     7212 00F0     
0221                                                   ;
0222 7214 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     7216 A220     
0223 7218 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     721A 0050     
0224 721C 06A0  32         bl    @xfilv                ; Fill colors
     721E 2294     
0225                                                   ; i \  tmp0 = start address
0226                                                   ; i |  tmp1 = byte to fill
0227                                                   ; i /  tmp2 = number of bytes to fill
0228               
0229 7220 C120  34         mov   @cmdb.vdptop,tmp0     ; \
     7222 A70E     
0230 7224 0224  22         ai    tmp0,320              ; / VDP start address (CMDB top line + 4)
     7226 0140     
0231                                                   ;
0232 7228 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0233 722A 0206  20         li    tmp2,2*80             ; Number of bytes to fill
     722C 00A0     
0234 722E 06A0  32         bl    @xfilv                ; Fill colors
     7230 2294     
0235                                                   ; i \  tmp0 = start address
0236                                                   ; i |  tmp1 = byte to fill
0237                                                   ; i /  tmp2 = number of bytes to fill
0238                       ;-------------------------------------------------------
0239                       ; Exit early if only CMDB needed to be colorized
0240                       ;-------------------------------------------------------
0241 7232 C120  34         mov   @parm3,tmp0
     7234 A00A     
0242 7236 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     7238 FFFF     
0243 723A 133A  14         jeq   pane.colorscheme.cursorcolor.cmdb
0244                                                   ; Yes, shortcut to CMDB cursor color
0245                       ;-------------------------------------------------------
0246                       ; Dump colors for error pane (TAT)
0247                       ;-------------------------------------------------------
0248               pane.colorscheme.errpane:
0249 723C C120  34         mov   @tv.error.visible,tmp0
     723E A22A     
0250 7240 1306  14         jeq   pane.colorscheme.statline
0251                                                   ; Skip if error pane is hidden
0252               
0253 7242 0205  20         li    tmp1,>00f6            ; White on dark red
     7244 00F6     
0254 7246 C805  38         mov   tmp1,@parm1           ; Pass color combination
     7248 A006     
0255               
0256 724A 06A0  32         bl    @pane.errline.drawcolor
     724C 76F8     
0257                                                   ; Draw color on rows in error pane
0258                                                   ; \ i  @tv.error.rows = Number of rows
0259                                                   ; / i  @parm1         = Color combination
0260                       ;-------------------------------------------------------
0261                       ; Dump colors for top line and bottom line (TAT)
0262                       ;-------------------------------------------------------
0263               pane.colorscheme.statline:
0264 724E C160  34         mov   @tv.color,tmp1
     7250 A218     
0265 7252 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     7254 00FF     
0266 7256 C805  38         mov   tmp1,@parm1           ; Set color combination
     7258 A006     
0267               
0268               
0269 725A 04E0  34         clr   @parm2                ; Top row on screen
     725C A008     
0270 725E 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     7260 7794     
0271                                                   ; \ i  @parm1 = Color combination
0272                                                   ; / i  @parm2 = Row on physical screen
0273               
0274 7262 0205  20         li    tmp1,pane.botrow
     7264 001D     
0275 7266 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     7268 A008     
0276 726A 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     726C 7794     
0277                                                   ; \ i  @parm1 = Color combination
0278                                                   ; / i  @parm2 = Row on physical screen
0279                       ;-------------------------------------------------------
0280                       ; Dump color for hearts in TI Basic dialog (TAT)
0281                       ;-------------------------------------------------------
0282 726E C160  34         mov   @cmdb.dialog,tmp1
     7270 A71C     
0283 7272 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     7274 006B     
0284 7276 1606  14         jne   pane.colorscheme.ruler
0285               
0286 7278 0204  20         li    tmp0,11               ; 1st Heart after string "Session: 1"
     727A 000B     
0287 727C C804  38         mov   tmp0,@parm1           ; Set parameter
     727E A006     
0288               
0289 7280 06A0  32         bl    @dialog.hearts.tat    ; Dump colors for hearts
     7282 75BA     
0290                                                   ; \ i  @parm1 = Start column (pos 1st heart)
0291                                                   ; /
0292                       ;-------------------------------------------------------
0293                       ; Dump colors for ruler if visible (TAT)
0294                       ;-------------------------------------------------------
0295               pane.colorscheme.ruler:
0296 7284 C160  34         mov   @cmdb.dialog,tmp1
     7286 A71C     
0297 7288 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     728A 0068     
0298 728C 130A  14         jeq   pane.colorscheme.cursorcolor
0299                                                   ; Yes, skip ruler
0300               
0301 728E C160  34         mov   @tv.ruler.visible,tmp1
     7290 A210     
0302 7292 1307  14         jeq   pane.colorscheme.cursorcolor
0303               
0304 7294 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     7296 7612     
0305 7298 06A0  32         bl    @cpym2v
     729A 2486     
0306 729C 1850                   data vdp.fb.toprow.tat
0307 729E A370                   data fb.ruler.tat
0308 72A0 0050                   data 80               ; Show ruler colors
0309                       ;-------------------------------------------------------
0310                       ; Dump cursor FG color to sprite table (SAT)
0311                       ;-------------------------------------------------------
0312               pane.colorscheme.cursorcolor:
0313 72A2 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     72A4 A216     
0314               
0315 72A6 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     72A8 A224     
0316 72AA 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     72AC 0000     
0317 72AE 1304  14         jeq   pane.colorscheme.cursorcolor.fb
0318                                                   ; Yes, set cursor color
0319               
0320               pane.colorscheme.cursorcolor.cmdb:
0321 72B0 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     72B2 00F0     
0322 72B4 0A48  24         sla   tmp4,4                ; Move to MSB
0323 72B6 1003  14         jmp   !
0324               
0325               pane.colorscheme.cursorcolor.fb:
0326 72B8 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     72BA 000F     
0327 72BC 0A88  32         sla   tmp4,8                ; Move to MSB
0328               
0329 72BE D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     72C0 A059     
0330 72C2 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     72C4 A215     
0331                       ;-------------------------------------------------------
0332                       ; Exit
0333                       ;-------------------------------------------------------
0334               pane.colorscheme.load.exit:
0335 72C6 06A0  32         bl    @scron                ; Turn screen on
     72C8 268E     
0336 72CA C839  50         mov   *stack+,@parm3        ; Pop @parm3
     72CC A00A     
0337 72CE C839  50         mov   *stack+,@parm2        ; Pop @parm2
     72D0 A008     
0338 72D2 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     72D4 A006     
0339 72D6 C239  30         mov   *stack+,tmp4          ; Pop tmp4
0340 72D8 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0341 72DA C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0342 72DC C179  30         mov   *stack+,tmp1          ; Pop tmp1
0343 72DE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0344 72E0 C2F9  30         mov   *stack+,r11           ; Pop R11
0345 72E2 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0137                       copy  "pane.colorscheme.status.asm" ; Set colors on status lines
     **** ****     > pane.colorscheme.status.asm
0001               * FILE......: pane.colorscheme.status.asm
0002               * Purpose...: Set color combination for status lines
0003               
0004               ***************************************************************
0005               * pane.colorscheme.statlines
0006               * Set color combination for status lines
0007               ***************************************************************
0008               * bl @pane.colorscheme.statlines
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Color combination to set
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.colorscheme.statlines:
0020 72E4 0649  14         dect  stack
0021 72E6 C64B  30         mov   r11,*stack            ; Save return address
0022 72E8 0649  14         dect  stack
0023 72EA C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Bottom line
0026                       ;------------------------------------------------------
0027 72EC 0204  20         li    tmp0,pane.botrow
     72EE 001D     
0028 72F0 C804  38         mov   tmp0,@parm2           ; Last row on screen
     72F2 A008     
0029 72F4 06A0  32         bl    @vdp.colors.line      ; Load color combination for line
     72F6 7794     
0030                                                   ; \ i  @parm1 = Color combination
0031                                                   ; / i  @parm2 = Row on physical screen
0032                       ;------------------------------------------------------
0033                       ; Exit
0034                       ;------------------------------------------------------
0035               pane.colorscheme.statlines.exit:
0036 72F8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0037 72FA C2F9  30         mov   *stack+,r11           ; Pop R11
0038 72FC 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0138                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 72FE 0649  14         dect  stack
0021 7300 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7302 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7304 228E     
0026 7306 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     7308 0000     
     730A 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 730C 06A0  32         bl    @clslot
     730E 2EEA     
0031 7310 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 7312 06A0  32         bl    @clslot
     7314 2EEA     
0034 7316 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 7318 C2F9  30         mov   *stack+,r11           ; Pop R11
0040 731A 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 731C 0649  14         dect  stack
0061 731E C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 7320 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7322 228E     
0066 7324 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     7326 0000     
     7328 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 732A 06A0  32         bl    @mkslot
     732C 2ECC     
0073 732E 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     7330 37DE     
0074 7332 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     7334 3880     
0075 7336 FFFF                   data eol
0076               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 7338 C2F9  30         mov   *stack+,r11           ; Pop R11
0090 733A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0139                       ;-----------------------------------------------------------------------
0140                       ; Screen panes
0141                       ;-----------------------------------------------------------------------
0142                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 733C 0649  14         dect  stack
0025 733E C64B  30         mov   r11,*stack            ; Save return address
0026 7340 0649  14         dect  stack
0027 7342 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 7344 0649  14         dect  stack
0029 7346 C660  42         mov   @wyx,*stack           ; Push cursor position
     7348 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 734A 20A0  32         coc   @wbit10,config
     734C 200C     
0035 734E 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 7350 06A0  32         bl    @putat
     7352 2442     
0040 7354 1D4E                   byte pane.botrow,78
0041 7356 3C30                   data txt.ws4
0042 7358 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 735A 06A0  32         bl    @putat
     735C 2442     
0048 735E 1D4E                   byte pane.botrow,78
0049 7360 3C1E                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 7362 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     7364 A702     
0055 7366 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 7368 C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     736A A71A     
0061 736C 1345  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 736E 0284  22         ci    tmp0,tv.1timeonly
     7370 00FE     
0066 7372 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 7374 0649  14         dect  stack
0073 7376 C660  46         mov   @parm1,*stack         ; Push @parm1
     7378 A006     
0074 737A 0649  14         dect  stack
0075 737C C660  46         mov   @parm2,*stack         ; Push @parm2
     737E A008     
0076 7380 0649  14         dect  stack
0077 7382 C660  46         mov   @parm3,*stack         ; Push @parm3
     7384 A00A     
0078               
0079 7386 0720  34         seto  @parm1                ; Do not turn screen off
     7388 A006     
0080 738A 0720  34         seto  @parm2                ; Skip colorzing marked lines
     738C A008     
0081 738E 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7390 A00A     
0082               
0083 7392 06A0  32         bl    @pane.colorscheme.load
     7394 70C8     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 7396 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     7398 A00A     
0092 739A C839  50         mov   *stack+,@parm2        ; Pop @parm2
     739C A008     
0093 739E C839  50         mov   *stack+,@parm1        ; Pop @parm1
     73A0 A006     
0094               
0095 73A2 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     73A4 A71A     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 73A6 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     73A8 757E     
0101 73AA 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     73AC A71A     
0102 73AE 1024  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 73B0 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     73B2 A318     
0107 73B4 1310  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109                       ;------------------------------------------------------
0110                       ; Dump frame buffer to VDP
0111                       ;------------------------------------------------------
0112               pane.vdpdump.dump:
0113 73B6 06A0  32         bl    @fb.calc.scrrows      ; Calculate number of rows
     73B8 3116     
0114                                                   ; \ i  @tv.ruler.visible = Ruler visible
0115                                                   ; | i  @edb.special.file = Special file flag
0116                                                   ; / i  @tv.error.visible = Error visible
0117               
0118 73BA C820  54         mov   @fb.scrrows,@parm1    ; Number of rows to dump to vdp
     73BC A31C     
     73BE A006     
0119               
0120 73C0 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     73C2 7626     
0121                                                   ; \ i  @parm1 = number of lines to dump
0122                                                   ; /
0123                       ;------------------------------------------------------
0124                       ; Color the lines in the framebuffer (TAT)
0125                       ;------------------------------------------------------
0126 73C4 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     73C6 A312     
0127 73C8 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0128               
0129                       ; Colorize marked block if set (M1/M2)
0130               
0131 73CA 06A0  32         bl    @fb.colorlines        ; Colorize lines
     73CC 761C     
0132                                                   ; \ i  @parm1       = Force refresh if >ffff
0133                                                   ; / i  @fb.colorize = Colorize if >ffff
0134                       ;-------------------------------------------------------
0135                       ; Finished with frame buffer
0136                       ;-------------------------------------------------------
0137               pane.vdpdump.dumped:
0138 73CE 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     73D0 A318     
0139 73D2 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     73D4 A31A     
0140                       ;-------------------------------------------------------
0141                       ; Refresh top and bottom line
0142                       ;-------------------------------------------------------
0143               pane.vdpdump.statlines:
0144 73D6 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     73D8 A31A     
0145 73DA 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0146               
0147 73DC 06A0  32         bl    @pane.topline         ; Draw top line
     73DE 76D0     
0148 73E0 06A0  32         bl    @pane.botline         ; Draw bottom line
     73E2 76DA     
0149 73E4 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     73E6 A31A     
0150                       ;------------------------------------------------------
0151                       ; Show ruler with tab positions
0152                       ;------------------------------------------------------
0153 73E8 C120  34         mov   @tv.ruler.visible,tmp0
     73EA A210     
0154                                                   ; Should ruler be visible?
0155 73EC 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0156               
0157 73EE 06A0  32         bl    @cpym2v
     73F0 2486     
0158 73F2 0050                   data vdp.fb.toprow.sit
0159 73F4 A320                   data fb.ruler.sit
0160 73F6 0050                   data 80               ; Show ruler
0161                       ;------------------------------------------------------
0162                       ; Exit task
0163                       ;------------------------------------------------------
0164               pane.vdpdump.exit:
0165 73F8 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     73FA 832A     
0166 73FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0167 73FE C2F9  30         mov   *stack+,r11           ; Pop r11
0168 7400 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0143                       ;-----------------------------------------------------------------------
0144                       ; Stubs
0145                       ;-----------------------------------------------------------------------
0146                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 7402 0649  14         dect  stack
0010 7404 C64B  30         mov   r11,*stack            ; Save return address
0011 7406 0649  14         dect  stack
0012 7408 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 740A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     740C 2FCA     
0017 740E 6004                   data bank2.rom        ; | i  p0 = bank address
0018 7410 7F40                   data vec.1            ; | i  p1 = Vector with target address
0019 7412 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 7414 C120  34         mov   @outparm1,tmp0
     7416 A018     
0024 7418 1304  14         jeq   fm.loadfile.exit
0025               
0026 741A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 741C C2F9  30         mov   *stack+,r11           ; Pop r11
0028 741E 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     7420 74C6     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 7422 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 7424 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 7426 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 7428 0649  14         dect  stack
0044 742A C64B  30         mov   r11,*stack            ; Save return address
0045 742C 0649  14         dect  stack
0046 742E C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 7430 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7432 2FCA     
0051 7434 6004                   data bank2.rom        ; | i  p0 = bank address
0052 7436 7F42                   data vec.2            ; | i  p1 = Vector with target address
0053 7438 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 743A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 743C C2F9  30         mov   *stack+,r11           ; Pop r11
0060 743E 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               ***************************************************************
0064               * Stub for "fm.browse.fname.suffix"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.browse.fname.suffix:
0068 7440 0649  14         dect  stack
0069 7442 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 7444 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7446 2FCA     
0074 7448 6004                   data bank2.rom        ; | i  p0 = bank address
0075 744A 7F44                   data vec.3            ; | i  p1 = Vector with target address
0076 744C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 744E C2F9  30         mov   *stack+,r11           ; Pop r11
0081 7450 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
0089 7452 0649  14         dect  stack
0090 7454 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 7456 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7458 2FCA     
0095 745A 6004                   data bank2.rom        ; | i  p0 = bank address
0096 745C 7F46                   data vec.4            ; | i  p1 = Vector with target address
0097 745E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 7460 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 7462 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
0110 7464 0649  14         dect  stack
0111 7466 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 7468 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     746A 2FCA     
0116 746C 6004                   data bank2.rom        ; | i  p0 = bank address
0117 746E 7F48                   data vec.5            ; | i  p1 = Vector with target address
0118 7470 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 7472 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 7474 045B  20         b     *r11                  ; Return to caller
0124               
0125               
0126               ***************************************************************
0127               * Stub for dialog "Help"
0128               * bank3 vec.1
0129               ********|*****|*********************|**************************
0130               dialog.help.next:
0131 7476 8820  50         c     @w$0008,@cmdb.dialog.var
     7478 2008     
     747A A71E     
0132 747C 1304  14         jeq   !
0133 747E A820  54         a     @w$0008,@cmdb.dialog.var
     7480 2008     
     7482 A71E     
0134 7484 1002  14         jmp   dialog.help
0135 7486 04E0  34 !       clr   @cmdb.dialog.var
     7488 A71E     
0136               dialog.help:
0137 748A C820  54         mov   @dialog.help.vector,@trmpvector
     748C 7492     
     748E A034     
0138 7490 105E  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 7492 7F40             data  vec.1
0141               
0142               
0143               ***************************************************************
0144               * Stub for dialog "Load file"
0145               * bank3 vec.2
0146               ********|*****|*********************|**************************
0147               dialog.load:
0148 7494 C820  54         mov   @dialog.load.vector,@trmpvector
     7496 749C     
     7498 A034     
0149 749A 1059  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 749C 7F42             data  vec.2
0152               
0153               
0154               ***************************************************************
0155               * Stub for dialog "Save file"
0156               * bank3 vec.3
0157               ********|*****|*********************|**************************
0158               dialog.save:
0159 749E C820  54         mov   @dialog.save.vector,@trmpvector
     74A0 74A6     
     74A2 A034     
0160 74A4 1054  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 74A6 7F44             data  vec.3
0163               
0164               
0165               ***************************************************************
0166               * Stub for dialog "Insert file at line"
0167               * bank3 vec.4
0168               ********|*****|*********************|**************************
0169               dialog.insert:
0170 74A8 C820  54         mov   @dialog.insert.vector,@trmpvector
     74AA 74B0     
     74AC A034     
0171 74AE 104F  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 74B0 7F46             data  vec.4
0174               
0175               
0176               ***************************************************************
0177               * Stub for dialog "Print file"
0178               * bank3 vec.5
0179               ********|*****|*********************|**************************
0180               dialog.print:
0181 74B2 C820  54         mov   @dialog.print.vector,@trmpvector
     74B4 74BA     
     74B6 A034     
0182 74B8 104A  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 74BA 7F48             data  vec.5
0185               
0186               
0187               ***************************************************************
0188               * Stub for dialog "File"
0189               * bank3 vec.6
0190               ********|*****|*********************|**************************
0191               dialog.file:
0192 74BC C820  54         mov   @dialog.file.vector,@trmpvector
     74BE 74C4     
     74C0 A034     
0193 74C2 1045  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 74C4 7F4A             data  vec.6
0196               
0197               
0198               ***************************************************************
0199               * Stub for dialog "Unsaved Changes"
0200               * bank3 vec.7
0201               ********|*****|*********************|**************************
0202               dialog.unsaved:
0203 74C6 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     74C8 A728     
0204 74CA C820  54         mov   @dialog.unsaved.vector,@trmpvector
     74CC 74D2     
     74CE A034     
0205 74D0 103E  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 74D2 7F4C             data  vec.7
0208               
0209               
0210               ***************************************************************
0211               * Stub for dialog "Copy clipboard to line ..."
0212               * bank3 vec.8
0213               ********|*****|*********************|**************************
0214               dialog.clipboard:
0215 74D4 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     74D6 74DC     
     74D8 A034     
0216 74DA 1039  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 74DC 7F4E             data  vec.8
0219               
0220               
0221               ***************************************************************
0222               * Stub for dialog "Configure clipboard device"
0223               * bank3 vec.9
0224               ********|*****|*********************|**************************
0225               dialog.clipdev:
0226 74DE C820  54         mov   @dialog.clipdev.vector,@trmpvector
     74E0 74E6     
     74E2 A034     
0227 74E4 1034  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 74E6 7F50             data  vec.9
0230               
0231               
0232               ***************************************************************
0233               * Stub for dialog "Configure"
0234               * bank3 vec.10
0235               ********|*****|*********************|**************************
0236               dialog.config:
0237 74E8 C820  54         mov   @dialog.config.vector,@trmpvector
     74EA 74F0     
     74EC A034     
0238 74EE 102F  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 74F0 7F52             data  vec.10
0241               
0242               
0243               ***************************************************************
0244               * Stub for dialog "Append file"
0245               * bank3 vec.11
0246               ********|*****|*********************|**************************
0247               dialog.append:
0248 74F2 C820  54         mov   @dialog.append.vector,@trmpvector
     74F4 74FA     
     74F6 A034     
0249 74F8 102A  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 74FA 7F54             data  vec.11
0252               
0253               
0254               ***************************************************************
0255               * Stub for dialog "Cartridge"
0256               * bank3 vec.12
0257               ********|*****|*********************|**************************
0258               dialog.cartridge:
0259 74FC C820  54         mov   @dialog.cartridge.vector,@trmpvector
     74FE 7504     
     7500 A034     
0260 7502 1025  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 7504 7F56             data  vec.12
0263               
0264               
0265               ***************************************************************
0266               * Stub for dialog "Basic"
0267               * bank3 vec.13
0268               ********|*****|*********************|**************************
0269               dialog.basic:
0270 7506 C820  54         mov   @dialog.basic.vector,@trmpvector
     7508 750E     
     750A A034     
0271 750C 1020  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 750E 7F58             data  vec.13
0274               
0275               
0276               ***************************************************************
0277               * Stub for dialog "Shortcuts"
0278               * bank3 vec.14
0279               ********|*****|*********************|**************************
0280               dialog.shortcuts:
0281 7510 C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     7512 7518     
     7514 A034     
0282 7516 101B  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 7518 7F5A             data  vec.14
0285               
0286               
0287               ***************************************************************
0288               * Stub for dialog "Go to line"
0289               * bank3 vec.16
0290               ********|*****|*********************|**************************
0291               dialog.goto:
0292 751A C820  54         mov   @dialog.goto.vector,@trmpvector
     751C 7522     
     751E A034     
0293 7520 1016  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.goto.vector:
0295 7522 7F5E             data  vec.16
0296               
0297               
0298               ***************************************************************
0299               * Stub for dialog "Configure font"
0300               * bank3 vec.17
0301               ********|*****|*********************|**************************
0302               dialog.font:
0303 7524 C820  54         mov   @dialog.font.vector,@trmpvector
     7526 752C     
     7528 A034     
0304 752A 1011  14         jmp   _trampoline.bank3     ; Show dialog
0305               dialog.font.vector:
0306 752C 7F60             data  vec.17
0307               
0308               
0309               ***************************************************************
0310               * Stub for dialog "Configure Master Catalog"
0311               * bank3 vec.18
0312               ********|*****|*********************|**************************
0313               dialog.cfg.mc:
0314 752E C820  54         mov   @dialog.cfg.mc.vector,@trmpvector
     7530 7536     
     7532 A034     
0315 7534 100C  14         jmp   _trampoline.bank3     ; Show dialog
0316               dialog.cfg.mc.vector:
0317 7536 7F62             data  vec.18
0318               
0319               
0320               ***************************************************************
0321               * Stub for dialog "Main Menu"
0322               * bank3 vec.30
0323               ********|*****|*********************|**************************
0324               dialog.menu:
0325                       ;------------------------------------------------------
0326                       ; Check if block mode is active
0327                       ;------------------------------------------------------
0328 7538 C120  34         mov   @edb.block.m2,tmp0    ; \
     753A A510     
0329 753C 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0330                                                   ; /
0331 753E 1302  14         jeq   !                     ; Block mode inactive, show dialog
0332                       ;------------------------------------------------------
0333                       ; Special treatment for block mode
0334                       ;------------------------------------------------------
0335 7540 0460  28         b     @edkey.action.block.reset
     7542 6888     
0336                                                   ; Reset block mode
0337                       ;------------------------------------------------------
0338                       ; Show dialog
0339                       ;------------------------------------------------------
0340 7544 C820  54 !       mov   @dialog.menu.vector,@trmpvector
     7546 754C     
     7548 A034     
0341 754A 1001  14         jmp   _trampoline.bank3     ; Show dialog
0342               dialog.menu.vector:
0343 754C 7F7A             data  vec.30
0344               
0345               
0346               
0347               ***************************************************************
0348               * Trampoline 1 (bank 3, dialog)
0349               ********|*****|*********************|**************************
0350               _trampoline.bank3:
0351 754E 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     7550 72FE     
0352                       ;------------------------------------------------------
0353                       ; Call routine in specified bank
0354                       ;------------------------------------------------------
0355 7552 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7554 2FCA     
0356 7556 6006                   data bank3.rom        ; | i  p0 = bank address
0357 7558 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0358                                                   ; |         (deref @trmpvector)
0359 755A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0360                       ;------------------------------------------------------
0361                       ; Exit
0362                       ;------------------------------------------------------
0363 755C 0460  28         b     @edkey.action.cmdb.show
     755E 6A4C     
0364                                                   ; Show dialog in CMDB pane
0365               
0366               
0367               ***************************************************************
0368               * Stub for "pane.show_hintx"
0369               * bank3 vec.19
0370               ********|*****|*********************|**************************
0371               pane.show_hintx:
0372 7560 C820  54         mov   @pane.show_hintx.vector,@trmpvector
     7562 7568     
     7564 A034     
0373 7566 104C  14         jmp   _trampoline.bank3.ret ; Longjump
0374               pane.show_hintx.vector:
0375 7568 7F64             data  vec.19
0376               
0377               
0378               ***************************************************************
0379               * Stub for "pane.cmdb.show"
0380               * bank3 vec.20
0381               ********|*****|*********************|**************************
0382               pane.cmdb.show:
0383 756A C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     756C 7572     
     756E A034     
0384 7570 1047  14         jmp   _trampoline.bank3.ret ; Longjump
0385               pane.cmdb.show.vector:
0386 7572 7F66             data  vec.20
0387               
0388               
0389               ***************************************************************
0390               * Stub for "pane.cmdb.hide"
0391               * bank3 vec.21
0392               ********|*****|*********************|**************************
0393               pane.cmdb.hide:
0394 7574 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7576 757C     
     7578 A034     
0395 757A 1042  14         jmp   _trampoline.bank3.ret ; Longjump
0396               pane.cmdb.hide.vector:
0397 757C 7F68             data  vec.21
0398               
0399               
0400               ***************************************************************
0401               * Stub for "pane.cmdb.draw"
0402               * bank3 vec.22
0403               ********|*****|*********************|**************************
0404               pane.cmdb.draw:
0405 757E C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7580 7586     
     7582 A034     
0406 7584 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0407               pane.cmdb.draw.vector:
0408 7586 7F6A             data  vec.22
0409               
0410               
0411               ***************************************************************
0412               * Stub for "cmdb.refresh"
0413               * bank3 vec.24
0414               ********|*****|*********************|**************************
0415               cmdb.refresh:
0416 7588 C820  54         mov   @cmdb.refresh.vector,@trmpvector
     758A 7590     
     758C A034     
0417 758E 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0418               cmdb.refresh.vector:
0419 7590 7F6E             data  vec.24
0420               
0421               
0422               ***************************************************************
0423               * Stub for "cmdb.cmd.clear"
0424               * bank3 vec.25
0425               ********|*****|*********************|**************************
0426               cmdb.cmd.clear:
0427 7592 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7594 759A     
     7596 A034     
0428 7598 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0429               cmdb.cmd.clear.vector:
0430 759A 7F70             data  vec.25
0431               
0432               
0433               ***************************************************************
0434               * Stub for "cmdb.cmdb.getlength"
0435               * bank3 vec.26
0436               ********|*****|*********************|**************************
0437               cmdb.cmd.getlength:
0438 759C C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     759E 75A4     
     75A0 A034     
0439 75A2 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0440               cmdb.cmd.getlength.vector:
0441 75A4 7F72             data  vec.26
0442               
0443               
0444               ***************************************************************
0445               * Stub for "cmdb.cmdb.preset"
0446               * bank3 vec.27
0447               ********|*****|*********************|**************************
0448               cmdb.cmd.preset:
0449 75A6 C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     75A8 75AE     
     75AA A034     
0450 75AC 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0451               cmdb.cmd.preset.vector:
0452 75AE 7F74             data  vec.27
0453               
0454               
0455               ***************************************************************
0456               * Stub for "cmdb.cmdb.set"
0457               * bank3 vec.28
0458               ********|*****|*********************|**************************
0459               cmdb.cmd.set:
0460 75B0 C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     75B2 75B8     
     75B4 A034     
0461 75B6 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0462               cmdb.cmd.set.vector:
0463 75B8 7F76             data  vec.28
0464               
0465               
0466               
0467               ***************************************************************
0468               * Stub for "dialog.hearts.tat"
0469               * bank3 vec.29
0470               ********|*****|*********************|**************************
0471               dialog.hearts.tat:
0472 75BA C820  54         mov   @dialog.hearts.tat.vector,@trmpvector
     75BC 75C2     
     75BE A034     
0473 75C0 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0474               dialog.hearts.tat.vector:
0475 75C2 7F78             data  vec.29
0476               
0477               
0478               
0479               ***************************************************************
0480               * Stub for "tibasic.am.toggle"
0481               * bank3 vec.31
0482               ********|*****|*********************|**************************
0483               tibasic.am.toggle:
0484 75C4 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     75C6 75CC     
     75C8 A034     
0485 75CA 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0486               tibasic.am.toggle.vector:
0487 75CC 7F7C             data  vec.31
0488               
0489               
0490               ***************************************************************
0491               * Stub for "fm.fastmode"
0492               * bank3 vec.32
0493               ********|*****|*********************|**************************
0494               fm.fastmode:
0495 75CE C820  54         mov   @fm.fastmode.vector,@trmpvector
     75D0 75D6     
     75D2 A034     
0496 75D4 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0497               fm.fastmode.vector:
0498 75D6 7F7E             data  vec.32
0499               
0500               
0501               ***************************************************************
0502               * Stub for "cmdb.cfg.fname"
0503               * bank3 vec.33
0504               ********|*****|*********************|**************************
0505               cmdb.cfg.fname:
0506 75D8 C820  54         mov   @cmdb.cfg.fname.vector,@trmpvector
     75DA 75E0     
     75DC A034     
0507 75DE 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0508               cmdb.cfg.fname.vector:
0509 75E0 7F80             data  vec.33
0510               
0511               ***************************************************************
0512               * Stub for "fm.lineterm"
0513               * bank3 vec.34
0514               ********|*****|*********************|**************************
0515               fm.lineterm:
0516 75E2 C820  54         mov   @fm.lineterm.vector,@trmpvector
     75E4 75EA     
     75E6 A034     
0517 75E8 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0518               fm.lineterm.vector:
0519 75EA 7F82             data  vec.34
0520               
0521               
0522               ***************************************************************
0523               * Stub for "dialog"
0524               * bank3 vec.42
0525               ********|*****|*********************|**************************
0526               dialog:
0527 75EC C820  54         mov   @dialog.vector,@trmpvector
     75EE 75F4     
     75F0 A034     
0528 75F2 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0529               dialog.vector:
0530 75F4 7F92             data  vec.42
0531               
0532               
0533               ***************************************************************
0534               * Stub for "error.display"
0535               * bank3 vec.48
0536               ********|*****|*********************|**************************
0537               error.display:
0538 75F6 C820  54         mov   @error.display.vector,@trmpvector
     75F8 75FE     
     75FA A034     
0539 75FC 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0540               error.display.vector:
0541 75FE 7F9E             data  vec.48
0542               
0543               
0544               
0545               ***************************************************************
0546               * Trampoline bank 3 with return
0547               ********|*****|*********************|**************************
0548               _trampoline.bank3.ret:
0549 7600 0649  14         dect  stack
0550 7602 C64B  30         mov   r11,*stack            ; Save return address
0551                       ;------------------------------------------------------
0552                       ; Call routine in specified bank
0553                       ;------------------------------------------------------
0554 7604 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7606 2FCA     
0555 7608 6006                   data bank3.rom        ; | i  p0 = bank address
0556 760A FFFF                   data >ffff            ; | i  p1 = Vector with target address
0557                                                   ; |         (deref @trmpvector)
0558 760C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0559                       ;------------------------------------------------------
0560                       ; Exit
0561                       ;------------------------------------------------------
0562 760E C2F9  30         mov   *stack+,r11           ; Pop r11
0563 7610 045B  20         b     *r11                  ; Return to caller
0564               
0565               
0566               ***************************************************************
0567               * Stub for "fb.ruler.init"
0568               * bank4 vec.2
0569               ********|*****|*********************|**************************
0570               fb.ruler.init:
0571 7612 C820  54         mov   @fb.ruler.init.vector,@trmpvector
     7614 761A     
     7616 A034     
0572 7618 1074  14         jmp   _trampoline.bank4.ret ; Longjump
0573               fb.ruler.init.vector:
0574 761A 7F42             data  vec.2
0575               
0576               
0577               ***************************************************************
0578               * Stub for "fb.colorlines"
0579               * bank4 vec.3
0580               ********|*****|*********************|**************************
0581               fb.colorlines:
0582 761C C820  54         mov   @fb.colorlines.vector,@trmpvector
     761E 7624     
     7620 A034     
0583 7622 106F  14         jmp   _trampoline.bank4.ret ; Longjump
0584               fb.colorlines.vector:
0585 7624 7F44             data  vec.3
0586               
0587               
0588               ***************************************************************
0589               * Stub for "fb.vdpdump"
0590               * bank4 vec.4
0591               ********|*****|*********************|**************************
0592               fb.vdpdump:
0593 7626 C820  54         mov   @fb.vdpdump.vector,@trmpvector
     7628 762E     
     762A A034     
0594 762C 106A  14         jmp   _trampoline.bank4.ret ; Longjump
0595               fb.vdpdump.vector:
0596 762E 7F46             data  vec.4
0597               
0598               
0599               ***************************************************************
0600               * Stub for "fb.hscroll"
0601               * bank4 vec.6
0602               ********|*****|*********************|**************************
0603               fb.hscroll:
0604 7630 C820  54         mov   @fb.hscroll.vector,@trmpvector
     7632 7638     
     7634 A034     
0605 7636 1065  14         jmp   _trampoline.bank4.ret ; Longjump
0606               fb.hscroll.vector:
0607 7638 7F4A             data  vec.6
0608               
0609               
0610               ***************************************************************
0611               * Stub for "fb.restore"
0612               * bank4 vec.7
0613               ********|*****|*********************|**************************
0614               fb.restore:
0615 763A C820  54         mov   @fb.restore.vector,@trmpvector
     763C 7642     
     763E A034     
0616 7640 1060  14         jmp   _trampoline.bank4.ret ; Longjump
0617               fb.restore.vector:
0618 7642 7F4C             data  vec.7
0619               
0620               
0621               ***************************************************************
0622               * Stub for "fb.refresh"
0623               * bank4 vec.8
0624               ********|*****|*********************|**************************
0625               fb.refresh:
0626 7644 C820  54         mov   @fb.refresh.vector,@trmpvector
     7646 764C     
     7648 A034     
0627 764A 105B  14         jmp   _trampoline.bank4.ret ; Longjump
0628               fb.refresh.vector:
0629 764C 7F4E             data  vec.8
0630               
0631               
0632               ***************************************************************
0633               * Stub for "fb.get.nonblank"
0634               * bank4 vec.9
0635               ********|*****|*********************|**************************
0636               fb.get.nonblank:
0637 764E C820  54         mov   @fb.get.nonblank.vector,@trmpvector
     7650 7656     
     7652 A034     
0638 7654 1056  14         jmp   _trampoline.bank4.ret ; Longjump
0639               fb.get.nonblank.vector:
0640 7656 7F50             data  vec.9
0641               
0642               
0643               ***************************************************************
0644               * Stub for "fb.tab.prev"
0645               * bank4 vec.10
0646               ********|*****|*********************|**************************
0647               fb.tab.prev:
0648 7658 C820  54         mov   @fb.tab.prev.vector,@trmpvector
     765A 7660     
     765C A034     
0649 765E 1051  14         jmp   _trampoline.bank4.ret ; Longjump
0650               fb.tab.prev.vector:
0651 7660 7F52             data  vec.10
0652               
0653               
0654               ***************************************************************
0655               * Stub for "fb.tab.next"
0656               * bank4 vec.11
0657               ********|*****|*********************|**************************
0658               fb.tab.next:
0659 7662 C820  54         mov   @fb.tab.next.vector,@trmpvector
     7664 766A     
     7666 A034     
0660 7668 104C  14         jmp   _trampoline.bank4.ret ; Longjump
0661               fb.tab.next.vector:
0662 766A 7F54             data  vec.11
0663               
0664               
0665               ***************************************************************
0666               * Stub for "fb.cursor.up"
0667               * bank4 vec.12
0668               ********|*****|*********************|**************************
0669               fb.cursor.up:
0670 766C C820  54         mov   @fb.cursor.up.vector,@trmpvector
     766E 7674     
     7670 A034     
0671 7672 1047  14         jmp   _trampoline.bank4.ret ; Longjump
0672               fb.cursor.up.vector:
0673 7674 7F56             data  vec.12
0674               
0675               
0676               ***************************************************************
0677               * Stub for "fb.cursor.down"
0678               * bank4 vec.13
0679               ********|*****|*********************|**************************
0680               fb.cursor.down:
0681 7676 C820  54         mov   @fb.cursor.down.vector,@trmpvector
     7678 767E     
     767A A034     
0682 767C 1042  14         jmp   _trampoline.bank4.ret ; Longjump
0683               fb.cursor.down.vector:
0684 767E 7F58             data  vec.13
0685               
0686               
0687               ***************************************************************
0688               * Stub for "fb.cursor.home"
0689               * bank4 vec.14
0690               ********|*****|*********************|**************************
0691               fb.cursor.home:
0692 7680 C820  54         mov   @fb.cursor.home.vector,@trmpvector
     7682 7688     
     7684 A034     
0693 7686 103D  14         jmp   _trampoline.bank4.ret ; Longjump
0694               fb.cursor.home.vector:
0695 7688 7F5A             data  vec.14
0696               
0697               
0698               ***************************************************************
0699               * Stub for "fb.insert.line"
0700               * bank4 vec.15
0701               ********|*****|*********************|**************************
0702               fb.insert.line:
0703 768A C820  54         mov   @fb.insert.line.vector,@trmpvector
     768C 7692     
     768E A034     
0704 7690 1038  14         jmp   _trampoline.bank4.ret ; Longjump
0705               fb.insert.line.vector:
0706 7692 7F5C             data  vec.15
0707               
0708               
0709               ***************************************************************
0710               * Stub for "fb.cursor.top"
0711               * bank4 vec.16
0712               ********|*****|*********************|**************************
0713               fb.cursor.top:
0714 7694 C820  54         mov   @fb.cursor.top.vector,@trmpvector
     7696 769C     
     7698 A034     
0715 769A 1033  14         jmp   _trampoline.bank4.ret ; Longjump
0716               fb.cursor.top.vector:
0717 769C 7F5E             data  vec.16
0718               
0719               
0720               ***************************************************************
0721               * Stub for "fb.cursor.topscr"
0722               * bank4 vec.17
0723               ********|*****|*********************|**************************
0724               fb.cursor.topscr:
0725 769E C820  54         mov   @fb.cursor.topscr.vector,@trmpvector
     76A0 76A6     
     76A2 A034     
0726 76A4 102E  14         jmp   _trampoline.bank4.ret ; Longjump
0727               fb.cursor.topscr.vector:
0728 76A6 7F60             data  vec.17
0729               
0730               
0731               ***************************************************************
0732               * Stub for "fb.cursor.bot"
0733               * bank4 vec.18
0734               ********|*****|*********************|**************************
0735               fb.cursor.bot:
0736 76A8 C820  54         mov   @fb.cursor.bot.vector,@trmpvector
     76AA 76B0     
     76AC A034     
0737 76AE 1029  14         jmp   _trampoline.bank4.ret ; Longjump
0738               fb.cursor.bot.vector:
0739 76B0 7F62             data  vec.18
0740               
0741               
0742               ***************************************************************
0743               * Stub for "fb.cursor.botscr"
0744               * bank4 vec.19
0745               ********|*****|*********************|**************************
0746               fb.cursor.botscr:
0747 76B2 C820  54         mov   @fb.cursor.botscr.vector,@trmpvector
     76B4 76BA     
     76B6 A034     
0748 76B8 1024  14         jmp   _trampoline.bank4.ret ; Longjump
0749               fb.cursor.botscr.vector:
0750 76BA 7F64             data  vec.19
0751               
0752               
0753               ***************************************************************
0754               * Stub for "fb.insert.char"
0755               * bank4 vec.20
0756               ********|*****|*********************|**************************
0757               fb.insert.char:
0758 76BC C820  54         mov   @fb.insert.char.vector,@trmpvector
     76BE 76C4     
     76C0 A034     
0759 76C2 101F  14         jmp   _trampoline.bank4.ret ; Longjump
0760               fb.insert.char.vector:
0761 76C4 7F66             data  vec.20
0762               
0763               
0764               ***************************************************************
0765               * Stub for "fb.replace.char"
0766               * bank4 vec.21
0767               ********|*****|*********************|**************************
0768               fb.replace.char:
0769 76C6 C820  54         mov   @fb.replace.char.vector,@trmpvector
     76C8 76CE     
     76CA A034     
0770 76CC 101A  14         jmp   _trampoline.bank4.ret ; Longjump
0771               fb.replace.char.vector:
0772 76CE 7F68             data  vec.21
0773               
0774               
0775               ***************************************************************
0776               * Stub for "pane.topline"
0777               * bank4 vec.33
0778               ********|*****|*********************|**************************
0779               pane.topline:
0780 76D0 C820  54         mov   @pane.topline.vector,@trmpvector
     76D2 76D8     
     76D4 A034     
0781 76D6 1015  14         jmp   _trampoline.bank4.ret ; Longjump
0782               pane.topline.vector:
0783 76D8 7F80             data  vec.33
0784               
0785               
0786               ***************************************************************
0787               * Stub for "pane.botline"
0788               * bank4 vec.34
0789               ********|*****|*********************|**************************
0790               pane.botline:
0791 76DA C820  54         mov   @pane.botline.vector,@trmpvector
     76DC 76E2     
     76DE A034     
0792 76E0 1010  14         jmp   _trampoline.bank4.ret ; Longjump
0793               pane.botline.vector:
0794 76E2 7F82             data  vec.34
0795               
0796               
0797               ***************************************************************
0798               * Stub for "pane.errline.show"
0799               * bank4 vec.35
0800               ********|*****|*********************|**************************
0801               pane.errline.show:
0802 76E4 C820  54         mov   @pane.errline.show.vector,@trmpvector
     76E6 76EC     
     76E8 A034     
0803 76EA 100B  14         jmp   _trampoline.bank4.ret ; Longjump
0804               pane.errline.show.vector:
0805 76EC 7F84             data  vec.35
0806               
0807               
0808               ***************************************************************
0809               * Stub for "pane.errline.hide"
0810               * bank4 vec.36
0811               ********|*****|*********************|**************************
0812               pane.errline.hide:
0813 76EE C820  54         mov   @pane.errline.hide.vector,@trmpvector
     76F0 76F6     
     76F2 A034     
0814 76F4 1006  14         jmp   _trampoline.bank4.ret ; Longjump
0815               pane.errline.hide.vector:
0816 76F6 7F86             data  vec.36
0817               
0818               
0819               ***************************************************************
0820               * Stub for "pane.errline.drawcolor"
0821               * bank4 vec.37
0822               ********|*****|*********************|**************************
0823               pane.errline.drawcolor:
0824 76F8 C820  54         mov   @pane.errline.drawcolor.vector,@trmpvector
     76FA 7700     
     76FC A034     
0825 76FE 1001  14         jmp   _trampoline.bank4.ret ; Longjump
0826               pane.errline.drawcolor.vector:
0827 7700 7F88             data  vec.37
0828               
0829               
0830               ***************************************************************
0831               * Trampoline bank 4 with return
0832               ********|*****|*********************|**************************
0833               _trampoline.bank4.ret:
0834 7702 0649  14         dect  stack
0835 7704 C64B  30         mov   r11,*stack            ; Save return address
0836                       ;------------------------------------------------------
0837                       ; Call routine in specified bank
0838                       ;------------------------------------------------------
0839 7706 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7708 2FCA     
0840 770A 6008                   data bank4.rom        ; | i  p0 = bank address
0841 770C FFFF                   data >ffff            ; | i  p1 = Vector with target address
0842                                                   ; |         (deref @trmpvector)
0843 770E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0844                       ;------------------------------------------------------
0845                       ; Exit
0846                       ;------------------------------------------------------
0847 7710 C2F9  30         mov   *stack+,r11           ; Pop r11
0848 7712 045B  20         b     *r11                  ; Return to caller
0849               
0850               
0851               
0852               ***************************************************************
0853               * Stub for "edb.clear.sams"
0854               * bank5 vec.1
0855               ********|*****|*********************|**************************
0856               edb.clear.sams:
0857 7714 C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7716 771C     
     7718 A034     
0858 771A 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0859               edb.clear.sams.vector:
0860 771C 7F40             data  vec.1
0861               
0862               
0863               ***************************************************************
0864               * Stub for "edb.block.mark"
0865               * bank5 vec.3
0866               ********|*****|*********************|**************************
0867               edb.block.mark:
0868 771E C820  54         mov   @edb.block.mark.vector,@trmpvector
     7720 7726     
     7722 A034     
0869 7724 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0870               edb.block.mark.vector:
0871 7726 7F44             data  vec.3
0872               
0873               
0874               ***************************************************************
0875               * Stub for "edb.block.mark.m1"
0876               * bank5 vec.4
0877               ********|*****|*********************|**************************
0878               edb.block.mark.m1:
0879 7728 C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     772A 7730     
     772C A034     
0880 772E 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0881               edb.block.mark.m1.vector:
0882 7730 7F46             data  vec.4
0883               
0884               
0885               ***************************************************************
0886               * Stub for "edb.block.mark.m2"
0887               * bank5 vec.5
0888               ********|*****|*********************|**************************
0889               edb.block.mark.m2:
0890 7732 C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7734 773A     
     7736 A034     
0891 7738 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0892               edb.block.mark.m2.vector:
0893 773A 7F48             data  vec.5
0894               
0895               
0896               ***************************************************************
0897               * Stub for "edb.block.clip"
0898               * bank5 vec.6
0899               ********|*****|*********************|**************************
0900               edb.block.clip:
0901 773C C820  54         mov   @edb.block.clip.vector,@trmpvector
     773E 7744     
     7740 A034     
0902 7742 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0903               edb.block.clip.vector:
0904 7744 7F4A             data  vec.6
0905               
0906               
0907               ***************************************************************
0908               * Stub for "edb.block.reset"
0909               * bank5 vec.7
0910               ********|*****|*********************|**************************
0911               edb.block.reset:
0912 7746 C820  54         mov   @edb.block.reset.vector,@trmpvector
     7748 774E     
     774A A034     
0913 774C 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0914               edb.block.reset.vector:
0915 774E 7F4C             data  vec.7
0916               
0917               
0918               ***************************************************************
0919               * Stub for "edb.block.delete"
0920               * bank5 vec.8
0921               ********|*****|*********************|**************************
0922               edb.block.delete:
0923 7750 C820  54         mov   @edb.block.delete.vector,@trmpvector
     7752 7758     
     7754 A034     
0924 7756 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0925               edb.block.delete.vector:
0926 7758 7F4E             data  vec.8
0927               
0928               
0929               ***************************************************************
0930               * Stub for "edb.block.copy"
0931               * bank5 vec.9
0932               ********|*****|*********************|**************************
0933               edb.block.copy:
0934 775A C820  54         mov   @edb.block.copy.vector,@trmpvector
     775C 7762     
     775E A034     
0935 7760 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0936               edb.block.copy.vector:
0937 7762 7F50             data  vec.9
0938               
0939               
0940               ***************************************************************
0941               * Stub for "edb.line.del"
0942               * bank5 vec.10
0943               ********|*****|*********************|**************************
0944               edb.line.del:
0945 7764 C820  54         mov   @edb.line.del.vector,@trmpvector
     7766 776C     
     7768 A034     
0946 776A 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0947               edb.line.del.vector:
0948 776C 7F52             data  vec.10
0949               
0950               
0951               
0952               ***************************************************************
0953               * Trampoline bank 5 with return
0954               ********|*****|*********************|**************************
0955               _trampoline.bank5.ret:
0956 776E 0649  14         dect  stack
0957 7770 C64B  30         mov   r11,*stack            ; Save return address
0958                       ;------------------------------------------------------
0959                       ; Call routine in specified bank
0960                       ;------------------------------------------------------
0961 7772 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7774 2FCA     
0962 7776 600A                   data bank5.rom        ; | i  p0 = bank address
0963 7778 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0964                                                   ; |         (deref @trmpvector)
0965 777A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0966                       ;------------------------------------------------------
0967                       ; Exit
0968                       ;------------------------------------------------------
0969 777C C2F9  30         mov   *stack+,r11           ; Pop r11
0970 777E 045B  20         b     *r11                  ; Return to caller
0971               
0972               
0973               ***************************************************************
0974               * Stub for "vdp.dump.patterns"
0975               * bank6 vec.1
0976               ********|*****|*********************|**************************
0977               vdp.dump.patterns:
0978 7780 C820  54         mov   @vdp.dump.patterns.vector,@trmpvector
     7782 7788     
     7784 A034     
0979 7786 1010  14         jmp   _trampoline.bank6.ret ; Longjump
0980               vdp.dump.patterns.vector:
0981 7788 7F40             data  vec.1
0982               
0983               
0984               ***************************************************************
0985               * Stub for "vdp.dump.font"
0986               * bank6 vec.2
0987               ********|*****|*********************|**************************
0988               vdp.dump.font:
0989 778A C820  54         mov   @vdp.dump.font.vector,@trmpvector
     778C 7792     
     778E A034     
0990 7790 100B  14         jmp   _trampoline.bank6.ret ; Longjump
0991               vdp.dump.font.vector:
0992 7792 7F42             data  vec.2
0993               
0994               
0995               ***************************************************************
0996               * Stub for "vdp.colors.line"
0997               * bank6 vec.3
0998               ********|*****|*********************|**************************
0999               vdp.colors.line:
1000 7794 C820  54         mov   @vdp.colors.line.vector,@trmpvector
     7796 779C     
     7798 A034     
1001 779A 1006  14         jmp   _trampoline.bank6.ret ; Longjump
1002               vdp.colors.line.vector:
1003 779C 7F44             data  vec.3
1004               
1005               
1006               ***************************************************************
1007               * Stub for "tv.set.font"
1008               * bank6 vec.33
1009               ********|*****|*********************|**************************
1010               tv.set.font:
1011 779E C820  54         mov   @tv.set.font.vector,@trmpvector
     77A0 77A6     
     77A2 A034     
1012 77A4 1001  14         jmp   _trampoline.bank6.ret ; Longjump
1013               tv.set.font.vector:
1014 77A6 7F80             data  vec.33
1015               
1016               
1017               ***************************************************************
1018               * Trampoline bank 6 with return
1019               ********|*****|*********************|**************************
1020               _trampoline.bank6.ret:
1021 77A8 0649  14         dect  stack
1022 77AA C64B  30         mov   r11,*stack            ; Save return address
1023                       ;------------------------------------------------------
1024                       ; Call routine in specified bank
1025                       ;------------------------------------------------------
1026 77AC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     77AE 2FCA     
1027 77B0 600C                   data bank6.rom        ; | i  p0 = bank address
1028 77B2 FFFF                   data >ffff            ; | i  p1 = Vector with target address
1029                                                   ; |         (deref @trmpvector)
1030 77B4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1031                       ;------------------------------------------------------
1032                       ; Exit
1033                       ;------------------------------------------------------
1034 77B6 C2F9  30         mov   *stack+,r11           ; Pop r11
1035 77B8 045B  20         b     *r11                  ; Return to caller
1036               
1037               
1038               ***************************************************************
1039               * Stub for "tibasic"
1040               * bank7 vec.10
1041               ********|*****|*********************|**************************
1042               tibasic1:
1043 77BA C820  54         mov   @const.1,@tib.session
     77BC 2002     
     77BE A0B4     
1044 77C0 100F  14         jmp   tibasic
1045               tibasic2:
1046 77C2 C820  54         mov   @const.2,@tib.session
     77C4 2004     
     77C6 A0B4     
1047 77C8 100B  14         jmp   tibasic
1048               tibasic3:
1049 77CA C820  54         mov   @const.3,@tib.session
     77CC 3926     
     77CE A0B4     
1050 77D0 1007  14         jmp   tibasic
1051               tibasic4:
1052 77D2 C820  54         mov   @const.4,@tib.session
     77D4 2006     
     77D6 A0B4     
1053 77D8 1003  14         jmp   tibasic
1054               tibasic5:
1055 77DA C820  54         mov   @const.5,@tib.session
     77DC 3928     
     77DE A0B4     
1056               tibasic:
1057 77E0 0649  14         dect  stack
1058 77E2 C64B  30         mov   r11,*stack            ; Save return address
1059 77E4 0649  14         dect  stack
1060 77E6 C644  30         mov   tmp0,*stack           ; Push tmp0
1061                       ;------------------------------------------------------
1062                       ; Exit early if no TI Basic session
1063                       ;------------------------------------------------------
1064 77E8 C120  34         mov   @tib.session,tmp0     ; Get session ID
     77EA A0B4     
1065 77EC 130A  14         jeq   tibasic.exit          ; Exit early if no session
1066                       ;------------------------------------------------------
1067                       ; Run TI Basic session
1068                       ;------------------------------------------------------
1069 77EE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     77F0 2FCA     
1070 77F2 600E                   data bank7.rom        ; | i  p0 = bank address
1071 77F4 7F52                   data vec.10           ; | i  p1 = Vector with target address
1072 77F6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1073               
1074 77F8 C120  34         mov   @tib.autounpk,tmp0    ; AutoUnpack flag set?
     77FA A0C0     
1075 77FC 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
1076               
1077 77FE 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7800 780C     
1078                       ;------------------------------------------------------
1079                       ; Exit
1080                       ;------------------------------------------------------
1081               tibasic.exit:
1082 7802 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     7804 A31A     
1083 7806 C139  30         mov   *stack+,tmp0          ; Pop tmp0
1084 7808 C2F9  30         mov   *stack+,r11           ; Pop r11
1085 780A 045B  20         b     *r11                  ; Return to caller
1086               
1087               
1088               
1089               ***************************************************************
1090               * Stub for "tibasic.uncrunch"
1091               * bank7 vec.11
1092               ********|*****|*********************|**************************
1093               tibasic.uncrunch:
1094 780C 0649  14         dect  stack
1095 780E C64B  30         mov   r11,*stack            ; Save return address
1096                       ;------------------------------------------------------
1097                       ; Uncrunch TI basic program
1098                       ;------------------------------------------------------
1099 7810 C820  54         mov   @tib.session,@parm1   ; Get current session
     7812 A0B4     
     7814 A006     
1100 7816 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
1101               
1102 7818 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     781A 2FCA     
1103 781C 600E                   data bank7.rom        ; | i  p0 = bank address
1104 781E 7F54                   data vec.11           ; | i  p1 = Vector with target address
1105 7820 6002                   data bankid           ; / i  p2 = Source ROM bank for return
1106                       ;------------------------------------------------------
1107                       ; Exit
1108                       ;------------------------------------------------------
1109               tibasic.uncrunch.exit:
1110 7822 C2F9  30         mov   *stack+,r11           ; Pop r11
1111 7824 045B  20         b     *r11                  ; Return to caller
1112               
1113               
1114               
1115               ***************************************************************
1116               * Stub for "fg99.run"
1117               ********|*****|*********************|**************************
1118               fg99.run.xbgem:
1119 7826 0204  20         li    tmp0,fg99.cart.xbgem  ; Load Extended Basic G.E.M
     7828 3DEC     
1120 782A C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     782C A232     
1121 782E 100F  14         jmp   fg99.run.stub
1122               
1123               fg99.run.rxb:
1124 7830 0204  20         li    tmp0,fg99.cart.rxb    ; Load Rich Extended Basic
     7832 3E00     
1125 7834 C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7836 A232     
1126 7838 100A  14         jmp   fg99.run.stub
1127               
1128               fg99.run.fcmd:
1129 783A 0204  20         li    tmp0,fg99.cart.fcmd   ; Load Force Command
     783C 3DD8     
1130 783E C804  38         mov   tmp0,@tv.fg99.img.ptr ; Set pointer
     7840 A232     
1131 7842 1005  14         jmp   fg99.run.stub
1132               
1133               fg99.run.fbforth:
1134 7844 0204  20         li    tmp0,fg99.cart.fbforth ; Load fbForth
     7846 3E14     
1135 7848 C804  38         mov   tmp0,@tv.fg99.img.ptr  ; Set pointer
     784A A232     
1136 784C 1000  14         jmp   fg99.run.stub
1137               
1138               fg99.run.stub:
1139 784E 0649  14         dect  stack
1140 7850 C64B  30         mov   r11,*stack            ; Save return address
1141                       ;------------------------------------------------------
1142                       ; Run FinalGROM cartridge image
1143                       ;------------------------------------------------------
1144 7852 06A0  32         bl    @fg99.run             ; Run FinalGROM cartridge
     7854 37B2     
1145                                                   ; \ i @tv.fg99.img.ptr = Pointer to image
1146                                                   ; /
1147                       ;------------------------------------------------------
1148                       ; Exit
1149                       ;------------------------------------------------------
1150               fg99.run.stub.exit:
1151 7856 C2F9  30         mov   *stack+,r11           ; Pop r11
1152 7858 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0147                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0026               
0028               ***************************************************************
0029               * Stub for "mem.sams.set.legacy"
0030               * bank7 vec.1
0031               ********|*****|*********************|**************************
0032               mem.sams.set.legacy:
0033 785A 0649  14         dect  stack
0034 785C C64B  30         mov   r11,*stack            ; Save return address
0035                       ;------------------------------------------------------
0036                       ; Dump VDP patterns
0037                       ;------------------------------------------------------
0038 785E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7860 2FCA     
0039 7862 600E                   data bank7.rom        ; | i  p0 = bank address
0040 7864 7F40                   data vec.1            ; | i  p1 = Vector with target address
0041 7866 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0042                       ;------------------------------------------------------
0043                       ; Exit
0044                       ;------------------------------------------------------
0045 7868 C2F9  30         mov   *stack+,r11           ; Pop r11
0046 786A 045B  20         b     *r11                  ; Return to caller
0048               
0049               
0051               ***************************************************************
0052               * Stub for "mem.sams.set.boot"
0053               * bank7 vec.2
0054               ********|*****|*********************|**************************
0055               mem.sams.set.boot:
0056 786C 0649  14         dect  stack
0057 786E C64B  30         mov   r11,*stack            ; Save return address
0058                       ;------------------------------------------------------
0059                       ; Dump VDP patterns
0060                       ;------------------------------------------------------
0061 7870 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7872 2FCA     
0062 7874 600E                   data bank7.rom        ; | i  p0 = bank address
0063 7876 7F42                   data vec.2            ; | i  p1 = Vector with target address
0064 7878 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0065                       ;------------------------------------------------------
0066                       ; Exit
0067                       ;------------------------------------------------------
0068 787A C2F9  30         mov   *stack+,r11           ; Pop r11
0069 787C 045B  20         b     *r11                  ; Return to caller
0071               
0072               
0074               ***************************************************************
0075               * Stub for "mem.sams.set.stevie"
0076               * bank7 vec.3
0077               ********|*****|*********************|**************************
0078               mem.sams.set.stevie:
0079 787E 0649  14         dect  stack
0080 7880 C64B  30         mov   r11,*stack            ; Save return address
0081                       ;------------------------------------------------------
0082                       ; Dump VDP patterns
0083                       ;------------------------------------------------------
0084 7882 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7884 2FCA     
0085 7886 600E                   data bank7.rom        ; | i  p0 = bank address
0086 7888 7F44                   data vec.3            ; | i  p1 = Vector with target address
0087 788A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0088                       ;------------------------------------------------------
0089                       ; Exit
0090                       ;------------------------------------------------------
0091 788C C2F9  30         mov   *stack+,r11           ; Pop r11
0092 788E 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0097               ***************************************************************
0098               * Stub for "magic.set"
0099               * bank7 vec.20
0100               ********|*****|*********************|**************************
0101               magic.set:
0102 7890 0649  14         dect  stack
0103 7892 C64B  30         mov   r11,*stack            ; Save return address
0104                       ;------------------------------------------------------
0105                       ; Dump VDP patterns
0106                       ;------------------------------------------------------
0107 7894 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7896 2FCA     
0108 7898 600E                   data bank7.rom        ; | i  p0 = bank address
0109 789A 7F66                   data vec.20           ; | i  p1 = Vector with target address
0110 789C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0111                       ;------------------------------------------------------
0112                       ; Exit
0113                       ;------------------------------------------------------
0114 789E C2F9  30         mov   *stack+,r11           ; Pop r11
0115 78A0 045B  20         b     *r11                  ; Return to caller
0117               
0118               
0120               ***************************************************************
0121               * Stub for "magic.clear"
0122               * bank7 vec.21
0123               ********|*****|*********************|**************************
0124               magic.clear:
0125 78A2 0649  14         dect  stack
0126 78A4 C64B  30         mov   r11,*stack            ; Save return address
0127                       ;------------------------------------------------------
0128                       ; Dump VDP patterns
0129                       ;------------------------------------------------------
0130 78A6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78A8 2FCA     
0131 78AA 600E                   data bank7.rom        ; | i  p0 = bank address
0132 78AC 7F68                   data vec.21           ; | i  p1 = Vector with target address
0133 78AE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0134                       ;------------------------------------------------------
0135                       ; Exit
0136                       ;------------------------------------------------------
0137 78B0 C2F9  30         mov   *stack+,r11           ; Pop r11
0138 78B2 045B  20         b     *r11                  ; Return to caller
0140               
0141               
0143               ***************************************************************
0144               * Stub for "magic.check"
0145               * bank7 vec.22
0146               ********|*****|*********************|**************************
0147               magic.check:
0148 78B4 0649  14         dect  stack
0149 78B6 C64B  30         mov   r11,*stack            ; Save return address
0150                       ;------------------------------------------------------
0151                       ; Dump VDP patterns
0152                       ;------------------------------------------------------
0153 78B8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     78BA 2FCA     
0154 78BC 600E                   data bank7.rom        ; | i  p0 = bank address
0155 78BE 7F6A                   data vec.22           ; | i  p1 = Vector with target address
0156 78C0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0157                       ;------------------------------------------------------
0158                       ; Exit
0159                       ;------------------------------------------------------
0160 78C2 C2F9  30         mov   *stack+,r11           ; Pop r11
0161 78C4 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0148                       ;-----------------------------------------------------------------------
0149                       ; Program data
0150                       ;-----------------------------------------------------------------------
0151                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 78C6 0D00             byte  key.enter, pane.focus.fb
0012 78C8 6648             data  edkey.action.enter
0013               
0014 78CA 0800             byte  key.fctn.s, pane.focus.fb
0015 78CC 6264             data  edkey.action.left
0016               
0017 78CE 0900             byte  key.fctn.d, pane.focus.fb
0018 78D0 627E             data  edkey.action.right
0019               
0020 78D2 0B00             byte  key.fctn.e, pane.focus.fb
0021 78D4 6484             data  edkey.action.up
0022               
0023 78D6 0A00             byte  key.fctn.x, pane.focus.fb
0024 78D8 648C             data  edkey.action.down
0025               
0026 78DA BF00             byte  key.fctn.h, pane.focus.fb
0027 78DC 629A             data  edkey.action.home
0028               
0029 78DE C000             byte  key.fctn.j, pane.focus.fb
0030 78E0 62C4             data  edkey.action.pword
0031               
0032 78E2 C100             byte  key.fctn.k, pane.focus.fb
0033 78E4 6316             data  edkey.action.nword
0034               
0035 78E6 C200             byte  key.fctn.l, pane.focus.fb
0036 78E8 62A2             data  edkey.action.end
0037               
0038 78EA 0200             byte  key.fctn.4, pane.focus.fb
0039 78EC 6424             data  edkey.action.npage
0040               
0041 78EE 0E00             byte  key.fctn.5, pane.focus.fb
0042 78F0 63AA             data  edkey.action.scroll.right
0043               
0044 78F2 0C00             byte  key.fctn.6, pane.focus.fb
0045 78F4 63E2             data  edkey.action.ppage
0046               
0047 78F6 B700             byte  key.ctrl.7, pane.focus.fb
0048 78F8 694E             data  edkey.action.fb.tab.prev
0049               
0050 78FA 0100             byte  key.fctn.7, pane.focus.fb
0051 78FC 695C             data  edkey.action.fb.tab.next
0052               
0053 78FE 8500             byte  key.ctrl.e, pane.focus.fb
0054 7900 63E2             data  edkey.action.ppage
0055               
0056 7902 8700             byte  key.ctrl.g, pane.focus.fb
0057 7904 751A             data  dialog.goto
0058               
0059 7906 9800             byte  key.ctrl.x, pane.focus.fb
0060 7908 6424             data  edkey.action.npage
0061               
0062 790A 7F00             byte  key.fctn.v, pane.focus.fb
0063 790C 646C             data  edkey.action.topscr
0064               
0065 790E BE00             byte  key.fctn.b, pane.focus.fb
0066 7910 647C             data  edkey.action.botscr
0067               
0068 7912 9600             byte  key.ctrl.v, pane.focus.fb
0069 7914 6464             data  edkey.action.top
0070               
0071 7916 8200             byte  key.ctrl.b, pane.focus.fb
0072 7918 6474             data  edkey.action.bot
0073                       ;-------------------------------------------------------
0074                       ; Modifier keys - Delete
0075                       ;-------------------------------------------------------
0076 791A 0300             byte  key.fctn.1, pane.focus.fb
0077 791C 650C             data  edkey.action.del_char
0078               
0079 791E 0700             byte  key.fctn.3, pane.focus.fb
0080 7920 65BE             data  edkey.action.del_line
0081               
0082 7922 8C00             byte  key.ctrl.l, pane.focus.fb
0083 7924 658A             data  edkey.action.del_eol
0084                       ;-------------------------------------------------------
0085                       ; Modifier keys - Insert
0086                       ;-------------------------------------------------------
0087 7926 0400             byte  key.fctn.2, pane.focus.fb
0088 7928 6620             data  edkey.action.ins_char.ws
0089               
0090 792A B900             byte  key.fctn.dot, pane.focus.fb
0091 792C 66D4             data  edkey.action.ins_onoff
0092               
0093 792E 0600             byte  key.fctn.8, pane.focus.fb
0094 7930 6630             data  edkey.action.ins_line
0095                       ;-------------------------------------------------------
0096                       ; Block marking/modifier
0097                       ;-------------------------------------------------------
0098 7932 F000             byte  key.ctrl.space, pane.focus.fb
0099 7934 6870             data  edkey.action.block.mark
0100               
0101 7936 8300             byte  key.ctrl.c, pane.focus.fb
0102 7938 6768             data  edkey.action.copyblock_or_clipboard
0103               
0104 793A 8400             byte  key.ctrl.d, pane.focus.fb
0105 793C 68D0             data  edkey.action.block.delete
0106               
0107 793E 8D00             byte  key.ctrl.m, pane.focus.fb
0108 7940 68FE             data  edkey.action.block.move
0109               
0110 7942 8700             byte  key.ctrl.g, pane.focus.fb
0111 7944 6934             data  edkey.action.block.goto.m1
0112                       ;-------------------------------------------------------
0113                       ; Clipboards
0114                       ;-------------------------------------------------------
0115 7946 B100             byte  key.ctrl.1, pane.focus.fb
0116 7948 696A             data  edkey.action.fb.clip.save.1
0117               
0118 794A B200             byte  key.ctrl.2, pane.focus.fb
0119 794C 6974             data  edkey.action.fb.clip.save.2
0120               
0121 794E B300             byte  key.ctrl.3, pane.focus.fb
0122 7950 697E             data  edkey.action.fb.clip.save.3
0123                       ;-------------------------------------------------------
0124                       ; Other action keys
0125                       ;-------------------------------------------------------
0126 7952 0500             byte  key.fctn.plus, pane.focus.fb
0127 7954 675A             data  edkey.action.quit
0128               
0129 7956 B500             byte  key.ctrl.5, pane.focus.fb
0130 7958 6376             data  edkey.action.scroll.left
0131               
0132 795A 9100             byte  key.ctrl.q, pane.focus.fb
0133 795C 675A             data  edkey.action.quit
0134               
0135 795E 9200             byte  key.ctrl.r, pane.focus.fb
0136 7960 671A             data  edkey.action.toggle.ruler
0137               
0138 7962 9A00             byte  key.ctrl.z, pane.focus.fb
0139 7964 706A             data  pane.colorscheme.cycle
0140               
0141 7966 8000             byte  key.ctrl.comma, pane.focus.fb
0142 7968 6778             data  edkey.action.fb.fname.dec.load
0143               
0144 796A 9B00             byte  key.ctrl.dot, pane.focus.fb
0145 796C 678A             data  edkey.action.fb.fname.inc.load
0146               
0147 796E BB00             byte  key.ctrl.slash, pane.focus.fb
0148 7970 7506             data  dialog.basic
0149               
0150 7972 BC00             byte  key.fctn.0, pane.focus.fb
0151 7974 77E0             data  tibasic
0152               
0153 7976 B000             byte  key.ctrl.0, pane.focus.fb
0154 7978 6848             data  edkey.action.fb.load.mc
0155                       ;-------------------------------------------------------
0156                       ; Dialog keys
0157                       ;-------------------------------------------------------
0158 797A 8100             byte  key.ctrl.a, pane.focus.fb
0159 797C 74F2             data  dialog.append
0160               
0161 797E 8800             byte  key.ctrl.h, pane.focus.fb
0162 7980 748A             data  dialog.help
0163               
0164 7982 8600             byte  key.ctrl.f, pane.focus.fb
0165 7984 74BC             data  dialog.file
0166               
0167 7986 8900             byte  key.ctrl.i, pane.focus.fb
0168 7988 74A8             data  dialog.insert
0169               
0170 798A 9300             byte  key.ctrl.s, pane.focus.fb
0171 798C 749E             data  dialog.save
0172               
0173 798E 8F00             byte  key.ctrl.o, pane.focus.fb
0174 7990 7494             data  dialog.load
0175               
0176 7992 9500             byte  key.ctrl.u, pane.focus.fb
0177 7994 7510             data  dialog.shortcuts
0178               
0179 7996 9000             byte  key.ctrl.p, pane.focus.fb
0180 7998 74B2             data  dialog.print
0181               
0182                       ;
0183                       ; FCTN-9 has multiple purposes, if block mode is on
0184                       ; reset block, otherwise show dialog "Main Menu".
0185                       ;
0186 799A 0F00             byte  key.fctn.9, pane.focus.fb
0187 799C 7538             data  dialog.menu
0188                       ;-------------------------------------------------------
0189                       ; End of list
0190                       ;-------------------------------------------------------
0191 799E FFFF             data  EOL                           ; EOL
0192               
0193               
0194               *---------------------------------------------------------------
0195               * Action keys mapping table: Command Buffer (CMDB)
0196               *---------------------------------------------------------------
0197               keymap_actions.cmdb:
0198                       ;-------------------------------------------------------
0199                       ; Dialog: Main Menu
0200                       ;-------------------------------------------------------
0201 79A0 4664             byte  key.uc.f, id.dialog.menu
0202 79A2 74BC             data  dialog.file
0203               
0204 79A4 4264             byte  key.uc.b, id.dialog.menu
0205 79A6 7506             data  dialog.basic
0206               
0207 79A8 4364             byte  key.uc.c, id.dialog.menu
0208 79AA 74FC             data  dialog.cartridge
0209               
0210 79AC 4F64             byte  key.uc.o, id.dialog.menu
0211 79AE 74E8             data  dialog.config
0212               
0213 79B0 5364             byte  key.uc.s, id.dialog.menu
0214 79B2 7510             data  dialog.shortcuts
0215               
0216 79B4 4864             byte  key.uc.h, id.dialog.menu
0217 79B6 748A             data  dialog.help
0218               
0219 79B8 5164             byte  key.uc.q, id.dialog.menu
0220 79BA 675A             data  edkey.action.quit
0221               
0222 79BC 0F64             byte  key.fctn.9, id.dialog.menu
0223 79BE 6DEC             data  edkey.action.cmdb.close.dialog
0224                       ;-------------------------------------------------------
0225                       ; Dialog: File
0226                       ;-------------------------------------------------------
0227 79C0 4E69             byte  key.uc.n, id.dialog.file
0228 79C2 6AA6             data  edkey.action.cmdb.file.new
0229               
0230 79C4 5369             byte  key.uc.s, id.dialog.file
0231 79C6 749E             data  dialog.save
0232               
0233 79C8 4F69             byte  key.uc.o, id.dialog.file
0234 79CA 7494             data  dialog.load
0235               
0236 79CC 4969             byte  key.uc.i, id.dialog.file
0237 79CE 74A8             data  dialog.insert
0238               
0239 79D0 4169             byte  key.uc.a, id.dialog.file
0240 79D2 74F2             data  dialog.append
0241               
0242 79D4 5069             byte  key.uc.p, id.dialog.file
0243 79D6 74B2             data  dialog.print
0244                       ;-------------------------------------------------------
0245                       ; Dialog: Open file
0246                       ;-------------------------------------------------------
0247 79D8 0E0A             byte  key.fctn.5, id.dialog.load
0248 79DA 6DAA             data  edkey.action.cmdb.fastmode.toggle
0249               
0250 79DC 0D0A             byte  key.enter, id.dialog.load
0251 79DE 6ACC             data  edkey.action.cmdb.load
0252                       ;-------------------------------------------------------
0253                       ; Dialog: Insert file at line ...
0254                       ;-------------------------------------------------------
0255 79E0 0E0D             byte  key.fctn.5, id.dialog.insert
0256 79E2 6DAA             data  edkey.action.cmdb.fastmode.toggle
0257               
0258 79E4 0D0D             byte  key.enter, id.dialog.insert
0259 79E6 6B36             data  edkey.action.cmdb.insert
0260                       ;-------------------------------------------------------
0261                       ; Dialog: Append file
0262                       ;-------------------------------------------------------
0263 79E8 0E0E             byte  key.fctn.5, id.dialog.append
0264 79EA 6DAA             data  edkey.action.cmdb.fastmode.toggle
0265               
0266 79EC 0D0E             byte  key.enter, id.dialog.append
0267 79EE 6BBC             data  edkey.action.cmdb.append
0268                       ;-------------------------------------------------------
0269                       ; Dialog: Copy clipboard to line ...
0270                       ;-------------------------------------------------------
0271 79F0 0E67             byte  key.fctn.5, id.dialog.clipboard
0272 79F2 6DAA             data  edkey.action.cmdb.fastmode.toggle
0273               
0274 79F4 0167             byte  key.fctn.7, id.dialog.clipboard
0275 79F6 74DE             data  dialog.clipdev
0276               
0277 79F8 3167             byte  key.num.1, id.dialog.clipboard
0278 79FA 6C34             data  edkey.action.cmdb.clip.1
0279               
0280 79FC 3267             byte  key.num.2, id.dialog.clipboard
0281 79FE 6C3A             data  edkey.action.cmdb.clip.2
0282               
0283 7A00 3367             byte  key.num.3, id.dialog.clipboard
0284 7A02 6C40             data  edkey.action.cmdb.clip.3
0285               
0286 7A04 3467             byte  key.num.4, id.dialog.clipboard
0287 7A06 6C46             data  edkey.action.cmdb.clip.4
0288               
0289 7A08 3567             byte  key.num.5, id.dialog.clipboard
0290 7A0A 6C4C             data  edkey.action.cmdb.clip.5
0291                       ;-------------------------------------------------------
0292                       ; Dialog: Configure
0293                       ;-------------------------------------------------------
0294 7A0C 436C             byte  key.uc.c, id.dialog.cfg
0295 7A0E 74DE             data  dialog.clipdev
0296               
0297 7A10 466C             byte  key.uc.f, id.dialog.cfg
0298 7A12 7524             data  dialog.font
0299               
0300 7A14 4D6C             byte  key.uc.m, id.dialog.cfg
0301 7A16 752E             data  dialog.cfg.mc
0302                       ;-------------------------------------------------------
0303                       ; Dialog: Configure clipboard
0304                       ;-------------------------------------------------------
0305 7A18 0D11             byte  key.enter, id.dialog.cfg.clip
0306 7A1A 6A5E             data  edkey.action.cmdb.cfg.clip
0307                       ;-------------------------------------------------------
0308                       ; Dialog: Configure font
0309                       ;-------------------------------------------------------
0310 7A1C 316E             byte  key.num.1, id.dialog.font
0311 7A1E 6E82             data  edkey.action.cmdb.font1
0312               
0313 7A20 326E             byte  key.num.2, id.dialog.font
0314 7A22 6E86             data  edkey.action.cmdb.font2
0315               
0316 7A24 336E             byte  key.num.3, id.dialog.font
0317 7A26 6E8C             data  edkey.action.cmdb.font3
0318               
0319 7A28 346E             byte  key.num.4, id.dialog.font
0320 7A2A 6E92             data  edkey.action.cmdb.font4
0321               
0322 7A2C 356E             byte  key.num.5, id.dialog.font
0323 7A2E 6E98             data  edkey.action.cmdb.font5
0324                       ;-------------------------------------------------------
0325                       ; Dialog: Configure Master Catalog
0326                       ;-------------------------------------------------------
0327 7A30 0D12             byte  key.enter, id.dialog.cfg.mc
0328 7A32 6A82             data  edkey.action.cmdb.cfg.mc
0329                       ;-------------------------------------------------------
0330                       ; Dialog: Save file
0331                       ;-------------------------------------------------------
0332 7A34 0D0B             byte  key.enter, id.dialog.save
0333 7A36 6C80             data  edkey.action.cmdb.save
0334               
0335 7A38 0D0C             byte  key.enter, id.dialog.saveblock
0336 7A3A 6C80             data  edkey.action.cmdb.save
0337               
0338 7A3C 0C0B             byte  key.fctn.6, id.dialog.save
0339 7A3E 6DB6             data  edkey.action.cmdb.lineterm.toggle
0340               
0341 7A40 0C0C             byte  key.fctn.6, id.dialog.saveblock
0342 7A42 6DB6             data  edkey.action.cmdb.lineterm.toggle
0343                       ;-------------------------------------------------------
0344                       ; Dialog: Print file
0345                       ;-------------------------------------------------------
0346 7A44 0D0F             byte  key.enter, id.dialog.print
0347 7A46 6D00             data  edkey.action.cmdb.print
0348               
0349 7A48 0D10             byte  key.enter, id.dialog.printblock
0350 7A4A 6D00             data  edkey.action.cmdb.print
0351               
0352 7A4C 0C0F             byte  key.fctn.6, id.dialog.print
0353 7A4E 6DB6             data  edkey.action.cmdb.lineterm.toggle
0354               
0355 7A50 0C10             byte  key.fctn.6, id.dialog.printblock
0356 7A52 6DB6             data  edkey.action.cmdb.lineterm.toggle
0357                       ;-------------------------------------------------------
0358                       ; Dialog: Unsaved changes
0359                       ;-------------------------------------------------------
0360 7A54 0C65             byte  key.fctn.6, id.dialog.unsaved
0361 7A56 6D80             data  edkey.action.cmdb.proceed
0362               
0363 7A58 2065             byte  key.space, id.dialog.unsaved
0364 7A5A 6D80             data  edkey.action.cmdb.proceed
0365               
0366 7A5C 0D65             byte  key.enter, id.dialog.unsaved
0367 7A5E 749E             data  dialog.save
0368                       ;-------------------------------------------------------
0369                       ; Dialog: Cartridge
0370                       ;-------------------------------------------------------
0371 7A60 586A             byte  key.uc.x, id.dialog.cartridge
0372 7A62 7826             data  fg99.run.xbgem
0373               
0374 7A64 526A             byte  key.uc.r, id.dialog.cartridge
0375 7A66 7830             data  fg99.run.rxb
0376               
0377 7A68 436A             byte  key.uc.c, id.dialog.cartridge
0378 7A6A 783A             data  fg99.run.fcmd
0379               
0380 7A6C 466A             byte  key.uc.f, id.dialog.cartridge
0381 7A6E 7844             data  fg99.run.fbforth
0382                       ;-------------------------------------------------------
0383                       ; Dialog: Basic
0384                       ;-------------------------------------------------------
0385 7A70 316B             byte  key.num.1, id.dialog.basic
0386 7A72 77BA             data  tibasic1
0387               
0388 7A74 326B             byte  key.num.2, id.dialog.basic
0389 7A76 77C2             data  tibasic2
0390               
0391 7A78 336B             byte  key.num.3, id.dialog.basic
0392 7A7A 77CA             data  tibasic3
0393               
0394 7A7C 346B             byte  key.num.4, id.dialog.basic
0395 7A7E 77D2             data  tibasic4
0396               
0397 7A80 356B             byte  key.num.5, id.dialog.basic
0398 7A82 77DA             data  tibasic5
0399               
0400 7A84 0E6B             byte  key.fctn.5, id.dialog.basic
0401 7A86 6DC2             data  edkey.action.cmdb.am.toggle
0402               
0403 7A88 206B             byte  key.space, id.dialog.basic
0404 7A8A 780C             data  tibasic.uncrunch
0405                       ;-------------------------------------------------------
0406                       ; Dialog: Shortcuts
0407                       ;-------------------------------------------------------
0408 7A8C 436F             byte  key.uc.c, id.dialog.shortcuts
0409 7A8E 706A             data  pane.colorscheme.cycle
0410               
0411 7A90 526F             byte  key.uc.r, id.dialog.shortcuts
0412 7A92 671A             data  edkey.action.toggle.ruler
0413               
0414 7A94 416F             byte  key.uc.a, id.dialog.shortcuts
0415 7A96 6DF4             data  edkey.action.cmdb.autoinsert
0416               
0417 7A98 316F             byte  key.num.1, id.dialog.shortcuts
0418 7A9A 6878             data  edkey.action.block.m1
0419               
0420 7A9C 326F             byte  key.num.2, id.dialog.shortcuts
0421 7A9E 6880             data  edkey.action.block.m2
0422               
0423 7AA0 476F             byte  key.uc.g, id.dialog.shortcuts
0424 7AA2 751A             data  dialog.goto
0425               
0426 7AA4 4D6F             byte  key.uc.m, id.dialog.shortcuts
0427 7AA6 6848             data  edkey.action.fb.load.mc
0428                       ;-------------------------------------------------------
0429                       ; Dialog: Goto
0430                       ;-------------------------------------------------------
0431 7AA8 0D13             byte  key.enter, id.dialog.goto
0432 7AAA 6E2C             data  edkey.action.cmdb.goto
0433                       ;-------------------------------------------------------
0434                       ; Dialog: Help
0435                       ;-------------------------------------------------------
0436 7AAC 2068             byte  key.space, id.dialog.help
0437 7AAE 7476             data  dialog.help.next
0438               
0439 7AB0 0F68             byte  key.fctn.9, id.dialog.help
0440 7AB2 6DD6             data  edkey.action.cmdb.close.about
0441               
0442 7AB4 0D68             byte  key.enter, id.dialog.help
0443 7AB6 6DD6             data  edkey.action.cmdb.close.about
0444                       ;-------------------------------------------------------
0445                       ; Movement keys
0446                       ;-------------------------------------------------------
0447 7AB8 0801             byte  key.fctn.s, pane.focus.cmdb
0448 7ABA 699E             data  edkey.action.cmdb.left
0449               
0450 7ABC 0901             byte  key.fctn.d, pane.focus.cmdb
0451 7ABE 69B0             data  edkey.action.cmdb.right
0452               
0453 7AC0 BF01             byte  key.fctn.h, pane.focus.cmdb
0454 7AC2 69C8             data  edkey.action.cmdb.home
0455               
0456 7AC4 C201             byte  key.fctn.l, pane.focus.cmdb
0457 7AC6 69DC             data  edkey.action.cmdb.end
0458                       ;-------------------------------------------------------
0459                       ; Modifier keys
0460                       ;-------------------------------------------------------
0461 7AC8 0701             byte  key.fctn.3, pane.focus.cmdb
0462 7ACA 69F2             data  edkey.action.cmdb.clear
0463                       ;-------------------------------------------------------
0464                       ; Other action keys
0465                       ;-------------------------------------------------------
0466 7ACC 0F01             byte  key.fctn.9, pane.focus.cmdb
0467 7ACE 7538             data  dialog.menu
0468               
0469 7AD0 0501             byte  key.fctn.plus, pane.focus.cmdb
0470 7AD2 675A             data  edkey.action.quit
0471               
0472 7AD4 8101             byte  key.ctrl.a, pane.focus.cmdb
0473 7AD6 6DCE             data  edkey.action.cmdb.preset
0474               
0475 7AD8 8201             byte  key.ctrl.b, pane.focus.cmdb
0476 7ADA 6DCE             data  edkey.action.cmdb.preset
0477               
0478 7ADC 8301             byte  key.ctrl.c, pane.focus.cmdb
0479 7ADE 6DCE             data  edkey.action.cmdb.preset
0480               
0481 7AE0 9A01             byte  key.ctrl.z, pane.focus.cmdb
0482 7AE2 706A             data  pane.colorscheme.cycle
0483               
0484 7AE4 B001             byte  key.ctrl.0, pane.focus.cmdb
0485 7AE6 6848             data  edkey.action.fb.load.mc
0486                       ;------------------------------------------------------
0487                       ; End of list
0488                       ;-------------------------------------------------------
0489 7AE8 FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0152                       ;-----------------------------------------------------------------------
0153                       ; Bank full check
0154                       ;-----------------------------------------------------------------------
0158                       ;-----------------------------------------------------------------------
0159                       ; Show ROM bank in CPU crash screen
0160                       ;-----------------------------------------------------------------------
0161                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2442     
0010 7F04 0314                   byte 3,20
0011 7F06 7F38                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b1.asm
0162                       ;-----------------------------------------------------------------------
0163                       ; Table for VDP modes
0164                       ;-----------------------------------------------------------------------
0165                       copy  "data.vdpmodes.asm"   ; Table for VDP modes
     **** ****     > data.vdpmodes.asm
0001               * FILE......: data.vdp.modes.asm
0002               * Purpose...: VDP modes tables
0003               
0004                           aorg bankx.vdptab
0005               
0006               ; ====================================================================
0007               ; Keep the tables in sequence, or change offsets in equates.f18a.*.asm
0008               ; ====================================================================
0009               
0010               ***************************************************************
0011               * Textmode (80 columns, 30 rows) - F18A
0012               *--------------------------------------------------------------
0013               *
0014               * ; VDP#0 Control bits
0015               * ;      bit 6=0: M3 | Graphics 1 mode
0016               * ;      bit 7=0: Disable external VDP input
0017               * ; VDP#1 Control bits
0018               * ;      bit 0=1: 16K selection
0019               * ;      bit 1=1: Enable display
0020               * ;      bit 2=1: Enable VDP interrupt
0021               * ;      bit 3=1: M1 \ TEXT MODE
0022               * ;      bit 4=0: M2 /
0023               * ;      bit 5=0: reserved
0024               * ;      bit 6=0: 8x8 sprites
0025               * ;      bit 7=0: Sprite magnification (1x)
0026               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0027               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0028               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0029               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0030               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0031               * ; VDP#7 Set foreground/background color
0032               ***************************************************************
0033               stevie.80x30:
0034 7F10 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     7F12 003F     
     7F14 0243     
     7F16 05F4     
     7F18 0050     
0035               
0036               
0037               ***************************************************************
0038               * Textmode (80 columns, 60 rows) - F18A
0039               *--------------------------------------------------------------
0040               *
0041               * ; VDP#0 Control bits
0042               * ;      bit 6=0: M3 | Graphics 1 mode
0043               * ;      bit 7=0: Disable external VDP input
0044               * ; VDP#1 Control bits
0045               * ;      bit 0=1: 16K selection
0046               * ;      bit 1=1: Enable display
0047               * ;      bit 2=1: Enable VDP interrupt
0048               * ;      bit 3=1: M1 \ TEXT MODE
0049               * ;      bit 4=0: M2 /
0050               * ;      bit 5=0: reserved
0051               * ;      bit 6=0: 8x8 sprites
0052               * ;      bit 7=0: Sprite magnification (1x)
0053               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >12c0)
0054               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040) - not used!
0055               * ; VDP#4 PDT (Pattern descriptor table) at >3000  (>06 * >800)
0056               * ; VDP#5 SAT (sprite attribute list)    at >3A00  (>74 * >080)
0057               * ; VDP#6 SPT (Sprite pattern table)     at >3800  (>07 * >800)
0058               * ; VDP#7 Set foreground/background color
0059               ***************************************************************
0060               stevie.80x60:
0061 7F1A 04F0             byte  >04,>f0,>00,>3f,>06,>74,>07,SPFCLR,0,80
     7F1C 003F     
     7F1E 0674     
     7F20 07F4     
     7F22 0050     
0062               
0063               
0064               
0065               ***************************************************************
0066               * TI Basic mode (32 columns/24 rows)
0067               *--------------------------------------------------------------
0068               tibasic.32x24:
0069 7F24 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F26 000C     
     7F28 0006     
     7F2A 0007     
     7F2C 0020     
0070               *
0071               * ; VDP#0 Control bits
0072               * ;      bit 6=0: M3 | Graphics 1 mode
0073               * ;      bit 7=0: Disable external VDP input
0074               * ; VDP#1 Control bits
0075               * ;      bit 0=1: 16K selection
0076               * ;      bit 1=1: Enable display
0077               * ;      bit 2=1: Enable VDP interrupt
0078               * ;      bit 3=0: M1 \ Graphics 1 mode
0079               * ;      bit 4=0: M2 /
0080               * ;      bit 5=0: reserved
0081               * ;      bit 6=1: 16x16 sprites
0082               * ;      bit 7=0: Sprite magnification (1x)
0083               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0084               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0085               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0086               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0087               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0088               * ; VDP#7 Set screen background color
0089               
0090               
0091               
0092               
0093               
0094               
0095               ***************************************************************
0096               * TI Basic mode (32 columns/30 rows) - F18A
0097               *--------------------------------------------------------------
0098               tibasic.32x30:
0099 7F2E 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     7F30 000C     
     7F32 0006     
     7F34 0007     
     7F36 0020     
0100               *
0101               * ; VDP#0 Control bits
0102               * ;      bit 6=0: M3 | Graphics 1 mode
0103               * ;      bit 7=0: Disable external VDP input
0104               * ; VDP#1 Control bits
0105               * ;      bit 0=1: 16K selection
0106               * ;      bit 1=1: Enable display
0107               * ;      bit 2=1: Enable VDP interrupt
0108               * ;      bit 3=0: M1 \ Graphics 1 mode
0109               * ;      bit 4=0: M2 /
0110               * ;      bit 5=0: reserved
0111               * ;      bit 6=1: 16x16 sprites
0112               * ;      bit 7=0: Sprite magnification (1x)
0113               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0114               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0115               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0116               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0117               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0118               * ; VDP#7 Set screen background color
0119               * ;
0120               * ; The table by itself is not sufficient for turning on 30 rows
0121               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0122               * ; value >40.
                   < stevie_b1.asm
0166                       ;-----------------------------------------------------------------------
0167                       ; Vector table
0168                       ;-----------------------------------------------------------------------
0169                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F38 0552             stri 'ROM#1'
     7F3A 4F4D     
     7F3C 2331     
0009               *--------------------------------------------------------------
0010               * ROM 1: Vectors 1-32
0011               *--------------------------------------------------------------
0012                       aorg  bankx.vectab
0013 7F40 610C     vec.1   data  mem.sams.setup.stevie ;
0014 7F42 2026     vec.2   data  cpu.crash             ;
0015 7F44 2026     vec.3   data  cpu.crash             ;
0016 7F46 2026     vec.4   data  cpu.crash             ;
0017 7F48 2026     vec.5   data  cpu.crash             ;
0018 7F4A 2026     vec.6   data  cpu.crash             ;
0019 7F4C 2026     vec.7   data  cpu.crash             ;
0020 7F4E 2026     vec.8   data  cpu.crash             ;
0021 7F50 2026     vec.9   data  cpu.crash             ;
0022 7F52 6EBE     vec.10  data  edb.line.pack.fb      ;
0023 7F54 6FB6     vec.11  data  edb.line.unpack.fb    ;
0024 7F56 7714     vec.12  data  edb.clear.sams        ;
0025 7F58 2026     vec.13  data  cpu.crash             ;
0026 7F5A 2026     vec.14  data  cpu.crash             ;
0027 7F5C 6A4C     vec.15  data  edkey.action.cmdb.show
0028 7F5E 2026     vec.16  data  cpu.crash             ;
0029 7F60 2026     vec.17  data  cpu.crash             ;
0030 7F62 6EAA     vec.18  data  cmdb.dialog.close     ;
0031 7F64 7592     vec.19  data  cmdb.cmd.clear        ;
0032 7F66 2026     vec.20  data  cpu.crash             ;
0033 7F68 7626     vec.21  data  fb.vdpdump            ;
0034 7F6A 30D4     vec.22  data  fb.row2line           ;
0035 7F6C 2026     vec.23  data  cpu.crash             ;
0036 7F6E 2026     vec.24  data  cpu.crash             ;
0037 7F70 2026     vec.25  data  cpu.crash             ;
0038 7F72 2026     vec.26  data  cpu.crash             ;
0039 7F74 76EE     vec.27  data  pane.errline.hide     ;
0040 7F76 731C     vec.28  data  pane.cursor.blink     ;
0041 7F78 72FE     vec.29  data  pane.cursor.hide      ;
0042 7F7A 76E4     vec.30  data  pane.errline.show     ;
0043 7F7C 70C8     vec.31  data  pane.colorscheme.load
0044 7F7E 72E4     vec.32  data  pane.colorscheme.statlines
0045               *--------------------------------------------------------------
0046               * ROM 1: Vectors 33-64
0047               *--------------------------------------------------------------
0048 7F80 2026     vec.33  data  cpu.crash             ;
0049 7F82 2026     vec.34  data  cpu.crash             ;
0050 7F84 2026     vec.35  data  cpu.crash             ;
0051 7F86 2026     vec.36  data  cpu.crash             ;
0052 7F88 2026     vec.37  data  cpu.crash             ;
0053 7F8A 2026     vec.38  data  cpu.crash             ;
0054 7F8C 2026     vec.39  data  cpu.crash             ;
0055 7F8E 2026     vec.40  data  cpu.crash             ;
0056 7F90 2026     vec.41  data  cpu.crash             ;
0057 7F92 2026     vec.42  data  cpu.crash             ;
0058 7F94 2026     vec.43  data  cpu.crash             ;
0059 7F96 2026     vec.44  data  cpu.crash             ;
0060 7F98 2026     vec.45  data  cpu.crash             ;
0061 7F9A 2026     vec.46  data  cpu.crash             ;
0062 7F9C 2026     vec.47  data  cpu.crash             ;
0063 7F9E 2026     vec.48  data  cpu.crash             ;
0064 7FA0 2026     vec.49  data  cpu.crash             ;
0065 7FA2 2026     vec.50  data  cpu.crash             ;
0066 7FA4 2026     vec.51  data  cpu.crash             ;
0067 7FA6 2026     vec.52  data  cpu.crash             ;
0068 7FA8 2026     vec.53  data  cpu.crash             ;
0069 7FAA 2026     vec.54  data  cpu.crash             ;
0070 7FAC 2026     vec.55  data  cpu.crash             ;
0071 7FAE 2026     vec.56  data  cpu.crash             ;
0072 7FB0 2026     vec.57  data  cpu.crash             ;
0073 7FB2 2026     vec.58  data  cpu.crash             ;
0074 7FB4 2026     vec.59  data  cpu.crash             ;
0075 7FB6 2026     vec.60  data  cpu.crash             ;
0076 7FB8 2026     vec.61  data  cpu.crash             ;
0077 7FBA 2026     vec.62  data  cpu.crash             ;
0078 7FBC 2026     vec.63  data  cpu.crash             ;
0079 7FBE 2026     vec.64  data  cpu.crash             ;
0080               *--------------------------------------------------------------
0081               * ROM 1: Vectors 65-96
0082               *--------------------------------------------------------------
0083 7FC0 2026     vec.65  data  cpu.crash             ;
0084 7FC2 2026     vec.66  data  cpu.crash             ;
0085 7FC4 2026     vec.67  data  cpu.crash             ;
0086 7FC6 2026     vec.68  data  cpu.crash             ;
0087 7FC8 2026     vec.69  data  cpu.crash             ;
0088 7FCA 2026     vec.70  data  cpu.crash             ;
0089 7FCC 2026     vec.71  data  cpu.crash             ;
0090 7FCE 2026     vec.72  data  cpu.crash             ;
0091 7FD0 2026     vec.73  data  cpu.crash             ;
0092 7FD2 2026     vec.74  data  cpu.crash             ;
0093 7FD4 2026     vec.75  data  cpu.crash             ;
0094 7FD6 2026     vec.76  data  cpu.crash             ;
0095 7FD8 2026     vec.77  data  cpu.crash             ;
0096 7FDA 2026     vec.78  data  cpu.crash             ;
0097 7FDC 2026     vec.79  data  cpu.crash             ;
0098 7FDE 2026     vec.80  data  cpu.crash             ;
0099 7FE0 2026     vec.81  data  cpu.crash             ;
0100 7FE2 2026     vec.82  data  cpu.crash             ;
0101 7FE4 2026     vec.83  data  cpu.crash             ;
0102 7FE6 2026     vec.84  data  cpu.crash             ;
0103 7FE8 2026     vec.85  data  cpu.crash             ;
0104 7FEA 2026     vec.86  data  cpu.crash             ;
0105 7FEC 2026     vec.87  data  cpu.crash             ;
0106 7FEE 2026     vec.88  data  cpu.crash             ;
0107 7FF0 2026     vec.89  data  cpu.crash             ;
0108 7FF2 2026     vec.90  data  cpu.crash             ;
0109 7FF4 2026     vec.91  data  cpu.crash             ;
0110 7FF6 2026     vec.92  data  cpu.crash             ;
0111 7FF8 2026     vec.93  data  cpu.crash             ;
0112 7FFA 2026     vec.94  data  cpu.crash             ;
0113 7FFC 2026     vec.95  data  cpu.crash             ;
0114 7FFE 2026     vec.96  data  cpu.crash             ;
                   < stevie_b1.asm
0170                                                   ; Vector table bank 1

    ANYKEY.............. >200A :     
    AT.................. >26C6 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VDPTAB........ >7F10 :     
    BANKX.VECTAB........ >7F40 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2EC2 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EEA :     
    CMDB.ACTION.PTR..... >A72C :     
    CMDB.CFG.FNAME...... >75D8 :     
    CMDB.CFG.FNAME.VECTOR >75E0 :     
    CMDB.CMD............ >A72F :     
    CMDB.CMD.CLEAR...... >7592 :     
    CMDB.CMD.CLEAR.VECTOR >759A :     
    CMDB.CMD.GETLENGTH.. >759C :     
    CMDB.CMD.GETLENGTH.VECTOR >75A4 :     
    CMDB.CMD.PRESET..... >75A6 :     
    CMDB.CMD.PRESET.VECTOR >75AE :     
    CMDB.CMD.SET........ >75B0 :     
    CMDB.CMD.SET.VECTOR. >75B8 :     
    CMDB.CMDALL......... >A72E :     
    CMDB.CMDLEN......... >A72E :     
    CMDB.COLUMN......... >A714 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7B2 :     
    CMDB.DIALOG......... >A71C :     
    CMDB.DIALOG.CLOSE... >6EAA :     
    CMDB.DIALOG.CLOSE.EXIT >6EBA :     
    CMDB.DIALOG.VAR..... >A71E :     
    CMDB.DIRTY.......... >A71A :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >3292 :     
    CMDB.INIT.EXIT...... >32E6 :     
    CMDB.LENGTH......... >A716 :     
    CMDB.LINES.......... >A718 :     
    CMDB.PANHEAD........ >A720 :     
    CMDB.PANHEAD.BUF.... >A780 :     
    CMDB.PANHINT........ >A724 :     
    CMDB.PANHINT2....... >A726 :     
    CMDB.PANINFO........ >A722 :     
    CMDB.PANKEYS........ >A72A :     
    CMDB.PANMARKERS..... >A728 :     
    CMDB.REFRESH........ >7588 :     
    CMDB.REFRESH.VECTOR. >7590 :     
    CMDB.ROWS........... >0005 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VDPTOP......... >A70E :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A712 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A710 :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3930 :     
    CONST.2............. >2004 :     
    CONST.3............. >3926 :     
    CONST.32............ >3932 :     
    CONST.4............. >2006 :     
    CONST.5............. >3928 :     
    CONST.6............. >392A :     
    CONST.7............. >392C :     
    CONST.8............. >2008 :     
    CONST.80............ >3934 :     
    CONST.9............. >392E :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A036 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >2198 :     
    CPU.CRASH.MSG.CRASHED >2182 :     
    CPU.CRASH.MSG.ID.... >21D8 :     
    CPU.CRASH.MSG.MARKER >21B0 :     
    CPU.CRASH.MSG.R..... >21AE :     
    CPU.CRASH.MSG.SOURCE >21C0 :     
    CPU.CRASH.MSG.ST.... >21BA :     
    CPU.CRASH.MSG.WP.... >21B4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F38 :     
    CPU.CRASH.SHOWREG... >20EC :     
    CPU.CRASH.SHOWREG.CONTENT >2142 :     
    CPU.CRASH.SHOWREG.LABEL >20FA :     
    CPU.SCRPAD.BACKUP... >2AF0 :     
    CPU.SCRPAD.BACKUP.COPY >2B08 :     
    CPU.SCRPAD.BACKUP.EXIT >2B22 :     
    CPU.SCRPAD.PGIN..... >2B76 :     
    CPU.SCRPAD.PGIN.EXIT >2B98 :     
    CPU.SCRPAD.PGOUT.... >2B38 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B70 :     
    CPU.SCRPAD.PGOUT.EXIT >2B74 :     
    CPU.SCRPAD.RESTORE.. >2B24 :     
    CPU.SCRPAD.RESTORE.COPY >2B2C :     
    CPU.SCRPAD.RESTORE.EXIT >2B36 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24EC :     
    CPYM0............... >24F8 :     
    CPYM1............... >2504 :     
    CPYM2............... >250C :     
    CPYM2M.............. >24DA :     
    CPYM2V.............. >2486 :     
    CPYM3............... >251C :     
    CPYM4............... >2526 :     
    CPYMZ............... >2532 :     
    CPYODD.............. >2534 :     
    CPYV2M.............. >24B8 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME.A.... >3D63 :     
    DEF.CLIP.FNAME.B.... >3D6D :     
    DEF.CLIP.FNAME.C.... >3D77 :     
    DEF.DEVICES......... >3DA8 :     
    DEF.MC.FNAME.A...... >3D81 :     
    DEF.MC.FNAME.B...... >3D8E :     
    DEF.MC.FNAME.C...... >3D9B :     
    DEF.PRINTER.FNAME... >3D5C :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.............. >75EC :     
    DIALOG.APPEND....... >74F2 :     
    DIALOG.APPEND.VECTOR >74FA :     
    DIALOG.BASIC........ >7506 :     
    DIALOG.BASIC.VECTOR. >750E :     
    DIALOG.CARTRIDGE.... >74FC :     
    DIALOG.CARTRIDGE.VECTOR >7504 :     
    DIALOG.CFG.MC....... >752E :     
    DIALOG.CFG.MC.VECTOR >7536 :     
    DIALOG.CLIPBOARD.... >74D4 :     
    DIALOG.CLIPBOARD.VECTOR >74DC :     
    DIALOG.CLIPDEV...... >74DE :     
    DIALOG.CLIPDEV.VECTOR >74E6 :     
    DIALOG.CONFIG....... >74E8 :     
    DIALOG.CONFIG.VECTOR >74F0 :     
    DIALOG.FILE......... >74BC :     
    DIALOG.FILE.VECTOR.. >74C4 :     
    DIALOG.FONT......... >7524 :     
    DIALOG.FONT.VECTOR.. >752C :     
    DIALOG.GOTO......... >751A :     
    DIALOG.GOTO.VECTOR.. >7522 :     
    DIALOG.HEARTS.TAT... >75BA :     
    DIALOG.HEARTS.TAT.VECTOR >75C2 :     
    DIALOG.HELP......... >748A :     
    DIALOG.HELP.NEXT.... >7476 :     
    DIALOG.HELP.VECTOR.. >7492 :     
    DIALOG.INSERT....... >74A8 :     
    DIALOG.INSERT.VECTOR >74B0 :     
    DIALOG.LOAD......... >7494 :     
    DIALOG.LOAD.VECTOR.. >749C :     
    DIALOG.MENU......... >7538 :     
    DIALOG.MENU.VECTOR.. >754C :     
    DIALOG.PRINT........ >74B2 :     
    DIALOG.PRINT.VECTOR. >74BA :     
    DIALOG.SAVE......... >749E :     
    DIALOG.SAVE.VECTOR.. >74A6 :     
    DIALOG.SHORTCUTS.... >7510 :     
    DIALOG.SHORTCUTS.VECTOR >7518 :     
    DIALOG.UNSAVED...... >74C6 :     
    DIALOG.UNSAVED.VECTOR >74D2 :     
    DIALOG.VECTOR....... >75F4 :     
    DOFILL.............. >2280 :     
    DOWN................ >26CC :     
    DSRLNK.............. >2B9A :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2BF4 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C70 :     
    DSRLNK.DSRSCAN.CARDLOOP >2C20 :     
    DSRLNK.DSRSCAN.CARDOFF >2C1A :     
    DSRLNK.DSRSCAN.DSR.8 >2CA2 :     
    DSRLNK.DSRSCAN.DSR.A >2CB2 :     
    DSRLNK.DSRSCAN.GETENTRY >2C4A :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C44 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2C92 :     
    DSRLNK.DSRSCAN.START >2C10 :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CBE :     
    DSRLNK.ERROR.IO_ERROR >2CC0 :     
    DSRLNK.ERROR.NODSR_FOUND >2CBA :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CB8 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2B9E :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D0A :     
    DSRLNK.REUSE........ >2CCA :     
    DSRLNK.REUSE.INIT... >2CCE :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BK.FB.ROW....... >A520 :     
    EDB.BK.FB.TOPLINE... >A51E :     
    EDB.BLOCK.CLIP...... >773C :     
    EDB.BLOCK.CLIP.VECTOR >7744 :     
    EDB.BLOCK.COPY...... >775A :     
    EDB.BLOCK.COPY.VECTOR >7762 :     
    EDB.BLOCK.DELETE.... >7750 :     
    EDB.BLOCK.DELETE.VECTOR >7758 :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >771E :     
    EDB.BLOCK.MARK.M1... >7728 :     
    EDB.BLOCK.MARK.M1.VECTOR >7730 :     
    EDB.BLOCK.MARK.M2... >7732 :     
    EDB.BLOCK.MARK.M2.VECTOR >773A :     
    EDB.BLOCK.MARK.VECTOR >7726 :     
    EDB.BLOCK.RESET..... >7746 :     
    EDB.BLOCK.RESET.VECTOR >774E :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7714 :     
    EDB.CLEAR.SAMS.VECTOR >771C :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A526 :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A576 :     
    EDB.HIPAGE.ALLOC.... >374C :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >3758 :     
    EDB.HIPAGE.ALLOC.CRASH >3782 :     
    EDB.HIPAGE.ALLOC.EXIT >378A :     
    EDB.HIPAGE.ALLOC.SETPAGE >3774 :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >3246 :     
    EDB.INIT.EXIT....... >328C :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7764 :     
    EDB.LINE.DEL.VECTOR. >776C :     
    EDB.LINE.GETLENGTH.. >36E4 :     
    EDB.LINE.GETLENGTH.EXIT >3720 :     
    EDB.LINE.GETLENGTH.NULL >371C :     
    EDB.LINE.GETLENGTH2. >3728 :     
    EDB.LINE.GETLENGTH2.EXIT >3746 :     
    EDB.LINE.MAPPAGE.... >369A :     
    EDB.LINE.MAPPAGE.EXIT >36DC :     
    EDB.LINE.MAPPAGE.LOOKUP >36B4 :     
    EDB.LINE.PACK.FB.... >6EBE :     
    EDB.LINE.PACK.FB.CHECK80 >6EFC :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >6F0C :     
    EDB.LINE.PACK.FB.COPYLINE >6F62 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >6F7C :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >6F78 :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >6F6E :     
    EDB.LINE.PACK.FB.CRASH >6F04 :     
    EDB.LINE.PACK.FB.EXIT >6FAA :     
    EDB.LINE.PACK.FB.PREPARE >6F32 :     
    EDB.LINE.PACK.FB.PREPEXIT >6F90 :     
    EDB.LINE.PACK.FB.RTRIM >6F16 :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >6F28 :     
    EDB.LINE.PACK.FB.SCAN >6EEC :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >6F3E :     
    EDB.LINE.UNPACK.FB.. >6FB6 :     
    EDB.LINE.UNPACK.FB.CLEAR >7014 :     
    EDB.LINE.UNPACK.FB.COPY >7046 :     
    EDB.LINE.UNPACK.FB.EXIT >7052 :     
    EDB.LINE.UNPACK.FB.GETLEN >700C :     
    EDB.LINE.UNPACK.FB.PREPARE >7022 :     
    EDB.LINES........... >A504 :     
    EDB.LINETERM........ >A524 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51C :     
    EDB.SAMS.LOPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.SPECIAL.FILE.... >A522 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.BLOCK.COPY >6894 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >68CA :     
    EDKEY.ACTION.BLOCK.DELETE >68D0 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >68FA :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >6934 :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >694A :     
    EDKEY.ACTION.BLOCK.M1 >6878 :     
    EDKEY.ACTION.BLOCK.M2 >6880 :     
    EDKEY.ACTION.BLOCK.MARK >6870 :     
    EDKEY.ACTION.BLOCK.MOVE >68FE :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >6930 :     
    EDKEY.ACTION.BLOCK.RESET >6888 :     
    EDKEY.ACTION.BOT.... >6474 :     
    EDKEY.ACTION.BOTSCR. >647C :     
    EDKEY.ACTION.CHAR... >66E6 :     
    EDKEY.ACTION.CHAR.EXIT >6716 :     
    EDKEY.ACTION.CHAR.OVERWRITE >6712 :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6DC2 :     
    EDKEY.ACTION.CMDB.APPEND >6BBC :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6C26 :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6BFA :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6DF4 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6E24 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6E16 :     
    EDKEY.ACTION.CMDB.CFG.CLIP >6A5E :     
    EDKEY.ACTION.CMDB.CFG.CLIP.EXIT >6A7A :     
    EDKEY.ACTION.CMDB.CFG.MC >6A82 :     
    EDKEY.ACTION.CMDB.CFG.MC.EXIT >6A9E :     
    EDKEY.ACTION.CMDB.CHAR >69FE :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6A3E :     
    EDKEY.ACTION.CMDB.CLEAR >69F2 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >69FA :     
    EDKEY.ACTION.CMDB.CLIP >6C52 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6C34 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6C3A :     
    EDKEY.ACTION.CMDB.CLIP.3 >6C40 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6C46 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6C4C :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6DD6 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6DEC :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6DF0 :     
    EDKEY.ACTION.CMDB.END >69DC :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6DAA :     
    EDKEY.ACTION.CMDB.FILE.NEW >6AA6 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6AC4 :     
    EDKEY.ACTION.CMDB.FONT.EXIT >6EA6 :     
    EDKEY.ACTION.CMDB.FONT.LOAD >6E9E :     
    EDKEY.ACTION.CMDB.FONT1 >6E82 :     
    EDKEY.ACTION.CMDB.FONT2 >6E86 :     
    EDKEY.ACTION.CMDB.FONT3 >6E8C :     
    EDKEY.ACTION.CMDB.FONT4 >6E92 :     
    EDKEY.ACTION.CMDB.FONT5 >6E98 :     
    EDKEY.ACTION.CMDB.GOTO >6E2C :     
    EDKEY.ACTION.CMDB.GOTO.EXIT >6E7E :     
    EDKEY.ACTION.CMDB.GOTO.LINE >6E6A :     
    EDKEY.ACTION.CMDB.GOTO.PREPARE >6E50 :     
    EDKEY.ACTION.CMDB.HIDE >6A56 :     
    EDKEY.ACTION.CMDB.HOME >69C8 :     
    EDKEY.ACTION.CMDB.INSERT >6B36 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6BAE :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6B74 :     
    EDKEY.ACTION.CMDB.LEFT >699E :     
    EDKEY.ACTION.CMDB.LINETERM.TOGGLE >6DB6 :     
    EDKEY.ACTION.CMDB.LOAD >6ACC :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6B2E :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6B1A :     
    EDKEY.ACTION.CMDB.PRESET >6DCE :     
    EDKEY.ACTION.CMDB.PRINT >6D00 :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6D5C :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6D72 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6D6A :     
    EDKEY.ACTION.CMDB.PROCEED >6D80 :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6DA6 :     
    EDKEY.ACTION.CMDB.RIGHT >69B0 :     
    EDKEY.ACTION.CMDB.SAVE >6C80 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6CDC :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6CF2 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6CEA :     
    EDKEY.ACTION.CMDB.SHOW >6A4C :     
    EDKEY.ACTION.CMDB.TOGGLE >6A46 :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6A5A :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >6768 :     
    EDKEY.ACTION.DEL_CHAR >650C :     
    EDKEY.ACTION.DEL_CHAR.EXIT >6586 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >6564 :     
    EDKEY.ACTION.DEL_CHAR.PREP >654A :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >6514 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >651E :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >653C :     
    EDKEY.ACTION.DEL_CHAR.SAVE >657A :     
    EDKEY.ACTION.DEL_EOL >658A :     
    EDKEY.ACTION.DEL_EOL.EXIT >65BA :     
    EDKEY.ACTION.DEL_EOL_LOOP >65A6 :     
    EDKEY.ACTION.DEL_LINE >65BE :     
    EDKEY.ACTION.DEL_LINE.DOIT >65EC :     
    EDKEY.ACTION.DEL_LINE.EXIT >661C :     
    EDKEY.ACTION.DEL_LINE.REFRESH >65FC :     
    EDKEY.ACTION.DOWN... >648C :     
    EDKEY.ACTION.END.... >62A2 :     
    EDKEY.ACTION.ENTER.. >6648 :     
    EDKEY.ACTION.ENTER.NEWLINE >6660 :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >6674 :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >696A :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >6974 :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >697E :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >698E :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >6778 :     
    EDKEY.ACTION.FB.FNAME.DOIT >679C :     
    EDKEY.ACTION.FB.FNAME.DOIT.EXIT >67C4 :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >67BC :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >678A :     
    EDKEY.ACTION.FB.LOAD.CHECK.MASTCAT >67FA :     
    EDKEY.ACTION.FB.LOAD.FILE >67CA :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT1 >681E :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT2 >6834 :     
    EDKEY.ACTION.FB.LOAD.FILE.EXIT3 >683E :     
    EDKEY.ACTION.FB.LOAD.LOADFILE >6810 :     
    EDKEY.ACTION.FB.LOAD.MC >6848 :     
    EDKEY.ACTION.FB.TAB.NEXT >695C :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >6964 :     
    EDKEY.ACTION.FB.TAB.PREV >694E :     
    EDKEY.ACTION.FB.TAB.PREV.EXIT >6956 :     
    EDKEY.ACTION.GOTO... >64E6 :     
    EDKEY.ACTION.GOTO.REFRESH >6500 :     
    EDKEY.ACTION.HOME... >629A :     
    EDKEY.ACTION.INS_CHAR.WS >6620 :     
    EDKEY.ACTION.INS_CHAR.WS.EXIT >662A :     
    EDKEY.ACTION.INS_LINE >6630 :     
    EDKEY.ACTION.INS_LINE.EXIT >6638 :     
    EDKEY.ACTION.INS_LINE_AFTER >663C :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >6644 :     
    EDKEY.ACTION.INS_ONOFF >66D4 :     
    EDKEY.ACTION.INS_ONOFF.EXIT >66E0 :     
    EDKEY.ACTION.LEFT... >6264 :     
    EDKEY.ACTION.NEWLINE >6688 :     
    EDKEY.ACTION.NEWLINE.DOWN >66AC :     
    EDKEY.ACTION.NEWLINE.EXIT >66D0 :     
    EDKEY.ACTION.NEWLINE.REST >66B4 :     
    EDKEY.ACTION.NPAGE.. >6424 :     
    EDKEY.ACTION.NPAGE.EXIT >6460 :     
    EDKEY.ACTION.NPAGE.REFRESH >644E :     
    EDKEY.ACTION.NPAGE.SANITY >6438 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6448 :     
    EDKEY.ACTION.NWORD.. >6316 :     
    EDKEY.ACTION.NWORD.EXIT >636E :     
    EDKEY.ACTION.NWORD_DONE >6366 :     
    EDKEY.ACTION.NWORD_MS >632E :     
    EDKEY.ACTION.NWORD_SCAN >6330 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >633A :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >6348 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >6350 :     
    EDKEY.ACTION.PPAGE.. >63E2 :     
    EDKEY.ACTION.PPAGE.EXIT >6420 :     
    EDKEY.ACTION.PPAGE.REFRESH >640E :     
    EDKEY.ACTION.PPAGE.SANITY >63F6 :     
    EDKEY.ACTION.PPAGE.TOPLINE >6408 :     
    EDKEY.ACTION.PWORD.. >62C4 :     
    EDKEY.ACTION.PWORD.EXIT >630E :     
    EDKEY.ACTION.PWORD_DONE >6306 :     
    EDKEY.ACTION.PWORD_SCAN >62D6 :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62DC :     
    EDKEY.ACTION.QUIT... >675A :     
    EDKEY.ACTION.RIGHT.. >627E :     
    EDKEY.ACTION.SCROLL.LEFT >6376 :     
    EDKEY.ACTION.SCROLL.RIGHT >63AA :     
    EDKEY.ACTION.TOGGLE.RULER >671A :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >6750 :     
    EDKEY.ACTION.TOGGLE.RULER.FB >674C :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >672A :     
    EDKEY.ACTION.TOGGLE.RULER.ON >6734 :     
    EDKEY.ACTION.TOP.... >6464 :     
    EDKEY.ACTION.TOPSCR. >646C :     
    EDKEY.ACTION.UP..... >6484 :     
    EDKEY.ACTIONS.INS.CHAR.WS.DATA >662E :     
    EDKEY.FB.GOTO.LINE.. >64C2 :     
    EDKEY.FB.GOTO.ROW... >64BC :     
    EDKEY.FB.GOTO.TOPROW >6494 :     
    EDKEY.KEY.CHECK.NEXT >61D8 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61F8 :     
    EDKEY.KEY.CHECK.SCOPE >61FE :     
    EDKEY.KEY.PROCESS... >6178 :     
    EDKEY.KEY.PROCESS.ACTION >6218 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >622C :     
    EDKEY.KEY.PROCESS.CRASH >624A :     
    EDKEY.KEY.PROCESS.ENTER >6252 :     
    EDKEY.KEY.PROCESS.EXIT >6260 :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61D4 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61CE :     
    EDKEY.KEY.PROCESS.SPECIAL >6198 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61C8 :     
    EDKEY.KEYSCAN.HOOK.. >6130 :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6158 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >6172 :     
    EDKEY.KEYSCAN.HOOK.EXIT >6174 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >75F6 :     
    ERROR.DISPLAY.VECTOR >75FE :     
    ERRPANE.EXIT........ >3314 :     
    ERRPANE.INIT........ >32EE :     
    F18CHK.............. >2754 :     
    F18CHK_EXIT......... >2792 :     
    F18CHK_GPU.......... >279E :     
    F18CHK_NO........... >2788 :     
    F18CHK_YES.......... >278E :     
    F18FW1.............. >27D0 :     
    F18FWV.............. >27B6 :     
    F18IDL.............. >274A :     
    F18LCK.............. >2740 :     
    F18RST.............. >27A6 :     
    F18UNL.............. >272A :     
    FB.CALC.POINTER..... >30EE :     
    FB.CALC.POINTER.EXIT >310E :     
    FB.CALC.SCRROWS..... >3116 :     
    FB.CALC.SCRROWS.EXIT >3142 :     
    FB.CALC.SCRROWS.HANDLE.ERRORS >3136 :     
    FB.CALC.SCRROWS.HANDLE.MC >312A :     
    FB.CALC.SCRROWS.HANDLE.RULER >3120 :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >761C :     
    FB.COLORLINES.VECTOR >7624 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.BOT....... >76A8 :     
    FB.CURSOR.BOT.VECTOR >76B0 :     
    FB.CURSOR.BOTSCR.... >76B2 :     
    FB.CURSOR.BOTSCR.VECTOR >76BA :     
    FB.CURSOR.DOWN...... >7676 :     
    FB.CURSOR.DOWN.VECTOR >767E :     
    FB.CURSOR.HOME...... >7680 :     
    FB.CURSOR.HOME.VECTOR >7688 :     
    FB.CURSOR.TOP....... >7694 :     
    FB.CURSOR.TOP.VECTOR >769C :     
    FB.CURSOR.TOPSCR.... >769E :     
    FB.CURSOR.TOPSCR.VECTOR >76A6 :     
    FB.CURSOR.UP........ >766C :     
    FB.CURSOR.UP.VECTOR. >7674 :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.NONBLANK..... >764E :     
    FB.GET.NONBLANK.VECTOR >7656 :     
    FB.HSCROLL.......... >7630 :     
    FB.HSCROLL.VECTOR... >7638 :     
    FB.INIT............. >307A :     
    FB.INIT.EXIT........ >30CC :     
    FB.INSERT.CHAR...... >76BC :     
    FB.INSERT.CHAR.VECTOR >76C4 :     
    FB.INSERT.LINE...... >768A :     
    FB.INSERT.LINE.VECTOR >7692 :     
    FB.REFRESH.......... >7644 :     
    FB.REFRESH.VECTOR... >764C :     
    FB.REPLACE.CHAR..... >76C6 :     
    FB.REPLACE.CHAR.VECTOR >76CE :     
    FB.RESTORE.......... >763A :     
    FB.RESTORE.VECTOR... >7642 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >30D4 :     
    FB.ROW2LINE.EXIT.... >30E8 :     
    FB.RULER.INIT....... >7612 :     
    FB.RULER.INIT.VECTOR >761A :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >7662 :     
    FB.TAB.NEXT.VECTOR.. >766A :     
    FB.TAB.PREV......... >7658 :     
    FB.TAB.PREV.VECTOR.. >7660 :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >7626 :     
    FB.VDPDUMP.VECTOR... >762E :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FG99................ >2DC4 :     
    FG99.CART.FBFORTH... >3E14 :     
    FG99.CART.FCMD...... >3DD8 :     
    FG99.CART.RXB....... >3E00 :     
    FG99.CART.XBGEM..... >3DEC :     
    FG99.EXIT........... >2DFE :     
    FG99.RUN............ >37B2 :     
    FG99.RUN.FBFORTH.... >7844 :     
    FG99.RUN.FCMD....... >783A :     
    FG99.RUN.RXB........ >7830 :     
    FG99.RUN.STUB....... >784E :     
    FG99.RUN.STUB.EXIT.. >7856 :     
    FG99.RUN.XBGEM...... >7826 :     
    FG99.SEND.LOOP...... >2DD4 :     
    FG99.WAIT........... >2DEC :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B8 :     
    FH.FTYPE.INIT....... >A45A :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A468 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.PABTPL.PTR....... >A466 :     
    FH.RAM.PTR.......... >A45C :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >228C :     
    FIL16B.............. >2276 :     
    FILCHK.............. >2248 :     
    FILCHK2............. >2258 :     
    FILCHK3............. >2264 :     
    FILE.CLOSE.......... >2D30 :     
    FILE.DELETE......... >2D68 :     
    FILE.IMAGE.LOAD..... >2D64 :     
    FILE.IMAGE.SAVE..... >2D66 :     
    FILE.OPEN........... >2D0C :     
    FILE.RECORD.READ.... >2D3C :     
    FILE.RECORD.SEEK.... >2D62 :     
    FILE.RECORD.WRITE... >2D48 :     
    FILE.RENAME......... >2D6A :     
    FILE.STATUS......... >2D6C :     
    FILM................ >2236 :     
    FILV................ >228E :     
    FILZZ............... >22B4 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.SUFFIX >7440 :     
    FM.FASTMODE......... >75CE :     
    FM.FASTMODE.VECTOR.. >75D6 :     
    FM.INSERTFILE....... >7428 :     
    FM.INSERTFILE.EXIT.. >743A :     
    FM.LINETERM......... >75E2 :     
    FM.LINETERM.VECTOR.. >75EA :     
    FM.LOADFILE......... >7402 :     
    FM.LOADFILE.EXIT.... >7422 :     
    FM.NEWFILE.......... >7464 :     
    FM.SAVEFILE......... >7452 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21F2 :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27D2 :     
    HCHAR1.............. >27EC :     
    HCHAR2.............. >27F6 :     
    HCHARX.............. >27D8 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2E08 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CFG....... >006C :     
    ID.DIALOG.CFG.CLIP.. >0011 :     
    ID.DIALOG.CFG.MC.... >0012 :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.FONT...... >006E :     
    ID.DIALOG.GOTO...... >0013 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006F :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    ID.SPECIAL.BASIC.... >0003 :     
    ID.SPECIAL.MASTCAT.. >0001 :     
    ID.SPECIAL.NORMAL... >0000 :     
    ID.SPECIAL.READONLY. >0002 :     
    IDX.ENTRY.DELETE.... >35A0 :     
    IDX.ENTRY.DELETE.EXIT >35F8 :     
    IDX.ENTRY.DELETE.LASTLINE >35CC :     
    IDX.ENTRY.DELETE.REORG >35D4 :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >35DE :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >35F2 :     
    IDX.ENTRY.INSERT.... >3642 :     
    IDX.ENTRY.INSERT.EXIT >368E :     
    IDX.ENTRY.INSERT.REORG >3660 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >366A :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >367E :     
    IDX.ENTRY.UPDATE.... >34F2 :     
    IDX.ENTRY.UPDATE.CLEAR >352C :     
    IDX.ENTRY.UPDATE.EXIT >353C :     
    IDX.ENTRY.UPDATE.SAVE >351A :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >3146 :     
    IDX.INIT.EXIT....... >3182 :     
    IDX.POINTER.GET..... >3544 :     
    IDX.POINTER.GET.EXIT >3586 :     
    IDX.POINTER.GET.PARM >3574 :     
    IDX.POINTER.GET.PARM.NULL >357E :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >2696 :     
    INTON............... >269E :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.R............ >0072 :     
    KEY.LC.S............ >0073 :     
    KEY.LC.X............ >0078 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.D............ >0044 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.G............ >0047 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.J............ >004A :     
    KEY.UC.K............ >004B :     
    KEY.UC.L............ >004C :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEY.UC.X............ >0058 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >79A0 :     
    KEYMAP_ACTIONS.EDITOR >78C6 :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2EA2 :     
    KTHREAD_EXIT........ >2EB4 :     
    KTHREAD_KB.......... >2EB0 :     
    LDFNT............... >2360 :     
    LDFNT1.............. >2378 :     
    LDFNT2.............. >23B2 :     
    LDFNT3.............. >23C6 :     
    LDFNT4.............. >23DA :     
    LOADMC.............. >221A :     
    MAGIC.CHECK......... >78B4 :     
    MAGIC.CLEAR......... >78A2 :     
    MAGIC.SET........... >7890 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >2210 :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >786C :     
    MEM.SAMS.SET.LEGACY. >785A :     
    MEM.SAMS.SET.STEVIE. >787E :     
    MEM.SAMS.SETUP.STEVIE >610C :     
    MEM.SAMS.SETUP.STEVIE.EXIT >612C :     
    MKHEX............... >2918 :     
    MKHEX1.............. >2930 :     
    MKHEX1.DIGIT09...... >2946 :     
    MKHEX1.DIGITAF...... >293C :     
    MKHEX2.............. >294C :     
    MKHEX3.............. >298E :     
    MKHOO1.............. >2EC0 :     
    MKHOOK.............. >2EB8 :     
    MKNUM............... >29A6 :     
    MKNUM1.............. >29B8 :     
    MKNUM2.............. >29D4 :     
    MKNUM3.............. >29D8 :     
    MKNUM4.............. >29E2 :     
    MKNUM5.............. >29EA :     
    MKSLO1.............. >2EE6 :     
    MKSLOT.............. >2ECC :     
    MMPLA1.............. >2884 :     
    MMPLA2.............. >288A :     
    MMPLAY.............. >287C :     
    MUTE................ >27FA :     
    MUTE2............... >27FE :     
    MUTTAB.............. >2814 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >38AC :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A018 :     
    OUTPARM2............ >A01A :     
    OUTPARM3............ >A01C :     
    OUTPARM4............ >A01E :     
    OUTPARM5............ >A020 :     
    OUTPARM6............ >A022 :     
    OUTPARM7............ >A024 :     
    PALON............... >201C :     
    PANE.BOTLINE........ >76DA :     
    PANE.BOTLINE.VECTOR. >76E2 :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >757E :     
    PANE.CMDB.DRAW.VECTOR >7586 :     
    PANE.CMDB.HIDE...... >7574 :     
    PANE.CMDB.HIDE.VECTOR >757C :     
    PANE.CMDB.SHOW...... >756A :     
    PANE.CMDB.SHOW.VECTOR >7572 :     
    PANE.COLORSCHEME.CHECKCMDB >7196 :     
    PANE.COLORSCHEME.CMDBPANE >71C6 :     
    PANE.COLORSCHEME.CURSORCOLOR >72A2 :     
    PANE.COLORSCHEME.CURSORCOLOR.CMDB >72B0 :     
    PANE.COLORSCHEME.CURSORCOLOR.FB >72B8 :     
    PANE.COLORSCHEME.CYCLE >706A :     
    PANE.COLORSCHEME.CYCLE.EXIT >70C2 :     
    PANE.COLORSCHEME.ERRPANE >723C :     
    PANE.COLORSCHEME.FBDUMP >71A2 :     
    PANE.COLORSCHEME.FBDUMP.NORULER >718E :     
    PANE.COLORSCHEME.LOAD >70C8 :     
    PANE.COLORSCHEME.LOAD.EXIT >72C6 :     
    PANE.COLORSCHEME.RULER >7284 :     
    PANE.COLORSCHEME.STATLINE >724E :     
    PANE.COLORSCHEME.STATLINES >72E4 :     
    PANE.COLORSCHEME.STATLINES.EXIT >72F8 :     
    PANE.COLORSCHEME.SWITCH >7084 :     
    PANE.CURSOR.BLINK... >731C :     
    PANE.CURSOR.BLINK.EXIT >7338 :     
    PANE.CURSOR.HIDE.... >72FE :     
    PANE.CURSOR.HIDE.EXIT >7318 :     
    PANE.ERRLINE.DRAWCOLOR >76F8 :     
    PANE.ERRLINE.DRAWCOLOR.VECTOR >7700 :     
    PANE.ERRLINE.HIDE... >76EE :     
    PANE.ERRLINE.HIDE.VECTOR >76F6 :     
    PANE.ERRLINE.SHOW... >76E4 :     
    PANE.ERRLINE.SHOW.VECTOR >76EC :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >7560 :     
    PANE.SHOW_HINTX.VECTOR >7568 :     
    PANE.TOPLINE........ >76D0 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3792 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >37AA :     
    PANE.TOPLINE.VECTOR. >76D8 :     
    PANE.VDPDUMP........ >733C :     
    PANE.VDPDUMP.ALPHA_LOCK >734A :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >735A :     
    PANE.VDPDUMP.CMDB.CHECK >7362 :     
    PANE.VDPDUMP.CMDB.DRAW >7368 :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >7374 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >73A6 :     
    PANE.VDPDUMP.DUMP... >73B6 :     
    PANE.VDPDUMP.DUMPED. >73CE :     
    PANE.VDPDUMP.EXIT... >73F8 :     
    PANE.VDPDUMP.STATLINES >73D6 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PARM9............... >A016 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >2230 :     
    POPR1............... >222E :     
    POPR2............... >222C :     
    POPR3............... >222A :     
    POPRT............... >2232 :     
    PREFIX.............. >299A :     
    PUTAT............... >2442 :     
    PUTHEX.............. >299C :     
    PUTLST.............. >244A :     
    PUTLST.EXIT......... >2480 :     
    PUTLST.LOOP......... >2452 :     
    PUTNUM.............. >2A24 :     
    PUTSTR.............. >241E :     
    PUTV01.............. >2346 :     
    PUTVR............... >2332 :     
    PUTVRX.............. >2334 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAM.MSG1............ >F050 :     
    RAM.MSG2............ >F0A0 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28B6 :     
    RKSCAN.EXIT......... >290C :     
    ROM.FARJUMP......... >2FCA :     
    ROM.FARJUMP.ASSERT.CART >303C :     
    ROM.FARJUMP.ASSERT.LOWMEM >304A :     
    ROM.FARJUMP.BANKSWITCH.CALL >302C :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >3024 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3068 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >305E :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >305A :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >3014 :     
    ROM.FARJUMP.EXIT.... >3070 :     
    ROM.FARJUMP.RETURN.. >302E :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >6024 :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >38A0 :     
    RSSLOT.............. >2EF8 :     
    RUNLI1.............. >2F10 :     
    RUNLI2.............. >2F1C :     
    RUNLI3.............. >2F20 :     
    RUNLI3A............. >2F28 :     
    RUNLI4.............. >2F32 :     
    RUNLI5.............. >2F3C :     
    RUNLI6.............. >2F4A :     
    RUNLI7.............. >2F58 :     
    RUNLI9.............. >2F5C :     
    RUNLIA.............. >2F7E :     
    RUNLIB.............. >2F0C :     
    RUNLIC.............. >2FA2 :     
    RUNLID.............. >2FB8 :     
    RUNLIE.............. >2FC2 :     
    S16X16.............. >26BE :     
    S8X8................ >26B6 :     
    SAMS.LAYOUT......... >25EE :     
    SAMS.LAYOUT.COPY.... >263E :     
    SAMS.LAYOUT.COPY.DATA >2676 :     
    SAMS.LAYOUT.COPY.EXIT >266A :     
    SAMS.LAYOUT.COPY.LOOP >265C :     
    SAMS.LAYOUT.EXIT.... >2626 :     
    SAMS.LAYOUT.STANDARD >262E :     
    SAMS.MAPPING.OFF.... >25E0 :     
    SAMS.MAPPING.OFF.EXIT >25EA :     
    SAMS.MAPPING.ON..... >25D2 :     
    SAMS.MAPPING.ON.EXIT >25DC :     
    SAMS.PAGE.GET....... >253C :     
    SAMS.PAGE.GET.EXIT.. >256A :     
    SAMS.PAGE.SET....... >2572 :     
    SAMS.PAGE.SET.EXIT.. >25C6 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25B6 :     
    SCROFF.............. >2686 :     
    SCRON............... >268E :     
    SCRPAD.83C6......... >2912 :     
    SCRPAD.83FA......... >2914 :     
    SCRPAD.83FE......... >2916 :     
    SDEXI1.............. >28AE :     
    SDEXI2.............. >28B0 :     
    SDEXIT.............. >289C :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2836 :     
    SDPLA2.............. >2840 :     
    SDPLA3.............. >2842 :     
    SDPLAY.............. >282E :     
    SDPREP.............. >2818 :     
    SETX................ >26DC :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E84 :     
    SMAG1X.............. >26A6 :     
    SMAG2X.............. >26AE :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2216 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >0000 :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRITECURSOR........ >0001 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >7F10 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >7F10 :     
    STEVIE.80X60........ >7F1A :     
    STRING.GETLENC...... >2A9A :     
    STRING.GETLENC.EXIT. >2AE6 :     
    STRING.GETLENC.LOOP. >2AC8 :     
    STRING.GETLENC.PANIC >2ADE :     
    STRING.GETLENC.PUTLENGTH >2AD6 :     
    STRING.LTRIM........ >2A2E :     
    STRING.LTRIM.EXIT... >2A8E :     
    STRING.LTRIM.MOVE... >2A74 :     
    STRING.LTRIM.PANIC.. >2A86 :     
    STRING.LTRIM.SCAN... >2A68 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >3894 :     
    TASK.ONESHOT.EXIT... >389C :     
    TASK.VDP.COPY.SAT... >37DE :     
    TASK.VDP.COPY.SAT.CMDB >3806 :     
    TASK.VDP.COPY.SAT.EXIT >3874 :     
    TASK.VDP.COPY.SAT.FB >3816 :     
    TASK.VDP.COPY.SAT.FB.NORULER >382A :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >3860 :     
    TASK.VDP.COPY.SAT.WRITE >382E :     
    TASK.VDP.COPY.SAT.WRITE2 >386A :     
    TASK.VDP.CURSOR..... >3880 :     
    TASK.VDP.CURSOR.EXIT >388E :     
    TASK.VDP.PANES...... >705C :     
    TASK.VDP.PANES.EXIT. >7064 :     
    TIB.AUTOUNPK........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >77E0 :     
    TIBASIC.32X24....... >7F24 :     
    TIBASIC.32X30....... >7F2E :     
    TIBASIC.AM.TOGGLE... >75C4 :     
    TIBASIC.AM.TOGGLE.VECTOR >75CC :     
    TIBASIC.EXIT........ >7802 :     
    TIBASIC.UNCRUNCH.... >780C :     
    TIBASIC.UNCRUNCH.EXIT >7822 :     
    TIBASIC1............ >77BA :     
    TIBASIC2............ >77C2 :     
    TIBASIC3............ >77CA :     
    TIBASIC4............ >77D2 :     
    TIBASIC5............ >77DA :     
    TIMERS.............. >A064 :     
    TMDAT............... >2EA0 :     
    TMGR................ >2E04 :     
    TMGR1............... >2E08 :     
    TMGR10.............. >2E88 :     
    TMGR11.............. >2E96 :     
    TMGR12.............. >2E9A :     
    TMGR1A.............. >2E16 :     
    TMGR2............... >2E1C :     
    TMGR3............... >2E2C :     
    TMGR4............... >2E3E :     
    TMGR5............... >2E54 :     
    TMGR6............... >2E58 :     
    TMGR7............... >2E5C :     
    TMGR8............... >2E5E :     
    TMGR9............... >2E66 :     
    TMP0................ >0004 :     
    TMP006.............. >23E2 :     
    TMP007.............. >24D8 :     
    TMP008.............. >24B6 :     
    TMP011.............. >253A :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >29FE :     
    TRIMNUM_FILL........ >2A1C :     
    TRIMNUM_SCAN........ >2A0A :     
    TRIMNUM_SETLEN...... >2A16 :     
    TRMPVECTOR.......... >A034 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000C :     
    TV.COLORSCHEME.TABLE >38AE :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A238 :     
    TV.ERROR.ROWS....... >A22C :     
    TV.ERROR.VISIBLE.... >A22A :     
    TV.FG99.IMG.PTR..... >A232 :     
    TV.FJ.STACKPNT...... >A228 :     
    TV.FONT.PTR......... >A222 :     
    TV.FREE............. >A2D8 :     
    TV.INIT............. >331E :     
    TV.INIT.EXIT........ >3374 :     
    TV.LINETERM......... >A236 :     
    TV.MARKCOLOR........ >A21A :     
    TV.MC.FNAME......... >DEA0 :     
    TV.PAD.STRING....... >347A :     
    TV.PAD.STRING.EXIT.. >34E6 :     
    TV.PAD.STRING.LOOP.. >34D0 :     
    TV.PAD.STRING.PANIC. >34DE :     
    TV.PANE.FOCUS....... >A224 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >337E :     
    TV.RESET............ >338C :     
    TV.RESET.EXIT....... >33B2 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SAMS.MAXPAGE..... >0100 :     
    TV.SET.FONT......... >779E :     
    TV.SET.FONT.VECTOR.. >77A6 :     
    TV.SP2.CONF......... >A22E :     
    TV.SP2.STACK........ >A230 :     
    TV.SPECMSG.PTR...... >A234 :     
    TV.STRUCT........... >A200 :     
    TV.TABS.TABLE.LR.... >390E :     
    TV.TABS.TABLE.RL.... >391A :     
    TV.TASK.ONESHOT..... >A226 :     
    TV.UINT16.MPY....... >3444 :     
    TV.UINT16.PACK...... >33B6 :     
    TV.UINT16.PACK.DONE. >3430 :     
    TV.UINT16.PACK.ERROR >3428 :     
    TV.UINT16.PACK.EXIT. >3434 :     
    TV.UINT16.PACK.LOOP. >33FE :     
    TV.UINT16.UNPACK.... >344E :     
    TV.UINT16.UNPACK.EXIT >3474 :     
    TX4024.............. >21FC :     
    TX8024.............. >2206 :     
    TXT.ALPHA.DOWN...... >3C1E :     
    TXT.AUTOINS.OFF..... >3ACA :     
    TXT.AUTOINS.ON...... >3ABA :     
    TXT.AUTOINSERT...... >394A :     
    TXT.BLOCK.CLIP...... >39D0 :     
    TXT.BLOCK.COPY...... >3992 :     
    TXT.BLOCK.DEL....... >397E :     
    TXT.BLOCK.INSIDE.... >3D1E :     
    TXT.BLOCK.MOVE...... >39A4 :     
    TXT.BLOCK.PRINT..... >39EA :     
    TXT.BLOCK.SAVE...... >39B6 :     
    TXT.BOTTOM.......... >3938 :     
    TXT.CLEARMEM........ >39FE :     
    TXT.CMDB.PROMPT..... >3D4C :     
    TXT.COLORSCHEME..... >3D4E :     
    TXT.DELIM........... >3936 :     
    TXT.DONE.APPEND..... >3A34 :     
    TXT.DONE.CLIPBOARD.. >3A88 :     
    TXT.DONE.CLIPDEV.... >3A98 :     
    TXT.DONE.COPY....... >3A56 :     
    TXT.DONE.DELETE..... >3A76 :     
    TXT.DONE.INSERT..... >3A22 :     
    TXT.DONE.LOAD....... >3A12 :     
    TXT.DONE.MC......... >3AA6 :     
    TXT.DONE.PRINT...... >3A66 :     
    TXT.DONE.SAVE....... >3A46 :     
    TXT.FASTMODE........ >3ADA :     
    TXT.FILETYPE.DV80... >3B62 :     
    TXT.FILETYPE.NONE... >3C30 :     
    TXT.INSERT.......... >3944 :     
    TXT.IO.NOFILE....... >3CD8 :     
    TXT.IOERR.LOAD...... >3C90 :     
    TXT.IOERR.PRINT..... >3CBC :     
    TXT.IOERR.SAVE...... >3CA6 :     
    TXT.KB.............. >3B06 :     
    TXT.KEYMARKER....... >3C24 :     
    TXT.KEYS.BASIC1..... >3BF0 :     
    TXT.KEYS.BLOCK...... >3BBA :     
    TXT.KEYS.DEFAULT.... >3B70 :     
    TXT.KEYS.DEFAULTB... >3B90 :     
    TXT.LINES........... >3B0A :     
    TXT.LOADING......... >3952 :     
    TXT.M1.............. >3B68 :     
    TXT.M2.............. >3B6C :     
    TXT.MEMFULL.LOAD.... >3CF0 :     
    TXT.MSG.MASTCAT..... >3C3C :     
    TXT.MSG.TIBASIC..... >3C72 :     
    TXT.NEWFILE......... >3B10 :     
    TXT.OVRWRITE........ >393E :     
    TXT.PRINTING........ >396A :     
    TXT.SAVING.......... >395E :     
    TXT.STAR............ >3950 :     
    TXT.TIB1............ >3B1C :     
    TXT.TIB2............ >3B2A :     
    TXT.TIB3............ >3B38 :     
    TXT.TIB4............ >3B46 :     
    TXT.TIB5............ >3B54 :     
    TXT.UNCRUNCHING..... >3AE6 :     
    TXT.VERTLINE........ >3C22 :     
    TXT.WS1............. >3C26 :     
    TXT.WS2............. >3C28 :     
    TXT.WS3............. >3C2C :     
    TXT.WS4............. >3C30 :     
    TXT.WS5............. >3C36 :     
    UINT16.PACKED....... >A032 :     
    UINT16.UNPACKED..... >A02C :     
    UP.................. >26D4 :     
    VDP.COLORS.LINE..... >7794 :     
    VDP.COLORS.LINE.VECTOR >779C :     
    VDP.DUMP.FONT....... >778A :     
    VDP.DUMP.FONT.VECTOR >7792 :     
    VDP.DUMP.PATTERNS... >7780 :     
    VDP.DUMP.PATTERNS.VECTOR >7788 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PDT.BASE........ >1000 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDP.TAT.SIZE........ >0960 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >2860 :     
    VDPLA2.............. >2866 :     
    VDPLA3.............. >2876 :     
    VDPLAY.............. >2848 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22BA :     
    VDWA................ >22B6 :     
    VEC.1............... >7F40 :     
    VEC.10.............. >7F52 :     
    VEC.11.............. >7F54 :     
    VEC.12.............. >7F56 :     
    VEC.13.............. >7F58 :     
    VEC.14.............. >7F5A :     
    VEC.15.............. >7F5C :     
    VEC.16.............. >7F5E :     
    VEC.17.............. >7F60 :     
    VEC.18.............. >7F62 :     
    VEC.19.............. >7F64 :     
    VEC.2............... >7F42 :     
    VEC.20.............. >7F66 :     
    VEC.21.............. >7F68 :     
    VEC.22.............. >7F6A :     
    VEC.23.............. >7F6C :     
    VEC.24.............. >7F6E :     
    VEC.25.............. >7F70 :     
    VEC.26.............. >7F72 :     
    VEC.27.............. >7F74 :     
    VEC.28.............. >7F76 :     
    VEC.29.............. >7F78 :     
    VEC.3............... >7F44 :     
    VEC.30.............. >7F7A :     
    VEC.31.............. >7F7C :     
    VEC.32.............. >7F7E :     
    VEC.33.............. >7F80 :     
    VEC.34.............. >7F82 :     
    VEC.35.............. >7F84 :     
    VEC.36.............. >7F86 :     
    VEC.37.............. >7F88 :     
    VEC.38.............. >7F8A :     
    VEC.39.............. >7F8C :     
    VEC.4............... >7F46 :     
    VEC.40.............. >7F8E :     
    VEC.41.............. >7F90 :     
    VEC.42.............. >7F92 :     
    VEC.43.............. >7F94 :     
    VEC.44.............. >7F96 :     
    VEC.45.............. >7F98 :     
    VEC.46.............. >7F9A :     
    VEC.47.............. >7F9C :     
    VEC.48.............. >7F9E :     
    VEC.49.............. >7FA0 :     
    VEC.5............... >7F48 :     
    VEC.50.............. >7FA2 :     
    VEC.51.............. >7FA4 :     
    VEC.52.............. >7FA6 :     
    VEC.53.............. >7FA8 :     
    VEC.54.............. >7FAA :     
    VEC.55.............. >7FAC :     
    VEC.56.............. >7FAE :     
    VEC.57.............. >7FB0 :     
    VEC.58.............. >7FB2 :     
    VEC.59.............. >7FB4 :     
    VEC.6............... >7F4A :     
    VEC.60.............. >7FB6 :     
    VEC.61.............. >7FB8 :     
    VEC.62.............. >7FBA :     
    VEC.63.............. >7FBC :     
    VEC.64.............. >7FBE :     
    VEC.65.............. >7FC0 :     
    VEC.66.............. >7FC2 :     
    VEC.67.............. >7FC4 :     
    VEC.68.............. >7FC6 :     
    VEC.69.............. >7FC8 :     
    VEC.7............... >7F4C :     
    VEC.70.............. >7FCA :     
    VEC.71.............. >7FCC :     
    VEC.72.............. >7FCE :     
    VEC.73.............. >7FD0 :     
    VEC.74.............. >7FD2 :     
    VEC.75.............. >7FD4 :     
    VEC.76.............. >7FD6 :     
    VEC.77.............. >7FD8 :     
    VEC.78.............. >7FDA :     
    VEC.79.............. >7FDC :     
    VEC.8............... >7F4E :     
    VEC.80.............. >7FDE :     
    VEC.81.............. >7FE0 :     
    VEC.82.............. >7FE2 :     
    VEC.83.............. >7FE4 :     
    VEC.84.............. >7FE6 :     
    VEC.85.............. >7FE8 :     
    VEC.86.............. >7FEA :     
    VEC.87.............. >7FEC :     
    VEC.88.............. >7FEE :     
    VEC.89.............. >7FF0 :     
    VEC.9............... >7F50 :     
    VEC.90.............. >7FF2 :     
    VEC.91.............. >7FF4 :     
    VEC.92.............. >7FF6 :     
    VEC.93.............. >7FF8 :     
    VEC.94.............. >7FFA :     
    VEC.95.............. >7FFC :     
    VEC.96.............. >7FFE :     
    VGETB............... >22E2 :     
    VIDTA1.............. >2314 :     
    VIDTAB.............. >22F8 :     
    VPUTB............... >22C8 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B78 :     
    XCPU.SCRPAD.PGOUT... >2B4A :     
    XFG99............... >2DC6 :     
    XFILE.CLOSE......... >2D32 :     
    XFILE.OPEN.......... >2D10 :     
    XFILM............... >223C :     
    XFILV............... >2294 :     
    XIDTAB.............. >22FA :     
    XLSLOT.............. >2EEC :     
    XPYM2M.............. >24E0 :     
    XPYM2V.............. >248C :     
    XPYV2M.............. >24BE :     
    XROM.FARJUMP........ >2FE2 :     
    XROM.FARJUMP.PUSH_RETURN >2FF2 :     
    XSAMS.LAYOUT........ >25F0 :     
    XSAMS.PAGE.GET...... >253E :     
    XSAMS.PAGE.SET...... >2576 :     
    XSETX............... >26DE :     
    XSTRING.GETLENC..... >2AB4 :     
    XSTRING.LTRIM....... >2A4A :     
    XUTST0.............. >2420 :     
    XUTSTR.............. >2422 :     
    XVGETB.............. >22E4 :     
    XVPUTB.............. >22CC :     
    YX2PI1.............. >2716 :     
    YX2PI2.............. >271C :     
    YX2PI3.............. >2726 :     
    YX2PNT.............. >23FA :     
    YX2PX............... >26E8 :     
    YX2PXX.............. >26EC :     
    YX2PXX_C80.......... >2728 :     
    YX2PXX_NORMAL....... >270C :     
    YX2PXX_Y_CALC....... >2710 :     
    _EDKEY.ACTION.SCROLL >63DA :     
    _EDKEY.ACTION.SCROLL.EXIT >63DE :     
    _FILE.RECORD.FOP.... >2D6E :     
    _FILE.RECORD.FOP.EXIT >2DC0 :     
    _FILE.RECORD.FOP.OPTIMIZED >2DA4 :     
    _FILE.RECORD.FOP.PAB >2DA8 :     
    _IDX.ENTRY.DELETE.REORG >3590 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >3598 :     
    _IDX.ENTRY.INSERT.REORG >3604 :     
    _IDX.ENTRY.INSERT.REORG.CRASH >360A :     
    _IDX.ENTRY.INSERT.REORG.LOOP >3632 :     
    _IDX.SAMS.MAPCOLUMN.OFF >31BC :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >31EA :     
    _IDX.SAMS.MAPCOLUMN.ON >3188 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >31B2 :     
    _IDX.SAMSPAGE.GET... >31F6 :     
    _IDX.SAMSPAGE.GET.EXIT >323C :     
    _TRAMPOLINE.BANK3... >754E :     
    _TRAMPOLINE.BANK3.RET >7600 :     
    _TRAMPOLINE.BANK4.RET >7702 :     
    _TRAMPOLINE.BANK5.RET >776E :     
    _TRAMPOLINE.BANK6.RET >77A8 :     
