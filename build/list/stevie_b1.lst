XAS99 CROSS-ASSEMBLER   VERSION 3.4.0
     **** ****     > stevie_b1.asm
0001               ********************************************************************************
0002               *   Stevie
0003               *   Modern Programming Editor for the Texas Instruments TI-99/4a Home Computer.
0004               *   Copyright (C) 2018-2022 / Filip van Vooren
0005               *
0006               *   This program is free software: you can redistribute it and/or modify
0007               *   it under the terms of the GNU General Public License as published by
0008               *   the Free Software Foundation, either version 3 of the License, or
0009               *   (at your option) any later version.
0010               *
0011               *   This program is distributed in the hope that it will be useful,
0012               *   but WITHOUT ANY WARRANTY; without even the implied warranty of
0013               *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
0014               *   GNU General Public License for more details.
0015               *
0016               *   You should have received a copy of the GNU General Public License
0017               *   along with this program.  If not, see <https://www.gnu.org/licenses/>.
0018               ********************************************************************************
0019               * File: stevie_b1.asm
0020               *
0021               * Bank 1 "James"
0022               * Editor core
0023               ********************************************************************************
0024                       copy  "buildinfo.asm"       ; "build/.buildinfo/buildinfo.asm"
     **** ****     > buildinfo.asm
0001               ***************************************************************
0002               * BUILD: 220724-1742300
0003               ***************************************************************
                   < stevie_b1.asm
0025                       copy  "rom.build.asm"       ; Cartridge build options
     **** ****     > rom.build.asm
0001               * FILE......: rom.build.asm
0002               * Purpose...: Cartridge build options
0003               
0004               *--------------------------------------------------------------
0005               * Skip unused spectra2 code modules for reduced code size
0006               *--------------------------------------------------------------
0007      0001     skip_rom_bankswitch       equ  1       ; Skip support for ROM bankswitching
0008      0001     skip_grom_cpu_copy        equ  1       ; Skip GROM to CPU copy functions
0009      0001     skip_grom_vram_copy       equ  1       ; Skip GROM to VDP vram copy functions
0010      0001     skip_vdp_vchar            equ  1       ; Skip vchar, xvchar
0011      0001     skip_vdp_boxes            equ  1       ; Skip filbox, putbox
0012      0001     skip_vdp_bitmap           equ  1       ; Skip bitmap functions
0013      0001     skip_vdp_viewport         equ  1       ; Skip viewport functions
0014      0001     skip_cpu_rle_compress     equ  1       ; Skip CPU RLE compression
0015      0001     skip_cpu_rle_decompress   equ  1       ; Skip CPU RLE decompression
0016      0001     skip_vdp_rle_decompress   equ  1       ; Skip VDP RLE decompression
0017      0001     skip_vdp_px2yx_calc       equ  1       ; Skip pixel to YX calculation
0018      0001     skip_speech_detection     equ  1       ; Skip speech synthesizer detection
0019      0001     skip_speech_player        equ  1       ; Skip inclusion of speech player code
0020      0001     skip_virtual_keyboard     equ  1       ; Skip virtual keyboard scan
0021      0001     skip_random_generator     equ  1       ; Skip random functions
0022      0001     skip_cpu_crc16            equ  1       ; Skip CPU memory CRC-16 calculation
0023      0001     skip_sams_layout          equ  1       ; Skip SAMS memory layout routine
0024                                                      ; \
0025                                                      ; | The SAMS support module needs to be
0026                                                      ; | embedded in the cartridge space, so
0027                                                      ; / do not load it here.
0028               
0029               *--------------------------------------------------------------
0030               * SPECTRA2 / Stevie startup options
0031               *--------------------------------------------------------------
0032      0001     startup_keep_vdpmemory    equ  1       ; Do not clear VDP vram on start
0033      6038     kickstart.resume          equ  >6038   ; Resume Stevie session
0034      6040     kickstart.code1           equ  >6040   ; Uniform aorg entry addr accross banks
0035      6046     kickstart.code2           equ  >6046   ; Uniform aorg entry addr accross banks
0036      0001     rom0_kscan_on             equ  1       ; Use KSCAN in console ROM#0
0037               
0038               
0039               
0040               *--------------------------------------------------------------
0041               * classic99 and JS99er emulators are mutually exclusive.
0042               * At the time of writing JS99er has full F18a compatibility.
0043               *
0044               * If build target is the JS99er emulator or an F18a equiped TI-99/4a
0045               * then set the 'full_f18a_support' equate to 1.
0046               *
0047               * When targetting the classic99 emulator then set the
0048               * 'full_f18a_support' equate to 0.
0049               * This will build the trimmed down version with 24x80 resolution.
0050               *--------------------------------------------------------------
0051      0000     debug                     equ  0       ; Turn on debugging mode
0052               ; full_f18a_support       equ  1       ; 30 rows mode with sprite cursor
0053               ; full_f18a_support       equ  0       ; 24 rows mode with char cursor
0054               
0055               *--------------------------------------------------------------
0056               * JS99er F18a 30x80, no FG99 advanced mode
0057               *--------------------------------------------------------------
0059      0001     device.f18a               equ  1       ; F18a GPU
0060      0000     device.9938               equ  0       ; 9938 GPU
0061      0000     device.fg99.mode.adv      equ  0       ; FG99 advanced mode off
0063               
0064               
0065               
0066               *--------------------------------------------------------------
0067               * Classic99 F18a 24x80, no FG99 advanced mode
0068               *--------------------------------------------------------------
0075               
0076               
0077               
0078               *--------------------------------------------------------------
0079               * ROM layout
0080               *--------------------------------------------------------------
0081      7F00     bankx.crash.showbank      equ  >7f00   ; Show ROM bank in CPU crash screen
0082      7FC0     bankx.vectab              equ  >7fc0   ; Start address of vector table
                   < stevie_b1.asm
0026                       copy  "rom.order.asm"       ; ROM bank order "non-inverted"
     **** ****     > rom.order.asm
0001               * FILE......: rom.order.asm
0002               * Purpose...: Equates with CPU write addresses for switching banks
0003               
0004               *--------------------------------------------------------------
0005               * ROM 8K/4K banks. Bank order (non-inverted)
0006               *--------------------------------------------------------------
0007      6000     bank0.rom                 equ  >6000   ; Jill
0008      6002     bank1.rom                 equ  >6002   ; James
0009      6004     bank2.rom                 equ  >6004   ; Jacky
0010      6006     bank3.rom                 equ  >6006   ; John
0011      6008     bank4.rom                 equ  >6008   ; Janine
0012      600A     bank5.rom                 equ  >600a   ; Jumbo
0013      600C     bank6.rom                 equ  >600c   ; Jenifer
0014      600E     bank7.rom                 equ  >600e   ; Jonas
0015               *--------------------------------------------------------------
0016               * RAM 4K banks (Only valid in advanced mode FG99)
0017               *--------------------------------------------------------------
0018      6800     bank0.ram                 equ  >6800   ; Jill
0019      6802     bank1.ram                 equ  >6802   ; James
0020      6804     bank2.ram                 equ  >6804   ; Jacky
0021      6806     bank3.ram                 equ  >6806   ; John
0022      6808     bank4.ram                 equ  >6808   ; Janine
0023      680A     bank5.ram                 equ  >680a   ; Jumbo
0024      680C     bank6.ram                 equ  >680c   ; Jenifer
0025      680E     bank7.ram                 equ  >680e   ; Jonas
                   < stevie_b1.asm
0027                       copy  "equates.asm"         ; Equates Stevie configuration
     **** ****     > equates.asm
0001               * FILE......: equates.asm
0002               * Purpose...: The main equates file for Stevie editor
0003               
0004               
0005               *===============================================================================
0006               * Memory map
0007               * ==========
0008               *
0009               * CARTRIDGE SPACE (6000-7fff)
0010               *
0011               *     Mem range   Bytes    BANK   Purpose
0012               *     =========   =====    ====   ==================================
0013               *     6000-633f               0   Cartridge header
0014               *     6040-7fff               0   SP2 library + Stevie library
0015               *                                 relocated to RAM space
0016               *     ..............................................................
0017               *     6000-633f               1   Cartridge header
0018               *     6040-7fbf               1   Stevie program code
0019               *     7fc0-7fff      64       1   Vector table (32 vectors)
0020               *     ..............................................................
0021               *     6000-633f               2   Cartridge header
0022               *     6040-7fbf               2   Stevie program code
0023               *     7fc0-7fff      64       2   Vector table (32 vectors)
0024               *     ..............................................................
0025               *     6000-633f               3   Cartridge header
0026               *     6040-7fbf               3   Stevie program code
0027               *     7fc0-7fff      64       3   Vector table (32 vectors)
0028               *     ..............................................................
0029               *     6000-633f               4   Cartridge header
0030               *     6040-7fbf               4   Stevie program code
0031               *     7fc0-7fff      64       4   Vector table (32 vectors)
0032               *     ..............................................................
0033               *     6000-633f               5   Cartridge header
0034               *     6040-7fbf               5   Stevie program code
0035               *     7fc0-7fff      64       5   Vector table (32 vectors)
0036               *     ..............................................................
0037               *     6000-633f               6   Cartridge header
0038               *     6040-7fbf               6   Stevie program code
0039               *     7fc0-7fff      64       6   Vector table (32 vectors)
0040               *     ..............................................................
0041               *     6000-633f               7   Cartridge header
0042               *     6040-7fbf               7   SP2 library in cartridge space
0043               *     7fc0-7fff      64       7   Vector table (32 vectors)
0044               *
0045               *
0046               *
0047               * VDP RAM F18a (0000-47ff)
0048               *
0049               *     Mem range   Bytes    Hex    Purpose
0050               *     =========   =====   =====   =================================
0051               *     0000-095f    2400   >0960   PNT: Pattern Name Table
0052               *     0960-09af      80   >0050   FIO: File record buffer (DIS/VAR 80)
0053               *     0fc0-0fff                   PCT: Color Table (not used in 80 cols mode)
0054               *     1000-17ff    2048   >0800   PDT: Pattern Descriptor Table
0055               *     1800-215f    2400   >0960   TAT: Tile Attribute Table
0056               *                                      (Position based colors F18a, 80 colums)
0057               *     2180                        SAT: Sprite Attribute Table
0058               *                                      (Cursor in F18a, 80 cols mode)
0059               *     2800                        SPT: Sprite Pattern Table
0060               *                                      (Cursor in F18a, 80 columns, 2K boundary)
0061               *===============================================================================
0062               
0063               
0064               *--------------------------------------------------------------
0065               * Graphics mode selection
0066               *--------------------------------------------------------------
0068               
0069      001D     pane.botrow               equ  29      ; Bottom row on screen
0070               
0076               *--------------------------------------------------------------
0077               * Stevie Dialog / Pane specific equates
0078               *--------------------------------------------------------------
0079      0000     pane.focus.fb             equ  0       ; Editor pane has focus
0080      0001     pane.focus.cmdb           equ  1       ; Command buffer pane has focus
0081               ;-----------------------------------------------------------------
0082               ;   Dialog ID's
0083               ;-----------------------------------------------------------------
0084      000A     id.dialog.load            equ  10      ; "Load file"
0085      000B     id.dialog.save            equ  11      ; "Save file"
0086      000C     id.dialog.saveblock       equ  12      ; "Save block to file"
0087      000D     id.dialog.insert          equ  13      ; "Insert file"
0088      000E     id.dialog.append          equ  14      ; "Append file"
0089      000F     id.dialog.print           equ  15      ; "Print file"
0090      0010     id.dialog.printblock      equ  16      ; "Print block"
0091      0011     id.dialog.clipdev         equ  17      ; "Configure clipboard"
0092               ;-----------------------------------------------------------------
0093               ;   Dialog ID's >= 100 indicate that command prompt should be
0094               ;   hidden and no characters added to CMDB keyboard buffer.
0095               ;-----------------------------------------------------------------
0096      0064     id.dialog.menu            equ  100     ; "Main Menu"
0097      0065     id.dialog.unsaved         equ  101     ; "Unsaved changes"
0098      0066     id.dialog.block           equ  102     ; "Block move/copy/delete/print/..."
0099      0067     id.dialog.clipboard       equ  103     ; "Copy clipboard to line ..."
0100      0068     id.dialog.help            equ  104     ; "About"
0101      0069     id.dialog.file            equ  105     ; "File"
0102      006A     id.dialog.cartridge       equ  106     ; "Cartridge"
0103      006B     id.dialog.basic           equ  107     ; "TI Basic"
0104      006C     id.dialog.config          equ  108     ; "Configure"
0105      006D     id.dialog.editor          equ  109     ; "Configure editor"
0106      006E     id.dialog.shortcuts       equ  110     ; "Shortcuts"
0107               *--------------------------------------------------------------
0108               * Suffix characters for clipboards
0109               *--------------------------------------------------------------
0110      3100     clip1                     equ  >3100   ; '1'
0111      3200     clip2                     equ  >3200   ; '2'
0112      3300     clip3                     equ  >3300   ; '3'
0113      3400     clip4                     equ  >3400   ; '4'
0114      3500     clip5                     equ  >3500   ; '5'
0115               *--------------------------------------------------------------
0116               * Keyboard flags in Stevie
0117               *--------------------------------------------------------------
0118      0001     kbf.kbclear               equ  >0001   ;  Keyboard buffer cleared / @w$0001
0119               
0120               *--------------------------------------------------------------
0121               * File work mode
0122               *--------------------------------------------------------------
0123      0001     id.file.loadfile          equ  1       ; Load file
0124      0002     id.file.insertfile        equ  2       ; Insert file
0125      0003     id.file.appendfile        equ  3       ; Append file
0126      0004     id.file.savefile          equ  4       ; Save file
0127      0005     id.file.saveblock         equ  5       ; Save block to file
0128      0006     id.file.clipblock         equ  6       ; Save block to clipboard
0129      0007     id.file.printfile         equ  7       ; Print file
0130      0008     id.file.printblock        equ  8       ; Print block
0131               *--------------------------------------------------------------
0132               * Stevie core 1 RAM                   @>a000-a0ff   (256 bytes)
0133               *--------------------------------------------------------------
0134      A000     core1.top         equ  >a000           ; Structure begin
0135      A000     magic.str.w1      equ  core1.top + 0   ; Magic string word 1
0136      A002     magic.str.w2      equ  core1.top + 2   ; Magic string word 2
0137      A004     magic.str.w3      equ  core1.top + 4   ; Magic string word 3
0138      A006     parm1             equ  core1.top + 6   ; Function parameter 1
0139      A008     parm2             equ  core1.top + 8   ; Function parameter 2
0140      A00A     parm3             equ  core1.top + 10  ; Function parameter 3
0141      A00C     parm4             equ  core1.top + 12  ; Function parameter 4
0142      A00E     parm5             equ  core1.top + 14  ; Function parameter 5
0143      A010     parm6             equ  core1.top + 16  ; Function parameter 6
0144      A012     parm7             equ  core1.top + 18  ; Function parameter 7
0145      A014     parm8             equ  core1.top + 20  ; Function parameter 8
0146      A016     outparm1          equ  core1.top + 22  ; Function output parameter 1
0147      A018     outparm2          equ  core1.top + 24  ; Function output parameter 2
0148      A01A     outparm3          equ  core1.top + 26  ; Function output parameter 3
0149      A01C     outparm4          equ  core1.top + 28  ; Function output parameter 4
0150      A01E     outparm5          equ  core1.top + 30  ; Function output parameter 5
0151      A020     outparm6          equ  core1.top + 32  ; Function output parameter 6
0152      A022     outparm7          equ  core1.top + 34  ; Function output parameter 7
0153      A024     outparm8          equ  core1.top + 36  ; Function output parameter 8
0154      A026     kbflags           equ  core1.top + 38  ; Keyboard control flags
0155      A028     keycode1          equ  core1.top + 40  ; Current key scanned
0156      A02A     keycode2          equ  core1.top + 42  ; Previous key scanned
0157      A02C     unpacked.string   equ  core1.top + 44  ; 6 char string with unpacked uin16
0158      A032     trmpvector        equ  core1.top + 50  ; Vector trampoline (if p1|tmp1 = >ffff)
0159      A034     core1.free1       equ  core1.top + 52  ; 52-85 **free**
0160      A056     ramsat            equ  core1.top + 86  ; Sprite Attr. Table in RAM (14 bytes)
0161      A064     timers            equ  core1.top + 100 ; Timers (80 bytes)
0162                                 ;--------------------------------------------
0163                                 ; TI Basic related
0164                                 ;--------------------------------------------
0165      A0B4     tib.session       equ  core1.top + 180 ; Current TI-Basic session (1-5)
0166      A0B6     tib.status1       equ  core1.top + 182 ; Status flags TI Basic session 1
0167      A0B8     tib.status2       equ  core1.top + 184 ; Status flags TI Basic session 2
0168      A0BA     tib.status3       equ  core1.top + 186 ; Status flags TI Basic session 3
0169      A0BC     tib.status4       equ  core1.top + 188 ; Status flags TI Basic session 4
0170      A0BE     tib.status5       equ  core1.top + 190 ; Status flags TI Basic session 5
0171      A0C0     tib.automode      equ  core1.top + 192 ; TI-Basic AutoMode (crunch/uncrunch)
0172      A0C2     tib.stab.ptr      equ  core1.top + 194 ; Pointer to TI-Basic SAMS page table
0173      A0C4     tib.scrpad.ptr    equ  core1.top + 196 ; Pointer to TI-Basic scratchpad in SAMS
0174      A0C6     tib.lnt.top.ptr   equ  core1.top + 198 ; Pointer to top of line number table
0175      A0C8     tib.lnt.bot.ptr   equ  core1.top + 200 ; Pointer to bottom of line number table
0176      A0CA     tib.symt.top.ptr  equ  core1.top + 202 ; Pointer to top of symbol table
0177      A0CC     tib.symt.bot.ptr  equ  core1.top + 204 ; Pointer to bottom of symbol table
0178      A0CE     tib.strs.top.ptr  equ  core1.top + 206 ; Pointer to top of string space
0179      A0D0     tib.strs.bot.ptr  equ  core1.top + 208 ; Pointer to bottom of string space
0180      A0D2     tib.lines         equ  core1.top + 210 ; Number of lines in TI Basic program
0181      A0D4     core1.free2       equ  core1.top + 212 ; **free* up to 233
0182      A0EA     tib.samstab.ptr   equ  core1.top + 234 ; Pointer to active SAMS mem layout table
0183      A0EC     tib.var1          equ  core1.top + 236 ; Temp variable 1
0184      A0EE     tib.var2          equ  core1.top + 238 ; Temp variable 2
0185      A0F0     tib.var3          equ  core1.top + 240 ; Temp variable 3
0186      A0F2     tib.var4          equ  core1.top + 242 ; Temp variable 4
0187      A0F4     tib.var5          equ  core1.top + 244 ; Temp variable 5
0188      A0F6     tib.var6          equ  core1.top + 246 ; Temp variable 6
0189      A0F8     tib.var7          equ  core1.top + 248 ; Temp variable 7
0190      A0FA     tib.var8          equ  core1.top + 250 ; Temp variable 8
0191      A0FC     tib.var9          equ  core1.top + 252 ; Temp variable 9
0192      A0FE     tib.var10         equ  core1.top + 254 ; Temp variable 10
0193      A100     core1.free        equ  core1.top + 256 ; End of structure
0194               *--------------------------------------------------------------
0195               * Stevie core 2 RAM                   @>a100-a1ff   (256 bytes)
0196               *--------------------------------------------------------------
0197      A100     core2.top         equ  >a100           ; Structure begin
0198      A100     rambuf            equ  core2.top       ; RAM workbuffer
0199      A200     core2.free        equ  core2.top + 256 ; End of structure
0200               *--------------------------------------------------------------
0201               * Stevie Editor shared structures     @>a200-a2ff   (256 bytes)
0202               *--------------------------------------------------------------
0203      A200     tv.top            equ  >a200           ; Structure begin
0204      A200     tv.sams.2000      equ  tv.top + 0      ; SAMS page in window >2000-2fff
0205      A202     tv.sams.3000      equ  tv.top + 2      ; SAMS page in window >3000-3fff
0206      A204     tv.sams.a000      equ  tv.top + 4      ; SAMS page in window >a000-afff
0207      A206     tv.sams.b000      equ  tv.top + 6      ; SAMS page in window >b000-bfff
0208      A208     tv.sams.c000      equ  tv.top + 8      ; SAMS page in window >c000-cfff
0209      A20A     tv.sams.d000      equ  tv.top + 10     ; SAMS page in window >d000-dfff
0210      A20C     tv.sams.e000      equ  tv.top + 12     ; SAMS page in window >e000-efff
0211      A20E     tv.sams.f000      equ  tv.top + 14     ; SAMS page in window >f000-ffff
0212      A210     tv.ruler.visible  equ  tv.top + 16     ; Show ruler with tab positions
0213      A212     tv.colorscheme    equ  tv.top + 18     ; Current color scheme (0-xx)
0214      A214     tv.curshape       equ  tv.top + 20     ; Cursor shape and color (sprite)
0215      A216     tv.curcolor       equ  tv.top + 22     ; Cursor color1 + color2 (color scheme)
0216      A218     tv.color          equ  tv.top + 24     ; FG/BG-color framebuffer + status lines
0217      A21A     tv.markcolor      equ  tv.top + 26     ; FG/BG-color marked lines in framebuffer
0218      A21C     tv.busycolor      equ  tv.top + 28     ; FG/BG-color bottom line when busy
0219      A21E     tv.rulercolor     equ  tv.top + 30     ; FG/BG-color ruler line
0220      A220     tv.cmdb.hcolor    equ  tv.top + 32     ; FG/BG-color command buffer header line
0221      A222     tv.pane.focus     equ  tv.top + 34     ; Identify pane that has focus
0222      A224     tv.task.oneshot   equ  tv.top + 36     ; Pointer to one-shot routine
0223      A226     tv.fj.stackpnt    equ  tv.top + 38     ; Pointer to farjump return stack
0224      A228     tv.error.visible  equ  tv.top + 40     ; Error pane visible
0225      A22A     tv.error.rows     equ  tv.top + 42     ; Number of rows in error pane
0226      A22C     tv.sp2.conf       equ  tv.top + 44     ; Backup of SP2 config register
0227      A22E     tv.sp2.stack      equ  tv.top + 46     ; Backup of SP2 stack register
0228      A230     tv.error.msg      equ  tv.top + 48     ; Error message (max. 160 characters)
0229      A2D0     tv.free           equ  tv.top + 208    ; End of structure
0230               *--------------------------------------------------------------
0231               * Frame buffer structure              @>a300-a3ff   (256 bytes)
0232               *--------------------------------------------------------------
0233      A300     fb.struct         equ  >a300           ; Structure begin
0234      A300     fb.top.ptr        equ  fb.struct       ; Pointer to frame buffer
0235      A302     fb.current        equ  fb.struct + 2   ; Pointer to current pos. in frame buffer
0236      A304     fb.topline        equ  fb.struct + 4   ; Top line in frame buffer (matching
0237                                                      ; line X in editor buffer).
0238      A306     fb.row            equ  fb.struct + 6   ; Current row in frame buffer
0239                                                      ; (offset 0 .. @fb.scrrows)
0240      A308     fb.row.length     equ  fb.struct + 8   ; Length of current row in frame buffer
0241      A30A     fb.row.dirty      equ  fb.struct + 10  ; Current row dirty flag in frame buffer
0242      A30C     fb.column         equ  fb.struct + 12  ; Current column (0-79) in frame buffer
0243      A30E     fb.colsline       equ  fb.struct + 14  ; Columns per line in frame buffer
0244      A310     fb.vwco           equ  fb.struct + 16  ; View window column offset (0-xxx)
0245      A312     fb.colorize       equ  fb.struct + 18  ; M1/M2 colorize refresh required
0246      A314     fb.curtoggle      equ  fb.struct + 20  ; Cursor shape toggle
0247      A316     fb.yxsave         equ  fb.struct + 22  ; Copy of cursor YX position
0248      A318     fb.dirty          equ  fb.struct + 24  ; Frame buffer dirty flag
0249      A31A     fb.status.dirty   equ  fb.struct + 26  ; Status line(s) dirty flag
0250      A31C     fb.scrrows        equ  fb.struct + 28  ; Rows on physical screen for framebuffer
0251      A31E     fb.scrrows.max    equ  fb.struct + 30  ; Max # of rows on physical screen for fb
0252      A320     fb.ruler.sit      equ  fb.struct + 32  ; 80 char ruler  (no length-prefix!)
0253      A370     fb.ruler.tat      equ  fb.struct + 112 ; 80 char colors (no length-prefix!)
0254      A3C0     fb.free           equ  fb.struct + 192 ; End of structure
0255               *--------------------------------------------------------------
0256               * File handle structure               @>a400-a4ff   (256 bytes)
0257               *--------------------------------------------------------------
0258      A400     fh.struct         equ  >a400           ; stevie file handling structures
0259               ;***********************************************************************
0260               ; ATTENTION
0261               ; The dsrlnk variables must form a continuous memory block and keep
0262               ; their order!
0263               ;***********************************************************************
0264      A400     dsrlnk.dsrlws     equ  fh.struct       ; Address of dsrlnk workspace 32 bytes
0265      A420     dsrlnk.namsto     equ  fh.struct + 32  ; 8-byte RAM buf for holding device name
0266      A428     dsrlnk.sav8a      equ  fh.struct + 40  ; Save parm (8 or A) after "blwp @dsrlnk"
0267      A42A     dsrlnk.savcru     equ  fh.struct + 42  ; CRU address of device in prev. DSR call
0268      A42C     dsrlnk.savent     equ  fh.struct + 44  ; DSR entry addr of prev. DSR call
0269      A42E     dsrlnk.savpab     equ  fh.struct + 46  ; Pointer to Device or Subprogram in PAB
0270      A430     dsrlnk.savver     equ  fh.struct + 48  ; Version used in prev. DSR call
0271      A432     dsrlnk.savlen     equ  fh.struct + 50  ; Length of DSR name of prev. DSR call
0272      A434     dsrlnk.flgptr     equ  fh.struct + 52  ; Pointer to VDP PAB byte 1 (flag byte)
0273      A436     fh.pab.ptr        equ  fh.struct + 54  ; Pointer to VDP PAB, for level 3 FIO
0274      A438     fh.pabstat        equ  fh.struct + 56  ; Copy of VDP PAB status byte
0275      A43A     fh.ioresult       equ  fh.struct + 58  ; DSRLNK IO-status after file operation
0276      A43C     fh.records        equ  fh.struct + 60  ; File records counter
0277      A43E     fh.reclen         equ  fh.struct + 62  ; Current record length
0278      A440     fh.kilobytes      equ  fh.struct + 64  ; Kilobytes processed (read/written)
0279      A442     fh.counter        equ  fh.struct + 66  ; Counter used in stevie file operations
0280      A444     fh.fname.ptr      equ  fh.struct + 68  ; Pointer to device and filename
0281      A446     fh.sams.page      equ  fh.struct + 70  ; Current SAMS page during file operation
0282      A448     fh.sams.hipage    equ  fh.struct + 72  ; Highest SAMS page in file operation
0283      A44A     fh.fopmode        equ  fh.struct + 74  ; FOP mode (File Operation Mode)
0284      A44C     fh.filetype       equ  fh.struct + 76  ; Value for filetype/mode (PAB byte 1)
0285      A44E     fh.offsetopcode   equ  fh.struct + 78  ; Set to >40 for skipping VDP buffer
0286      A450     fh.callback1      equ  fh.struct + 80  ; Pointer to callback function 1
0287      A452     fh.callback2      equ  fh.struct + 82  ; Pointer to callback function 2
0288      A454     fh.callback3      equ  fh.struct + 84  ; Pointer to callback function 3
0289      A456     fh.callback4      equ  fh.struct + 86  ; Pointer to callback function 4
0290      A458     fh.callback5      equ  fh.struct + 88  ; Pointer to callback function 5
0291      A45A     fh.workmode       equ  fh.struct + 90  ; Working mode (used in callbacks)
0292      A45C     fh.kilobytes.prev equ  fh.struct + 92  ; Kilobytes processed (previous)
0293      A45E     fh.line           equ  fh.struct + 94  ; Editor buffer line currently processing
0294      A460     fh.temp1          equ  fh.struct + 96  ; Temporary variable 1
0295      A462     fh.temp2          equ  fh.struct + 98  ; Temporary variable 2
0296      A464     fh.temp3          equ  fh.struct +100  ; Temporary variable 3
0297      A466     fh.membuffer      equ  fh.struct +102  ; 80 bytes file memory buffer
0298      A4B6     fh.free           equ  fh.struct +182  ; End of structure
0299      0960     fh.vrecbuf        equ  >0960           ; VDP address record buffer
0300      0A60     fh.vpab           equ  >0a60           ; VDP address PAB
0301               *--------------------------------------------------------------
0302               * Editor buffer structure             @>a500-a5ff   (256 bytes)
0303               *--------------------------------------------------------------
0304      A500     edb.struct        equ  >a500           ; Begin structure
0305      A500     edb.top.ptr       equ  edb.struct      ; Pointer to editor buffer
0306      A502     edb.index.ptr     equ  edb.struct + 2  ; Pointer to index
0307      A504     edb.lines         equ  edb.struct + 4  ; Total lines in editor buffer - 1
0308      A506     edb.dirty         equ  edb.struct + 6  ; Editor buffer dirty (Text changed!)
0309      A508     edb.next_free.ptr equ  edb.struct + 8  ; Pointer to next free line
0310      A50A     edb.insmode       equ  edb.struct + 10 ; Insert mode (>ffff = insert)
0311      A50C     edb.autoinsert    equ  edb.struct + 12 ; Auto-insert on ENTER flag (>ffff = on)
0312      A50E     edb.block.m1      equ  edb.struct + 14 ; Block start line marker (>ffff = unset)
0313      A510     edb.block.m2      equ  edb.struct + 16 ; Block end line marker   (>ffff = unset)
0314      A512     edb.block.var     equ  edb.struct + 18 ; Local var used in block operation
0315      A514     edb.filename.ptr  equ  edb.struct + 20 ; Pointer to length-prefixed string
0316                                                      ; with current filename.
0317      A516     edb.filetype.ptr  equ  edb.struct + 22 ; Pointer to length-prefixed string
0318                                                      ; with current file type.
0319      A518     edb.sams.page     equ  edb.struct + 24 ; Current SAMS page
0320      A51A     edb.sams.hipage   equ  edb.struct + 26 ; Highest SAMS page in use
0321               
0322      A51C     edb.filename      equ  edb.struct + 28 ; 80 characters inline buffer reserved
0323                                                      ; for filename, but not always used.
0324      A56C     edb.free          equ  edb.struct + 108; End of structure
0325               *--------------------------------------------------------------
0326               * Index structure                     @>a600-a6ff   (256 bytes)
0327               *--------------------------------------------------------------
0328      A600     idx.struct        equ  >a600           ; stevie index structure
0329      A600     idx.sams.page     equ  idx.struct      ; Current SAMS page
0330      A602     idx.sams.lopage   equ  idx.struct + 2  ; Lowest SAMS page
0331      A604     idx.sams.hipage   equ  idx.struct + 4  ; Highest SAMS page
0332      A606     idx.free          equ  idx.struct + 6  ; End of structure
0333               *--------------------------------------------------------------
0334               * Command buffer structure            @>a700-a7ff   (256 bytes)
0335               *--------------------------------------------------------------
0336      A700     cmdb.struct       equ  >a700           ; Command Buffer structure
0337      A700     cmdb.top.ptr      equ  cmdb.struct     ; Pointer to command buffer (history)
0338      A702     cmdb.visible      equ  cmdb.struct + 2 ; Command buffer visible? (>ffff=visible)
0339      A704     cmdb.fb.yxsave    equ  cmdb.struct + 4 ; Copy of FB WYX when entering cmdb pane
0340      A706     cmdb.scrrows      equ  cmdb.struct + 6 ; Current size of CMDB pane (in rows)
0341      A708     cmdb.default      equ  cmdb.struct + 8 ; Default size of CMDB pane (in rows)
0342      A70A     cmdb.cursor       equ  cmdb.struct + 10; Screen YX of cursor in CMDB pane
0343      A70C     cmdb.yxsave       equ  cmdb.struct + 12; Copy of WYX
0344      A70E     cmdb.yxtop        equ  cmdb.struct + 14; YX position of CMDB pane header line
0345      A710     cmdb.yxprompt     equ  cmdb.struct + 16; YX position of command buffer prompt
0346      A712     cmdb.column       equ  cmdb.struct + 18; Current column in command buffer pane
0347      A714     cmdb.length       equ  cmdb.struct + 20; Length of current row in CMDB
0348      A716     cmdb.lines        equ  cmdb.struct + 22; Total lines in CMDB
0349      A718     cmdb.dirty        equ  cmdb.struct + 24; Command buffer dirty (Text changed!)
0350      A71A     cmdb.dialog       equ  cmdb.struct + 26; Dialog identifier
0351      A71C     cmdb.dialog.var   equ  cmdb.struct + 28; Dialog private variable or pointer
0352      A71E     cmdb.panhead      equ  cmdb.struct + 30; Pointer to string pane header
0353      A720     cmdb.paninfo      equ  cmdb.struct + 32; Pointer to string pane info (1st line)
0354      A722     cmdb.panhint      equ  cmdb.struct + 34; Pointer to string pane hint (2nd line)
0355      A724     cmdb.panmarkers   equ  cmdb.struct + 36; Pointer to key marker list  (3rd line)
0356      A726     cmdb.pankeys      equ  cmdb.struct + 38; Pointer to string pane keys (stat line)
0357      A728     cmdb.action.ptr   equ  cmdb.struct + 40; Pointer to function to execute
0358      A72A     cmdb.cmdall       equ  cmdb.struct + 42; Current command including length-byte
0359      A72A     cmdb.cmdlen       equ  cmdb.struct + 42; Length of current command (MSB byte!)
0360      A72B     cmdb.cmd          equ  cmdb.struct + 43; Current command (80 bytes max.)
0361      A77C     cmdb.panhead.buf  equ  cmdb.struct +124; String buffer for pane header
0362      A7AE     cmdb.dflt.fname   equ  cmdb.struct +174; Default for filename
0363      A800     cmdb.free         equ  cmdb.struct +256; End of structure
0364               *--------------------------------------------------------------
0365               * Stevie value stack                  @>a800-a8ff   (256 bytes)
0366               *--------------------------------------------------------------
0367      A900     sp2.stktop        equ  >a900           ; \
0368                                                      ; | The stack grows from high memory
0369                                                      ; | towards low memory.
0370                                                      ; |
0371                                                      ; | Stack leaking is checked in SP2
0372                                                      ; | user hook "edkey.keyscan.hook"
0373                                                      ; /
0374               *--------------------------------------------------------------
0375               * Scratchpad memory work copy         @>ad00-aeff   (256 bytes)
0376               *--------------------------------------------------------------
0377      7E00     cpu.scrpad.src    equ  >7e00           ; \ Dump of OS monitor scratchpad
0378                                                      ; / stored in cartridge ROM bank7.asm
0379               
0380      F000     cpu.scrpad.tgt    equ  >f000           ; \ Fixed memory location used for
0381                                                      ; | scratchpad backup/restore routines.
0382                                                      ; /
0383               
0384      8300     cpu.scrpad1       equ  >8300           ; Stevie primary scratchpad
0385               
0386      AD00     cpu.scrpad2       equ  >ad00           ; Stevie secondary scratchpad, used when
0387                                                      ; calling TI Basic/External programs
0388               *--------------------------------------------------------------
0389               * Farjump return stack                @>af00-afff   (256 bytes)
0390               *--------------------------------------------------------------
0391      B000     fj.bottom         equ  >b000           ; Return stack for trampoline function
0392                                                      ; Grows downwards from high to low.
0393               *--------------------------------------------------------------
0394               * Index                               @>b000-bfff  (4096 bytes)
0395               *--------------------------------------------------------------
0396      B000     idx.top           equ  >b000           ; Top of index
0397      1000     idx.size          equ  4096            ; Index size
0398               *--------------------------------------------------------------
0399               * Editor buffer                       @>c000-cfff  (4096 bytes)
0400               *--------------------------------------------------------------
0401      C000     edb.top           equ  >c000           ; Editor buffer high memory
0402      1000     edb.size          equ  4096            ; Editor buffer size
0403               *--------------------------------------------------------------
0404               * Frame buffer & uncrunch area        @>d000-dcff  (3584 bytes)
0405               *--------------------------------------------------------------
0406      D000     fb.top            equ  >d000           ; Frame buffer (2400 char)
0407      0960     fb.size           equ  80*30           ; Frame buffer size
0408      D960     fb.uncrunch.area  equ  >d960           ; \ Uncrunched TI Basic statement
0409                                                      ; / >d960->dcff
0410               *--------------------------------------------------------------
0411               * Defaults area                       @>de00-dfff  (3584 bytes)
0412               *--------------------------------------------------------------
0413      DE00     tv.printer.fname  equ  >de00           ; Default printer   (80 char)
0414      DE50     tv.clip.fname     equ  >de50           ; Default clipboard (80 char)
0415               *--------------------------------------------------------------
0416               * Command buffer history              @>e000-efff  (4096 bytes)
0417               *--------------------------------------------------------------
0418      E000     cmdb.top          equ  >e000           ; Top of command history buffer
0419      1000     cmdb.size         equ  4096            ; Command buffer size
0420               *--------------------------------------------------------------
0421               * Heap                                @>f000-ffff  (4096 bytes)
0422               *--------------------------------------------------------------
0423      F000     heap.top          equ  >f000           ; Top of heap
0424               
0425               
0426               *--------------------------------------------------------------
0427               * Stevie specific equates
0428               *--------------------------------------------------------------
0429      0000     fh.fopmode.none           equ  0       ; No file operation in progress
0430      0001     fh.fopmode.readfile       equ  1       ; Read file from disk to memory
0431      0002     fh.fopmode.writefile      equ  2       ; Save file from memory to disk
0432      A028     rom0_kscan_out            equ  keycode1; Where to store value of key pressed
0433               
0434      0050     vdp.fb.toprow.sit         equ  >0050   ; VDP SIT address of 1st Framebuffer row
0435      1850     vdp.fb.toprow.tat         equ  >1850   ; VDP TAT address of 1st Framebuffer row
0436      1FD0     vdp.cmdb.toprow.tat       equ  >1800 + ((pane.botrow - 4) * 80)
0437                                                      ; VDP TAT address of 1st CMDB row
0438      0000     vdp.sit.base              equ  >0000   ; VDP SIT base address
0439      0960     vdp.sit.size              equ  (pane.botrow + 1) * 80
0440                                                      ; VDP SIT size 80 columns, 24/30 rows
0441      1800     vdp.tat.base              equ  >1800   ; VDP TAT base address
0442      9900     tv.colorize.reset         equ  >9900   ; Colorization off
0443      00FE     tv.1timeonly              equ  254     ; One-time only flag indicator
                   < stevie_b1.asm
0028                       copy  "equates.c99.asm"     ; Equates related to classic99 emulator
     **** ****     > equates.c99.asm
0001               * FILE......: equates.c99.asm
0002               * Purpose...: Equates related to classic99
0003               
0004               ***************************************************************
0005               *                 Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012      0120     c99_dbg_r0    equ  >0120            ; Debug printf r0
0013      0121     c99_dbg_r1    equ  >0121            ; Debug printf r1
0014      0122     c99_dbg_r2    equ  >0122            ; Debug printf r2
0015      0123     c99_dbg_r3    equ  >0123            ; Debug printf r3
0016      0124     c99_dbg_r4    equ  >0124            ; Debug printf r4
0017      0125     c99_dbg_r5    equ  >0125            ; Debug printf r5
0018      0126     c99_dbg_r6    equ  >0126            ; Debug printf r6
0019      0127     c99_dbg_r7    equ  >0127            ; Debug printf r7
0020      0128     c99_dbg_r8    equ  >0128            ; Debug printf r8
0021      0199     c99_dbg_r9    equ  >0199            ; Debug printf r9
0022      012A     c99_dbg_ra    equ  >012a            ; Debug printf ra
0023      012B     c99_dbg_rb    equ  >012b            ; Debug printf rb
0024      012C     c99_dbg_rc    equ  >012c            ; Debug printf rc
0025      012D     c99_dbg_rd    equ  >012d            ; Debug printf rd
0026      012E     c99_dbg_re    equ  >012e            ; Debug printf re
0027      012F     c99_dbg_rf    equ  >012f            ; Debug printf rf
0028      0124     c99_dbg_tmp0  equ  c99_dbg_r4       ; Debug printf tmp0
0029      0125     c99_dbg_tmp1  equ  c99_dbg_r5       ; Debug printf tmp1
0030      0126     c99_dbg_tmp2  equ  c99_dbg_r6       ; Debug printf tmp2
0031      0127     c99_dbg_tmp3  equ  c99_dbg_r7       ; Debug printf tmp3
0032      0128     c99_dbg_tmp4  equ  c99_dbg_r8       ; Debug printf tmp4
0033      0199     c99_dbg_stck  equ  c99_dbg_r9       ; Debug printf stack
                   < stevie_b1.asm
0029                       copy  "equates.keys.asm"    ; Equates for keyboard mapping
     **** ****     > equates.keys.asm
0001               * FILE......: data.keymap.keys.asm
0002               * Purpose...: Keyboard mapping
0003               
0004               
0005               *---------------------------------------------------------------
0006               * Keyboard scancodes - Numeric keys
0007               *-------------|---------------------|---------------------------
0008      0030     key.num.0     equ >30               ; 0
0009      0031     key.num.1     equ >31               ; 1
0010      0032     key.num.2     equ >32               ; 2
0011      0033     key.num.3     equ >33               ; 3
0012      0034     key.num.4     equ >34               ; 4
0013      0035     key.num.5     equ >35               ; 5
0014      0036     key.num.6     equ >36               ; 6
0015      0037     key.num.7     equ >37               ; 7
0016      0038     key.num.8     equ >38               ; 8
0017      0039     key.num.9     equ >39               ; 9
0018               *---------------------------------------------------------------
0019               * Keyboard scancodes - Letter keys
0020               *-------------|---------------------|---------------------------
0021      0041     key.uc.a      equ >41               ; A
0022      0042     key.uc.b      equ >42               ; B
0023      0043     key.uc.c      equ >43               ; C
0024      0045     key.uc.e      equ >45               ; E
0025      0046     key.uc.f      equ >46               ; F
0026      0048     key.uc.h      equ >48               ; H
0027      0049     key.uc.i      equ >49               ; I
0028      004D     key.uc.m      equ >4d               ; M
0029      004E     key.uc.n      equ >4e               ; N
0030      0052     key.uc.r      equ >52               ; R
0031      0053     key.uc.s      equ >53               ; S
0032      004F     key.uc.o      equ >4f               ; O
0033      0050     key.uc.p      equ >50               ; P
0034      0051     key.uc.q      equ >51               ; Q
0035      00A2     key.lc.b      equ >a2               ; b
0036      00A5     key.lc.e      equ >a5               ; e
0037      00A6     key.lc.f      equ >a6               ; f
0038      00A8     key.lc.h      equ >a8               ; h
0039      006E     key.lc.n      equ >6e               ; n
0040      0073     key.lc.s      equ >73               ; s
0041      006F     key.lc.o      equ >6f               ; o
0042      0070     key.lc.p      equ >70               ; p
0043      0071     key.lc.q      equ >71               ; q
0044               *---------------------------------------------------------------
0045               * Keyboard scancodes - Function keys
0046               *-------------|---------------------|---------------------------
0047      00BC     key.fctn.0    equ >bc               ; fctn + 0
0048      0003     key.fctn.1    equ >03               ; fctn + 1
0049      0004     key.fctn.2    equ >04               ; fctn + 2
0050      0007     key.fctn.3    equ >07               ; fctn + 3
0051      0002     key.fctn.4    equ >02               ; fctn + 4
0052      000E     key.fctn.5    equ >0e               ; fctn + 5
0053      000C     key.fctn.6    equ >0c               ; fctn + 6
0054      0001     key.fctn.7    equ >01               ; fctn + 7
0055      0006     key.fctn.8    equ >06               ; fctn + 8
0056      000F     key.fctn.9    equ >0f               ; fctn + 9
0057      0000     key.fctn.a    equ >00               ; fctn + a
0058      00BE     key.fctn.b    equ >be               ; fctn + b
0059      0000     key.fctn.c    equ >00               ; fctn + c
0060      0009     key.fctn.d    equ >09               ; fctn + d
0061      000B     key.fctn.e    equ >0b               ; fctn + e
0062      0000     key.fctn.f    equ >00               ; fctn + f
0063      0000     key.fctn.g    equ >00               ; fctn + g
0064      00BF     key.fctn.h    equ >bf               ; fctn + h
0065      0000     key.fctn.i    equ >00               ; fctn + i
0066      00C0     key.fctn.j    equ >c0               ; fctn + j
0067      00C1     key.fctn.k    equ >c1               ; fctn + k
0068      00C2     key.fctn.l    equ >c2               ; fctn + l
0069      00C3     key.fctn.m    equ >c3               ; fctn + m
0070      00C4     key.fctn.n    equ >c4               ; fctn + n
0071      0000     key.fctn.o    equ >00               ; fctn + o
0072      0000     key.fctn.p    equ >00               ; fctn + p
0073      00C5     key.fctn.q    equ >c5               ; fctn + q
0074      0000     key.fctn.r    equ >00               ; fctn + r
0075      0008     key.fctn.s    equ >08               ; fctn + s
0076      0000     key.fctn.t    equ >00               ; fctn + t
0077      0000     key.fctn.u    equ >00               ; fctn + u
0078      007F     key.fctn.v    equ >7f               ; fctn + v
0079      007E     key.fctn.w    equ >7e               ; fctn + w
0080      000A     key.fctn.x    equ >0a               ; fctn + x
0081      00C6     key.fctn.y    equ >c6               ; fctn + y
0082      0000     key.fctn.z    equ >00               ; fctn + z
0083               *---------------------------------------------------------------
0084               * Keyboard scancodes - Function keys extra
0085               *---------------------------------------------------------------
0086      00B9     key.fctn.dot    equ >b9             ; fctn + .
0087      00B8     key.fctn.comma  equ >b8             ; fctn + ,
0088      0005     key.fctn.plus   equ >05             ; fctn + +
0089               *---------------------------------------------------------------
0090               * Keyboard scancodes - control keys
0091               *-------------|---------------------|---------------------------
0092      00B0     key.ctrl.0    equ >b0               ; ctrl + 0
0093      00B1     key.ctrl.1    equ >b1               ; ctrl + 1
0094      00B2     key.ctrl.2    equ >b2               ; ctrl + 2
0095      00B3     key.ctrl.3    equ >b3               ; ctrl + 3
0096      00B4     key.ctrl.4    equ >b4               ; ctrl + 4
0097      00B5     key.ctrl.5    equ >b5               ; ctrl + 5
0098      00B6     key.ctrl.6    equ >b6               ; ctrl + 6
0099      00B7     key.ctrl.7    equ >b7               ; ctrl + 7
0100      009E     key.ctrl.8    equ >9e               ; ctrl + 8
0101      009F     key.ctrl.9    equ >9f               ; ctrl + 9
0102      0081     key.ctrl.a    equ >81               ; ctrl + a
0103      0082     key.ctrl.b    equ >82               ; ctrl + b
0104      0083     key.ctrl.c    equ >83               ; ctrl + c
0105      0084     key.ctrl.d    equ >84               ; ctrl + d
0106      0085     key.ctrl.e    equ >85               ; ctrl + e
0107      0086     key.ctrl.f    equ >86               ; ctrl + f
0108      0087     key.ctrl.g    equ >87               ; ctrl + g
0109      0088     key.ctrl.h    equ >88               ; ctrl + h
0110      0089     key.ctrl.i    equ >89               ; ctrl + i
0111      008A     key.ctrl.j    equ >8a               ; ctrl + j
0112      008B     key.ctrl.k    equ >8b               ; ctrl + k
0113      008C     key.ctrl.l    equ >8c               ; ctrl + l
0114      008D     key.ctrl.m    equ >8d               ; ctrl + m
0115      008E     key.ctrl.n    equ >8e               ; ctrl + n
0116      008F     key.ctrl.o    equ >8f               ; ctrl + o
0117      0090     key.ctrl.p    equ >90               ; ctrl + p
0118      0091     key.ctrl.q    equ >91               ; ctrl + q
0119      0092     key.ctrl.r    equ >92               ; ctrl + r
0120      0093     key.ctrl.s    equ >93               ; ctrl + s
0121      0094     key.ctrl.t    equ >94               ; ctrl + t
0122      0095     key.ctrl.u    equ >95               ; ctrl + u
0123      0096     key.ctrl.v    equ >96               ; ctrl + v
0124      0097     key.ctrl.w    equ >97               ; ctrl + w
0125      0098     key.ctrl.x    equ >98               ; ctrl + x
0126      0099     key.ctrl.y    equ >99               ; ctrl + y
0127      009A     key.ctrl.z    equ >9a               ; ctrl + z
0128               *---------------------------------------------------------------
0129               * Keyboard scancodes - control keys extra
0130               *---------------------------------------------------------------
0131      009B     key.ctrl.dot    equ >9b             ; ctrl + .
0132      0080     key.ctrl.comma  equ >80             ; ctrl + ,
0133      009D     key.ctrl.plus   equ >9d             ; ctrl + +
0134      00BB     key.ctrl.slash  equ >bb             ; ctrl + /
0135      00F0     key.ctrl.space  equ >f0             ; ctrl + SPACE
0136               *---------------------------------------------------------------
0137               * Special keys
0138               *---------------------------------------------------------------
0139      000D     key.enter     equ >0d               ; enter
0140      0020     key.space     equ >20               ; space
                   < stevie_b1.asm
0030               
0031               ***************************************************************
0032               * BANK 1
0033               ********|*****|*********************|**************************
0034      6002     bankid  equ   bank1.rom             ; Set bank identifier to current bank
0035                       aorg  >6000
0036                       save  >6000,>8000           ; Save bank
0037                       copy  "rom.header.asm"      ; Include cartridge header
     **** ****     > rom.header.asm
0001               * FILE......: rom.header.asm
0002               * Purpose...: Cartridge header
0003               
0004               *--------------------------------------------------------------
0005               * Cartridge header
0006               ********|*****|*********************|**************************
0007 6000 AA               byte  >aa                   ; 0  Standard header                   >6000
0008 6001   01             byte  >01                   ; 1  Version number
0009 6002 02               byte  >02                   ; 2  Number of programs (optional)     >6002
0010 6003   00             byte  0                     ; 3  Reserved ('R' = adv. mode FG99)
0011               
0012 6004 0000             data  >0000                 ; 4  \ Pointer to power-up list        >6004
0013                                                   ; 5  /
0014               
0015 6006 600C             data  rom.program1          ; 6  \ Pointer to program list         >6006
0016                                                   ; 7  /
0017               
0018 6008 0000             data  >0000                 ; 8  \ Pointer to DSR list             >6008
0019                                                   ; 9  /
0020               
0021 600A 0000             data  >0000                 ; 10 \ Pointer to subprogram list      >600a
0022                                                   ; 11 /
0023               
0024                       ;-----------------------------------------------------------------------
0025                       ; Program list entry
0026                       ;-----------------------------------------------------------------------
0027               rom.program1:
0028 600C 601E             data  rom.program2          ; 12 \ Next program list entry         >600c
0029                                                   ; 13 / (no more items following)
0030               
0031 600E 6040             data  kickstart.code1       ; 14 \ Program address                 >600e
0032                                                   ; 15 /
0033               
0034 6010 0C53             stri 'STEVIE TOOLS'
     6012 5445     
     6014 5649     
     6016 4520     
     6018 544F     
     601A 4F4C     
     601C 53       
0035               
0036                       ;-----------------------------------------------------------------------
0037                       ; Program list entry
0038                       ;-----------------------------------------------------------------------
0039               rom.program2:
0040 601E 0000             data  >0000                 ; 12 \ Next program list entry         >600c
0041                                                   ; 13 / (no more items following)
0042               
0043 6020 6038             data  kickstart.resume      ; 14 \ Program address                 >600e
0044                                                   ; 15 /
0045               
0047 6022 0E53                 stri 'STEVIE 1.3J-30'
     6024 5445     
     6026 5649     
     6028 4520     
     602A 312E     
     602C 334A     
     602E 2D33     
     6030 30       
                   < stevie_b1.asm
0038               
0039               ***************************************************************
0040               * Step 1: Switch to bank 0 (uniform code accross all banks)
0041               ********|*****|*********************|**************************
0042                       aorg  kickstart.code1       ; >6040
0043 6040 04E0  34         clr   @bank0.rom            ; Switch to bank 0 "Jill"
     6042 6000     
0044               ***************************************************************
0045               * Step 2: Satisfy assembler, must know relocated code
0046               ********|*****|*********************|**************************
0047                       aorg  >2000                 ; Relocate to >2000
0048                       copy  "runlib.asm"
     **** ****     > runlib.asm
0001               *******************************************************************************
0002               *              ___  ____  ____  ___  ____  ____    __    ___
0003               *             / __)(  _ \( ___)/ __)(_  _)(  _ \  /__\  (__ \  v.2021
0004               *             \__ \ )___/ )__)( (__   )(   )   / /(__)\  / _/
0005               *             (___/(__)  (____)\___) (__) (_)\_)(__)(__)(____)
0006               *
0007               *                TMS9900 Monitor with Arcade Game support
0008               *                                  for
0009               *              the Texas Instruments TI-99/4A Home Computer
0010               *
0011               *                      2010-2022 by Filip Van Vooren
0012               *
0013               *              https://github.com/FilipVanVooren/spectra2.git
0014               *******************************************************************************
0015               * This file: runlib.a99
0016               *******************************************************************************
0017               * Use following equates to skip/exclude support modules and to control startup
0018               * behaviour.
0019               *
0020               * == Memory
0021               * skip_rom_bankswitch       equ  1  ; Skip support for ROM bankswitching
0022               * skip_vram_cpu_copy        equ  1  ; Skip VRAM to CPU copy functions
0023               * skip_cpu_vram_copy        equ  1  ; Skip CPU  to VRAM copy functions
0024               * skip_cpu_cpu_copy         equ  1  ; Skip CPU  to CPU copy functions
0025               * skip_grom_cpu_copy        equ  1  ; Skip GROM to CPU copy functions
0026               * skip_grom_vram_copy       equ  1  ; Skip GROM to VRAM copy functions
0027               * skip_sams                 equ  1  ; Skip support for SAMS memory expansion
0028               * skip_sams_layout          equ  1  ; Skip SAMS memory layout routine
0029               *
0030               * == VDP
0031               * skip_textmode             equ  1  ; Skip 40x24 textmode support
0032               * skip_vdp_f18a             equ  1  ; Skip f18a support
0033               * skip_vdp_hchar            equ  1  ; Skip hchar, xchar
0034               * skip_vdp_vchar            equ  1  ; Skip vchar, xvchar
0035               * skip_vdp_boxes            equ  1  ; Skip filbox, putbox
0036               * skip_vdp_hexsupport       equ  1  ; Skip mkhex, puthex
0037               * skip_vdp_bitmap           equ  1  ; Skip bitmap functions
0038               * skip_vdp_intscr           equ  1  ; Skip interrupt+screen on/off
0039               * skip_vdp_viewport         equ  1  ; Skip viewport functions
0040               * skip_vdp_yx2px_calc       equ  1  ; Skip YX to pixel calculation
0041               * skip_vdp_px2yx_calc       equ  1  ; Skip pixel to YX calculation
0042               * skip_vdp_sprites          equ  1  ; Skip sprites support
0043               * skip_vdp_cursor           equ  1  ; Skip cursor support
0044               *
0045               * == Sound & speech
0046               * skip_snd_player           equ  1  ; Skip inclusionm of sound player code
0047               * skip_speech_detection     equ  1  ; Skip speech synthesizer detection
0048               * skip_speech_player        equ  1  ; Skip inclusion of speech player code
0049               *
0050               * == Keyboard
0051               * skip_virtual_keyboard     equ  1  ; Skip virtual keyboard scann
0052               * skip_real_keyboard        equ  1  ; Skip real keyboard scan
0053               * use_rom0_kscan            equ  1  ; Use KSCAN in console ROM#0
0054               *
0055               * == Utilities
0056               * skip_random_generator     equ  1  ; Skip random generator functions
0057               * skip_cpu_rle_compress     equ  1  ; Skip CPU RLE compression
0058               * skip_cpu_rle_decompress   equ  1  ; Skip CPU RLE decompression
0059               * skip_vdp_rle_decompress   equ  1  ; Skip VDP RLE decompression
0060               * skip_cpu_hexsupport       equ  1  ; Skip mkhex, puthex
0061               * skip_cpu_numsupport       equ  1  ; Skip mknum, putnum, trimnum
0062               * skip_cpu_crc16            equ  1  ; Skip CPU memory CRC-16 calculation
0063               * skip_cpu_strings          equ  1  ; Skip string support utilities
0064               
0065               * == Kernel/Multitasking
0066               * skip_timer_alloc          equ  1  ; Skip support for timers allocation
0067               * skip_mem_paging           equ  1  ; Skip support for memory paging
0068               * skip_fio                  equ  1  ; Skip support for file I/O, dsrlnk
0069               *
0070               * == Startup behaviour
0071               * startup_backup_scrpad     equ  1  ; Backup scratchpad @>8300->83ff
0072               *                                   ; to pre-defined backup address
0073               * startup_keep_vdpmemory    equ  1  ; Do not clear VDP vram upon startup
0074               *******************************************************************************
0075               
0076               *//////////////////////////////////////////////////////////////
0077               *                       RUNLIB SETUP
0078               *//////////////////////////////////////////////////////////////
0079               
0080                       copy  "memsetup.equ"             ; runlib scratchpad memory setup
     **** ****     > memsetup.equ
0001               * FILE......: memsetup.equ
0002               * Purpose...: Equates for spectra2 memory layout
0003               
0004               ***************************************************************
0005               * >8300 - >8341     Scratchpad memory layout (66 bytes)
0006               ********|*****|*********************|**************************
0007      8300     ws1     equ   >8300                 ; 32 - Primary workspace
0008      8320     mcloop  equ   >8320                 ; 08 - Machine code for loop & speech
0009      8328     wbase   equ   >8328                 ; 02 - PNT base address
0010      832A     wyx     equ   >832a                 ; 02 - Cursor YX position
0011      832C     wtitab  equ   >832c                 ; 02 - Timers: Address of timer table
0012      832E     wtiusr  equ   >832e                 ; 02 - Timers: Address of user hook
0013      8330     wtitmp  equ   >8330                 ; 02 - Timers: Internal use
0014      8332     wvrtkb  equ   >8332                 ; 02 - Virtual keyboard flags
0015      8334     wsdlst  equ   >8334                 ; 02 - Sound player: Tune address
0016      8336     wsdtmp  equ   >8336                 ; 02 - Sound player: Temporary use
0017      8338     wspeak  equ   >8338                 ; 02 - Speech player: Address of LPC data
0018      833A     wcolmn  equ   >833a                 ; 02 - Screen size, columns per row
0019      833C     waux1   equ   >833c                 ; 02 - Temporary storage 1
0020      833E     waux2   equ   >833e                 ; 02 - Temporary storage 2
0021      8340     waux3   equ   >8340                 ; 02 - Temporary storage 3
0022               ***************************************************************
0023      832A     by      equ   wyx                   ;      Cursor Y position
0024      832B     bx      equ   wyx+1                 ;      Cursor X position
0025      8322     mcsprd  equ   mcloop+2              ;      Speech read routine
0026               ***************************************************************
                   < runlib.asm
0081                       copy  "registers.equ"            ; runlib registers
     **** ****     > registers.equ
0001               * FILE......: registers.equ
0002               * Purpose...: Equates for registers
0003               
0004               ***************************************************************
0005               * Register usage
0006               * R0      **free not used**
0007               * R1      **free not used**
0008               * R2      Config register
0009               * R3      Extended config register
0010               * R4      Temporary register/variable tmp0
0011               * R5      Temporary register/variable tmp1
0012               * R6      Temporary register/variable tmp2
0013               * R7      Temporary register/variable tmp3
0014               * R8      Temporary register/variable tmp4
0015               * R9      Stack pointer
0016               * R10     Highest slot in use + Timer counter
0017               * R11     Subroutine return address
0018               * R12     CRU
0019               * R13     Copy of VDP status byte and counter for sound player
0020               * R14     Copy of VDP register #0 and VDP register #1 bytes
0021               * R15     VDP read/write address
0022               *--------------------------------------------------------------
0023               * Special purpose registers
0024               * R0      shift count
0025               * R12     CRU
0026               * R13     WS     - when using LWPI, BLWP, RTWP
0027               * R14     PC     - when using LWPI, BLWP, RTWP
0028               * R15     STATUS - when using LWPI, BLWP, RTWP
0029               ***************************************************************
0030               * Define registers
0031               ********|*****|*********************|**************************
0032      0000     r0      equ   0
0033      0001     r1      equ   1
0034      0002     r2      equ   2
0035      0003     r3      equ   3
0036      0004     r4      equ   4
0037      0005     r5      equ   5
0038      0006     r6      equ   6
0039      0007     r7      equ   7
0040      0008     r8      equ   8
0041      0009     r9      equ   9
0042      000A     r10     equ   10
0043      000B     r11     equ   11
0044      000C     r12     equ   12
0045      000D     r13     equ   13
0046      000E     r14     equ   14
0047      000F     r15     equ   15
0048               ***************************************************************
0049               * Define register equates
0050               ********|*****|*********************|**************************
0051      0002     config  equ   r2                    ; Config register
0052      0003     xconfig equ   r3                    ; Extended config register
0053      0004     tmp0    equ   r4                    ; Temp register 0
0054      0005     tmp1    equ   r5                    ; Temp register 1
0055      0006     tmp2    equ   r6                    ; Temp register 2
0056      0007     tmp3    equ   r7                    ; Temp register 3
0057      0008     tmp4    equ   r8                    ; Temp register 4
0058      0009     stack   equ   r9                    ; Stack pointer
0059      000E     vdpr01  equ   r14                   ; Copy of VDP#0 and VDP#1 bytes
0060      000F     vdprw   equ   r15                   ; Contains VDP read/write address
0061               ***************************************************************
0062               * Define MSB/LSB equates for registers
0063               ********|*****|*********************|**************************
0064      8300     r0hb    equ   ws1                   ; HI byte R0
0065      8301     r0lb    equ   ws1+1                 ; LO byte R0
0066      8302     r1hb    equ   ws1+2                 ; HI byte R1
0067      8303     r1lb    equ   ws1+3                 ; LO byte R1
0068      8304     r2hb    equ   ws1+4                 ; HI byte R2
0069      8305     r2lb    equ   ws1+5                 ; LO byte R2
0070      8306     r3hb    equ   ws1+6                 ; HI byte R3
0071      8307     r3lb    equ   ws1+7                 ; LO byte R3
0072      8308     r4hb    equ   ws1+8                 ; HI byte R4
0073      8309     r4lb    equ   ws1+9                 ; LO byte R4
0074      830A     r5hb    equ   ws1+10                ; HI byte R5
0075      830B     r5lb    equ   ws1+11                ; LO byte R5
0076      830C     r6hb    equ   ws1+12                ; HI byte R6
0077      830D     r6lb    equ   ws1+13                ; LO byte R6
0078      830E     r7hb    equ   ws1+14                ; HI byte R7
0079      830F     r7lb    equ   ws1+15                ; LO byte R7
0080      8310     r8hb    equ   ws1+16                ; HI byte R8
0081      8311     r8lb    equ   ws1+17                ; LO byte R8
0082      8312     r9hb    equ   ws1+18                ; HI byte R9
0083      8313     r9lb    equ   ws1+19                ; LO byte R9
0084      8314     r10hb   equ   ws1+20                ; HI byte R10
0085      8315     r10lb   equ   ws1+21                ; LO byte R10
0086      8316     r11hb   equ   ws1+22                ; HI byte R11
0087      8317     r11lb   equ   ws1+23                ; LO byte R11
0088      8318     r12hb   equ   ws1+24                ; HI byte R12
0089      8319     r12lb   equ   ws1+25                ; LO byte R12
0090      831A     r13hb   equ   ws1+26                ; HI byte R13
0091      831B     r13lb   equ   ws1+27                ; LO byte R13
0092      831C     r14hb   equ   ws1+28                ; HI byte R14
0093      831D     r14lb   equ   ws1+29                ; LO byte R14
0094      831E     r15hb   equ   ws1+30                ; HI byte R15
0095      831F     r15lb   equ   ws1+31                ; LO byte R15
0096               ********|*****|*********************|**************************
0097      8308     tmp0hb  equ   ws1+8                 ; HI byte R4
0098      8309     tmp0lb  equ   ws1+9                 ; LO byte R4
0099      830A     tmp1hb  equ   ws1+10                ; HI byte R5
0100      830B     tmp1lb  equ   ws1+11                ; LO byte R5
0101      830C     tmp2hb  equ   ws1+12                ; HI byte R6
0102      830D     tmp2lb  equ   ws1+13                ; LO byte R6
0103      830E     tmp3hb  equ   ws1+14                ; HI byte R7
0104      830F     tmp3lb  equ   ws1+15                ; LO byte R7
0105      8310     tmp4hb  equ   ws1+16                ; HI byte R8
0106      8311     tmp4lb  equ   ws1+17                ; LO byte R8
0107               ********|*****|*********************|**************************
0108      8314     btihi   equ   ws1+20                ; Highest slot in use (HI byte R10)
0109      831A     bvdpst  equ   ws1+26                ; Copy of VDP status register (HI byte R13)
0110      831C     vdpr0   equ   ws1+28                ; High byte of R14. Is VDP#0 byte
0111      831D     vdpr1   equ   ws1+29                ; Low byte  of R14. Is VDP#1 byte
0112               ***************************************************************
                   < runlib.asm
0082                       copy  "portaddr.equ"             ; runlib hardware port addresses
     **** ****     > portaddr.equ
0001               * FILE......: portaddr.equ
0002               * Purpose...: Equates for hardware port addresses and vectors
0003               
0004               ***************************************************************
0005               * Equates for VDP, GROM, SOUND, SPEECH ports
0006               ********|*****|*********************|**************************
0007      8400     sound   equ   >8400                 ; Sound generator address
0008      8800     vdpr    equ   >8800                 ; VDP read data window address
0009      8C00     vdpw    equ   >8c00                 ; VDP write data window address
0010      8802     vdps    equ   >8802                 ; VDP status register
0011      8C02     vdpa    equ   >8c02                 ; VDP address register
0012      9C02     grmwa   equ   >9c02                 ; GROM set write address
0013      9802     grmra   equ   >9802                 ; GROM set read address
0014      9800     grmrd   equ   >9800                 ; GROM read byte
0015      9C00     grmwd   equ   >9c00                 ; GROM write byte
0016      9000     spchrd  equ   >9000                 ; Address of speech synth Read Data Register
0017      9400     spchwt  equ   >9400                 ; Address of speech synth Write Data Register
0018               
0019      000E     kscan   equ   >000e                 ; Address of KSCAN routine in console ROM 0
                   < runlib.asm
0083                       copy  "param.equ"                ; runlib parameters
     **** ****     > param.equ
0001               * FILE......: param.equ
0002               * Purpose...: Equates used for subroutine parameters
0003               
0004               ***************************************************************
0005               * Subroutine parameter equates
0006               ***************************************************************
0007      FFFF     eol     equ   >ffff                 ; End-Of-List
0008      FFFF     nofont  equ   >ffff                 ; Skip loading font in RUNLIB
0009      0000     norep   equ   0                     ; PUTBOX > Value for P3. Don't repeat box
0010      3030     num1    equ   >3030                 ; MKNUM  > ASCII 0-9, leading 0's
0011      3020     num2    equ   >3020                 ; MKNUM  > ASCII 0-9, leading spaces
0012      0007     sdopt1  equ   7                     ; SDPLAY > 111 (Player on, repeat, tune in CPU memory)
0013      0005     sdopt2  equ   5                     ; SDPLAY > 101 (Player on, no repeat, tune in CPU memory)
0014      0006     sdopt3  equ   6                     ; SDPLAY > 110 (Player on, repeat, tune in VRAM)
0015      0004     sdopt4  equ   4                     ; SDPLAY > 100 (Player on, no repeat, tune in VRAM)
0016      0000     fnopt1  equ   >0000                 ; LDFNT  > Load TI title screen font
0017      0006     fnopt2  equ   >0006                 ; LDFNT  > Load upper case font
0018      000C     fnopt3  equ   >000c                 ; LDFNT  > Load upper/lower case font
0019      0012     fnopt4  equ   >0012                 ; LDFNT  > Load lower case font
0020      8000     fnopt5  equ   >8000                 ; LDFNT  > Load TI title screen font  & bold
0021      8006     fnopt6  equ   >8006                 ; LDFNT  > Load upper case font       & bold
0022      800C     fnopt7  equ   >800c                 ; LDFNT  > Load upper/lower case font & bold
0023      8012     fnopt8  equ   >8012                 ; LDFNT  > Load lower case font       & bold
0024               *--------------------------------------------------------------
0025               *   Speech player
0026               *--------------------------------------------------------------
0027      0060     talkon  equ   >60                   ; 'start talking' command code for speech synth
0028      00FF     talkof  equ   >ff                   ; 'stop talking' command code for speech synth
0029      6000     spkon   equ   >6000                 ; 'start talking' command code for speech synth
0030      FF00     spkoff  equ   >ff00                 ; 'stop talking' command code for speech synth
                   < runlib.asm
0084                       copy  "classic99.equ"            ; classic99 emulator opcodes
     **** ****     > classic99.equ
0001               * FILE......: classic99.equ
0002               * Purpose...: Extra opcodes for the classic99 emulator
0003               
0004               ***************************************************************
0005               *              Extra opcodes for classic99
0006               ********|*****|*********************|**************************
0007      0110     c99_norm      equ  >0110            ; CPU normal
0008      0111     c99_ovrd      equ  >0111            ; CPU overdrive
0009      0112     c99_smax      equ  >0112            ; System Maximum
0010      0113     c99_brk       equ  >0113            ; Breakpoint
0011      0114     c99_quit      equ  >0114            ; Quit emulator
0012               *--------------------------------------------------------------
0013               * Attention:
0014               * Debug opcodes are part of a 3 words instruction!
0015               * See classic99 user manual for details on proper usage.
0016               *--------------------------------------------------------------
0017      0120     c99_dbgr0     equ  >0120            ; debug printf R0
0018      0121     c99_dbgr1     equ  >0121            ; debug printf R1
0019      0122     c99_dbgr2     equ  >0122            ; debug printf R2
0020      0123     c99_dbgr3     equ  >0123            ; debug printf R3
0021      0124     c99_dbgr4     equ  >0124            ; debug printf R4
0022      0125     c99_dbgr5     equ  >0125            ; debug printf R5
0023      0126     c99_dbgr6     equ  >0126            ; debug printf R6
0024      0127     c99_dbgr7     equ  >0127            ; debug printf R7
0025      0128     c99_dbgr8     equ  >0128            ; debug printf R8
0026      0129     c99_dbgr9     equ  >0129            ; debug printf R9
0027      012A     c99_dbgr10    equ  >012a            ; debug printf R10
0028      012B     c99_dbgr11    equ  >012b            ; debug printf R11
0029      012C     c99_dbgr12    equ  >012c            ; debug printf R12
0030      012D     c99_dbgr13    equ  >012d            ; debug printf R13
0031      012E     c99_dbgr14    equ  >012e            ; debug printf R14
0032      012F     c99_dbgr15    equ  >012f            ; debug printf R15
                   < runlib.asm
0085               
0089               
0090                       copy  "cpu_constants.asm"        ; Define constants for word/MSB/LSB
     **** ****     > cpu_constants.asm
0001               * FILE......: cpu_constants.asm
0002               * Purpose...: Constants used by Spectra2 and for own use
0003               
0004               ***************************************************************
0005               *                      Some constants
0006               ********|*****|*********************|**************************
0007               
0008               *--------------------------------------------------------------
0009               * Word values
0010               *--------------------------------------------------------------
0011               ;                                   ;       0123456789ABCDEF
0012 2000 0000     w$0000  data  >0000                 ; >0000 0000000000000000
0013 2002 0001     w$0001  data  >0001                 ; >0001 0000000000000001
0014 2004 0002     w$0002  data  >0002                 ; >0002 0000000000000010
0015 2006 0004     w$0004  data  >0004                 ; >0004 0000000000000100
0016 2008 0008     w$0008  data  >0008                 ; >0008 0000000000001000
0017 200A 0010     w$0010  data  >0010                 ; >0010 0000000000010000
0018 200C 0020     w$0020  data  >0020                 ; >0020 0000000000100000
0019 200E 0040     w$0040  data  >0040                 ; >0040 0000000001000000
0020 2010 0080     w$0080  data  >0080                 ; >0080 0000000010000000
0021 2012 0100     w$0100  data  >0100                 ; >0100 0000000100000000
0022 2014 0200     w$0200  data  >0200                 ; >0200 0000001000000000
0023 2016 0400     w$0400  data  >0400                 ; >0400 0000010000000000
0024 2018 0800     w$0800  data  >0800                 ; >0800 0000100000000000
0025 201A 1000     w$1000  data  >1000                 ; >1000 0001000000000000
0026 201C 2000     w$2000  data  >2000                 ; >2000 0010000000000000
0027 201E 4000     w$4000  data  >4000                 ; >4000 0100000000000000
0028 2020 8000     w$8000  data  >8000                 ; >8000 1000000000000000
0029 2022 FFFF     w$ffff  data  >ffff                 ; >ffff 1111111111111111
0030 2024 D000     w$d000  data  >d000                 ; >d000
0031               *--------------------------------------------------------------
0032               * Byte values - High byte (=MSB) for byte operations
0033               *--------------------------------------------------------------
0034      2000     hb$00   equ   w$0000                ; >0000
0035      2012     hb$01   equ   w$0100                ; >0100
0036      2014     hb$02   equ   w$0200                ; >0200
0037      2016     hb$04   equ   w$0400                ; >0400
0038      2018     hb$08   equ   w$0800                ; >0800
0039      201A     hb$10   equ   w$1000                ; >1000
0040      201C     hb$20   equ   w$2000                ; >2000
0041      201E     hb$40   equ   w$4000                ; >4000
0042      2020     hb$80   equ   w$8000                ; >8000
0043      2024     hb$d0   equ   w$d000                ; >d000
0044               *--------------------------------------------------------------
0045               * Byte values - Low byte (=LSB) for byte operations
0046               *--------------------------------------------------------------
0047      2000     lb$00   equ   w$0000                ; >0000
0048      2002     lb$01   equ   w$0001                ; >0001
0049      2004     lb$02   equ   w$0002                ; >0002
0050      2006     lb$04   equ   w$0004                ; >0004
0051      2008     lb$08   equ   w$0008                ; >0008
0052      200A     lb$10   equ   w$0010                ; >0010
0053      200C     lb$20   equ   w$0020                ; >0020
0054      200E     lb$40   equ   w$0040                ; >0040
0055      2010     lb$80   equ   w$0080                ; >0080
0056               *--------------------------------------------------------------
0057               * Bit values
0058               *--------------------------------------------------------------
0059               ;                                   ;       0123456789ABCDEF
0060      2002     wbit15  equ   w$0001                ; >0001 0000000000000001
0061      2004     wbit14  equ   w$0002                ; >0002 0000000000000010
0062      2006     wbit13  equ   w$0004                ; >0004 0000000000000100
0063      2008     wbit12  equ   w$0008                ; >0008 0000000000001000
0064      200A     wbit11  equ   w$0010                ; >0010 0000000000010000
0065      200C     wbit10  equ   w$0020                ; >0020 0000000000100000
0066      200E     wbit9   equ   w$0040                ; >0040 0000000001000000
0067      2010     wbit8   equ   w$0080                ; >0080 0000000010000000
0068      2012     wbit7   equ   w$0100                ; >0100 0000000100000000
0069      2014     wbit6   equ   w$0200                ; >0200 0000001000000000
0070      2016     wbit5   equ   w$0400                ; >0400 0000010000000000
0071      2018     wbit4   equ   w$0800                ; >0800 0000100000000000
0072      201A     wbit3   equ   w$1000                ; >1000 0001000000000000
0073      201C     wbit2   equ   w$2000                ; >2000 0010000000000000
0074      201E     wbit1   equ   w$4000                ; >4000 0100000000000000
0075      2020     wbit0   equ   w$8000                ; >8000 1000000000000000
                   < runlib.asm
0091                       copy  "config.equ"               ; Equates for bits in config register
     **** ****     > config.equ
0001               * FILE......: config.equ
0002               * Purpose...: Equates for bits in config register
0003               
0004               ***************************************************************
0005               * The config register equates
0006               *--------------------------------------------------------------
0007               * Configuration flags
0008               * ===================
0009               *
0010               * ; 15  Sound player: tune source       1=ROM/RAM      0=VDP MEMORY
0011               * ; 14  Sound player: repeat tune       1=yes          0=no
0012               * ; 13  Sound player: enabled           1=yes          0=no (or pause)
0013               * ; 12  VDP9918 sprite collision?       1=yes          0=no
0014               * ; 11  Keyboard: ANY key pressed       1=yes          0=no
0015               * ; 10  Keyboard: Alpha lock key down   1=yes          0=no
0016               * ; 09  Timer: Kernel thread enabled    1=yes          0=no
0017               * ; 08  Timer: Block kernel thread      1=yes          0=no
0018               * ; 07  Timer: User hook enabled        1=yes          0=no
0019               * ; 06  Timer: Block user hook          1=yes          0=no
0020               * ; 05  Speech synthesizer present      1=yes          0=no
0021               * ; 04  Speech player: busy             1=yes          0=no
0022               * ; 03  Speech player: enabled          1=yes          0=no
0023               * ; 02  VDP9918 PAL version             1=yes(50)      0=no(60)
0024               * ; 01  F18A present                    1=on           0=off
0025               * ; 00  Subroutine state flag           1=on           0=off
0026               ********|*****|*********************|**************************
0027      201C     palon   equ   wbit2                 ; bit 2=1   (VDP9918 PAL version)
0028      2012     enusr   equ   wbit7                 ; bit 7=1   (Enable user hook)
0029      200E     enknl   equ   wbit9                 ; bit 9=1   (Enable kernel thread)
0030      200A     anykey  equ   wbit11                ; BIT 11 in the CONFIG register
0031               ***************************************************************
                   < runlib.asm
0092                       copy  "cpu_crash.asm"            ; CPU crash handler
     **** ****     > cpu_crash.asm
0001               * FILE......: cpu_crash.asm
0002               * Purpose...: Custom crash handler module
0003               
0004               
0005               ***************************************************************
0006               * cpu.crash - CPU program crashed handler
0007               ***************************************************************
0008               *  bl   @cpu.crash
0009               *--------------------------------------------------------------
0010               * Crash and halt system. Upon crash entry register contents are
0011               * copied to the memory region >ffe0 - >fffe and displayed after
0012               * resetting the spectra2 runtime library, video modes, etc.
0013               *
0014               * Diagnostics
0015               * >ffce  caller address
0016               *
0017               * Register contents
0018               * >ffdc  wp
0019               * >ffde  st
0020               * >ffe0  r0
0021               * >ffe2  r1
0022               * >ffe4  r2  (config)
0023               * >ffe6  r3
0024               * >ffe8  r4  (tmp0)
0025               * >ffea  r5  (tmp1)
0026               * >ffec  r6  (tmp2)
0027               * >ffee  r7  (tmp3)
0028               * >fff0  r8  (tmp4)
0029               * >fff2  r9  (stack)
0030               * >fff4  r10
0031               * >fff6  r11
0032               * >fff8  r12
0033               * >fffa  r13
0034               * >fffc  r14
0035               * >fffe  r15
0036               ********|*****|*********************|**************************
0037               cpu.crash:
0038 2026 022B  22         ai    r11,-4                ; Remove opcode offset
     2028 FFFC     
0039               *--------------------------------------------------------------
0040               *    Save registers to high memory
0041               *--------------------------------------------------------------
0042 202A C800  38         mov   r0,@>ffe0
     202C FFE0     
0043 202E C801  38         mov   r1,@>ffe2
     2030 FFE2     
0044 2032 C802  38         mov   r2,@>ffe4
     2034 FFE4     
0045 2036 C803  38         mov   r3,@>ffe6
     2038 FFE6     
0046 203A C804  38         mov   r4,@>ffe8
     203C FFE8     
0047 203E C805  38         mov   r5,@>ffea
     2040 FFEA     
0048 2042 C806  38         mov   r6,@>ffec
     2044 FFEC     
0049 2046 C807  38         mov   r7,@>ffee
     2048 FFEE     
0050 204A C808  38         mov   r8,@>fff0
     204C FFF0     
0051 204E C809  38         mov   r9,@>fff2
     2050 FFF2     
0052 2052 C80A  38         mov   r10,@>fff4
     2054 FFF4     
0053 2056 C80B  38         mov   r11,@>fff6
     2058 FFF6     
0054 205A C80C  38         mov   r12,@>fff8
     205C FFF8     
0055 205E C80D  38         mov   r13,@>fffa
     2060 FFFA     
0056 2062 C80E  38         mov   r14,@>fffc
     2064 FFFC     
0057 2066 C80F  38         mov   r15,@>ffff
     2068 FFFF     
0058 206A 02A0  12         stwp  r0
0059 206C C800  38         mov   r0,@>ffdc
     206E FFDC     
0060 2070 02C0  12         stst  r0
0061 2072 C800  38         mov   r0,@>ffde
     2074 FFDE     
0062               *--------------------------------------------------------------
0063               *    Reset system
0064               *--------------------------------------------------------------
0065               cpu.crash.reset:
0066 2076 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2078 8300     
0067 207A 04E0  26         clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     207C 8302     
0068 207E 0200  20         li    r0,>4a4a              ; Note that a crash occured (Flag = >4a4a)
     2080 4A4A     
0069 2082 0460  28         b     @runli1               ; Initialize system again (VDP, Memory, etc.)
     2084 2EDE     
0070               *--------------------------------------------------------------
0071               *    Show diagnostics after system reset
0072               *--------------------------------------------------------------
0073               cpu.crash.main:
0074                       ;------------------------------------------------------
0075                       ; Load "32x24" video mode & font
0076                       ;------------------------------------------------------
0077 2086 06A0  32         bl    @vidtab               ; Load video mode table into VDP
     2088 2306     
0078 208A 21FF                   data graph1           ; \ i  p0 = pointer to video mode table
0079                                                   ; /
0080               
0081 208C 06A0  32         bl    @ldfnt
     208E 236E     
0082 2090 0900                   data >0900,fnopt3     ; Load font (upper & lower case)
     2092 000C     
0083               
0084 2094 06A0  32         bl    @filv
     2096 229C     
0085 2098 0000                   data >0000,32,32*24   ; Clear screen
     209A 0020     
     209C 0300     
0086               
0087 209E 06A0  32         bl    @filv
     20A0 229C     
0088 20A2 0380                   data >0380,>f0,32*24  ; Load color table
     20A4 00F0     
     20A6 0300     
0089                       ;------------------------------------------------------
0090                       ; Show crash address
0091                       ;------------------------------------------------------
0092 20A8 06A0  32         bl    @putat                ; Show crash message
     20AA 2450     
0093 20AC 0000                   data >0000,cpu.crash.msg.crashed
     20AE 2192     
0094               
0095 20B0 06A0  32         bl    @puthex               ; Put hex value on screen
     20B2 29AA     
0096 20B4 0015                   byte 0,21             ; \ i  p0 = YX position
0097 20B6 FFF6                   data >fff6            ; | i  p1 = Pointer to 16 bit word
0098 20B8 A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0099 20BA 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0100                                                   ; /         LSB offset for ASCII digit 0-9
0101                       ;------------------------------------------------------
0102                       ; Show caller address
0103                       ;------------------------------------------------------
0104 20BC 06A0  32         bl    @putat                ; Show caller message
     20BE 2450     
0105 20C0 0100                   data >0100,cpu.crash.msg.caller
     20C2 21A8     
0106               
0107 20C4 06A0  32         bl    @puthex               ; Put hex value on screen
     20C6 29AA     
0108 20C8 0115                   byte 1,21             ; \ i  p0 = YX position
0109 20CA FFCE                   data >ffce            ; | i  p1 = Pointer to 16 bit word
0110 20CC A100                   data rambuf           ; | i  p2 = Pointer to ram buffer
0111 20CE 4130                   byte 65,48            ; | i  p3 = MSB offset for ASCII digit a-f
0112                                                   ; /         LSB offset for ASCII digit 0-9
0113                       ;------------------------------------------------------
0114                       ; Display labels
0115                       ;------------------------------------------------------
0116 20D0 06A0  32         bl    @putat
     20D2 2450     
0117 20D4 0300                   byte 3,0
0118 20D6 21C4                   data cpu.crash.msg.wp
0119 20D8 06A0  32         bl    @putat
     20DA 2450     
0120 20DC 0400                   byte 4,0
0121 20DE 21C9                   data cpu.crash.msg.st
0122 20E0 06A0  32         bl    @putat
     20E2 2450     
0123 20E4 1600                   byte 22,0
0124 20E6 21CE                   data cpu.crash.msg.source
0125 20E8 06A0  32         bl    @putat
     20EA 2450     
0126 20EC 1700                   byte 23,0
0127 20EE 21E6                   data cpu.crash.msg.id
0128                       ;------------------------------------------------------
0129                       ; Show crash registers WP, ST, R0 - R15
0130                       ;------------------------------------------------------
0131 20F0 06A0  32         bl    @at                   ; Put cursor at YX
     20F2 26D4     
0132 20F4 0304                   byte 3,4              ; \ i p0 = YX position
0133                                                   ; /
0134               
0135 20F6 0204  20         li    tmp0,>ffdc            ; Crash registers >ffdc - >ffff
     20F8 FFDC     
0136 20FA 04C6  14         clr   tmp2                  ; Loop counter
0137               
0138               cpu.crash.showreg:
0139 20FC C034  30         mov   *tmp0+,r0             ; Move crash register content to r0
0140               
0141 20FE 0649  14         dect  stack
0142 2100 C644  30         mov   tmp0,*stack           ; Push tmp0
0143 2102 0649  14         dect  stack
0144 2104 C645  30         mov   tmp1,*stack           ; Push tmp1
0145 2106 0649  14         dect  stack
0146 2108 C646  30         mov   tmp2,*stack           ; Push tmp2
0147                       ;------------------------------------------------------
0148                       ; Display crash register number
0149                       ;------------------------------------------------------
0150               cpu.crash.showreg.label:
0151 210A C046  18         mov   tmp2,r1               ; Save register number
0152 210C 0286  22         ci    tmp2,1                ; Skip labels WP/ST?
     210E 0001     
0153 2110 1220  14         jle   cpu.crash.showreg.content
0154                                                   ; Yes, skip
0155               
0156 2112 0641  14         dect  r1                    ; Adjust because of "dummy" WP/ST registers
0157 2114 06A0  32         bl    @mknum
     2116 29B4     
0158 2118 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0159 211A A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0160 211C 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0161                                                   ; /         LSB offset for ASCII digit 0-9
0162               
0163 211E 06A0  32         bl    @setx                 ; Set cursor X position
     2120 26EA     
0164 2122 0000                   data 0                ; \ i  p0 =  Cursor Y position
0165                                                   ; /
0166               
0167 2124 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2126 0400     
0168 2128 D804  38         movb  tmp0,@rambuf          ;
     212A A100     
0169               
0170 212C 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     212E 242C     
0171 2130 A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0172                                                   ; /
0173               
0174 2132 06A0  32         bl    @setx                 ; Set cursor X position
     2134 26EA     
0175 2136 0002                   data 2                ; \ i  p0 =  Cursor Y position
0176                                                   ; /
0177               
0178 2138 0281  22         ci    r1,10
     213A 000A     
0179 213C 1102  14         jlt   !
0180 213E 0620  26         dec   @wyx                  ; x=x-1
     2140 832A     
0181               
0182 2142 06A0  32 !       bl    @putstr
     2144 242C     
0183 2146 21BE                   data cpu.crash.msg.r
0184               
0185 2148 06A0  32         bl    @mknum
     214A 29B4     
0186 214C 8302                   data r1hb             ; \ i  p0 = Pointer to 16 bit unsigned word
0187 214E A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0188 2150 3020                   byte 48,32            ; | i  p2 = MSB offset for ASCII digit a-f
0189                                                   ; /         LSB offset for ASCII digit 0-9
0190                       ;------------------------------------------------------
0191                       ; Display crash register content
0192                       ;------------------------------------------------------
0193               cpu.crash.showreg.content:
0194 2152 06A0  32         bl    @mkhex                ; Convert hex word to string
     2154 2926     
0195 2156 8300                   data r0hb             ; \ i  p0 = Pointer to 16 bit word
0196 2158 A100                   data rambuf           ; | i  p1 = Pointer to ram buffer
0197 215A 4130                   byte 65,48            ; | i  p2 = MSB offset for ASCII digit a-f
0198                                                   ; /         LSB offset for ASCII digit 0-9
0199               
0200 215C 06A0  32         bl    @setx                 ; Set cursor X position
     215E 26EA     
0201 2160 0004                   data 4                ; \ i  p0 =  Cursor Y position
0202                                                   ; /
0203               
0204 2162 06A0  32         bl    @putstr               ; Put '  >'
     2164 242C     
0205 2166 21C0                   data cpu.crash.msg.marker
0206               
0207 2168 06A0  32         bl    @setx                 ; Set cursor X position
     216A 26EA     
0208 216C 0007                   data 7                ; \ i  p0 =  Cursor Y position
0209                                                   ; /
0210               
0211 216E 0204  20         li    tmp0,>0400            ; Set string length-prefix byte
     2170 0400     
0212 2172 D804  38         movb  tmp0,@rambuf          ;
     2174 A100     
0213               
0214 2176 06A0  32         bl    @putstr               ; Put length-byte prefixed string at current YX
     2178 242C     
0215 217A A100                   data rambuf           ; \ i  p0 = Pointer to ram buffer
0216                                                   ; /
0217               
0218 217C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0219 217E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0220 2180 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0221               
0222 2182 06A0  32         bl    @down                 ; y=y+1
     2184 26DA     
0223               
0224 2186 0586  14         inc   tmp2
0225 2188 0286  22         ci    tmp2,17
     218A 0011     
0226 218C 12B7  14         jle   cpu.crash.showreg     ; Show next register
0227                       ;------------------------------------------------------
0228                       ; Kernel takes over
0229                       ;------------------------------------------------------
0230 218E 0460  28         b     @cpu.crash.showbank   ; Expected to be included in
     2190 7F00     
0231               
0232               
0233 2192 1553     cpu.crash.msg.crashed      stri 'System crashed near >'
     2194 7973     
     2196 7465     
     2198 6D20     
     219A 6372     
     219C 6173     
     219E 6865     
     21A0 6420     
     21A2 6E65     
     21A4 6172     
     21A6 203E     
0234 21A8 1543     cpu.crash.msg.caller       stri 'Caller address near >'
     21AA 616C     
     21AC 6C65     
     21AE 7220     
     21B0 6164     
     21B2 6472     
     21B4 6573     
     21B6 7320     
     21B8 6E65     
     21BA 6172     
     21BC 203E     
0235 21BE 0152     cpu.crash.msg.r            stri 'R'
0236 21C0 0320     cpu.crash.msg.marker       stri '  >'
     21C2 203E     
0237 21C4 042A     cpu.crash.msg.wp           stri '**WP'
     21C6 2A57     
     21C8 50       
0238 21C9   04     cpu.crash.msg.st           stri '**ST'
     21CA 2A2A     
     21CC 5354     
0239 21CE 1753     cpu.crash.msg.source       stri 'Source    %%build_src%%'
     21D0 6F75     
     21D2 7263     
     21D4 6520     
     21D6 2020     
     21D8 2025     
     21DA 2562     
     21DC 7569     
     21DE 6C64     
     21E0 5F73     
     21E2 7263     
     21E4 2525     
0240 21E6 1842     cpu.crash.msg.id           stri 'Build-ID  %%build_date%%'
     21E8 7569     
     21EA 6C64     
     21EC 2D49     
     21EE 4420     
     21F0 2025     
     21F2 2562     
     21F4 7569     
     21F6 6C64     
     21F8 5F64     
     21FA 6174     
     21FC 6525     
     21FE 25       
                   < runlib.asm
0093                       copy  "vdp_tables.asm"           ; Data used by runtime library
     **** ****     > vdp_tables.asm
0001               * FILE......: vdp_tables.a99
0002               * Purpose...: Video mode tables
0003               
0004               ***************************************************************
0005               * Graphics mode 1 (32 columns/24 rows)
0006               *--------------------------------------------------------------
0007 21FF   00     graph1  byte  >00,>e2,>00,>0e,>01,>06,>02,SPFBCK,0,32
     2200 E200     
     2202 0E01     
     2204 0602     
     2206 0400     
     2208 20       
0008               *
0009               * ; VDP#0 Control bits
0010               * ;      bit 6=0: M3 | Graphics 1 mode
0011               * ;      bit 7=0: Disable external VDP input
0012               * ; VDP#1 Control bits
0013               * ;      bit 0=1: 16K selection
0014               * ;      bit 1=1: Enable display
0015               * ;      bit 2=1: Enable VDP interrupt
0016               * ;      bit 3=0: M1 \ Graphics 1 mode
0017               * ;      bit 4=0: M2 /
0018               * ;      bit 5=0: reserved
0019               * ;      bit 6=1: 16x16 sprites
0020               * ;      bit 7=0: Sprite magnification (1x)
0021               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0022               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0023               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0024               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0025               * ; VDP#6 SPT (Sprite pattern table)     at >1000  (>02 * >800)
0026               * ; VDP#7 Set screen background color
0027               
0028               
0029               ***************************************************************
0030               * Textmode (40 columns/24 rows)
0031               *--------------------------------------------------------------
0032 2209   00     tx4024  byte  >00,>f2,>00,>0e,>01,>06,>00,SPFCLR,0,40
     220A F200     
     220C 0E01     
     220E 0600     
     2210 F400     
     2212 28       
0033               *
0034               * ; VDP#0 Control bits
0035               * ;      bit 6=0: M3 | Graphics 1 mode
0036               * ;      bit 7=0: Disable external VDP input
0037               * ; VDP#1 Control bits
0038               * ;      bit 0=1: 16K selection
0039               * ;      bit 1=1: Enable display
0040               * ;      bit 2=1: Enable VDP interrupt
0041               * ;      bit 3=1: M1 \ TEXT MODE
0042               * ;      bit 4=0: M2 /
0043               * ;      bit 5=0: reserved
0044               * ;      bit 6=1: 16x16 sprites
0045               * ;      bit 7=0: Sprite magnification (1x)
0046               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0047               * ; VDP#3 PCT (Pattern color table)      at >0380  (>0E * >040)
0048               * ; VDP#4 PDT (Pattern descriptor table) at >0800  (>01 * >800)
0049               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0050               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0051               * ; VDP#7 Set foreground/background color
0052               ***************************************************************
0053               
0054               
0055               ***************************************************************
0056               * Textmode (80 columns, 24 rows) - F18A
0057               *--------------------------------------------------------------
0058 2213   04     tx8024  byte  >04,>f0,>00,>3f,>02,>40,>03,SPFCLR,0,80
     2214 F000     
     2216 3F02     
     2218 4003     
     221A F400     
     221C 50       
0059               *
0060               * ; VDP#0 Control bits
0061               * ;      bit 6=0: M3 | Graphics 1 mode
0062               * ;      bit 7=0: Disable external VDP input
0063               * ; VDP#1 Control bits
0064               * ;      bit 0=1: 16K selection
0065               * ;      bit 1=1: Enable display
0066               * ;      bit 2=1: Enable VDP interrupt
0067               * ;      bit 3=1: M1 \ TEXT MODE
0068               * ;      bit 4=0: M2 /
0069               * ;      bit 5=0: reserved
0070               * ;      bit 6=0: 8x8 sprites
0071               * ;      bit 7=0: Sprite magnification (1x)
0072               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0073               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0074               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0075               * ; VDP#5 SAT (sprite attribute list)    at >2000  (>40 * >080)
0076               * ; VDP#6 SPT (Sprite pattern table)     at >1800  (>03 * >800)
0077               * ; VDP#7 Set foreground/background color
0078               ***************************************************************
                   < runlib.asm
0094                       copy  "basic_cpu_vdp.asm"        ; Basic CPU & VDP functions
     **** ****     > basic_cpu_vdp.asm
0001               * FILE......: basic_cpu_vdp.asm
0002               * Purpose...: Basic CPU & VDP functions used by other modules
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *       Support Machine Code for copy & fill functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ; Machine code for tight loop.
0010               * ; The MOV operation at MCLOOP must be injected by the calling routine.
0011               *--------------------------------------------------------------
0012               *       DATA  >????                 ; \ mcloop  mov   ...
0013 221E 0606     mccode  data  >0606                 ; |         dec   r6 (tmp2)
0014 2220 16FD             data  >16fd                 ; |         jne   mcloop
0015 2222 045B             data  >045b                 ; /         b     *r11
0016               *--------------------------------------------------------------
0017               * ; Machine code for reading from the speech synthesizer
0018               * ; The SRC instruction takes 12 uS for execution in scratchpad RAM.
0019               * ; Is required for the 12 uS delay. It destroys R5.
0020               *--------------------------------------------------------------
0021 2224 D114     spcode  data  >d114                 ; \         movb  *r4,r4 (tmp0)
0022 2226 0BC5             data  >0bc5                 ; /         src   r5,12  (tmp1)
0023                       even
0024               
0025               
0026               ***************************************************************
0027               * loadmc - Load machine code into scratchpad  >8322 - >8328
0028               ***************************************************************
0029               *  bl  @loadmc
0030               *--------------------------------------------------------------
0031               *  REMARKS
0032               *  Machine instruction in location @>8320 will be set by
0033               *  SP2 copy/fill routine that is called later on.
0034               ********|*****|*********************|**************************
0035               loadmc:
0036 2228 0201  20         li    r1,mccode             ; Machinecode to patch
     222A 221E     
0037 222C 0202  20         li    r2,mcloop+2           ; Scratch-pad reserved for machine code
     222E 8322     
0038 2230 CCB1  46         mov   *r1+,*r2+             ; Copy 1st instruction
0039 2232 CCB1  46         mov   *r1+,*r2+             ; Copy 2nd instruction
0040 2234 CCB1  46         mov   *r1+,*r2+             ; Copy 3rd instruction
0041 2236 045B  20         b     *r11                  ; Return to caller
0042               
0043               
0044               *//////////////////////////////////////////////////////////////
0045               *                    STACK SUPPORT FUNCTIONS
0046               *//////////////////////////////////////////////////////////////
0047               
0048               ***************************************************************
0049               * POPR. - Pop registers & return to caller
0050               ***************************************************************
0051               *  B  @POPRG.
0052               *--------------------------------------------------------------
0053               *  REMARKS
0054               *  R11 must be at stack bottom
0055               ********|*****|*********************|**************************
0056 2238 C0F9  30 popr3   mov   *stack+,r3
0057 223A C0B9  30 popr2   mov   *stack+,r2
0058 223C C079  30 popr1   mov   *stack+,r1
0059 223E C039  30 popr0   mov   *stack+,r0
0060 2240 C2F9  30 poprt   mov   *stack+,r11
0061 2242 045B  20         b     *r11
0062               
0063               
0064               
0065               *//////////////////////////////////////////////////////////////
0066               *                   MEMORY FILL FUNCTIONS
0067               *//////////////////////////////////////////////////////////////
0068               
0069               ***************************************************************
0070               * FILM - Fill CPU memory with byte
0071               ***************************************************************
0072               *  bl   @film
0073               *  data P0,P1,P2
0074               *--------------------------------------------------------------
0075               *  P0 = Memory start address
0076               *  P1 = Byte to fill
0077               *  P2 = Number of bytes to fill
0078               *--------------------------------------------------------------
0079               *  bl   @xfilm
0080               *
0081               *  TMP0 = Memory start address
0082               *  TMP1 = Byte to fill
0083               *  TMP2 = Number of bytes to fill
0084               ********|*****|*********************|**************************
0085 2244 C13B  30 film    mov   *r11+,tmp0            ; Memory start
0086 2246 C17B  30         mov   *r11+,tmp1            ; Byte to fill
0087 2248 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0088               *--------------------------------------------------------------
0089               * Assert
0090               *--------------------------------------------------------------
0091 224A C1C6  18 xfilm   mov   tmp2,tmp3             ; Bytes to fill = 0 ?
0092 224C 1604  14         jne   filchk                ; No, continue checking
0093               
0094 224E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2250 FFCE     
0095 2252 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2254 2026     
0096               *--------------------------------------------------------------
0097               *       Check: 1 byte fill
0098               *--------------------------------------------------------------
0099 2256 D820  42 filchk  movb  @tmp1lb,@tmp1hb       ; Duplicate value
     2258 830B     
     225A 830A     
0100               
0101 225C 0286  22         ci    tmp2,1                ; Bytes to fill = 1 ?
     225E 0001     
0102 2260 1602  14         jne   filchk2
0103 2262 DD05  32         movb  tmp1,*tmp0+
0104 2264 045B  20         b     *r11                  ; Exit
0105               *--------------------------------------------------------------
0106               *       Check: 2 byte fill
0107               *--------------------------------------------------------------
0108 2266 0286  22 filchk2 ci    tmp2,2                ; Byte to fill = 2 ?
     2268 0002     
0109 226A 1603  14         jne   filchk3
0110 226C DD05  32         movb  tmp1,*tmp0+           ; Deal with possible uneven start address
0111 226E DD05  32         movb  tmp1,*tmp0+
0112 2270 045B  20         b     *r11                  ; Exit
0113               *--------------------------------------------------------------
0114               *       Check: Handle uneven start address
0115               *--------------------------------------------------------------
0116 2272 C1C4  18 filchk3 mov   tmp0,tmp3
0117 2274 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2276 0001     
0118 2278 1305  14         jeq   fil16b
0119 227A DD05  32         movb  tmp1,*tmp0+           ; Copy 1st byte
0120 227C 0606  14         dec   tmp2
0121 227E 0286  22         ci    tmp2,2                ; Do we only have 1 word left?
     2280 0002     
0122 2282 13F1  14         jeq   filchk2               ; Yes, copy word and exit
0123               *--------------------------------------------------------------
0124               *       Fill memory with 16 bit words
0125               *--------------------------------------------------------------
0126 2284 C1C6  18 fil16b  mov   tmp2,tmp3
0127 2286 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     2288 0001     
0128 228A 1301  14         jeq   dofill
0129 228C 0606  14         dec   tmp2                  ; Make TMP2 even
0130 228E CD05  34 dofill  mov   tmp1,*tmp0+
0131 2290 0646  14         dect  tmp2
0132 2292 16FD  14         jne   dofill
0133               *--------------------------------------------------------------
0134               * Fill last byte if ODD
0135               *--------------------------------------------------------------
0136 2294 C1C7  18         mov   tmp3,tmp3
0137 2296 1301  14         jeq   fil.exit
0138 2298 DD05  32         movb  tmp1,*tmp0+
0139               fil.exit:
0140 229A 045B  20         b     *r11
0141               
0142               
0143               ***************************************************************
0144               * FILV - Fill VRAM with byte
0145               ***************************************************************
0146               *  BL   @FILV
0147               *  DATA P0,P1,P2
0148               *--------------------------------------------------------------
0149               *  P0 = VDP start address
0150               *  P1 = Byte to fill
0151               *  P2 = Number of bytes to fill
0152               *--------------------------------------------------------------
0153               *  BL   @XFILV
0154               *
0155               *  TMP0 = VDP start address
0156               *  TMP1 = Byte to fill
0157               *  TMP2 = Number of bytes to fill
0158               ********|*****|*********************|**************************
0159 229C C13B  30 filv    mov   *r11+,tmp0            ; Memory start
0160 229E C17B  30         mov   *r11+,tmp1            ; Byte to fill
0161 22A0 C1BB  30         mov   *r11+,tmp2            ; Repeat count
0162               *--------------------------------------------------------------
0163               *    Setup VDP write address
0164               *--------------------------------------------------------------
0165 22A2 0264  22 xfilv   ori   tmp0,>4000
     22A4 4000     
0166 22A6 06C4  14         swpb  tmp0
0167 22A8 D804  30         movb  tmp0,@vdpa
     22AA 8C02     
0168 22AC 06C4  14         swpb  tmp0
0169 22AE D804  30         movb  tmp0,@vdpa
     22B0 8C02     
0170               *--------------------------------------------------------------
0171               *    Fill bytes in VDP memory
0172               *--------------------------------------------------------------
0173 22B2 020F  20         li    r15,vdpw              ; Set VDP write address
     22B4 8C00     
0174 22B6 06C5  14         swpb  tmp1
0175 22B8 C820  46         mov   @filzz,@mcloop        ; Setup move command
     22BA 22C2     
     22BC 8320     
0176 22BE 0460  24         b     @mcloop               ; Write data to VDP
     22C0 8320     
0177               *--------------------------------------------------------------
0181 22C2 D7C5     filzz   data  >d7c5                 ; MOVB TMP1,*R15
0183               
0184               
0185               
0186               *//////////////////////////////////////////////////////////////
0187               *                  VDP LOW LEVEL FUNCTIONS
0188               *//////////////////////////////////////////////////////////////
0189               
0190               ***************************************************************
0191               * VDWA / VDRA - Setup VDP write or read address
0192               ***************************************************************
0193               *  BL   @VDWA
0194               *
0195               *  TMP0 = VDP destination address for write
0196               *--------------------------------------------------------------
0197               *  BL   @VDRA
0198               *
0199               *  TMP0 = VDP source address for read
0200               ********|*****|*********************|**************************
0201 22C4 0264  22 vdwa    ori   tmp0,>4000            ; Prepare VDP address for write
     22C6 4000     
0202 22C8 06C4  14 vdra    swpb  tmp0
0203 22CA D804  30         movb  tmp0,@vdpa
     22CC 8C02     
0204 22CE 06C4  14         swpb  tmp0
0205 22D0 D804  30         movb  tmp0,@vdpa            ; Set VDP address
     22D2 8C02     
0206 22D4 045B  20         b     *r11                  ; Exit
0207               
0208               ***************************************************************
0209               * VPUTB - VDP put single byte
0210               ***************************************************************
0211               *  BL @VPUTB
0212               *  DATA P0,P1
0213               *--------------------------------------------------------------
0214               *  P0 = VDP target address
0215               *  P1 = Byte to write
0216               ********|*****|*********************|**************************
0217 22D6 C13B  30 vputb   mov   *r11+,tmp0            ; Get VDP target address
0218 22D8 C17B  30         mov   *r11+,tmp1            ; Get byte to write
0219               *--------------------------------------------------------------
0220               * Set VDP write address
0221               *--------------------------------------------------------------
0222 22DA 0264  22 xvputb  ori   tmp0,>4000            ; Prepare VDP address for write
     22DC 4000     
0223 22DE 06C4  14         swpb  tmp0                  ; \
0224 22E0 D804  30         movb  tmp0,@vdpa            ; | Set VDP write address
     22E2 8C02     
0225 22E4 06C4  14         swpb  tmp0                  ; | inlined @vdwa call
0226 22E6 D804  30         movb  tmp0,@vdpa            ; /
     22E8 8C02     
0227               *--------------------------------------------------------------
0228               * Write byte
0229               *--------------------------------------------------------------
0230 22EA 06C5  14         swpb  tmp1                  ; LSB to MSB
0231 22EC D7C5  30         movb  tmp1,*r15             ; Write byte
0232 22EE 045B  20         b     *r11                  ; Exit
0233               
0234               
0235               ***************************************************************
0236               * VGETB - VDP get single byte
0237               ***************************************************************
0238               *  bl   @vgetb
0239               *  data p0
0240               *--------------------------------------------------------------
0241               *  P0 = VDP source address
0242               *--------------------------------------------------------------
0243               *  bl   @xvgetb
0244               *
0245               *  tmp0 = VDP source address
0246               *--------------------------------------------------------------
0247               *  Output:
0248               *  tmp0 MSB = >00
0249               *  tmp0 LSB = VDP byte read
0250               ********|*****|*********************|**************************
0251 22F0 C13B  30 vgetb   mov   *r11+,tmp0            ; Get VDP source address
0252               *--------------------------------------------------------------
0253               * Set VDP read address
0254               *--------------------------------------------------------------
0255 22F2 06C4  14 xvgetb  swpb  tmp0                  ; \
0256 22F4 D804  30         movb  tmp0,@vdpa            ; | Set VDP read address
     22F6 8C02     
0257 22F8 06C4  14         swpb  tmp0                  ; | inlined @vdra call
0258 22FA D804  30         movb  tmp0,@vdpa            ; /
     22FC 8C02     
0259               *--------------------------------------------------------------
0260               * Read byte
0261               *--------------------------------------------------------------
0262 22FE D120  30         movb  @vdpr,tmp0            ; Read byte
     2300 8800     
0263 2302 0984  32         srl   tmp0,8                ; Right align
0264 2304 045B  20         b     *r11                  ; Exit
0265               
0266               
0267               ***************************************************************
0268               * VIDTAB - Dump videomode table
0269               ***************************************************************
0270               *  BL   @VIDTAB
0271               *  DATA P0
0272               *--------------------------------------------------------------
0273               *  P0 = Address of video mode table
0274               *--------------------------------------------------------------
0275               *  BL   @XIDTAB
0276               *
0277               *  TMP0 = Address of video mode table
0278               *--------------------------------------------------------------
0279               *  Remarks
0280               *  TMP1 = MSB is the VDP target register
0281               *         LSB is the value to write
0282               ********|*****|*********************|**************************
0283 2306 C13B  30 vidtab  mov   *r11+,tmp0            ; Get video mode table
0284 2308 C394  26 xidtab  mov   *tmp0,r14             ; Store copy of VDP#0 and #1 in RAM
0285               *--------------------------------------------------------------
0286               * Calculate PNT base address
0287               *--------------------------------------------------------------
0288 230A C144  18         mov   tmp0,tmp1
0289 230C 05C5  14         inct  tmp1
0290 230E D155  26         movb  *tmp1,tmp1            ; Get value for VDP#2
0291 2310 0245  22         andi  tmp1,>ff00            ; Only keep MSB
     2312 FF00     
0292 2314 0A25  20         sla   tmp1,2                ; TMP1 *= 400
0293 2316 C805  30         mov   tmp1,@wbase           ; Store calculated base
     2318 8328     
0294               *--------------------------------------------------------------
0295               * Dump VDP shadow registers
0296               *--------------------------------------------------------------
0297 231A 0205  20         li    tmp1,>8000            ; Start with VDP register 0
     231C 8000     
0298 231E 0206  20         li    tmp2,8
     2320 0008     
0299 2322 D834  40 vidta1  movb  *tmp0+,@tmp1lb        ; Write value to VDP register
     2324 830B     
0300 2326 06C5  14         swpb  tmp1
0301 2328 D805  30         movb  tmp1,@vdpa
     232A 8C02     
0302 232C 06C5  14         swpb  tmp1
0303 232E D805  30         movb  tmp1,@vdpa
     2330 8C02     
0304 2332 0225  22         ai    tmp1,>0100
     2334 0100     
0305 2336 0606  14         dec   tmp2
0306 2338 16F4  14         jne   vidta1                ; Next register
0307 233A C814  38         mov   *tmp0,@wcolmn         ; Store # of columns per row
     233C 833A     
0308 233E 045B  20         b     *r11
0309               
0310               
0311               ***************************************************************
0312               * PUTVR  - Put single VDP register
0313               ***************************************************************
0314               *  BL   @PUTVR
0315               *  DATA P0
0316               *--------------------------------------------------------------
0317               *  P0 = MSB is the VDP target register
0318               *       LSB is the value to write
0319               *--------------------------------------------------------------
0320               *  BL   @PUTVRX
0321               *
0322               *  TMP0 = MSB is the VDP target register
0323               *         LSB is the value to write
0324               ********|*****|*********************|**************************
0325 2340 C13B  30 putvr   mov   *r11+,tmp0
0326 2342 0264  22 putvrx  ori   tmp0,>8000
     2344 8000     
0327 2346 06C4  14         swpb  tmp0
0328 2348 D804  30         movb  tmp0,@vdpa
     234A 8C02     
0329 234C 06C4  14         swpb  tmp0
0330 234E D804  30         movb  tmp0,@vdpa
     2350 8C02     
0331 2352 045B  20         b     *r11
0332               
0333               
0334               ***************************************************************
0335               * PUTV01  - Put VDP registers #0 and #1
0336               ***************************************************************
0337               *  BL   @PUTV01
0338               ********|*****|*********************|**************************
0339 2354 C20B  18 putv01  mov   r11,tmp4              ; Save R11
0340 2356 C10E  18         mov   r14,tmp0
0341 2358 0984  32         srl   tmp0,8
0342 235A 06A0  32         bl    @putvrx               ; Write VR#0
     235C 2342     
0343 235E 0204  20         li    tmp0,>0100
     2360 0100     
0344 2362 D820  42         movb  @r14lb,@tmp0lb
     2364 831D     
     2366 8309     
0345 2368 06A0  32         bl    @putvrx               ; Write VR#1
     236A 2342     
0346 236C 0458  20         b     *tmp4                 ; Exit
0347               
0348               
0349               ***************************************************************
0350               * LDFNT - Load TI-99/4A font from GROM into VDP
0351               ***************************************************************
0352               *  BL   @LDFNT
0353               *  DATA P0,P1
0354               *--------------------------------------------------------------
0355               *  P0 = VDP Target address
0356               *  P1 = Font options
0357               *--------------------------------------------------------------
0358               * Uses registers tmp0-tmp4
0359               ********|*****|*********************|**************************
0360 236E C20B  18 ldfnt   mov   r11,tmp4              ; Save R11
0361 2370 05CB  14         inct  r11                   ; Get 2nd parameter (font options)
0362 2372 C11B  26         mov   *r11,tmp0             ; Get P0
0363 2374 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     2376 7FFF     
0364 2378 2120  32         coc   @wbit0,tmp0
     237A 2020     
0365 237C 1604  14         jne   ldfnt1
0366 237E 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2380 8000     
0367 2382 0244  22         andi  tmp0,>7fff            ; Parameter value bit 0=0
     2384 7FFF     
0368               *--------------------------------------------------------------
0369               * Read font table address from GROM into tmp1
0370               *--------------------------------------------------------------
0371 2386 C124  34 ldfnt1  mov   @tmp006(tmp0),tmp0    ; Load GROM index address into tmp0
     2388 23F0     
0372 238A D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 1 for reading
     238C 9C02     
0373 238E 06C4  14         swpb  tmp0
0374 2390 D804  38         movb  tmp0,@grmwa           ; Setup GROM source byte 2 for reading
     2392 9C02     
0375 2394 D160  34         movb  @grmrd,tmp1           ; Read font table address byte 1
     2396 9800     
0376 2398 06C5  14         swpb  tmp1
0377 239A D160  34         movb  @grmrd,tmp1           ; Read font table address byte 2
     239C 9800     
0378 239E 06C5  14         swpb  tmp1
0379               *--------------------------------------------------------------
0380               * Setup GROM source address from tmp1
0381               *--------------------------------------------------------------
0382 23A0 D805  38         movb  tmp1,@grmwa
     23A2 9C02     
0383 23A4 06C5  14         swpb  tmp1
0384 23A6 D805  38         movb  tmp1,@grmwa           ; Setup GROM address for reading
     23A8 9C02     
0385               *--------------------------------------------------------------
0386               * Setup VDP target address
0387               *--------------------------------------------------------------
0388 23AA C118  26         mov   *tmp4,tmp0            ; Get P1 (VDP destination)
0389 23AC 06A0  32         bl    @vdwa                 ; Setup VDP destination address
     23AE 22C4     
0390 23B0 05C8  14         inct  tmp4                  ; R11=R11+2
0391 23B2 C158  26         mov   *tmp4,tmp1            ; Get font options into TMP1
0392 23B4 0245  22         andi  tmp1,>7fff            ; Parameter value bit 0=0
     23B6 7FFF     
0393 23B8 C1A5  34         mov   @tmp006+2(tmp1),tmp2  ; Get number of patterns to copy
     23BA 23F2     
0394 23BC C165  34         mov   @tmp006+4(tmp1),tmp1  ; 7 or 8 byte pattern ?
     23BE 23F4     
0395               *--------------------------------------------------------------
0396               * Copy from GROM to VRAM
0397               *--------------------------------------------------------------
0398 23C0 0B15  18 ldfnt2  src   tmp1,1                ; Carry set ?
0399 23C2 1812  14         joc   ldfnt4                ; Yes, go insert a >00
0400 23C4 D120  34         movb  @grmrd,tmp0
     23C6 9800     
0401               *--------------------------------------------------------------
0402               *   Make font fat
0403               *--------------------------------------------------------------
0404 23C8 20A0  32         coc   @wbit0,config         ; Fat flag set ?
     23CA 2020     
0405 23CC 1603  14         jne   ldfnt3                ; No, so skip
0406 23CE D1C4  18         movb  tmp0,tmp3
0407 23D0 0917  18         srl   tmp3,1
0408 23D2 E107  18         soc   tmp3,tmp0
0409               *--------------------------------------------------------------
0410               *   Dump byte to VDP and do housekeeping
0411               *--------------------------------------------------------------
0412 23D4 D804  30 ldfnt3  movb  tmp0,@vdpw            ; Dump byte to VRAM
     23D6 8C00     
0413 23D8 0606  14         dec   tmp2
0414 23DA 16F2  14         jne   ldfnt2
0415 23DC 05C8  14         inct  tmp4                  ; R11=R11+2
0416 23DE 020F  20         li    r15,vdpw              ; Set VDP write address
     23E0 8C00     
0417 23E2 0242  22         andi  config,>7fff          ; CONFIG register bit 0=0
     23E4 7FFF     
0418 23E6 0458  20         b     *tmp4                 ; Exit
0419 23E8 D820  46 ldfnt4  movb  @hb$00,@vdpw          ; Insert byte >00 into VRAM
     23EA 2000     
     23EC 8C00     
0420 23EE 10E8  14         jmp   ldfnt2
0421               *--------------------------------------------------------------
0422               * Fonts pointer table
0423               *--------------------------------------------------------------
0424 23F0 004C     tmp006  data  >004c,64*8,>0000      ; Pointer to TI title screen font
     23F2 0200     
     23F4 0000     
0425 23F6 004E             data  >004e,64*7,>0101      ; Pointer to upper case font
     23F8 01C0     
     23FA 0101     
0426 23FC 004E             data  >004e,96*7,>0101      ; Pointer to upper & lower case font
     23FE 02A0     
     2400 0101     
0427 2402 0050             data  >0050,32*7,>0101      ; Pointer to lower case font
     2404 00E0     
     2406 0101     
0428               
0429               
0430               
0431               ***************************************************************
0432               * YX2PNT - Get VDP PNT address for current YX cursor position
0433               ***************************************************************
0434               *  BL   @YX2PNT
0435               *--------------------------------------------------------------
0436               *  INPUT
0437               *  @WYX = Cursor YX position
0438               *--------------------------------------------------------------
0439               *  OUTPUT
0440               *  TMP0 = VDP address for entry in Pattern Name Table
0441               *--------------------------------------------------------------
0442               *  Register usage
0443               *  TMP0, R14, R15
0444               ********|*****|*********************|**************************
0445 2408 C10E  18 yx2pnt  mov   r14,tmp0              ; Save VDP#0 & VDP#1
0446 240A C3A0  30         mov   @wyx,r14              ; Get YX
     240C 832A     
0447 240E 098E  32         srl   r14,8                 ; Right justify (remove X)
0448 2410 3BA0  70         mpy   @wcolmn,r14           ; pos = Y * (columns per row)
     2412 833A     
0449               *--------------------------------------------------------------
0450               * Do rest of calculation with R15 (16 bit part is there)
0451               * Re-use R14
0452               *--------------------------------------------------------------
0453 2414 C3A0  30         mov   @wyx,r14              ; Get YX
     2416 832A     
0454 2418 024E  22         andi  r14,>00ff             ; Remove Y
     241A 00FF     
0455 241C A3CE  18         a     r14,r15               ; pos = pos + X
0456 241E A3E0  30         a     @wbase,r15            ; pos = pos + (PNT base address)
     2420 8328     
0457               *--------------------------------------------------------------
0458               * Clean up before exit
0459               *--------------------------------------------------------------
0460 2422 C384  18         mov   tmp0,r14              ; Restore VDP#0 & VDP#1
0461 2424 C10F  18         mov   r15,tmp0              ; Return pos in TMP0
0462 2426 020F  20         li    r15,vdpw              ; VDP write address
     2428 8C00     
0463 242A 045B  20         b     *r11
0464               
0465               
0466               
0467               ***************************************************************
0468               * Put length-byte prefixed string at current YX
0469               ***************************************************************
0470               *  BL   @PUTSTR
0471               *  DATA P0
0472               *
0473               *  P0 = Pointer to string
0474               *--------------------------------------------------------------
0475               *  REMARKS
0476               *  First byte of string must contain length
0477               *--------------------------------------------------------------
0478               *  Register usage
0479               *  tmp1, tmp2, tmp3
0480               ********|*****|*********************|**************************
0481 242C C17B  30 putstr  mov   *r11+,tmp1
0482 242E D1B5  28 xutst0  movb  *tmp1+,tmp2           ; Get length byte
0483 2430 C1CB  18 xutstr  mov   r11,tmp3
0484 2432 06A0  32         bl    @yx2pnt               ; Get VDP destination address
     2434 2408     
0485 2436 C2C7  18         mov   tmp3,r11
0486 2438 0986  32         srl   tmp2,8                ; Right justify length byte
0487               *--------------------------------------------------------------
0488               * Put string
0489               *--------------------------------------------------------------
0490 243A C186  18         mov   tmp2,tmp2             ; Length = 0 ?
0491 243C 1305  14         jeq   !                     ; Yes, crash and burn
0492               
0493 243E 0286  22         ci    tmp2,255              ; Length > 255 ?
     2440 00FF     
0494 2442 1502  14         jgt   !                     ; Yes, crash and burn
0495               
0496 2444 0460  28         b     @xpym2v               ; Display string
     2446 249A     
0497               *--------------------------------------------------------------
0498               * Crash handler
0499               *--------------------------------------------------------------
0500 2448 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     244A FFCE     
0501 244C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     244E 2026     
0502               
0503               
0504               
0505               ***************************************************************
0506               * Put length-byte prefixed string at YX
0507               ***************************************************************
0508               *  BL   @PUTAT
0509               *  DATA P0,P1
0510               *
0511               *  P0 = YX position
0512               *  P1 = Pointer to string
0513               *--------------------------------------------------------------
0514               *  REMARKS
0515               *  First byte of string must contain length
0516               ********|*****|*********************|**************************
0517 2450 C83B  42 putat   mov   *r11+,@wyx            ; Set YX position
     2452 832A     
0518 2454 0460  28         b     @putstr
     2456 242C     
0519               
0520               
0521               ***************************************************************
0522               * putlst
0523               * Loop over string list and display
0524               ***************************************************************
0525               * bl  @putlst
0526               *--------------------------------------------------------------
0527               * INPUT
0528               * @wyx = Cursor position
0529               * tmp1 = Pointer to first length-prefixed string in list
0530               * tmp2 = Number of strings to display
0531               *--------------------------------------------------------------
0532               * OUTPUT
0533               * none
0534               *--------------------------------------------------------------
0535               * Register usage
0536               * tmp0, tmp1, tmp2, tmp3
0537               ********|*****|*********************|**************************
0538               putlst:
0539 2458 0649  14         dect  stack
0540 245A C64B  30         mov   r11,*stack            ; Save return address
0541 245C 0649  14         dect  stack
0542 245E C644  30         mov   tmp0,*stack           ; Push tmp0
0543                       ;------------------------------------------------------
0544                       ; Dump strings to VDP
0545                       ;------------------------------------------------------
0546               putlst.loop:
0547 2460 D1D5  26         movb  *tmp1,tmp3            ; Get string length byte
0548 2462 0987  32         srl   tmp3,8                ; Right align
0549               
0550 2464 0649  14         dect  stack
0551 2466 C645  30         mov   tmp1,*stack           ; Push tmp1
0552 2468 0649  14         dect  stack
0553 246A C646  30         mov   tmp2,*stack           ; Push tmp2
0554 246C 0649  14         dect  stack
0555 246E C647  30         mov   tmp3,*stack           ; Push tmp3
0556               
0557 2470 06A0  32         bl    @xutst0               ; Display string
     2472 242E     
0558                                                   ; \ i  tmp1 = Pointer to string
0559                                                   ; / i  @wyx = Cursor position at
0560               
0561 2474 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0562 2476 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0563 2478 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0564               
0565 247A 06A0  32         bl    @down                 ; Move cursor down
     247C 26DA     
0566               
0567 247E A147  18         a     tmp3,tmp1             ; Add string length to pointer
0568 2480 0585  14         inc   tmp1                  ; Consider length byte
0569 2482 2560  32         czc   @w$0001,tmp1          ; Is address even ?
     2484 2002     
0570 2486 1301  14         jeq   !                     ; Yes, skip adjustment
0571 2488 0585  14         inc   tmp1                  ; Make address even
0572 248A 0606  14 !       dec   tmp2
0573 248C 15E9  14         jgt   putlst.loop
0574                       ;------------------------------------------------------
0575                       ; Exit
0576                       ;------------------------------------------------------
0577               putlst.exit:
0578 248E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0579 2490 C2F9  30         mov   *stack+,r11           ; Pop r11
0580 2492 045B  20         b     *r11                  ; Return
                   < runlib.asm
0095               
0097                       copy  "copy_cpu_vram.asm"        ; CPU to VRAM copy functions
     **** ****     > copy_cpu_vram.asm
0001               * FILE......: copy_cpu_vram.asm
0002               * Purpose...: CPU memory to VRAM copy support module
0003               
0004               ***************************************************************
0005               * CPYM2V - Copy CPU memory to VRAM
0006               ***************************************************************
0007               *  BL   @CPYM2V
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP start address
0011               *  P1 = RAM/ROM start address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYM2V
0015               *
0016               *  TMP0 = VDP start address
0017               *  TMP1 = RAM/ROM start address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 2494 C13B  30 cpym2v  mov   *r11+,tmp0            ; VDP Start address
0021 2496 C17B  30         mov   *r11+,tmp1            ; RAM/ROM start address
0022 2498 C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Assert
0025               *--------------------------------------------------------------
0026 249A C186  18 xpym2v  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0027 249C 1604  14         jne   !                     ; No, continue
0028               
0029 249E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24A0 FFCE     
0030 24A2 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24A4 2026     
0031               *--------------------------------------------------------------
0032               *    Setup VDP write address
0033               *--------------------------------------------------------------
0034 24A6 0264  22 !       ori   tmp0,>4000
     24A8 4000     
0035 24AA 06C4  14         swpb  tmp0
0036 24AC D804  30         movb  tmp0,@vdpa
     24AE 8C02     
0037 24B0 06C4  14         swpb  tmp0
0038 24B2 D804  30         movb  tmp0,@vdpa
     24B4 8C02     
0039               *--------------------------------------------------------------
0040               *    Copy bytes from CPU memory to VRAM
0041               *--------------------------------------------------------------
0042 24B6 020F  20         li    r15,vdpw              ; Set VDP write address
     24B8 8C00     
0043 24BA C820  46         mov   @tmp008,@mcloop       ; Setup copy command
     24BC 24C4     
     24BE 8320     
0044 24C0 0460  24         b     @mcloop               ; Write data to VDP and return
     24C2 8320     
0045               *--------------------------------------------------------------
0046               * Data
0047               *--------------------------------------------------------------
0048 24C4 D7F5     tmp008  data  >d7f5                 ; MOVB *TMP1+,*R15
                   < runlib.asm
0099               
0101                       copy  "copy_vram_cpu.asm"        ; VRAM to CPU copy functions
     **** ****     > copy_vram_cpu.asm
0001               * FILE......: copy_vram_cpu.asm
0002               * Purpose...: VRAM to CPU memory copy support module
0003               
0004               ***************************************************************
0005               * CPYV2M - Copy VRAM to CPU memory
0006               ***************************************************************
0007               *  BL   @CPYV2M
0008               *  DATA P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = VDP source address
0011               *  P1 = RAM target address
0012               *  P2 = Number of bytes to copy
0013               *--------------------------------------------------------------
0014               *  BL @XPYV2M
0015               *
0016               *  TMP0 = VDP source address
0017               *  TMP1 = RAM target address
0018               *  TMP2 = Number of bytes to copy
0019               ********|*****|*********************|**************************
0020 24C6 C13B  30 cpyv2m  mov   *r11+,tmp0            ; VDP source address
0021 24C8 C17B  30         mov   *r11+,tmp1            ; Target address in RAM
0022 24CA C1BB  30         mov   *r11+,tmp2            ; Bytes to copy
0023               *--------------------------------------------------------------
0024               *    Setup VDP read address
0025               *--------------------------------------------------------------
0026 24CC 06C4  14 xpyv2m  swpb  tmp0
0027 24CE D804  30         movb  tmp0,@vdpa
     24D0 8C02     
0028 24D2 06C4  14         swpb  tmp0
0029 24D4 D804  30         movb  tmp0,@vdpa
     24D6 8C02     
0030               *--------------------------------------------------------------
0031               *    Copy bytes from VDP memory to RAM
0032               *--------------------------------------------------------------
0033 24D8 020F  20         li    r15,vdpr              ; Set VDP read address
     24DA 8800     
0034 24DC C820  46         mov   @tmp007,@mcloop       ; Setup copy command
     24DE 24E6     
     24E0 8320     
0035 24E2 0460  24         b     @mcloop               ; Read data from VDP
     24E4 8320     
0036 24E6 DD5F     tmp007  data  >dd5f                 ; MOVB *R15,*TMP+
                   < runlib.asm
0103               
0105                       copy  "copy_cpu_cpu.asm"         ; CPU to CPU copy functions
     **** ****     > copy_cpu_cpu.asm
0001               * FILE......: copy_cpu_cpu.asm
0002               * Purpose...: CPU to CPU memory copy support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                       CPU COPY FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * CPYM2M - Copy CPU memory to CPU memory
0010               ***************************************************************
0011               *  BL   @CPYM2M
0012               *  DATA P0,P1,P2
0013               *--------------------------------------------------------------
0014               *  P0 = Memory source address
0015               *  P1 = Memory target address
0016               *  P2 = Number of bytes to copy
0017               *--------------------------------------------------------------
0018               *  BL @XPYM2M
0019               *
0020               *  TMP0 = Memory source address
0021               *  TMP1 = Memory target address
0022               *  TMP2 = Number of bytes to copy
0023               ********|*****|*********************|**************************
0024 24E8 C13B  30 cpym2m  mov   *r11+,tmp0            ; Memory source address
0025 24EA C17B  30         mov   *r11+,tmp1            ; Memory target address
0026 24EC C1BB  30         mov   *r11+,tmp2            ; Number of bytes to copy
0027               *--------------------------------------------------------------
0028               * Do some checks first
0029               *--------------------------------------------------------------
0030 24EE C186  18 xpym2m  mov   tmp2,tmp2             ; Bytes to copy = 0 ?
0031 24F0 1604  14         jne   cpychk                ; No, continue checking
0032               
0033 24F2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     24F4 FFCE     
0034 24F6 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     24F8 2026     
0035               *--------------------------------------------------------------
0036               *    Check: 1 byte copy
0037               *--------------------------------------------------------------
0038 24FA 0286  22 cpychk  ci    tmp2,1                ; Bytes to copy = 1 ?
     24FC 0001     
0039 24FE 1603  14         jne   cpym0                 ; No, continue checking
0040 2500 DD74  42         movb  *tmp0+,*tmp1+         ; Copy byte
0041 2502 04C6  14         clr   tmp2                  ; Reset counter
0042 2504 045B  20         b     *r11                  ; Return to caller
0043               *--------------------------------------------------------------
0044               *    Check: Uneven address handling
0045               *--------------------------------------------------------------
0046 2506 0242  22 cpym0   andi  config,>7fff          ; Clear CONFIG bit 0
     2508 7FFF     
0047 250A C1C4  18         mov   tmp0,tmp3
0048 250C 0247  22         andi  tmp3,1
     250E 0001     
0049 2510 1618  14         jne   cpyodd                ; Odd source address handling
0050 2512 C1C5  18 cpym1   mov   tmp1,tmp3
0051 2514 0247  22         andi  tmp3,1
     2516 0001     
0052 2518 1614  14         jne   cpyodd                ; Odd target address handling
0053               *--------------------------------------------------------------
0054               * 8 bit copy
0055               *--------------------------------------------------------------
0056 251A 20A0  32 cpym2   coc   @wbit0,config         ; CONFIG bit 0 set ?
     251C 2020     
0057 251E 1605  14         jne   cpym3
0058 2520 C820  46         mov   @tmp011,@mcloop       ; Setup byte copy command
     2522 2548     
     2524 8320     
0059 2526 0460  24         b     @mcloop               ; Copy memory and exit
     2528 8320     
0060               *--------------------------------------------------------------
0061               * 16 bit copy
0062               *--------------------------------------------------------------
0063 252A C1C6  18 cpym3   mov   tmp2,tmp3
0064 252C 0247  22         andi  tmp3,1                ; TMP3=1 -> ODD else EVEN
     252E 0001     
0065 2530 1301  14         jeq   cpym4
0066 2532 0606  14         dec   tmp2                  ; Make TMP2 even
0067 2534 CD74  46 cpym4   mov   *tmp0+,*tmp1+
0068 2536 0646  14         dect  tmp2
0069 2538 16FD  14         jne   cpym4
0070               *--------------------------------------------------------------
0071               * Copy last byte if ODD
0072               *--------------------------------------------------------------
0073 253A C1C7  18         mov   tmp3,tmp3
0074 253C 1301  14         jeq   cpymz
0075 253E D554  38         movb  *tmp0,*tmp1
0076 2540 045B  20 cpymz   b     *r11                  ; Return to caller
0077               *--------------------------------------------------------------
0078               * Handle odd source/target address
0079               *--------------------------------------------------------------
0080 2542 0262  22 cpyodd  ori   config,>8000          ; Set CONFIG bit 0
     2544 8000     
0081 2546 10E9  14         jmp   cpym2
0082 2548 DD74     tmp011  data  >dd74                 ; MOVB *TMP0+,*TMP1+
                   < runlib.asm
0107               
0111               
0115               
0117                       copy  "cpu_sams.asm"             ; Support for SAMS memory card
     **** ****     > cpu_sams.asm
0001               * FILE......: cpu_sams.asm
0002               * Purpose...: Low level support for SAMS memory expansion card
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                SAMS Memory Expansion support
0006               *//////////////////////////////////////////////////////////////
0007               
0008               *--------------------------------------------------------------
0009               * ACCESS and MAPPING
0010               * (by the late Bruce Harisson):
0011               *
0012               * To use other than the default setup, you have to do two
0013               * things:
0014               *
0015               * 1. You have to "turn on" the card's memory in the
0016               *    >4000 block and write to the mapping registers there.
0017               *    (bl  @sams.page.set)
0018               *
0019               * 2. You have to "turn on" the mapper function to make what
0020               *    you've written into the >4000 block take effect.
0021               *    (bl  @sams.mapping.on)
0022               *--------------------------------------------------------------
0023               *  SAMS                          Default SAMS page
0024               *  Register     Memory bank      (system startup)
0025               *  =======      ===========      ================
0026               *  >4004        >2000-2fff          >002
0027               *  >4006        >3000-4fff          >003
0028               *  >4014        >a000-afff          >00a
0029               *  >4016        >b000-bfff          >00b
0030               *  >4018        >c000-cfff          >00c
0031               *  >401a        >d000-dfff          >00d
0032               *  >401c        >e000-efff          >00e
0033               *  >401e        >f000-ffff          >00f
0034               *  Others       Inactive
0035               *--------------------------------------------------------------
0036               
0037               
0038               
0039               
0040               ***************************************************************
0041               * sams.page.get - Get SAMS page number for memory address
0042               ***************************************************************
0043               * bl   @sams.page.get
0044               *      data P0
0045               *--------------------------------------------------------------
0046               * P0 = Memory address (e.g. address >a100 will map to SAMS
0047               *      register >4014 (bank >a000 - >afff)
0048               *--------------------------------------------------------------
0049               * bl   @xsams.page.get
0050               *
0051               * tmp0 = Memory address (e.g. address >a100 will map to SAMS
0052               *        register >4014 (bank >a000 - >afff)
0053               *--------------------------------------------------------------
0054               * OUTPUT
0055               * waux1 = SAMS page number
0056               * waux2 = Address of affected SAMS register
0057               *--------------------------------------------------------------
0058               * Register usage
0059               * r0, tmp0, r12
0060               ********|*****|*********************|**************************
0061               sams.page.get:
0062 254A C13B  30         mov   *r11+,tmp0            ; Memory address
0063               xsams.page.get:
0064 254C 0649  14         dect  stack
0065 254E C64B  30         mov   r11,*stack            ; Push return address
0066 2550 0649  14         dect  stack
0067 2552 C640  30         mov   r0,*stack             ; Push r0
0068 2554 0649  14         dect  stack
0069 2556 C64C  30         mov   r12,*stack            ; Push r12
0070               *--------------------------------------------------------------
0071               * Determine memory bank
0072               *--------------------------------------------------------------
0073 2558 09C4  40         srl   tmp0,12               ; Reduce address to 4K chunks
0074 255A 0A14  18         sla   tmp0,1                ; Registers are 2 bytes appart
0075               
0076 255C 0224  22         ai    tmp0,>4000            ; Add base address of "DSR" space
     255E 4000     
0077 2560 C804  30         mov   tmp0,@waux2           ; Save address of SAMS register
     2562 833E     
0078               *--------------------------------------------------------------
0079               * Get SAMS page number
0080               *--------------------------------------------------------------
0081 2564 020C  20         li    r12,>1e00             ; SAMS CRU address
     2566 1E00     
0082 2568 04C0  14         clr   r0
0083 256A 1D00  16         sbo   0                     ; Enable access to SAMS registers
0084 256C D014  26         movb  *tmp0,r0              ; Get SAMS page number
0085 256E D100  18         movb  r0,tmp0
0086 2570 0984  32         srl   tmp0,8                ; Right align
0087 2572 C804  30         mov   tmp0,@waux1           ; Save SAMS page number
     2574 833C     
0088 2576 1E00  16         sbz   0                     ; Disable access to SAMS registers
0089               *--------------------------------------------------------------
0090               * Exit
0091               *--------------------------------------------------------------
0092               sams.page.get.exit:
0093 2578 C339  30         mov   *stack+,r12           ; Pop r12
0094 257A C039  30         mov   *stack+,r0            ; Pop r0
0095 257C C2F9  30         mov   *stack+,r11           ; Pop return address
0096 257E 045B  20         b     *r11                  ; Return to caller
0097               
0098               
0099               
0100               
0101               ***************************************************************
0102               * sams.page.set - Set SAMS memory page
0103               ***************************************************************
0104               * bl   sams.page.set
0105               *      data P0,P1
0106               *--------------------------------------------------------------
0107               * P0 = SAMS page number
0108               * P1 = Memory address (e.g. address >a100 will map to SAMS
0109               *      register >4014 (bank >a000 - >afff)
0110               *--------------------------------------------------------------
0111               * bl   @xsams.page.set
0112               *
0113               * tmp0 = SAMS page number
0114               * tmp1 = Memory address (e.g. address >a100 will map to SAMS
0115               *        register >4014 (bank >a000 - >afff)
0116               *--------------------------------------------------------------
0117               * Register usage
0118               * r0, tmp0, tmp1, r12
0119               *--------------------------------------------------------------
0120               * SAMS page number should be in range 0-255 (>00 to >ff)
0121               *
0122               *  Page         Memory
0123               *  ====         ======
0124               *  >00             32K
0125               *  >1f            128K
0126               *  >3f            256K
0127               *  >7f            512K
0128               *  >ff           1024K
0129               ********|*****|*********************|**************************
0130               sams.page.set:
0131 2580 C13B  30         mov   *r11+,tmp0            ; Get SAMS page
0132 2582 C17B  30         mov   *r11+,tmp1            ; Get memory address
0133               xsams.page.set:
0134 2584 0649  14         dect  stack
0135 2586 C64B  30         mov   r11,*stack            ; Push return address
0136 2588 0649  14         dect  stack
0137 258A C640  30         mov   r0,*stack             ; Push r0
0138 258C 0649  14         dect  stack
0139 258E C64C  30         mov   r12,*stack            ; Push r12
0140 2590 0649  14         dect  stack
0141 2592 C644  30         mov   tmp0,*stack           ; Push tmp0
0142 2594 0649  14         dect  stack
0143 2596 C645  30         mov   tmp1,*stack           ; Push tmp1
0144               *--------------------------------------------------------------
0145               * Determine memory bank
0146               *--------------------------------------------------------------
0147 2598 09C5  40         srl   tmp1,12               ; Reduce address to 4K chunks
0148 259A 0A15  18         sla   tmp1,1                ; Registers are 2 bytes appart
0149               *--------------------------------------------------------------
0150               * Assert on SAMS page number
0151               *--------------------------------------------------------------
0152 259C 0284  22         ci    tmp0,255              ; Crash if page > 255
     259E 00FF     
0153 25A0 150D  14         jgt   !
0154               *--------------------------------------------------------------
0155               * Assert on SAMS register
0156               *--------------------------------------------------------------
0157 25A2 0285  22         ci    tmp1,>1e              ; r@401e   >f000 - >ffff
     25A4 001E     
0158 25A6 150A  14         jgt   !
0159 25A8 0285  22         ci    tmp1,>04              ; r@4004   >2000 - >2fff
     25AA 0004     
0160 25AC 1107  14         jlt   !
0161 25AE 0285  22         ci    tmp1,>12              ; r@4014   >a000 - >ffff
     25B0 0012     
0162 25B2 1508  14         jgt   sams.page.set.switch_page
0163 25B4 0285  22         ci    tmp1,>06              ; r@4006   >3000 - >3fff
     25B6 0006     
0164 25B8 1501  14         jgt   !
0165 25BA 1004  14         jmp   sams.page.set.switch_page
0166                       ;------------------------------------------------------
0167                       ; Crash the system
0168                       ;------------------------------------------------------
0169 25BC C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     25BE FFCE     
0170 25C0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     25C2 2026     
0171               *--------------------------------------------------------------
0172               * Switch memory bank to specified SAMS page
0173               *--------------------------------------------------------------
0174               sams.page.set.switch_page
0175 25C4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25C6 1E00     
0176 25C8 C004  18         mov   tmp0,r0               ; Must be in r0 for CRU use
0177 25CA 06C0  14         swpb  r0                    ; LSB to MSB
0178 25CC 1D00  16         sbo   0                     ; Enable access to SAMS registers
0179 25CE D940  38         movb  r0,@>4000(tmp1)       ; Set SAMS bank number
     25D0 4000     
0180 25D2 1E00  16         sbz   0                     ; Disable access to SAMS registers
0181               *--------------------------------------------------------------
0182               * Exit
0183               *--------------------------------------------------------------
0184               sams.page.set.exit:
0185 25D4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0186 25D6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0187 25D8 C339  30         mov   *stack+,r12           ; Pop r12
0188 25DA C039  30         mov   *stack+,r0            ; Pop r0
0189 25DC C2F9  30         mov   *stack+,r11           ; Pop return address
0190 25DE 045B  20         b     *r11                  ; Return to caller
0191               
0192               
0193               
0194               
0195               ***************************************************************
0196               * sams.mapping.on - Enable SAMS mapping mode
0197               ***************************************************************
0198               *  bl   @sams.mapping.on
0199               *--------------------------------------------------------------
0200               *  Register usage
0201               *  r12
0202               ********|*****|*********************|**************************
0203               sams.mapping.on:
0204 25E0 0649  14         dect  stack
0205 25E2 C64C  30         mov   r12,*stack            ; Push r12
0206 25E4 020C  20         li    r12,>1e00             ; SAMS CRU address
     25E6 1E00     
0207 25E8 1D01  16         sbo   1                     ; Enable SAMS mapper
0208               *--------------------------------------------------------------
0209               * Exit
0210               *--------------------------------------------------------------
0211               sams.mapping.on.exit:
0212 25EA C339  30         mov   *stack+,r12           ; Pop r12
0213 25EC 045B  20         b     *r11                  ; Return to caller
0214               
0215               
0216               
0217               
0218               ***************************************************************
0219               * sams.mapping.off - Disable SAMS mapping mode
0220               ***************************************************************
0221               * bl  @sams.mapping.off
0222               *--------------------------------------------------------------
0223               * OUTPUT
0224               * none
0225               *--------------------------------------------------------------
0226               * Register usage
0227               * r12
0228               ********|*****|*********************|**************************
0229               sams.mapping.off:
0230 25EE 0649  14         dect  stack
0231 25F0 C64C  30         mov   r12,*stack            ; Push r12
0232 25F2 020C  20         li    r12,>1e00             ; SAMS CRU address
     25F4 1E00     
0233 25F6 1E01  16         sbz   1                     ; Disable SAMS mapper
0234               *--------------------------------------------------------------
0235               * Exit
0236               *--------------------------------------------------------------
0237               sams.mapping.off.exit:
0238 25F8 C339  30         mov   *stack+,r12           ; Pop r12
0239 25FA 045B  20         b     *r11                  ; Return to caller
0240               
0241               
0242               
0243               
0244               
0245               ***************************************************************
0246               * sams.layout
0247               * Setup SAMS memory banks
0248               ***************************************************************
0249               * bl  @sams.layout
0250               *     data P0
0251               *--------------------------------------------------------------
0252               * INPUT
0253               * P0 = Pointer to SAMS page layout table
0254               *--------------------------------------------------------------
0255               * bl  @xsams.layout
0256               *
0257               * tmp0 = Pointer to SAMS page layout table
0258               *--------------------------------------------------------------
0259               * OUTPUT
0260               * none
0261               *--------------------------------------------------------------
0262               * Register usage
0263               * tmp0, r12
0264               ********|*****|*********************|**************************
0265               
0266               
0267               sams.layout:
0268 25FC C13B  30         mov   *r11+,tmp0            ; Get P0
0269               xsams.layout:
0270 25FE 0649  14         dect  stack
0271 2600 C64B  30         mov   r11,*stack            ; Save return address
0272 2602 0649  14         dect  stack
0273 2604 C644  30         mov   tmp0,*stack           ; Save tmp0
0274 2606 0649  14         dect  stack
0275 2608 C64C  30         mov   r12,*stack            ; Save r12
0276                       ;------------------------------------------------------
0277                       ; Set SAMS registers
0278                       ;------------------------------------------------------
0279 260A 020C  20         li    r12,>1e00             ; SAMS CRU address
     260C 1E00     
0280 260E 1D00  16         sbo   0                     ; Enable access to SAMS registers
0281               
0282 2610 C834  50         mov  *tmp0+,@>4004          ; Set page for >2000 - >2fff
     2612 4004     
0283 2614 C834  50         mov  *tmp0+,@>4006          ; Set page for >3000 - >3fff
     2616 4006     
0284 2618 C834  50         mov  *tmp0+,@>4014          ; Set page for >a000 - >afff
     261A 4014     
0285 261C C834  50         mov  *tmp0+,@>4016          ; Set page for >b000 - >bfff
     261E 4016     
0286 2620 C834  50         mov  *tmp0+,@>4018          ; Set page for >c000 - >cfff
     2622 4018     
0287 2624 C834  50         mov  *tmp0+,@>401a          ; Set page for >d000 - >dfff
     2626 401A     
0288 2628 C834  50         mov  *tmp0+,@>401c          ; Set page for >e000 - >efff
     262A 401C     
0289 262C C834  50         mov  *tmp0+,@>401e          ; Set page for >f000 - >ffff
     262E 401E     
0290               
0291 2630 1E00  16         sbz   0                     ; Disable access to SAMS registers
0292 2632 1D01  16         sbo   1                     ; Enable SAMS mapper
0293                       ;------------------------------------------------------
0294                       ; Exit
0295                       ;------------------------------------------------------
0296               sams.layout.exit:
0297 2634 C339  30         mov   *stack+,r12           ; Pop r12
0298 2636 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0299 2638 C2F9  30         mov   *stack+,r11           ; Pop r11
0300 263A 045B  20         b     *r11                  ; Return to caller
0301               ***************************************************************
0302               * SAMS standard page layout table
0303               *--------------------------------------------------------------
0304               sams.layout.standard:
0305 263C 0200             data  >0200                 ; >2000-2fff, SAMS page >02
0306 263E 0300             data  >0300                 ; >3000-3fff, SAMS page >03
0307 2640 0A00             data  >0a00                 ; >a000-afff, SAMS page >0a
0308 2642 0B00             data  >0b00                 ; >b000-bfff, SAMS page >0b
0309 2644 0C00             data  >0c00                 ; >c000-cfff, SAMS page >0c
0310 2646 0D00             data  >0d00                 ; >d000-dfff, SAMS page >0d
0311 2648 0E00             data  >0e00                 ; >e000-efff, SAMS page >0e
0312 264A 0F00             data  >0f00                 ; >f000-ffff, SAMS page >0f
0313               
0314               
0315               ***************************************************************
0316               * sams.layout.copy
0317               * Copy SAMS memory layout
0318               ***************************************************************
0319               * bl  @sams.layout.copy
0320               *     data P0
0321               *--------------------------------------------------------------
0322               * P0 = Pointer to 8 words RAM buffer for results
0323               *--------------------------------------------------------------
0324               * OUTPUT
0325               * RAM buffer will have the SAMS page number for each range
0326               * 2000-2fff, 3000-3fff, a000-afff, b000-bfff, ...
0327               *--------------------------------------------------------------
0328               * Register usage
0329               * tmp0, tmp1, tmp2, tmp3
0330               ***************************************************************
0331               sams.layout.copy:
0332 264C C1FB  30         mov   *r11+,tmp3            ; Get P0
0333               
0334 264E 0649  14         dect  stack
0335 2650 C64B  30         mov   r11,*stack            ; Push return address
0336 2652 0649  14         dect  stack
0337 2654 C644  30         mov   tmp0,*stack           ; Push tmp0
0338 2656 0649  14         dect  stack
0339 2658 C645  30         mov   tmp1,*stack           ; Push tmp1
0340 265A 0649  14         dect  stack
0341 265C C646  30         mov   tmp2,*stack           ; Push tmp2
0342 265E 0649  14         dect  stack
0343 2660 C647  30         mov   tmp3,*stack           ; Push tmp3
0344                       ;------------------------------------------------------
0345                       ; Copy SAMS layout
0346                       ;------------------------------------------------------
0347 2662 0205  20         li    tmp1,sams.layout.copy.data
     2664 2684     
0348 2666 0206  20         li    tmp2,8                ; Set loop counter
     2668 0008     
0349                       ;------------------------------------------------------
0350                       ; Set SAMS memory pages
0351                       ;------------------------------------------------------
0352               sams.layout.copy.loop:
0353 266A C135  30         mov   *tmp1+,tmp0           ; Get memory address
0354 266C 06A0  32         bl    @xsams.page.get       ; \ Get SAMS page
     266E 254C     
0355                                                   ; | i  tmp0   = Memory address
0356                                                   ; / o  @waux1 = SAMS page
0357               
0358 2670 CDE0  46         mov   @waux1,*tmp3+         ; Copy SAMS page number
     2672 833C     
0359               
0360 2674 0606  14         dec   tmp2                  ; Next iteration
0361 2676 16F9  14         jne   sams.layout.copy.loop ; Loop until done
0362                       ;------------------------------------------------------
0363                       ; Exit
0364                       ;------------------------------------------------------
0365               sams.layout.copy.exit:
0366 2678 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0367 267A C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0368 267C C179  30         mov   *stack+,tmp1          ; Pop tmp1
0369 267E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0370 2680 C2F9  30         mov   *stack+,r11           ; Pop r11
0371 2682 045B  20         b     *r11                  ; Return to caller
0372               ***************************************************************
0373               * SAMS memory range table
0374               *--------------------------------------------------------------
0375               sams.layout.copy.data:
0376 2684 2000             data  >2000                 ; >2000-2fff
0377 2686 3000             data  >3000                 ; >3000-3fff
0378 2688 A000             data  >a000                 ; >a000-afff
0379 268A B000             data  >b000                 ; >b000-bfff
0380 268C C000             data  >c000                 ; >c000-cfff
0381 268E D000             data  >d000                 ; >d000-dfff
0382 2690 E000             data  >e000                 ; >e000-efff
0383 2692 F000             data  >f000                 ; >f000-ffff
                   < runlib.asm
0119               
0123               
0125                       copy  "vdp_intscr.asm"           ; VDP interrupt & screen on/off
     **** ****     > vdp_intscr.asm
0001               * FILE......: vdp_intscr.asm
0002               * Purpose...: VDP interrupt & screen on/off
0003               
0004               ***************************************************************
0005               * SCROFF - Disable screen display
0006               ***************************************************************
0007               *  BL @SCROFF
0008               ********|*****|*********************|**************************
0009 2694 024E  22 scroff  andi  r14,>ffbf             ; VDP#R1 bit 1=0 (Disable screen display)
     2696 FFBF     
0010 2698 0460  28         b     @putv01
     269A 2354     
0011               
0012               ***************************************************************
0013               * SCRON - Disable screen display
0014               ***************************************************************
0015               *  BL @SCRON
0016               ********|*****|*********************|**************************
0017 269C 026E  22 scron   ori   r14,>0040             ; VDP#R1 bit 1=1 (Enable screen display)
     269E 0040     
0018 26A0 0460  28         b     @putv01
     26A2 2354     
0019               
0020               ***************************************************************
0021               * INTOFF - Disable VDP interrupt
0022               ***************************************************************
0023               *  BL @INTOFF
0024               ********|*****|*********************|**************************
0025 26A4 024E  22 intoff  andi  r14,>ffdf             ; VDP#R1 bit 2=0 (Disable VDP interrupt)
     26A6 FFDF     
0026 26A8 0460  28         b     @putv01
     26AA 2354     
0027               
0028               ***************************************************************
0029               * INTON - Enable VDP interrupt
0030               ***************************************************************
0031               *  BL @INTON
0032               ********|*****|*********************|**************************
0033 26AC 026E  22 inton   ori   r14,>0020             ; VDP#R1 bit 2=1 (Enable VDP interrupt)
     26AE 0020     
0034 26B0 0460  28         b     @putv01
     26B2 2354     
                   < runlib.asm
0127               
0129                       copy  "vdp_sprites.asm"          ; VDP sprites
     **** ****     > vdp_sprites.asm
0001               ***************************************************************
0002               * FILE......: vdp_sprites.asm
0003               * Purpose...: Sprites support
0004               
0005               ***************************************************************
0006               * SMAG1X - Set sprite magnification 1x
0007               ***************************************************************
0008               *  BL @SMAG1X
0009               ********|*****|*********************|**************************
0010 26B4 024E  22 smag1x  andi  r14,>fffe             ; VDP#R1 bit 7=0 (Sprite magnification 1x)
     26B6 FFFE     
0011 26B8 0460  28         b     @putv01
     26BA 2354     
0012               
0013               ***************************************************************
0014               * SMAG2X - Set sprite magnification 2x
0015               ***************************************************************
0016               *  BL @SMAG2X
0017               ********|*****|*********************|**************************
0018 26BC 026E  22 smag2x  ori   r14,>0001             ; VDP#R1 bit 7=1 (Sprite magnification 2x)
     26BE 0001     
0019 26C0 0460  28         b     @putv01
     26C2 2354     
0020               
0021               ***************************************************************
0022               * S8X8 - Set sprite size 8x8 bits
0023               ***************************************************************
0024               *  BL @S8X8
0025               ********|*****|*********************|**************************
0026 26C4 024E  22 s8x8    andi  r14,>fffd             ; VDP#R1 bit 6=0 (Sprite size 8x8)
     26C6 FFFD     
0027 26C8 0460  28         b     @putv01
     26CA 2354     
0028               
0029               ***************************************************************
0030               * S16X16 - Set sprite size 16x16 bits
0031               ***************************************************************
0032               *  BL @S16X16
0033               ********|*****|*********************|**************************
0034 26CC 026E  22 s16x16  ori   r14,>0002             ; VDP#R1 bit 6=1 (Sprite size 16x16)
     26CE 0002     
0035 26D0 0460  28         b     @putv01
     26D2 2354     
                   < runlib.asm
0131               
0133                       copy  "vdp_cursor.asm"           ; VDP cursor handling
     **** ****     > vdp_cursor.asm
0001               * FILE......: vdp_cursor.asm
0002               * Purpose...: VDP cursor handling
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *               VDP cursor movement functions
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * AT - Set cursor YX position
0011               ***************************************************************
0012               *  bl   @yx
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  INPUT
0016               *  P0 = New Cursor YX position
0017               ********|*****|*********************|**************************
0018 26D4 C83B  42 at      mov   *r11+,@wyx
     26D6 832A     
0019 26D8 045B  20         b     *r11
0020               
0021               
0022               ***************************************************************
0023               * down - Increase cursor Y position
0024               ***************************************************************
0025               *  bl   @down
0026               ********|*****|*********************|**************************
0027 26DA B820  46 down    ab    @hb$01,@wyx
     26DC 2012     
     26DE 832A     
0028 26E0 045B  20         b     *r11
0029               
0030               
0031               ***************************************************************
0032               * up - Decrease cursor Y position
0033               ***************************************************************
0034               *  bl   @up
0035               ********|*****|*********************|**************************
0036 26E2 7820  46 up      sb    @hb$01,@wyx
     26E4 2012     
     26E6 832A     
0037 26E8 045B  20         b     *r11
0038               
0039               
0040               ***************************************************************
0041               * setx - Set cursor X position
0042               ***************************************************************
0043               *  bl   @setx
0044               *  data p0
0045               *--------------------------------------------------------------
0046               *  Register usage
0047               *  TMP0
0048               ********|*****|*********************|**************************
0049 26EA C13B  30 setx    mov   *r11+,tmp0            ; Set cursor X position
0050 26EC D120  30 xsetx   movb  @wyx,tmp0             ; Overwrite Y position
     26EE 832A     
0051 26F0 C804  30         mov   tmp0,@wyx             ; Save as new YX position
     26F2 832A     
0052 26F4 045B  20         b     *r11
                   < runlib.asm
0135               
0137                       copy  "vdp_yx2px_calc.asm"       ; VDP calculate pixel pos for YX coord
     **** ****     > vdp_yx2px_calc.asm
0001               * FILE......: vdp_yx2px_calc.asm
0002               * Purpose...: Calculate pixel position for YX coordinate
0003               
0004               ***************************************************************
0005               * YX2PX - Get pixel position for cursor YX position
0006               ***************************************************************
0007               *  BL   @YX2PX
0008               *
0009               *  (CONFIG:0 = 1) = Skip sprite adjustment
0010               *--------------------------------------------------------------
0011               *  INPUT
0012               *  @WYX   = Cursor YX position
0013               *--------------------------------------------------------------
0014               *  OUTPUT
0015               *  TMP0HB = Y pixel position
0016               *  TMP0LB = X pixel position
0017               *--------------------------------------------------------------
0018               *  Remarks
0019               *  This subroutine does not support multicolor mode
0020               ********|*****|*********************|**************************
0021 26F6 C120  30 yx2px   mov   @wyx,tmp0
     26F8 832A     
0022 26FA C18B  18 yx2pxx  mov   r11,tmp2              ; Save return address
0023 26FC 06C4  14         swpb  tmp0                  ; Y<->X
0024 26FE 04C5  14         clr   tmp1                  ; Clear before copy
0025 2700 D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0026               *--------------------------------------------------------------
0027               * X pixel - Special F18a 80 colums treatment
0028               *--------------------------------------------------------------
0029 2702 20A0  32         coc   @wbit1,config         ; f18a present ?
     2704 201E     
0030 2706 1609  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0031 2708 8820  46         c     @wcolmn,@yx2pxx_c80   ; 80 columns mode enabled ?
     270A 833A     
     270C 2736     
0032 270E 1605  14         jne   yx2pxx_normal         ; No, skip 80 cols handling
0033               
0034 2710 0A15  18         sla   tmp1,1                ; X = X * 2
0035 2712 B144  18         ab    tmp0,tmp1             ; X = X + (original X)
0036 2714 0225  22         ai    tmp1,>0500            ; X = X + 5 (F18a mystery offset)
     2716 0500     
0037 2718 1002  14         jmp   yx2pxx_y_calc
0038               *--------------------------------------------------------------
0039               * X pixel - Normal VDP treatment
0040               *--------------------------------------------------------------
0041               yx2pxx_normal:
0042 271A D144  18         movb  tmp0,tmp1             ; Copy X to TMP1
0043               *--------------------------------------------------------------
0044 271C 0A35  22         sla   tmp1,3                ; X=X*8
0045               *--------------------------------------------------------------
0046               * Calculate Y pixel position
0047               *--------------------------------------------------------------
0048               yx2pxx_y_calc:
0049 271E 0A34  22         sla   tmp0,3                ; Y=Y*8
0050 2720 D105  18         movb  tmp1,tmp0
0051 2722 06C4  14         swpb  tmp0                  ; X<->Y
0052 2724 20A0  32 yx2pi1  coc   @wbit0,config         ; Skip sprite adjustment ?
     2726 2020     
0053 2728 1305  14         jeq   yx2pi3                ; Yes, exit
0054               *--------------------------------------------------------------
0055               * Adjust for Y sprite location
0056               * See VDP Programmers Guide, Section 9.2.1
0057               *--------------------------------------------------------------
0058 272A 7120  34 yx2pi2  sb    @hb$01,tmp0           ; Adjust Y. Top of screen is at >FF
     272C 2012     
0059 272E 9120  34         cb    @hb$d0,tmp0           ; Y position = >D0 ?
     2730 2024     
0060 2732 13FB  14         jeq   yx2pi2                ; Yes, but that's not allowed, adjust
0061 2734 0456  20 yx2pi3  b     *tmp2                 ; Exit
0062               *--------------------------------------------------------------
0063               * Local constants
0064               *--------------------------------------------------------------
0065               yx2pxx_c80:
0066 2736 0050            data   80
0067               
0068               
                   < runlib.asm
0139               
0143               
0147               
0149                       copy  "vdp_f18a.asm"             ; VDP F18a low-level functions
     **** ****     > vdp_f18a.asm
0001               * FILE......: vdp_f18a.asm
0002               * Purpose...: VDP F18A Support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                 VDP F18A LOW-LEVEL FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * f18unl - Unlock F18A VDP
0010               ***************************************************************
0011               *  bl   @f18unl
0012               ********|*****|*********************|**************************
0013 2738 C20B  18 f18unl  mov   r11,tmp4              ; Save R11
0014 273A 06A0  32         bl    @putvr                ; Write once
     273C 2340     
0015 273E 391C             data  >391c                 ; VR1/57, value 00011100
0016 2740 06A0  32         bl    @putvr                ; Write twice
     2742 2340     
0017 2744 391C             data  >391c                 ; VR1/57, value 00011100
0018 2746 06A0  32         bl    @putvr
     2748 2340     
0019 274A 01E0             data  >01e0                 ; VR1, value 11100000, a sane setting
0020 274C 0458  20         b     *tmp4                 ; Exit
0021               
0022               
0023               ***************************************************************
0024               * f18lck - Lock F18A VDP
0025               ***************************************************************
0026               *  bl   @f18lck
0027               ********|*****|*********************|**************************
0028 274E C20B  18 f18lck  mov   r11,tmp4              ; Save R11
0029 2750 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     2752 2340     
0030 2754 3900             data  >3900
0031 2756 0458  20         b     *tmp4                 ; Exit
0032               
0033               
0034               ***************************************************************
0035               * f18idl - Put GPU in F18A VDP in idle mode (stop GPU program)
0036               ***************************************************************
0037               *  bl   @f18idl
0038               *--------------------------------------------------------------
0039               *  REMARKS
0040               *  Expects that the f18a is unlocked when calling this function.
0041               ********|*****|*********************|**************************
0042 2758 C20B  18 f18idl  mov   r11,tmp4              ; Save R11
0043 275A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     275C 2340     
0044 275E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0045 2760 0458  20         b     *tmp4                 ; Exit
0046               
0047               
0048               
0049               ***************************************************************
0050               * f18chk - Check if F18A VDP present
0051               ***************************************************************
0052               *  bl   @f18chk
0053               *--------------------------------------------------------------
0054               *  REMARKS
0055               *  Expects that the f18a is unlocked when calling this function.
0056               *  Runs GPU code at VDP >3f00
0057               ********|*****|*********************|**************************
0058 2762 C20B  18 f18chk  mov   r11,tmp4              ; Save R11
0059 2764 06A0  32         bl    @cpym2v
     2766 2494     
0060 2768 3F00             data  >3f00,f18chk_gpu,8    ; Copy F18A GPU code to VRAM
     276A 27AC     
     276C 0008     
0061 276E 06A0  32         bl    @putvr
     2770 2340     
0062 2772 363F             data  >363f                 ; Load MSB of GPU PC (>3f) into VR54 (>36)
0063 2774 06A0  32         bl    @putvr
     2776 2340     
0064 2778 3700             data  >3700                 ; Load LSB of GPU PC (>00) into VR55 (>37)
0065                                                   ; GPU code should run now
0066               
0067 277A 06A0  32         bl    @putvr                ; VR56 >38, value 00000000
     277C 2340     
0068 277E 3800             data  >3800                 ; Reset and load PC (GPU idle!)
0069               ***************************************************************
0070               * VDP @>3f00 == 0 ? F18A present : F18a not present
0071               ***************************************************************
0072 2780 0204  20         li    tmp0,>3f00
     2782 3F00     
0073 2784 06A0  32         bl    @vdra                 ; Set VDP read address to >3f00
     2786 22C8     
0074 2788 D120  30         movb  @vdpr,tmp0            ; Read MSB byte
     278A 8800     
0075 278C 0984  32         srl   tmp0,8
0076 278E D120  30         movb  @vdpr,tmp0            ; Read LSB byte
     2790 8800     
0077 2792 C104  18         mov   tmp0,tmp0             ; For comparing with 0
0078 2794 1303  14         jeq   f18chk_yes
0079               f18chk_no:
0080 2796 0242  22         andi  config,>bfff          ; CONFIG Register bit 1=0
     2798 BFFF     
0081 279A 1002  14         jmp   f18chk_exit
0082               f18chk_yes:
0083 279C 0262  22         ori   config,>4000          ; CONFIG Register bit 1=1
     279E 4000     
0084               
0085               f18chk_exit:
0086 27A0 06A0  32         bl    @filv                 ; Clear VDP mem >3f00->3f05
     27A2 229C     
0087 27A4 3F00             data  >3f00,>00,6
     27A6 0000     
     27A8 0006     
0088 27AA 0458  20         b     *tmp4                 ; Exit
0089               ***************************************************************
0090               * GPU code
0091               ********|*****|*********************|**************************
0092               f18chk_gpu
0093 27AC 04E0             data  >04e0                 ; 3f00 \ 04e0  clr @>3f00
0094 27AE 3F00             data  >3f00                 ; 3f02 / 3f00
0095 27B0 0340             data  >0340                 ; 3f04   0340  idle
0096 27B2 10FF             data  >10ff                 ; 3f06   10ff  \ jmp $
0097                                                   ;              | Make classic99 debugger
0098                                                   ;              | happy if break on illegal
0099                                                   ;              / opcode is on.
0100               
0101               ***************************************************************
0102               * f18rst - Reset f18a into standard settings
0103               ***************************************************************
0104               *  bl   @f18rst
0105               *--------------------------------------------------------------
0106               *  REMARKS
0107               *  This is used to leave the F18A mode and revert all settings
0108               *  that could lead to corruption when doing BLWP @0
0109               *
0110               *  Is expected to run while the f18a is unlocked.
0111               *
0112               *  There are some F18a settings that stay on when doing blwp @0
0113               *  and the TI title screen cannot recover from that.
0114               *
0115               *  It is your responsibility to set video mode tables should
0116               *  you want to continue instead of doing blwp @0 after your
0117               *  program cleanup
0118               ********|*****|*********************|**************************
0119 27B4 C20B  18 f18rst  mov   r11,tmp4              ; Save R11
0120                       ;------------------------------------------------------
0121                       ; Reset all F18a VDP registers to power-on defaults
0122                       ;------------------------------------------------------
0123 27B6 06A0  32         bl    @putvr
     27B8 2340     
0124 27BA 3280             data  >3280                 ; F18a VR50 (>32), MSB 8=1
0125               
0126 27BC 06A0  32         bl    @putvr                ; VR1/57, value 00000000
     27BE 2340     
0127 27C0 3900             data  >3900                 ; Lock the F18a
0128 27C2 0458  20         b     *tmp4                 ; Exit
0129               
0130               
0131               
0132               ***************************************************************
0133               * f18fwv - Get F18A Firmware Version
0134               ***************************************************************
0135               *  bl   @f18fwv
0136               *--------------------------------------------------------------
0137               *  REMARKS
0138               *  Successfully tested with F18A v1.8, note that this does not
0139               *  work with F18 v1.3 but you shouldn't be using such old F18A
0140               *  firmware to begin with.
0141               *--------------------------------------------------------------
0142               *  TMP0 High nibble = major version
0143               *  TMP0 Low nibble  = minor version
0144               *
0145               *  Example: >0018     F18a Firmware v1.8
0146               ********|*****|*********************|**************************
0147 27C4 C20B  18 f18fwv  mov   r11,tmp4              ; Save R11
0148 27C6 20A0  32         coc   @wbit1,config         ; CONFIG bit 1 set ?
     27C8 201E     
0149 27CA 1609  14         jne   f18fw1
0150               ***************************************************************
0151               * Read F18A major/minor version
0152               ***************************************************************
0153 27CC C120  30         mov   @vdps,tmp0            ; Clear VDP status register
     27CE 8802     
0154 27D0 06A0  32         bl    @putvr                ; Write to VR#15 for setting F18A status
     27D2 2340     
0155 27D4 0F0E             data  >0f0e                 ; register to read (0e=VR#14)
0156 27D6 04C4  14         clr   tmp0
0157 27D8 D120  30         movb  @vdps,tmp0
     27DA 8802     
0158 27DC 0984  32         srl   tmp0,8
0159 27DE 0458  20 f18fw1  b     *tmp4                 ; Exit
                   < runlib.asm
0151               
0153                       copy  "vdp_hchar.asm"            ; VDP hchar functions
     **** ****     > vdp_hchar.asm
0001               * FILE......: vdp_hchar.a99
0002               * Purpose...: VDP hchar module
0003               
0004               ***************************************************************
0005               * Repeat characters horizontally at YX
0006               ***************************************************************
0007               *  BL    @HCHAR
0008               *  DATA  P0,P1
0009               *  ...
0010               *  DATA  EOL                        ; End-of-list
0011               *--------------------------------------------------------------
0012               *  P0HB = Y position
0013               *  P0LB = X position
0014               *  P1HB = Byte to write
0015               *  P1LB = Number of times to repeat
0016               ********|*****|*********************|**************************
0017 27E0 C83B  42 hchar   mov   *r11+,@wyx            ; Set YX position
     27E2 832A     
0018 27E4 D17B  28         movb  *r11+,tmp1
0019 27E6 0985  32 hcharx  srl   tmp1,8                ; Byte to write
0020 27E8 D1BB  28         movb  *r11+,tmp2
0021 27EA 0986  32         srl   tmp2,8                ; Repeat count
0022 27EC C1CB  18         mov   r11,tmp3
0023 27EE 06A0  32         bl    @yx2pnt               ; Get VDP address into TMP0
     27F0 2408     
0024               *--------------------------------------------------------------
0025               *    Draw line
0026               *--------------------------------------------------------------
0027 27F2 020B  20         li    r11,hchar1
     27F4 27FA     
0028 27F6 0460  28         b     @xfilv                ; Draw
     27F8 22A2     
0029               *--------------------------------------------------------------
0030               *    Do housekeeping
0031               *--------------------------------------------------------------
0032 27FA 8817  42 hchar1  c     *tmp3,@w$ffff         ; End-Of-List marker found ?
     27FC 2022     
0033 27FE 1302  14         jeq   hchar2                ; Yes, exit
0034 2800 C2C7  18         mov   tmp3,r11
0035 2802 10EE  14         jmp   hchar                 ; Next one
0036 2804 05C7  14 hchar2  inct  tmp3
0037 2806 0457  20         b     *tmp3                 ; Exit
                   < runlib.asm
0155               
0159               
0163               
0167               
0169                       copy  "snd_player.asm"           ; Sound player
     **** ****     > snd_player.asm
0001               * FILE......: snd_player.asm
0002               * Purpose...: Sound player support code
0003               
0004               
0005               ***************************************************************
0006               * MUTE - Mute all sound generators
0007               ***************************************************************
0008               *  BL  @MUTE
0009               *  Mute sound generators and clear sound pointer
0010               *
0011               *  BL  @MUTE2
0012               *  Mute sound generators without clearing sound pointer
0013               ********|*****|*********************|**************************
0014 2808 04E0  26 mute    clr   @wsdlst               ; Clear sound pointer
     280A 8334     
0015 280C 40A0  34 mute2   szc   @wbit13,config        ; Turn off/pause sound player
     280E 2006     
0016 2810 0204  20         li    tmp0,muttab
     2812 2822     
0017 2814 0205  20         li    tmp1,sound            ; Sound generator port >8400
     2816 8400     
0018 2818 D574  40         movb  *tmp0+,*tmp1          ; Generator 0
0019 281A D574  40         movb  *tmp0+,*tmp1          ; Generator 1
0020 281C D574  40         movb  *tmp0+,*tmp1          ; Generator 2
0021 281E D554  38         movb  *tmp0,*tmp1           ; Generator 3
0022 2820 045B  20         b     *r11
0023 2822 9FBF     muttab  byte  >9f,>bf,>df,>ff       ; Table for muting all generators
     2824 DFFF     
0024               
0025               
0026               ***************************************************************
0027               * SDPREP - Prepare for playing sound
0028               ***************************************************************
0029               *  BL   @SDPREP
0030               *  DATA P0,P1
0031               *
0032               *  P0 = Address where tune is stored
0033               *  P1 = Option flags for sound player
0034               *--------------------------------------------------------------
0035               *  REMARKS
0036               *  Use the below equates for P1:
0037               *
0038               *  SDOPT1 => Tune is in CPU memory + loop
0039               *  SDOPT2 => Tune is in CPU memory
0040               *  SDOPT3 => Tune is in VRAM + loop
0041               *  SDOPT4 => Tune is in VRAM
0042               ********|*****|*********************|**************************
0043 2826 C81B  38 sdprep  mov   *r11,@wsdlst          ; Set tune address
     2828 8334     
0044 282A C83B  42         mov   *r11+,@wsdtmp         ; Set tune address in temp
     282C 8336     
0045 282E 0242  22         andi  config,>fff8          ; Clear bits 13-14-15
     2830 FFF8     
0046 2832 E0BB  30         soc   *r11+,config          ; Set options
0047 2834 D820  46         movb  @hb$01,@r13lb         ; Set initial duration
     2836 2012     
     2838 831B     
0048 283A 045B  20         b     *r11
0049               
0050               ***************************************************************
0051               * SDPLAY - Sound player for tune in VRAM or CPU memory
0052               ***************************************************************
0053               *  BL  @SDPLAY
0054               *--------------------------------------------------------------
0055               *  REMARKS
0056               *  Set config register bit13=0 to pause player.
0057               *  Set config register bit14=1 to repeat (or play next tune).
0058               ********|*****|*********************|**************************
0059 283C 20A0  32 sdplay  coc   @wbit13,config        ; Play tune ?
     283E 2006     
0060 2840 1301  14         jeq   sdpla1                ; Yes, play
0061 2842 045B  20         b     *r11
0062               *--------------------------------------------------------------
0063               * Initialisation
0064               *--------------------------------------------------------------
0065 2844 060D  14 sdpla1  dec   r13                   ; duration = duration - 1
0066 2846 9820  46         cb    @r13lb,@hb$00         ; R13LB == 0 ?
     2848 831B     
     284A 2000     
0067 284C 1301  14         jeq   sdpla3                ; Play next note
0068 284E 045B  20 sdpla2  b     *r11                  ; Note still busy, exit
0069 2850 20A0  32 sdpla3  coc   @wbit15,config        ; Play tune from CPU memory ?
     2852 2002     
0070 2854 131A  14         jeq   mmplay
0071               *--------------------------------------------------------------
0072               * Play tune from VDP memory
0073               *--------------------------------------------------------------
0074 2856 C120  30 vdplay  mov   @wsdtmp,tmp0          ; Get tune address
     2858 8336     
0075 285A 06C4  14         swpb  tmp0
0076 285C D804  30         movb  tmp0,@vdpa
     285E 8C02     
0077 2860 06C4  14         swpb  tmp0
0078 2862 D804  30         movb  tmp0,@vdpa
     2864 8C02     
0079 2866 04C4  14         clr   tmp0
0080 2868 D120  30         movb  @vdpr,tmp0            ; length = 0 (end of tune) ?
     286A 8800     
0081 286C 131E  14         jeq   sdexit                ; Yes. exit
0082 286E 0984  32 vdpla1  srl   tmp0,8                ; Right justify length byte
0083 2870 A804  30         a     tmp0,@wsdtmp          ; Adjust for next table entry
     2872 8336     
0084 2874 D820  42 vdpla2  movb  @vdpr,@>8400          ; Feed byte to sound generator
     2876 8800     
     2878 8400     
0085 287A 0604  14         dec   tmp0
0086 287C 16FB  14         jne   vdpla2
0087 287E D820  42         movb  @vdpr,@r13lb          ; Set duration counter
     2880 8800     
     2882 831B     
0088 2884 05E0  26 vdpla3  inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     2886 8336     
0089 2888 045B  20         b     *r11
0090               *--------------------------------------------------------------
0091               * Play tune from CPU memory
0092               *--------------------------------------------------------------
0093 288A C120  30 mmplay  mov   @wsdtmp,tmp0
     288C 8336     
0094 288E D174  28         movb  *tmp0+,tmp1           ; length = 0 (end of tune) ?
0095 2890 130C  14         jeq   sdexit                ; Yes, exit
0096 2892 0985  32 mmpla1  srl   tmp1,8                ; Right justify length byte
0097 2894 A805  30         a     tmp1,@wsdtmp          ; Adjust for next table entry
     2896 8336     
0098 2898 D834  40 mmpla2  movb  *tmp0+,@>8400         ; Feed byte to sound generator
     289A 8400     
0099 289C 0605  14         dec   tmp1
0100 289E 16FC  14         jne   mmpla2
0101 28A0 D814  38         movb  *tmp0,@r13lb          ; Set duration counter
     28A2 831B     
0102 28A4 05E0  26         inct  @wsdtmp               ; Adjust for next table entry, honour byte (1) + (n+1)
     28A6 8336     
0103 28A8 045B  20         b     *r11
0104               *--------------------------------------------------------------
0105               * Exit. Check if tune must be looped
0106               *--------------------------------------------------------------
0107 28AA 20A0  32 sdexit  coc   @wbit14,config        ; Loop flag set ?
     28AC 2004     
0108 28AE 1607  14         jne   sdexi2                ; No, exit
0109 28B0 C820  42         mov   @wsdlst,@wsdtmp
     28B2 8334     
     28B4 8336     
0110 28B6 D820  46         movb  @hb$01,@r13lb          ; Set initial duration
     28B8 2012     
     28BA 831B     
0111 28BC 045B  20 sdexi1  b     *r11                  ; Exit
0112 28BE 0242  22 sdexi2  andi  config,>fff8          ; Reset music player
     28C0 FFF8     
0113 28C2 045B  20         b     *r11                  ; Exit
0114               
                   < runlib.asm
0171               
0175               
0179               
0183               
0186                       copy  "keyb_rkscan.asm"          ; Use ROM#0 OS monitor KSCAN
     **** ****     > keyb_rkscan.asm
0001               * FILE......: keyb_rkscan.asm
0002               * Purpose...: Full (real) keyboard support module
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     KEYBOARD FUNCTIONS
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * RKSCAN - Scan keyboard using ROM#0 OS monitor KSCAN
0010               ***************************************************************
0011               *  BL @RKSCAN
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               *--------------------------------------------------------------
0016               * Scratchpad usage by console KSCAN:
0017               *
0018               * >8373  I/O:    LSB of GPL subroutine stack pointer 80 = (>8380)
0019               * >8374  Input:  keyboard scan mode (default=0)
0020               * >8375  Output: ASCII code detected by keyboard scan
0021               * >8376  Output: Joystick Y-status by keyboard scan
0022               * >8377  Output: Joystick X-status by keyboard scan
0023               * >837c  Output: GPL status byte (>20 if key pressed)
0024               * >838a  I/O:    GPL substack
0025               * >838c  I/O:    GPL substack
0026               * >83c6  I/O:    ISRWS R3 Keyboard state and debounce info
0027               * >83c8  I/O:    ISRWS R4 Keyboard state and debounce info
0028               * >83ca  I/O:    ISRWS R5 Keyboard state and debounce info
0029               * >83d4  I/O:    ISRWS R10 Contents of VDP register 01
0030               * >83d6  I/O:    ISRWS R11 Screen timeout counter, blanks when 0000
0031               * >83d8  I/O:    ISRWS R12 (Backup return address old R11 in GPLWS)
0032               * >83f8  output: GPLWS R12 (CRU base address for key scan)
0033               * >83fa  output: GPLWS R13 (GROM/GRAM read data port 9800)
0034               * >83fe  I/O:    GPLWS R15 (VDP write address port 8c02)
0035               ********|*****|*********************|**************************
0036               rkscan:
0037 28C4 0649  14         dect  stack
0038 28C6 C64B  30         mov   r11,*stack            ; Push return address
0039 28C8 0649  14         dect  stack
0040 28CA C644  30         mov   tmp0,*stack           ; Push tmp0
0041                       ;------------------------------------------------------
0042                       ; (1) Check for alpha lock
0043                       ;------------------------------------------------------
0044 28CC 40A0  34         szc   @wbit10,config        ; Reset CONFIG register bit 10=0
     28CE 200C     
0045                                                   ; (alpha lock off)
0046               
0047                       ; See CRU interface and keyboard sections for details
0048                       ; http://www.nouspikel.com/ti99/titechpages.htm
0049               
0050 28D0 04CC  14         clr   r12                   ; Set base address (to bit 0) so
0051                                                   ; following offsets correspond
0052               
0053 28D2 1E15  16         sbz   21                    ; \ Set bit 21 (PIN 5 attached to alpha
0054                                                   ; / lock column) to 0.
0055               
0056 28D4 0BEC  44         src   r12,14                ; Burn some time (r12=0 no problem shifting)
0057               
0058 28D6 1F07  16         tb    7                     ; \ Copy CRU bit 7 into EQ bit
0059                                                   ; | That is CRU INT7*/P15 pin (keyboard row
0060                                                   ; | with keys FCTN, 2,3,4,5,1,
0061                                                   ; / [joy1-up,joy2-up, Alpha Lock])
0062               
0063 28D8 1302  14         jeq   !                     ; No, alpha lock is off
0064               
0065 28DA E0A0  34         soc   @wbit10,config        ; \ Yes, alpha lock is on.
     28DC 200C     
0066                                                   ; / Set CONFIG register bit 10=1
0067               
0068 28DE 1D15  16 !       sbo   21                    ; \ Reset bit 21 (Pin 5 attached to alpha
0069                                                   ; / lock column) to 1.
0070                       ;------------------------------------------------------
0071                       ; (2) Prepare for OS monitor kscan
0072                       ;------------------------------------------------------
0073 28E0 C820  46         mov   @scrpad.83c6,@>83c6   ; Required for lowercase support
     28E2 2920     
     28E4 83C6     
0074 28E6 C820  46         mov   @scrpad.83fa,@>83fa   ; Load GPLWS R13
     28E8 2922     
     28EA 83FA     
0075 28EC C820  46         mov   @scrpad.83fe,@>83fe   ; Load GPLWS R15
     28EE 2924     
     28F0 83FE     
0076               
0077 28F2 04C4  14         clr   tmp0                  ; \ Keyboard mode in MSB
0078                                                   ; / 00=Scan all of keyboard
0079               
0080 28F4 D804  30         movb  tmp0,@>8374           ; Set keyboard mode at @>8374
     28F6 8374     
0081                                                   ; (scan entire keyboard)
0082               
0083 28F8 02E0  18         lwpi  >83e0                 ; Activate GPL workspace
     28FA 83E0     
0084               
0085 28FC 06A0  28         bl    @kscan                ; Call KSCAN
     28FE 000E     
0086 2900 02E0  18         lwpi  ws1                   ; Activate user workspace
     2902 8300     
0087                       ;------------------------------------------------------
0088                       ; (3) Check if key pressed
0089                       ;------------------------------------------------------
0090 2904 D120  30         movb  @>837c,tmp0           ; Get flag
     2906 837C     
0091 2908 0A34  22         sla   tmp0,3                ; Flag value is >20
0092 290A 1707  14         jnc   rkscan.exit           ; No key pressed, exit early
0093                       ;------------------------------------------------------
0094                       ; (4) Key detected, store in memory
0095                       ;------------------------------------------------------
0096 290C D120  30         movb  @>8375,tmp0           ; \ Key pressed is at @>8375
     290E 8375     
0097 2910 0984  32         srl   tmp0,8                ; / Move to LSB
0099 2912 C804  38         mov   tmp0,@rom0_kscan_out  ; Store ASCII value in user location
     2914 A028     
0103 2916 E0A0  34         soc   @wbit11,config        ; Set ANYKEY flag in CONFIG register
     2918 200A     
0104                       ;------------------------------------------------------
0105                       ; Exit
0106                       ;------------------------------------------------------
0107               rkscan.exit:
0108 291A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0109 291C C2F9  30         mov   *stack+,r11           ; Pop r11
0110 291E 045B  20         b     *r11                  ; Return to caller
0111               
0112               
0113 2920 0200     scrpad.83c6   data >0200            ; Required for KSCAN to support lowercase
0114 2922 9800     scrpad.83fa   data >9800
0115               
0116               ; Dummy value for GPLWS R15 (instead of VDP write address port 8c02)
0117               ; We do not want console KSCAN to fiddle with VDP registers while Stevie
0118               ; is running
0119               
0120 2924 83A0     scrpad.83fe   data >83a0            ; 8c02
                   < runlib.asm
0191               
0193                       copy  "cpu_hexsupport.asm"       ; CPU hex numbers support
     **** ****     > cpu_hexsupport.asm
0001               * FILE......: cpu_hexsupport.asm
0002               * Purpose...: CPU create, display hex numbers module
0003               
0004               ***************************************************************
0005               * mkhex - Convert hex word to string
0006               ***************************************************************
0007               *  bl   @mkhex
0008               *       data P0,P1,P2
0009               *--------------------------------------------------------------
0010               *  P0 = Pointer to 16 bit word
0011               *  P1 = Pointer to string buffer
0012               *  P2 = Offset for ASCII digit
0013               *       MSB determines offset for chars A-F
0014               *       LSB determines offset for chars 0-9
0015               *  (CONFIG#0 = 1) = Display number at cursor YX
0016               *--------------------------------------------------------------
0017               *  Memory usage:
0018               *  tmp0, tmp1, tmp2, tmp3, tmp4
0019               *  waux1, waux2, waux3
0020               *--------------------------------------------------------------
0021               *  Memory variables waux1-waux3 are used as temporary variables
0022               ********|*****|*********************|**************************
0023 2926 C13B  30 mkhex   mov   *r11+,tmp0            ; P0: Address of word
0024 2928 C83B  42         mov   *r11+,@waux3          ; P1: Pointer to string buffer
     292A 8340     
0025 292C 04E0  26         clr   @waux1
     292E 833C     
0026 2930 04E0  26         clr   @waux2
     2932 833E     
0027 2934 0207  20         li    tmp3,waux1            ; We store results in WAUX1 and WAUX2
     2936 833C     
0028 2938 C114  26         mov   *tmp0,tmp0            ; Get word
0029               *--------------------------------------------------------------
0030               *    Convert nibbles to bytes (is in wrong order)
0031               *--------------------------------------------------------------
0032 293A 0205  20         li    tmp1,4                ; 4 nibbles
     293C 0004     
0033 293E C184  18 mkhex1  mov   tmp0,tmp2             ; Make work copy
0034 2940 0246  22         andi  tmp2,>000f            ; Only keep LSN
     2942 000F     
0035                       ;------------------------------------------------------
0036                       ; Determine offset for ASCII char
0037                       ;------------------------------------------------------
0038 2944 0286  22         ci    tmp2,>000a
     2946 000A     
0039 2948 1105  14         jlt   mkhex1.digit09
0040                       ;------------------------------------------------------
0041                       ; Add ASCII offset for digits A-F
0042                       ;------------------------------------------------------
0043               mkhex1.digitaf:
0044 294A C21B  26         mov   *r11,tmp4
0045 294C 0988  32         srl   tmp4,8                ; Right justify
0046 294E 0228  22         ai    tmp4,-10              ; Adjust offset for 'A-F'
     2950 FFF6     
0047 2952 1003  14         jmp   mkhex2
0048               
0049               mkhex1.digit09:
0050                       ;------------------------------------------------------
0051                       ; Add ASCII offset for digits 0-9
0052                       ;------------------------------------------------------
0053 2954 C21B  26         mov   *r11,tmp4
0054 2956 0248  22         andi  tmp4,>00ff            ; Only keep LSB
     2958 00FF     
0055               
0056 295A A188  18 mkhex2  a     tmp4,tmp2             ; Add ASCII-offset
0057 295C 06C6  14         swpb  tmp2
0058 295E DDC6  32         movb  tmp2,*tmp3+           ; Save byte
0059 2960 0944  24         srl   tmp0,4                ; Next nibble
0060 2962 0605  14         dec   tmp1
0061 2964 16EC  14         jne   mkhex1                ; Repeat until all nibbles processed
0062 2966 0242  22         andi  config,>bfff          ; Reset bit 1 in config register
     2968 BFFF     
0063               *--------------------------------------------------------------
0064               *    Build first 2 bytes in correct order
0065               *--------------------------------------------------------------
0066 296A C160  30         mov   @waux3,tmp1           ; Get pointer
     296C 8340     
0067 296E 04D5  26         clr   *tmp1                 ; Set length byte to 0
0068 2970 0585  14         inc   tmp1                  ; Next byte, not word!
0069 2972 C120  30         mov   @waux2,tmp0
     2974 833E     
0070 2976 06C4  14         swpb  tmp0
0071 2978 DD44  32         movb  tmp0,*tmp1+
0072 297A 06C4  14         swpb  tmp0
0073 297C DD44  32         movb  tmp0,*tmp1+
0074               *--------------------------------------------------------------
0075               *    Set length byte
0076               *--------------------------------------------------------------
0077 297E C120  30         mov   @waux3,tmp0           ; Get start of string buffer
     2980 8340     
0078 2982 D520  46         movb  @hb$04,*tmp0          ; Set lengh byte to 4
     2984 2016     
0079 2986 05CB  14         inct  r11                   ; Skip Parameter P2
0080               *--------------------------------------------------------------
0081               *    Build last 2 bytes in correct order
0082               *--------------------------------------------------------------
0083 2988 C120  30         mov   @waux1,tmp0
     298A 833C     
0084 298C 06C4  14         swpb  tmp0
0085 298E DD44  32         movb  tmp0,*tmp1+
0086 2990 06C4  14         swpb  tmp0
0087 2992 DD44  32         movb  tmp0,*tmp1+
0088               *--------------------------------------------------------------
0089               *    Display hex number ?
0090               *--------------------------------------------------------------
0091 2994 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     2996 2020     
0092 2998 1301  14         jeq   mkhex3                ; Yes, so show at current YX position
0093 299A 045B  20         b     *r11                  ; Exit
0094               *--------------------------------------------------------------
0095               *  Display hex number on screen at current YX position
0096               *--------------------------------------------------------------
0097 299C 0242  22 mkhex3  andi  config,>7fff          ; Reset bit 0
     299E 7FFF     
0098 29A0 C160  30         mov   @waux3,tmp1           ; Get Pointer to string
     29A2 8340     
0099 29A4 0460  28         b     @xutst0               ; Display string
     29A6 242E     
0100 29A8 0610     prefix  data  >0610                 ; Length byte + blank
0101               
0102               
0103               
0104               ***************************************************************
0105               * puthex - Put 16 bit word on screen
0106               ***************************************************************
0107               *  bl   @mkhex
0108               *       data P0,P1,P2,P3
0109               *--------------------------------------------------------------
0110               *  P0 = YX position
0111               *  P1 = Pointer to 16 bit word
0112               *  P2 = Pointer to string buffer
0113               *  P3 = Offset for ASCII digit
0114               *       MSB determines offset for chars A-F
0115               *       LSB determines offset for chars 0-9
0116               *--------------------------------------------------------------
0117               *  Memory usage:
0118               *  tmp0, tmp1, tmp2, tmp3
0119               *  waux1, waux2, waux3
0120               ********|*****|*********************|**************************
0121 29AA C83B  42 puthex  mov   *r11+,@wyx            ; Set cursor
     29AC 832A     
0122 29AE 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     29B0 8000     
0123 29B2 10B9  14         jmp   mkhex                 ; Convert number and display
0124               
                   < runlib.asm
0195               
0197                       copy  "cpu_numsupport.asm"       ; CPU unsigned numbers support
     **** ****     > cpu_numsupport.asm
0001               * FILE......: cpu_numsupport.asm
0002               * Purpose...: CPU create, display numbers module
0003               
0004               ***************************************************************
0005               * MKNUM - Convert unsigned number to string
0006               ***************************************************************
0007               *  BL   @MKNUM
0008               *  DATA P0,P1,P2
0009               *
0010               *  P0   = Pointer to 16 bit unsigned number
0011               *  P1   = Pointer to 5 byte string buffer
0012               *  P2HB = Offset for ASCII digit
0013               *  P2LB = Character for replacing leading 0's
0014               *
0015               *  (CONFIG:0 = 1) = Display number at cursor YX
0016               *-------------------------------------------------------------
0017               *  Destroys registers tmp0-tmp4
0018               ********|*****|*********************|**************************
0019 29B4 0207  20 mknum   li    tmp3,5                ; Digit counter
     29B6 0005     
0020 29B8 C17B  30         mov   *r11+,tmp1            ; \ Get 16 bit unsigned number
0021 29BA C155  26         mov   *tmp1,tmp1            ; /
0022 29BC C23B  30         mov   *r11+,tmp4            ; Pointer to string buffer
0023 29BE 0228  22         ai    tmp4,4                ; Get end of buffer
     29C0 0004     
0024 29C2 0206  20         li    tmp2,10               ; Divide by 10 to isolate last digit
     29C4 000A     
0025               *--------------------------------------------------------------
0026               *  Do string conversion
0027               *--------------------------------------------------------------
0028 29C6 04C4  14 mknum1  clr   tmp0                  ; Clear the high word of the dividend
0029 29C8 3D06 128         div   tmp2,tmp0             ; (TMP0:TMP1) / 10 (TMP2)
0030 29CA 06C5  14         swpb  tmp1                  ; Move to high-byte for writing to buffer
0031 29CC B15B  26         ab    *r11,tmp1             ; Add offset for ASCII digit
0032 29CE D605  30         movb  tmp1,*tmp4            ; Write remainder to string buffer
0033 29D0 C144  18         mov   tmp0,tmp1             ; Move integer result into R4 for next digit
0034 29D2 0608  14         dec   tmp4                  ; Adjust string pointer for next digit
0035 29D4 0607  14         dec   tmp3                  ; Decrease counter
0036 29D6 16F7  14         jne   mknum1                ; Do next digit
0037               *--------------------------------------------------------------
0038               *  Replace leading 0's with fill character
0039               *--------------------------------------------------------------
0040 29D8 0207  20         li    tmp3,4                ; Check first 4 digits
     29DA 0004     
0041 29DC 0588  14         inc   tmp4                  ; Too far, back to buffer start
0042 29DE C11B  26         mov   *r11,tmp0
0043 29E0 0A84  32         sla   tmp0,8                ; Only keep fill character in HB
0044 29E2 96D8  34 mknum2  cb    *tmp4,*r11            ; Digit = 0 ?
0045 29E4 1305  14         jeq   mknum4                ; Yes, replace with fill character
0046 29E6 05CB  14 mknum3  inct  r11
0047 29E8 20A0  32         coc   @wbit0,config         ; Check if 'display' bit is set
     29EA 2020     
0048 29EC 1305  14         jeq   mknum5                ; Yes, so show at current YX position
0049 29EE 045B  20         b     *r11                  ; Exit
0050 29F0 DE04  32 mknum4  movb  tmp0,*tmp4+           ; Replace leading 0 with fill character
0051 29F2 0607  14         dec   tmp3                  ; 4th digit processed ?
0052 29F4 13F8  14         jeq   mknum3                ; Yes, exit
0053 29F6 10F5  14         jmp   mknum2                ; No, next one
0054               *--------------------------------------------------------------
0055               *  Display integer on screen at current YX position
0056               *--------------------------------------------------------------
0057 29F8 0242  22 mknum5  andi  config,>7fff          ; Reset bit 0
     29FA 7FFF     
0058 29FC C10B  18         mov   r11,tmp0
0059 29FE 0224  22         ai    tmp0,-4
     2A00 FFFC     
0060 2A02 C154  26         mov   *tmp0,tmp1            ; Get buffer address
0061 2A04 0206  20         li    tmp2,>0500            ; String length = 5
     2A06 0500     
0062 2A08 0460  28         b     @xutstr               ; Display string
     2A0A 2430     
0063               
0064               
0065               
0066               
0067               ***************************************************************
0068               * trimnum - Trim unsigned number string
0069               ***************************************************************
0070               *  bl   @trimnum
0071               *  data p0,p1,p2
0072               *--------------------------------------------------------------
0073               *  p0   = Pointer to 5 byte string buffer (no length byte!)
0074               *  p1   = Pointer to output variable
0075               *  p2   = Padding character to match against
0076               *--------------------------------------------------------------
0077               *  Copy unsigned number string into a length-padded, left
0078               *  justified string for display with putstr, putat, ...
0079               *
0080               *  The new string starts at index 5 in buffer, overwriting
0081               *  anything that is located there !
0082               *
0083               *               01234|56789A
0084               *  Before...:   XXXXX          length
0085               *  After....:   XXXXY|zY       z=1
0086               *               XXXYY|zYY      z=2
0087               *               XXYYY|zYYY     z=3
0088               *               XYYYY|zYYYY    z=4
0089               *               YYYYY|zYYYYY   z=5
0090               *--------------------------------------------------------------
0091               *  Destroys registers tmp0-tmp3
0092               ********|*****|*********************|**************************
0093               trimnum:
0094 2A0C C13B  30         mov   *r11+,tmp0            ; Get pointer to input string
0095 2A0E C17B  30         mov   *r11+,tmp1            ; Get pointer to output string
0096 2A10 C1BB  30         mov   *r11+,tmp2            ; Get padding character
0097 2A12 06C6  14         swpb  tmp2                  ; LO <-> HI
0098 2A14 0207  20         li    tmp3,5                ; Set counter
     2A16 0005     
0099                       ;------------------------------------------------------
0100                       ; Scan for padding character from left to right
0101                       ;------------------------------------------------------:
0102               trimnum_scan:
0103 2A18 9194  26         cb    *tmp0,tmp2            ; Matches padding character ?
0104 2A1A 1604  14         jne   trimnum_setlen        ; No, exit loop
0105 2A1C 0584  14         inc   tmp0                  ; Next character
0106 2A1E 0607  14         dec   tmp3                  ; Last digit reached ?
0107 2A20 1301  14         jeq   trimnum_setlen        ; yes, exit loop
0108 2A22 10FA  14         jmp   trimnum_scan
0109                       ;------------------------------------------------------
0110                       ; Scan completed, set length byte new string
0111                       ;------------------------------------------------------
0112               trimnum_setlen:
0113 2A24 06C7  14         swpb  tmp3                  ; LO <-> HI
0114 2A26 DD47  32         movb  tmp3,*tmp1+           ; Update string-length in work buffer
0115 2A28 06C7  14         swpb  tmp3                  ; LO <-> HI
0116                       ;------------------------------------------------------
0117                       ; Start filling new string
0118                       ;------------------------------------------------------
0119               trimnum_fill:
0120 2A2A DD74  42         movb  *tmp0+,*tmp1+         ; Copy character
0121 2A2C 0607  14         dec   tmp3                  ; Last character ?
0122 2A2E 16FD  14         jne   trimnum_fill          ; Not yet, repeat
0123 2A30 045B  20         b     *r11                  ; Return
0124               
0125               
0126               
0127               
0128               ***************************************************************
0129               * PUTNUM - Put unsigned number on screen
0130               ***************************************************************
0131               *  BL   @PUTNUM
0132               *  DATA P0,P1,P2,P3
0133               *--------------------------------------------------------------
0134               *  P0   = YX position
0135               *  P1   = Pointer to 16 bit unsigned number
0136               *  P2   = Pointer to 5 byte string buffer
0137               *  P3HB = Offset for ASCII digit
0138               *  P3LB = Character for replacing leading 0's
0139               ********|*****|*********************|**************************
0140 2A32 C83B  42 putnum  mov   *r11+,@wyx            ; Set cursor
     2A34 832A     
0141 2A36 0262  22         ori   config,>8000          ; CONFIG register bit 0=1
     2A38 8000     
0142 2A3A 10BC  14         jmp   mknum                 ; Convert number and display
                   < runlib.asm
0199               
0203               
0207               
0211               
0215               
0217                       copy  "cpu_strings.asm"          ; String utilities support
     **** ****     > cpu_strings.asm
0001               * FILE......: cpu_strings.asm
0002               * Purpose...: CPU string manipulation library
0003               
0004               
0005               ***************************************************************
0006               * string.ltrim - Left justify string
0007               ***************************************************************
0008               *  bl   @string.ltrim
0009               *       data p0,p1,p2
0010               *--------------------------------------------------------------
0011               *  P0 = Pointer to length-prefix string
0012               *  P1 = Pointer to RAM work buffer
0013               *  P2 = Fill character
0014               *--------------------------------------------------------------
0015               *  BL   @xstring.ltrim
0016               *
0017               *  TMP0 = Pointer to length-prefix string
0018               *  TMP1 = Pointer to RAM work buffer
0019               *  TMP2 = Fill character
0020               ********|*****|*********************|**************************
0021               string.ltrim:
0022 2A3C 0649  14         dect  stack
0023 2A3E C64B  30         mov   r11,*stack            ; Save return address
0024 2A40 0649  14         dect  stack
0025 2A42 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 2A44 0649  14         dect  stack
0027 2A46 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 2A48 0649  14         dect  stack
0029 2A4A C646  30         mov   tmp2,*stack           ; Push tmp2
0030 2A4C 0649  14         dect  stack
0031 2A4E C647  30         mov   tmp3,*stack           ; Push tmp3
0032                       ;-----------------------------------------------------------------------
0033                       ; Get parameter values
0034                       ;-----------------------------------------------------------------------
0035 2A50 C13B  30         mov   *r11+,tmp0            ; Pointer to length-prefixed string
0036 2A52 C17B  30         mov   *r11+,tmp1            ; RAM work buffer
0037 2A54 C1BB  30         mov   *r11+,tmp2            ; Fill character
0038 2A56 100A  14         jmp   !
0039                       ;-----------------------------------------------------------------------
0040                       ; Register version
0041                       ;-----------------------------------------------------------------------
0042               xstring.ltrim:
0043 2A58 0649  14         dect  stack
0044 2A5A C64B  30         mov   r11,*stack            ; Save return address
0045 2A5C 0649  14         dect  stack
0046 2A5E C644  30         mov   tmp0,*stack           ; Push tmp0
0047 2A60 0649  14         dect  stack
0048 2A62 C645  30         mov   tmp1,*stack           ; Push tmp1
0049 2A64 0649  14         dect  stack
0050 2A66 C646  30         mov   tmp2,*stack           ; Push tmp2
0051 2A68 0649  14         dect  stack
0052 2A6A C647  30         mov   tmp3,*stack           ; Push tmp3
0053                       ;-----------------------------------------------------------------------
0054                       ; Start
0055                       ;-----------------------------------------------------------------------
0056 2A6C C1D4  26 !       mov   *tmp0,tmp3
0057 2A6E 06C7  14         swpb  tmp3                  ; LO <-> HI
0058 2A70 0247  22         andi  tmp3,>00ff            ; Discard HI byte tmp2 (only keep length)
     2A72 00FF     
0059 2A74 0A86  32         sla   tmp2,8                ; LO -> HI fill character
0060                       ;-----------------------------------------------------------------------
0061                       ; Scan string from left to right and compare with fill character
0062                       ;-----------------------------------------------------------------------
0063               string.ltrim.scan:
0064 2A76 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0065 2A78 1604  14         jne   string.ltrim.move     ; No, now move string left
0066 2A7A 0584  14         inc   tmp0                  ; Next byte
0067 2A7C 0607  14         dec   tmp3                  ; Shorten string length
0068 2A7E 1301  14         jeq   string.ltrim.move     ; Exit if all characters processed
0069 2A80 10FA  14         jmp   string.ltrim.scan     ; Scan next characer
0070                       ;-----------------------------------------------------------------------
0071                       ; Copy part of string to RAM work buffer (This is the left-justify)
0072                       ;-----------------------------------------------------------------------
0073               string.ltrim.move:
0074 2A82 9194  26         cb    *tmp0,tmp2            ; Do we have a fill character?
0075 2A84 C1C7  18         mov   tmp3,tmp3             ; String length = 0 ?
0076 2A86 1306  14         jeq   string.ltrim.panic    ; File length assert
0077 2A88 C187  18         mov   tmp3,tmp2
0078 2A8A 06C7  14         swpb  tmp3                  ; HI <-> LO
0079 2A8C DD47  32         movb  tmp3,*tmp1+           ; Set new string length byte in RAM workbuf
0080               
0081 2A8E 06A0  32         bl    @xpym2m               ; tmp0 = Memory source address
     2A90 24EE     
0082                                                   ; tmp1 = Memory target address
0083                                                   ; tmp2 = Number of bytes to copy
0084 2A92 1004  14         jmp   string.ltrim.exit
0085                       ;-----------------------------------------------------------------------
0086                       ; CPU crash
0087                       ;-----------------------------------------------------------------------
0088               string.ltrim.panic:
0089 2A94 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2A96 FFCE     
0090 2A98 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2A9A 2026     
0091                       ;----------------------------------------------------------------------
0092                       ; Exit
0093                       ;----------------------------------------------------------------------
0094               string.ltrim.exit:
0095 2A9C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0096 2A9E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0097 2AA0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0098 2AA2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0099 2AA4 C2F9  30         mov   *stack+,r11           ; Pop r11
0100 2AA6 045B  20         b     *r11                  ; Return to caller
0101               
0102               
0103               
0104               
0105               ***************************************************************
0106               * string.getlenc - Get length of C-style string
0107               ***************************************************************
0108               *  bl   @string.getlenc
0109               *       data p0,p1
0110               *--------------------------------------------------------------
0111               *  P0 = Pointer to C-style string
0112               *  P1 = String termination character
0113               *--------------------------------------------------------------
0114               *  bl   @xstring.getlenc
0115               *
0116               *  TMP0 = Pointer to C-style string
0117               *  TMP1 = Termination character
0118               *--------------------------------------------------------------
0119               *  OUTPUT:
0120               *  @waux1 = Length of string
0121               ********|*****|*********************|**************************
0122               string.getlenc:
0123 2AA8 0649  14         dect  stack
0124 2AAA C64B  30         mov   r11,*stack            ; Save return address
0125 2AAC 05D9  26         inct  *stack                ; Skip "data P0"
0126 2AAE 05D9  26         inct  *stack                ; Skip "data P1"
0127 2AB0 0649  14         dect  stack
0128 2AB2 C644  30         mov   tmp0,*stack           ; Push tmp0
0129 2AB4 0649  14         dect  stack
0130 2AB6 C645  30         mov   tmp1,*stack           ; Push tmp1
0131 2AB8 0649  14         dect  stack
0132 2ABA C646  30         mov   tmp2,*stack           ; Push tmp2
0133                       ;-----------------------------------------------------------------------
0134                       ; Get parameter values
0135                       ;-----------------------------------------------------------------------
0136 2ABC C13B  30         mov   *r11+,tmp0            ; Pointer to C-style string
0137 2ABE C17B  30         mov   *r11+,tmp1            ; String termination character
0138 2AC0 1008  14         jmp   !
0139                       ;-----------------------------------------------------------------------
0140                       ; Register version
0141                       ;-----------------------------------------------------------------------
0142               xstring.getlenc:
0143 2AC2 0649  14         dect  stack
0144 2AC4 C64B  30         mov   r11,*stack            ; Save return address
0145 2AC6 0649  14         dect  stack
0146 2AC8 C644  30         mov   tmp0,*stack           ; Push tmp0
0147 2ACA 0649  14         dect  stack
0148 2ACC C645  30         mov   tmp1,*stack           ; Push tmp1
0149 2ACE 0649  14         dect  stack
0150 2AD0 C646  30         mov   tmp2,*stack           ; Push tmp2
0151                       ;-----------------------------------------------------------------------
0152                       ; Start
0153                       ;-----------------------------------------------------------------------
0154 2AD2 0A85  32 !       sla   tmp1,8                ; LSB to MSB
0155 2AD4 04C6  14         clr   tmp2                  ; Loop counter
0156                       ;-----------------------------------------------------------------------
0157                       ; Scan string for termination character
0158                       ;-----------------------------------------------------------------------
0159               string.getlenc.loop:
0160 2AD6 0586  14         inc   tmp2
0161 2AD8 9174  28         cb    *tmp0+,tmp1           ; Compare character
0162 2ADA 1304  14         jeq   string.getlenc.putlength
0163                       ;-----------------------------------------------------------------------
0164                       ; Assert on string length
0165                       ;-----------------------------------------------------------------------
0166 2ADC 0286  22         ci    tmp2,255
     2ADE 00FF     
0167 2AE0 1505  14         jgt   string.getlenc.panic
0168 2AE2 10F9  14         jmp   string.getlenc.loop
0169                       ;-----------------------------------------------------------------------
0170                       ; Return length
0171                       ;-----------------------------------------------------------------------
0172               string.getlenc.putlength:
0173 2AE4 0606  14         dec   tmp2                  ; One time adjustment
0174 2AE6 C806  30         mov   tmp2,@waux1           ; Store length
     2AE8 833C     
0175 2AEA 1004  14         jmp   string.getlenc.exit   ; Exit
0176                       ;-----------------------------------------------------------------------
0177                       ; CPU crash
0178                       ;-----------------------------------------------------------------------
0179               string.getlenc.panic:
0180 2AEC C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2AEE FFCE     
0181 2AF0 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2AF2 2026     
0182                       ;----------------------------------------------------------------------
0183                       ; Exit
0184                       ;----------------------------------------------------------------------
0185               string.getlenc.exit:
0186 2AF4 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0187 2AF6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0188 2AF8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0189 2AFA C2F9  30         mov   *stack+,r11           ; Pop r11
0190 2AFC 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0219               
0223               
0225                       copy  "cpu_scrpad_backrest.asm"  ; Scratchpad backup/restore
     **** ****     > cpu_scrpad_backrest.asm
0001               * FILE......: cpu_scrpad_backrest.asm
0002               * Purpose...: Scratchpad memory backup/restore functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                Scratchpad memory backup/restore
0006               *//////////////////////////////////////////////////////////////
0007               
0008               ***************************************************************
0009               * cpu.scrpad.backup - Backup 256 bytes of scratchpad >8300 to
0010               *                     predefined memory target @cpu.scrpad.tgt
0011               ***************************************************************
0012               *  bl   @cpu.scrpad.backup
0013               *--------------------------------------------------------------
0014               *  Register usage
0015               *  r0-r2, but values restored before exit
0016               *--------------------------------------------------------------
0017               *  Backup 256 bytes of scratchpad memory >8300 to destination
0018               *  @cpu.scrpad.tgt (+ >ff)
0019               *
0020               *  Expects current workspace to be in scratchpad memory.
0021               ********|*****|*********************|**************************
0022               cpu.scrpad.backup:
0023 2AFE C800  38         mov   r0,@cpu.scrpad.tgt    ; Save @>8300 (r0)
     2B00 F000     
0024 2B02 C801  38         mov   r1,@cpu.scrpad.tgt+2  ; Save @>8302 (r1)
     2B04 F002     
0025 2B06 C802  38         mov   r2,@cpu.scrpad.tgt+4  ; Save @>8304 (r2)
     2B08 F004     
0026                       ;------------------------------------------------------
0027                       ; Prepare for copy loop
0028                       ;------------------------------------------------------
0029 2B0A 0200  20         li    r0,>8306              ; Scratchpad source address
     2B0C 8306     
0030 2B0E 0201  20         li    r1,cpu.scrpad.tgt+6   ; RAM target address
     2B10 F006     
0031 2B12 0202  20         li    r2,62                 ; Loop counter
     2B14 003E     
0032                       ;------------------------------------------------------
0033                       ; Copy memory range >8306 - >83ff
0034                       ;------------------------------------------------------
0035               cpu.scrpad.backup.copy:
0036 2B16 CC70  46         mov   *r0+,*r1+
0037 2B18 CC70  46         mov   *r0+,*r1+
0038 2B1A 0642  14         dect  r2
0039 2B1C 16FC  14         jne   cpu.scrpad.backup.copy
0040 2B1E C820  50         mov   @>83fe,@cpu.scrpad.tgt + >fe
     2B20 83FE     
     2B22 F0FE     
0041                                                   ; Copy last word
0042                       ;------------------------------------------------------
0043                       ; Restore register r0 - r2
0044                       ;------------------------------------------------------
0045 2B24 C020  34         mov   @cpu.scrpad.tgt,r0    ; Restore r0
     2B26 F000     
0046 2B28 C060  34         mov   @cpu.scrpad.tgt+2,r1  ; Restore r1
     2B2A F002     
0047 2B2C C0A0  34         mov   @cpu.scrpad.tgt+4,r2  ; Restore r2
     2B2E F004     
0048                       ;------------------------------------------------------
0049                       ; Exit
0050                       ;------------------------------------------------------
0051               cpu.scrpad.backup.exit:
0052 2B30 045B  20         b     *r11                  ; Return to caller
0053               
0054               
0055               ***************************************************************
0056               * cpu.scrpad.restore - Restore 256 bytes of scratchpad from
0057               *                      predefined target @cpu.scrpad.tgt
0058               *                      to destination >8300
0059               ***************************************************************
0060               *  bl   @cpu.scrpad.restore
0061               *--------------------------------------------------------------
0062               *  Register usage
0063               *  r0-r1
0064               *--------------------------------------------------------------
0065               *  Restore scratchpad from memory area @cpu.scrpad.tgt (+ >ff).
0066               *  Current workspace may not be in scratchpad >8300 when called.
0067               *
0068               *  Destroys r0,r1
0069               ********|*****|*********************|**************************
0070               cpu.scrpad.restore:
0071                       ;------------------------------------------------------
0072                       ; Prepare for copy loop, WS
0073                       ;------------------------------------------------------
0074 2B32 0200  20         li    r0,cpu.scrpad.tgt
     2B34 F000     
0075 2B36 0201  20         li    r1,>8300
     2B38 8300     
0076                       ;------------------------------------------------------
0077                       ; Copy 256 bytes from @cpu.scrpad.tgt to >8300
0078                       ;------------------------------------------------------
0079               cpu.scrpad.restore.copy:
0080 2B3A CC70  46         mov   *r0+,*r1+
0081 2B3C CC70  46         mov   *r0+,*r1+
0082 2B3E 0281  22         ci    r1,>8400
     2B40 8400     
0083 2B42 11FB  14         jlt   cpu.scrpad.restore.copy
0084                       ;------------------------------------------------------
0085                       ; Exit
0086                       ;------------------------------------------------------
0087               cpu.scrpad.restore.exit:
0088 2B44 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0226                       copy  "cpu_scrpad_paging.asm"    ; Scratchpad memory paging
     **** ****     > cpu_scrpad_paging.asm
0001               * FILE......: cpu_scrpad_paging.asm
0002               * Purpose...: CPU memory paging functions
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                     CPU memory paging
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * cpu.scrpad.pgout - Page out 256 bytes of scratchpad at >8300
0011               *                    to CPU memory destination P0 (tmp1)
0012               *                    and replace with 256 bytes of memory from
0013               *                    predefined destination @cpu.scrpad.target
0014               ***************************************************************
0015               *  bl   @cpu.scrpad.pgout
0016               *       DATA p0
0017               *
0018               *  P0 = CPU memory destination
0019               *--------------------------------------------------------------
0020               *  bl   @xcpu.scrpad.pgout
0021               *  tmp1 = CPU memory destination
0022               *--------------------------------------------------------------
0023               *  Register usage
0024               *  tmp3      = Copy of CPU memory destination
0025               *  tmp0-tmp2 = Used as temporary registers
0026               *  @waux1    = Copy of r5 (tmp1)
0027               *--------------------------------------------------------------
0028               *  Remarks
0029               *  Copies 256 bytes from scratchpad to CPU memory destination
0030               *  specified in P0 (tmp1).
0031               *
0032               *  Then switches to the newly copied workspace in P0 (tmp1).
0033               *
0034               *  Finally it copies 256 bytes from @cpu.scrpad.tgt
0035               *  to scratchpad >8300 and activates workspace at >8300
0036               ********|*****|*********************|**************************
0037               cpu.scrpad.pgout:
0038 2B46 C15B  26         mov   *r11,tmp1             ; tmp1 = Memory target address
0039                       ;------------------------------------------------------
0040                       ; Copy registers r0-r7
0041                       ;------------------------------------------------------
0042 2B48 CD40  34         mov   r0,*tmp1+             ; Backup r0
0043 2B4A CD41  34         mov   r1,*tmp1+             ; Backup r1
0044 2B4C CD42  34         mov   r2,*tmp1+             ; Backup r2
0045 2B4E CD43  34         mov   r3,*tmp1+             ; Backup r3
0046 2B50 CD44  34         mov   r4,*tmp1+             ; Backup r4
0047 2B52 CD45  34         mov   r5,*tmp1+             ; Backup r5 (is tmp1, so is bogus)
0048 2B54 CD46  34         mov   r6,*tmp1+             ; Backup r6
0049 2B56 CD47  34         mov   r7,*tmp1+             ; Backup r7
0050                       ;------------------------------------------------------
0051                       ; Copy scratchpad memory to destination
0052                       ;------------------------------------------------------
0053               xcpu.scrpad.pgout:
0054 2B58 0204  20         li    tmp0,>8310            ; tmp0 = Memory source address
     2B5A 8310     
0055                                                   ;        as of register r8
0056 2B5C 0206  20         li    tmp2,15               ; tmp2 = 15 iterations
     2B5E 000F     
0057                       ;------------------------------------------------------
0058                       ; Copy memory
0059                       ;------------------------------------------------------
0060 2B60 CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0061 2B62 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0062 2B64 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0063 2B66 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0064 2B68 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0065 2B6A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0066 2B6C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0067 2B6E CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0068 2B70 0606  14         dec   tmp2
0069 2B72 16F6  14         jne   -!                    ; Loop until done
0070                       ;------------------------------------------------------
0071                       ; Switch to newly copied workspace
0072                       ;------------------------------------------------------
0073 2B74 C37B  30         mov   *r11+,r13             ; R13=WP   (pop tmp1 from stack)
0074 2B76 020E  20         li    r14,cpu.scrpad.pgout.after.rtwp
     2B78 2B7E     
0075                                                   ; R14=PC
0076 2B7A 04CF  14         clr   r15                   ; R15=STATUS
0077                       ;------------------------------------------------------
0078                       ; If we get here, WS was copied to specified
0079                       ; destination.  Also contents of r13,r14,r15
0080                       ; are about to be overwritten by rtwp instruction.
0081                       ;------------------------------------------------------
0082 2B7C 0380  18         rtwp                        ; Activate copied workspace
0083                                                   ; in non-scratchpad memory!
0084               
0085               cpu.scrpad.pgout.after.rtwp:
0086 2B7E 0460  28         b     @cpu.scrpad.restore   ; Restore scratchpad memory
     2B80 2B32     
0087                                                   ; from @cpu.scrpad.tgt to @>8300
0088                                                   ; and switch workspace to >8300.
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092               cpu.scrpad.pgout.exit:
0093 2B82 045B  20         b     *r11                  ; Return to caller
0094               
0095               
0096               ***************************************************************
0097               * cpu.scrpad.pgin - Page in 256 bytes of scratchpad memory
0098               *                   at >8300 from CPU memory specified in
0099               *                   p0 (tmp0)
0100               ***************************************************************
0101               *  bl   @cpu.scrpad.pgin
0102               *       DATA p0
0103               *
0104               *  P0 = CPU memory source
0105               *--------------------------------------------------------------
0106               *  bl   @memx.scrpad.pgin
0107               *  TMP0 = CPU memory source
0108               *--------------------------------------------------------------
0109               *  Register usage
0110               *  tmp0-tmp2 = Used as temporary registers
0111               *--------------------------------------------------------------
0112               *  Remarks
0113               *  Copies 256 bytes from CPU memory source to scratchpad >8300
0114               *  and activates workspace in scratchpad >8300
0115               *
0116               *  It's expected that the workspace is outside scratchpad >8300
0117               *  when calling this function.
0118               ********|*****|*********************|**************************
0119               cpu.scrpad.pgin:
0120 2B84 C13B  30         mov   *r11+,tmp0            ; tmp0 = Memory source address
0121                       ;------------------------------------------------------
0122                       ; Copy scratchpad memory to destination
0123                       ;------------------------------------------------------
0124               xcpu.scrpad.pgin:
0125 2B86 0205  20         li    tmp1,>8300            ; tmp1 = Memory destination address
     2B88 8300     
0126 2B8A 0206  20         li    tmp2,16               ; tmp2 = 256/16
     2B8C 0010     
0127                       ;------------------------------------------------------
0128                       ; Copy memory
0129                       ;------------------------------------------------------
0130 2B8E CD74  46 !       mov   *tmp0+,*tmp1+         ; Copy word 1
0131 2B90 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 2
0132 2B92 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 3
0133 2B94 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 4
0134 2B96 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 5
0135 2B98 CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 6
0136 2B9A CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 7
0137 2B9C CD74  46         mov   *tmp0+,*tmp1+         ; Copy word 8
0138 2B9E 0606  14         dec   tmp2
0139 2BA0 16F6  14         jne   -!                    ; Loop until done
0140                       ;------------------------------------------------------
0141                       ; Switch workspace to scratchpad memory
0142                       ;------------------------------------------------------
0143 2BA2 02E0  18         lwpi  >8300                 ; Activate copied workspace
     2BA4 8300     
0144                       ;------------------------------------------------------
0145                       ; Exit
0146                       ;------------------------------------------------------
0147               cpu.scrpad.pgin.exit:
0148 2BA6 045B  20         b     *r11                  ; Return to caller
                   < runlib.asm
0228               
0230                       copy  "fio.equ"                  ; File I/O equates
     **** ****     > fio.equ
0001               * FILE......: fio.equ
0002               * Purpose...: Equates for file I/O operations
0003               
0004               ***************************************************************
0005               * File IO operations - Byte 0 in PAB
0006               ************************************@**************************
0007      0000     io.op.open       equ >00            ; OPEN
0008      0001     io.op.close      equ >01            ; CLOSE
0009      0002     io.op.read       equ >02            ; READ
0010      0003     io.op.write      equ >03            ; WRITE
0011      0004     io.op.rewind     equ >04            ; RESTORE/REWIND
0012      0005     io.op.load       equ >05            ; LOAD
0013      0006     io.op.save       equ >06            ; SAVE
0014      0007     io.op.delfile    equ >07            ; DELETE FILE
0015      0008     io.op.scratch    equ >08            ; SCRATCH
0016      0009     io.op.status     equ >09            ; STATUS
0017               ***************************************************************
0018               * File & data type - Byte 1 in PAB (Bit 0-4)
0019               ***************************************************************
0020               * Bit position: 4  3  21  0
0021               *               |  |  ||   \
0022               *               |  |  ||    File type
0023               *               |  |  ||    0 = INTERNAL
0024               *               |  |  ||    1 = FIXED
0025               *               |  |  \\
0026               *               |  |   File operation
0027               *               |  |   00 - UPDATE
0028               *               |  |   01 - OUTPUT
0029               *               |  |   10 - INPUT
0030               *               |  |   11 - APPEND
0031               *               |  |
0032               *               |  \
0033               *               |   Data type
0034               *               |   0 = DISPLAY
0035               *               |   1 = INTERNAL
0036               *               |
0037               *               \
0038               *                Record type
0039               *                0 = FIXED
0040               *                1 = VARIABLE
0041               ***************************************************************
0042               ; Bit position           43210
0043               ************************************|**************************
0044      0000     io.seq.upd.dis.fix  equ :00000      ; 00
0045      0001     io.rel.upd.dis.fix  equ :00001      ; 01
0046      0003     io.rel.out.dis.fix  equ :00011      ; 02
0047      0002     io.seq.out.dis.fix  equ :00010      ; 03
0048      0004     io.seq.inp.dis.fix  equ :00100      ; 04
0049      0005     io.rel.inp.dis.fix  equ :00101      ; 05
0050      0006     io.seq.app.dis.fix  equ :00110      ; 06
0051      0007     io.rel.app.dis.fix  equ :00111      ; 07
0052      0008     io.seq.upd.int.fix  equ :01000      ; 08
0053      0009     io.rel.upd.int.fix  equ :01001      ; 09
0054      000A     io.seq.out.int.fix  equ :01010      ; 0A
0055      000B     io.rel.out.int.fix  equ :01011      ; 0B
0056      000C     io.seq.inp.int.fix  equ :01100      ; 0C
0057      000D     io.rel.inp.int.fix  equ :01101      ; 0D
0058      000E     io.seq.app.int.fix  equ :01110      ; 0E
0059      000F     io.rel.app.int.fix  equ :01111      ; 0F
0060      0010     io.seq.upd.dis.var  equ :10000      ; 10
0061      0011     io.rel.upd.dis.var  equ :10001      ; 11
0062      0012     io.seq.out.dis.var  equ :10010      ; 12
0063      0013     io.rel.out.dis.var  equ :10011      ; 13
0064      0014     io.seq.inp.dis.var  equ :10100      ; 14
0065      0015     io.rel.inp.dis.var  equ :10101      ; 15
0066      0016     io.seq.app.dis.var  equ :10110      ; 16
0067      0017     io.rel.app.dis.var  equ :10111      ; 17
0068      0018     io.seq.upd.int.var  equ :11000      ; 18
0069      0019     io.rel.upd.int.var  equ :11001      ; 19
0070      001A     io.seq.out.int.var  equ :11010      ; 1A
0071      001B     io.rel.out.int.var  equ :11011      ; 1B
0072      001C     io.seq.inp.int.var  equ :11100      ; 1C
0073      001D     io.rel.inp.int.var  equ :11101      ; 1D
0074      001E     io.seq.app.int.var  equ :11110      ; 1E
0075      001F     io.rel.app.int.var  equ :11111      ; 1F
0076               ***************************************************************
0077               * File error codes - Byte 1 in PAB (Bits 5-7)
0078               ************************************|**************************
0079      0000     io.err.no_error_occured             equ 0
0080                       ; Error code 0 with condition bit reset, indicates that
0081                       ; no error has occured
0082               
0083      0000     io.err.bad_device_name              equ 0
0084                       ; Device indicated not in system
0085                       ; Error code 0 with condition bit set, indicates a
0086                       ; device not present in system
0087               
0088      0001     io.err.device_write_prottected      equ 1
0089                       ; Device is write protected
0090               
0091      0002     io.err.bad_open_attribute           equ 2
0092                       ; One or more of the OPEN attributes are illegal or do
0093                       ; not match the file's actual characteristics.
0094                       ; This could be:
0095                       ;   * File type
0096                       ;   * Record length
0097                       ;   * I/O mode
0098                       ;   * File organization
0099               
0100      0003     io.err.illegal_operation            equ 3
0101                       ; Either an issued I/O command was not supported, or a
0102                       ; conflict with the OPEN mode has occured
0103               
0104      0004     io.err.out_of_table_buffer_space    equ 4
0105                       ; The amount of space left on the device is insufficient
0106                       ; for the requested operation
0107               
0108      0005     io.err.eof                          equ 5
0109                       ; Attempt to read past end of file.
0110                       ; This error may also be given for non-existing records
0111                       ; in a relative record file
0112               
0113      0006     io.err.device_error                 equ 6
0114                       ; Covers all hard device errors, such as parity and
0115                       ; bad medium errors
0116               
0117      0007     io.err.file_error                   equ 7
0118                       ; Covers all file-related error like: program/data
0119                       ; file mismatch, non-existing file opened for input mode, etc.
                   < runlib.asm
0231                       copy  "fio_dsrlnk.asm"           ; DSRLNK for peripheral communication
     **** ****     > fio_dsrlnk.asm
0001               * FILE......: fio_dsrlnk.asm
0002               * Purpose...: Custom DSRLNK implementation
0003               
0004               *//////////////////////////////////////////////////////////////
0005               *                          DSRLNK
0006               *//////////////////////////////////////////////////////////////
0007               
0008               
0009               ***************************************************************
0010               * dsrlnk - DSRLNK for file I/O in DSR space >1000 - >1F00
0011               ***************************************************************
0012               *  blwp @dsrlnk
0013               *  data p0
0014               *--------------------------------------------------------------
0015               *  Input:
0016               *  P0     = 8 or 10 (a)
0017               *  @>8356 = Pointer to VDP PAB file descriptor length (PAB+9)
0018               *--------------------------------------------------------------
0019               *  Output:
0020               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0021               *--------------------------------------------------------------
0022               *  Remarks:
0023               *
0024               *  You need to specify following equates in main program
0025               *
0026               *  dsrlnk.dsrlws      equ >????     ; Address of dsrlnk workspace
0027               *  dsrlnk.namsto      equ >????     ; 8-byte RAM buffer for storing device name
0028               *
0029               *  Scratchpad memory usage
0030               *  >8322            Parameter (>08) or (>0A) passed to dsrlnk
0031               *  >8356            Pointer to PAB
0032               *  >83D0            CRU address of current device
0033               *  >83D2            DSR entry address
0034               *  >83e0 - >83ff    GPL / DSRLNK workspace
0035               *
0036               *  Credits
0037               *  Originally appeared in Miller Graphics The Smart Programmer.
0038               *  This version based on version of Paolo Bagnaresi.
0039               *
0040               *  The following memory address can be used to directly jump
0041               *  into the DSR in consequtive calls without having to
0042               *  scan the PEB cards again:
0043               *
0044               *  dsrlnk.namsto  -  8-byte RAM buf for holding device name
0045               *  dsrlnk.savcru  -  CRU address of device in prev. DSR call
0046               *  dsrlnk.savent  -  DSR entry addr of prev. DSR call
0047               *  dsrlnk.savpab  -  Pointer to Device or Subprogram in PAB
0048               *  dsrlnk.savver  -  Version used in prev. DSR call
0049               *  dsrlnk.savlen  -  Length of DSR name of prev. DSR call (in MSB)
0050               *  dsrlnk.flgptr  -  Pointer to VDP PAB byte 1 (flag byte)
0051               
0052               *--------------------------------------------------------------
0053      A40A     dsrlnk.dstype equ   dsrlnk.dsrlws + 10
0054                                                   ; dstype is address of R5 of DSRLNK ws.
0055               ********|*****|*********************|**************************
0056 2BA8 A400     dsrlnk  data  dsrlnk.dsrlws         ; dsrlnk workspace
0057 2BAA 2BAC             data  dsrlnk.init           ; Entry point
0058                       ;------------------------------------------------------
0059                       ; DSRLNK entry point
0060                       ;------------------------------------------------------
0061               dsrlnk.init:
0062 2BAC C17E  30         mov   *r14+,r5              ; Get pgm type for link
0063 2BAE C805  38         mov   r5,@dsrlnk.sav8a      ; Save data following blwp @dsrlnk (8 or >a)
     2BB0 A428     
0064 2BB2 53E0  34         szcb  @hb$20,r15            ; Reset equal bit in status register
     2BB4 201C     
0065 2BB6 C020  30         mov   @>8356,r0             ; Get pointer to PAB+9 in VDP
     2BB8 8356     
0066 2BBA C240  18         mov   r0,r9                 ; Save pointer
0067                       ;------------------------------------------------------
0068                       ; Fetch file descriptor length from PAB
0069                       ;------------------------------------------------------
0070 2BBC 0229  22         ai    r9,>fff8              ; Adjust r9 to addr PAB byte 1
     2BBE FFF8     
0071                                                   ; FLAG byte->(pabaddr+9)-8
0072 2BC0 C809  38         mov   r9,@dsrlnk.flgptr     ; Save pointer to PAB byte 1
     2BC2 A434     
0073                       ;---------------------------; Inline VSBR start
0074 2BC4 06C0  14         swpb  r0                    ;
0075 2BC6 D800  30         movb  r0,@vdpa              ; Send low byte
     2BC8 8C02     
0076 2BCA 06C0  14         swpb  r0                    ;
0077 2BCC D800  30         movb  r0,@vdpa              ; Send high byte
     2BCE 8C02     
0078 2BD0 D0E0  30         movb  @vdpr,r3              ; Read byte from VDP RAM
     2BD2 8800     
0079                       ;---------------------------; Inline VSBR end
0080 2BD4 0983  32         srl   r3,8                  ; Move to low byte
0081               
0082                       ;------------------------------------------------------
0083                       ; Fetch file descriptor device name from PAB
0084                       ;------------------------------------------------------
0085 2BD6 0704  14         seto  r4                    ; Init counter
0086 2BD8 0202  20         li    r2,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2BDA A420     
0087 2BDC 0580  14 !       inc   r0                    ; Point to next char of name
0088 2BDE 0584  14         inc   r4                    ; Increment char counter
0089 2BE0 0284  22         ci    r4,>0007              ; Check if length more than 7 chars
     2BE2 0007     
0090 2BE4 1573  14         jgt   dsrlnk.error.devicename_invalid
0091                                                   ; Yes, error
0092 2BE6 80C4  18         c     r4,r3                 ; End of name?
0093 2BE8 130C  14         jeq   dsrlnk.device_name.get_length
0094                                                   ; Yes
0095               
0096                       ;---------------------------; Inline VSBR start
0097 2BEA 06C0  14         swpb  r0                    ;
0098 2BEC D800  30         movb  r0,@vdpa              ; Send low byte
     2BEE 8C02     
0099 2BF0 06C0  14         swpb  r0                    ;
0100 2BF2 D800  30         movb  r0,@vdpa              ; Send high byte
     2BF4 8C02     
0101 2BF6 D060  30         movb  @vdpr,r1              ; Read byte from VDP RAM
     2BF8 8800     
0102                       ;---------------------------; Inline VSBR end
0103               
0104                       ;------------------------------------------------------
0105                       ; Look for end of device name, for example "DSK1."
0106                       ;------------------------------------------------------
0107 2BFA DC81  32         movb  r1,*r2+               ; Move into buffer
0108 2BFC 9801  34         cb    r1,@dsrlnk.period     ; Is character a '.'
     2BFE 2D18     
0109 2C00 16ED  14         jne   -!                    ; No, loop next char
0110                       ;------------------------------------------------------
0111                       ; Determine device name length
0112                       ;------------------------------------------------------
0113               dsrlnk.device_name.get_length:
0114 2C02 C104  18         mov   r4,r4                 ; Check if length = 0
0115 2C04 1363  14         jeq   dsrlnk.error.devicename_invalid
0116                                                   ; Yes, error
0117 2C06 04E0  26         clr   @>83d0
     2C08 83D0     
0118 2C0A C804  30         mov   r4,@>8354             ; Save name length for search (length
     2C0C 8354     
0119                                                   ; goes to >8355 but overwrites >8354!)
0120 2C0E C804  38         mov   r4,@dsrlnk.savlen     ; Save name length for nextr dsrlnk call
     2C10 A432     
0121               
0122 2C12 0584  14         inc   r4                    ; Adjust for dot
0123 2C14 A804  30         a     r4,@>8356             ; Point to position after name
     2C16 8356     
0124 2C18 C820  50         mov   @>8356,@dsrlnk.savpab ; Save pointer for next dsrlnk call
     2C1A 8356     
     2C1C A42E     
0125                       ;------------------------------------------------------
0126                       ; Prepare for DSR scan >1000 - >1f00
0127                       ;------------------------------------------------------
0128               dsrlnk.dsrscan.start:
0129 2C1E 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2C20 83E0     
0130 2C22 04C1  14         clr   r1                    ; Version found of dsr
0131 2C24 020C  20         li    r12,>0f00             ; Init cru address
     2C26 0F00     
0132                       ;------------------------------------------------------
0133                       ; Turn off ROM on current card
0134                       ;------------------------------------------------------
0135               dsrlnk.dsrscan.cardoff:
0136 2C28 C30C  18         mov   r12,r12               ; Anything to turn off?
0137 2C2A 1301  14         jeq   dsrlnk.dsrscan.cardloop
0138                                                   ; No, loop over cards
0139 2C2C 1E00  16         sbz   0                     ; Yes, turn off
0140                       ;------------------------------------------------------
0141                       ; Loop over cards and look if DSR present
0142                       ;------------------------------------------------------
0143               dsrlnk.dsrscan.cardloop:
0144 2C2E 022C  22         ai    r12,>0100             ; Next ROM to turn on
     2C30 0100     
0145 2C32 04E0  26         clr   @>83d0                ; Clear in case we are done
     2C34 83D0     
0146 2C36 028C  22         ci    r12,>2000             ; Card scan complete? (>1000 to >1F00)
     2C38 2000     
0147 2C3A 1346  14         jeq   dsrlnk.error.nodsr_found
0148                                                   ; Yes, no matching DSR found
0149 2C3C C80C  30         mov   r12,@>83d0            ; Save address of next cru
     2C3E 83D0     
0150                       ;------------------------------------------------------
0151                       ; Look at card ROM (@>4000 eq 'AA' ?)
0152                       ;------------------------------------------------------
0153 2C40 1D00  16         sbo   0                     ; Turn on ROM
0154 2C42 0202  20         li    r2,>4000              ; Start at beginning of ROM
     2C44 4000     
0155 2C46 9812  42         cb    *r2,@dsrlnk.$aa00     ; Check for a valid DSR header
     2C48 2D14     
0156 2C4A 16EE  14         jne   dsrlnk.dsrscan.cardoff
0157                                                   ; No ROM found on card
0158                       ;------------------------------------------------------
0159                       ; Valid DSR ROM found. Now loop over chain/subprograms
0160                       ;------------------------------------------------------
0161                       ; dstype is the address of R5 of the DSRLNK workspace,
0162                       ; which is where 8 for a DSR or 10 (>A) for a subprogram
0163                       ; is stored before the DSR ROM is searched.
0164                       ;------------------------------------------------------
0165 2C4C A0A0  34         a     @dsrlnk.dstype,r2     ; Goto first pointer (byte 8 or 10)
     2C4E A40A     
0166 2C50 1003  14         jmp   dsrlnk.dsrscan.getentry
0167                       ;------------------------------------------------------
0168                       ; Next DSR entry
0169                       ;------------------------------------------------------
0170               dsrlnk.dsrscan.nextentry:
0171 2C52 C0A0  30         mov   @>83d2,r2             ; Offset 0 > Fetch link to next DSR or
     2C54 83D2     
0172                                                   ; subprogram
0173               
0174 2C56 1D00  16         sbo   0                     ; Turn ROM back on
0175                       ;------------------------------------------------------
0176                       ; Get DSR entry
0177                       ;------------------------------------------------------
0178               dsrlnk.dsrscan.getentry:
0179 2C58 C092  26         mov   *r2,r2                ; Is address a zero? (end of chain?)
0180 2C5A 13E6  14         jeq   dsrlnk.dsrscan.cardoff
0181                                                   ; Yes, no more DSRs or programs to check
0182 2C5C C802  30         mov   r2,@>83d2             ; Offset 0 > Store link to next DSR or
     2C5E 83D2     
0183                                                   ; subprogram
0184               
0185 2C60 05C2  14         inct  r2                    ; Offset 2 > Has call address of current
0186                                                   ; DSR/subprogram code
0187               
0188 2C62 C272  30         mov   *r2+,r9               ; Store call address in r9. Move r2 to
0189                                                   ; offset 4 (DSR/subprogram name)
0190                       ;------------------------------------------------------
0191                       ; Check file descriptor in DSR
0192                       ;------------------------------------------------------
0193 2C64 04C5  14         clr   r5                    ; Remove any old stuff
0194 2C66 D160  30         movb  @>8355,r5             ; Get length as counter
     2C68 8355     
0195 2C6A 1309  14         jeq   dsrlnk.dsrscan.call_dsr
0196                                                   ; If zero, do not further check, call DSR
0197                                                   ; program
0198               
0199 2C6C 9C85  28         cb    r5,*r2+               ; See if length matches
0200 2C6E 16F1  14         jne   dsrlnk.dsrscan.nextentry
0201                                                   ; No, length does not match.
0202                                                   ; Go process next DSR entry
0203               
0204 2C70 0985  32         srl   r5,8                  ; Yes, move to low byte
0205 2C72 0206  20         li    r6,dsrlnk.namsto      ; Point to 8-byte CPU buffer
     2C74 A420     
0206 2C76 9CB6  38 !       cb    *r6+,*r2+             ; Compare byte in CPU buffer with byte in
0207                                                   ; DSR ROM
0208 2C78 16EC  14         jne   dsrlnk.dsrscan.nextentry
0209                                                   ; Try next DSR entry if no match
0210 2C7A 0605  14         dec   r5                    ; Update loop counter
0211 2C7C 16FC  14         jne   -!                    ; Loop until full length checked
0212                       ;------------------------------------------------------
0213                       ; Call DSR program in card/device
0214                       ;------------------------------------------------------
0215               dsrlnk.dsrscan.call_dsr:
0216 2C7E 0581  14         inc   r1                    ; Next version found
0217 2C80 C80C  38         mov   r12,@dsrlnk.savcru    ; Save CRU address
     2C82 A42A     
0218 2C84 C809  38         mov   r9,@dsrlnk.savent     ; Save DSR entry address
     2C86 A42C     
0219 2C88 C801  38         mov   r1,@dsrlnk.savver     ; Save DSR Version number
     2C8A A430     
0220               
0221 2C8C 020D  20         li    r13,>9800             ; Set GROM base to >9800 to prevent
     2C8E 9800     
0222                                                   ; lockup of TI Disk Controller DSR.
0223               
0224 2C90 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2C92 8C02     
0225                                                   ; lockup of TI Disk Controller DSR.
0226               
0227 2C94 0699  24         bl    *r9                   ; Execute DSR
0228                       ;
0229                       ; Depending on IO result the DSR in card ROM does RET
0230                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0231                       ;
0232 2C96 10DD  14         jmp   dsrlnk.dsrscan.nextentry
0233                                                   ; (1) error return
0234 2C98 1E00  16         sbz   0                     ; (2) turn off card/device if good return
0235 2C9A 02E0  18         lwpi  dsrlnk.dsrlws         ; (2) restore workspace
     2C9C A400     
0236 2C9E C009  30         mov   r9,r0                 ; Point to flag byte (PAB+1) in VDP PAB
0237                       ;------------------------------------------------------
0238                       ; Returned from DSR
0239                       ;------------------------------------------------------
0240               dsrlnk.dsrscan.return_dsr:
0241 2CA0 C060  42         mov   @dsrlnk.sav8a,r1      ; get back data following blwp @dsrlnk
     2CA2 A428     
0242                                                   ; (8 or >a)
0243 2CA4 0281  26         ci    r1,8                  ; was it 8?
     2CA6 0008     
0244 2CA8 1303  14         jeq   dsrlnk.dsrscan.dsr.8  ; yes, jump: normal dsrlnk
0245 2CAA D060  38         movb  @>8350,r1             ; no, we have a data >a.
     2CAC 8350     
0246                                                   ; Get error byte from @>8350
0247 2CAE 1008  14         jmp   dsrlnk.dsrscan.dsr.a  ; go and return error byte to the caller
0248               
0249                       ;------------------------------------------------------
0250                       ; Read VDP PAB byte 1 after DSR call completed (status)
0251                       ;------------------------------------------------------
0252               dsrlnk.dsrscan.dsr.8:
0253                       ;---------------------------; Inline VSBR start
0254 2CB0 06C0  22         swpb  r0                    ;
0255 2CB2 D800  34         movb  r0,@vdpa              ; send low byte
     2CB4 8C02     
0256 2CB6 06C0  22         swpb  r0                    ;
0257 2CB8 D800  34         movb  r0,@vdpa              ; send high byte
     2CBA 8C02     
0258 2CBC D060  38         movb  @vdpr,r1              ; read byte from VDP ram
     2CBE 8800     
0259                       ;---------------------------; Inline VSBR end
0260               
0261                       ;------------------------------------------------------
0262                       ; Return DSR error to caller
0263                       ;------------------------------------------------------
0264               dsrlnk.dsrscan.dsr.a:
0265 2CC0 09D1  50         srl   r1,13                 ; just keep error bits
0266 2CC2 1605  14         jne   dsrlnk.error.io_error
0267                                                   ; handle IO error
0268 2CC4 0380  30         rtwp                        ; Return from DSR workspace to caller
0269                                                   ; workspace
0270               
0271                       ;------------------------------------------------------
0272                       ; IO-error handler
0273                       ;------------------------------------------------------
0274               dsrlnk.error.nodsr_found_off:
0275 2CC6 1E00  20         sbz   >00                   ; Turn card off, nomatter what
0276               dsrlnk.error.nodsr_found:
0277 2CC8 02E0  18         lwpi  dsrlnk.dsrlws         ; No DSR found, restore workspace
     2CCA A400     
0278               dsrlnk.error.devicename_invalid:
0279 2CCC 04C1  22         clr   r1                    ; clear flag for error 0 = bad device name
0280               dsrlnk.error.io_error:
0281 2CCE 06C1  22         swpb  r1                    ; put error in hi byte
0282 2CD0 D741  38         movb  r1,*r13               ; store error flags in callers r0
0283 2CD2 F3E0  42         socb  @hb$20,r15            ; \ Set equal bit in copy of status register
     2CD4 201C     
0284                                                   ; / to indicate error
0285 2CD6 0380  30         rtwp                        ; Return from DSR workspace to caller
0286                                                   ; workspace
0287               
0288               
0289               ***************************************************************
0290               * dsrln.reuse - Reuse previous DSRLNK call for improved speed
0291               ***************************************************************
0292               *  blwp @dsrlnk.reuse
0293               *--------------------------------------------------------------
0294               *  Input:
0295               *  @>8356         = Pointer to VDP PAB file descriptor length byte (PAB+9)
0296               *  @dsrlnk.savcru = CRU address of device in previous DSR call
0297               *  @dsrlnk.savent = DSR entry address of previous DSR call
0298               *  @dsrlnk.savver = Version used in previous DSR call
0299               *  @dsrlnk.pabptr = Pointer to PAB in VDP memory, set in previous DSR call
0300               *--------------------------------------------------------------
0301               *  Output:
0302               *  r0 LSB = Bits 13-15 from VDP PAB byte 1, right aligned
0303               *--------------------------------------------------------------
0304               *  Remarks:
0305               *   Call the same DSR entry again without having to scan through
0306               *   all devices again.
0307               *
0308               *   Expects dsrlnk.savver, @dsrlnk.savent, @dsrlnk.savcru to be
0309               *   set by previous DSRLNK call.
0310               ********|*****|*********************|**************************
0311               dsrlnk.reuse:
0312 2CD8 A400             data  dsrlnk.dsrlws         ; dsrlnk workspace
0313 2CDA 2CDC             data  dsrlnk.reuse.init     ; entry point
0314                       ;------------------------------------------------------
0315                       ; DSRLNK entry point
0316                       ;------------------------------------------------------
0317               dsrlnk.reuse.init:
0318 2CDC 02E0  18         lwpi  >83e0                 ; Use GPL WS
     2CDE 83E0     
0319               
0320 2CE0 53E0  34         szcb  @hb$20,r15            ; reset equal bit in status register
     2CE2 201C     
0321                       ;------------------------------------------------------
0322                       ; Restore dsrlnk variables of previous DSR call
0323                       ;------------------------------------------------------
0324 2CE4 020B  20         li    r11,dsrlnk.savcru     ; Get pointer to last used CRU
     2CE6 A42A     
0325 2CE8 C33B  30         mov   *r11+,r12             ; Get CRU address         < @dsrlnk.savcru
0326 2CEA C27B  30         mov   *r11+,r9              ; Get DSR entry address   < @dsrlnk.savent
0327 2CEC C83B  42         mov   *r11+,@>8356          ; \ Get pointer to Device name or
     2CEE 8356     
0328                                                   ; / or subprogram in PAB  < @dsrlnk.savpab
0329 2CF0 C07B  30         mov   *r11+,R1              ; Get DSR Version number  < @dsrlnk.savver
0330 2CF2 C81B  38         mov   *r11,@>8354           ; Get device name length  < @dsrlnk.savlen
     2CF4 8354     
0331                       ;------------------------------------------------------
0332                       ; Call DSR program in card/device
0333                       ;------------------------------------------------------
0334 2CF6 020F  20         li    r15,>8C02             ; Set VDP port address, needed to prevent
     2CF8 8C02     
0335                                                   ; lockup of TI Disk Controller DSR.
0336               
0337 2CFA 1D00  16         sbo   >00                   ; Open card/device ROM
0338               
0339 2CFC 9820  50         cb    @>4000,@dsrlnk.$aa00  ; Valid identifier found?
     2CFE 4000     
     2D00 2D14     
0340 2D02 16E2  14         jne   dsrlnk.error.nodsr_found
0341                                                   ; No, error code 0 = Bad Device name
0342                                                   ; The above jump may happen only in case of
0343                                                   ; either card hardware malfunction or if
0344                                                   ; there are 2 cards opened at the same time.
0345               
0346 2D04 0699  24         bl    *r9                   ; Execute DSR
0347                       ;
0348                       ; Depending on IO result the DSR in card ROM does RET
0349                       ; or (INCT R11 + RET), meaning either (1) or (2) get executed.
0350                       ;
0351 2D06 10DF  14         jmp   dsrlnk.error.nodsr_found_off
0352                                                   ; (1) error return
0353 2D08 1E00  16         sbz   >00                   ; (2) turn off card ROM if good return
0354                       ;------------------------------------------------------
0355                       ; Now check if any DSR error occured
0356                       ;------------------------------------------------------
0357 2D0A 02E0  18         lwpi  dsrlnk.dsrlws         ; Restore workspace
     2D0C A400     
0358 2D0E C020  42         mov   @dsrlnk.flgptr,r0     ; Get pointer to VDP PAB byte 1
     2D10 A434     
0359               
0360 2D12 10C6  14         jmp   dsrlnk.dsrscan.return_dsr
0361                                                   ; Rest is the same as with normal DSRLNK
0362               
0363               
0364               ********************************************************************************
0365               
0366 2D14 AA00     dsrlnk.$aa00      data   >aa00      ; Used for identifying DSR header
0367 2D16 0008     dsrlnk.$0008      data   >0008      ; 8 is the data that usually follows
0368                                                   ; a @blwp @dsrlnk
0369 2D18 2E       dsrlnk.period     text  '.'         ; For finding end of device name
0370               
0371                       even
                   < runlib.asm
0232                       copy  "fio_level3.asm"           ; File I/O level 3 support
     **** ****     > fio_level3.asm
0001               * FILE......: fio_level3.asm
0002               * Purpose...: File I/O level 3 support
0003               
0004               
0005               ***************************************************************
0006               * PAB  - Peripheral Access Block
0007               ********|*****|*********************|**************************
0008               ; my_pab:
0009               ;       byte  io.op.open            ;  0    - OPEN
0010               ;       byte  io.seq.inp.dis.var    ;  1    - INPUT, VARIABLE, DISPLAY
0011               ;                                   ;         Bit 13-15 used by DSR for returning
0012               ;                                   ;         file error details to DSRLNK
0013               ;       data  vrecbuf               ;  2-3  - Record buffer in VDP memory
0014               ;       byte  80                    ;  4    - Record length (80 characters maximum)
0015               ;       byte  0                     ;  5    - Character count (bytes read)
0016               ;       data  >0000                 ;  6-7  - Seek record (only for fixed records)
0017               ;       byte  >00                   ;  8    - Screen offset (cassette DSR only)
0018               ; -------------------------------------------------------------
0019               ;       byte  11                    ;  9    - File descriptor length
0020               ;       text 'DSK1.MYFILE'          ; 10-.. - File descriptor name (Device + '.' + File name)
0021               ;       even
0022               ***************************************************************
0023               
0024               
0025               ***************************************************************
0026               * file.open - Open File for procesing
0027               ***************************************************************
0028               *  bl   @file.open
0029               *       data P0,P1
0030               *--------------------------------------------------------------
0031               *  P0 = Address of PAB in VDP RAM
0032               *  P1 = LSB contains File type/mode
0033               *--------------------------------------------------------------
0034               *  bl   @xfile.open
0035               *
0036               *  R0 = Address of PAB in VDP RAM
0037               *  R1 = LSB contains File type/mode
0038               *--------------------------------------------------------------
0039               *  Output:
0040               *  tmp0     = Copy of VDP PAB byte 1 after operation
0041               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0042               *  tmp2 LSB = Copy of status register after operation
0043               ********|*****|*********************|**************************
0044               file.open:
0045 2D1A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0046 2D1C C07B  46         mov   *r11+,r1              ; Get file type/mode
0047               *--------------------------------------------------------------
0048               * Initialisation
0049               *--------------------------------------------------------------
0050               xfile.open:
0051 2D1E 0649  22         dect  stack
0052 2D20 C64B  38         mov   r11,*stack            ; Save return address
0053                       ;------------------------------------------------------
0054                       ; Initialisation
0055                       ;------------------------------------------------------
0056 2D22 0204  24         li    tmp0,dsrlnk.savcru
     2D24 A42A     
0057 2D26 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savcru
0058 2D28 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savent
0059 2D2A 04F4  38         clr   *tmp0+                ; Clear @dsrlnk.savver
0060 2D2C 04D4  30         clr   *tmp0                 ; Clear @dsrlnk.pabflg
0061                       ;------------------------------------------------------
0062                       ; Set pointer to VDP disk buffer header
0063                       ;------------------------------------------------------
0064 2D2E 0205  24         li    tmp1,>37D7            ; \ VDP Disk buffer header
     2D30 37D7     
0065 2D32 C805  34         mov   tmp1,@>8370           ; | Pointer at Fixed scratchpad
     2D34 8370     
0066                                                   ; / location
0067 2D36 C801  42         mov   r1,@fh.filetype       ; Set file type/mode
     2D38 A44C     
0068 2D3A 04C5  22         clr   tmp1                  ; io.op.open
0069 2D3C 101F  14         jmp   _file.record.fop      ; Do file operation
0070               
0071               
0072               
0073               ***************************************************************
0074               * file.close - Close currently open file
0075               ***************************************************************
0076               *  bl   @file.close
0077               *       data P0
0078               *--------------------------------------------------------------
0079               *  P0 = Address of PAB in VDP RAM
0080               *--------------------------------------------------------------
0081               *  bl   @xfile.close
0082               *
0083               *  R0 = Address of PAB in VDP RAM
0084               *--------------------------------------------------------------
0085               *  Output:
0086               *  tmp0 LSB = Copy of VDP PAB byte 1 after operation
0087               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0088               *  tmp2 LSB = Copy of status register after operation
0089               ********|*****|*********************|**************************
0090               file.close:
0091 2D3E C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0092               *--------------------------------------------------------------
0093               * Initialisation
0094               *--------------------------------------------------------------
0095               xfile.close:
0096 2D40 0649  22         dect  stack
0097 2D42 C64B  38         mov   r11,*stack            ; Save return address
0098 2D44 0205  24         li    tmp1,io.op.close      ; io.op.close
     2D46 0001     
0099 2D48 1019  14         jmp   _file.record.fop      ; Do file operation
0100               
0101               
0102               ***************************************************************
0103               * file.record.read - Read record from file
0104               ***************************************************************
0105               *  bl   @file.record.read
0106               *       data P0
0107               *--------------------------------------------------------------
0108               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0109               *--------------------------------------------------------------
0110               *  bl   @xfile.record.read
0111               *
0112               *  R0 = Address of PAB in VDP RAM
0113               *--------------------------------------------------------------
0114               *  Output:
0115               *  tmp0     = Copy of VDP PAB byte 1 after operation
0116               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0117               *  tmp2 LSB = Copy of status register after operation
0118               ********|*****|*********************|**************************
0119               file.record.read:
0120 2D4A C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0121               *--------------------------------------------------------------
0122               * Initialisation
0123               *--------------------------------------------------------------
0124 2D4C 0649  22         dect  stack
0125 2D4E C64B  38         mov   r11,*stack            ; Save return address
0126               
0127 2D50 0205  24         li    tmp1,io.op.read       ; io.op.read
     2D52 0002     
0128 2D54 1013  14         jmp   _file.record.fop      ; Do file operation
0129               
0130               
0131               
0132               ***************************************************************
0133               * file.record.write - Write record to file
0134               ***************************************************************
0135               *  bl   @file.record.write
0136               *       data P0
0137               *--------------------------------------------------------------
0138               *  P0 = Address of PAB in VDP RAM (without +9 offset!)
0139               *--------------------------------------------------------------
0140               *  bl   @xfile.record.write
0141               *
0142               *  R0 = Address of PAB in VDP RAM
0143               *--------------------------------------------------------------
0144               *  Output:
0145               *  tmp0     = Copy of VDP PAB byte 1 after operation
0146               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0147               *  tmp2 LSB = Copy of status register after operation
0148               ********|*****|*********************|**************************
0149               file.record.write:
0150 2D56 C03B  46         mov   *r11+,r0              ; Get file descriptor (P0)
0151               *--------------------------------------------------------------
0152               * Initialisation
0153               *--------------------------------------------------------------
0154 2D58 0649  22         dect  stack
0155 2D5A C64B  38         mov   r11,*stack            ; Save return address
0156               
0157 2D5C C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0158 2D5E 0224  30         ai    tmp0,5                ; Position to PAB byte 5
     2D60 0005     
0159               
0160 2D62 C160  42         mov   @fh.reclen,tmp1       ; Get record length
     2D64 A43E     
0161               
0162 2D66 06A0  36         bl    @xvputb               ; Write character count to PAB
     2D68 22DA     
0163                                                   ; \ i  tmp0 = VDP target address
0164                                                   ; / i  tmp1 = Byte to write
0165               
0166 2D6A 0205  24         li    tmp1,io.op.write      ; io.op.write
     2D6C 0003     
0167 2D6E 1006  14         jmp   _file.record.fop      ; Do file operation
0168               
0169               
0170               
0171               file.record.seek:
0172 2D70 1000  14         nop
0173               
0174               
0175               file.image.load:
0176 2D72 1000  14         nop
0177               
0178               
0179               file.image.save:
0180 2D74 1000  14         nop
0181               
0182               
0183               file.delete:
0184 2D76 1000  14         nop
0185               
0186               
0187               file.rename:
0188 2D78 1000  14         nop
0189               
0190               
0191               file.status:
0192 2D7A 1000  14         nop
0193               
0194               
0195               
0196               ***************************************************************
0197               * _file.record.fop - File operation
0198               ***************************************************************
0199               * Called internally via JMP/B by file operations
0200               *--------------------------------------------------------------
0201               *  Input:
0202               *  r0   = Address of PAB in VDP RAM
0203               *  r1   = File type/mode
0204               *  tmp1 = File operation opcode
0205               *
0206               *  @fh.offsetopcode = >00  Data buffer in VDP RAM
0207               *  @fh.offsetopcode = >40  Data buffer in CPU RAM
0208               *--------------------------------------------------------------
0209               *  Output:
0210               *  tmp0     = Copy of VDP PAB byte 1 after operation
0211               *  tmp1 LSB = Copy of VDP PAB byte 5 after operation
0212               *  tmp2 LSB = Copy of status register after operation
0213               *--------------------------------------------------------------
0214               *  Register usage:
0215               *  r0, r1, tmp0, tmp1, tmp2
0216               *--------------------------------------------------------------
0217               *  Remarks
0218               *  Private, only to be called from inside fio_level3 module
0219               *  via jump or branch instruction.
0220               *
0221               *  Uses @waux1 for backup/restore of memory word @>8322
0222               ********|*****|*********************|**************************
0223               _file.record.fop:
0224                       ;------------------------------------------------------
0225                       ; Write to PAB required?
0226                       ;------------------------------------------------------
0227 2D7C C800  42         mov   r0,@fh.pab.ptr        ; Backup of pointer to current VDP PAB
     2D7E A436     
0228                       ;------------------------------------------------------
0229                       ; Set file opcode in VDP PAB
0230                       ;------------------------------------------------------
0231 2D80 C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0232               
0233 2D82 A160  42         a     @fh.offsetopcode,tmp1 ; Inject offset for file I/O opcode
     2D84 A44E     
0234                                                   ; >00 = Data buffer in VDP RAM
0235                                                   ; >40 = Data buffer in CPU RAM
0236               
0237 2D86 06A0  36         bl    @xvputb               ; Write file I/O opcode to VDP
     2D88 22DA     
0238                                                   ; \ i  tmp0 = VDP target address
0239                                                   ; / i  tmp1 = Byte to write
0240                       ;------------------------------------------------------
0241                       ; Set file type/mode in VDP PAB
0242                       ;------------------------------------------------------
0243 2D8A C100  30         mov   r0,tmp0               ; VDP write address (PAB byte 0)
0244 2D8C 0584  22         inc   tmp0                  ; Next byte in PAB
0245 2D8E C160  42         mov   @fh.filetype,tmp1     ; Get file type/mode
     2D90 A44C     
0246               
0247 2D92 06A0  36         bl    @xvputb               ; Write file type/mode to VDP
     2D94 22DA     
0248                                                   ; \ i  tmp0 = VDP target address
0249                                                   ; / i  tmp1 = Byte to write
0250                       ;------------------------------------------------------
0251                       ; Prepare for DSRLNK
0252                       ;------------------------------------------------------
0253 2D96 0220  30 !       ai    r0,9                  ; Move to file descriptor length
     2D98 0009     
0254 2D9A C800  34         mov   r0,@>8356             ; Pass file descriptor to DSRLNK
     2D9C 8356     
0255               *--------------------------------------------------------------
0256               * Call DSRLINK for doing file operation
0257               *--------------------------------------------------------------
0258 2D9E C820  42         mov   @>8322,@waux1         ; Save word at @>8322
     2DA0 8322     
     2DA2 833C     
0259               
0260 2DA4 C120  42         mov   @dsrlnk.savcru,tmp0   ; Call optimized or standard version?
     2DA6 A42A     
0261 2DA8 1504  14         jgt   _file.record.fop.optimized
0262                                                   ; Optimized version
0263               
0264                       ;------------------------------------------------------
0265                       ; First IO call. Call standard DSRLNK
0266                       ;------------------------------------------------------
0267 2DAA 0420  62         blwp  @dsrlnk               ; Call DSRLNK
     2DAC 2BA8     
0268 2DAE 0008                   data >8               ; \ i  p0 = >8 (DSR)
0269                                                   ; / o  r0 = Copy of VDP PAB byte 1
0270 2DB0 1002  14         jmp  _file.record.fop.pab   ; Return PAB to caller
0271               
0272                       ;------------------------------------------------------
0273                       ; Recurring IO call. Call optimized DSRLNK
0274                       ;------------------------------------------------------
0275               _file.record.fop.optimized:
0276 2DB2 0420  62         blwp  @dsrlnk.reuse         ; Call DSRLNK
     2DB4 2CD8     
0277               
0278               *--------------------------------------------------------------
0279               * Return PAB details to caller
0280               *--------------------------------------------------------------
0281               _file.record.fop.pab:
0282 2DB6 02C6  12         stst  tmp2                  ; Store status register contents in tmp2
0283                                                   ; Upon DSRLNK return status register EQ bit
0284                                                   ; 1 = No file error
0285                                                   ; 0 = File error occured
0286               
0287 2DB8 C820  42         mov   @waux1,@>8322         ; Restore word at @>8322
     2DBA 833C     
     2DBC 8322     
0288               *--------------------------------------------------------------
0289               * Get PAB byte 5 from VDP ram into tmp1 (character count)
0290               *--------------------------------------------------------------
0291 2DBE C120  42         mov   @fh.pab.ptr,tmp0      ; Get VDP address of current PAB
     2DC0 A436     
0292 2DC2 0224  30         ai    tmp0,5                ; Get address of VDP PAB byte 5
     2DC4 0005     
0293 2DC6 06A0  36         bl    @xvgetb               ; VDP read PAB status byte into tmp0
     2DC8 22F2     
0294 2DCA C144  30         mov   tmp0,tmp1             ; Move to destination
0295               *--------------------------------------------------------------
0296               * Get PAB byte 1 from VDP ram into tmp0 (status)
0297               *--------------------------------------------------------------
0298 2DCC C100  30         mov   r0,tmp0               ; VDP PAB byte 1 (status)
0299                                                   ; as returned by DSRLNK
0300               *--------------------------------------------------------------
0301               * Exit
0302               *--------------------------------------------------------------
0303               ; If an error occured during the IO operation, then the
0304               ; equal bit in the saved status register (=tmp2) is set to 1.
0305               ;
0306               ; Upon return from this IO call you should basically test with:
0307               ;       coc   @wbit2,tmp2           ; Equal bit set?
0308               ;       jeq   my_file_io_handler    ; Yes, IO error occured
0309               ;
0310               ; Then look for further details in the copy of VDP PAB byte 1
0311               ; in register tmp0, bits 13-15
0312               ;
0313               ;       srl   tmp0,8                ; Right align (only for DSR type >8
0314               ;                                   ; calls, skip for type >A subprograms!)
0315               ;       ci    tmp0,io.err.<code>    ; Check for error pattern
0316               ;       jeq   my_error_handler
0317               *--------------------------------------------------------------
0318               _file.record.fop.exit:
0319 2DCE C2F9  46         mov   *stack+,r11           ; Pop R11
0320 2DD0 045B  24         b     *r11                  ; Return to caller
                   < runlib.asm
0234               
0235               *//////////////////////////////////////////////////////////////
0236               *                            TIMERS
0237               *//////////////////////////////////////////////////////////////
0238               
0239                       copy  "timers_tmgr.asm"          ; Timers / Thread scheduler
     **** ****     > timers_tmgr.asm
0001               * FILE......: timers_tmgr.asm
0002               * Purpose...: Timers / Thread scheduler
0003               
0004               ***************************************************************
0005               * TMGR - X - Start Timers/Thread scheduler
0006               ***************************************************************
0007               *  B @TMGR
0008               *--------------------------------------------------------------
0009               *  REMARKS
0010               *  Timer/Thread scheduler. Normally called from MAIN.
0011               *  This is basically the kernel keeping everything together.
0012               *  Do not forget to set BTIHI to highest slot in use.
0013               *
0014               *  Register usage in TMGR8 - TMGR11
0015               *  TMP0  = Pointer to timer table
0016               *  R10LB = Use as slot counter
0017               *  TMP2  = 2nd word of slot data
0018               *  TMP3  = Address of routine to call
0019               ********|*****|*********************|**************************
0020 2DD2 0300  22 tmgr    limi  0                     ; No interrupt processing
     2DD4 0000     
0021               *--------------------------------------------------------------
0022               * Read VDP status register
0023               *--------------------------------------------------------------
0024 2DD6 D360  38 tmgr1   movb  @vdps,r13             ; Save copy of VDP status register in R13
     2DD8 8802     
0025               *--------------------------------------------------------------
0026               * Latch sprite collision flag
0027               *--------------------------------------------------------------
0028 2DDA 2360  32         coc   @wbit2,r13            ; C flag on ?
     2DDC 201C     
0029 2DDE 1602  14         jne   tmgr1a                ; No, so move on
0030 2DE0 E0A0  42         soc   @wbit12,config        ; Latch bit 12 in config register
     2DE2 2008     
0031               *--------------------------------------------------------------
0032               * Interrupt flag
0033               *--------------------------------------------------------------
0034 2DE4 2360  32 tmgr1a  coc   @wbit0,r13            ; Interupt flag set ?
     2DE6 2020     
0035 2DE8 1311  14         jeq   tmgr4                 ; Yes, process slots 0..n
0036               *--------------------------------------------------------------
0037               * Run speech player
0038               *--------------------------------------------------------------
0044               *--------------------------------------------------------------
0045               * Run kernel thread
0046               *--------------------------------------------------------------
0047 2DEA 20A0  32 tmgr2   coc   @wbit8,config         ; Kernel thread blocked ?
     2DEC 2010     
0048 2DEE 1305  14         jeq   tmgr3                 ; Yes, skip to user hook
0049 2DF0 20A0  32         coc   @wbit9,config         ; Kernel thread enabled ?
     2DF2 200E     
0050 2DF4 1602  14         jne   tmgr3                 ; No, skip to user hook
0051 2DF6 0460  28         b     @kthread              ; Run kernel thread
     2DF8 2E70     
0052               *--------------------------------------------------------------
0053               * Run user hook
0054               *--------------------------------------------------------------
0055 2DFA 20A0  32 tmgr3   coc   @wbit6,config         ; User hook blocked ?
     2DFC 2014     
0056 2DFE 13EB  14         jeq   tmgr1
0057 2E00 20A0  32         coc   @wbit7,config         ; User hook enabled ?
     2E02 2012     
0058 2E04 16E8  14         jne   tmgr1
0059 2E06 C120  38         mov   @wtiusr,tmp0
     2E08 832E     
0060 2E0A 0454  24         b     *tmp0                 ; Run user hook
0061               *--------------------------------------------------------------
0062               * Do internal housekeeping
0063               *--------------------------------------------------------------
0064 2E0C 40A0  42 tmgr4   szc   @tmdat,config         ; Unblock kernel thread and user hook
     2E0E 2E6E     
0065 2E10 C10A  30         mov   r10,tmp0
0066 2E12 0244  30         andi  tmp0,>00ff            ; Clear HI byte
     2E14 00FF     
0067 2E16 20A0  32         coc   @wbit2,config         ; PAL flag set ?
     2E18 201C     
0068 2E1A 1303  14         jeq   tmgr5
0069 2E1C 0284  26         ci    tmp0,60               ; 1 second reached ?
     2E1E 003C     
0070 2E20 1002  14         jmp   tmgr6
0071 2E22 0284  26 tmgr5   ci    tmp0,50
     2E24 0032     
0072 2E26 1101  14 tmgr6   jlt   tmgr7                 ; No, continue
0073 2E28 1001  14         jmp   tmgr8
0074 2E2A 058A  22 tmgr7   inc   r10                   ; Increase tick counter
0075               *--------------------------------------------------------------
0076               * Loop over slots
0077               *--------------------------------------------------------------
0078 2E2C C120  38 tmgr8   mov   @wtitab,tmp0          ; Pointer to timer table
     2E2E 832C     
0079 2E30 024A  30         andi  r10,>ff00             ; Use R10LB as slot counter. Reset.
     2E32 FF00     
0080 2E34 C1D4  38 tmgr9   mov   *tmp0,tmp3            ; Is slot empty ?
0081 2E36 1316  14         jeq   tmgr11                ; Yes, get next slot
0082               *--------------------------------------------------------------
0083               *  Check if slot should be executed
0084               *--------------------------------------------------------------
0085 2E38 05C4  22         inct  tmp0                  ; Second word of slot data
0086 2E3A 0594  30         inc   *tmp0                 ; Update tick count in slot
0087 2E3C C194  38         mov   *tmp0,tmp2            ; Get second word of slot data
0088 2E3E 9820  42         cb    @tmp2hb,@tmp2lb       ; Slot target count = Slot internal counter ?
     2E40 830C     
     2E42 830D     
0089 2E44 1608  14         jne   tmgr10                ; No, get next slot
0090 2E46 0246  30         andi  tmp2,>ff00            ; Clear internal counter
     2E48 FF00     
0091 2E4A C506  38         mov   tmp2,*tmp0            ; Update timer table
0092               *--------------------------------------------------------------
0093               *  Run slot, we only need TMP0 to survive
0094               *--------------------------------------------------------------
0095 2E4C C804  34         mov   tmp0,@wtitmp          ; Save TMP0
     2E4E 8330     
0096 2E50 0697  32         bl    *tmp3                 ; Call routine in slot
0097 2E52 C120  38 slotok  mov   @wtitmp,tmp0          ; Restore TMP0
     2E54 8330     
0098               *--------------------------------------------------------------
0099               *  Prepare for next slot
0100               *--------------------------------------------------------------
0101 2E56 058A  22 tmgr10  inc   r10                   ; Next slot
0102 2E58 9820  42         cb    @r10lb,@btihi         ; Last slot done ?
     2E5A 8315     
     2E5C 8314     
0103 2E5E 1504  14         jgt   tmgr12                ; yes, Wait for next VDP interrupt
0104 2E60 05C4  22         inct  tmp0                  ; Offset for next slot
0105 2E62 10E8  14         jmp   tmgr9                 ; Process next slot
0106 2E64 05C4  22 tmgr11  inct  tmp0                  ; Skip 2nd word of slot data
0107 2E66 10F7  14         jmp   tmgr10                ; Process next slot
0108 2E68 024A  30 tmgr12  andi  r10,>ff00             ; Use R10LB as tick counter. Reset.
     2E6A FF00     
0109 2E6C 10B4  14         jmp   tmgr1
0110 2E6E 0280     tmdat   data  >0280                 ; Bit 8 (kernel thread) and bit 6 (user hook)
0111               
                   < runlib.asm
0240                       copy  "timers_kthread.asm"       ; Timers / Kernel thread
     **** ****     > timers_kthread.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / The kernel thread
0003               
0004               
0005               ***************************************************************
0006               * KTHREAD - The kernel thread
0007               *--------------------------------------------------------------
0008               *  REMARKS
0009               *  You should not call the kernel thread manually.
0010               *  Instead control it via the CONFIG register.
0011               *
0012               *  The kernel thread is responsible for running the sound
0013               *  player and doing keyboard scan.
0014               ********|*****|*********************|**************************
0015 2E70 E0A0  42 kthread soc   @wbit8,config         ; Block kernel thread
     2E72 2010     
0016               *--------------------------------------------------------------
0017               * Run sound player
0018               *--------------------------------------------------------------
0022 2E74 20A0  32         coc   @wbit13,config        ; Sound player on ?
     2E76 2006     
0023 2E78 1602  14         jne   kthread_kb
0024 2E7A 06A0  36         bl    @sdpla1               ; Run sound player
     2E7C 2844     
0026               *--------------------------------------------------------------
0027               * Scan virtual keyboard
0028               *--------------------------------------------------------------
0029               kthread_kb
0031               *       <<skipped>>
0035               *--------------------------------------------------------------
0036               * Scan real keyboard
0037               *--------------------------------------------------------------
0042 2E7E 06A0  36         bl    @rkscan               ; Scan full keyboard with ROM#0 KSCAN
     2E80 28C4     
0047               *--------------------------------------------------------------
0048               kthread_exit
0049 2E82 0460  28         b     @tmgr3                ; Exit
     2E84 2DFA     
                   < runlib.asm
0241                       copy  "timers_hooks.asm"         ; Timers / User hooks
     **** ****     > timers_hooks.asm
0001               * FILE......: timers_kthread.asm
0002               * Purpose...: Timers / User hooks
0003               
0004               
0005               ***************************************************************
0006               * MKHOOK - Allocate user hook
0007               ***************************************************************
0008               *  BL    @MKHOOK
0009               *  DATA  P0
0010               *--------------------------------------------------------------
0011               *  P0 = Address of user hook
0012               *--------------------------------------------------------------
0013               *  REMARKS
0014               *  The user hook gets executed after the kernel thread.
0015               *  The user hook must always exit with "B @HOOKOK"
0016               ********|*****|*********************|**************************
0017 2E86 C83B  50 mkhook  mov   *r11+,@wtiusr         ; Set user hook address
     2E88 832E     
0018 2E8A E0A0  42         soc   @wbit7,config         ; Enable user hook
     2E8C 2012     
0019 2E8E 045B  24 mkhoo1  b     *r11                  ; Return
0020      2DD6     hookok  equ   tmgr1                 ; Exit point for user hook
0021               
0022               
0023               ***************************************************************
0024               * CLHOOK - Clear user hook
0025               ***************************************************************
0026               *  BL    @CLHOOK
0027               ********|*****|*********************|**************************
0028 2E90 04E0  26 clhook  clr   @wtiusr               ; Unset user hook address
     2E92 832E     
0029 2E94 0242  30         andi  config,>feff          ; Disable user hook (bit 7=0)
     2E96 FEFF     
0030 2E98 045B  24         b     *r11                  ; Return
                   < runlib.asm
0242               
0244                       copy  "timers_alloc.asm"         ; Timers / Slot calculation
     **** ****     > timers_alloc.asm
0001               * FILE......: timer_alloc.asm
0002               * Purpose...: Timers / Timer allocation
0003               
0004               
0005               ***************************************************************
0006               * MKSLOT - Allocate timer slot(s)
0007               ***************************************************************
0008               *  BL    @MKSLOT
0009               *  BYTE  P0HB,P0LB
0010               *  DATA  P1
0011               *  ....
0012               *  DATA  EOL                        ; End-of-list
0013               *--------------------------------------------------------------
0014               *  P0 = Slot number, target count
0015               *  P1 = Subroutine to call via BL @xxxx if slot is fired
0016               ********|*****|*********************|**************************
0017 2E9A C13B  46 mkslot  mov   *r11+,tmp0
0018 2E9C C17B  46         mov   *r11+,tmp1
0019               *--------------------------------------------------------------
0020               *  Calculate address of slot
0021               *--------------------------------------------------------------
0022 2E9E C184  30         mov   tmp0,tmp2
0023 2EA0 0966  36         srl   tmp2,6                ; Right align & TMP2 = TMP2 * 4
0024 2EA2 A1A0  38         a     @wtitab,tmp2          ; Add table base
     2EA4 832C     
0025               *--------------------------------------------------------------
0026               *  Add slot to table
0027               *--------------------------------------------------------------
0028 2EA6 CD85  46         mov   tmp1,*tmp2+           ; Store address of subroutine
0029 2EA8 0A84  40         sla   tmp0,8                ; Get rid of slot number
0030 2EAA C584  38         mov   tmp0,*tmp2            ; Store target count and reset tick count
0031               *--------------------------------------------------------------
0032               *  Check for end of list
0033               *--------------------------------------------------------------
0034 2EAC 881B  46         c     *r11,@w$ffff          ; End of list ?
     2EAE 2022     
0035 2EB0 1301  14         jeq   mkslo1                ; Yes, exit
0036 2EB2 10F3  14         jmp   mkslot                ; Process next entry
0037               *--------------------------------------------------------------
0038               *  Exit
0039               *--------------------------------------------------------------
0040 2EB4 05CB  22 mkslo1  inct  r11
0041 2EB6 045B  24         b     *r11                  ; Exit
0042               
0043               
0044               ***************************************************************
0045               * CLSLOT - Clear single timer slot
0046               ***************************************************************
0047               *  BL    @CLSLOT
0048               *  DATA  P0
0049               *--------------------------------------------------------------
0050               *  P0 = Slot number
0051               ********|*****|*********************|**************************
0052 2EB8 C13B  46 clslot  mov   *r11+,tmp0
0053 2EBA 0A24  28 xlslot  sla   tmp0,2                ; TMP0 = TMP0*4
0054 2EBC A120  38         a     @wtitab,tmp0          ; Add table base
     2EBE 832C     
0055 2EC0 04F4  38         clr   *tmp0+                ; Clear 1st word of slot
0056 2EC2 04D4  30         clr   *tmp0                 ; Clear 2nd word of slot
0057 2EC4 045B  24         b     *r11                  ; Exit
0058               
0059               
0060               ***************************************************************
0061               * RSSLOT - Reset single timer slot loop counter
0062               ***************************************************************
0063               *  BL    @RSSLOT
0064               *  DATA  P0
0065               *--------------------------------------------------------------
0066               *  P0 = Slot number
0067               ********|*****|*********************|**************************
0068 2EC6 C13B  46 rsslot  mov   *r11+,tmp0
0069 2EC8 0A24  28         sla   tmp0,2                ; TMP0 = TMP0*4
0070 2ECA A120  38         a     @wtitab,tmp0          ; Add table base
     2ECC 832C     
0071 2ECE 05C4  22         inct  tmp0                  ; Skip 1st word of slot
0072 2ED0 C154  38         mov   *tmp0,tmp1
0073 2ED2 0245  30         andi  tmp1,>ff00            ; Clear LSB (loop counter)
     2ED4 FF00     
0074 2ED6 C505  38         mov   tmp1,*tmp0
0075 2ED8 045B  24         b     *r11                  ; Exit
                   < runlib.asm
0246               
0247               
0248               
0249               *//////////////////////////////////////////////////////////////
0250               *                    RUNLIB INITIALISATION
0251               *//////////////////////////////////////////////////////////////
0252               
0253               ***************************************************************
0254               *  RUNLIB - Runtime library initalisation
0255               ***************************************************************
0256               *  B  @RUNLIB
0257               *--------------------------------------------------------------
0258               *  REMARKS
0259               *  if R0 in WS1 equals >4a4a we were called from the system
0260               *  crash handler so we return there after initialisation.
0261               
0262               *  If R1 in WS1 equals >FFFF we return to the TI title screen
0263               *  after clearing scratchpad memory. This has higher priority
0264               *  as crash handler flag R0.
0265               ********|*****|*********************|**************************
0272 2EDA 04E0  26 runlib  clr   @>8302                ; Reset exit flag (R1 in workspace WS1!)
     2EDC 8302     
0274               *--------------------------------------------------------------
0275               * Alternative entry point
0276               *--------------------------------------------------------------
0277 2EDE 0300  22 runli1  limi  0                     ; Turn off interrupts
     2EE0 0000     
0278 2EE2 02E0  18         lwpi  ws1                   ; Activate workspace 1
     2EE4 8300     
0279 2EE6 C0E0  30         mov   @>83c0,r3             ; Get random seed from OS monitor
     2EE8 83C0     
0280               *--------------------------------------------------------------
0281               * Clear scratch-pad memory from R4 upwards
0282               *--------------------------------------------------------------
0283 2EEA 0202  20 runli2  li    r2,>8308
     2EEC 8308     
0284 2EEE 04F2  30 runli3  clr   *r2+                  ; Clear scratchpad >8306->83FF
0285 2EF0 0282  22         ci    r2,>8400
     2EF2 8400     
0286 2EF4 16FC  14         jne   runli3
0287               *--------------------------------------------------------------
0288               * Exit to TI-99/4A title screen ?
0289               *--------------------------------------------------------------
0290 2EF6 0281  22 runli3a ci    r1,>ffff              ; Exit flag set ?
     2EF8 FFFF     
0291 2EFA 1602  14         jne   runli4                ; No, continue
0292 2EFC 0420  42         blwp  @0                    ; Yes, bye bye
     2EFE 0000     
0293               *--------------------------------------------------------------
0294               * Determine if VDP is PAL or NTSC
0295               *--------------------------------------------------------------
0296 2F00 C803  30 runli4  mov   r3,@waux1             ; Store random seed
     2F02 833C     
0297 2F04 04C1  14         clr   r1                    ; Reset counter
0298 2F06 0202  20         li    r2,10                 ; We test 10 times
     2F08 000A     
0299 2F0A C0E0  30 runli5  mov   @vdps,r3
     2F0C 8802     
0300 2F0E 20E0  32         coc   @wbit0,r3             ; Interupt flag set ?
     2F10 2020     
0301 2F12 1302  14         jeq   runli6
0302 2F14 0581  14         inc   r1                    ; Increase counter
0303 2F16 10F9  14         jmp   runli5
0304 2F18 0602  14 runli6  dec   r2                    ; Next test
0305 2F1A 16F7  14         jne   runli5
0306 2F1C 0281  22         ci    r1,>1250              ; Max for NTSC reached ?
     2F1E 1250     
0307 2F20 1202  14         jle   runli7                ; No, so it must be NTSC
0308 2F22 0262  22         ori   config,palon          ; Yes, it must be PAL, set flag
     2F24 201C     
0309               *--------------------------------------------------------------
0310               * Copy machine code to scratchpad (prepare tight loop)
0311               *--------------------------------------------------------------
0312 2F26 06A0  32 runli7  bl    @loadmc
     2F28 2228     
0313               *--------------------------------------------------------------
0314               * Initialize registers, memory, ...
0315               *--------------------------------------------------------------
0316 2F2A 04C1  14 runli9  clr   r1
0317 2F2C 04C2  14         clr   r2
0318 2F2E 04C3  14         clr   r3
0319 2F30 0209  20         li    stack,sp2.stktop      ; Set top of stack (grows downwards!)
     2F32 A900     
0320 2F34 020F  20         li    r15,vdpw              ; Set VDP write address
     2F36 8C00     
0322 2F38 06A0  32         bl    @mute                 ; Mute sound generators
     2F3A 2808     
0324               *--------------------------------------------------------------
0325               * Setup video memory
0326               *--------------------------------------------------------------
0328 2F3C 0280  22         ci    r0,>4a4a              ; Crash flag set?
     2F3E 4A4A     
0329 2F40 1605  14         jne   runlia
0330 2F42 06A0  32         bl    @filv                 ; Clear 12K VDP memory instead
     2F44 229C     
0331 2F46 0000             data  >0000,>00,>3000       ; of 16K, so that PABs survive
     2F48 0000     
     2F4A 3000     
0336 2F4C 06A0  32 runlia  bl    @filv
     2F4E 229C     
0337 2F50 0FC0             data  pctadr,spfclr,16      ; Load color table
     2F52 00F4     
     2F54 0010     
0338               *--------------------------------------------------------------
0339               * Check if there is a F18A present
0340               *--------------------------------------------------------------
0344 2F56 06A0  32         bl    @f18unl               ; Unlock the F18A
     2F58 2738     
0345 2F5A 06A0  32         bl    @f18chk               ; Check if F18A is there \
     2F5C 2762     
0346 2F5E 06A0  32         bl    @f18chk               ; Check if F18A is there | js99er bug?
     2F60 2762     
0347 2F62 06A0  32         bl    @f18chk               ; Check if F18A is there /
     2F64 2762     
0348 2F66 06A0  32         bl    @f18lck               ; Lock the F18A again
     2F68 274E     
0349               
0350 2F6A 06A0  32         bl    @putvr                ; Reset all F18a extended registers
     2F6C 2340     
0351 2F6E 3201                   data >3201            ; F18a VR50 (>32), bit 1
0353               *--------------------------------------------------------------
0354               * Check if there is a speech synthesizer attached
0355               *--------------------------------------------------------------
0357               *       <<skipped>>
0361               *--------------------------------------------------------------
0362               * Load video mode table & font
0363               *--------------------------------------------------------------
0364 2F70 06A0  32 runlic  bl    @vidtab               ; Load video mode table into VDP
     2F72 2306     
0365 2F74 3668             data  spvmod                ; Equate selected video mode table
0366 2F76 0204  20         li    tmp0,spfont           ; Get font option
     2F78 000C     
0367 2F7A 0544  14         inv   tmp0                  ; NOFONT (>FFFF) specified ?
0368 2F7C 1304  14         jeq   runlid                ; Yes, skip it
0369 2F7E 06A0  32         bl    @ldfnt
     2F80 236E     
0370 2F82 1100             data  fntadr,spfont         ; Load specified font
     2F84 000C     
0371               *--------------------------------------------------------------
0372               * Did a system crash occur before runlib was called?
0373               *--------------------------------------------------------------
0374 2F86 0280  22 runlid  ci    r0,>4a4a              ; Crash flag set?
     2F88 4A4A     
0375 2F8A 1602  14         jne   runlie                ; No, continue
0376 2F8C 0460  28         b     @cpu.crash.main       ; Yes, back to crash handler
     2F8E 2086     
0377               *--------------------------------------------------------------
0378               * Branch to main program
0379               *--------------------------------------------------------------
0380 2F90 0262  22 runlie  ori   config,>0040          ; Enable kernel thread (bit 9 on)
     2F92 0040     
0381 2F94 0460  28         b     @main                 ; Give control to main program
     2F96 6046     
                   < stevie_b1.asm
0049                       copy  "ram.resident.asm"
     **** ****     > ram.resident.asm
0001               * FILE......: ram.resident.asm
0002               * Purpose...: Resident modules in LOW MEMEXP callable from all ROM banks.
0003               
0004                       ;------------------------------------------------------
0005                       ; Low-level modules
0006                       ;------------------------------------------------------
0007                       copy  "rom.farjump.asm"        ; ROM bankswitch trampoline
     **** ****     > rom.farjump.asm
0001               * FILE......: rom.farjump.asm
0002               * Purpose...: Trampoline to routine in other ROM bank
0003               
0004               ***************************************************************
0005               * rom.farjump - Jump to routine in specified bank
0006               ***************************************************************
0007               *  bl   @rom.farjump
0008               *       data p0,p1
0009               *--------------------------------------------------------------
0010               *  p0 = Write address of target ROM bank
0011               *  p1 = Vector address with target address to jump to
0012               *  p2 = Write address of source ROM bank
0013               *--------------------------------------------------------------
0014               *  bl @xrom.farjump
0015               *
0016               *  tmp0 = Write address of target ROM bank
0017               *  tmp1 = Vector address with target address to jump to
0018               *  tmp2 = Write address of source ROM bank
0019               ********|*****|*********************|**************************
0020               rom.farjump:
0021 2F98 C13B  30         mov   *r11+,tmp0            ; P0
0022 2F9A C17B  30         mov   *r11+,tmp1            ; P1
0023 2F9C C1BB  30         mov   *r11+,tmp2            ; P2
0024                       ;------------------------------------------------------
0025                       ; Push registers to value stack (but not r11!)
0026                       ;------------------------------------------------------
0027               xrom.farjump:
0028 2F9E 0649  14         dect  stack
0029 2FA0 C644  30         mov   tmp0,*stack           ; Push tmp0
0030 2FA2 0649  14         dect  stack
0031 2FA4 C645  30         mov   tmp1,*stack           ; Push tmp1
0032 2FA6 0649  14         dect  stack
0033 2FA8 C646  30         mov   tmp2,*stack           ; Push tmp2
0034 2FAA 0649  14         dect  stack
0035 2FAC C647  30         mov   tmp3,*stack           ; Push tmp3
0036                       ;------------------------------------------------------
0037                       ; Push to farjump return stack
0038                       ;------------------------------------------------------
0039 2FAE 0284  22         ci    tmp0,>6000            ; Invalid bank write address?
     2FB0 6000     
0040 2FB2 1116  14         jlt   rom.farjump.bankswitch.failed1
0041                                                   ; Crash if bogus value in bank write address
0042               
0043 2FB4 C1E0  34         mov   @tv.fj.stackpnt,tmp3  ; Get farjump stack pointer
     2FB6 A226     
0044 2FB8 0647  14         dect  tmp3
0045 2FBA C5CB  30         mov   r11,*tmp3             ; Push return address to farjump stack
0046 2FBC 0647  14         dect  tmp3
0047 2FBE C5C6  30         mov   tmp2,*tmp3            ; Push source ROM bank to farjump stack
0048 2FC0 C807  38         mov   tmp3,@tv.fj.stackpnt  ; Set farjump stack pointer
     2FC2 A226     
0049               
0053               
0054                       ;------------------------------------------------------
0055                       ; Bankswitch to target 8K ROM bank
0056                       ;------------------------------------------------------
0057               rom.farjump.bankswitch.target.rom8k:
0058 2FC4 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 8K >6000
0059 2FC6 1004  14         jmp   rom.farjump.bankswitch.tgt.done
0060                       ;------------------------------------------------------
0061                       ; Bankswitch to target 4K ROM / 4K RAM banks (FG99 advanced mode)
0062                       ;------------------------------------------------------
0063               rom.farjump.bankswitch.tgt.advfg99:
0064 2FC8 04D4  26         clr   *tmp0                 ; Switch to target ROM bank 4K >6000
0065 2FCA 0224  22         ai    tmp0,>0800
     2FCC 0800     
0066 2FCE 04D4  26         clr   *tmp0                 ; Switch to target RAM bank 4K >7000
0067                       ;------------------------------------------------------
0068                       ; Bankswitch to target bank(s) completed
0069                       ;------------------------------------------------------
0070               rom.farjump.bankswitch.tgt.done:
0071                       ;------------------------------------------------------
0072                       ; Deref vector from @trmpvector if >ffff
0073                       ;------------------------------------------------------
0074 2FD0 0285  22         ci    tmp1,>ffff
     2FD2 FFFF     
0075 2FD4 1602  14         jne   !
0076 2FD6 C160  34         mov   @trmpvector,tmp1
     2FD8 A032     
0077                       ;------------------------------------------------------
0078                       ; Deref value in vector
0079                       ;------------------------------------------------------
0080 2FDA C115  26 !       mov   *tmp1,tmp0            ; Deref value in vector address
0081 2FDC 1301  14         jeq   rom.farjump.bankswitch.failed1
0082                                                   ; Crash if null-pointer in vector
0083               
0084 2FDE 1004  14         jmp   rom.farjump.bankswitch.call
0085                                                   ; Call function in target bank
0086                       ;------------------------------------------------------
0087                       ; Assert 1 failed before bank-switch
0088                       ;------------------------------------------------------
0089               rom.farjump.bankswitch.failed1:
0090 2FE0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     2FE2 FFCE     
0091 2FE4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     2FE6 2026     
0092                       ;------------------------------------------------------
0093                       ; Call function in target bank
0094                       ;------------------------------------------------------
0095               rom.farjump.bankswitch.call:
0096 2FE8 0694  24         bl    *tmp0                 ; Call function
0097                       ;------------------------------------------------------
0098                       ; Bankswitch back to source bank
0099                       ;------------------------------------------------------
0100               rom.farjump.return:
0101 2FEA C120  34         mov   @tv.fj.stackpnt,tmp0  ; Get farjump stack pointer
     2FEC A226     
0102 2FEE C154  26         mov   *tmp0,tmp1            ; Get bank write address of caller
0103 2FF0 1312  14         jeq   rom.farjump.bankswitch.failed2
0104                                                   ; Crash if null-pointer in address
0105               
0106 2FF2 04F4  30         clr   *tmp0+                ; Remove bank write address from
0107                                                   ; farjump stack
0108               
0109 2FF4 C2D4  26         mov   *tmp0,r11             ; Get return addr of caller for return
0110               
0111 2FF6 04F4  30         clr   *tmp0+                ; Remove return address of caller from
0112                                                   ; farjump stack
0113               
0114 2FF8 028B  22         ci    r11,>6000
     2FFA 6000     
0115 2FFC 110C  14         jlt   rom.farjump.bankswitch.failed2
0116 2FFE 028B  22         ci    r11,>7fff
     3000 7FFF     
0117 3002 1509  14         jgt   rom.farjump.bankswitch.failed2
0118               
0119 3004 C804  38         mov   tmp0,@tv.fj.stackpnt  ; Update farjump return stack pointer
     3006 A226     
0120               
0124               
0125                       ;------------------------------------------------------
0126                       ; Bankswitch to source 8K ROM bank
0127                       ;------------------------------------------------------
0128               rom.farjump.bankswitch.src.rom8k:
0129 3008 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 8K >6000
0130 300A 1009  14         jmp   rom.farjump.exit
0131                       ;------------------------------------------------------
0132                       ; Bankswitch to source 4K ROM / 4K RAM banks (FG99 advanced mode)
0133                       ;------------------------------------------------------
0134               rom.farjump.bankswitch.src.advfg99:
0135 300C 04D5  26         clr   *tmp1                 ; Switch to source ROM bank 4K >6000
0136 300E 0225  22         ai    tmp1,>0800
     3010 0800     
0137 3012 04D5  26         clr   *tmp1                 ; Switch to source RAM bank 4K >7000
0138 3014 1004  14         jmp   rom.farjump.exit
0139                       ;------------------------------------------------------
0140                       ; Assert 2 failed after bank-switch
0141                       ;------------------------------------------------------
0142               rom.farjump.bankswitch.failed2:
0143 3016 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3018 FFCE     
0144 301A 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     301C 2026     
0145                       ;-------------------------------------------------------
0146                       ; Exit
0147                       ;-------------------------------------------------------
0148               rom.farjump.exit:
0149 301E C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0150 3020 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0151 3022 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0152 3024 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0153 3026 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0008                       copy  "fb.asm"                 ; Framebuffer
     **** ****     > fb.asm
0001               * FILE......: fb.asm
0002               * Purpose...: Stevie Editor - Framebuffer module
0003               
0004               ***************************************************************
0005               * fb.init
0006               * Initialize framebuffer
0007               ***************************************************************
0008               *  bl   @fb.init
0009               *--------------------------------------------------------------
0010               *  INPUT
0011               *  none
0012               *--------------------------------------------------------------
0013               *  OUTPUT
0014               *  none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               fb.init:
0020 3028 0649  14         dect  stack
0021 302A C64B  30         mov   r11,*stack            ; Save return address
0022 302C 0649  14         dect  stack
0023 302E C644  30         mov   tmp0,*stack           ; Push tmp0
0024 3030 0649  14         dect  stack
0025 3032 C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3034 0204  20         li    tmp0,fb.top
     3036 D000     
0030 3038 C804  38         mov   tmp0,@fb.top.ptr      ; Set pointer to framebuffer
     303A A300     
0031 303C 04E0  34         clr   @fb.topline           ; Top line in framebuffer
     303E A304     
0032 3040 04E0  34         clr   @fb.row               ; Current row=0
     3042 A306     
0033 3044 04E0  34         clr   @fb.column            ; Current column=0
     3046 A30C     
0034               
0035 3048 0204  20         li    tmp0,colrow
     304A 0050     
0036 304C C804  38         mov   tmp0,@fb.colsline     ; Columns per row=80
     304E A30E     
0037 3050 04E0  34         clr   @fb.vwco              ; Set view window column offset
     3052 A310     
0038                       ;------------------------------------------------------
0039                       ; Determine size of rows on screen
0040                       ;------------------------------------------------------
0041 3054 C160  34         mov   @tv.ruler.visible,tmp1
     3056 A210     
0042 3058 1303  14         jeq   !                     ; Skip if ruler is hidden
0043 305A 0204  20         li    tmp0,pane.botrow-2
     305C 001B     
0044 305E 1002  14         jmp   fb.init.cont
0045 3060 0204  20 !       li    tmp0,pane.botrow-1
     3062 001C     
0046                       ;------------------------------------------------------
0047                       ; Continue initialisation
0048                       ;------------------------------------------------------
0049               fb.init.cont:
0050 3064 C804  38         mov   tmp0,@fb.scrrows      ; Physical rows on screen for fb
     3066 A31C     
0051 3068 C804  38         mov   tmp0,@fb.scrrows.max  ; Maximum number of physical rows for fb
     306A A31E     
0052               
0053 306C 04E0  34         clr   @tv.pane.focus        ; Frame buffer has focus!
     306E A222     
0054 3070 04E0  34         clr   @fb.colorize          ; Don't colorize M1/M2 lines
     3072 A312     
0055 3074 0720  34         seto  @fb.dirty             ; Set dirty flag (trigger screen update)
     3076 A318     
0056 3078 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     307A A31A     
0057                       ;------------------------------------------------------
0058                       ; Clear frame buffer
0059                       ;------------------------------------------------------
0060 307C 06A0  32         bl    @film
     307E 2244     
0061 3080 D000             data  fb.top,>00,fb.size    ; Clear it all the way
     3082 0000     
     3084 0960     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               fb.init.exit:
0066 3086 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3088 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 308A C2F9  30         mov   *stack+,r11           ; Pop r11
0069 308C 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0009                       copy  "fb.utils.asm"           ; Framebuffer utilities
     **** ****     > fb.utils.asm
0001               * FILE......: fb.utils.asm
0002               * Purpose...: Stevie Editor - Framebuffer utilities
0003               
0004               ***************************************************************
0005               * fb.row2line
0006               * Calculate line in editor buffer
0007               ***************************************************************
0008               * bl @fb.row2line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.topline = Top line in frame buffer
0012               * @parm1      = Row in frame buffer (offset 0..@fb.scrrows)
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * @outparm1 = Matching line in editor buffer
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               *--------------------------------------------------------------
0020               * Formula
0021               * outparm1 = @fb.topline + @parm1
0022               ********|*****|*********************|**************************
0023               fb.row2line:
0024 308E 0649  14         dect  stack
0025 3090 C64B  30         mov   r11,*stack            ; Save return address
0026 3092 0649  14         dect  stack
0027 3094 C644  30         mov   tmp0,*stack           ; Push tmp0
0028                       ;------------------------------------------------------
0029                       ; Calculate line in editor buffer
0030                       ;------------------------------------------------------
0031 3096 C120  34         mov   @parm1,tmp0
     3098 A006     
0032 309A A120  34         a     @fb.topline,tmp0
     309C A304     
0033 309E C804  38         mov   tmp0,@outparm1
     30A0 A016     
0034                       ;------------------------------------------------------
0035                       ; Exit
0036                       ;------------------------------------------------------
0037               fb.row2line.exit:
0038 30A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0039 30A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0040 30A6 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               
0045               ***************************************************************
0046               * fb.calc_pointer
0047               * Calculate pointer address in frame buffer
0048               ***************************************************************
0049               * bl @fb.calc_pointer
0050               *--------------------------------------------------------------
0051               * INPUT
0052               * @fb.top       = Address of top row in frame buffer
0053               * @fb.topline   = Top line in frame buffer
0054               * @fb.row       = Current row in frame buffer (offset 0..@fb.scrrows)
0055               * @fb.column    = Current column in frame buffer
0056               * @fb.colsline  = Columns per line in frame buffer
0057               *--------------------------------------------------------------
0058               * OUTPUT
0059               * @fb.current   = Updated pointer
0060               *--------------------------------------------------------------
0061               * Register usage
0062               * tmp0,tmp1
0063               *--------------------------------------------------------------
0064               * Formula
0065               * pointer = row * colsline + column + deref(@fb.top.ptr)
0066               ********|*****|*********************|**************************
0067               fb.calc_pointer:
0068 30A8 0649  14         dect  stack
0069 30AA C64B  30         mov   r11,*stack            ; Save return address
0070 30AC 0649  14         dect  stack
0071 30AE C644  30         mov   tmp0,*stack           ; Push tmp0
0072 30B0 0649  14         dect  stack
0073 30B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0074                       ;------------------------------------------------------
0075                       ; Calculate pointer
0076                       ;------------------------------------------------------
0077 30B4 C120  34         mov   @fb.row,tmp0
     30B6 A306     
0078 30B8 3920  74         mpy   @fb.colsline,tmp0     ; tmp1 = row  * colsline
     30BA A30E     
0079 30BC A160  34         a     @fb.column,tmp1       ; tmp1 = tmp1 + column
     30BE A30C     
0080 30C0 A160  34         a     @fb.top.ptr,tmp1      ; tmp1 = tmp1 + base
     30C2 A300     
0081 30C4 C805  38         mov   tmp1,@fb.current
     30C6 A302     
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               fb.calc_pointer.exit:
0086 30C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0087 30CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 30CC C2F9  30         mov   *stack+,r11           ; Pop r11
0089 30CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0010                       copy  "idx.asm"                ; Index management
     **** ****     > idx.asm
0001               * FILE......: idx.asm
0002               * Purpose...: Index management
0003               
0004               ***************************************************************
0005               *  Size of index page is 4K and allows indexing of 2048 lines
0006               *  per page.
0007               *
0008               *  Each index slot (word) has the format:
0009               *    +-----+-----+
0010               *    | MSB | LSB |
0011               *    +-----|-----+   LSB = Pointer offset 00-ff.
0012               *
0013               *  MSB = SAMS Page 40-ff
0014               *        Allows addressing of up to 256 4K SAMS pages (1024 KB)
0015               *
0016               *  LSB = Pointer offset in range 00-ff
0017               *
0018               *        To calculate pointer to line in Editor buffer:
0019               *        Pointer address = edb.top + (LSB * 16)
0020               *
0021               *        Note that the editor buffer itself resides in own 4K memory range
0022               *        starting at edb.top
0023               *
0024               *        All support routines must assure that length-prefixed string in
0025               *        Editor buffer always start on a 16 byte boundary for being
0026               *        accessible via index.
0027               *
0028               *
0029               * The index starts at SAMS page >20 and can allocate up to page >3f
0030               * for a total of 32 pages (128 K). With that up to 65536 lines of text
0031               * can be addressed.
0032               ***************************************************************
0033               
0034               
0035               ***************************************************************
0036               * idx.init
0037               * Initialize index
0038               ***************************************************************
0039               * bl @idx.init
0040               *--------------------------------------------------------------
0041               * INPUT
0042               * none
0043               *--------------------------------------------------------------
0044               * OUTPUT
0045               * none
0046               *--------------------------------------------------------------
0047               * Register usage
0048               * tmp0
0049               ********|*****|*********************|**************************
0050               idx.init:
0051 30D0 0649  14         dect  stack
0052 30D2 C64B  30         mov   r11,*stack            ; Save return address
0053 30D4 0649  14         dect  stack
0054 30D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;------------------------------------------------------
0056                       ; Initialize
0057                       ;------------------------------------------------------
0058 30D8 0204  20         li    tmp0,idx.top
     30DA B000     
0059 30DC C804  38         mov   tmp0,@edb.index.ptr   ; Set pointer to index in editor structure
     30DE A502     
0060               
0061 30E0 C120  34         mov   @tv.sams.b000,tmp0
     30E2 A206     
0062 30E4 C804  38         mov   tmp0,@idx.sams.page   ; Set current SAMS page
     30E6 A600     
0063 30E8 C804  38         mov   tmp0,@idx.sams.lopage ; Set 1st SAMS page
     30EA A602     
0064                       ;------------------------------------------------------
0065                       ; Clear all index pages
0066                       ;------------------------------------------------------
0067 30EC 0224  22         ai    tmp0,4                ; \ Let's clear all index pages
     30EE 0004     
0068 30F0 C804  38         mov   tmp0,@idx.sams.hipage ; /
     30F2 A604     
0069               
0070 30F4 06A0  32         bl    @_idx.sams.mapcolumn.on
     30F6 3112     
0071                                                   ; Index in continuous memory region
0072               
0073 30F8 06A0  32         bl    @film
     30FA 2244     
0074 30FC B000                   data idx.top,>00,idx.size * 5
     30FE 0000     
     3100 5000     
0075                                                   ; Clear index
0076               
0077 3102 06A0  32         bl    @_idx.sams.mapcolumn.off
     3104 3146     
0078                                                   ; Restore memory window layout
0079               
0080 3106 C820  54         mov   @idx.sams.lopage,@idx.sams.hipage
     3108 A602     
     310A A604     
0081                                                   ; Reset last SAMS page
0082                       ;------------------------------------------------------
0083                       ; Exit
0084                       ;------------------------------------------------------
0085               idx.init.exit:
0086 310C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0087 310E C2F9  30         mov   *stack+,r11           ; Pop r11
0088 3110 045B  20         b     *r11                  ; Return to caller
0089               
0090               
0091               ***************************************************************
0092               * bl @_idx.sams.mapcolumn.on
0093               *--------------------------------------------------------------
0094               * Register usage
0095               * tmp0, tmp1, tmp2
0096               *--------------------------------------------------------------
0097               *  Remarks
0098               *  Private, only to be called from inside idx module
0099               ********|*****|*********************|**************************
0100               _idx.sams.mapcolumn.on:
0101 3112 0649  14         dect  stack
0102 3114 C64B  30         mov   r11,*stack            ; Push return address
0103 3116 0649  14         dect  stack
0104 3118 C644  30         mov   tmp0,*stack           ; Push tmp0
0105 311A 0649  14         dect  stack
0106 311C C645  30         mov   tmp1,*stack           ; Push tmp1
0107 311E 0649  14         dect  stack
0108 3120 C646  30         mov   tmp2,*stack           ; Push tmp2
0109               *--------------------------------------------------------------
0110               * Map index pages into memory window  (b000-ffff)
0111               *--------------------------------------------------------------
0112 3122 C120  34         mov   @idx.sams.lopage,tmp0 ; Get lowest index page
     3124 A602     
0113 3126 0205  20         li    tmp1,idx.top
     3128 B000     
0114 312A 0206  20         li    tmp2,5                ; Set loop counter. all pages of index
     312C 0005     
0115                       ;-------------------------------------------------------
0116                       ; Loop over banks
0117                       ;-------------------------------------------------------
0118 312E 06A0  32 !       bl    @xsams.page.set       ; Set SAMS page
     3130 2584     
0119                                                   ; \ i  tmp0  = SAMS page number
0120                                                   ; / i  tmp1  = Memory address
0121               
0122 3132 0584  14         inc   tmp0                  ; Next SAMS index page
0123 3134 0225  22         ai    tmp1,>1000            ; Next memory region
     3136 1000     
0124 3138 0606  14         dec   tmp2                  ; Update loop counter
0125 313A 15F9  14         jgt   -!                    ; Next iteration
0126               *--------------------------------------------------------------
0127               * Exit
0128               *--------------------------------------------------------------
0129               _idx.sams.mapcolumn.on.exit:
0130 313C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0131 313E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0132 3140 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0133 3142 C2F9  30         mov   *stack+,r11           ; Pop return address
0134 3144 045B  20         b     *r11                  ; Return to caller
0135               
0136               
0137               ***************************************************************
0138               * _idx.sams.mapcolumn.off
0139               * Restore normal SAMS layout again (single index page)
0140               ***************************************************************
0141               * bl @_idx.sams.mapcolumn.off
0142               *--------------------------------------------------------------
0143               * Register usage
0144               * tmp0, tmp1, tmp2, tmp3
0145               *--------------------------------------------------------------
0146               *  Remarks
0147               *  Private, only to be called from inside idx module
0148               ********|*****|*********************|**************************
0149               _idx.sams.mapcolumn.off:
0150 3146 0649  14         dect  stack
0151 3148 C64B  30         mov   r11,*stack            ; Push return address
0152 314A 0649  14         dect  stack
0153 314C C644  30         mov   tmp0,*stack           ; Push tmp0
0154 314E 0649  14         dect  stack
0155 3150 C645  30         mov   tmp1,*stack           ; Push tmp1
0156 3152 0649  14         dect  stack
0157 3154 C646  30         mov   tmp2,*stack           ; Push tmp2
0158 3156 0649  14         dect  stack
0159 3158 C647  30         mov   tmp3,*stack           ; Push tmp3
0160               *--------------------------------------------------------------
0161               * Map index pages into memory window  (b000-????)
0162               *--------------------------------------------------------------
0163 315A 0205  20         li    tmp1,idx.top
     315C B000     
0164 315E 0206  20         li    tmp2,5                ; Always 5 pages
     3160 0005     
0165 3162 0207  20         li    tmp3,tv.sams.b000     ; Pointer to fist SAMS page
     3164 A206     
0166                       ;-------------------------------------------------------
0167                       ; Loop over table in memory (@tv.sams.b000:@tv.sams.f000)
0168                       ;-------------------------------------------------------
0169 3166 C137  30 !       mov   *tmp3+,tmp0           ; Get SAMS page
0170               
0171 3168 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     316A 2584     
0172                                                   ; \ i  tmp0  = SAMS page number
0173                                                   ; / i  tmp1  = Memory address
0174               
0175 316C 0225  22         ai    tmp1,>1000            ; Next memory region
     316E 1000     
0176 3170 0606  14         dec   tmp2                  ; Update loop counter
0177 3172 15F9  14         jgt   -!                    ; Next iteration
0178               *--------------------------------------------------------------
0179               * Exit
0180               *--------------------------------------------------------------
0181               _idx.sams.mapcolumn.off.exit:
0182 3174 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0183 3176 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0184 3178 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0185 317A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0186 317C C2F9  30         mov   *stack+,r11           ; Pop return address
0187 317E 045B  20         b     *r11                  ; Return to caller
0188               
0189               
0190               
0191               ***************************************************************
0192               * _idx.samspage.get
0193               * Get SAMS page for index
0194               ***************************************************************
0195               * bl @_idx.samspage.get
0196               *--------------------------------------------------------------
0197               * INPUT
0198               * tmp0 = Line number
0199               *--------------------------------------------------------------
0200               * OUTPUT
0201               * @outparm1 = Offset for index entry in index SAMS page
0202               *--------------------------------------------------------------
0203               * Register usage
0204               * tmp0, tmp1, tmp2
0205               *--------------------------------------------------------------
0206               *  Remarks
0207               *  Private, only to be called from inside idx module.
0208               *  Activates SAMS page containing required index slot entry.
0209               ********|*****|*********************|**************************
0210               _idx.samspage.get:
0211 3180 0649  14         dect  stack
0212 3182 C64B  30         mov   r11,*stack            ; Save return address
0213 3184 0649  14         dect  stack
0214 3186 C644  30         mov   tmp0,*stack           ; Push tmp0
0215 3188 0649  14         dect  stack
0216 318A C645  30         mov   tmp1,*stack           ; Push tmp1
0217 318C 0649  14         dect  stack
0218 318E C646  30         mov   tmp2,*stack           ; Push tmp2
0219                       ;------------------------------------------------------
0220                       ; Determine SAMS index page
0221                       ;------------------------------------------------------
0222 3190 C184  18         mov   tmp0,tmp2             ; Line number
0223 3192 04C5  14         clr   tmp1                  ; MSW (tmp1) = 0 / LSW (tmp2) = Line number
0224 3194 0204  20         li    tmp0,2048             ; Index entries in 4K SAMS page
     3196 0800     
0225               
0226 3198 3D44 128         div   tmp0,tmp1             ; \ Divide 32 bit value by 2048
0227                                                   ; | tmp1 = quotient  (SAMS page offset)
0228                                                   ; / tmp2 = remainder
0229               
0230 319A 0A16  18         sla   tmp2,1                ; line number * 2
0231 319C C806  38         mov   tmp2,@outparm1        ; Offset index entry
     319E A016     
0232               
0233 31A0 A160  34         a     @idx.sams.lopage,tmp1 ; Add SAMS page base
     31A2 A602     
0234 31A4 8805  34         c     tmp1,@idx.sams.page   ; Page already active?
     31A6 A600     
0235               
0236 31A8 130E  14         jeq   _idx.samspage.get.exit
0237                                                   ; Yes, so exit
0238                       ;------------------------------------------------------
0239                       ; Activate SAMS index page
0240                       ;------------------------------------------------------
0241 31AA C805  38         mov   tmp1,@idx.sams.page   ; Set current SAMS page
     31AC A600     
0242 31AE C805  38         mov   tmp1,@tv.sams.b000    ; Also keep SAMS window synced in Stevie
     31B0 A206     
0243 31B2 C105  18         mov   tmp1,tmp0             ; Destination SAMS page
0244               
0245 31B4 0205  20         li    tmp1,>b000            ; Memory window for index page
     31B6 B000     
0246               
0247 31B8 06A0  32         bl    @xsams.page.set       ; Switch to SAMS page
     31BA 2584     
0248                                                   ; \ i  tmp0 = SAMS page
0249                                                   ; / i  tmp1 = Memory address
0250                       ;------------------------------------------------------
0251                       ; Check if new highest SAMS index page
0252                       ;------------------------------------------------------
0253 31BC 8804  34         c     tmp0,@idx.sams.hipage ; New highest page?
     31BE A604     
0254 31C0 1202  14         jle   _idx.samspage.get.exit
0255                                                   ; No, exit
0256 31C2 C804  38         mov   tmp0,@idx.sams.hipage ; Yes, set highest SAMS index page
     31C4 A604     
0257                       ;------------------------------------------------------
0258                       ; Exit
0259                       ;------------------------------------------------------
0260               _idx.samspage.get.exit:
0261 31C6 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0262 31C8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0263 31CA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0264 31CC C2F9  30         mov   *stack+,r11           ; Pop r11
0265 31CE 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0011                       copy  "edb.asm"                ; Editor Buffer
     **** ****     > edb.asm
0001               * FILE......: edb.asm
0002               * Purpose...: Stevie Editor - Editor Buffer module
0003               
0004               ***************************************************************
0005               * edb.init
0006               * Initialize Editor buffer
0007               ***************************************************************
0008               * bl @edb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               edb.init:
0022 31D0 0649  14         dect  stack
0023 31D2 C64B  30         mov   r11,*stack            ; Save return address
0024 31D4 0649  14         dect  stack
0025 31D6 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 31D8 0204  20         li    tmp0,edb.top          ; \
     31DA C000     
0030 31DC C804  38         mov   tmp0,@edb.top.ptr     ; / Set pointer to top of editor buffer
     31DE A500     
0031 31E0 C804  38         mov   tmp0,@edb.next_free.ptr
     31E2 A508     
0032                                                   ; Set pointer to next free line
0033               
0034 31E4 0720  34         seto  @edb.insmode          ; Turn on insert mode for this editor buffer
     31E6 A50A     
0035               
0036 31E8 0204  20         li    tmp0,1
     31EA 0001     
0037 31EC C804  38         mov   tmp0,@edb.lines       ; Lines=1
     31EE A504     
0038               
0039 31F0 0720  34         seto  @edb.block.m1         ; Reset block start line
     31F2 A50E     
0040 31F4 0720  34         seto  @edb.block.m2         ; Reset block end line
     31F6 A510     
0041               
0042 31F8 0204  20         li    tmp0,txt.newfile      ; "New file"
     31FA 38B0     
0043 31FC C804  38         mov   tmp0,@edb.filename.ptr
     31FE A514     
0044               
0045 3200 04E0  34         clr   @fh.kilobytes         ; \ Clear kilobytes processed
     3202 A440     
0046 3204 04E0  34         clr   @fh.kilobytes.prev    ; /
     3206 A45C     
0047               
0048 3208 0204  20         li    tmp0,txt.filetype.none
     320A 3A01     
0049 320C C804  38         mov   tmp0,@edb.filetype.ptr
     320E A516     
0050               
0051 3210 0720  34         seto  @edb.autoinsert       ; Auto-Insert on ENTER on by default
     3212 A50C     
0052               
0053               edb.init.exit:
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057 3214 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 3216 C2F9  30         mov   *stack+,r11           ; Pop r11
0059 3218 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0012                       copy  "cmdb.asm"               ; Command buffer
     **** ****     > cmdb.asm
0001               * FILE......: cmdb.asm
0002               * Purpose...: Stevie Editor - Command Buffer module
0003               
0004               ***************************************************************
0005               * cmdb.init
0006               * Initialize Command Buffer
0007               ***************************************************************
0008               * bl @cmdb.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               cmdb.init:
0022 321A 0649  14         dect  stack
0023 321C C64B  30         mov   r11,*stack            ; Save return address
0024 321E 0649  14         dect  stack
0025 3220 C644  30         mov   tmp0,*stack           ; Push tmp0
0026                       ;------------------------------------------------------
0027                       ; Initialize
0028                       ;------------------------------------------------------
0029 3222 0204  20         li    tmp0,cmdb.top         ; \ Set pointer to command buffer
     3224 E000     
0030 3226 C804  38         mov   tmp0,@cmdb.top.ptr    ; /
     3228 A700     
0031               
0032 322A 04E0  34         clr   @cmdb.visible         ; Hide command buffer
     322C A702     
0033 322E 0204  20         li    tmp0,4
     3230 0004     
0034 3232 C804  38         mov   tmp0,@cmdb.scrrows    ; Set current command buffer size
     3234 A706     
0035 3236 C804  38         mov   tmp0,@cmdb.default    ; Set default command buffer size
     3238 A708     
0036               
0037 323A 04E0  34         clr   @cmdb.lines           ; Number of lines in cmdb buffer
     323C A716     
0038 323E 04E0  34         clr   @cmdb.dirty           ; Command buffer is clean
     3240 A718     
0039 3242 04E0  34         clr   @cmdb.action.ptr      ; Reset action to execute pointer
     3244 A728     
0040                       ;------------------------------------------------------
0041                       ; Clear command buffer
0042                       ;------------------------------------------------------
0043 3246 06A0  32         bl    @film
     3248 2244     
0044 324A E000             data  cmdb.top,>00,cmdb.size
     324C 0000     
     324E 1000     
0045                                                   ; Clear it all the way
0046               cmdb.init.exit:
0047                       ;------------------------------------------------------
0048                       ; Exit
0049                       ;------------------------------------------------------
0050 3250 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 3252 C2F9  30         mov   *stack+,r11           ; Pop r11
0052 3254 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0013                       copy  "errpane.asm"            ; Error pane
     **** ****     > errpane.asm
0001               * FILE......: errpane.asm
0002               * Purpose...: Error pane utilities
0003               
0004               ***************************************************************
0005               * errpane.init
0006               * Initialize error pane
0007               ***************************************************************
0008               * bl @errpane.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1,tmp2
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               errpane.init:
0022 3256 0649  14         dect  stack
0023 3258 C64B  30         mov   r11,*stack            ; Save return address
0024 325A 0649  14         dect  stack
0025 325C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 325E 0649  14         dect  stack
0027 3260 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3262 0649  14         dect  stack
0029 3264 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3266 04E0  34         clr   @tv.error.visible     ; Set to hidden
     3268 A228     
0034 326A 0204  20         li    tmp0,3
     326C 0003     
0035 326E C804  38         mov   tmp0,@tv.error.rows   ; Number of rows in error pane
     3270 A22A     
0036               
0037 3272 06A0  32         bl    @film
     3274 2244     
0038 3276 A230                   data tv.error.msg,0,160
     3278 0000     
     327A 00A0     
0039                       ;-------------------------------------------------------
0040                       ; Exit
0041                       ;-------------------------------------------------------
0042               errpane.exit:
0043 327C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0044 327E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0045 3280 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0046 3282 C2F9  30         mov   *stack+,r11           ; Pop R11
0047 3284 045B  20         b     *r11                  ; Return to caller
0048               
                   < ram.resident.asm
0014                       copy  "tv.asm"                 ; Main editor configuration
     **** ****     > tv.asm
0001               * FILE......: tv.asm
0002               * Purpose...: Initialize editor
0003               
0004               ***************************************************************
0005               * tv.init
0006               * Initialize editor settings
0007               ***************************************************************
0008               * bl @tv.init
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               *--------------------------------------------------------------
0019               * Notes
0020               ***************************************************************
0021               tv.init:
0022 3286 0649  14         dect  stack
0023 3288 C64B  30         mov   r11,*stack            ; Save return address
0024 328A 0649  14         dect  stack
0025 328C C644  30         mov   tmp0,*stack           ; Push tmp0
0026 328E 0649  14         dect  stack
0027 3290 C645  30         mov   tmp1,*stack           ; Push tmp1
0028 3292 0649  14         dect  stack
0029 3294 C646  30         mov   tmp2,*stack           ; Push tmp2
0030                       ;------------------------------------------------------
0031                       ; Initialize
0032                       ;------------------------------------------------------
0033 3296 0204  20         li    tmp0,1                ; \ Set default color scheme
     3298 0001     
0034 329A C804  38         mov   tmp0,@tv.colorscheme  ; /
     329C A212     
0035               
0036 329E 04E0  34         clr   @tv.task.oneshot      ; Reset pointer to oneshot task
     32A0 A224     
0037 32A2 E0A0  34         soc   @wbit10,config        ; Assume ALPHA LOCK is down
     32A4 200C     
0038               
0039 32A6 0204  20         li    tmp0,fj.bottom
     32A8 B000     
0040 32AA C804  38         mov   tmp0,@tv.fj.stackpnt  ; Set pointer to farjump return stack
     32AC A226     
0041                       ;------------------------------------------------------
0042                       ; Set defaults
0043                       ;------------------------------------------------------
0044 32AE 06A0  32         bl    @cpym2m
     32B0 24E8     
0045 32B2 3AD6                   data def.printer.fname,tv.printer.fname,7
     32B4 DE00     
     32B6 0007     
0046               
0047 32B8 06A0  32         bl    @cpym2m
     32BA 24E8     
0048 32BC 3ADD                   data def.clip.fname,tv.clip.fname,10
     32BE DE50     
     32C0 000A     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               tv.init.exit:
0053 32C2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0054 32C4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0055 32C6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0056 32C8 C2F9  30         mov   *stack+,r11           ; Pop R11
0057 32CA 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0015                       copy  "tv.quit.asm"            ; Exit Stevie and return to monitor
     **** ****     > tv.quit.asm
0001               * FILE......: tv.quit.asm
0002               * Purpose...: Quit Stevie and return to monitor
0003               
0004               ***************************************************************
0005               * tv.quit
0006               * Quit stevie and return to monitor
0007               ***************************************************************
0008               * b    @tv.quit
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.quit:
0020                       ;-------------------------------------------------------
0021                       ; Reset/lock F18a
0022                       ;-------------------------------------------------------
0023 32CC 06A0  32         bl    @f18rst               ; Reset and lock the F18A
     32CE 27B4     
0024                       ;-------------------------------------------------------
0025                       ; Load legacy SAMS page layout and exit to monitor
0026                       ;-------------------------------------------------------
0027 32D0 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     32D2 2F98     
0028 32D4 600E                   data bank7.rom        ; | i  p0 = bank address
0029 32D6 7FC0                   data bankx.vectab     ; | i  p1 = Vector with target address
0030 32D8 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0031               
0032                       ; We never return here. We call @mem.sams.set.legacy (vector1) and
0033                       ; in there activate bank 0 in cartridge space and return to monitor.
0034                       ;
0035                       ; Reason for doing so is that @tv.quit is located in
0036                       ; low memory expansion. So switching SAMS banks or turning off the SAMS
0037                       ; mapper results in invalid OPCODE's because the program just isn't
0038                       ; there in low memory expansion anymore.
                   < ram.resident.asm
0016                       copy  "tv.reset.asm"           ; Reset editor (clear buffers)
     **** ****     > tv.reset.asm
0001               * FILE......: tv.reset.asm
0002               * Purpose...: Reset editor (clear buffers)
0003               
0004               
0005               ***************************************************************
0006               * tv.reset
0007               * Reset editor (clear buffers)
0008               ***************************************************************
0009               * bl @tv.reset
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * r11
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               tv.reset:
0023 32DA 0649  14         dect  stack
0024 32DC C64B  30         mov   r11,*stack            ; Save return address
0025                       ;------------------------------------------------------
0026                       ; Reset editor
0027                       ;------------------------------------------------------
0028 32DE 06A0  32         bl    @cmdb.init            ; Initialize command buffer
     32E0 321A     
0029 32E2 06A0  32         bl    @edb.init             ; Initialize editor buffer
     32E4 31D0     
0030 32E6 06A0  32         bl    @idx.init             ; Initialize index
     32E8 30D0     
0031 32EA 06A0  32         bl    @fb.init              ; Initialize framebuffer
     32EC 3028     
0032 32EE 06A0  32         bl    @errpane.init         ; Initialize error pane
     32F0 3256     
0033                       ;------------------------------------------------------
0034                       ; Remove markers and shortcuts
0035                       ;------------------------------------------------------
0036 32F2 06A0  32         bl    @hchar
     32F4 27E0     
0037 32F6 0034                   byte 0,52,32,18       ; Remove markers
     32F8 2012     
0038 32FA 1D00                   byte pane.botrow,0,32,51
     32FC 2033     
0039 32FE FFFF                   data eol              ; Remove block shortcuts
0040                       ;-------------------------------------------------------
0041                       ; Exit
0042                       ;-------------------------------------------------------
0043               tv.reset.exit:
0044 3300 C2F9  30         mov   *stack+,r11           ; Pop R11
0045 3302 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0017                       copy  "tv.unpack.uint16.asm"   ; Unpack 16bit unsigned integer to string
     **** ****     > tv.unpack.uint16.asm
0001               * FILE......: tv.unpack.uint16.asm
0002               * Purpose...: Unpack 16bit unsigned integer to string
0003               
0004               ***************************************************************
0005               * tv.unpack.uint16
0006               * Unpack 16bit unsigned integer to string
0007               ***************************************************************
0008               * bl @tv.unpack.uint16
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = 16bit unsigned integer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @unpacked.string = Length-prefixed string with unpacked uint16
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ***************************************************************
0019               tv.unpack.uint16:
0020 3304 0649  14         dect  stack
0021 3306 C64B  30         mov   r11,*stack            ; Save return address
0022 3308 0649  14         dect  stack
0023 330A C644  30         mov   tmp0,*stack           ; Push tmp0
0024                       ;------------------------------------------------------
0025                       ; Initialize
0026                       ;------------------------------------------------------
0027 330C 06A0  32         bl    @mknum                ; Convert unsigned number to string
     330E 29B4     
0028 3310 A006                   data parm1            ; \ i p0  = Pointer to 16bit unsigned number
0029 3312 A100                   data rambuf           ; | i p1  = Pointer to 5 byte string buffer
0030 3314 30                     byte 48               ; | i p2H = Offset for ASCII digit 0
0031 3315   20                   byte 32               ; / i p2L = Char for replacing leading 0's
0032               
0033 3316 0204  20         li    tmp0,unpacked.string
     3318 A02C     
0034 331A 04F4  30         clr   *tmp0+                ; Clear string 01
0035 331C 04F4  30         clr   *tmp0+                ; Clear string 23
0036 331E 04F4  30         clr   *tmp0+                ; Clear string 34
0037               
0038 3320 06A0  32         bl    @trimnum              ; Trim unsigned number string
     3322 2A0C     
0039 3324 A100                   data rambuf           ; \ i p0  = Pointer to 5 byte string buffer
0040 3326 A02C                   data unpacked.string  ; | i p1  = Pointer to output buffer
0041 3328 0020                   data 32               ; / i p2  = Padding char to match against
0042                       ;-------------------------------------------------------
0043                       ; Exit
0044                       ;-------------------------------------------------------
0045               tv.unpack.uint16.exit:
0046 332A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0047 332C C2F9  30         mov   *stack+,r11           ; Pop r11
0048 332E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0018                       copy  "tv.pad.string.asm"      ; Pad string to specified length
     **** ****     > tv.pad.string.asm
0001               * FILE......: tv.pad.string.asm
0002               * Purpose...: pad string to specified length
0003               
0004               
0005               ***************************************************************
0006               * tv.pad.string
0007               * pad string to specified length
0008               ***************************************************************
0009               * bl @tv.pad.string
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @parm1 = Pointer to length-prefixed string
0013               * @parm2 = Requested length
0014               * @parm3 = Fill character
0015               * @parm4 = Pointer to string buffer
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * @outparm1 = Pointer to padded string
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * none
0022               ***************************************************************
0023               tv.pad.string:
0024 3330 0649  14         dect  stack
0025 3332 C64B  30         mov   r11,*stack            ; Push return address
0026 3334 0649  14         dect  stack
0027 3336 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 3338 0649  14         dect  stack
0029 333A C645  30         mov   tmp1,*stack           ; Push tmp1
0030 333C 0649  14         dect  stack
0031 333E C646  30         mov   tmp2,*stack           ; Push tmp2
0032 3340 0649  14         dect  stack
0033 3342 C647  30         mov   tmp3,*stack           ; Push tmp3
0034                       ;------------------------------------------------------
0035                       ; Asserts
0036                       ;------------------------------------------------------
0037 3344 C120  34         mov   @parm1,tmp0           ; \ Get string prefix (length-byte)
     3346 A006     
0038 3348 D194  26         movb  *tmp0,tmp2            ; /
0039 334A 0986  32         srl   tmp2,8                ; Right align
0040 334C C1C6  18         mov   tmp2,tmp3             ; Make copy of length-byte for later use
0041               
0042 334E 8806  34         c     tmp2,@parm2           ; String length > requested length?
     3350 A008     
0043 3352 1520  14         jgt   tv.pad.string.panic   ; Yes, crash
0044                       ;------------------------------------------------------
0045                       ; Copy string to buffer
0046                       ;------------------------------------------------------
0047 3354 C120  34         mov   @parm1,tmp0           ; Get source address
     3356 A006     
0048 3358 C160  34         mov   @parm4,tmp1           ; Get destination address
     335A A00C     
0049 335C 0586  14         inc   tmp2                  ; Also include length-byte in copy
0050               
0051 335E 0649  14         dect  stack
0052 3360 C647  30         mov   tmp3,*stack           ; Push tmp3 (get overwritten by xpym2m)
0053               
0054 3362 06A0  32         bl    @xpym2m               ; Copy length-prefix string to buffer
     3364 24EE     
0055                                                   ; \ i  tmp0 = Source CPU memory address
0056                                                   ; | i  tmp1 = Target CPU memory address
0057                                                   ; / i  tmp2 = Number of bytes to copy
0058               
0059 3366 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0060                       ;------------------------------------------------------
0061                       ; Set length of new string
0062                       ;------------------------------------------------------
0063 3368 C120  34         mov   @parm2,tmp0           ; Get requested length
     336A A008     
0064 336C 0A84  32         sla   tmp0,8                ; Left align
0065 336E C160  34         mov   @parm4,tmp1           ; Get pointer to buffer
     3370 A00C     
0066 3372 D544  30         movb  tmp0,*tmp1            ; Set new length of string
0067 3374 A147  18         a     tmp3,tmp1             ; \ Skip to end of string
0068 3376 0585  14         inc   tmp1                  ; /
0069                       ;------------------------------------------------------
0070                       ; Prepare for padding string
0071                       ;------------------------------------------------------
0072 3378 C1A0  34         mov   @parm2,tmp2           ; \ Get number of bytes to fill
     337A A008     
0073 337C 6187  18         s     tmp3,tmp2             ; |
0074 337E 0586  14         inc   tmp2                  ; /
0075               
0076 3380 C120  34         mov   @parm3,tmp0           ; Get byte to padd
     3382 A00A     
0077 3384 0A84  32         sla   tmp0,8                ; Left align
0078                       ;------------------------------------------------------
0079                       ; Right-pad string to destination length
0080                       ;------------------------------------------------------
0081               tv.pad.string.loop:
0082 3386 DD44  32         movb  tmp0,*tmp1+           ; Pad character
0083 3388 0606  14         dec   tmp2                  ; Update loop counter
0084 338A 15FD  14         jgt   tv.pad.string.loop    ; Next character
0085               
0086 338C C820  54         mov   @parm4,@outparm1      ; Set pointer to padded string
     338E A00C     
     3390 A016     
0087 3392 1004  14         jmp   tv.pad.string.exit    ; Exit
0088                       ;-----------------------------------------------------------------------
0089                       ; CPU crash
0090                       ;-----------------------------------------------------------------------
0091               tv.pad.string.panic:
0092 3394 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3396 FFCE     
0093 3398 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     339A 2026     
0094                       ;------------------------------------------------------
0095                       ; Exit
0096                       ;------------------------------------------------------
0097               tv.pad.string.exit:
0098 339C C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0099 339E C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0100 33A0 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0101 33A2 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0102 33A4 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 33A6 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0019                       ;-----------------------------------------------------------------------
0020                       ; Logic for Index management
0021                       ;-----------------------------------------------------------------------
0022                       copy  "idx.update.asm"         ; Index management - Update entry
     **** ****     > idx.update.asm
0001               * FILE......: idx.update.asm
0002               * Purpose...: Update index entry
0003               
0004               ***************************************************************
0005               * idx.entry.update
0006               * Update index entry - Each entry corresponds to a line
0007               ***************************************************************
0008               * bl @idx.entry.update
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1    = Line number in editor buffer
0012               * @parm2    = Pointer to line in editor buffer
0013               * @parm3    = SAMS page
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Pointer to updated index entry
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               ********|*****|*********************|**************************
0021               idx.entry.update:
0022 33A8 0649  14         dect  stack
0023 33AA C64B  30         mov   r11,*stack            ; Save return address
0024 33AC 0649  14         dect  stack
0025 33AE C644  30         mov   tmp0,*stack           ; Push tmp0
0026 33B0 0649  14         dect  stack
0027 33B2 C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;------------------------------------------------------
0029                       ; Get parameters
0030                       ;------------------------------------------------------
0031 33B4 C120  34         mov   @parm1,tmp0           ; Get line number
     33B6 A006     
0032 33B8 C160  34         mov   @parm2,tmp1           ; Get pointer
     33BA A008     
0033 33BC 1312  14         jeq   idx.entry.update.clear
0034                                                   ; Special handling for "null"-pointer
0035                       ;------------------------------------------------------
0036                       ; Calculate LSB value index slot (pointer offset)
0037                       ;------------------------------------------------------
0038 33BE 0245  22         andi  tmp1,>0fff            ; Remove high-nibble from pointer
     33C0 0FFF     
0039 33C2 0945  24         srl   tmp1,4                ; Get offset (divide by 16)
0040                       ;------------------------------------------------------
0041                       ; Calculate MSB value index slot (SAMS page editor buffer)
0042                       ;------------------------------------------------------
0043 33C4 06E0  34         swpb  @parm3
     33C6 A00A     
0044 33C8 D160  34         movb  @parm3,tmp1           ; Put SAMS page in MSB
     33CA A00A     
0045 33CC 06E0  34         swpb  @parm3                ; \ Restore original order again,
     33CE A00A     
0046                                                   ; / important for messing up caller parm3!
0047                       ;------------------------------------------------------
0048                       ; Update index slot
0049                       ;------------------------------------------------------
0050               idx.entry.update.save:
0051 33D0 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33D2 3180     
0052                                                   ; \ i  tmp0     = Line number
0053                                                   ; / o  outparm1 = Slot offset in SAMS page
0054               
0055 33D4 C120  34         mov   @outparm1,tmp0        ; \ Update index slot
     33D6 A016     
0056 33D8 C905  38         mov   tmp1,@idx.top(tmp0)   ; /
     33DA B000     
0057 33DC C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33DE A016     
0058 33E0 1008  14         jmp   idx.entry.update.exit
0059                       ;------------------------------------------------------
0060                       ; Special handling for "null"-pointer
0061                       ;------------------------------------------------------
0062               idx.entry.update.clear:
0063 33E2 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     33E4 3180     
0064                                                   ; \ i  tmp0     = Line number
0065                                                   ; / o  outparm1 = Slot offset in SAMS page
0066               
0067 33E6 C120  34         mov   @outparm1,tmp0        ; \ Clear index slot
     33E8 A016     
0068 33EA 04E4  34         clr   @idx.top(tmp0)        ; /
     33EC B000     
0069 33EE C804  38         mov   tmp0,@outparm1        ; Pointer to updated index entry
     33F0 A016     
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               idx.entry.update.exit:
0074 33F2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 33F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 33F6 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 33F8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0023                       copy  "idx.pointer.asm"        ; Index management - Get pointer to line
     **** ****     > idx.pointer.asm
0001               * FILE......: idx.pointer.asm
0002               * Purpose...: Get pointer to line in editor buffer
0003               
0004               ***************************************************************
0005               * idx.pointer.get
0006               * Get pointer to editor buffer line content
0007               ***************************************************************
0008               * bl @idx.pointer.get
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Pointer to editor buffer line content
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               idx.pointer.get:
0021 33FA 0649  14         dect  stack
0022 33FC C64B  30         mov   r11,*stack            ; Save return address
0023 33FE 0649  14         dect  stack
0024 3400 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3402 0649  14         dect  stack
0026 3404 C645  30         mov   tmp1,*stack           ; Push tmp1
0027 3406 0649  14         dect  stack
0028 3408 C646  30         mov   tmp2,*stack           ; Push tmp2
0029                       ;------------------------------------------------------
0030                       ; Get slot entry
0031                       ;------------------------------------------------------
0032 340A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     340C A006     
0033               
0034 340E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page with index slot
     3410 3180     
0035                                                   ; \ i  tmp0     = Line number
0036                                                   ; / o  outparm1 = Slot offset in SAMS page
0037               
0038 3412 C120  34         mov   @outparm1,tmp0        ; \ Get slot entry
     3414 A016     
0039 3416 C164  34         mov   @idx.top(tmp0),tmp1   ; /
     3418 B000     
0040               
0041 341A 130C  14         jeq   idx.pointer.get.parm.null
0042                                                   ; Skip if index slot empty
0043                       ;------------------------------------------------------
0044                       ; Calculate MSB (SAMS page)
0045                       ;------------------------------------------------------
0046 341C C185  18         mov   tmp1,tmp2             ; \
0047 341E 0986  32         srl   tmp2,8                ; / Right align SAMS page
0048                       ;------------------------------------------------------
0049                       ; Calculate LSB (pointer address)
0050                       ;------------------------------------------------------
0051 3420 0245  22         andi  tmp1,>00ff            ; Get rid of MSB (SAMS page)
     3422 00FF     
0052 3424 0A45  24         sla   tmp1,4                ; Multiply with 16
0053 3426 0225  22         ai    tmp1,edb.top          ; Add editor buffer base address
     3428 C000     
0054                       ;------------------------------------------------------
0055                       ; Return parameters
0056                       ;------------------------------------------------------
0057               idx.pointer.get.parm:
0058 342A C805  38         mov   tmp1,@outparm1        ; Index slot -> Pointer
     342C A016     
0059 342E C806  38         mov   tmp2,@outparm2        ; Index slot -> SAMS page
     3430 A018     
0060 3432 1004  14         jmp   idx.pointer.get.exit
0061                       ;------------------------------------------------------
0062                       ; Special handling for "null"-pointer
0063                       ;------------------------------------------------------
0064               idx.pointer.get.parm.null:
0065 3434 04E0  34         clr   @outparm1
     3436 A016     
0066 3438 04E0  34         clr   @outparm2
     343A A018     
0067                       ;------------------------------------------------------
0068                       ; Exit
0069                       ;------------------------------------------------------
0070               idx.pointer.get.exit:
0071 343C C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0072 343E C179  30         mov   *stack+,tmp1          ; Pop tmp1
0073 3440 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0074 3442 C2F9  30         mov   *stack+,r11           ; Pop r11
0075 3444 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0024                       copy  "idx.delete.asm"         ; Index management - delete slot
     **** ****     > idx.delete.asm
0001               * FILE......: idx_delete.asm
0002               * Purpose...: Delete index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.delete.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.delete.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_delete
0012               ********|*****|*********************|**************************
0013               _idx.entry.delete.reorg:
0014                       ;------------------------------------------------------
0015                       ; Reorganize index entries
0016                       ;------------------------------------------------------
0017 3446 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3448 B000     
0018 344A C144  18         mov   tmp0,tmp1             ; a = current slot
0019 344C 05C5  14         inct  tmp1                  ; b = current slot + 2
0020                       ;------------------------------------------------------
0021                       ; Loop forward until end of index
0022                       ;------------------------------------------------------
0023               _idx.entry.delete.reorg.loop:
0024 344E CD35  46         mov   *tmp1+,*tmp0+         ; Copy b -> a
0025 3450 0606  14         dec   tmp2                  ; tmp2--
0026 3452 16FD  14         jne   _idx.entry.delete.reorg.loop
0027                                                   ; Loop unless completed
0028 3454 045B  20         b     *r11                  ; Return to caller
0029               
0030               
0031               
0032               ***************************************************************
0033               * idx.entry.delete
0034               * Delete index entry - Close gap created by delete
0035               ***************************************************************
0036               * bl @idx.entry.delete
0037               *--------------------------------------------------------------
0038               * INPUT
0039               * @parm1    = Line number in editor buffer to delete
0040               * @parm2    = Line number of last line to check for reorg
0041               *--------------------------------------------------------------
0042               * Register usage
0043               * tmp0,tmp1,tmp2,tmp3
0044               ********|*****|*********************|**************************
0045               idx.entry.delete:
0046 3456 0649  14         dect  stack
0047 3458 C64B  30         mov   r11,*stack            ; Save return address
0048 345A 0649  14         dect  stack
0049 345C C644  30         mov   tmp0,*stack           ; Push tmp0
0050 345E 0649  14         dect  stack
0051 3460 C645  30         mov   tmp1,*stack           ; Push tmp1
0052 3462 0649  14         dect  stack
0053 3464 C646  30         mov   tmp2,*stack           ; Push tmp2
0054 3466 0649  14         dect  stack
0055 3468 C647  30         mov   tmp3,*stack           ; Push tmp3
0056                       ;------------------------------------------------------
0057                       ; Get index slot
0058                       ;------------------------------------------------------
0059 346A C120  34         mov   @parm1,tmp0           ; Line number in editor buffer
     346C A006     
0060               
0061 346E 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     3470 3180     
0062                                                   ; \ i  tmp0     = Line number
0063                                                   ; / o  outparm1 = Slot offset in SAMS page
0064               
0065 3472 C120  34         mov   @outparm1,tmp0        ; Index offset
     3474 A016     
0066                       ;------------------------------------------------------
0067                       ; Prepare for index reorg
0068                       ;------------------------------------------------------
0069 3476 C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     3478 A008     
0070 347A 1303  14         jeq   idx.entry.delete.lastline
0071                                                   ; Exit early if last line = 0
0072               
0073 347C 61A0  34         s     @parm1,tmp2           ; Calculate loop
     347E A006     
0074 3480 1504  14         jgt   idx.entry.delete.reorg
0075                                                   ; Reorganize if loop counter > 0
0076                       ;------------------------------------------------------
0077                       ; Special treatment for last line
0078                       ;------------------------------------------------------
0079               idx.entry.delete.lastline:
0080 3482 0224  22         ai    tmp0,idx.top          ; Add index base to offset
     3484 B000     
0081 3486 04D4  26         clr   *tmp0                 ; Clear index entry
0082 3488 1012  14         jmp   idx.entry.delete.exit ; Exit early
0083                       ;------------------------------------------------------
0084                       ; Reorganize index entries
0085                       ;------------------------------------------------------
0086               idx.entry.delete.reorg:
0087 348A C1E0  34         mov   @parm2,tmp3           ; Get last line to reorganize
     348C A008     
0088 348E 0287  22         ci    tmp3,2048
     3490 0800     
0089 3492 120A  14         jle   idx.entry.delete.reorg.simple
0090                                                   ; Do simple reorg only if single
0091                                                   ; SAMS index page, otherwise complex reorg.
0092                       ;------------------------------------------------------
0093                       ; Complex index reorganization (multiple SAMS pages)
0094                       ;------------------------------------------------------
0095               idx.entry.delete.reorg.complex:
0096 3494 06A0  32         bl    @_idx.sams.mapcolumn.on
     3496 3112     
0097                                                   ; Index in continuous memory region
0098               
0099                       ;-------------------------------------------------------
0100                       ; Recalculate index offset in continuous memory region
0101                       ;-------------------------------------------------------
0102 3498 C120  34         mov   @parm1,tmp0           ; Restore line number
     349A A006     
0103 349C 0A14  18         sla   tmp0,1                ; Calculate offset
0104               
0105 349E 06A0  32         bl    @_idx.entry.delete.reorg
     34A0 3446     
0106                                                   ; Reorganize index
0107                                                   ; \ i  tmp0 = Index offset
0108                                                   ; / i  tmp2 = Loop count
0109               
0110 34A2 06A0  32         bl    @_idx.sams.mapcolumn.off
     34A4 3146     
0111                                                   ; Restore memory window layout
0112               
0113 34A6 1002  14         jmp   !
0114                       ;------------------------------------------------------
0115                       ; Simple index reorganization
0116                       ;------------------------------------------------------
0117               idx.entry.delete.reorg.simple:
0118 34A8 06A0  32         bl    @_idx.entry.delete.reorg
     34AA 3446     
0119                       ;------------------------------------------------------
0120                       ; Clear index entry (base + offset already set)
0121                       ;------------------------------------------------------
0122 34AC 04D4  26 !       clr   *tmp0                 ; Clear index entry
0123                       ;------------------------------------------------------
0124                       ; Exit
0125                       ;------------------------------------------------------
0126               idx.entry.delete.exit:
0127 34AE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0128 34B0 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0129 34B2 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0130 34B4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0131 34B6 C2F9  30         mov   *stack+,r11           ; Pop r11
0132 34B8 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0025                       copy  "idx.insert.asm"         ; Index management - insert slot
     **** ****     > idx.insert.asm
0001               * FILE......: idx.insert.asm
0002               * Purpose...: Insert index entry
0003               
0004               ***************************************************************
0005               * _idx.entry.insert.reorg
0006               * Reorganize index slot entries
0007               ***************************************************************
0008               * bl @_idx.entry.insert.reorg
0009               *--------------------------------------------------------------
0010               *  Remarks
0011               *  Private, only to be called from idx_entry_insert
0012               ********|*****|*********************|**************************
0013               _idx.entry.insert.reorg:
0014                       ;------------------------------------------------------
0015                       ; Assert 1
0016                       ;------------------------------------------------------
0017 34BA 0286  22         ci    tmp2,2048*5           ; Crash if loop counter value is unrealistic
     34BC 2800     
0018                                                   ; Max. 5 SAMS pages, each with 2048 index
0019                                                   ; entries.
0020               
0021 34BE 1204  14         jle   !                     ; Continue if ok
0022                       ;------------------------------------------------------
0023                       ; Crash and burn
0024                       ;------------------------------------------------------
0025               _idx.entry.insert.reorg.crash:
0026 34C0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34C2 FFCE     
0027 34C4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34C6 2026     
0028                       ;------------------------------------------------------
0029                       ; Reorganize index entries
0030                       ;------------------------------------------------------
0031 34C8 0224  22 !       ai    tmp0,idx.top          ; Add index base to offset
     34CA B000     
0032 34CC C144  18         mov   tmp0,tmp1             ; a = current slot
0033 34CE 05C5  14         inct  tmp1                  ; b = current slot + 2
0034 34D0 0586  14         inc   tmp2                  ; One time adjustment for current line
0035                       ;------------------------------------------------------
0036                       ; Assert 2
0037                       ;------------------------------------------------------
0038 34D2 C1C6  18         mov   tmp2,tmp3             ; Number of slots to reorganize
0039 34D4 0A17  18         sla   tmp3,1                ; adjust to slot size
0040 34D6 0507  14         neg   tmp3                  ; tmp3 = -tmp3
0041 34D8 A1C4  18         a     tmp0,tmp3             ; tmp3 = tmp3 + tmp0
0042 34DA 0287  22         ci    tmp3,idx.top - 4      ; Address before top of index ?
     34DC AFFC     
0043 34DE 1504  14         jgt   _idx.entry.insert.reorg.loop
0044                                                   ; No, jump to loop start
0045                       ;------------------------------------------------------
0046                       ; Crash and burn
0047                       ;------------------------------------------------------
0048 34E0 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     34E2 FFCE     
0049 34E4 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     34E6 2026     
0050                       ;------------------------------------------------------
0051                       ; Loop backwards from end of index up to insert point
0052                       ;------------------------------------------------------
0053               _idx.entry.insert.reorg.loop:
0054 34E8 C554  38         mov   *tmp0,*tmp1           ; Copy a -> b
0055 34EA 0644  14         dect  tmp0                  ; Move pointer up
0056 34EC 0645  14         dect  tmp1                  ; Move pointer up
0057 34EE 0606  14         dec   tmp2                  ; Next index entry
0058 34F0 15FB  14         jgt   _idx.entry.insert.reorg.loop
0059                                                   ; Repeat until done
0060                       ;------------------------------------------------------
0061                       ; Clear index entry at insert point
0062                       ;------------------------------------------------------
0063 34F2 05C4  14         inct  tmp0                  ; \ Clear index entry for line
0064 34F4 04D4  26         clr   *tmp0                 ; / following insert point
0065               
0066 34F6 045B  20         b     *r11                  ; Return to caller
0067               
0068               
0069               
0070               
0071               ***************************************************************
0072               * idx.entry.insert
0073               * Insert index entry
0074               ***************************************************************
0075               * bl @idx.entry.insert
0076               *--------------------------------------------------------------
0077               * INPUT
0078               * @parm1    = Line number in editor buffer to insert
0079               * @parm2    = Line number of last line to check for reorg
0080               *--------------------------------------------------------------
0081               * OUTPUT
0082               * NONE
0083               *--------------------------------------------------------------
0084               * Register usage
0085               * tmp0,tmp2
0086               ********|*****|*********************|**************************
0087               idx.entry.insert:
0088 34F8 0649  14         dect  stack
0089 34FA C64B  30         mov   r11,*stack            ; Save return address
0090 34FC 0649  14         dect  stack
0091 34FE C644  30         mov   tmp0,*stack           ; Push tmp0
0092 3500 0649  14         dect  stack
0093 3502 C645  30         mov   tmp1,*stack           ; Push tmp1
0094 3504 0649  14         dect  stack
0095 3506 C646  30         mov   tmp2,*stack           ; Push tmp2
0096 3508 0649  14         dect  stack
0097 350A C647  30         mov   tmp3,*stack           ; Push tmp3
0098                       ;------------------------------------------------------
0099                       ; Prepare for index reorg
0100                       ;------------------------------------------------------
0101 350C C1A0  34         mov   @parm2,tmp2           ; Get last line to check
     350E A008     
0102 3510 61A0  34         s     @parm1,tmp2           ; Calculate loop
     3512 A006     
0103 3514 130F  14         jeq   idx.entry.insert.reorg.simple
0104                                                   ; Special treatment if last line
0105                       ;------------------------------------------------------
0106                       ; Reorganize index entries
0107                       ;------------------------------------------------------
0108               idx.entry.insert.reorg:
0109 3516 C1E0  34         mov   @parm2,tmp3
     3518 A008     
0110 351A 0287  22         ci    tmp3,2048
     351C 0800     
0111 351E 110A  14         jlt   idx.entry.insert.reorg.simple
0112                                                   ; Do simple reorg only if single
0113                                                   ; SAMS index page, otherwise complex reorg.
0114                       ;------------------------------------------------------
0115                       ; Complex index reorganization (multiple SAMS pages)
0116                       ;------------------------------------------------------
0117               idx.entry.insert.reorg.complex:
0118 3520 06A0  32         bl    @_idx.sams.mapcolumn.on
     3522 3112     
0119                                                   ; Index in continuous memory region
0120                                                   ; b000 - ffff (5 SAMS pages)
0121               
0122 3524 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3526 A008     
0123 3528 0A14  18         sla   tmp0,1                ; tmp0 * 2
0124               
0125 352A 06A0  32         bl    @_idx.entry.insert.reorg
     352C 34BA     
0126                                                   ; Reorganize index
0127                                                   ; \ i  tmp0 = Last line in index
0128                                                   ; / i  tmp2 = Num. of index entries to move
0129               
0130 352E 06A0  32         bl    @_idx.sams.mapcolumn.off
     3530 3146     
0131                                                   ; Restore memory window layout
0132               
0133 3532 1008  14         jmp   idx.entry.insert.exit
0134                       ;------------------------------------------------------
0135                       ; Simple index reorganization
0136                       ;------------------------------------------------------
0137               idx.entry.insert.reorg.simple:
0138 3534 C120  34         mov   @parm2,tmp0           ; Last line number in editor buffer
     3536 A008     
0139               
0140 3538 06A0  32         bl    @_idx.samspage.get    ; Get SAMS page for index
     353A 3180     
0141                                                   ; \ i  tmp0     = Line number
0142                                                   ; / o  outparm1 = Slot offset in SAMS page
0143               
0144 353C C120  34         mov   @outparm1,tmp0        ; Index offset
     353E A016     
0145               
0146 3540 06A0  32         bl    @_idx.entry.insert.reorg
     3542 34BA     
0147                                                   ; Reorganize index
0148                                                   ; \ i  tmp0 = Last line in index
0149                                                   ; / i  tmp2 = Num. of index entries to move
0150               
0151                       ;------------------------------------------------------
0152                       ; Exit
0153                       ;------------------------------------------------------
0154               idx.entry.insert.exit:
0155 3544 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0156 3546 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0157 3548 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0158 354A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0159 354C C2F9  30         mov   *stack+,r11           ; Pop r11
0160 354E 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0026                       ;-----------------------------------------------------------------------
0027                       ; Logic for editor buffer
0028                       ;-----------------------------------------------------------------------
0029                       copy  "edb.line.mappage.asm"   ; Activate edbuf SAMS page for line
     **** ****     > edb.line.mappage.asm
0001               * FILE......: edb.line.mappage.asm
0002               * Purpose...: Editor buffer SAMS setup
0003               
0004               
0005               ***************************************************************
0006               * edb.line.mappage
0007               * Activate editor buffer SAMS page for line
0008               ***************************************************************
0009               * bl  @edb.line.mappage
0010               *
0011               * tmp0 = Line number in editor buffer
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * outparm1 = Pointer to line in editor buffer
0015               * outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0, tmp1
0019               ***************************************************************
0020               edb.line.mappage:
0021 3550 0649  14         dect  stack
0022 3552 C64B  30         mov   r11,*stack            ; Push return address
0023 3554 0649  14         dect  stack
0024 3556 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 3558 0649  14         dect  stack
0026 355A C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Assert
0029                       ;------------------------------------------------------
0030 355C 8804  34         c     tmp0,@edb.lines       ; Non-existing line?
     355E A504     
0031 3560 1204  14         jle   edb.line.mappage.lookup
0032                                                   ; All checks passed, continue
0033                                                   ;--------------------------
0034                                                   ; Assert failed
0035                                                   ;--------------------------
0036 3562 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     3564 FFCE     
0037 3566 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     3568 2026     
0038                       ;------------------------------------------------------
0039                       ; Lookup SAMS page for line in parm1
0040                       ;------------------------------------------------------
0041               edb.line.mappage.lookup:
0042 356A C804  38         mov   tmp0,@parm1           ; Set line number in editor buffer
     356C A006     
0043               
0044 356E 06A0  32         bl    @idx.pointer.get      ; Get pointer to line
     3570 33FA     
0045                                                   ; \ i  parm1    = Line number
0046                                                   ; | o  outparm1 = Pointer to line
0047                                                   ; / o  outparm2 = SAMS page
0048               
0049 3572 C120  34         mov   @outparm2,tmp0        ; SAMS page
     3574 A018     
0050 3576 C160  34         mov   @outparm1,tmp1        ; Pointer to line
     3578 A016     
0051 357A 130B  14         jeq   edb.line.mappage.exit ; Nothing to page-in if NULL pointer
0052                                                   ; (=empty line)
0053                       ;------------------------------------------------------
0054                       ; Determine if requested SAMS page is already active
0055                       ;------------------------------------------------------
0056 357C 8120  34         c     @tv.sams.c000,tmp0    ; Compare with active page editor buffer
     357E A208     
0057 3580 1308  14         jeq   edb.line.mappage.exit ; Request page already active, so exit
0058                       ;------------------------------------------------------
0059                       ; Activate requested SAMS page
0060                       ;-----------------------------------------------------
0061 3582 06A0  32         bl    @xsams.page.set       ; Switch SAMS memory page
     3584 2584     
0062                                                   ; \ i  tmp0 = SAMS page
0063                                                   ; / i  tmp1 = Memory address
0064               
0065 3586 C820  54         mov   @outparm2,@tv.sams.c000
     3588 A018     
     358A A208     
0066                                                   ; Set page in shadow registers
0067               
0068 358C C820  54         mov   @outparm2,@edb.sams.page
     358E A018     
     3590 A518     
0069                                                   ; Set current SAMS page
0070                       ;------------------------------------------------------
0071                       ; Exit
0072                       ;------------------------------------------------------
0073               edb.line.mappage.exit:
0074 3592 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0075 3594 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0076 3596 C2F9  30         mov   *stack+,r11           ; Pop r11
0077 3598 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0030                       copy  "edb.line.getlen.asm"    ; Get line length
     **** ****     > edb.line.getlen.asm
0001               * FILE......: edb.line.getlen.asm
0002               * Purpose...: Get length of specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.getlength
0006               * Get length of specified line
0007               ***************************************************************
0008               *  bl   @edb.line.getlength
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line number (base 0)
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * @outparm1 = Length of line
0015               * @outparm2 = SAMS page
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1
0019               ********|*****|*********************|**************************
0020               edb.line.getlength:
0021 359A 0649  14         dect  stack
0022 359C C64B  30         mov   r11,*stack            ; Push return address
0023 359E 0649  14         dect  stack
0024 35A0 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 35A2 0649  14         dect  stack
0026 35A4 C645  30         mov   tmp1,*stack           ; Push tmp1
0027                       ;------------------------------------------------------
0028                       ; Initialisation
0029                       ;------------------------------------------------------
0030 35A6 04E0  34         clr   @outparm1             ; Reset length
     35A8 A016     
0031 35AA 04E0  34         clr   @outparm2             ; Reset SAMS bank
     35AC A018     
0032                       ;------------------------------------------------------
0033                       ; Exit if requested line beyond editor buffer
0034                       ;------------------------------------------------------
0035 35AE C120  34         mov   @parm1,tmp0           ; \
     35B0 A006     
0036 35B2 0584  14         inc   tmp0                  ; /  base 1
0037               
0038 35B4 8804  34         c     tmp0,@edb.lines       ; Requested line at BOT?
     35B6 A504     
0039 35B8 1101  14         jlt   !                     ; No, continue processing
0040 35BA 100B  14         jmp   edb.line.getlength.null
0041                                                   ; Set length 0 and exit early
0042                       ;------------------------------------------------------
0043                       ; Map SAMS page
0044                       ;------------------------------------------------------
0045 35BC C120  34 !       mov   @parm1,tmp0           ; Get line
     35BE A006     
0046               
0047 35C0 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     35C2 3550     
0048                                                   ; \ i  tmp0     = Line number
0049                                                   ; | o  outparm1 = Pointer to line
0050                                                   ; / o  outparm2 = SAMS page
0051               
0052 35C4 C120  34         mov   @outparm1,tmp0        ; Store pointer in tmp0
     35C6 A016     
0053 35C8 1304  14         jeq   edb.line.getlength.null
0054                                                   ; Set length to 0 if null-pointer
0055                       ;------------------------------------------------------
0056                       ; Process line prefix and exit
0057                       ;------------------------------------------------------
0058 35CA C154  26         mov   *tmp0,tmp1            ; Get length into tmp1
0059 35CC C805  38         mov   tmp1,@outparm1        ; Save length
     35CE A016     
0060 35D0 1002  14         jmp   edb.line.getlength.exit
0061                       ;------------------------------------------------------
0062                       ; Set length to 0 if null-pointer
0063                       ;------------------------------------------------------
0064               edb.line.getlength.null:
0065 35D2 04E0  34         clr   @outparm1             ; Set length to 0, was a null-pointer
     35D4 A016     
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069               edb.line.getlength.exit:
0070 35D6 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0071 35D8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0072 35DA C2F9  30         mov   *stack+,r11           ; Pop r11
0073 35DC 045B  20         b     *r11                  ; Return to caller
0074               
0075               
0076               
0077               ***************************************************************
0078               * edb.line.getlength2
0079               * Get length of current row (as seen from editor buffer side)
0080               ***************************************************************
0081               *  bl   @edb.line.getlength2
0082               *--------------------------------------------------------------
0083               * INPUT
0084               * @fb.row = Row in frame buffer
0085               *--------------------------------------------------------------
0086               * OUTPUT
0087               * @fb.row.length = Length of row
0088               *--------------------------------------------------------------
0089               * Register usage
0090               * tmp0
0091               ********|*****|*********************|**************************
0092               edb.line.getlength2:
0093 35DE 0649  14         dect  stack
0094 35E0 C64B  30         mov   r11,*stack            ; Save return address
0095 35E2 0649  14         dect  stack
0096 35E4 C644  30         mov   tmp0,*stack           ; Push tmp0
0097                       ;------------------------------------------------------
0098                       ; Calculate line in editor buffer
0099                       ;------------------------------------------------------
0100 35E6 C120  34         mov   @fb.topline,tmp0      ; Get top line in frame buffer
     35E8 A304     
0101 35EA A120  34         a     @fb.row,tmp0          ; Get current row in frame buffer
     35EC A306     
0102                       ;------------------------------------------------------
0103                       ; Get length
0104                       ;------------------------------------------------------
0105 35EE C804  38         mov   tmp0,@parm1
     35F0 A006     
0106 35F2 06A0  32         bl    @edb.line.getlength
     35F4 359A     
0107 35F6 C820  54         mov   @outparm1,@fb.row.length
     35F8 A016     
     35FA A308     
0108                                                   ; Save row length
0109                       ;------------------------------------------------------
0110                       ; Exit
0111                       ;------------------------------------------------------
0112               edb.line.getlength2.exit:
0113 35FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 35FE C2F9  30         mov   *stack+,r11           ; Pop R11
0115 3600 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0031                       copy  "edb.hipage.alloc.asm"   ; Check/increase highest SAMS page
     **** ****     > edb.hipage.alloc.asm
0001               * FILE......: edb.hipage.alloc.asm
0002               * Purpose...: Editor buffer utilities
0003               
0004               
0005               ***************************************************************
0006               * edb.hipage.alloc
0007               * Check and increase highest SAMS page of editor buffer
0008               ***************************************************************
0009               *  bl   @edb.hipage.alloc
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * @edb.next_free.ptr = Pointer to next free line
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0,tmp1
0018               ********|*****|*********************|**************************
0019               edb.hipage.alloc:
0020 3602 0649  14         dect  stack
0021 3604 C64B  30         mov   r11,*stack            ; Save return address
0022 3606 0649  14         dect  stack
0023 3608 C644  30         mov   tmp0,*stack           ; Push tmp0
0024 360A 0649  14         dect  stack
0025 360C C645  30         mov   tmp1,*stack           ; Push tmp1
0026                       ;------------------------------------------------------
0027                       ; 1a. Check if highest SAMS page needs to be increased
0028                       ;------------------------------------------------------
0029               edb.hipage.alloc.check_setpage:
0030 360E C120  34         mov   @edb.next_free.ptr,tmp0
     3610 A508     
0031                                                   ;--------------------------
0032                                                   ; Check for page overflow
0033                                                   ;--------------------------
0034 3612 0244  22         andi  tmp0,>0fff            ; Get rid of highest nibble
     3614 0FFF     
0035 3616 0224  22         ai    tmp0,82               ; Assume line of 80 chars (+2 bytes prefix)
     3618 0052     
0036 361A 0284  22         ci    tmp0,>1000 - 16       ; 4K boundary reached?
     361C 0FF0     
0037 361E 1105  14         jlt   edb.hipage.alloc.setpage
0038                                                   ; Not yet, don't increase SAMS page
0039                       ;------------------------------------------------------
0040                       ; 1b. Increase highest SAMS page (copy-on-write!)
0041                       ;------------------------------------------------------
0042 3620 05A0  34         inc   @edb.sams.hipage      ; Set highest SAMS page
     3622 A51A     
0043 3624 C820  54         mov   @edb.top.ptr,@edb.next_free.ptr
     3626 A500     
     3628 A508     
0044                                                   ; Start at top of SAMS page again
0045                       ;------------------------------------------------------
0046                       ; 1c. Switch to SAMS page and exit
0047                       ;------------------------------------------------------
0048               edb.hipage.alloc.setpage:
0049 362A C120  34         mov   @edb.sams.hipage,tmp0
     362C A51A     
0050 362E C160  34         mov   @edb.top.ptr,tmp1
     3630 A500     
0051 3632 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     3634 2584     
0052                                                   ; \ i  tmp0 = SAMS page number
0053                                                   ; / i  tmp1 = Memory address
0054               
0055 3636 1004  14         jmp   edb.hipage.alloc.exit
0056                       ;------------------------------------------------------
0057                       ; Check failed, crash CPU!
0058                       ;------------------------------------------------------
0059               edb.hipage.alloc.crash:
0060 3638 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     363A FFCE     
0061 363C 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     363E 2026     
0062                       ;------------------------------------------------------
0063                       ; Exit
0064                       ;------------------------------------------------------
0065               edb.hipage.alloc.exit:
0066 3640 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0067 3642 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0068 3644 C2F9  30         mov   *stack+,r11           ; Pop R11
0069 3646 045B  20         b     *r11                  ; Return to caller
                   < ram.resident.asm
0032                       ;-----------------------------------------------------------------------
0033                       ; Utility functions
0034                       ;-----------------------------------------------------------------------
0035                       copy  "pane.topline.clearmsg.asm"
     **** ****     > pane.topline.clearmsg.asm
0001               * FILE......: pane.topline.clearmsg.asm
0002               * Purpose...: One-shot task for clearing overlay message in top line
0003               
0004               
0005               ***************************************************************
0006               * pane.topline.oneshot.clearmsg
0007               * Remove overlay message in top line
0008               ***************************************************************
0009               * Runs as one-shot task in slot 3
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               pane.topline.oneshot.clearmsg:
0021 3648 0649  14         dect  stack
0022 364A C64B  30         mov   r11,*stack            ; Push return address
0023 364C 0649  14         dect  stack
0024 364E C660  42         mov   @wyx,*stack           ; Push cursor position
     3650 832A     
0025                       ;-------------------------------------------------------
0026                       ; Clear message
0027                       ;-------------------------------------------------------
0028 3652 06A0  32         bl    @hchar
     3654 27E0     
0029 3656 0034                   byte 0,52,32,18
     3658 2012     
0030 365A FFFF                   data EOL              ; Clear message
0031               
0032 365C 04E0  34         clr   @tv.task.oneshot      ; Reset oneshot task
     365E A224     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036               pane.topline.oneshot.clearmsg.exit:
0037 3660 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     3662 832A     
0038 3664 C2F9  30         mov   *stack+,r11           ; Pop R11
0039 3666 045B  20         b     *r11                  ; Return to task
                   < ram.resident.asm
0036                                                      ; Remove overlay messsage in top line
0037                       ;------------------------------------------------------
0038                       ; Program data
0039                       ;------------------------------------------------------
0040                       copy  "data.constants.asm"     ; Constants
     **** ****     > data.constants.asm
0001               * FILE......: data.constants.asm
0002               * Purpose...: Stevie Editor - data segment (constants)
0003               
0004               ***************************************************************
0005               *                      Constants
0006               ********|*****|*********************|**************************
0007               
0008               
0009               ***************************************************************
0010               * Textmode (80 columns, 30 rows) - F18A
0011               *--------------------------------------------------------------
0012               *
0013               * ; VDP#0 Control bits
0014               * ;      bit 6=0: M3 | Graphics 1 mode
0015               * ;      bit 7=0: Disable external VDP input
0016               * ; VDP#1 Control bits
0017               * ;      bit 0=1: 16K selection
0018               * ;      bit 1=1: Enable display
0019               * ;      bit 2=1: Enable VDP interrupt
0020               * ;      bit 3=1: M1 \ TEXT MODE
0021               * ;      bit 4=0: M2 /
0022               * ;      bit 5=0: reserved
0023               * ;      bit 6=0: 8x8 sprites
0024               * ;      bit 7=0: Sprite magnification (1x)
0025               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >960)
0026               * ; VDP#3 PCT (Pattern color table)      at >0FC0  (>3F * >040)
0027               * ; VDP#4 PDT (Pattern descriptor table) at >1000  (>02 * >800)
0028               * ; VDP#5 SAT (sprite attribute list)    at >2180  (>43 * >080)
0029               * ; VDP#6 SPT (Sprite pattern table)     at >2800  (>05 * >800)
0030               * ; VDP#7 Set foreground/background color
0031               ***************************************************************
0032               stevie.80x30:
0033 3668 04F0             byte  >04,>f0,>00,>3f,>02,>43,>05,SPFCLR,0,80
     366A 003F     
     366C 0243     
     366E 05F4     
     3670 0050     
0034               
0035               
0036               ***************************************************************
0037               * TI Basic mode (32 columns/24 rows)
0038               *--------------------------------------------------------------
0039               tibasic.32x24:
0040 3672 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     3674 000C     
     3676 0006     
     3678 0007     
     367A 0020     
0041               *
0042               * ; VDP#0 Control bits
0043               * ;      bit 6=0: M3 | Graphics 1 mode
0044               * ;      bit 7=0: Disable external VDP input
0045               * ; VDP#1 Control bits
0046               * ;      bit 0=1: 16K selection
0047               * ;      bit 1=1: Enable display
0048               * ;      bit 2=1: Enable VDP interrupt
0049               * ;      bit 3=0: M1 \ Graphics 1 mode
0050               * ;      bit 4=0: M2 /
0051               * ;      bit 5=0: reserved
0052               * ;      bit 6=1: 16x16 sprites
0053               * ;      bit 7=0: Sprite magnification (1x)
0054               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0055               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0056               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0057               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0058               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0059               * ; VDP#7 Set screen background color
0060               
0061               
0062               
0063               ***************************************************************
0064               * TI Basic mode (32 columns/30 rows) - F18A
0065               *--------------------------------------------------------------
0066               tibasic.32x30:
0067 367C 00E2             byte  >00,>e2,>00,>0c,>00,>06,>00,>07,0,32
     367E 000C     
     3680 0006     
     3682 0007     
     3684 0020     
0068               *
0069               * ; VDP#0 Control bits
0070               * ;      bit 6=0: M3 | Graphics 1 mode
0071               * ;      bit 7=0: Disable external VDP input
0072               * ; VDP#1 Control bits
0073               * ;      bit 0=1: 16K selection
0074               * ;      bit 1=1: Enable display
0075               * ;      bit 2=1: Enable VDP interrupt
0076               * ;      bit 3=0: M1 \ Graphics 1 mode
0077               * ;      bit 4=0: M2 /
0078               * ;      bit 5=0: reserved
0079               * ;      bit 6=1: 16x16 sprites
0080               * ;      bit 7=0: Sprite magnification (1x)
0081               * ; VDP#2 PNT (Pattern name table)       at >0000  (>00 * >400)
0082               * ; VDP#3 PCT (Pattern color table)      at >0300  (>0C * >040)
0083               * ; VDP#4 PDT (Pattern descriptor table) at >0000  (>00 * >800)
0084               * ; VDP#5 SAT (sprite attribute list)    at >0300  (>06 * >080)
0085               * ; VDP#6 SPT (Sprite pattern table)     at >0000  (>00 * >800)
0086               * ; VDP#7 Set screen background color
0087               * ;
0088               * ; The table by itself is not sufficient for turning on 30 rows
0089               * ; mode. You also need to unlock the F18a and set VR49 (>31) to
0090               * ; value >40.
0091               
0092               
0093               ***************************************************************
0094               * Sprite Attribute Table
0095               *--------------------------------------------------------------
0096               romsat:
0097                                                   ; YX, initial shape and color
0098 3686 0000             data  >0000,>0001           ; Cursor
     3688 0001     
0099 368A 0000             data  >0000,>0101           ; Current line indicator     <
     368C 0101     
0100 368E 0820             data  >0820,>0201           ; Current column indicator   v
     3690 0201     
0101               nosprite:
0102 3692 D000             data  >d000                 ; End-of-Sprites list
0103               
0104               
0105               
0106               
0107               ***************************************************************
0108               * Stevie color schemes table
0109               *--------------------------------------------------------------
0110               * Word 1
0111               * A  MSB  high-nibble    Foreground color text line in frame buffer
0112               * B  MSB  low-nibble     Background color text line in frame buffer
0113               * C  LSB  high-nibble    Foreground color top/bottom line
0114               * D  LSB  low-nibble     Background color top/bottom line
0115               *
0116               * Word 2
0117               * E  MSB  high-nibble    Foreground color cmdb pane
0118               * F  MSB  low-nibble     Background color cmdb pane
0119               * G  LSB  high-nibble    Cursor foreground color cmdb pane
0120               * H  LSB  low-nibble     Cursor foreground color frame buffer
0121               *
0122               * Word 3
0123               * I  MSB  high-nibble    Foreground color busy top/bottom line
0124               * J  MSB  low-nibble     Background color busy top/bottom line
0125               * K  LSB  high-nibble    Foreground color marked line in frame buffer
0126               * L  LSB  low-nibble     Background color marked line in frame buffer
0127               *
0128               * Word 4
0129               * M  MSB  high-nibble    Foreground color command buffer header line
0130               * N  MSB  low-nibble     Background color command buffer header line
0131               * O  LSB  high-nibble    Foreground color line+column indicator frame buffer
0132               * P  LSB  low-nibble     Foreground color ruler frame buffer
0133               *
0134               * Colors
0135               * 0  Transparant
0136               * 1  black
0137               * 2  Green
0138               * 3  Light Green
0139               * 4  Blue
0140               * 5  Light Blue
0141               * 6  Dark Red
0142               * 7  Cyan
0143               * 8  Red
0144               * 9  Light Red
0145               * A  Yellow
0146               * B  Light Yellow
0147               * C  Dark Green
0148               * D  Magenta
0149               * E  Grey
0150               * F  White
0151               *--------------------------------------------------------------
0152      000A     tv.colorscheme.entries   equ 10 ; Entries in table
0153               
0154               tv.colorscheme.table:
0155                       ;                             ; #
0156                       ;      ABCD  EFGH  IJKL  MNOP ; -
0157 3694 F417             data  >f417,>f171,>1b1f,>71b1 ; 1  White on blue with cyan touch
     3696 F171     
     3698 1B1F     
     369A 71B1     
0158 369C A11A             data  >a11a,>f0ff,>1f1a,>f1ff ; 2  Dark yellow on black
     369E F0FF     
     36A0 1F1A     
     36A2 F1FF     
0159 36A4 2112             data  >2112,>f0ff,>1f12,>f1f6 ; 3  Dark green on black
     36A6 F0FF     
     36A8 1F12     
     36AA F1F6     
0160 36AC F41F             data  >f41f,>1e11,>1a17,>1e11 ; 4  White on blue
     36AE 1E11     
     36B0 1A17     
     36B2 1E11     
0161 36B4 E11E             data  >e11e,>e1ff,>1f1e,>e1ff ; 5  Grey on black
     36B6 E1FF     
     36B8 1F1E     
     36BA E1FF     
0162 36BC 1771             data  >1771,>1016,>1b71,>1711 ; 6  Black on cyan
     36BE 1016     
     36C0 1B71     
     36C2 1711     
0163 36C4 1FF1             data  >1ff1,>1011,>f1f1,>1f11 ; 7  Black on white
     36C6 1011     
     36C8 F1F1     
     36CA 1F11     
0164 36CC 1AF1             data  >1af1,>a1ff,>1f1f,>f11f ; 8  Black on dark yellow
     36CE A1FF     
     36D0 1F1F     
     36D2 F11F     
0165 36D4 21F0             data  >21f0,>12ff,>1b12,>12ff ; 9  Dark green on black
     36D6 12FF     
     36D8 1B12     
     36DA 12FF     
0166 36DC F5F1             data  >f5f1,>e1ff,>1b1f,>f131 ; 10 White on light blue
     36DE E1FF     
     36E0 1B1F     
     36E2 F131     
0167                       even
0168               
0169               tv.tabs.table:
0170 36E4 0007             byte  0,7,12,25             ; \   Default tab positions as used
     36E6 0C19     
0171 36E8 1E2D             byte  30,45,59,79           ; |   in Editor/Assembler module.
     36EA 3B4F     
0172 36EC FF00             byte  >ff,0,0,0             ; |
     36EE 0000     
0173 36F0 0000             byte  0,0,0,0               ; |   Up to 20 positions supported.
     36F2 0000     
0174 36F4 0000             byte  0,0,0,0               ; /   >ff means end-of-list.
     36F6 0000     
0175                       even
0176               
0177               
0178               
0179               ***************************************************************
0180               * Constants for numbers 0-10
0181               ********|*****|*********************|**************************
0182      2000     const.0       equ   w$0000          ; 0
0183      2002     const.1       equ   w$0001          ; 1
0184      2004     const.2       equ   w$0002          ; 2
0185 36F8 0003     const.3       data  3               ; 3
0186      2006     const.4       equ   w$0004          ; 4
0187 36FA 0005     const.5       data  5               ; 5
0188 36FC 0006     const.6       data  6               ; 6
0189 36FE 0007     const.7       data  7               ; 7
0190      2008     const.8       equ   w$0008          ; 8
0191 3700 0009     const.9       data  9               ; 9
0192 3702 000A     const.10      data  10              ; 10
                   < ram.resident.asm
0041                       copy  "data.strings.asm"       ; Strings
     **** ****     > data.strings.asm
0001               * FILE......: data.strings.asm
0002               * Purpose...: Stevie Editor - data segment (strings)
0003               
0004               ***************************************************************
0005               *                       Strings
0006               ***************************************************************
0007               
0008 3704 012C     txt.delim          stri ','
0009 3706 0520     txt.bottom         stri '  BOT'
     3708 2042     
     370A 4F54     
0010 370C 044F     txt.ovrwrite       stri 'OVR '
     370E 5652     
     3710 20       
0011 3711   04     txt.insert         stri 'INS '
     3712 494E     
     3714 5320     
0012 3716 0449     txt.autoinsert     stri 'INS+'
     3718 4E53     
     371A 2B       
0013 371B   01     txt.star           stri '*'
     371C 2A       
0014 371D   0A     txt.loading        stri 'Loading...'
     371E 4C6F     
     3720 6164     
     3722 696E     
     3724 672E     
     3726 2E2E     
0015 3728 0A53     txt.saving         stri 'Saving....'
     372A 6176     
     372C 696E     
     372E 672E     
     3730 2E2E     
     3732 2E       
0016 3733   12     txt.printing       stri 'Printing file.....'
     3734 5072     
     3736 696E     
     3738 7469     
     373A 6E67     
     373C 2066     
     373E 696C     
     3740 652E     
     3742 2E2E     
     3744 2E2E     
0017 3746 1244     txt.block.del      stri 'Deleting block....'
     3748 656C     
     374A 6574     
     374C 696E     
     374E 6720     
     3750 626C     
     3752 6F63     
     3754 6B2E     
     3756 2E2E     
     3758 2E       
0018 3759   11     txt.block.copy     stri 'Copying block....'
     375A 436F     
     375C 7079     
     375E 696E     
     3760 6720     
     3762 626C     
     3764 6F63     
     3766 6B2E     
     3768 2E2E     
     376A 2E       
0019 376B   10     txt.block.move     stri 'Moving block....'
     376C 4D6F     
     376E 7669     
     3770 6E67     
     3772 2062     
     3774 6C6F     
     3776 636B     
     3778 2E2E     
     377A 2E2E     
0020 377C 1853     txt.block.save     stri 'Saving block to file....'
     377E 6176     
     3780 696E     
     3782 6720     
     3784 626C     
     3786 6F63     
     3788 6B20     
     378A 746F     
     378C 2066     
     378E 696C     
     3790 652E     
     3792 2E2E     
     3794 2E       
0021 3795   18     txt.block.clip     stri 'Copying to clipboard....'
     3796 436F     
     3798 7079     
     379A 696E     
     379C 6720     
     379E 746F     
     37A0 2063     
     37A2 6C69     
     37A4 7062     
     37A6 6F61     
     37A8 7264     
     37AA 2E2E     
     37AC 2E2E     
0022 37AE 1250     txt.block.print    stri 'Printing block....'
     37B0 7269     
     37B2 6E74     
     37B4 696E     
     37B6 6720     
     37B8 626C     
     37BA 6F63     
     37BC 6B2E     
     37BE 2E2E     
     37C0 2E       
0023 37C1   13     txt.clearmem       stri 'Clearing memory....'
     37C2 436C     
     37C4 6561     
     37C6 7269     
     37C8 6E67     
     37CA 206D     
     37CC 656D     
     37CE 6F72     
     37D0 792E     
     37D2 2E2E     
     37D4 2E       
0024 37D5   0E     txt.done.load      stri 'Load completed'
     37D6 4C6F     
     37D8 6164     
     37DA 2063     
     37DC 6F6D     
     37DE 706C     
     37E0 6574     
     37E2 6564     
0025 37E4 1049     txt.done.insert    stri 'Insert completed'
     37E6 6E73     
     37E8 6572     
     37EA 7420     
     37EC 636F     
     37EE 6D70     
     37F0 6C65     
     37F2 7465     
     37F4 64       
0026 37F5   10     txt.done.append    stri 'Append completed'
     37F6 4170     
     37F8 7065     
     37FA 6E64     
     37FC 2063     
     37FE 6F6D     
     3800 706C     
     3802 6574     
     3804 6564     
0027 3806 0E53     txt.done.save      stri 'Save completed'
     3808 6176     
     380A 6520     
     380C 636F     
     380E 6D70     
     3810 6C65     
     3812 7465     
     3814 64       
0028 3815   0E     txt.done.copy      stri 'Copy completed'
     3816 436F     
     3818 7079     
     381A 2063     
     381C 6F6D     
     381E 706C     
     3820 6574     
     3822 6564     
0029 3824 0F50     txt.done.print     stri 'Print completed'
     3826 7269     
     3828 6E74     
     382A 2063     
     382C 6F6D     
     382E 706C     
     3830 6574     
     3832 6564     
0030 3834 1044     txt.done.delete    stri 'Delete completed'
     3836 656C     
     3838 6574     
     383A 6520     
     383C 636F     
     383E 6D70     
     3840 6C65     
     3842 7465     
     3844 64       
0031 3845   0F     txt.done.clipboard stri 'Clipboard saved'
     3846 436C     
     3848 6970     
     384A 626F     
     384C 6172     
     384E 6420     
     3850 7361     
     3852 7665     
     3854 64       
0032 3855   0D     txt.done.clipdev   stri 'Clipboard set'
     3856 436C     
     3858 6970     
     385A 626F     
     385C 6172     
     385E 6420     
     3860 7365     
     3862 74       
0033 3863   0E     txt.autoins.on     stri 'Autoinsert: on'
     3864 4175     
     3866 746F     
     3868 696E     
     386A 7365     
     386C 7274     
     386E 3A20     
     3870 6F6E     
0034 3872 0F41     txt.autoins.off    stri 'Autoinsert: off'
     3874 7574     
     3876 6F69     
     3878 6E73     
     387A 6572     
     387C 743A     
     387E 206F     
     3880 6666     
0035 3882 0846     txt.fastmode       stri 'Fastmode'
     3884 6173     
     3886 746D     
     3888 6F64     
     388A 65       
0036 388B   1B     txt.uncrunching    stri 'Expanding TI Basic line....'
     388C 4578     
     388E 7061     
     3890 6E64     
     3892 696E     
     3894 6720     
     3896 5449     
     3898 2042     
     389A 6173     
     389C 6963     
     389E 206C     
     38A0 696E     
     38A2 652E     
     38A4 2E2E     
     38A6 2E       
0037 38A7   02     txt.kb             stri 'kb'
     38A8 6B62     
0038 38AA 054C     txt.lines          stri 'Lines'
     38AC 696E     
     38AE 6573     
0039 38B0 0A5B     txt.newfile        stri '[New file]'
     38B2 4E65     
     38B4 7720     
     38B6 6669     
     38B8 6C65     
     38BA 5D       
0040 38BB   0D     txt.tib1           stri '[TI Basic #1]'
     38BC 5B54     
     38BE 4920     
     38C0 4261     
     38C2 7369     
     38C4 6320     
     38C6 2331     
     38C8 5D       
0041 38C9   0D     txt.tib2           stri '[TI Basic #2]'
     38CA 5B54     
     38CC 4920     
     38CE 4261     
     38D0 7369     
     38D2 6320     
     38D4 2332     
     38D6 5D       
0042 38D7   0D     txt.tib3           stri '[TI Basic #3]'
     38D8 5B54     
     38DA 4920     
     38DC 4261     
     38DE 7369     
     38E0 6320     
     38E2 2333     
     38E4 5D       
0043 38E5   0D     txt.tib4           stri '[TI Basic #4]'
     38E6 5B54     
     38E8 4920     
     38EA 4261     
     38EC 7369     
     38EE 6320     
     38F0 2334     
     38F2 5D       
0044 38F3   0D     txt.tib5           stri '[TI Basic #5]'
     38F4 5B54     
     38F6 4920     
     38F8 4261     
     38FA 7369     
     38FC 6320     
     38FE 2335     
     3900 5D       
0045 3901   04     txt.filetype.dv80  stri 'DV80'
     3902 4456     
     3904 3830     
0046 3906 034D     txt.m1             stri 'M1='
     3908 313D     
0047 390A 034D     txt.m2             stri 'M2='
     390C 323D     
0048 390E 1046     txt.keys.default   stri 'F9-Menu  ^H-Help'
     3910 392D     
     3912 4D65     
     3914 6E75     
     3916 2020     
     3918 5E48     
     391A 2D48     
     391C 656C     
     391E 70       
0049 391F   1B     txt.keys.defaultb  stri 'F9-Menu  ^H-Help  F0-Basic#'
     3920 4639     
     3922 2D4D     
     3924 656E     
     3926 7520     
     3928 205E     
     392A 482D     
     392C 4865     
     392E 6C70     
     3930 2020     
     3932 4630     
     3934 2D42     
     3936 6173     
     3938 6963     
     393A 23       
0050 393B   36     txt.keys.block     stri 'F9-Back  ^Copy  ^Move  ^Del  ^Save  ^Print  ^[1-5]Clip'
     393C 4639     
     393E 2D42     
     3940 6163     
     3942 6B20     
     3944 205E     
     3946 436F     
     3948 7079     
     394A 2020     
     394C 5E4D     
     394E 6F76     
     3950 6520     
     3952 205E     
     3954 4465     
     3956 6C20     
     3958 205E     
     395A 5361     
     395C 7665     
     395E 2020     
     3960 5E50     
     3962 7269     
     3964 6E74     
     3966 2020     
     3968 5E5B     
     396A 312D     
     396C 355D     
     396E 436C     
     3970 6970     
0051 3972 2C46     txt.keys.basic1    stri 'F9-Back  F5-AutoMode  SPACE-Uncrunch program'
     3974 392D     
     3976 4261     
     3978 636B     
     397A 2020     
     397C 4635     
     397E 2D41     
     3980 7574     
     3982 6F4D     
     3984 6F64     
     3986 6520     
     3988 2053     
     398A 5041     
     398C 4345     
     398E 2D55     
     3990 6E63     
     3992 7275     
     3994 6E63     
     3996 6820     
     3998 7072     
     399A 6F67     
     399C 7261     
     399E 6D       
0052 399F   2E     txt.ruler          text    '.........'
     39A0 2E2E     
     39A2 2E2E     
     39A4 2E2E     
     39A6 2E2E     
0053 39A8 12                          byte    18
0054 39A9   2E                        text    '.........'
     39AA 2E2E     
     39AC 2E2E     
     39AE 2E2E     
     39B0 2E2E     
0055 39B2 13                          byte    19
0056 39B3   2E                        text    '.........'
     39B4 2E2E     
     39B6 2E2E     
     39B8 2E2E     
     39BA 2E2E     
0057 39BC 14                          byte    20
0058 39BD   2E                        text    '.........'
     39BE 2E2E     
     39C0 2E2E     
     39C2 2E2E     
     39C4 2E2E     
0059 39C6 15                          byte    21
0060 39C7   2E                        text    '.........'
     39C8 2E2E     
     39CA 2E2E     
     39CC 2E2E     
     39CE 2E2E     
0061 39D0 16                          byte    22
0062 39D1   2E                        text    '.........'
     39D2 2E2E     
     39D4 2E2E     
     39D6 2E2E     
     39D8 2E2E     
0063 39DA 17                          byte    23
0064 39DB   2E                        text    '.........'
     39DC 2E2E     
     39DE 2E2E     
     39E0 2E2E     
     39E2 2E2E     
0065 39E4 18                          byte    24
0066 39E5   2E                        text    '.........'
     39E6 2E2E     
     39E8 2E2E     
     39EA 2E2E     
     39EC 2E2E     
0067 39EE 19                          byte    25
0068                                  even
0069 39F0 020E     txt.alpha.down     data >020e,>0f00
     39F2 0F00     
0070 39F4 0110     txt.vertline       data >0110
0071 39F6 011C     txt.keymarker      byte 1,28
0072               
0073 39F8 0120     txt.ws1            stri ' '
0074 39FA 0220     txt.ws2            stri '  '
     39FC 20       
0075 39FD   03     txt.ws3            stri '   '
     39FE 2020     
     3A00 20       
0076 3A01   04     txt.ws4            stri '    '
     3A02 2020     
     3A04 2020     
0077 3A06 0520     txt.ws5            stri '     '
     3A08 2020     
     3A0A 2020     
0078      3A01     txt.filetype.none  equ txt.ws4
0079               
0080               
0081               ;--------------------------------------------------------------
0082               ; Strings for error line pane
0083               ;--------------------------------------------------------------
0084 3A0C 1546     txt.ioerr.load     stri 'Failed loading file: '
     3A0E 6169     
     3A10 6C65     
     3A12 6420     
     3A14 6C6F     
     3A16 6164     
     3A18 696E     
     3A1A 6720     
     3A1C 6669     
     3A1E 6C65     
     3A20 3A20     
0085 3A22 1446     txt.ioerr.save     stri 'Failed saving file: '
     3A24 6169     
     3A26 6C65     
     3A28 6420     
     3A2A 7361     
     3A2C 7669     
     3A2E 6E67     
     3A30 2066     
     3A32 696C     
     3A34 653A     
     3A36 20       
0086 3A37   1B     txt.ioerr.print    stri 'Failed printing to device: '
     3A38 4661     
     3A3A 696C     
     3A3C 6564     
     3A3E 2070     
     3A40 7269     
     3A42 6E74     
     3A44 696E     
     3A46 6720     
     3A48 746F     
     3A4A 2064     
     3A4C 6576     
     3A4E 6963     
     3A50 653A     
     3A52 20       
0087 3A53   16     txt.io.nofile      stri 'No filename specified.'
     3A54 4E6F     
     3A56 2066     
     3A58 696C     
     3A5A 656E     
     3A5C 616D     
     3A5E 6520     
     3A60 7370     
     3A62 6563     
     3A64 6966     
     3A66 6965     
     3A68 642E     
0088 3A6A 2D49     txt.memfull.load   stri 'Index full. File too large for editor buffer.'
     3A6C 6E64     
     3A6E 6578     
     3A70 2066     
     3A72 756C     
     3A74 6C2E     
     3A76 2046     
     3A78 696C     
     3A7A 6520     
     3A7C 746F     
     3A7E 6F20     
     3A80 6C61     
     3A82 7267     
     3A84 6520     
     3A86 666F     
     3A88 7220     
     3A8A 6564     
     3A8C 6974     
     3A8E 6F72     
     3A90 2062     
     3A92 7566     
     3A94 6665     
     3A96 722E     
0089 3A98 2D43     txt.block.inside   stri 'Copy/Move target must be outside M1-M2 range.'
     3A9A 6F70     
     3A9C 792F     
     3A9E 4D6F     
     3AA0 7665     
     3AA2 2074     
     3AA4 6172     
     3AA6 6765     
     3AA8 7420     
     3AAA 6D75     
     3AAC 7374     
     3AAE 2062     
     3AB0 6520     
     3AB2 6F75     
     3AB4 7473     
     3AB6 6964     
     3AB8 6520     
     3ABA 4D31     
     3ABC 2D4D     
     3ABE 3220     
     3AC0 7261     
     3AC2 6E67     
     3AC4 652E     
0090               
0091               ;--------------------------------------------------------------
0092               ; Strings for command buffer
0093               ;--------------------------------------------------------------
0094 3AC6 013E     txt.cmdb.prompt    stri '>'
0095 3AC8 0D43     txt.colorscheme    stri 'Color scheme:'
     3ACA 6F6C     
     3ACC 6F72     
     3ACE 2073     
     3AD0 6368     
     3AD2 656D     
     3AD4 653A     
                   < ram.resident.asm
0042                       copy  "data.defaults.asm"      ; Default values (devices, ...)
     **** ****     > data.defaults.asm
0001               * FILE......: data.defaults.asm
0002               * Purpose...: Default values for Stevie
0003               
0004               ***************************************************************
0005               *                     Default values
0006               ********|*****|*********************|**************************
0007 3AD6 0650     def.printer.fname   stri 'PI.PIO'
     3AD8 492E     
     3ADA 5049     
     3ADC 4F       
0008 3ADD   09     def.clip.fname      stri 'DSK1.CLIP'
     3ADE 4453     
     3AE0 4B31     
     3AE2 2E43     
     3AE4 4C49     
     3AE6 50       
0009 3AE7   09     def.clip.fname.b    stri 'DSK2.CLIP'
     3AE8 4453     
     3AEA 4B32     
     3AEC 2E43     
     3AEE 4C49     
     3AF0 50       
0010 3AF1   09     def.clip.fname.c    stri 'TIPI.CLIP'
     3AF2 5449     
     3AF4 5049     
     3AF6 2E43     
     3AF8 4C49     
     3AFA 50       
0011 3AFB   2F     def.devices         stri ',DSK,HDX,IDE,PI.,PIO,TIPI.,RD,SCS,SDD,WDS,RS232'
     3AFC 2C44     
     3AFE 534B     
     3B00 2C48     
     3B02 4458     
     3B04 2C49     
     3B06 4445     
     3B08 2C50     
     3B0A 492E     
     3B0C 2C50     
     3B0E 494F     
     3B10 2C54     
     3B12 4950     
     3B14 492E     
     3B16 2C52     
     3B18 442C     
     3B1A 5343     
     3B1C 532C     
     3B1E 5344     
     3B20 442C     
     3B22 5744     
     3B24 532C     
     3B26 5253     
     3B28 3233     
     3B2A 32       
                   < ram.resident.asm
                   < stevie_b1.asm
0050                       ;------------------------------------------------------
0051                       ; Activate bank 1 and branch to  >6036
0052                       ;------------------------------------------------------
0053 3B2C 04E0  34         clr   @bank1.rom            ; Activate bank 1 "James" ROM
     3B2E 6002     
0054               
0058               
0059 3B30 0460  28         b     @kickstart.code2      ; Jump to entry routine
     3B32 6046     
0060               ***************************************************************
0061               * Step 3: Include main editor modules
0062               ********|*****|*********************|**************************
0063               main:
0064                       aorg  kickstart.code2       ; >6046
0065 6046 0460  28         b     @main.stevie          ; Start editor
     6048 604A     
0066                       ;-----------------------------------------------------------------------
0067                       ; Include files
0068                       ;-----------------------------------------------------------------------
0069                       copy  "main.asm"                    ; Main file (entrypoint)
     **** ****     > main.asm
0001               * FILE......: main.asm
0002               * Purpose...: Stevie Editor - Main editor module
0003               
0004               ***************************************************************
0005               * main
0006               * Initialize editor
0007               ***************************************************************
0008               * b   @main.stevie
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * -
0018               *--------------------------------------------------------------
0019               * Notes
0020               * Main entry point for stevie editor
0021               ***************************************************************
0022               
0023               
0024               ***************************************************************
0025               * Main
0026               ********|*****|*********************|**************************
0027               main.stevie:
0028 604A 20A0  32         coc   @wbit1,config         ; F18a detected?
     604C 201E     
0029 604E 1301  14         jeq   main.continue
0030 6050 1000  14         nop                         ; Ignore for now if no f18a detected
0031               
0032               main.continue:
0033                       ; data  c99_ovrd            ; classic99: Put CPU in overdrive mode
0034               
0035               
0036                       ;------------------------------------------------------
0037                       ; Setup F18A VDP
0038                       ;------------------------------------------------------
0039 6052 06A0  32         bl    @mute                 ; Turn sound generators off
     6054 2808     
0040 6056 06A0  32         bl    @scroff               ; Turn screen off
     6058 2694     
0041               
0042 605A 06A0  32         bl    @f18unl               ; Unlock the F18a
     605C 2738     
0043               
0045               
0046 605E 06A0  32         bl    @putvr                ; Turn on 30 rows mode.
     6060 2340     
0047 6062 3140                   data >3140            ; F18a VR49 (>31), bit 40
0048               
0050               
0051 6064 06A0  32         bl    @putvr                ; Turn on position based attributes
     6066 2340     
0052 6068 3202                   data >3202            ; F18a VR50 (>32), bit 2
0053               
0054 606A 06A0  32         BL    @putvr                ; Set VDP TAT base address for position
     606C 2340     
0055 606E 0360                   data >0360            ; based attributes (>40 * >60 = >1800)
0056                       ;------------------------------------------------------
0057                       ; Clear screen (VDP SIT)
0058                       ;------------------------------------------------------
0059 6070 06A0  32         bl    @filv
     6072 229C     
0060 6074 0000                   data >0000,32,vdp.sit.size
     6076 0020     
     6078 0960     
0061                                                   ; Clear screen
0062                       ;------------------------------------------------------
0063                       ; Initialize high memory expansion
0064                       ;------------------------------------------------------
0065 607A 06A0  32         bl    @film
     607C 2244     
0066 607E A000                   data >a000,00,20000   ; Clear a000-eedf
     6080 0000     
     6082 4E20     
0067                       ;------------------------------------------------------
0068                       ; Setup cursor, screen, etc.
0069                       ;------------------------------------------------------
0070 6084 06A0  32         bl    @smag1x               ; Sprite magnification 1x
     6086 26B4     
0071 6088 06A0  32         bl    @s8x8                 ; Small sprite
     608A 26C4     
0072               
0073 608C 06A0  32         bl    @cpym2m
     608E 24E8     
0074 6090 3686                   data romsat,ramsat,14 ; Load sprite SAT
     6092 A056     
     6094 000E     
0075               
0076 6096 C820  54         mov   @romsat+2,@tv.curshape
     6098 3688     
     609A A214     
0077                                                   ; Save cursor shape & color
0078               
0079 609C 06A0  32         bl    @vdp.patterns.dump    ; Load sprite and character patterns
     609E 7C38     
0080               *--------------------------------------------------------------
0081               * Initialize
0082               *--------------------------------------------------------------
0083 60A0 06A0  32         bl    @mem.sams.setup.stevie
     60A2 6100     
0084                                                   ; Load SAMS pages for stevie
0085               
0086 60A4 06A0  32         bl    @tv.init              ; Initialize editor configuration
     60A6 3286     
0087 60A8 06A0  32         bl    @tv.reset             ; Reset editor
     60AA 32DA     
0088                       ;------------------------------------------------------
0089                       ; Load colorscheme amd turn on screen
0090                       ;------------------------------------------------------
0091 60AC 04E0  34         clr   @parm1                ; Screen off while reloading color scheme
     60AE A006     
0092 60B0 04E0  34         clr   @parm2                ; Don't skip colorizing marked lines
     60B2 A008     
0093 60B4 04E0  34         clr   @parm3                ; Colorize all panes
     60B6 A00A     
0094               
0095 60B8 06A0  32         bl    @pane.action.colorscheme.load
     60BA 730A     
0096                                                   ; Reload color scheme
0097                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0098                                                   ; | i  @parm2 = Skip colorizing marked lines
0099                                                   ; |             if >FFFF
0100                                                   ; | i  @parm3 = Only colorize CMDB pane
0101                                                   ; /             if >FFFF
0102                       ;-------------------------------------------------------
0103                       ; Setup editor tasks
0104                       ;-------------------------------------------------------
0105 60BC 06A0  32         bl    @at
     60BE 26D4     
0106 60C0 0000                   data  >0000           ; Cursor YX position = >0000
0107               
0108 60C2 0204  20         li    tmp0,timers           ; \ Set pointer to timers table
     60C4 A064     
0109 60C6 C804  30         mov   tmp0,@wtitab          ; /
     60C8 832C     
0110               
0112               
0113 60CA 06A0  32         bl    @mkslot
     60CC 2E9A     
0114 60CE 0002                   data >0002,task.vdp.panes    ; Task 0 - Draw VDP editor panes
     60D0 7292     
0115 60D2 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update VDP cursor position
     60D4 71C2     
0116 60D6 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle VDP cursor shape
     60D8 7264     
0117 60DA 0360                   data >0360,task.oneshot      ; Task 3 - One shot task
     60DC 72A0     
0118 60DE FFFF                   data eol
0119               
0129               
0130 60E0 0204  20         li    tmp0,>0300            ; \ Set highest slot to use in MSB.
     60E2 0300     
0131 60E4 C804  30         mov   tmp0,@btihi           ; / Tell Task Scheduler
     60E6 8314     
0132                       ;-------------------------------------------------------
0133                       ; Setup keyboard scanning and start kernel/timers
0134                       ;-------------------------------------------------------
0135 60E8 06A0  32         bl    @mkhook
     60EA 2E86     
0136 60EC 611E                   data edkey.keyscan.hook
0137                                                   ; Setup keyboard scanning hook
0138                       ;-------------------------------------------------------
0139                       ; Initialisation complete
0140                       ;-------------------------------------------------------
0141 60EE 06A0  32         bl    @magic.set            ; Set magic string
     60F0 7CE8     
0142               
0143 60F2 0204  20         li    tmp0,>37D7            ; \ Silence classic99 debugger console,
     60F4 37D7     
0144 60F6 C804  30         mov   tmp0,@>8370           ; | otherwise message flood with text
     60F8 8370     
0145 60FA 04C4  14         clr   tmp0                  ; / "VDP disk buffer header corrupted at PC"
0146                       ;-------------------------------------------------------
0147                       ; Start kernel
0148                       ;-------------------------------------------------------
0149 60FC 0460  28         b     @tmgr                 ; Run kernel and timers
     60FE 2DD2     
                   < stevie_b1.asm
0070                       ;-----------------------------------------------------------------------
0071                       ; Low-level modules
0072                       ;-----------------------------------------------------------------------
0073                       copy  "mem.sams.setup.asm"          ; SAMS memory setup for Stevie
     **** ****     > mem.sams.setup.asm
0001               * FILE......: mem.sams.setup.asm
0002               * Purpose...: SAMS Memory setup for Stevie
0003               
0004               ***************************************************************
0005               * mem.sams.setup.stevie
0006               * Setup SAMS memory pages for Stevie
0007               ***************************************************************
0008               * bl  @mem.sams.setup.stevie
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ***************************************************************
0016               mem.sams.setup.stevie:
0017 6100 0649  14         dect  stack
0018 6102 C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Set SAMS standard layout
0021                       ;------------------------------------------------------
0022 6104 06A0  32         bl    @mem.sams.set.boot    ; Set SAMS banks in boot for Stevie
     6106 7CC4     
0023               
0024 6108 06A0  32         bl    @sams.layout.copy
     610A 264C     
0025 610C A200                   data tv.sams.2000     ; Copy SAMS bank ID to shadow table.
0026               
0027 610E C820  54         mov   @tv.sams.c000,@edb.sams.page
     6110 A208     
     6112 A518     
0028 6114 C820  54         mov   @edb.sams.page,@edb.sams.hipage
     6116 A518     
     6118 A51A     
0029                                                   ; Track editor buffer SAMS page
0030                       ;------------------------------------------------------
0031                       ; Exit
0032                       ;------------------------------------------------------
0033               mem.sams.setup.stevie.exit:
0034 611A C2F9  30         mov   *stack+,r11           ; Pop r11
0035 611C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0074                       ;-----------------------------------------------------------------------
0075                       ; Keyboard actions
0076                       ;-----------------------------------------------------------------------
0077                       copy  "edkey.key.hook.asm"          ; SP2 user hook: keyboard scanning
     **** ****     > edkey.key.hook.asm
0001               * FILE......: edkey.key.hook.asm
0002               * Purpose...: Keyboard handling (spectra2 user hook)
0003               
0004               
0005               ****************************************************************
0006               * Editor - spectra2 user hook
0007               ****************************************************************
0008               edkey.keyscan.hook:
0009                       ;-------------------------------------------------------
0010                       ; Abort if stack is leaking garbage
0011                       ;-------------------------------------------------------
0012 611E 0289  22         ci    stack,sp2.stktop      ; There shouldn't be anything
     6120 A900     
0013                                                   ; on the stack anymore.
0014               
0015 6122 1304  14         jeq   !                     ; ok, continue
0016                       ;-------------------------------------------------------
0017                       ; Assert failed
0018                       ;-------------------------------------------------------
0019 6124 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6126 FFCE     
0020 6128 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     612A 2026     
0021                       ;-------------------------------------------------------
0022                       ; Check if key pressed
0023                       ;-------------------------------------------------------
0024 612C 20A0  32 !       coc   @wbit11,config        ; ANYKEY pressed ?
     612E 200A     
0025 6130 160A  14         jne   edkey.keyscan.hook.clear
0026                                                   ; No, clear buffer and exit
0027                       ;------------------------------------------------------
0028                       ; Reset flags
0029                       ;------------------------------------------------------
0030 6132 40A0  34         szc   @wbit11,config        ; Reset ANYKEY
     6134 200A     
0031 6136 4820  54         szc   @w$0001,@kbflags      ; Remove keyboard buffer cleared flag
     6138 2002     
     613A A026     
0032                       ;------------------------------------------------------
0033                       ; Key pressed
0034                       ;------------------------------------------------------
0035 613C C820  54         mov   @keycode1,@keycode2   ; Save as previous key
     613E A028     
     6140 A02A     
0036 6142 0460  28         b     @edkey.key.process    ; Process key
     6144 6166     
0037                       ;------------------------------------------------------
0038                       ; Clear keyboard buffer if no key pressed
0039                       ;------------------------------------------------------
0040               edkey.keyscan.hook.clear:
0041 6146 C120  34         mov   @kbflags,tmp0         ; Get keyboard control flags
     6148 A026     
0042 614A 2120  32         coc   @w$0001,tmp0          ; Keyboard buffer already cleared?
     614C 2002     
0043 614E 1309  14         jeq   edkey.keyscan.hook.exit
0044                                                   ; Yes, skip to exit
0045               
0046 6150 04E0  34         clr   @keycode1             ; \
     6152 A028     
0047 6154 04E0  34         clr   @keycode2             ; | Clear keyboard buffer and set
     6156 A02A     
0048 6158 0264  22         ori   tmp0,kbf.kbclear      ; | keyboard buffer cleared flag
     615A 0001     
0049 615C C804  38         mov   tmp0,@kbflags         ; /
     615E A026     
0050                       ;------------------------------------------------------
0051                       ; Keyboard debounce
0052                       ;------------------------------------------------------
0053               edkey.keyscan.hook.debounce:
0054 6160 1000  14         nop                         ; No purpose anymore, but branched to
0055                                                   ; from several subroutines.
0056                                                   ; Needs to be refactored.
0057                       ;------------------------------------------------------
0058                       ; Exit keyboard hook
0059                       ;------------------------------------------------------
0060               edkey.keyscan.hook.exit:
0061 6162 0460  28         b     @hookok               ; Return
     6164 2DD6     
                   < stevie_b1.asm
0078                       copy  "edkey.key.process.asm"       ; Process keyboard actions
     **** ****     > edkey.key.process.asm
0001               * FILE......: edkey.key.process.asm
0002               * Purpose...: Process keyboard key press. Shared code for all panes
0003               
0004               ****************************************************************
0005               * Editor - Process action keys
0006               ****************************************************************
0007               edkey.key.process:
0008 6166 C160  34         mov   @keycode1,tmp1        ; Get key pressed
     6168 A028     
0009 616A 0A85  32         sla   tmp1,8                ; Move to MSB
0010 616C 0707  14         seto  tmp3                  ; EOL marker
0011                       ;-------------------------------------------------------
0012                       ; (1) Process key depending on pane with focus
0013                       ;-------------------------------------------------------
0014 616E C1A0  34         mov   @tv.pane.focus,tmp2
     6170 A222     
0015 6172 0286  22         ci    tmp2,pane.focus.fb    ; Framebuffer has focus ?
     6174 0000     
0016 6176 1307  14         jeq   edkey.key.process.special
0017                                                   ; First check special key combinations
0018               
0019 6178 0286  22         ci    tmp2,pane.focus.cmdb  ; Command buffer has focus ?
     617A 0001     
0020 617C 1322  14         jeq   edkey.key.process.loadmap.cmdb
0021                                                   ; Yes, so load CMDB keymap
0022                       ;-------------------------------------------------------
0023                       ; Pane without focus, crash
0024                       ;-------------------------------------------------------
0025 617E C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6180 FFCE     
0026 6182 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     6184 2026     
0027                       ;-------------------------------------------------------
0028                       ; (2) Check special key combination
0029                       ;-------------------------------------------------------
0030               edkey.key.process.special:
0031 6186 0285  22         ci    tmp1,>2000            ; Space key pressed?
     6188 2000     
0032 618A 1618  14         jne   edkey.key.process.loadmap.editor
0033                                                   ; No, continue with normal checks
0034                       ;-------------------------------------------------------
0035                       ; (2a) Look for <ctrl> key
0036                       ;-------------------------------------------------------
0037 618C 0649  14         dect  stack
0038 618E C644  30         mov   tmp0,*stack           ; Push tmp0
0039 6190 0649  14         dect  stack
0040 6192 C645  30         mov   tmp1,*stack           ; Push tmp1
0041 6194 0649  14         dect  stack
0042 6196 C64C  30         mov   r12,*stack            ; Push r12
0043               
0044 6198 04C4  14         clr   tmp0                  ; Keyboard column 0
0045 619A 020C  20         li    r12,>0024             ; CRU address decoder
     619C 0024     
0046 619E 30C4  30         ldcr  tmp0,3                ; Select column
0047 61A0 020C  20         li    r12,>0006             ; Address of the first row
     61A2 0006     
0048 61A4 3605  48         stcr  tmp1,8                ; Read 8 rows
0049 61A6 0245  22         andi  tmp1,>4000            ; Test ctrl key
     61A8 4000     
0050 61AA 1605  14         jne   edkey.key.process.special.postprocess
0051                                                   ; No ctrl key pressed
0052                       ;-------------------------------------------------------
0053                       ; <ctrl> + space key pressed
0054                       ;-------------------------------------------------------
0055 61AC C339  30         mov   *stack+,r12           ; Pop r12
0056 61AE C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 61B0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 61B2 0460  28         b     @edkey.action.block.mark
     61B4 68C2     
0059                                                   ; Set block M1/M2 marker
0060                       ;-------------------------------------------------------
0061                       ; Postprocessing <ctrl> + space check
0062                       ;-------------------------------------------------------
0063               edkey.key.process.special.postprocess:
0064 61B6 C339  30         mov   *stack+,r12           ; Pop r12
0065 61B8 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0066 61BA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0067                       ;-------------------------------------------------------
0068                       ; (3) Load Editor keyboard map
0069                       ;-------------------------------------------------------
0070               edkey.key.process.loadmap.editor:
0071 61BC 0206  20         li    tmp2,keymap_actions.editor
     61BE 7D1E     
0072 61C0 1002  14         jmp   edkey.key.check.next
0073                       ;-------------------------------------------------------
0074                       ; (4) Load CMDB keyboard map
0075                       ;-------------------------------------------------------
0076               edkey.key.process.loadmap.cmdb:
0077 61C2 0206  20         li    tmp2,keymap_actions.cmdb
     61C4 7DF0     
0078                       ;-------------------------------------------------------
0079                       ; (5) Iterate over keyboard map for matching action key
0080                       ;-------------------------------------------------------
0081               edkey.key.check.next:
0082 61C6 91D6  26         cb    *tmp2,tmp3            ; EOL reached ?
0083 61C8 1328  14         jeq   edkey.key.process.addbuffer
0084                                                   ; Yes, means no action key pressed,
0085                                                   ; so add character to buffer
0086                       ;-------------------------------------------------------
0087                       ; (6) Check for action key match
0088                       ;-------------------------------------------------------
0089 61CA 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0090 61CC 130F  14         jeq   edkey.key.check.scope
0091                                                   ; Yes, check scope
0092                       ;-------------------------------------------------------
0093                       ; If key in range 'a..z' then also check 'A..Z'
0094                       ;-------------------------------------------------------
0095 61CE 0285  22         ci    tmp1,>6100            ; ASCII 97 'a'
     61D0 6100     
0096 61D2 1109  14         jlt   edkey.key.check.next.entry
0097               
0098 61D4 0285  22         ci    tmp1,>7a00            ; ASCII 122 'z'
     61D6 7A00     
0099 61D8 1506  14         jgt   edkey.key.check.next.entry
0100               
0101 61DA 0225  22         ai    tmp1,->2000           ; Make uppercase
     61DC E000     
0102 61DE 9585  26         cb    tmp1,*tmp2            ; Action key matched?
0103 61E0 1305  14         jeq   edkey.key.check.scope
0104                                                   ; Yes, check scope
0105                       ;-------------------------------------------------------
0106                       ; Key is no action key, keep case for later (buffer)
0107                       ;-------------------------------------------------------
0108 61E2 0225  22         ai    tmp1,>2000            ; Make lowercase
     61E4 2000     
0109               
0110               edkey.key.check.next.entry:
0111 61E6 0226  22         ai    tmp2,4                ; Skip current entry
     61E8 0004     
0112 61EA 10ED  14         jmp   edkey.key.check.next  ; Check next entry
0113                       ;-------------------------------------------------------
0114                       ; (7) Check scope of key
0115                       ;-------------------------------------------------------
0116               edkey.key.check.scope:
0117 61EC 0586  14         inc   tmp2                  ; Move to scope
0118 61EE 9816  42         cb    *tmp2,@tv.pane.focus+1
     61F0 A223     
0119                                                   ; (1) Process key if scope matches pane
0120 61F2 1309  14         jeq   edkey.key.process.action
0121               
0122 61F4 9816  42         cb    *tmp2,@cmdb.dialog+1  ; (2) Process key if scope matches dialog
     61F6 A71B     
0123 61F8 1306  14         jeq   edkey.key.process.action
0124                       ;-------------------------------------------------------
0125                       ; (8) Key pressed outside valid scope, ignore action entry
0126                       ;-------------------------------------------------------
0127 61FA 0226  22         ai    tmp2,3                ; Skip current entry
     61FC 0003     
0128 61FE C160  34         mov   @keycode1,tmp1        ; Restore original case of key
     6200 A028     
0129 6202 0A85  32         sla   tmp1,8                ; Move to MSB
0130 6204 10E0  14         jmp   edkey.key.check.next  ; Process next action entry
0131                       ;-------------------------------------------------------
0132                       ; (9) Trigger keyboard action
0133                       ;-------------------------------------------------------
0134               edkey.key.process.action:
0135 6206 0586  14         inc   tmp2                  ; Move to action address
0136 6208 C196  26         mov   *tmp2,tmp2            ; Get action address
0137               
0138 620A 0204  20         li    tmp0,id.dialog.unsaved
     620C 0065     
0139 620E 8120  34         c     @cmdb.dialog,tmp0
     6210 A71A     
0140 6212 1302  14         jeq   !                     ; Skip store pointer if in "Unsaved changes"
0141               
0142 6214 C806  38         mov   tmp2,@cmdb.action.ptr ; Store action address as pointer
     6216 A728     
0143 6218 0456  20 !       b     *tmp2                 ; Process key action
0144                       ;-------------------------------------------------------
0145                       ; (10) Add character to editor or cmdb buffer
0146                       ;-------------------------------------------------------
0147               edkey.key.process.addbuffer:
0148 621A C120  34         mov   @tv.pane.focus,tmp0   ; Frame buffer has focus?
     621C A222     
0149 621E 1602  14         jne   !                     ; No, skip frame buffer
0150 6220 0460  28         b     @edkey.action.char    ; Add character to frame buffer
     6222 67AC     
0151                       ;-------------------------------------------------------
0152                       ; (11) CMDB buffer
0153                       ;-------------------------------------------------------
0154 6224 0284  22 !       ci    tmp0,pane.focus.cmdb  ; CMDB has focus ?
     6226 0001     
0155 6228 1607  14         jne   edkey.key.process.crash
0156                                                   ; No, crash
0157                       ;-------------------------------------------------------
0158                       ; Don't add character if dialog has ID >= 100
0159                       ;-------------------------------------------------------
0160 622A C120  34         mov   @cmdb.dialog,tmp0
     622C A71A     
0161 622E 0284  22         ci    tmp0,99
     6230 0063     
0162 6232 1506  14         jgt   edkey.key.process.exit
0163                       ;-------------------------------------------------------
0164                       ; Add character to CMDB
0165                       ;-------------------------------------------------------
0166 6234 0460  28         b     @edkey.action.cmdb.char
     6236 6A2C     
0167                                                   ; Add character to CMDB buffer
0168                       ;-------------------------------------------------------
0169                       ; Crash
0170                       ;-------------------------------------------------------
0171               edkey.key.process.crash:
0172 6238 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     623A FFCE     
0173 623C 06A0  32         bl    @cpu.crash            ; / File error occured. Halt system.
     623E 2026     
0174                       ;-------------------------------------------------------
0175                       ; Exit
0176                       ;-------------------------------------------------------
0177               edkey.key.process.exit:
0178 6240 0460  28         b     @edkey.keyscan.hook.debounce
     6242 6160     
0179                                                   ; Back to editor main
                   < stevie_b1.asm
0079                       ;-----------------------------------------------------------------------
0080                       ; Keyboard actions - Framebuffer (1)
0081                       ;-----------------------------------------------------------------------
0082                       copy  "edkey.fb.mov.leftright.asm"  ; Move left / right / home / end
     **** ****     > edkey.fb.mov.leftright.asm
0001               * FILE......: edkey.fb.mov.leftright.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.left:
0008 6244 C120  34         mov   @fb.column,tmp0
     6246 A30C     
0009 6248 1308  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 624A 0620  34         dec   @fb.column            ; Column-- in screen buffer
     624C A30C     
0014 624E 0620  26         dec   @wyx                  ; Column-- VDP cursor
     6250 832A     
0015 6252 0620  34         dec   @fb.current
     6254 A302     
0016 6256 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6258 A31A     
0017                       ;-------------------------------------------------------
0018                       ; Exit
0019                       ;-------------------------------------------------------
0020 625A 0460  28 !       b     @edkey.keyscan.hook.debounce
     625C 6160     
0021                                                   ; Back to editor main
0022               
0023               
0024               *---------------------------------------------------------------
0025               * Cursor right
0026               *---------------------------------------------------------------
0027               edkey.action.right:
0028 625E 8820  50         c     @fb.column,@fb.row.length
     6260 A30C     
     6262 A308     
0029 6264 1408  14         jhe   !                     ; column > length line ? Skip processing
0030                       ;-------------------------------------------------------
0031                       ; Update
0032                       ;-------------------------------------------------------
0033 6266 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     6268 A30C     
0034 626A 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     626C 832A     
0035 626E 05A0  34         inc   @fb.current
     6270 A302     
0036 6272 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6274 A31A     
0037                       ;-------------------------------------------------------
0038                       ; Exit
0039                       ;-------------------------------------------------------
0040 6276 0460  28 !       b     @edkey.keyscan.hook.debounce
     6278 6160     
0041                                                   ; Back to editor main
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Cursor beginning of line
0046               *---------------------------------------------------------------
0047               edkey.action.home:
0048 627A 06A0  32         bl    @fb.cursor.home       ; Move cursor to beginning of line
     627C 6F18     
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052 627E 0460  28         b     @edkey.keyscan.hook.debounce
     6280 6160     
0053                                                   ; Back to editor main
0054               
0055               
0056               *---------------------------------------------------------------
0057               * Cursor end of line
0058               *---------------------------------------------------------------
0059               edkey.action.end:
0060 6282 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6284 A31A     
0061 6286 C120  34         mov   @fb.row.length,tmp0   ; \ Get row length
     6288 A308     
0062 628A 0284  22         ci    tmp0,80               ; | Adjust if necessary, normally cursor
     628C 0050     
0063 628E 1102  14         jlt   !                     ; | is right of last character on line,
0064 6290 0204  20         li    tmp0,79               ; / except if 80 characters on line.
     6292 004F     
0065                       ;-------------------------------------------------------
0066                       ; Set cursor X position
0067                       ;-------------------------------------------------------
0068 6294 C804  38 !       mov   tmp0,@fb.column       ; Set X position, cursor following char.
     6296 A30C     
0069 6298 06A0  32         bl    @xsetx                ; Set VDP cursor column position
     629A 26EC     
0070 629C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     629E 30A8     
0071                       ;-------------------------------------------------------
0072                       ; Exit
0073                       ;-------------------------------------------------------
0074 62A0 0460  28         b     @edkey.keyscan.hook.debounce
     62A2 6160     
0075                                                   ; Back to editor main
                   < stevie_b1.asm
0083                       copy  "edkey.fb.mov.word.asm"       ; Move previous / next word
     **** ****     > edkey.fb.mov.word.asm
0001               * FILE......: edkey.fb.mov.asm
0002               * Purpose...: Actions for moving to words in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor beginning of word or previous word
0006               *---------------------------------------------------------------
0007               edkey.action.pword:
0008 62A4 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62A6 A31A     
0009 62A8 C120  34         mov   @fb.column,tmp0
     62AA A30C     
0010 62AC 1322  14         jeq   !                     ; column=0 ? Skip further processing
0011                       ;-------------------------------------------------------
0012                       ; Prepare 2 char buffer
0013                       ;-------------------------------------------------------
0014 62AE C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     62B0 A302     
0015 62B2 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0016 62B4 1003  14         jmp   edkey.action.pword_scan_char
0017                       ;-------------------------------------------------------
0018                       ; Scan backwards to first character following space
0019                       ;-------------------------------------------------------
0020               edkey.action.pword_scan
0021 62B6 0605  14         dec   tmp1
0022 62B8 0604  14         dec   tmp0                  ; Column-- in screen buffer
0023 62BA 1315  14         jeq   edkey.action.pword_done
0024                                                   ; Column=0 ? Skip further processing
0025                       ;-------------------------------------------------------
0026                       ; Check character
0027                       ;-------------------------------------------------------
0028               edkey.action.pword_scan_char
0029 62BC D195  26         movb  *tmp1,tmp2            ; Get character
0030 62BE 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0031 62C0 D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0032 62C2 0986  32         srl   tmp2,8                ; Right justify
0033 62C4 0286  22         ci    tmp2,32               ; Space character found?
     62C6 0020     
0034 62C8 16F6  14         jne   edkey.action.pword_scan
0035                                                   ; No space found, try again
0036                       ;-------------------------------------------------------
0037                       ; Space found, now look closer
0038                       ;-------------------------------------------------------
0039 62CA 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     62CC 2020     
0040 62CE 13F3  14         jeq   edkey.action.pword_scan
0041                                                   ; Yes, so continue scanning
0042 62D0 0287  22         ci    tmp3,>20ff            ; First character is space
     62D2 20FF     
0043 62D4 13F0  14         jeq   edkey.action.pword_scan
0044                       ;-------------------------------------------------------
0045                       ; Check distance travelled
0046                       ;-------------------------------------------------------
0047 62D6 C1E0  34         mov   @fb.column,tmp3       ; re-use tmp3
     62D8 A30C     
0048 62DA 61C4  18         s     tmp0,tmp3
0049 62DC 0287  22         ci    tmp3,2                ; Did we move at least 2 positions?
     62DE 0002     
0050 62E0 11EA  14         jlt   edkey.action.pword_scan
0051                                                   ; Didn't move enough so keep on scanning
0052                       ;--------------------------------------------------------
0053                       ; Set cursor following space
0054                       ;--------------------------------------------------------
0055 62E2 0585  14         inc   tmp1
0056 62E4 0584  14         inc   tmp0                  ; Column++ in screen buffer
0057                       ;-------------------------------------------------------
0058                       ; Save position and position hardware cursor
0059                       ;-------------------------------------------------------
0060               edkey.action.pword_done:
0061 62E6 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     62E8 A30C     
0062 62EA 06A0  32         bl    @xsetx                ; Set VDP cursor X
     62EC 26EC     
0063                       ;-------------------------------------------------------
0064                       ; Exit
0065                       ;-------------------------------------------------------
0066               edkey.action.pword.exit:
0067 62EE 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     62F0 30A8     
0068 62F2 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     62F4 6160     
0069               
0070               
0071               
0072               *---------------------------------------------------------------
0073               * Cursor next word
0074               *---------------------------------------------------------------
0075               edkey.action.nword:
0076 62F6 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     62F8 A31A     
0077 62FA 04C8  14         clr   tmp4                  ; Reset multiple spaces mode
0078 62FC C120  34         mov   @fb.column,tmp0
     62FE A30C     
0079 6300 8804  34         c     tmp0,@fb.row.length
     6302 A308     
0080 6304 1426  14         jhe   !                     ; column=last char ? Skip further processing
0081                       ;-------------------------------------------------------
0082                       ; Prepare 2 char buffer
0083                       ;-------------------------------------------------------
0084 6306 C160  34         mov   @fb.current,tmp1      ; Get pointer to char in frame buffer
     6308 A302     
0085 630A 0707  14         seto  tmp3                  ; Fill 2 char buffer with >ffff
0086 630C 1006  14         jmp   edkey.action.nword_scan_char
0087                       ;-------------------------------------------------------
0088                       ; Multiple spaces mode
0089                       ;-------------------------------------------------------
0090               edkey.action.nword_ms:
0091 630E 0708  14         seto  tmp4                  ; Set multiple spaces mode
0092                       ;-------------------------------------------------------
0093                       ; Scan forward to first character following space
0094                       ;-------------------------------------------------------
0095               edkey.action.nword_scan
0096 6310 0585  14         inc   tmp1
0097 6312 0584  14         inc   tmp0                  ; Column++ in screen buffer
0098 6314 8804  34         c     tmp0,@fb.row.length
     6316 A308     
0099 6318 1316  14         jeq   edkey.action.nword_done
0100                                                   ; Column=last char ? Skip further processing
0101                       ;-------------------------------------------------------
0102                       ; Check character
0103                       ;-------------------------------------------------------
0104               edkey.action.nword_scan_char
0105 631A D195  26         movb  *tmp1,tmp2            ; Get character
0106 631C 0987  32         srl   tmp3,8                ; Shift-out old character in buffer
0107 631E D1C6  18         movb  tmp2,tmp3             ; Shift-in new character in buffer
0108 6320 0986  32         srl   tmp2,8                ; Right justify
0109               
0110 6322 0288  22         ci    tmp4,>ffff            ; Multiple space mode on?
     6324 FFFF     
0111 6326 1604  14         jne   edkey.action.nword_scan_char_other
0112                       ;-------------------------------------------------------
0113                       ; Special handling if multiple spaces found
0114                       ;-------------------------------------------------------
0115               edkey.action.nword_scan_char_ms:
0116 6328 0286  22         ci    tmp2,32
     632A 0020     
0117 632C 160C  14         jne   edkey.action.nword_done
0118                                                   ; Exit if non-space found
0119 632E 10F0  14         jmp   edkey.action.nword_scan
0120                       ;-------------------------------------------------------
0121                       ; Normal handling
0122                       ;-------------------------------------------------------
0123               edkey.action.nword_scan_char_other:
0124 6330 0286  22         ci    tmp2,32               ; Space character found?
     6332 0020     
0125 6334 16ED  14         jne   edkey.action.nword_scan
0126                                                   ; No space found, try again
0127                       ;-------------------------------------------------------
0128                       ; Space found, now look closer
0129                       ;-------------------------------------------------------
0130 6336 0287  22         ci    tmp3,>2020            ; current and previous char both spaces?
     6338 2020     
0131 633A 13E9  14         jeq   edkey.action.nword_ms
0132                                                   ; Yes, so continue scanning
0133 633C 0287  22         ci    tmp3,>20ff            ; First characer is space?
     633E 20FF     
0134 6340 13E7  14         jeq   edkey.action.nword_scan
0135                       ;--------------------------------------------------------
0136                       ; Set cursor following space
0137                       ;--------------------------------------------------------
0138 6342 0585  14         inc   tmp1
0139 6344 0584  14         inc   tmp0                  ; Column++ in screen buffer
0140                       ;-------------------------------------------------------
0141                       ; Save position and position hardware cursor
0142                       ;-------------------------------------------------------
0143               edkey.action.nword_done:
0144 6346 C804  38         mov   tmp0,@fb.column       ; tmp0 also input for @xsetx
     6348 A30C     
0145 634A 06A0  32         bl    @xsetx                ; Set VDP cursor X
     634C 26EC     
0146                       ;-------------------------------------------------------
0147                       ; Exit
0148                       ;-------------------------------------------------------
0149               edkey.action.nword.exit:
0150 634E 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6350 30A8     
0151 6352 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     6354 6160     
0152               
0153               
                   < stevie_b1.asm
0084                       copy  "edkey.fb.mov.hscroll.asm"    ; Scroll left / right
     **** ****     > edkey.fb.mov.hscroll.asm
0001               * FILE......: edkey.fb.mov.hscroll.asm
0002               * Purpose...: Horizontal scroll current page in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Scroll left
0006               *---------------------------------------------------------------
0007               edkey.action.scroll.left:
0008 6356 C120  34         mov   @fb.vwco,tmp0
     6358 A310     
0009 635A 0284  22         ci    tmp0,16
     635C 0010     
0010 635E 1504  14         jgt   !
0011                       ;-------------------------------------------------------
0012                       ; Reset View Window Column Offset
0013                       ;-------------------------------------------------------
0014 6360 04C4  14         clr   tmp0                  ; Reset view window column offset
0015 6362 04E0  34         clr   @parm1
     6364 A006     
0016 6366 1029  14         jmp   _edkey.action.scroll  ; Scroll
0017                       ;-------------------------------------------------------
0018                       ; Scroll left
0019                       ;-------------------------------------------------------
0020 6368 0224  22 !       ai    tmp0,-16              ; Scroll left
     636A FFF0     
0021 636C C804  38         mov   tmp0,@parm1           ; View Window Column offset
     636E A006     
0022               
0023 6370 0204  20         li    tmp0,16               ; Temporary constant
     6372 0010     
0024 6374 8820  50         c     @fb.column,@w$0040    ; column > 64 ?
     6376 A30C     
     6378 200E     
0025 637A 111F  14         jlt   _edkey.action.scroll
0026                       ;-------------------------------------------------------
0027                       ; Update cursor X position
0028                       ;-------------------------------------------------------
0029 637C A804  38         a     tmp0,@fb.column       ; Column in screen buffer
     637E A30C     
0030 6380 A804  30         a     tmp0,@wyx             ; VDP Cursor
     6382 832A     
0031 6384 A804  38         a     tmp0,@fb.current
     6386 A302     
0032 6388 1018  14         jmp   _edkey.action.scroll  ; Call internal scroll method
0033               
0034               
0035               *---------------------------------------------------------------
0036               * Scroll right
0037               *---------------------------------------------------------------
0038               edkey.action.scroll.right:
0039 638A C120  34         mov   @fb.vwco,tmp0
     638C A310     
0040 638E 0284  22         ci    tmp0,175
     6390 00AF     
0041 6392 1104  14         jlt   !
0042                       ;-------------------------------------------------------
0043                       ; Reset View Window Column Offset
0044                       ;-------------------------------------------------------
0045 6394 04C4  14         clr   tmp0                  ; Reset view window column offset
0046 6396 04E0  34         clr   @parm1
     6398 A006     
0047 639A 100F  14         jmp   _edkey.action.scroll  ; Scroll
0048                       ;-------------------------------------------------------
0049                       ; Scroll right
0050                       ;-------------------------------------------------------
0051 639C 0224  22 !       ai    tmp0,16               ; Scroll right
     639E 0010     
0052 63A0 C804  38         mov   tmp0,@parm1           ; View Window Column offset
     63A2 A006     
0053               
0054 63A4 0204  20         li    tmp0,16               ; Temporary constant
     63A6 0010     
0055 63A8 8120  34         c     @fb.column,tmp0
     63AA A30C     
0056 63AC 1106  14         jlt   _edkey.action.scroll
0057                       ;-------------------------------------------------------
0058                       ; Update cursor X position
0059                       ;-------------------------------------------------------
0060 63AE 6804  38         s     tmp0,@fb.column       ; Column in screen buffer
     63B0 A30C     
0061 63B2 6804  30         s     tmp0,@wyx             ; VDP Cursor
     63B4 832A     
0062 63B6 6804  38         s     tmp0,@fb.current
     63B8 A302     
0063               
0064               *---------------------------------------------------------------
0065               * Internal scroll method
0066               *---------------------------------------------------------------
0067               _edkey.action.scroll:
0068                       ;-------------------------------------------------------
0069                       ; Scroll
0070                       ;-------------------------------------------------------
0071 63BA 06A0  32         bl    @fb.hscroll           ; \ Horizontal scroll frame buffer window
     63BC 7B96     
0072                                                   ; / @parm1 = View Window Column offset
0073                       ;-------------------------------------------------------
0074                       ; Exit
0075                       ;-------------------------------------------------------
0076               _edkey.action.scroll.exit:
0077 63BE 0460  28         b     @edkey.keyscan.hook.debounce
     63C0 6160     
0078                                                   ; Back to editor main
                   < stevie_b1.asm
0085                       copy  "edkey.fb.mov.updown.asm"     ; Move line up / down
     **** ****     > edkey.fb.mov.updown.asm
0001               * FILE......: edkey.fb.mov.updown.asm
0002               * Purpose...: Actions for movement keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor up
0006               *---------------------------------------------------------------
0007               edkey.action.up:
0008 63C2 06A0  32         bl    @fb.cursor.up         ; Move cursor up
     63C4 6E42     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012               edkey.action.up.exit:
0013 63C6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63C8 6160     
0014               
0015               
0016               
0017               *---------------------------------------------------------------
0018               * Cursor down
0019               *---------------------------------------------------------------
0020               edkey.action.down:
0021 63CA 06A0  32         bl    @fb.cursor.down       ; Move cursor down
     63CC 6EA0     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.down.exit:
0026 63CE 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     63D0 6160     
                   < stevie_b1.asm
0086                       copy  "edkey.fb.mov.paging.asm"     ; Move page up / down
     **** ****     > edkey.fb.mov.paging.asm
0001               * FILE......: edkey.fb.mov.paging.asm
0002               * Purpose...: Move page up / down in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Previous page
0006               *---------------------------------------------------------------
0007               edkey.action.ppage:
0008 63D2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     63D4 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current row if dirty
0011                       ;-------------------------------------------------------
0012 63D6 8820  50         c     @fb.row.dirty,@w$ffff
     63D8 A30A     
     63DA 2022     
0013 63DC 1604  14         jne   edkey.action.ppage.sanity
0014 63DE 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     63E0 7024     
0015 63E2 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     63E4 A30A     
0016                       ;-------------------------------------------------------
0017                       ; Assert
0018                       ;-------------------------------------------------------
0019               edkey.action.ppage.sanity:
0020 63E6 C120  34         mov   @fb.topline,tmp0      ; Exit if already on line 1
     63E8 A304     
0021 63EA 130F  14         jeq   edkey.action.ppage.exit
0022                       ;-------------------------------------------------------
0023                       ; Special treatment top page
0024                       ;-------------------------------------------------------
0025 63EC 8804  34         c     tmp0,@fb.scrrows      ; topline > rows on screen?
     63EE A31C     
0026 63F0 1503  14         jgt   edkey.action.ppage.topline
0027 63F2 04E0  34         clr   @fb.topline           ; topline = 0
     63F4 A304     
0028 63F6 1003  14         jmp   edkey.action.ppage.refresh
0029                       ;-------------------------------------------------------
0030                       ; Adjust topline
0031                       ;-------------------------------------------------------
0032               edkey.action.ppage.topline:
0033 63F8 6820  54         s     @fb.scrrows,@fb.topline
     63FA A31C     
     63FC A304     
0034                       ;-------------------------------------------------------
0035                       ; Refresh page
0036                       ;-------------------------------------------------------
0037               edkey.action.ppage.refresh:
0038 63FE C820  54         mov   @fb.topline,@parm1
     6400 A304     
     6402 A006     
0039 6404 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6406 A312     
0040               
0041 6408 1078  14         jmp   edkey.goto.fb.toprow  ; \ Position cursor and exit
0042                                                   ; / i  @parm1 = Line in editor buffer
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046               edkey.action.ppage.exit:
0047 640A 0460  28         b     @edkey.keyscan.hook.debounce
     640C 6160     
0048                                                   ; Back to editor main
0049               
0050               
0051               
0052               
0053               *---------------------------------------------------------------
0054               * Next page
0055               *---------------------------------------------------------------
0056               edkey.action.npage:
0057 640E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6410 A31A     
0058                       ;-------------------------------------------------------
0059                       ; Crunch current row if dirty
0060                       ;-------------------------------------------------------
0061 6412 8820  50         c     @fb.row.dirty,@w$ffff
     6414 A30A     
     6416 2022     
0062 6418 1604  14         jne   edkey.action.npage.sanity
0063 641A 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     641C 7024     
0064 641E 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6420 A30A     
0065                       ;-------------------------------------------------------
0066                       ; Assert
0067                       ;-------------------------------------------------------
0068               edkey.action.npage.sanity:
0069 6422 C120  34         mov   @fb.topline,tmp0
     6424 A304     
0070 6426 A120  34         a     @fb.scrrows,tmp0
     6428 A31C     
0071 642A 0584  14         inc   tmp0                  ; Base 1 offset !
0072 642C 8804  34         c     tmp0,@edb.lines       ; Exit if on last page
     642E A504     
0073 6430 1509  14         jgt   edkey.action.npage.exit
0074                       ;-------------------------------------------------------
0075                       ; Adjust topline
0076                       ;-------------------------------------------------------
0077               edkey.action.npage.topline:
0078 6432 A820  54         a     @fb.scrrows,@fb.topline
     6434 A31C     
     6436 A304     
0079                       ;-------------------------------------------------------
0080                       ; Refresh page
0081                       ;-------------------------------------------------------
0082               edkey.action.npage.refresh:
0083 6438 C820  54         mov   @fb.topline,@parm1
     643A A304     
     643C A006     
0084 643E 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6440 A312     
0085               
0086 6442 105B  14         jmp   edkey.goto.fb.toprow  ; \ Position cursor and exit
0087                                                   ; / i  @parm1 = Line in editor buffer
0088                       ;-------------------------------------------------------
0089                       ; Exit
0090                       ;-------------------------------------------------------
0091               edkey.action.npage.exit:
0092 6444 0460  28         b     @edkey.keyscan.hook.debounce
     6446 6160     
0093                                                   ; Back to editor main
                   < stevie_b1.asm
0087                       copy  "edkey.fb.mov.topbot.asm"     ; Move file top / bottom
     **** ****     > edkey.fb.mov.topbot.asm
0001               * FILE......: edkey.fb.mov.topbot.asm
0002               * Purpose...: Move to top / bottom in editor buffer
0003               
0004               *---------------------------------------------------------------
0005               * Goto top of file
0006               *---------------------------------------------------------------
0007               edkey.action.top:
0008                       ;-------------------------------------------------------
0009                       ; Crunch current row if dirty
0010                       ;-------------------------------------------------------
0011 6448 8820  50         c     @fb.row.dirty,@w$ffff
     644A A30A     
     644C 2022     
0012 644E 1604  14         jne   edkey.action.top.refresh
0013 6450 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6452 7024     
0014 6454 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6456 A30A     
0015                       ;-------------------------------------------------------
0016                       ; Refresh page
0017                       ;-------------------------------------------------------
0018               edkey.action.top.refresh:
0019 6458 04E0  34         clr   @parm1                ; Set to 1st line in editor buffer
     645A A006     
0020 645C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     645E A312     
0021               
0022 6460 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     6462 64FA     
0023                                                   ; / i  @parm1 = Line in editor buffer
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Goto top of screen
0028               *---------------------------------------------------------------
0029               edkey.action.topscr:
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6464 8820  50         c     @fb.row.dirty,@w$ffff
     6466 A30A     
     6468 2022     
0034 646A 1604  14         jne   edkey.action.topscr.refresh
0035 646C 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     646E 7024     
0036 6470 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6472 A30A     
0037               edkey.action.topscr.refresh:
0038 6474 C820  54         mov   @fb.topline,@parm1    ; Set to top line in frame buffer
     6476 A304     
     6478 A006     
0039 647A 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     647C 64FA     
0040                                                   ; / i  @parm1 = Line in editor buffer
0041               
0042               
0043               
0044               *---------------------------------------------------------------
0045               * Goto bottom of file
0046               *---------------------------------------------------------------
0047               edkey.action.bot:
0048                       ;-------------------------------------------------------
0049                       ; Crunch current row if dirty
0050                       ;-------------------------------------------------------
0051 647E 8820  50         c     @fb.row.dirty,@w$ffff
     6480 A30A     
     6482 2022     
0052 6484 1604  14         jne   edkey.action.bot.refresh
0053 6486 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6488 7024     
0054 648A 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     648C A30A     
0055                       ;-------------------------------------------------------
0056                       ; Refresh page
0057                       ;-------------------------------------------------------
0058               edkey.action.bot.refresh:
0059 648E 8820  50         c     @edb.lines,@fb.scrrows
     6490 A504     
     6492 A31C     
0060 6494 120A  14         jle   edkey.action.bot.exit ; Skip if whole editor buffer on screen
0061               
0062 6496 C120  34         mov   @edb.lines,tmp0
     6498 A504     
0063 649A 6120  34         s     @fb.scrrows,tmp0
     649C A31C     
0064 649E C804  38         mov   tmp0,@parm1           ; Set to last page in editor buffer
     64A0 A006     
0065 64A2 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     64A4 A312     
0066               
0067 64A6 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     64A8 64FA     
0068                                                   ; / i  @parm1 = Line in editor buffer
0069                       ;-------------------------------------------------------
0070                       ; Exit
0071                       ;-------------------------------------------------------
0072               edkey.action.bot.exit:
0073 64AA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64AC 6160     
0074               
0075               
0076               
0077               *---------------------------------------------------------------
0078               * Goto bottom of screen
0079               *---------------------------------------------------------------
0080               edkey.action.botscr:
0081 64AE 0649  14         dect  stack
0082 64B0 C644  30         mov   tmp0,*stack           ; Push tmp0
0083                       ;-------------------------------------------------------
0084                       ; Crunch current row if dirty
0085                       ;-------------------------------------------------------
0086 64B2 8820  50         c     @fb.row.dirty,@w$ffff
     64B4 A30A     
     64B6 2022     
0087 64B8 1604  14         jne   edkey.action.botscr.cursor
0088 64BA 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     64BC 7024     
0089 64BE 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     64C0 A30A     
0090                       ;-------------------------------------------------------
0091                       ; Position cursor
0092                       ;-------------------------------------------------------
0093               edkey.action.botscr.cursor:
0094 64C2 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64C4 A31A     
0095               
0096 64C6 8820  50         c     @fb.scrrows,@edb.lines
     64C8 A31C     
     64CA A504     
0097 64CC 1503  14         jgt   edkey.action.botscr.eof
0098 64CE C120  34         mov   @fb.scrrows,tmp0      ; Get bottom row
     64D0 A31C     
0099 64D2 1002  14         jmp   !
0100                       ;-------------------------------------------------------
0101                       ; Cursor at EOF
0102                       ;-------------------------------------------------------
0103               edkey.action.botscr.eof:
0104 64D4 C120  34         mov   @edb.lines,tmp0       ; Get last line in file
     64D6 A504     
0105                       ;-------------------------------------------------------
0106                       ; Position cursor
0107                       ;-------------------------------------------------------
0108 64D8 0604  14 !       dec   tmp0                  ; Base 0
0109 64DA C804  38         mov   tmp0,@fb.row          ; Frame buffer bottom line
     64DC A306     
0110 64DE 04E0  34         clr   @fb.column            ; Frame buffer column 0
     64E0 A30C     
0111               
0112 64E2 C120  34         mov   @fb.row,tmp0          ;
     64E4 A306     
0113 64E6 0A84  32         sla   tmp0,8                ; Position cursor
0114 64E8 C804  30         mov   tmp0,@wyx             ;
     64EA 832A     
0115               
0116 64EC 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     64EE 30A8     
0117               
0118 64F0 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     64F2 35DE     
0119                                                   ; | i  @fb.row        = Row in frame buffer
0120                                                   ; / o  @fb.row.length = Length of row
0121                       ;-------------------------------------------------------
0122                       ; Exit
0123                       ;-------------------------------------------------------
0124               edkey.action.botscr.exit:
0125 64F4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0126 64F6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     64F8 6160     
                   < stevie_b1.asm
0088                       copy  "edkey.fb.mov.goto.asm"       ; Goto line in editor buffer
     **** ****     > edkey.fb.mov.goto.asm
0001               * FILE......: edkey.fb.mov.goto.asm
0002               * Purpose...: Goto specified line in editor buffer
0003               
0004               ***************************************************************
0005               * edkey.goto.fb.toprow
0006               *
0007               * Position cursor on first row in frame buffer and
0008               * align variables in editor buffer to match with that position.
0009               *
0010               * Internal method that needs to be called via jmp or branch
0011               * instruction.
0012               ***************************************************************
0013               * b    @edkey.goto.fb.toprow
0014               *--------------------------------------------------------------
0015               * INPUT
0016               * @parm1  = Line in editor buffer to display as top row (goto)
0017               *
0018               * Register usage
0019               * none
0020               ********|*****|*********************|**************************
0021               edkey.goto.fb.toprow:
0022 64FA 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     64FC A31A     
0023               
0024 64FE 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6500 7BBA     
0025                                                   ; | i  @parm1 = Line to start with
0026                                                   ; /             (becomes @fb.topline)
0027               
0028 6502 04E0  34         clr   @fb.row               ; Frame buffer line 0
     6504 A306     
0029 6506 04E0  34         clr   @fb.column            ; Frame buffer column 0
     6508 A30C     
0030 650A 04E0  26         clr   @wyx                  ; Position VDP cursor
     650C 832A     
0031 650E 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6510 30A8     
0032               
0033 6512 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6514 35DE     
0034                                                   ; | i  @fb.row        = Row in frame buffer
0035                                                   ; / o  @fb.row.length = Length of row
0036               
0037 6516 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6518 6160     
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Goto specified line (@parm1) in editor buffer
0042               *---------------------------------------------------------------
0043               edkey.action.goto:
0044                       ;-------------------------------------------------------
0045                       ; Crunch current row if dirty
0046                       ;-------------------------------------------------------
0047 651A 8820  50         c     @fb.row.dirty,@w$ffff
     651C A30A     
     651E 2022     
0048 6520 1609  14         jne   edkey.action.goto.refresh
0049               
0050 6522 0649  14         dect  stack
0051 6524 C660  46         mov   @parm1,*stack         ; Push parm1
     6526 A006     
0052 6528 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     652A 7024     
0053 652C C839  50         mov   *stack+,@parm1        ; Pop parm1
     652E A006     
0054               
0055 6530 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6532 A30A     
0056                       ;-------------------------------------------------------
0057                       ; Refresh page
0058                       ;-------------------------------------------------------
0059               edkey.action.goto.refresh:
0060 6534 0720  34         seto  @fb.colorize           ; Colorize M1/M2 marked lines (if present)
     6536 A312     
0061               
0062 6538 0460  28         b     @edkey.goto.fb.toprow  ; Position cursor and exit
     653A 64FA     
0063                                                    ; \ i  @parm1 = Line in editor buffer
0064                                                    ; /
                   < stevie_b1.asm
0089                       copy  "edkey.fb.del.asm"            ; Delete characters or lines
     **** ****     > edkey.fb.del.asm
0001               * FILE......: edkey.fb.del.asm
0002               * Purpose...: Delete related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Delete character
0006               *---------------------------------------------------------------
0007               edkey.action.del_char:
0008 653C 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     653E A506     
0009 6540 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6542 30A8     
0010                       ;-------------------------------------------------------
0011                       ; Assert 1 - Empty line
0012                       ;-------------------------------------------------------
0013               edkey.action.del_char.sanity1:
0014 6544 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6546 A308     
0015 6548 1336  14         jeq   edkey.action.del_char.exit
0016                                                   ; Exit if empty line
0017               
0018 654A C120  34         mov   @fb.current,tmp0      ; Get pointer
     654C A302     
0019                       ;-------------------------------------------------------
0020                       ; Assert 2 - Already at EOL
0021                       ;-------------------------------------------------------
0022               edkey.action.del_char.sanity2:
0023 654E C1C6  18         mov   tmp2,tmp3             ; \
0024 6550 0607  14         dec   tmp3                  ; / tmp3 = line length - 1
0025 6552 81E0  34         c     @fb.column,tmp3
     6554 A30C     
0026 6556 110A  14         jlt   edkey.action.del_char.sanity3
0027               
0028                       ;------------------------------------------------------
0029                       ; At EOL - clear current character
0030                       ;------------------------------------------------------
0031 6558 04C5  14         clr   tmp1                  ; \ Overwrite with character >00
0032 655A D505  30         movb  tmp1,*tmp0            ; /
0033 655C C820  54         mov   @fb.column,@fb.row.length
     655E A30C     
     6560 A308     
0034                                                   ; Row length - 1
0035 6562 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     6564 A30A     
0036 6566 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6568 A318     
0037 656A 1025  14         jmp  edkey.action.del_char.exit
0038                       ;-------------------------------------------------------
0039                       ; Assert 3 - Abort if row length > 80
0040                       ;-------------------------------------------------------
0041               edkey.action.del_char.sanity3:
0042 656C 0286  22         ci    tmp2,colrow
     656E 0050     
0043 6570 1204  14         jle   edkey.action.del_char.prep
0044                                                   ; Continue if row length <= 80
0045                       ;-----------------------------------------------------------------------
0046                       ; CPU crash
0047                       ;-----------------------------------------------------------------------
0048 6572 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     6574 FFCE     
0049 6576 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6578 2026     
0050                       ;-------------------------------------------------------
0051                       ; Calculate number of characters to move
0052                       ;-------------------------------------------------------
0053               edkey.action.del_char.prep:
0054 657A C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0055 657C 61E0  34         s     @fb.column,tmp3
     657E A30C     
0056 6580 0607  14         dec   tmp3                  ; Remove base 1 offset
0057 6582 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0058 6584 C144  18         mov   tmp0,tmp1
0059 6586 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0060 6588 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     658A A30C     
0061                       ;-------------------------------------------------------
0062                       ; Setup pointers
0063                       ;-------------------------------------------------------
0064 658C C120  34         mov   @fb.current,tmp0      ; Get pointer
     658E A302     
0065 6590 C144  18         mov   tmp0,tmp1             ; \ tmp0 = Current character
0066 6592 0585  14         inc   tmp1                  ; / tmp1 = Next character
0067                       ;-------------------------------------------------------
0068                       ; Loop from current character until end of line
0069                       ;-------------------------------------------------------
0070               edkey.action.del_char.loop:
0071 6594 DD35  42         movb  *tmp1+,*tmp0+         ; Overwrite current char with next char
0072 6596 0606  14         dec   tmp2
0073 6598 16FD  14         jne   edkey.action.del_char.loop
0074                       ;-------------------------------------------------------
0075                       ; Special treatment if line 80 characters long
0076                       ;-------------------------------------------------------
0077 659A 0206  20         li    tmp2,colrow
     659C 0050     
0078 659E 81A0  34         c     @fb.row.length,tmp2
     65A0 A308     
0079 65A2 1603  14         jne   edkey.action.del_char.save
0080 65A4 0604  14         dec   tmp0                  ; One time adjustment
0081 65A6 04C5  14         clr   tmp1
0082 65A8 D505  30         movb  tmp1,*tmp0            ; Write >00 character
0083                       ;-------------------------------------------------------
0084                       ; Save variables
0085                       ;-------------------------------------------------------
0086               edkey.action.del_char.save:
0087 65AA 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65AC A30A     
0088 65AE 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65B0 A318     
0089 65B2 0620  34         dec   @fb.row.length        ; @fb.row.length--
     65B4 A308     
0090                       ;-------------------------------------------------------
0091                       ; Exit
0092                       ;-------------------------------------------------------
0093               edkey.action.del_char.exit:
0094 65B6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65B8 6160     
0095               
0096               
0097               *---------------------------------------------------------------
0098               * Delete until end of line
0099               *---------------------------------------------------------------
0100               edkey.action.del_eol:
0101 65BA 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     65BC A506     
0102 65BE 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     65C0 30A8     
0103 65C2 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     65C4 A308     
0104 65C6 1311  14         jeq   edkey.action.del_eol.exit
0105                                                   ; Exit if empty line
0106                       ;-------------------------------------------------------
0107                       ; Prepare for erase operation
0108                       ;-------------------------------------------------------
0109 65C8 C120  34         mov   @fb.current,tmp0      ; Get pointer
     65CA A302     
0110 65CC C1A0  34         mov   @fb.colsline,tmp2
     65CE A30E     
0111 65D0 61A0  34         s     @fb.column,tmp2
     65D2 A30C     
0112 65D4 04C5  14         clr   tmp1
0113                       ;-------------------------------------------------------
0114                       ; Loop until last column in frame buffer
0115                       ;-------------------------------------------------------
0116               edkey.action.del_eol_loop:
0117 65D6 DD05  32         movb  tmp1,*tmp0+           ; Overwrite current char with >00
0118 65D8 0606  14         dec   tmp2
0119 65DA 16FD  14         jne   edkey.action.del_eol_loop
0120                       ;-------------------------------------------------------
0121                       ; Save variables
0122                       ;-------------------------------------------------------
0123 65DC 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     65DE A30A     
0124 65E0 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     65E2 A318     
0125               
0126 65E4 C820  54         mov   @fb.column,@fb.row.length
     65E6 A30C     
     65E8 A308     
0127                                                   ; Set new row length
0128                       ;-------------------------------------------------------
0129                       ; Exit
0130                       ;-------------------------------------------------------
0131               edkey.action.del_eol.exit:
0132 65EA 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     65EC 6160     
0133               
0134               
0135               *---------------------------------------------------------------
0136               * Delete current line
0137               *---------------------------------------------------------------
0138               edkey.action.del_line:
0139                       ;-------------------------------------------------------
0140                       ; Get current line in editor buffer
0141                       ;-------------------------------------------------------
0142 65EE 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     65F0 30A8     
0143 65F2 04E0  34         clr   @fb.row.dirty         ; Discard current line
     65F4 A30A     
0144               
0145 65F6 C820  54         mov   @fb.topline,@parm1    ; \
     65F8 A304     
     65FA A006     
0146 65FC A820  54         a     @fb.row,@parm1        ; | Line number to delete (base 1)
     65FE A306     
     6600 A006     
0147 6602 05A0  34         inc   @parm1                ; /
     6604 A006     
0148               
0149                       ;-------------------------------------------------------
0150                       ; Special handling if at BOT (no real line)
0151                       ;-------------------------------------------------------
0152 6606 8820  50         c     @parm1,@edb.lines     ; At BOT in editor buffer?
     6608 A006     
     660A A504     
0153 660C 1207  14         jle   edkey.action.del_line.doit
0154                                                   ; No, is real line. Continue with delete.
0155               
0156 660E C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     6610 A304     
     6612 A006     
0157 6614 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6616 7BBA     
0158                                                   ; \ i  @parm1 = Line to start with
0159                                                   ; /
0160 6618 0460  28         b     @edkey.action.up      ; Move cursor one line up
     661A 63C2     
0161                       ;-------------------------------------------------------
0162                       ; Delete line in editor buffer
0163                       ;-------------------------------------------------------
0164               edkey.action.del_line.doit:
0165 661C 06A0  32         bl    @edb.line.del         ; Delete line in editor buffer
     661E 7C1C     
0166                                                   ; \ i  @parm1 = Line number to delete
0167                                                   ; /
0168               
0169 6620 8820  50         c     @parm1,@edb.lines     ; Now at BOT in editor buffer after delete?
     6622 A006     
     6624 A504     
0170 6626 1302  14         jeq   edkey.action.del_line.refresh
0171                                                   ; Yes, skip get length. No need for garbage.
0172                       ;-------------------------------------------------------
0173                       ; Get length of current row in frame buffer
0174                       ;-------------------------------------------------------
0175 6628 06A0  32         bl   @edb.line.getlength2   ; Get length of current row
     662A 35DE     
0176                                                   ; \ i  @fb.row        = Current row
0177                                                   ; / o  @fb.row.length = Length of row
0178                       ;-------------------------------------------------------
0179                       ; Refresh frame buffer
0180                       ;-------------------------------------------------------
0181               edkey.action.del_line.refresh:
0182 662C C820  54         mov   @fb.topline,@parm1    ; Line to start with (becomes @fb.topline)
     662E A304     
     6630 A006     
0183               
0184 6632 06A0  32         bl    @fb.refresh           ; Refresh frame buffer with EB content
     6634 7BBA     
0185                                                   ; \ i  @parm1 = Line to start with
0186                                                   ; /
0187               
0188 6636 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6638 A506     
0189                       ;-------------------------------------------------------
0190                       ; Special treatment if current line was last line
0191                       ;-------------------------------------------------------
0192 663A C120  34         mov   @fb.topline,tmp0
     663C A304     
0193 663E A120  34         a     @fb.row,tmp0
     6640 A306     
0194               
0195 6642 8804  34         c     tmp0,@edb.lines       ; Was last line?
     6644 A504     
0196 6646 1102  14         jlt   edkey.action.del_line.exit
0197               
0198 6648 0460  28         b     @edkey.action.up      ; Move cursor one line up
     664A 63C2     
0199                       ;-------------------------------------------------------
0200                       ; Exit
0201                       ;-------------------------------------------------------
0202               edkey.action.del_line.exit:
0203 664C 0460  28         b     @edkey.action.home    ; Move cursor to home and return
     664E 627A     
                   < stevie_b1.asm
0090                       copy  "edkey.fb.ins.asm"            ; Insert characters or lines
     **** ****     > edkey.fb.ins.asm
0001               * FILE......: edkey.fb.ins.asm
0002               * Purpose...: Insert related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert character
0006               *
0007               * @parm1 = high byte has character to insert
0008               *---------------------------------------------------------------
0009               edkey.action.ins_char.ws:
0010 6650 0204  20         li    tmp0,>2000            ; White space
     6652 2000     
0011 6654 C804  38         mov   tmp0,@parm1
     6656 A006     
0012               edkey.action.ins_char:
0013 6658 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     665A A506     
0014 665C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     665E 30A8     
0015                       ;-------------------------------------------------------
0016                       ; Check 1 - Empty line
0017                       ;-------------------------------------------------------
0018               edkey.actions.ins.char.empty_line:
0019 6660 C120  34         mov   @fb.current,tmp0      ; Get pointer
     6662 A302     
0020 6664 C1A0  34         mov   @fb.row.length,tmp2   ; Get line length
     6666 A308     
0021 6668 1342  14         jeq   edkey.action.ins_char.append
0022                                                   ; Add character in append mode
0023                       ;-------------------------------------------------------
0024                       ; Check 2 - line-wrap if at character 80
0025                       ;-------------------------------------------------------
0026 666A C160  34         mov   @fb.column,tmp1
     666C A30C     
0027 666E 0285  22         ci    tmp1,colrow-1         ; At 80th character?
     6670 004F     
0028 6672 1118  14         jlt   !
0029 6674 C160  34         mov   @fb.row.length,tmp1
     6676 A308     
0030 6678 0285  22         ci    tmp1,colrow
     667A 0050     
0031 667C 1613  14         jne   !
0032                       ;-------------------------------------------------------
0033                       ; Wrap to new line
0034                       ;-------------------------------------------------------
0035 667E 0649  14         dect  Stack
0036 6680 C660  46         mov   @parm1,*stack         ; Save character to add
     6682 A006     
0037               
0038 6684 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6686 A506     
0039 6688 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     668A 7024     
0040 668C 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     668E A30A     
0041               
0042 6690 0720  34         seto  @parm1                ; Insert on following line
     6692 A006     
0043 6694 06A0  32         bl    @fb.insert.line       ; Insert empty line
     6696 6F42     
0044                                                   ; \ i  @parm1 = 0 for insert current line
0045                                                   ; /            >0 for insert following line
0046               
0047 6698 06A0  32         bl    @fb.cursor.down       ; Move cursor down 1 line
     669A 6EA0     
0048 669C 04C6  14         clr   tmp2                  ; Clear line length
0049 669E C839  50         mov   *stack+,@parm1        ; Restore character to add
     66A0 A006     
0050 66A2 1025  14         jmp   edkey.action.ins_char.append
0051                       ;-------------------------------------------------------
0052                       ; Check 3 - EOL
0053                       ;-------------------------------------------------------
0054 66A4 8820  50 !       c     @fb.column,@fb.row.length
     66A6 A30C     
     66A8 A308     
0055 66AA 1321  14         jeq   edkey.action.ins_char.append
0056                                                   ; Add character in append mode
0057                       ;-------------------------------------------------------
0058                       ; Check 4 - Insert only until line length reaches 80th column
0059                       ;-------------------------------------------------------
0060 66AC C160  34         mov   @fb.row.length,tmp1
     66AE A308     
0061 66B0 0285  22         ci    tmp1,colrow
     66B2 0050     
0062 66B4 1101  14         jlt   edkey.action.ins_char.prep
0063 66B6 101D  14         jmp   edkey.action.ins_char.exit
0064                       ;-------------------------------------------------------
0065                       ; Calculate number of characters to move
0066                       ;-------------------------------------------------------
0067               edkey.action.ins_char.prep:
0068 66B8 C1C6  18         mov   tmp2,tmp3             ; tmp3=line length
0069 66BA 61E0  34         s     @fb.column,tmp3
     66BC A30C     
0070 66BE 0607  14         dec   tmp3                  ; Remove base 1 offset
0071 66C0 A107  18         a     tmp3,tmp0             ; tmp0=Pointer to last char in line
0072 66C2 C144  18         mov   tmp0,tmp1
0073 66C4 0585  14         inc   tmp1                  ; tmp1=tmp0+1
0074 66C6 61A0  34         s     @fb.column,tmp2       ; tmp2=amount of characters to move
     66C8 A30C     
0075                       ;-------------------------------------------------------
0076                       ; Loop from end of line until current character
0077                       ;-------------------------------------------------------
0078               edkey.action.ins_char.loop:
0079 66CA D554  38         movb  *tmp0,*tmp1           ; Move char to the right
0080 66CC 0604  14         dec   tmp0
0081 66CE 0605  14         dec   tmp1
0082 66D0 0606  14         dec   tmp2
0083 66D2 16FB  14         jne   edkey.action.ins_char.loop
0084                       ;-------------------------------------------------------
0085                       ; Insert specified character at current position
0086                       ;-------------------------------------------------------
0087 66D4 D560  46         movb  @parm1,*tmp1          ; MSB has character to insert
     66D6 A006     
0088                       ;-------------------------------------------------------
0089                       ; Save variables and exit
0090                       ;-------------------------------------------------------
0091 66D8 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     66DA A30A     
0092 66DC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     66DE A318     
0093 66E0 05A0  34         inc   @fb.column
     66E2 A30C     
0094 66E4 05A0  26         inc   @wyx
     66E6 832A     
0095 66E8 05A0  34         inc   @fb.row.length        ; @fb.row.length
     66EA A308     
0096 66EC 1002  14         jmp   edkey.action.ins_char.exit
0097                       ;-------------------------------------------------------
0098                       ; Add character in append mode
0099                       ;-------------------------------------------------------
0100               edkey.action.ins_char.append:
0101 66EE 0460  28         b     @edkey.action.char.overwrite
     66F0 67D2     
0102                       ;-------------------------------------------------------
0103                       ; Exit
0104                       ;-------------------------------------------------------
0105               edkey.action.ins_char.exit:
0106 66F2 0460  28         b     @edkey.keyscan.hook.debounce
     66F4 6160     
0107                                                   ; Back to editor main
0108               
0109               
0110               
0111               
0112               *---------------------------------------------------------------
0113               * Insert new line on current line
0114               *---------------------------------------------------------------
0115               edkey.action.ins_line:
0116 66F6 04E0  34         clr   @parm1                ; Insert new line on curren line
     66F8 A006     
0117 66FA 06A0  32         bl    @fb.insert.line       ; Insert new line
     66FC 6F42     
0118                       ;-------------------------------------------------------
0119                       ; Exit
0120                       ;-------------------------------------------------------
0121               edkey.action.ins_line.exit:
0122 66FE 0460  28         b     @edkey.keyscan.hook.debounce
     6700 6160     
0123                                                   ; Back to editor main
0124               
0125               
0126               *---------------------------------------------------------------
0127               * Insert new line on following line
0128               *---------------------------------------------------------------
0129               edkey.action.ins_line_after:
0130 6702 0720  34         seto  @parm1                ; Insert new line on following line
     6704 A006     
0131 6706 06A0  32         bl    @fb.insert.line       ; Insert new line
     6708 6F42     
0132                       ;-------------------------------------------------------
0133                       ; Exit
0134                       ;-------------------------------------------------------
0135               edkey.action.ins_line_after.exit:
0136 670A 0460  28         b     @edkey.keyscan.hook.debounce
     670C 6160     
0137                                                   ; Back to editor main
                   < stevie_b1.asm
0091                       copy  "edkey.fb.mod.asm"            ; Actions for modifier keys
     **** ****     > edkey.fb.mod.asm
0001               * FILE......: edkey.fb.mod.asm
0002               * Purpose...: Actions for modifier keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Enter
0006               *---------------------------------------------------------------
0007               edkey.action.enter:
0008 670E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6710 A31A     
0009                       ;-------------------------------------------------------
0010                       ; Crunch current line if dirty
0011                       ;-------------------------------------------------------
0012 6712 8820  50         c     @fb.row.dirty,@w$ffff
     6714 A30A     
     6716 2022     
0013 6718 1606  14         jne   edkey.action.enter.newline
0014 671A 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     671C A506     
0015 671E 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6720 7024     
0016 6722 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6724 A30A     
0017                       ;-------------------------------------------------------
0018                       ; Insert a new line if insert mode is on
0019                       ;-------------------------------------------------------
0020               edkey.action.enter.newline:
0021 6726 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     6728 A50A     
0022 672A 1307  14         jeq   edkey.action.enter.upd_counter
0023                                                   ; Overwrite mode, skip insert
0024               
0025 672C C120  34         mov   @edb.autoinsert,tmp0  ; Autoinsert on?
     672E A50C     
0026 6730 1304  14         jeq   edkey.action.enter.upd_counter
0027                                                   ; Autoinsert off, skip insert
0028               
0029 6732 0720  34         seto  @parm1                ; Insert line on following line
     6734 A006     
0030 6736 06A0  32         bl    @fb.insert.line       ; Insert a new line
     6738 6F42     
0031                                                   ; \  i  @parm1 = current/following line
0032                                                   ; /
0033                       ;-------------------------------------------------------
0034                       ; Update line counter
0035                       ;-------------------------------------------------------
0036               edkey.action.enter.upd_counter:
0037 673A C120  34         mov   @fb.topline,tmp0
     673C A304     
0038 673E A120  34         a     @fb.row,tmp0
     6740 A306     
0039 6742 0584  14         inc   tmp0
0040 6744 8804  34         c     tmp0,@edb.lines       ; Last line in editor buffer?
     6746 A504     
0041 6748 1102  14         jlt   edkey.action.newline  ; No, continue newline
0042 674A 05A0  34         inc   @edb.lines            ; Total lines++
     674C A504     
0043                       ;-------------------------------------------------------
0044                       ; Process newline
0045                       ;-------------------------------------------------------
0046               edkey.action.newline:
0047                       ;-------------------------------------------------------
0048                       ; Scroll 1 line if cursor at bottom row of screen
0049                       ;-------------------------------------------------------
0050 674E C120  34         mov   @fb.scrrows,tmp0
     6750 A31C     
0051 6752 0604  14         dec   tmp0
0052 6754 8120  34         c     @fb.row,tmp0
     6756 A306     
0053 6758 110C  14         jlt   edkey.action.newline.down
0054                       ;-------------------------------------------------------
0055                       ; Scroll
0056                       ;-------------------------------------------------------
0057 675A C120  34         mov   @fb.scrrows,tmp0
     675C A31C     
0058 675E C820  54         mov   @fb.topline,@parm1
     6760 A304     
     6762 A006     
0059 6764 05A0  34         inc   @parm1
     6766 A006     
0060 6768 06A0  32         bl    @fb.refresh
     676A 7BBA     
0061 676C 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     676E A312     
0062 6770 1004  14         jmp   edkey.action.newline.rest
0063                       ;-------------------------------------------------------
0064                       ; Move cursor down a row, there are still rows left
0065                       ;-------------------------------------------------------
0066               edkey.action.newline.down:
0067 6772 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     6774 A306     
0068 6776 06A0  32         bl    @down                 ; Row++ VDP cursor
     6778 26DA     
0069                       ;-------------------------------------------------------
0070                       ; Set VDP cursor and save variables
0071                       ;-------------------------------------------------------
0072               edkey.action.newline.rest:
0073 677A 06A0  32         bl    @fb.get.firstnonblank
     677C 6FDC     
0074 677E C120  34         mov   @outparm1,tmp0
     6780 A016     
0075 6782 C804  38         mov   tmp0,@fb.column
     6784 A30C     
0076 6786 06A0  32         bl    @xsetx                ; Set Column=tmp0 (VDP cursor)
     6788 26EC     
0077 678A 06A0  32         bl    @edb.line.getlength2  ; Get length of new row length
     678C 35DE     
0078 678E 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6790 30A8     
0079 6792 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6794 A318     
0080                       ;-------------------------------------------------------
0081                       ; Exit
0082                       ;-------------------------------------------------------
0083               edkey.action.newline.exit:
0084 6796 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6798 6160     
0085               
0086               
0087               
0088               
0089               *---------------------------------------------------------------
0090               * Toggle insert/overwrite mode
0091               *---------------------------------------------------------------
0092               edkey.action.ins_onoff:
0093 679A 0649  14         dect  stack
0094 679C C64B  30         mov   r11,*stack            ; Save return address
0095               
0096 679E 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67A0 A31A     
0097 67A2 0560  34         inv   @edb.insmode          ; Toggle insert/overwrite mode
     67A4 A50A     
0098                       ;-------------------------------------------------------
0099                       ; Exit
0100                       ;-------------------------------------------------------
0101               edkey.action.ins_onoff.exit:
0102 67A6 C2F9  30         mov   *stack+,r11           ; Pop r11
0103 67A8 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     67AA 6160     
0104               
0105               
0106               
0107               *---------------------------------------------------------------
0108               * Add character (frame buffer)
0109               *---------------------------------------------------------------
0110               edkey.action.char:
0111 67AC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     67AE A31A     
0112                       ;-------------------------------------------------------
0113                       ; Asserts
0114                       ;-------------------------------------------------------
0115 67B0 D105  18         movb  tmp1,tmp0             ; Get keycode
0116 67B2 0984  32         srl   tmp0,8                ; MSB to LSB
0117               
0118 67B4 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     67B6 0020     
0119 67B8 112B  14         jlt   edkey.action.char.exit
0120                                                   ; Yes, skip
0121               
0122 67BA 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     67BC 007E     
0123 67BE 1528  14         jgt   edkey.action.char.exit
0124                                                   ; Yes, skip
0125                       ;-------------------------------------------------------
0126                       ; Setup
0127                       ;-------------------------------------------------------
0128 67C0 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     67C2 A506     
0129 67C4 D805  38         movb  tmp1,@parm1           ; Store character for insert
     67C6 A006     
0130 67C8 C120  34         mov   @edb.insmode,tmp0     ; Insert mode or overwrite mode?
     67CA A50A     
0131 67CC 1302  14         jeq   edkey.action.char.overwrite
0132                       ;-------------------------------------------------------
0133                       ; Insert mode
0134                       ;-------------------------------------------------------
0135               edkey.action.char.insert:
0136 67CE 0460  28         b     @edkey.action.ins_char
     67D0 6658     
0137                       ;-------------------------------------------------------
0138                       ; Overwrite mode - Write character
0139                       ;-------------------------------------------------------
0140               edkey.action.char.overwrite:
0141 67D2 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     67D4 30A8     
0142 67D6 C120  34         mov   @fb.current,tmp0      ; Get pointer
     67D8 A302     
0143               
0144 67DA D520  46         movb  @parm1,*tmp0          ; Store character in editor buffer
     67DC A006     
0145 67DE 0720  34         seto  @fb.row.dirty         ; Current row needs to be crunched/packed
     67E0 A30A     
0146 67E2 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     67E4 A318     
0147                       ;-------------------------------------------------------
0148                       ; Last column on screen reached?
0149                       ;-------------------------------------------------------
0150 67E6 C160  34         mov   @fb.column,tmp1       ; \ Columns are counted from 0 to 79.
     67E8 A30C     
0151 67EA 0285  22         ci    tmp1,colrow - 1       ; / Last column on screen?
     67EC 004F     
0152 67EE 1105  14         jlt   edkey.action.char.overwrite.incx
0153                                                   ; No, increase X position
0154               
0155 67F0 0205  20         li    tmp1,colrow           ; \
     67F2 0050     
0156 67F4 C805  38         mov   tmp1,@fb.row.length   ; / Yes, Set row length and exit.
     67F6 A308     
0157 67F8 100B  14         jmp   edkey.action.char.exit
0158                       ;-------------------------------------------------------
0159                       ; Increase column
0160                       ;-------------------------------------------------------
0161               edkey.action.char.overwrite.incx:
0162 67FA 05A0  34         inc   @fb.column            ; Column++ in screen buffer
     67FC A30C     
0163 67FE 05A0  26         inc   @wyx                  ; Column++ VDP cursor
     6800 832A     
0164                       ;-------------------------------------------------------
0165                       ; Update line length in frame buffer
0166                       ;-------------------------------------------------------
0167 6802 8820  50         c     @fb.column,@fb.row.length
     6804 A30C     
     6806 A308     
0168                                                   ; column < line length ?
0169 6808 1103  14         jlt   edkey.action.char.exit
0170                                                   ; Yes, don't update row length
0171 680A C820  54         mov   @fb.column,@fb.row.length
     680C A30C     
     680E A308     
0172                                                   ; Set row length
0173                       ;-------------------------------------------------------
0174                       ; Exit
0175                       ;-------------------------------------------------------
0176               edkey.action.char.exit:
0177 6810 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6812 6160     
                   < stevie_b1.asm
0092                       copy  "edkey.fb.ruler.asm"          ; Toggle ruler on/off
     **** ****     > edkey.fb.ruler.asm
0001               * FILE......: edkey.fb.ruler.asm
0002               * Purpose...: Actions to toggle ruler on/off
0003               
0004               *---------------------------------------------------------------
0005               * Toggle ruler on/off
0006               ********|*****|*********************|**************************
0007               edkey.action.toggle.ruler:
0008 6814 0649  14         dect  stack
0009 6816 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6818 0649  14         dect  stack
0011 681A C660  42         mov   @wyx,*stack           ; Push cursor YX
     681C 832A     
0012                       ;-------------------------------------------------------
0013                       ; Toggle ruler visibility
0014                       ;-------------------------------------------------------
0015 681E C120  34         mov   @tv.ruler.visible,tmp0
     6820 A210     
0016                                                   ; Ruler currently off?
0017 6822 1305  14         jeq   edkey.action.toggle.ruler.on
0018                                                   ; Yes, turn it on
0019                       ;-------------------------------------------------------
0020                       ; Turn ruler off
0021                       ;-------------------------------------------------------
0022               edkey.action.toggle.ruler.off:
0023 6824 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     6826 A318     
0024 6828 04E0  34         clr   @tv.ruler.visible     ; Toggle ruler visibility
     682A A210     
0025 682C 100C  14         jmp   edkey.action.toggle.ruler.fb
0026                       ;-------------------------------------------------------
0027                       ; Turn ruler on
0028                       ;-------------------------------------------------------
0029               edkey.action.toggle.ruler.on:
0030 682E C120  34         mov   @fb.scrrows,tmp0      ; \ Check if on last row in
     6830 A31C     
0031 6832 0604  14         dec   tmp0                  ; | frame buffer, if yes
0032 6834 8120  34         c     @fb.row,tmp0          ; | silenty exit without any
     6836 A306     
0033                                                   ; | action, preventing
0034                                                   ; / overflow on bottom row.
0035 6838 1308  14         jeq   edkey.action.toggle.ruler.exit
0036               
0037 683A 0720  34         seto  @fb.dirty             ; Screen refresh necessary
     683C A318     
0038 683E 0720  34         seto  @tv.ruler.visible     ; Set ruler visibility
     6840 A210     
0039 6842 06A0  32         bl    @fb.ruler.init        ; Setup ruler in RAM
     6844 7B60     
0040                       ;-------------------------------------------------------
0041                       ; Update framebuffer pane
0042                       ;-------------------------------------------------------
0043               edkey.action.toggle.ruler.fb:
0044 6846 06A0  32         bl    @pane.cmdb.hide       ; Same actions as when hiding CMDB
     6848 7AD8     
0045                       ;-------------------------------------------------------
0046                       ; Exit
0047                       ;-------------------------------------------------------
0048               edkey.action.toggle.ruler.exit:
0049 684A C839  42         mov   *stack+,@wyx          ; Pop cursor YX
     684C 832A     
0050 684E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0051 6850 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6852 6160     
                   < stevie_b1.asm
0093                       copy  "edkey.fb.misc.asm"           ; Miscelanneous actions
     **** ****     > edkey.fb.misc.asm
0001               * FILE......: edkey.fb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Quit stevie
0006               *---------------------------------------------------------------
0007               edkey.action.quit:
0008                       ;-------------------------------------------------------
0009                       ; Show dialog "unsaved changes" if editor buffer dirty
0010                       ;-------------------------------------------------------
0011 6854 C120  34         mov   @edb.dirty,tmp0
     6856 A506     
0012 6858 1302  14         jeq   !
0013 685A 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     685C 7A34     
0014                       ;-------------------------------------------------------
0015                       ; Quit Stevie
0016                       ;-------------------------------------------------------
0017 685E 0460  28 !       b     @tv.quit
     6860 32CC     
0018               
0019               
0020               *---------------------------------------------------------------
0021               * Copy code block or open "Insert from clipboard" dialog
0022               *---------------------------------------------------------------
0023               edkey.action.copyblock_or_clipboard:
0024 6862 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6864 A50E     
     6866 2022     
0025 6868 1302  14         jeq   !
0026 686A 0460  28         b     @edkey.action.block.copy
     686C 68E6     
0027                                                   ; Copy code block
0028 686E 0460  28 !       b     @dialog.clipboard     ; Open "Insert from clipboard" dialog
     6870 7A42     
                   < stevie_b1.asm
0094                       copy  "edkey.fb.file.asm"           ; File related actions
     **** ****     > edkey.fb.file.asm
0001               * FILE......: edkey.fb.fíle.asm
0002               * Purpose...: File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load next or previous file based on last char in suffix
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.fname.inc.load
0008               * b   @edkey.action.fb.fname.dec.load
0009               *---------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.cmdlen
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.fb.fname.dec.load:
0017 6872 0649  14         dect  stack
0018 6874 C644  30         mov   tmp0,*stack           ; Push tmp0
0019                       ;------------------------------------------------------
0020                       ; Adjust filename
0021                       ;------------------------------------------------------
0022 6876 04E0  34         clr   @parm2                ; Decrease ASCII value of char in suffix
     6878 A008     
0023               
0024 687A 0204  20         li    tmp0,edkey.action.fb.fname.dec.load
     687C 6872     
0025 687E C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     6880 A728     
0026                                                   ; in "Unsaved changes" dialog
0027               
0028 6882 1008  14         jmp   edkey.action.fb.fname.doit
0029               
0030               
0031               edkey.action.fb.fname.inc.load:
0032 6884 0649  14         dect  stack
0033 6886 C644  30         mov   tmp0,*stack           ; Push tmp0
0034                       ;------------------------------------------------------
0035                       ; Adjust filename
0036                       ;------------------------------------------------------
0037 6888 0720  34         seto  @parm2                ; Increase ASCII value of char in suffix
     688A A008     
0038               
0039 688C 0204  20         li    tmp0,edkey.action.fb.fname.inc.load
     688E 6884     
0040 6890 C804  38         mov   tmp0,@cmdb.action.ptr ; Set deferred action to run if proceeding
     6892 A728     
0041                                                   ; in "Unsaved changes" dialog
0042               
0043                       ;------------------------------------------------------
0044                       ; Process filename
0045                       ;------------------------------------------------------
0046               edkey.action.fb.fname.doit:
0047 6894 C120  34         mov   @edb.filename.ptr,tmp0
     6896 A514     
0048 6898 1311  14         jeq   edkey.action.fb.fname.exit
0049                                                   ; Exit early if new file.
0050               
0051 689A 0284  22         ci    tmp0,txt.newfile
     689C 38B0     
0052 689E 130E  14         jeq   edkey.action.fb.fname.exit
0053                                                   ; Exit early if "[New file]"
0054               
0055 68A0 C804  38         mov   tmp0,@parm1           ; Set filename
     68A2 A006     
0056                       ;------------------------------------------------------
0057                       ; Show dialog "Unsaved changed" if editor buffer dirty
0058                       ;------------------------------------------------------
0059 68A4 C120  34         mov   @edb.dirty,tmp0
     68A6 A506     
0060 68A8 1303  14         jeq   !
0061 68AA C139  30         mov   *stack+,tmp0          ; Pop tmp0
0062 68AC 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     68AE 7A34     
0063                       ;------------------------------------------------------
0064                       ; Update suffix
0065                       ;------------------------------------------------------
0066 68B0 06A0  32 !       bl    @fm.browse.fname.suffix
     68B2 79AE     
0067                                                   ; Filename suffix adjust
0068                                                   ; i  \ parm1 = Pointer to filename
0069                                                   ; i  / parm2 = >FFFF or >0000
0070                       ;------------------------------------------------------
0071                       ; Load file
0072                       ;------------------------------------------------------
0073               edkey.action.fb.fname.doit.loadfile:
0074 68B4 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     68B6 7AD8     
0075               
0076 68B8 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     68BA 7970     
0077                                                   ; \ i  parm1 = Pointer to length-prefixed
0078                                                   ; /            device/filename string
0079               
0080               
0081                       ;------------------------------------------------------
0082                       ; Exit
0083                       ;------------------------------------------------------
0084               edkey.action.fb.fname.exit:
0085 68BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0086 68BE 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     68C0 6448     
                   < stevie_b1.asm
0095                       copy  "edkey.fb.block.asm"          ; Actions block move/copy/delete...
     **** ****     > edkey.fb.block.asm
0001               * FILE......: edkey.fb.block.asm
0002               * Purpose...: Mark lines for block operations
0003               
0004               *---------------------------------------------------------------
0005               * Mark line M1 or M2
0006               ********|*****|*********************|**************************
0007               edkey.action.block.mark:
0008 68C2 06A0  32         bl    @edb.block.mark       ; Set M1/M2 marker
     68C4 7BD6     
0009                       ;-------------------------------------------------------
0010                       ; Exit
0011                       ;-------------------------------------------------------
0012 68C6 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68C8 6160     
0013               
0014               
0015               *---------------------------------------------------------------
0016               * Mark line M1
0017               ********|*****|*********************|**************************
0018               edkey.action.block.m1:
0019 68CA 06A0  32         bl    @edb.block.mark.m1    ; Set M1 marker
     68CC 7BE0     
0020                       ;-------------------------------------------------------
0021                       ; Exit
0022                       ;-------------------------------------------------------
0023 68CE 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     68D0 6DEA     
0024               
0025               
0026               *---------------------------------------------------------------
0027               * Mark line M2
0028               ********|*****|*********************|**************************
0029               edkey.action.block.m2:
0030 68D2 06A0  32         bl    @edb.block.mark.m2    ; Set M2 marker
     68D4 7BEA     
0031                       ;-------------------------------------------------------
0032                       ; Exit
0033                       ;-------------------------------------------------------
0034 68D6 0460  28         b     @edkey.action.cmdb.close.dialog ; Close dialog
     68D8 6DEA     
0035               
0036               
0037               *---------------------------------------------------------------
0038               * Reset block markers M1/M2
0039               ********|*****|*********************|**************************
0040               edkey.action.block.reset:
0041 68DA 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     68DC 7702     
0042 68DE 06A0  32         bl    @edb.block.reset      ; Reset block markers M1/M2
     68E0 7BFE     
0043                       ;-------------------------------------------------------
0044                       ; Exit
0045                       ;-------------------------------------------------------
0046 68E2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     68E4 6160     
0047               
0048               
0049               *---------------------------------------------------------------
0050               * Copy code block
0051               ********|*****|*********************|**************************
0052               edkey.action.block.copy:
0053 68E6 0649  14         dect  stack
0054 68E8 C644  30         mov   tmp0,*stack           ; Push tmp0
0055                       ;-------------------------------------------------------
0056                       ; Exit early if nothing to do
0057                       ;-------------------------------------------------------
0058 68EA 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     68EC A510     
     68EE 2022     
0059 68F0 1315  14         jeq   edkey.action.block.copy.exit
0060                                                   ; Yes, exit early
0061                       ;-------------------------------------------------------
0062                       ; Init
0063                       ;-------------------------------------------------------
0064 68F2 C120  30         mov   @wyx,tmp0             ; Get cursor position
     68F4 832A     
0065 68F6 0244  22         andi  tmp0,>ff00            ; Move cursor home (X=00)
     68F8 FF00     
0066 68FA C804  38         mov   tmp0,@fb.yxsave       ; Backup cursor position
     68FC A316     
0067                       ;-------------------------------------------------------
0068                       ; Copy
0069                       ;-------------------------------------------------------
0070 68FE 06A0  32         bl    @pane.errline.hide    ; Hide error line if visible
     6900 7702     
0071               
0072 6902 04E0  34         clr   @parm1                ; Set message to "Copying block..."
     6904 A006     
0073 6906 06A0  32         bl    @edb.block.copy       ; Copy code block
     6908 7C12     
0074                                                   ; \ i  @parm1    = Message flag
0075                                                   ; / o  @outparm1 = >ffff if success
0076               
0077 690A 8820  50         c     @outparm1,@w$0000     ; Copy skipped?
     690C A016     
     690E 2000     
0078 6910 1305  14         jeq   edkey.action.block.copy.exit
0079                                                   ; If yes, exit early
0080               
0081 6912 C820  54         mov   @fb.yxsave,@parm1
     6914 A316     
     6916 A006     
0082 6918 06A0  32         bl    @fb.restore           ; Restore frame buffer layout
     691A 7BA8     
0083                                                   ; \ i  @parm1 = cursor YX position
0084                                                   ; /
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               edkey.action.block.copy.exit:
0089 691C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0090 691E 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6920 6160     
0091               
0092               
0093               
0094               
0095               *---------------------------------------------------------------
0096               * Delete code block
0097               ********|*****|*********************|**************************
0098               edkey.action.block.delete:
0099                       ;-------------------------------------------------------
0100                       ; Exit early if nothing to do
0101                       ;-------------------------------------------------------
0102 6922 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6924 A510     
     6926 2022     
0103 6928 130F  14         jeq   edkey.action.block.delete.exit
0104                                                   ; Yes, exit early
0105                       ;-------------------------------------------------------
0106                       ; Delete
0107                       ;-------------------------------------------------------
0108 692A 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     692C 7702     
0109               
0110 692E 04E0  34         clr   @parm1                ; Display message "Deleting block...."
     6930 A006     
0111 6932 06A0  32         bl    @edb.block.delete     ; Delete code block
     6934 7C08     
0112                                                   ; \ i  @parm1    = Display message Yes/No
0113                                                   ; / o  @outparm1 = >ffff if success
0114                       ;-------------------------------------------------------
0115                       ; Reposition in frame buffer
0116                       ;-------------------------------------------------------
0117 6936 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     6938 A016     
     693A 2000     
0118 693C 1305  14         jeq   edkey.action.block.delete.exit
0119                                                   ; If yes, exit early
0120               
0121 693E C820  54         mov   @fb.topline,@parm1
     6940 A304     
     6942 A006     
0122 6944 0460  28         b     @edkey.goto.fb.toprow ; Position on top row in frame buffer
     6946 64FA     
0123                                                   ; \ i  @parm1 = Line to display as top row
0124                                                   ; /
0125                       ;-------------------------------------------------------
0126                       ; Exit
0127                       ;-------------------------------------------------------
0128               edkey.action.block.delete.exit:
0129 6948 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     694A 6160     
0130               
0131               
0132               *---------------------------------------------------------------
0133               * Move code block
0134               ********|*****|*********************|**************************
0135               edkey.action.block.move:
0136                       ;-------------------------------------------------------
0137                       ; Exit early if nothing to do
0138                       ;-------------------------------------------------------
0139 694C 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     694E A510     
     6950 2022     
0140 6952 1313  14         jeq   edkey.action.block.move.exit
0141                                                   ; Yes, exit early
0142                       ;-------------------------------------------------------
0143                       ; Delete
0144                       ;-------------------------------------------------------
0145 6954 06A0  32         bl    @pane.errline.hide    ; Hide error message if visible
     6956 7702     
0146               
0147 6958 0720  34         seto  @parm1                ; Set message to "Moving block..."
     695A A006     
0148 695C 06A0  32         bl    @edb.block.copy       ; Copy code block
     695E 7C12     
0149                                                   ; \ i  @parm1    = Message flag
0150                                                   ; / o  @outparm1 = >ffff if success
0151               
0152 6960 0720  34         seto  @parm1                ; Don't display delete message
     6962 A006     
0153 6964 06A0  32         bl    @edb.block.delete     ; Delete code block
     6966 7C08     
0154                                                   ; \ i  @parm1    = Display message Yes/No
0155                                                   ; / o  @outparm1 = >ffff if success
0156                       ;-------------------------------------------------------
0157                       ; Reposition in frame buffer
0158                       ;-------------------------------------------------------
0159 6968 8820  50         c     @outparm1,@w$0000     ; Delete skipped?
     696A A016     
     696C 2000     
0160 696E 13EC  14         jeq   edkey.action.block.delete.exit
0161                                                   ; If yes, exit early
0162               
0163 6970 C820  54         mov   @fb.topline,@parm1
     6972 A304     
     6974 A006     
0164 6976 0460  28         b     @edkey.goto.fb.toprow ; Position on top row in frame buffer
     6978 64FA     
0165                                                   ; \ i  @parm1 = Line to display as top row
0166                                                   ; /
0167                       ;-------------------------------------------------------
0168                       ; Exit
0169                       ;-------------------------------------------------------
0170               edkey.action.block.move.exit:
0171 697A 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     697C 6160     
0172               
0173               
0174               *---------------------------------------------------------------
0175               * Goto marker M1
0176               ********|*****|*********************|**************************
0177               edkey.action.block.goto.m1:
0178 697E 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6980 A50E     
     6982 2022     
0179 6984 1307  14         jeq   edkey.action.block.goto.m1.exit
0180                                                   ; Yes, exit early
0181                       ;-------------------------------------------------------
0182                       ; Goto marker M1
0183                       ;-------------------------------------------------------
0184 6986 C820  54         mov   @edb.block.m1,@parm1
     6988 A50E     
     698A A006     
0185 698C 0620  34         dec   @parm1                ; Base 0 offset
     698E A006     
0186               
0187 6990 0460  28         b     @edkey.action.goto    ; Goto specified line in editor bufer
     6992 651A     
0188                                                   ; \ i @parm1 = Target line in EB
0189                                                   ; /
0190                       ;-------------------------------------------------------
0191                       ; Exit
0192                       ;-------------------------------------------------------
0193               edkey.action.block.goto.m1.exit:
0194 6994 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6996 6160     
                   < stevie_b1.asm
0096                       copy  "edkey.fb.tabs.asm"           ; tab-key related actions
     **** ****     > edkey.fb.tabs.asm
0001               * FILE......: edkey.fb.tabs.asm
0002               * Purpose...: Actions for moving to tab positions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor on next tab
0006               *---------------------------------------------------------------
0007               edkey.action.fb.tab.next:
0008 6998 0649  14         dect  stack
0009 699A C64B  30         mov   r11,*stack            ; Save return address
0010 699C 06A0  32         bl    @fb.tab.next          ; Jump to next tab position on line
     699E 7B4E     
0011                       ;------------------------------------------------------
0012                       ; Exit
0013                       ;------------------------------------------------------
0014               edkey.action.fb.tab.next.exit:
0015 69A0 C2F9  30         mov   *stack+,r11           ; Pop r11
0016 69A2 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     69A4 6160     
                   < stevie_b1.asm
0097                       copy  "edkey.fb.clip.asm"           ; Clipboard actions
     **** ****     > edkey.fb.clip.asm
0001               * FILE......: edkey.fb.clip.asm
0002               * Purpose...: Clipboard File related actions in frame buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save clipboards
0006               *---------------------------------------------------------------
0007               * b   @edkey.action.fb.clip.save.[1-3]
0008               *---------------------------------------------------------------
0009               * INPUT
0010               * none
0011               *--------------------------------------------------------------
0012               * Register usage
0013               * tmp0
0014               ********|*****|*********************|**************************
0015               edkey.action.fb.clip.save.1:
0016 69A6 0204  20         li    tmp0,clip1
     69A8 3100     
0017 69AA 1005  14         jmp   !
0018               edkey.action.fb.clip.save.2:
0019 69AC 0204  20         li    tmp0,clip2
     69AE 3200     
0020 69B0 1002  14         jmp   !
0021               edkey.action.fb.clip.save.3:
0022 69B2 0204  20         li    tmp0,clip3
     69B4 3300     
0023                       ;-------------------------------------------------------
0024                       ; Save block to clipboard
0025                       ;-------------------------------------------------------
0026 69B6 C804  38 !       mov   tmp0,@parm1
     69B8 A006     
0027 69BA 06A0  32         bl    @edb.block.clip       ; Save block to clipboard
     69BC 7BF4     
0028                                                   ; \ i  @parm1 = Suffix clipboard filename
0029                                                   ; /
0030                       ;-------------------------------------------------------
0031                       ; Exit
0032                       ;-------------------------------------------------------
0033               edkey.action.fb.clip.save.exit:
0034 69BE C139  30         mov   *stack+,tmp0          ; Pop tmp0
0035               
0036 69C0 C820  54         mov   @fb.topline,@parm1    ; Get topline
     69C2 A304     
     69C4 A006     
0037 69C6 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     69C8 64FA     
0038                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0098                       ;-----------------------------------------------------------------------
0099                       ; Keyboard actions - Command Buffer
0100                       ;-----------------------------------------------------------------------
0101                       copy  "edkey.cmdb.mov.asm"          ; Actions for movement keys
     **** ****     > edkey.cmdb.mov.asm
0001               * FILE......: edkey.cmdb.mov.asm
0002               * Purpose...: Actions for movement keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Cursor left
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.left:
0008 69CA C120  34         mov   @cmdb.column,tmp0
     69CC A712     
0009 69CE 1304  14         jeq   !                     ; column=0 ? Skip further processing
0010                       ;-------------------------------------------------------
0011                       ; Update
0012                       ;-------------------------------------------------------
0013 69D0 0620  34         dec   @cmdb.column          ; Column-- in command buffer
     69D2 A712     
0014 69D4 0620  34         dec   @cmdb.cursor          ; Column-- CMDB cursor
     69D6 A70A     
0015                       ;-------------------------------------------------------
0016                       ; Exit
0017                       ;-------------------------------------------------------
0018 69D8 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     69DA 6160     
0019               
0020               
0021               *---------------------------------------------------------------
0022               * Cursor right
0023               *---------------------------------------------------------------
0024               edkey.action.cmdb.right:
0025 69DC 06A0  32         bl    @cmdb.cmd.getlength
     69DE 7B00     
0026 69E0 8820  50         c     @cmdb.column,@outparm1
     69E2 A712     
     69E4 A016     
0027 69E6 1404  14         jhe   !                     ; column > length line ? Skip processing
0028                       ;-------------------------------------------------------
0029                       ; Update
0030                       ;-------------------------------------------------------
0031 69E8 05A0  34         inc   @cmdb.column          ; Column++ in command buffer
     69EA A712     
0032 69EC 05A0  34         inc   @cmdb.cursor          ; Column++ CMDB cursor
     69EE A70A     
0033                       ;-------------------------------------------------------
0034                       ; Exit
0035                       ;-------------------------------------------------------
0036 69F0 0460  28 !       b     @edkey.keyscan.hook.debounce; Back to editor main
     69F2 6160     
0037               
0038               
0039               
0040               *---------------------------------------------------------------
0041               * Cursor beginning of line
0042               *---------------------------------------------------------------
0043               edkey.action.cmdb.home:
0044 69F4 04C4  14         clr   tmp0
0045 69F6 C804  38         mov   tmp0,@cmdb.column      ; First column
     69F8 A712     
0046 69FA 0584  14         inc   tmp0
0047 69FC D120  34         movb  @cmdb.cursor,tmp0      ; Get CMDB cursor position
     69FE A70A     
0048 6A00 C804  38         mov   tmp0,@cmdb.cursor      ; Reposition CMDB cursor
     6A02 A70A     
0049               
0050 6A04 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A06 6160     
0051               
0052               *---------------------------------------------------------------
0053               * Cursor end of line
0054               *---------------------------------------------------------------
0055               edkey.action.cmdb.end:
0056 6A08 D120  34         movb  @cmdb.cmdlen,tmp0      ; Get length byte of current command
     6A0A A72A     
0057 6A0C 0984  32         srl   tmp0,8                 ; Right justify
0058 6A0E C804  38         mov   tmp0,@cmdb.column      ; Save column position
     6A10 A712     
0059 6A12 0584  14         inc   tmp0                   ; One time adjustment command prompt
0060 6A14 0224  22         ai    tmp0,>1a00             ; Y=26
     6A16 1A00     
0061 6A18 C804  38         mov   tmp0,@cmdb.cursor      ; Set cursor position
     6A1A A70A     
0062                       ;-------------------------------------------------------
0063                       ; Exit
0064                       ;-------------------------------------------------------
0065 6A1C 0460  28         b     @edkey.keyscan.hook.debounce ; Back to editor main
     6A1E 6160     
                   < stevie_b1.asm
0102                       copy  "edkey.cmdb.mod.asm"          ; Actions for modifier keys
     **** ****     > edkey.cmdb.mod.asm
0001               * FILE......: edkey.cmdb.mod.asm
0002               * Purpose...: Actions for modifier keys in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.clear
0006               * Clear current command
0007               ***************************************************************
0008               * b  @edkey.action.cmdb.clear
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               *--------------------------------------------------------------
0019               * Notes
0020               ********|*****|*********************|**************************
0021               edkey.action.cmdb.clear:
0022                       ;-------------------------------------------------------
0023                       ; Clear current command
0024                       ;-------------------------------------------------------
0025 6A20 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6A22 7AF6     
0026 6A24 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A26 A718     
0027                       ;-------------------------------------------------------
0028                       ; Exit
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.clear.exit:
0031 6A28 0460  28         b     @edkey.action.cmdb.home
     6A2A 69F4     
0032                                                   ; Reposition cursor
0033               
0034               
0035               
0036               
0037               
0038               
0039               ***************************************************************
0040               * edkey.action.cmdb.char
0041               * Add character to command line
0042               ***************************************************************
0043               * b  @edkey.action.cmdb.char
0044               *--------------------------------------------------------------
0045               * INPUT
0046               * tmp1
0047               *--------------------------------------------------------------
0048               * OUTPUT
0049               * none
0050               *--------------------------------------------------------------
0051               * Register usage
0052               * tmp0
0053               *--------------------------------------------------------------
0054               * Notes
0055               ********|*****|*********************|**************************
0056               edkey.action.cmdb.char:
0057 6A2C 0649  14         dect  stack
0058 6A2E C644  30         mov   tmp0,*stack           ; Push tmp0
0059 6A30 0649  14         dect  stack
0060 6A32 C645  30         mov   tmp1,*stack           ; Push tmp1
0061                       ;-------------------------------------------------------
0062                       ; Asserts
0063                       ;-------------------------------------------------------
0064 6A34 C120  34         mov   @keycode1,tmp0        ; Get keycode
     6A36 A028     
0065 6A38 0284  22         ci    tmp0,32               ; Keycode < ASCII 32 ?
     6A3A 0020     
0066 6A3C 111C  14         jlt   edkey.action.cmdb.char.exit
0067                                                   ; Yes, skip
0068               
0069 6A3E 0284  22         ci    tmp0,126              ; Keycode > ASCII 126 ?
     6A40 007E     
0070 6A42 1519  14         jgt   edkey.action.cmdb.char.exit
0071                                                   ; Yes, skip
0072               
0073 6A44 0284  22         ci    tmp0,96               ; ASCII 97 'a'
     6A46 0060     
0074 6A48 1102  14         jlt   !
0075 6A4A 0224  22         ai    tmp0,-32              ; Make uppercase
     6A4C FFE0     
0076                       ;-------------------------------------------------------
0077                       ; Add character
0078                       ;-------------------------------------------------------
0079 6A4E C144  18 !       mov   tmp0,tmp1             ; \
0080 6A50 0A85  32         sla   tmp1,8                ; / Move keycode to MSB
0081               
0082 6A52 0720  34         seto  @cmdb.dirty           ; Command buffer dirty (text changed!)
     6A54 A718     
0083               
0084 6A56 0204  20         li    tmp0,cmdb.cmd         ; Get beginning of command
     6A58 A72B     
0085 6A5A A120  34         a     @cmdb.column,tmp0     ; Add current column to command
     6A5C A712     
0086 6A5E D505  30         movb  tmp1,*tmp0            ; Add character
0087 6A60 05A0  34         inc   @cmdb.column          ; Next column
     6A62 A712     
0088 6A64 05A0  34         inc   @cmdb.cursor          ; Next column cursor
     6A66 A70A     
0089               
0090 6A68 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6A6A 7B00     
0091                                                   ; \ i  @cmdb.cmd = Command string
0092                                                   ; / o  @outparm1 = Length of command
0093                       ;-------------------------------------------------------
0094                       ; Addjust length
0095                       ;-------------------------------------------------------
0096 6A6C C120  34         mov   @outparm1,tmp0
     6A6E A016     
0097 6A70 0A84  32         sla   tmp0,8               ; Move to MSB
0098 6A72 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6A74 A72A     
0099                       ;-------------------------------------------------------
0100                       ; Exit
0101                       ;-------------------------------------------------------
0102               edkey.action.cmdb.char.exit:
0103 6A76 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0104 6A78 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0105 6A7A 0460  28         b     @edkey.keyscan.hook.debounce
     6A7C 6160     
0106                                                   ; Back to editor main
                   < stevie_b1.asm
0103                       copy  "edkey.cmdb.misc.asm"         ; Miscelanneous actions
     **** ****     > edkey.cmdb.misc.asm
0001               * FILE......: edkey.cmdb.misc.asm
0002               * Purpose...: Actions for miscelanneous keys in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Show/Hide command buffer pane
0006               ********|*****|*********************|**************************
0007               edkey.action.cmdb.toggle:
0008 6A7E C120  34         mov   @cmdb.visible,tmp0
     6A80 A702     
0009 6A82 1605  14         jne   edkey.action.cmdb.hide
0010                       ;-------------------------------------------------------
0011                       ; Show pane
0012                       ;-------------------------------------------------------
0013               edkey.action.cmdb.show:
0014 6A84 04E0  34         clr   @cmdb.column          ; Column = 0
     6A86 A712     
0015 6A88 06A0  32         bl    @pane.cmdb.show       ; Show command buffer pane
     6A8A 7ACE     
0016 6A8C 1002  14         jmp   edkey.action.cmdb.toggle.exit
0017                       ;-------------------------------------------------------
0018                       ; Hide pane
0019                       ;-------------------------------------------------------
0020               edkey.action.cmdb.hide:
0021 6A8E 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6A90 7AD8     
0022                       ;-------------------------------------------------------
0023                       ; Exit
0024                       ;-------------------------------------------------------
0025               edkey.action.cmdb.toggle.exit:
0026 6A92 0460  28         b     @edkey.keyscan.hook.debounce; Back to editor main
     6A94 6160     
0027               
0028               
0029               
0030               
0031               
                   < stevie_b1.asm
0104                       copy  "edkey.cmdb.file.new.asm"     ; New file
     **** ****     > edkey.cmdb.file.new.asm
0001               * FILE......: edkey.cmdb.fíle.new.asm
0002               * Purpose...: New file from command buffer pane
0003               
0004               *---------------------------------------------------------------
0005               * New file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.file.new:
0008                       ;-------------------------------------------------------
0009                       ; New file
0010                       ;-------------------------------------------------------
0011 6A96 0649  14         dect  stack
0012 6A98 C64B  30         mov   r11,*stack            ; Save return address
0013 6A9A 0649  14         dect  stack
0014 6A9C C644  30         mov   tmp0,*stack           ; Push tmp0
0015                       ;-------------------------------------------------------
0016                       ; Show dialog "Unsaved changes" if editor buffer dirty
0017                       ;-------------------------------------------------------
0018 6A9E C120  34         mov   @edb.dirty,tmp0       ; Editor dirty?
     6AA0 A506     
0019 6AA2 1304  14         jeq   !                     ; No, skip "Unsaved changes"
0020               
0021 6AA4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0022 6AA6 C2F9  30         mov   *stack+,r11           ; Pop R11
0023 6AA8 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     6AAA 7A34     
0024                       ;-------------------------------------------------------
0025                       ; Reset editor
0026                       ;-------------------------------------------------------
0027 6AAC 06A0  32 !       bl    @pane.cmdb.hide       ; Hide CMDB pane
     6AAE 7AD8     
0028 6AB0 06A0  32         bl    @fm.newfile           ; New file in editor
     6AB2 79D2     
0029                       ;-------------------------------------------------------
0030                       ; Exit
0031                       ;-------------------------------------------------------
0032               edkey.action.cmdb.file.new.exit:
0033 6AB4 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 6AB6 C2F9  30         mov   *stack+,r11           ; Pop R11
0035 6AB8 0460  28         b     @edkey.action.top     ; Goto 1st line in editor buffer
     6ABA 6448     
                   < stevie_b1.asm
0105                       copy  "edkey.cmdb.file.load.asm"    ; Open file
     **** ****     > edkey.cmdb.file.load.asm
0001               * FILE......: edkey.cmdb.fíle.load.asm
0002               * Purpose...: Load file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Load file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.load:
0008                       ;-------------------------------------------------------
0009                       ; Load file
0010                       ;-------------------------------------------------------
0011 6ABC 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6ABE 7AD8     
0012               
0013 6AC0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6AC2 7B00     
0014 6AC4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6AC6 A016     
0015 6AC8 1607  14         jne   !                     ; No, prepare for load
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6ACA 0204  20         li    tmp0,txt.io.nofile    ; \
     6ACC 3A53     
0020 6ACE C804  38         mov   tmp0,@parm1           ; / Error message
     6AD0 A006     
0021               
0022 6AD2 06A0  32         bl    @error.display        ; Show error message
     6AD4 7ABA     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6AD6 1012  14         jmp   edkey.action.cmdb.load.exit
0027                       ;-------------------------------------------------------
0028                       ; Get filename
0029                       ;-------------------------------------------------------
0030 6AD8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6ADA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6ADC A72A     
0032               
0033 6ADE 06A0  32         bl    @cpym2m
     6AE0 24E8     
0034 6AE2 A72A                   data cmdb.cmdlen,heap.top,80
     6AE4 F000     
     6AE6 0050     
0035                                                   ; Copy filename from command line to buffer
0036                       ;-------------------------------------------------------
0037                       ; Pass filename as parm1
0038                       ;-------------------------------------------------------
0039 6AE8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6AEA F000     
0040 6AEC C804  38         mov   tmp0,@parm1
     6AEE A006     
0041                       ;-------------------------------------------------------
0042                       ; Load file
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.load.file:
0045 6AF0 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6AF2 F000     
0046 6AF4 C804  38         mov   tmp0,@parm1
     6AF6 A006     
0047               
0048 6AF8 06A0  32         bl    @fm.loadfile          ; Load DV80 file
     6AFA 7970     
0049                                                   ; \ i  parm1 = Pointer to length-prefixed
0050                                                   ; /            device/filename string
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               edkey.action.cmdb.load.exit:
0055 6AFC 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6AFE 6448     
                   < stevie_b1.asm
0106                       copy  "edkey.cmdb.file.insert.asm"  ; Insert file
     **** ****     > edkey.cmdb.file.insert.asm
0001               * FILE......: edkey.cmdb.fíle.insert.asm
0002               * Purpose...: Insert file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Insert file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.insert:
0008 6B00 0649  14         dect  stack
0009 6B02 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B04 0649  14         dect  stack
0011 6B06 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B08 A304     
0012                       ;-------------------------------------------------------
0013                       ; Insert file at current line in editor buffer
0014                       ;-------------------------------------------------------
0015 6B0A 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B0C 7AD8     
0016               
0017 6B0E 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B10 7B00     
0018 6B12 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B14 A016     
0019 6B16 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6B18 0204  20         li    tmp0,txt.io.nofile    ; \
     6B1A 3A53     
0024 6B1C C804  38         mov   tmp0,@parm1           ; / Error message
     6B1E A006     
0025               
0026 6B20 06A0  32         bl    @error.display        ; Show error message
     6B22 7ABA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6B24 1029  14         jmp   edkey.action.cmdb.insert.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6B26 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6B28 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6B2A A72A     
0036               
0037 6B2C 06A0  32         bl    @cpym2m
     6B2E 24E8     
0038 6B30 A72A                   data cmdb.cmdall,heap.top,80
     6B32 F000     
     6B34 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6B36 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B38 F000     
0044 6B3A C804  38         mov   tmp0,@parm1
     6B3C A006     
0045                       ;-------------------------------------------------------
0046                       ; Insert file at line
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.insert.file:
0049                       ;-------------------------------------------------------
0050                       ; Get line
0051                       ;-------------------------------------------------------
0052 6B3E C820  54         mov   @fb.row,@parm1
     6B40 A306     
     6B42 A006     
0053 6B44 06A0  32         bl    @fb.row2line          ; Row to editor line
     6B46 308E     
0054                                                   ; \ i @fb.topline = Top line in frame buffer
0055                                                   ; | i @parm1      = Row in frame buffer
0056                                                   ; / o @outparm1   = Matching line in EB
0057               
0058 6B48 C820  54         mov   @outparm1,@parm2      ; \ Line to insert file at is the editor
     6B4A A016     
     6B4C A008     
0059 6B4E 05A0  34         inc   @parm2                ; / line where the cursor is at +1
     6B50 A008     
0060                       ;-------------------------------------------------------
0061                       ; Get device/filename
0062                       ;-------------------------------------------------------
0063 6B52 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6B54 F000     
0064 6B56 C804  38         mov   tmp0,@parm1
     6B58 A006     
0065                       ;-------------------------------------------------------
0066                       ; Insert file
0067                       ;-------------------------------------------------------
0068 6B5A 0204  20         li    tmp0,id.file.insertfile
     6B5C 0002     
0069 6B5E C804  38         mov   tmp0,@parm3           ; Set work mode
     6B60 A00A     
0070               
0071 6B62 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6B64 7996     
0072                                                   ; \ i  parm1 = Pointer to length-prefixed
0073                                                   ; |            device/filename string
0074                                                   ; | i  parm2 = Line number to load file at
0075                                                   ; / i  parm3 = Work mode
0076                       ;-------------------------------------------------------
0077                       ; Refresh frame buffer
0078                       ;-------------------------------------------------------
0079 6B66 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6B68 A318     
0080 6B6A 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6B6C A506     
0081               
0082 6B6E C820  54         mov   @fb.topline,@parm1
     6B70 A304     
     6B72 A006     
0083 6B74 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6B76 7BBA     
0084                                                   ; | i  @parm1 = Line to start with
0085                                                   ; /             (becomes @fb.topline)
0086               
0087                       ;-------------------------------------------------------
0088                       ; Exit
0089                       ;-------------------------------------------------------
0090               edkey.action.cmdb.insert.exit:
0091 6B78 C839  50         mov   *stack+,@parm1        ; Pop top row
     6B7A A006     
0092 6B7C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0093 6B7E 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     6B80 64FA     
0094                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0107                       copy  "edkey.cmdb.file.append.asm"  ; Append file
     **** ****     > edkey.cmdb.file.append.asm
0001               * FILE......: edkey.cmdb.fíle.append.asm
0002               * Purpose...: Append file from command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Append file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.append:
0008 6B82 0649  14         dect  stack
0009 6B84 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6B86 0649  14         dect  stack
0011 6B88 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6B8A A304     
0012                       ;-------------------------------------------------------
0013                       ; Append file after last line in editor buffer
0014                       ;-------------------------------------------------------
0015 6B8C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6B8E 7AD8     
0016               
0017 6B90 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6B92 7B00     
0018 6B94 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6B96 A016     
0019 6B98 1607  14         jne   !                     ; No, prepare for load
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6B9A 0204  20         li    tmp0,txt.io.nofile    ; \
     6B9C 3A53     
0024 6B9E C804  38         mov   tmp0,@parm1           ; / Error message
     6BA0 A006     
0025               
0026 6BA2 06A0  32         bl    @error.display        ; Show error message
     6BA4 7ABA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6BA6 1022  14         jmp   edkey.action.cmdb.append.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6BA8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6BAA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6BAC A72A     
0036               
0037 6BAE 06A0  32         bl    @cpym2m
     6BB0 24E8     
0038 6BB2 A72A                   data cmdb.cmdall,heap.top,80
     6BB4 F000     
     6BB6 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6BB8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BBA F000     
0044 6BBC C804  38         mov   tmp0,@parm1
     6BBE A006     
0045                       ;-------------------------------------------------------
0046                       ; Append file
0047                       ;-------------------------------------------------------
0048               edkey.action.cmdb.append.file:
0049 6BC0 C820  54         mov   @edb.lines,@parm2     ; \ Append file after last line in
     6BC2 A504     
     6BC4 A008     
0050                                                   ; / editor buffer (base 0 offset)
0051                       ;-------------------------------------------------------
0052                       ; Get device/filename
0053                       ;-------------------------------------------------------
0054 6BC6 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6BC8 F000     
0055 6BCA C804  38         mov   tmp0,@parm1
     6BCC A006     
0056                       ;-------------------------------------------------------
0057                       ; Append file
0058                       ;-------------------------------------------------------
0059 6BCE 0204  20         li    tmp0,id.file.appendfile
     6BD0 0003     
0060 6BD2 C804  38         mov   tmp0,@parm3           ; Set work mode
     6BD4 A00A     
0061               
0062 6BD6 06A0  32         bl    @fm.insertfile        ; Insert DV80 file
     6BD8 7996     
0063                                                   ; \ i  parm1 = Pointer to length-prefixed
0064                                                   ; |            device/filename string
0065                                                   ; | i  parm2 = Line number to load file at
0066                                                   ; / i  parm3 = Work mode
0067                       ;-------------------------------------------------------
0068                       ; Refresh frame buffer
0069                       ;-------------------------------------------------------
0070 6BDA 0720  34         seto  @fb.dirty             ; Refresh frame buffer
     6BDC A318     
0071 6BDE 0720  34         seto  @edb.dirty            ; Editor buffer dirty
     6BE0 A506     
0072               
0073 6BE2 C820  54         mov   @fb.topline,@parm1
     6BE4 A304     
     6BE6 A006     
0074 6BE8 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6BEA 7BBA     
0075                                                   ; | i  @parm1 = Line to start with
0076                                                   ; /             (becomes @fb.topline)
0077               
0078                       ;-------------------------------------------------------
0079                       ; Exit
0080                       ;-------------------------------------------------------
0081               edkey.action.cmdb.append.exit:
0082 6BEC C839  50         mov   *stack+,@parm1        ; Pop top row
     6BEE A006     
0083 6BF0 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0084 6BF2 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     6BF4 64FA     
0085                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0108                       copy  "edkey.cmdb.file.clip.asm"    ; Copy clipboard to line
     **** ****     > edkey.cmdb.file.clip.asm
0001               * FILE......: edkey.cmdb.fíle.clip.asm
0002               * Purpose...: Copy clipboard file to line
0003               
0004               *---------------------------------------------------------------
0005               * Copy clipboard file to line
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clip.1
0008 6BF6 0204  20         li    tmp0,clip1
     6BF8 3100     
0009 6BFA 100C  14         jmp   edkey.action.cmdb.clip
0010               
0011               edkey.action.cmdb.clip.2
0012 6BFC 0204  20         li    tmp0,clip2
     6BFE 3200     
0013 6C00 1009  14         jmp   edkey.action.cmdb.clip
0014               
0015               edkey.action.cmdb.clip.3
0016 6C02 0204  20         li    tmp0,clip3
     6C04 3300     
0017 6C06 1006  14         jmp   edkey.action.cmdb.clip
0018               
0019               edkey.action.cmdb.clip.4
0020 6C08 0204  20         li    tmp0,clip4
     6C0A 3400     
0021 6C0C 1003  14         jmp   edkey.action.cmdb.clip
0022               
0023               edkey.action.cmdb.clip.5
0024 6C0E 0204  20         li    tmp0,clip5
     6C10 3500     
0025 6C12 1000  14         jmp   edkey.action.cmdb.clip
0026               
0027               
0028               edkey.action.cmdb.clip:
0029 6C14 C804  38         mov   tmp0,@parm1           ; Get clipboard suffix 0-9
     6C16 A006     
0030               
0031 6C18 06A0  32         bl    @film
     6C1A 2244     
0032 6C1C A72A                   data cmdb.cmdall,>00,80
     6C1E 0000     
     6C20 0050     
0033               
0034 6C22 06A0  32         bl    @cpym2m
     6C24 24E8     
0035 6C26 DE50                   data tv.clip.fname,cmdb.cmdall,80
     6C28 A72A     
     6C2A 0050     
0036                       ;------------------------------------------------------
0037                       ; Append suffix character to clipboard device/filename
0038                       ;------------------------------------------------------
0039 6C2C C120  34         mov   @tv.clip.fname,tmp0
     6C2E DE50     
0040 6C30 C144  18         mov   tmp0,tmp1
0041 6C32 0984  32         srl   tmp0,8                ; Get string length
0042 6C34 0224  22         ai    tmp0,cmdb.cmdall      ; Add base
     6C36 A72A     
0043 6C38 0584  14         inc   tmp0                  ; Consider length-prefix byte
0044 6C3A D520  46         movb  @parm1,*tmp0          ; Append suffix
     6C3C A006     
0045               
0046 6C3E 0460  28         b     @edkey.action.cmdb.insert
     6C40 6B00     
0047                                                   ; Insert file
                   < stevie_b1.asm
0109                       copy  "edkey.cmdb.file.clipdev.asm" ; Configure clipboard device
     **** ****     > edkey.cmdb.file.clipdev.asm
0001               * FILE......: edkey.cmdb.fíle.clipdev.asm
0002               * Purpose...: Configure clipboard device
0003               
0004               *---------------------------------------------------------------
0005               * Configure clipboard device
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.clipdev.configure:
0008                       ;-------------------------------------------------------
0009                       ; Configure
0010                       ;-------------------------------------------------------
0011 6C42 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C44 7AD8     
0012               
0013 6C46 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6C48 7B00     
0014 6C4A C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6C4C A016     
0015 6C4E 1607  14         jne   !                     ; No, set clipboard device and filename
0016                       ;-------------------------------------------------------
0017                       ; No filename specified
0018                       ;-------------------------------------------------------
0019 6C50 0204  20         li    tmp0,txt.io.nofile    ; \
     6C52 3A53     
0020 6C54 C804  38         mov   tmp0,@parm1           ; / Error message
     6C56 A006     
0021               
0022 6C58 06A0  32         bl    @error.display        ; Show error message
     6C5A 7ABA     
0023                                                   ; \ i  @parm1 = Pointer to error message
0024                                                   ; /
0025               
0026 6C5C 1018  14         jmp   edkey.action.cmdb.clipdev.configure.exit
0027                       ;-------------------------------------------------------
0028                       ; Set clipboard device and filename
0029                       ;-------------------------------------------------------
0030 6C5E 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0031 6C60 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6C62 A72A     
0032               
0033 6C64 06A0  32         bl    @cpym2m
     6C66 24E8     
0034 6C68 A72A                   data cmdb.cmdall,tv.clip.fname,80
     6C6A DE50     
     6C6C 0050     
0035                                                   ; Copy filename from command line to buffer
0036               
0037                       ;-------------------------------------------------------
0038                       ; Show message
0039                       ;-------------------------------------------------------
0040               edkey.action.cmdb.clipdev.configure.message:
0041 6C6E 06A0  32         bl    @hchar
     6C70 27E0     
0042 6C72 0034                   byte 0,52,32,20
     6C74 2014     
0043 6C76 FFFF                   data EOL              ; Erase any previous message
0044               
0045 6C78 06A0  32         bl    @putat
     6C7A 2450     
0046 6C7C 0034                   byte 0,52
0047 6C7E 3855                   data txt.done.clipdev
0048                       ;-------------------------------------------------------
0049                       ; Setup one shot task for removing overlay message
0050                       ;-------------------------------------------------------
0051 6C80 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6C82 3648     
0052 6C84 C804  38         mov   tmp0,@tv.task.oneshot
     6C86 A224     
0053               
0054 6C88 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6C8A 2EC6     
0055 6C8C 0003                   data 3                ; / for getting consistent delay
0056                       ;-------------------------------------------------------
0057                       ; Exit
0058                       ;-------------------------------------------------------
0059               edkey.action.cmdb.clipdev.configure.exit:
0060 6C8E 0460  28         b    @edkey.action.top      ; Goto 1st line in editor buffer
     6C90 6448     
                   < stevie_b1.asm
0110                       copy  "edkey.cmdb.file.save.asm"    ; Save file
     **** ****     > edkey.cmdb.file.save.asm
0001               * FILE......: edkey.cmdb.fíle.save.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Save file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.save:
0008 6C92 0649  14         dect  stack
0009 6C94 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6C96 0649  14         dect  stack
0011 6C98 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6C9A A304     
0012                       ;-------------------------------------------------------
0013                       ; Save file
0014                       ;-------------------------------------------------------
0015 6C9C 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6C9E 7AD8     
0016               
0017 6CA0 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6CA2 7B00     
0018 6CA4 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6CA6 A016     
0019 6CA8 1607  14         jne   !                     ; No, prepare for save
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6CAA 0204  20         li    tmp0,txt.io.nofile    ; \
     6CAC 3A53     
0024 6CAE C804  38         mov   tmp0,@parm1           ; / Error message
     6CB0 A006     
0025               
0026 6CB2 06A0  32         bl    @error.display        ; Show error message
     6CB4 7ABA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6CB6 1026  14         jmp   edkey.action.cmdb.save.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6CB8 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6CBA D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6CBC A72A     
0036               
0037 6CBE 06A0  32         bl    @cpym2m
     6CC0 24E8     
0038 6CC2 A72A                   data cmdb.cmdlen,heap.top,80
     6CC4 F000     
     6CC6 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6CC8 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6CCA F000     
0044 6CCC C804  38         mov   tmp0,@parm1
     6CCE A006     
0045                       ;-------------------------------------------------------
0046                       ; Save all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6CD0 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6CD2 A510     
     6CD4 2022     
0049 6CD6 130B  14         jeq   edkey.action.cmdb.save.all
0050                                                   ; Yes, so save all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only save code block M1-M2
0053                       ;-------------------------------------------------------
0054 6CD8 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6CDA A50E     
     6CDC A008     
0055 6CDE 0620  34         dec   @parm2                ; /
     6CE0 A008     
0056               
0057 6CE2 C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6CE4 A510     
     6CE6 A00A     
0058               
0059 6CE8 0204  20         li    tmp0,id.file.saveblock
     6CEA 0005     
0060 6CEC 1007  14         jmp   edkey.action.cmdb.save.file
0061                       ;-------------------------------------------------------
0062                       ; Save all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.save.all:
0065 6CEE 04E0  34         clr   @parm2                ; First line to save
     6CF0 A008     
0066 6CF2 C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6CF4 A504     
     6CF6 A00A     
0067               
0068 6CF8 0204  20         li    tmp0,id.file.savefile
     6CFA 0004     
0069                       ;-------------------------------------------------------
0070                       ; Save file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.save.file:
0073 6CFC C804  38         mov   tmp0,@parm4           ; Set work mode
     6CFE A00C     
0074               
0075 6D00 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D02 79C0     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.save.exit:
0086 6D04 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D06 A006     
0087 6D08 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6D0A 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     6D0C 64FA     
0089                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0111                       copy  "edkey.cmdb.file.print.asm"   ; Print file
     **** ****     > edkey.cmdb.file.print.asm
0001               * FILE......: edkey.cmdb.fíle.print.asm
0002               * Purpose...: File related actions in command buffer pane.
0003               
0004               *---------------------------------------------------------------
0005               * Print file
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.print:
0008 6D0E 0649  14         dect  stack
0009 6D10 C644  30         mov   tmp0,*stack           ; Push tmp0
0010 6D12 0649  14         dect  stack
0011 6D14 C660  46         mov   @fb.topline,*stack    ; Push line number of fb top row
     6D16 A304     
0012                       ;-------------------------------------------------------
0013                       ; Print file
0014                       ;-------------------------------------------------------
0015 6D18 06A0  32         bl    @pane.cmdb.hide       ; Hide CMDB pane
     6D1A 7AD8     
0016               
0017 6D1C 06A0  32         bl    @cmdb.cmd.getlength   ; Get length of current command
     6D1E 7B00     
0018 6D20 C120  34         mov   @outparm1,tmp0        ; Length == 0 ?
     6D22 A016     
0019 6D24 1607  14         jne   !                     ; No, prepare for print
0020                       ;-------------------------------------------------------
0021                       ; No filename specified
0022                       ;-------------------------------------------------------
0023 6D26 0204  20         li    tmp0,txt.io.nofile    ; \
     6D28 3A53     
0024 6D2A C804  38         mov   tmp0,@parm1           ; / Error message
     6D2C A006     
0025               
0026 6D2E 06A0  32         bl    @error.display        ; Show error message
     6D30 7ABA     
0027                                                   ; \ i  @parm1 = Pointer to error message
0028                                                   ; /
0029               
0030 6D32 1026  14         jmp   edkey.action.cmdb.print.exit
0031                       ;-------------------------------------------------------
0032                       ; Get filename
0033                       ;-------------------------------------------------------
0034 6D34 0A84  32 !       sla   tmp0,8               ; LSB to MSB
0035 6D36 D804  38         movb  tmp0,@cmdb.cmdlen    ; Set length-prefix of command line string
     6D38 A72A     
0036               
0037 6D3A 06A0  32         bl    @cpym2m
     6D3C 24E8     
0038 6D3E A72A                   data cmdb.cmdlen,heap.top,80
     6D40 F000     
     6D42 0050     
0039                                                   ; Copy filename from command line to buffer
0040                       ;-------------------------------------------------------
0041                       ; Pass filename as parm1
0042                       ;-------------------------------------------------------
0043 6D44 0204  20         li    tmp0,heap.top         ; 1st line in heap
     6D46 F000     
0044 6D48 C804  38         mov   tmp0,@parm1
     6D4A A006     
0045                       ;-------------------------------------------------------
0046                       ; Print all lines in editor buffer?
0047                       ;-------------------------------------------------------
0048 6D4C 8820  50         c     @edb.block.m2,@w$ffff ; Marker M2 unset?
     6D4E A510     
     6D50 2022     
0049 6D52 130B  14         jeq   edkey.action.cmdb.print.all
0050                                                   ; Yes, so print all lines in editor buffer
0051                       ;-------------------------------------------------------
0052                       ; Only print code block M1-M2
0053                       ;-------------------------------------------------------
0054 6D54 C820  54         mov   @edb.block.m1,@parm2  ; \ First line to save (base 0)
     6D56 A50E     
     6D58 A008     
0055 6D5A 0620  34         dec   @parm2                ; /
     6D5C A008     
0056               
0057 6D5E C820  54         mov   @edb.block.m2,@parm3  ; Last line to save (base 0) + 1
     6D60 A510     
     6D62 A00A     
0058               
0059 6D64 0204  20         li    tmp0,id.file.printblock
     6D66 0008     
0060 6D68 1007  14         jmp   edkey.action.cmdb.print.file
0061                       ;-------------------------------------------------------
0062                       ; Print all lines in editor buffer
0063                       ;-------------------------------------------------------
0064               edkey.action.cmdb.print.all:
0065 6D6A 04E0  34         clr   @parm2                ; First line to save
     6D6C A008     
0066 6D6E C820  54         mov   @edb.lines,@parm3     ; Last line to save
     6D70 A504     
     6D72 A00A     
0067               
0068 6D74 0204  20         li    tmp0,id.file.printfile
     6D76 0007     
0069                       ;-------------------------------------------------------
0070                       ; Print file
0071                       ;-------------------------------------------------------
0072               edkey.action.cmdb.Print.file:
0073 6D78 C804  38         mov   tmp0,@parm4           ; Set work mode
     6D7A A00C     
0074               
0075 6D7C 06A0  32         bl    @fm.savefile          ; Save DV80 file
     6D7E 79C0     
0076                                                   ; \ i  parm1 = Pointer to length-prefixed
0077                                                   ; |            device/filename string
0078                                                   ; | i  parm2 = First line to save (base 0)
0079                                                   ; | i  parm3 = Last line to save  (base 0)
0080                                                   ; | i  parm4 = Work mode
0081                                                   ; /
0082                       ;-------------------------------------------------------
0083                       ; Exit
0084                       ;-------------------------------------------------------
0085               edkey.action.cmdb.print.exit:
0086 6D80 C839  50         mov   *stack+,@parm1        ; Pop top row
     6D82 A006     
0087 6D84 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0088 6D86 0460  28         b     @edkey.goto.fb.toprow ; \ Position cursor and exit
     6D88 64FA     
0089                                                   ; / i  @parm1 = Line in editor buffer
                   < stevie_b1.asm
0112                       copy  "edkey.cmdb.dialog.asm"       ; Dialog specific actions
     **** ****     > edkey.cmdb.dialog.asm
0001               * FILE......: edkey.cmdb.dialog.asm
0002               * Purpose...: Dialog specific actions in command buffer pane.
0003               
0004               ***************************************************************
0005               * edkey.action.cmdb.proceed
0006               * Proceed with action
0007               ***************************************************************
0008               * b   @edkey.action.cmdb.proceed
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @cmdb.action.ptr = Pointer to keyboard action to perform
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               edkey.action.cmdb.proceed:
0017                       ;-------------------------------------------------------
0018                       ; Intialisation
0019                       ;-------------------------------------------------------
0020 6D8A 04E0  34         clr   @edb.dirty            ; Clear editor buffer dirty flag
     6D8C A506     
0021 6D8E 06A0  32         bl    @pane.cursor.blink    ; Show cursor again
     6D90 7542     
0022 6D92 06A0  32         bl    @cmdb.cmd.clear       ; Clear current command
     6D94 7AF6     
0023 6D96 C120  34         mov   @cmdb.action.ptr,tmp0 ; Get pointer to keyboard action
     6D98 A728     
0024                       ;-------------------------------------------------------
0025                       ; Asserts
0026                       ;-------------------------------------------------------
0027 6D9A 0284  22         ci    tmp0,>2000
     6D9C 2000     
0028 6D9E 1104  14         jlt   !                     ; Invalid address, crash
0029               
0030 6DA0 0284  22         ci    tmp0,>7fff
     6DA2 7FFF     
0031 6DA4 1501  14         jgt   !                     ; Invalid address, crash
0032                       ;------------------------------------------------------
0033                       ; All Asserts passed
0034                       ;------------------------------------------------------
0035 6DA6 0454  20         b     *tmp0                 ; Execute action
0036                       ;------------------------------------------------------
0037                       ; Asserts failed
0038                       ;------------------------------------------------------
0039 6DA8 C80B  38 !       mov   r11,@>ffce            ; \ Save caller address
     6DAA FFCE     
0040 6DAC 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     6DAE 2026     
0041                       ;-------------------------------------------------------
0042                       ; Exit
0043                       ;-------------------------------------------------------
0044               edkey.action.cmdb.proceed.exit:
0045 6DB0 0460  28         b     @edkey.keyscan.hook.debounce
     6DB2 6160     
0046                                                   ; Back to editor main
0047               
0048               
0049               
0050               
0051               ***************************************************************
0052               * edkey.action.cmdb.fastmode.toggle
0053               * Toggle fastmode on/off
0054               ***************************************************************
0055               * b   @edkey.action.cmdb.fastmode.toggle
0056               *--------------------------------------------------------------
0057               * INPUT
0058               * none
0059               *--------------------------------------------------------------
0060               * Register usage
0061               * none
0062               ********|*****|*********************|**************************
0063               edkey.action.cmdb.fastmode.toggle:
0064 6DB4 06A0  32        bl    @fm.fastmode           ; Toggle fast mode.
     6DB6 7B32     
0065 6DB8 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DBA A718     
0066 6DBC 0460  28        b     @edkey.keyscan.hook.debounce
     6DBE 6160     
0067                                                   ; Back to editor main
0068               
0069               
0070               ***************************************************************
0071               * edkey.action.cmdb.am.toggle
0072               * Toggle 'AutoMode' on/off
0073               ***************************************************************
0074               * b   @edkey.action.cmdb.am.toggle
0075               *--------------------------------------------------------------
0076               * INPUT
0077               * none
0078               *--------------------------------------------------------------
0079               * Register usage
0080               * none
0081               ********|*****|*********************|**************************
0082               edkey.action.cmdb.am.toggle:
0083 6DC0 06A0  32        bl    @tibasic.am.toggle     ; Toggle AutoMode
     6DC2 7B28     
0084 6DC4 0720  34        seto  @cmdb.dirty            ; Command buffer dirty (text changed!)
     6DC6 A718     
0085 6DC8 0460  28        b     @edkey.keyscan.hook.debounce
     6DCA 6160     
0086                                                   ; Back to editor main
0087               
0088               
0089               
0090               ***************************************************************
0091               * edkey.action.cmdb.preset
0092               * Set command value to preset
0093               ***************************************************************
0094               * b   @edkey.action.cmdb.preset
0095               *--------------------------------------------------------------
0096               * INPUT
0097               * none
0098               *--------------------------------------------------------------
0099               * Register usage
0100               * none
0101               ********|*****|*********************|**************************
0102               edkey.action.cmdb.preset:
0103 6DCC 06A0  32        bl    @cmdb.cmd.preset       ; Set preset
     6DCE 7B0A     
0104 6DD0 0460  28        b     @edkey.keyscan.hook.debounce
     6DD2 6160     
0105                                                   ; Back to editor main
0106               
0107               
0108               
0109               ***************************************************************
0110               * dialog.close
0111               * Close dialog "Help"
0112               ***************************************************************
0113               * b   @edkey.action.cmdb.close.about
0114               *--------------------------------------------------------------
0115               * OUTPUT
0116               * none
0117               *--------------------------------------------------------------
0118               * Register usage
0119               * none
0120               ********|*****|*********************|**************************
0121               edkey.action.cmdb.close.about:
0122 6DD4 04E0  34         clr   @cmdb.dialog.var      ; Reset to Help page 1
     6DD6 A71C     
0123                       ;------------------------------------------------------
0124                       ; Erase header line
0125                       ;------------------------------------------------------
0126 6DD8 06A0  32         bl    @hchar
     6DDA 27E0     
0127 6DDC 0000                   byte 0,0,32,80*2
     6DDE 20A0     
0128 6DE0 FFFF                   data EOL
0129               
0130 6DE2 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6DE4 6E2A     
0131                       ;-------------------------------------------------------
0132                       ; Exit
0133                       ;-------------------------------------------------------
0134 6DE6 0460  28         b     @edkey.keyscan.hook.debounce
     6DE8 6160     
0135                                                   ; Back to editor main
0136               
0137               
0138               
0139               ***************************************************************
0140               * edkey.action.cmdb.close.dialog
0141               * Close dialog
0142               ***************************************************************
0143               * b   @edkey.action.cmdb.close.dialog
0144               *--------------------------------------------------------------
0145               * OUTPUT
0146               * none
0147               *--------------------------------------------------------------
0148               * Register usage
0149               * none
0150               ********|*****|*********************|**************************
0151               edkey.action.cmdb.close.dialog:
0152 6DEA 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6DEC 6E2A     
0153                       ;-------------------------------------------------------
0154                       ; Exit
0155                       ;-------------------------------------------------------
0156               edkey.action.cmdb.close.dialog.exit:
0157 6DEE 0460  28         b     @edkey.keyscan.hook.debounce
     6DF0 6160     
0158                                                   ; Back to editor main
                   < stevie_b1.asm
0113                       copy  "edkey.cmdb.shortcuts.asm"    ; Shortcuts menu actions
     **** ****     > edkey.cmdb.shortcuts.asm
0001               * FILE......: edkey.cmdb.shortcuts.asm
0002               * Purpose...: Actions in shortcuts dialog
0003               
0004               *---------------------------------------------------------------
0005               * Toggle editor AutoInsert mode
0006               *---------------------------------------------------------------
0007               edkey.action.cmdb.autoinsert:
0008 6DF2 06A0  32         bl    @hchar
     6DF4 27E0     
0009 6DF6 0034                   byte 0,52,32,20
     6DF8 2014     
0010 6DFA FFFF                   data EOL              ; Erase any previous message
0011               
0012 6DFC 0560  34         inv   @edb.autoinsert       ; Toggle AutoInsert mode
     6DFE A50C     
0013 6E00 1305  14         jeq   !
0014                       ;-------------------------------------------------------
0015                       ; Show message 'AutoInsert on'
0016                       ;-------------------------------------------------------
0017 6E02 06A0  32         bl    @putat
     6E04 2450     
0018 6E06 0034                   byte 0,52
0019 6E08 3863                   data txt.autoins.on   ; AutoInsert on
0020 6E0A 1004  14         jmp   edkey.action.cmdb.autoinsert.oneshot
0021                       ;-------------------------------------------------------
0022                       ; Show message 'AutoInsert off'
0023                       ;-------------------------------------------------------
0024 6E0C 06A0  32 !       bl    @putat
     6E0E 2450     
0025 6E10 0034                   byte 0,52
0026 6E12 3872                   data txt.autoins.off   ; AutoInsert off
0027                       ;-------------------------------------------------------
0028                       ; Setup one shot task for removing overlay message
0029                       ;-------------------------------------------------------
0030               edkey.action.cmdb.autoinsert.oneshot:
0031 6E14 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     6E16 3648     
0032 6E18 C804  38         mov   tmp0,@tv.task.oneshot
     6E1A A224     
0033               
0034 6E1C 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     6E1E 2EC6     
0035 6E20 0003                   data 3                ; / for getting consistent delay
0036                       ;-------------------------------------------------------
0037                       ; Exit
0038                       ;-------------------------------------------------------
0039               edkey.action.cmdb.autoinsert.exit:
0040 6E22 06A0  32         bl    @cmdb.dialog.close    ; Close dialog
     6E24 6E2A     
0041 6E26 0460  28         b     @edkey.keyscan.hook.debounce
     6E28 6160     
0042                                                   ; Back to editor main
                   < stevie_b1.asm
0114                       copy  "cmdb.dialog.close.asm"       ; Close dialog
     **** ****     > cmdb.dialog.close.asm
0001               * FILE......: cmdb.dialog.close
0002               * Purpose...: Close dialog
0003               
0004               ***************************************************************
0005               * cmdb.dialog.close
0006               * Close dialog
0007               ***************************************************************
0008               * bl   @cmdb.dialog.close
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * none
0015               ********|*****|*********************|**************************
0016               cmdb.dialog.close:
0017 6E2A 0649  14         dect  stack
0018 6E2C C64B  30         mov   r11,*stack            ; Save return address
0019                       ;------------------------------------------------------
0020                       ; Close dialog
0021                       ;------------------------------------------------------
0022 6E2E 04E0  34         clr   @cmdb.dialog          ; Reset dialog ID
     6E30 A71A     
0023 6E32 06A0  32         bl    @pane.cursor.blink    ; Show cursor
     6E34 7542     
0024 6E36 06A0  32         bl    @pane.cmdb.hide       ; Hide command buffer pane
     6E38 7AD8     
0025 6E3A 0720  34         seto  @fb.status.dirty      ; Trigger status lines update
     6E3C A31A     
0026                       ;-------------------------------------------------------
0027                       ; Exit
0028                       ;-------------------------------------------------------
0029               cmdb.dialog.close.exit:
0030 6E3E C2F9  30         mov   *stack+,r11           ; Pop r11
0031 6E40 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0115                       ;-----------------------------------------------------------------------
0116                       ; Logic for Framebuffer (1)
0117                       ;-----------------------------------------------------------------------
0118                       copy  "fb.cursor.up.asm"            ; Cursor up
     **** ****     > fb.cursor.up.asm
0001               * FILE......: fb.cursor.up.asm
0002               * Purpose...: Move the cursor up 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.up
0007               * Logic for moving cursor up 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.up
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.up
0021 6E42 0649  14         dect  stack
0022 6E44 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;-------------------------------------------------------
0024                       ; Crunch current line if dirty
0025                       ;-------------------------------------------------------
0026 6E46 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6E48 A31A     
0027 6E4A 8820  50         c     @fb.row.dirty,@w$ffff
     6E4C A30A     
     6E4E 2022     
0028 6E50 1604  14         jne   fb.cursor.up.cursor
0029 6E52 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6E54 7024     
0030 6E56 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6E58 A30A     
0031                       ;-------------------------------------------------------
0032                       ; Move cursor
0033                       ;-------------------------------------------------------
0034               fb.cursor.up.cursor:
0035 6E5A C120  34         mov   @fb.row,tmp0
     6E5C A306     
0036 6E5E 150B  14         jgt   fb.cursor.up.cursor_up
0037                                                   ; Move cursor up if fb.row > 0
0038 6E60 C120  34         mov   @fb.topline,tmp0      ; Do we need to scroll?
     6E62 A304     
0039 6E64 130C  14         jeq   fb.cursor.up.set_cursorx
0040                                                   ; At top, only position cursor X
0041                       ;-------------------------------------------------------
0042                       ; Scroll 1 line
0043                       ;-------------------------------------------------------
0044 6E66 0604  14         dec   tmp0                  ; fb.topline--
0045 6E68 C804  38         mov   tmp0,@parm1           ; Scroll one line up
     6E6A A006     
0046               
0047 6E6C 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6E6E 7BBA     
0048                                                   ; | i  @parm1 = Line to start with
0049                                                   ; /             (becomes @fb.topline)
0050               
0051 6E70 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6E72 A312     
0052 6E74 1004  14         jmp   fb.cursor.up.set_cursorx
0053                       ;-------------------------------------------------------
0054                       ; Move cursor up
0055                       ;-------------------------------------------------------
0056               fb.cursor.up.cursor_up:
0057 6E76 0620  34         dec   @fb.row               ; Row-- in screen buffer
     6E78 A306     
0058 6E7A 06A0  32         bl    @up                   ; Row-- VDP cursor
     6E7C 26E2     
0059                       ;-------------------------------------------------------
0060                       ; Check line length and position cursor
0061                       ;-------------------------------------------------------
0062               fb.cursor.up.set_cursorx:
0063 6E7E 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6E80 35DE     
0064                                                   ; | i  @fb.row        = Row in frame buffer
0065                                                   ; / o  @fb.row.length = Length of row
0066               
0067 6E82 8820  50         c     @fb.column,@fb.row.length
     6E84 A30C     
     6E86 A308     
0068 6E88 1207  14         jle   fb.cursor.up.exit
0069                       ;-------------------------------------------------------
0070                       ; Adjust cursor column position
0071                       ;-------------------------------------------------------
0072 6E8A C820  54         mov   @fb.row.length,@fb.column
     6E8C A308     
     6E8E A30C     
0073 6E90 C120  34         mov   @fb.column,tmp0
     6E92 A30C     
0074 6E94 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6E96 26EC     
0075                       ;-------------------------------------------------------
0076                       ; Exit
0077                       ;-------------------------------------------------------
0078               fb.cursor.up.exit:
0079 6E98 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6E9A 30A8     
0080 6E9C C2F9  30         mov   *stack+,r11           ; Pop r11
0081 6E9E 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0119                       copy  "fb.cursor.down.asm"          ; Cursor down
     **** ****     > fb.cursor.down.asm
0001               * FILE......: fb.cursor.down.asm
0002               * Purpose...: Move the cursor down 1 line
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.down
0007               * Logic for moving cursor down 1 line
0008               ***************************************************************
0009               * bl @fb.cursor.down
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * none
0019               ********|*****|*********************|**************************
0020               fb.cursor.down:
0021 6EA0 0649  14         dect  stack
0022 6EA2 C64B  30         mov   r11,*stack            ; Save return address
0023                       ;------------------------------------------------------
0024                       ; Last line?
0025                       ;------------------------------------------------------
0026 6EA4 8820  50         c     @fb.row,@edb.lines    ; Last line in editor buffer ?
     6EA6 A306     
     6EA8 A504     
0027 6EAA 1332  14         jeq   fb.cursor.down.exit
0028                                                   ; Yes, skip further processing
0029 6EAC 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6EAE A31A     
0030                       ;-------------------------------------------------------
0031                       ; Crunch current row if dirty
0032                       ;-------------------------------------------------------
0033 6EB0 8820  50         c     @fb.row.dirty,@w$ffff
     6EB2 A30A     
     6EB4 2022     
0034 6EB6 1604  14         jne   fb.cursor.down.move
0035 6EB8 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6EBA 7024     
0036 6EBC 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6EBE A30A     
0037                       ;-------------------------------------------------------
0038                       ; Move cursor
0039                       ;-------------------------------------------------------
0040               fb.cursor.down.move:
0041                       ;-------------------------------------------------------
0042                       ; EOF reached?
0043                       ;-------------------------------------------------------
0044 6EC0 C120  34         mov   @fb.topline,tmp0
     6EC2 A304     
0045 6EC4 A120  34         a     @fb.row,tmp0
     6EC6 A306     
0046 6EC8 8120  34         c     @edb.lines,tmp0       ; fb.topline + fb.row = edb.lines ?
     6ECA A504     
0047 6ECC 1314  14         jeq   fb.cursor.down.set_cursorx
0048                                                   ; Yes, only position cursor X
0049                       ;-------------------------------------------------------
0050                       ; Check if scrolling required
0051                       ;-------------------------------------------------------
0052 6ECE C120  34         mov   @fb.scrrows,tmp0
     6ED0 A31C     
0053 6ED2 0604  14         dec   tmp0
0054 6ED4 8120  34         c     @fb.row,tmp0
     6ED6 A306     
0055 6ED8 110A  14         jlt   fb.cursor.down.cursor
0056                       ;-------------------------------------------------------
0057                       ; Scroll 1 line
0058                       ;-------------------------------------------------------
0059 6EDA C820  54         mov   @fb.topline,@parm1
     6EDC A304     
     6EDE A006     
0060 6EE0 05A0  34         inc   @parm1
     6EE2 A006     
0061               
0062 6EE4 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6EE6 7BBA     
0063                                                   ; | i  @parm1 = Line to start with
0064                                                   ; /             (becomes @fb.topline)
0065               
0066 6EE8 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     6EEA A312     
0067 6EEC 1004  14         jmp   fb.cursor.down.set_cursorx
0068                       ;-------------------------------------------------------
0069                       ; Move cursor down a row, there are still rows left
0070                       ;-------------------------------------------------------
0071               fb.cursor.down.cursor:
0072 6EEE 05A0  34         inc   @fb.row               ; Row++ in screen buffer
     6EF0 A306     
0073 6EF2 06A0  32         bl    @down                 ; Row++ VDP cursor
     6EF4 26DA     
0074                       ;-------------------------------------------------------
0075                       ; Check line length and position cursor
0076                       ;-------------------------------------------------------
0077               fb.cursor.down.set_cursorx:
0078 6EF6 06A0  32         bl    @edb.line.getlength2  ; \ Get length current line
     6EF8 35DE     
0079                                                   ; | i  @fb.row        = Row in frame buffer
0080                                                   ; / o  @fb.row.length = Length of row
0081               
0082 6EFA 8820  50         c     @fb.column,@fb.row.length
     6EFC A30C     
     6EFE A308     
0083 6F00 1207  14         jle   fb.cursor.down.exit
0084                                                   ; Exit
0085                       ;-------------------------------------------------------
0086                       ; Adjust cursor column position
0087                       ;-------------------------------------------------------
0088 6F02 C820  54         mov   @fb.row.length,@fb.column
     6F04 A308     
     6F06 A30C     
0089 6F08 C120  34         mov   @fb.column,tmp0
     6F0A A30C     
0090 6F0C 06A0  32         bl    @xsetx                ; Set VDP cursor X
     6F0E 26EC     
0091                       ;-------------------------------------------------------
0092                       ; Exit
0093                       ;-------------------------------------------------------
0094               fb.cursor.down.exit:
0095 6F10 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F12 30A8     
0096 6F14 C2F9  30         mov   *stack+,r11           ; Pop r11
0097 6F16 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0120                       copy  "fb.cursor.home.asm"          ; Cursor home
     **** ****     > fb.cursor.home.asm
0001               * FILE......: fb.cursor.home.asm
0002               * Purpose...: Move the cursor home
0003               
0004               
0005               ***************************************************************
0006               * fb.cursor.home
0007               * Logic for moving cursor home
0008               ***************************************************************
0009               * bl @fb.cursor.home
0010               *--------------------------------------------------------------
0011               * INPUT
0012               * none
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0
0019               ********|*****|*********************|**************************
0020               fb.cursor.home:
0021 6F18 0649  14         dect  stack
0022 6F1A C64B  30         mov   r11,*stack            ; Save return address
0023 6F1C 0649  14         dect  stack
0024 6F1E C644  30         mov   tmp0,*stack           ; Push tmp0
0025                       ;------------------------------------------------------
0026                       ; Cursor home
0027                       ;------------------------------------------------------
0028 6F20 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6F22 A31A     
0029 6F24 C120  30         mov   @wyx,tmp0
     6F26 832A     
0030 6F28 0244  22         andi  tmp0,>ff00            ; Reset cursor X position to 0
     6F2A FF00     
0031 6F2C C804  30         mov   tmp0,@wyx             ; VDP cursor column=0
     6F2E 832A     
0032 6F30 04E0  34         clr   @fb.column
     6F32 A30C     
0033 6F34 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F36 30A8     
0034 6F38 0720  34         seto  @fb.status.dirty      ; Trigger refresh of status lines
     6F3A A31A     
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               fb.cursor.home.exit:
0039 6F3C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0040 6F3E C2F9  30         mov   *stack+,r11           ; Pop r11
0041 6F40 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0121                       copy  "fb.insert.line.asm"          ; Insert new line
     **** ****     > fb.insert.line.asm
0001               * FILE......: fb.insert.line.asm
0002               * Purpose...: Insert a new line
0003               
0004               ***************************************************************
0005               * fb.insert.line.asm
0006               * Insert a new line
0007               ***************************************************************
0008               * bl @fb.insert.line
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Insert line on current line or on following line.
0012               *          @parm1  = 0  -> current line
0013               *          @parm1 <> 0  -> following line
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * none
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0, tmp1
0020               ********|*****|*********************|**************************
0021               fb.insert.line:
0022 6F42 0649  14         dect  stack
0023 6F44 C64B  30         mov   r11,*stack            ; Save return address
0024 6F46 0649  14         dect  stack
0025 6F48 C644  30         mov   tmp0,*stack           ; Push tmp0
0026 6F4A 0649  14         dect  stack
0027 6F4C C645  30         mov   tmp1,*stack           ; Push tmp1
0028                       ;-------------------------------------------------------
0029                       ; Initialisation
0030                       ;-------------------------------------------------------
0031 6F4E 0720  34         seto  @edb.dirty            ; Editor buffer dirty (text changed!)
     6F50 A506     
0032 6F52 04C5  14         clr   tmp1                  ; Offset current line
0033 6F54 C120  34         mov   @parm1,tmp0           ; Insert on current line or following line?
     6F56 A006     
0034 6F58 1301  14         jeq   !                     ; Current line
0035 6F5A 0585  14         inc   tmp1                  ; Following line
0036                       ;-------------------------------------------------------
0037                       ; Crunch current line if dirty
0038                       ;-------------------------------------------------------
0039 6F5C 8820  50 !       c     @fb.row.dirty,@w$ffff
     6F5E A30A     
     6F60 2022     
0040 6F62 1604  14         jne   fb.insert.line.insert
0041 6F64 06A0  32         bl    @edb.line.pack.fb     ; Copy line to editor buffer
     6F66 7024     
0042 6F68 04E0  34         clr   @fb.row.dirty         ; Current row no longer dirty
     6F6A A30A     
0043                       ;-------------------------------------------------------
0044                       ; Insert entry in index
0045                       ;-------------------------------------------------------
0046               fb.insert.line.insert:
0047 6F6C 06A0  32         bl    @fb.calc_pointer      ; Calculate position in frame buffer
     6F6E 30A8     
0048 6F70 C820  54         mov   @fb.topline,@parm1
     6F72 A304     
     6F74 A006     
0049 6F76 A820  54         a     @fb.row,@parm1        ; Line number to insert
     6F78 A306     
     6F7A A006     
0050 6F7C A805  38         a     tmp1,@parm1           ; Add optional offset (for following line)
     6F7E A006     
0051 6F80 C820  54         mov   @edb.lines,@parm2     ; Last line to reorganize
     6F82 A504     
     6F84 A008     
0052               
0053 6F86 06A0  32         bl    @idx.entry.insert     ; Reorganize index
     6F88 34F8     
0054                                                   ; \ i  parm1 = Line for insert
0055                                                   ; / i  parm2 = Last line to reorg
0056               
0057 6F8A 05A0  34         inc   @edb.lines            ; One line added to editor buffer
     6F8C A504     
0058 6F8E 04E0  34         clr   @fb.row.length        ; Current row length = 0
     6F90 A308     
0059                       ;-------------------------------------------------------
0060                       ; Check/Adjust marker M1
0061                       ;-------------------------------------------------------
0062               fb.insert.line.m1:
0063 6F92 8820  50         c     @edb.block.m1,@w$ffff ; Marker M1 unset?
     6F94 A50E     
     6F96 2022     
0064 6F98 1308  14         jeq   fb.insert.line.m2
0065                                                   ; Yes, skip to M2 check
0066               
0067 6F9A 8820  50         c     @parm1,@edb.block.m1
     6F9C A006     
     6F9E A50E     
0068 6FA0 1504  14         jgt   fb.insert.line.m2
0069 6FA2 05A0  34         inc   @edb.block.m1         ; M1++
     6FA4 A50E     
0070 6FA6 0720  34         seto  @fb.colorize          ; Set colorize flag
     6FA8 A312     
0071                       ;-------------------------------------------------------
0072                       ; Check/Adjust marker M2
0073                       ;-------------------------------------------------------
0074               fb.insert.line.m2:
0075 6FAA 8820  50         c     @edb.block.m2,@w$ffff ; Marker M1 unset?
     6FAC A510     
     6FAE 2022     
0076 6FB0 1308  14         jeq   fb.insert.line.refresh
0077                                                   ; Yes, skip to refresh frame buffer
0078               
0079 6FB2 8820  50         c     @parm1,@edb.block.m2
     6FB4 A006     
     6FB6 A510     
0080 6FB8 1504  14         jgt   fb.insert.line.refresh
0081 6FBA 05A0  34         inc   @edb.block.m2         ; M2++
     6FBC A510     
0082 6FBE 0720  34         seto  @fb.colorize          ; Set colorize flag
     6FC0 A312     
0083                       ;-------------------------------------------------------
0084                       ; Refresh frame buffer and physical screen
0085                       ;-------------------------------------------------------
0086               fb.insert.line.refresh:
0087 6FC2 C820  54         mov   @fb.topline,@parm1
     6FC4 A304     
     6FC6 A006     
0088               
0089 6FC8 06A0  32         bl    @fb.refresh           ; \ Refresh frame buffer
     6FCA 7BBA     
0090                                                   ; | i  @parm1 = Line to start with
0091                                                   ; /             (becomes @fb.topline)
0092               
0093 6FCC 0720  34         seto  @fb.dirty             ; Trigger screen refresh
     6FCE A318     
0094 6FD0 06A0  32         bl    @fb.cursor.home       ; Move cursor home
     6FD2 6F18     
0095                       ;-------------------------------------------------------
0096                       ; Exit
0097                       ;-------------------------------------------------------
0098               fb.insert.line.exit:
0099 6FD4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0100 6FD6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0101 6FD8 C2F9  30         mov   *stack+,r11           ; Pop r11
0102 6FDA 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0122                       copy  "fb.get.firstnonblank.asm"    ; Get column of first non-blank char
     **** ****     > fb.get.firstnonblank.asm
0001               * FILE......: fb.get.firstnonblank.asm
0002               * Purpose...: Get column of first non-blank character
0003               
0004               ***************************************************************
0005               * fb.get.firstnonblank
0006               * Get column of first non-blank character in specified line
0007               ***************************************************************
0008               * bl @fb.get.firstnonblank
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * @outparm1 = Column containing first non-blank character
0012               * @outparm2 = Character
0013               ********|*****|*********************|**************************
0014               fb.get.firstnonblank:
0015 6FDC 0649  14         dect  stack
0016 6FDE C64B  30         mov   r11,*stack            ; Save return address
0017                       ;------------------------------------------------------
0018                       ; Prepare for scanning
0019                       ;------------------------------------------------------
0020 6FE0 04E0  34         clr   @fb.column
     6FE2 A30C     
0021 6FE4 06A0  32         bl    @fb.calc_pointer
     6FE6 30A8     
0022 6FE8 06A0  32         bl    @edb.line.getlength2  ; Get length current line
     6FEA 35DE     
0023 6FEC C1A0  34         mov   @fb.row.length,tmp2   ; Set loop counter
     6FEE A308     
0024 6FF0 1313  14         jeq   fb.get.firstnonblank.nomatch
0025                                                   ; Exit if empty line
0026 6FF2 C120  34         mov   @fb.current,tmp0      ; Pointer to current char
     6FF4 A302     
0027 6FF6 04C5  14         clr   tmp1
0028                       ;------------------------------------------------------
0029                       ; Scan line for non-blank character
0030                       ;------------------------------------------------------
0031               fb.get.firstnonblank.loop:
0032 6FF8 D174  28         movb  *tmp0+,tmp1           ; Get character
0033 6FFA 130E  14         jeq   fb.get.firstnonblank.nomatch
0034                                                   ; Exit if empty line
0035 6FFC 0285  22         ci    tmp1,>2000            ; Whitespace?
     6FFE 2000     
0036 7000 1503  14         jgt   fb.get.firstnonblank.match
0037 7002 0606  14         dec   tmp2                  ; Counter--
0038 7004 16F9  14         jne   fb.get.firstnonblank.loop
0039 7006 1008  14         jmp   fb.get.firstnonblank.nomatch
0040                       ;------------------------------------------------------
0041                       ; Non-blank character found
0042                       ;------------------------------------------------------
0043               fb.get.firstnonblank.match:
0044 7008 6120  34         s     @fb.current,tmp0      ; Calculate column
     700A A302     
0045 700C 0604  14         dec   tmp0
0046 700E C804  38         mov   tmp0,@outparm1        ; Save column
     7010 A016     
0047 7012 D805  38         movb  tmp1,@outparm2        ; Save character
     7014 A018     
0048 7016 1004  14         jmp   fb.get.firstnonblank.exit
0049                       ;------------------------------------------------------
0050                       ; No non-blank character found
0051                       ;------------------------------------------------------
0052               fb.get.firstnonblank.nomatch:
0053 7018 04E0  34         clr   @outparm1             ; X=0
     701A A016     
0054 701C 04E0  34         clr   @outparm2             ; Null
     701E A018     
0055                       ;------------------------------------------------------
0056                       ; Exit
0057                       ;------------------------------------------------------
0058               fb.get.firstnonblank.exit:
0059 7020 C2F9  30         mov   *stack+,r11           ; Pop r11
0060 7022 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0123                       ;-----------------------------------------------------------------------
0124                       ; Logic for Editor Buffer
0125                       ;-----------------------------------------------------------------------
0126                       copy  "edb.line.pack.fb.asm"        ; Pack line into editor buffer
     **** ****     > edb.line.pack.fb.asm
0001               * FILE......: edb.line.pack.fb.asm
0002               * Purpose...: Pack current line in framebuffer to editor buffer
0003               
0004               ***************************************************************
0005               * edb.line.pack.fb
0006               * Pack current line in framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.pack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.top       = Address of top row in frame buffer
0012               * @fb.row       = Current row in frame buffer
0013               * @fb.column    = Current column in frame buffer
0014               * @fb.colsline  = Columns per line in frame buffer
0015               *--------------------------------------------------------------
0016               * OUTPUT
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2,tmp3
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf   = Saved @fb.column
0023               * rambuf+2 = Saved beginning of row
0024               * rambuf+4 = Saved length of row
0025               ********|*****|*********************|**************************
0026               edb.line.pack.fb:
0027 7024 0649  14         dect  stack
0028 7026 C64B  30         mov   r11,*stack            ; Save return address
0029 7028 0649  14         dect  stack
0030 702A C644  30         mov   tmp0,*stack           ; Push tmp0
0031 702C 0649  14         dect  stack
0032 702E C645  30         mov   tmp1,*stack           ; Push tmp1
0033 7030 0649  14         dect  stack
0034 7032 C646  30         mov   tmp2,*stack           ; Push tmp2
0035 7034 0649  14         dect  stack
0036 7036 C647  30         mov   tmp3,*stack           ; Push tmp3
0037                       ;------------------------------------------------------
0038                       ; Get values
0039                       ;------------------------------------------------------
0040 7038 C820  54         mov   @fb.column,@rambuf    ; Save @fb.column
     703A A30C     
     703C A100     
0041 703E 04E0  34         clr   @fb.column
     7040 A30C     
0042 7042 06A0  32         bl    @fb.calc_pointer      ; Beginning of row
     7044 30A8     
0043                       ;------------------------------------------------------
0044                       ; Prepare scan
0045                       ;------------------------------------------------------
0046 7046 04C4  14         clr   tmp0                  ; Counter
0047 7048 C160  34         mov   @fb.current,tmp1      ; Get position
     704A A302     
0048 704C C805  38         mov   tmp1,@rambuf+2        ; Save beginning of row
     704E A102     
0049 7050 04C7  14         clr   tmp3                  ; Counter for whitespace
0050                       ;------------------------------------------------------
0051                       ; 1. Scan line for >00 byte termination
0052                       ;------------------------------------------------------
0053               edb.line.pack.fb.scan:
0054 7052 D1B5  28         movb  *tmp1+,tmp2           ; Get char
0055 7054 0986  32         srl   tmp2,8                ; Right justify
0056 7056 130D  14         jeq   edb.line.pack.fb.check_setpage
0057                                                   ; Stop scan if >00 found
0058 7058 0584  14         inc   tmp0                  ; Increase string length
0059                       ;------------------------------------------------------
0060                       ; Check for trailing whitespace
0061                       ;------------------------------------------------------
0062 705A 0286  22         ci    tmp2,32               ; Was it a space character?
     705C 0020     
0063 705E 1301  14         jeq   edb.line.pack.fb.check80
0064 7060 C1C4  18         mov   tmp0,tmp3
0065                       ;------------------------------------------------------
0066                       ; Not more than 80 characters
0067                       ;------------------------------------------------------
0068               edb.line.pack.fb.check80:
0069 7062 0284  22         ci    tmp0,colrow
     7064 0050     
0070 7066 1305  14         jeq   edb.line.pack.fb.check_setpage
0071                                                   ; Stop scan if 80 characters processed
0072 7068 10F4  14         jmp   edb.line.pack.fb.scan ; Next character
0073                       ;------------------------------------------------------
0074                       ; Check failed, crash CPU!
0075                       ;------------------------------------------------------
0076               edb.line.pack.fb.crash:
0077 706A C80B  38         mov   r11,@>ffce            ; \ Save caller address
     706C FFCE     
0078 706E 06A0  32         bl    @cpu.crash            ; / Crash and halt system
     7070 2026     
0079                       ;------------------------------------------------------
0080                       ; Check if highest SAMS page needs to be increased
0081                       ;------------------------------------------------------
0082               edb.line.pack.fb.check_setpage:
0083 7072 8107  18         c     tmp3,tmp0             ; Trailing whitespace in line?
0084 7074 1103  14         jlt   edb.line.pack.fb.rtrim
0085 7076 C804  38         mov   tmp0,@rambuf+4        ; Save full length of line
     7078 A104     
0086 707A 100C  14         jmp   !
0087               edb.line.pack.fb.rtrim:
0088                       ;------------------------------------------------------
0089                       ; Remove trailing blanks from line
0090                       ;------------------------------------------------------
0091 707C C807  38         mov   tmp3,@rambuf+4        ; Save line length without trailing blanks
     707E A104     
0092               
0093 7080 04C5  14         clr   tmp1                  ; tmp1 = Character to fill (>00)
0094               
0095 7082 C184  18         mov   tmp0,tmp2             ; \
0096 7084 6187  18         s     tmp3,tmp2             ; | tmp2 = Repeat count
0097 7086 0586  14         inc   tmp2                  ; /
0098               
0099 7088 C107  18         mov   tmp3,tmp0             ; \
0100 708A A120  34         a     @rambuf+2,tmp0        ; / tmp0 = Start address in CPU memory
     708C A102     
0101               
0102               edb.line.pack.fb.rtrim.loop:
0103 708E DD05  32         movb  tmp1,*tmp0+
0104 7090 0606  14         dec   tmp2
0105 7092 15FD  14         jgt   edb.line.pack.fb.rtrim.loop
0106                       ;------------------------------------------------------
0107                       ; Check and increase highest SAMS page
0108                       ;------------------------------------------------------
0109 7094 06A0  32 !       bl    @edb.hipage.alloc     ; Check and increase highest SAMS page
     7096 3602     
0110                                                   ; \ i  @edb.next_free.ptr = Pointer to next
0111                                                   ; /                         free line
0112                       ;------------------------------------------------------
0113                       ; 2. Prepare for storing line
0114                       ;------------------------------------------------------
0115               edb.line.pack.fb.prepare:
0116 7098 C820  54         mov   @fb.topline,@parm1    ; \ parm1 = fb.topline + fb.row
     709A A304     
     709C A006     
0117 709E A820  54         a     @fb.row,@parm1        ; /
     70A0 A306     
     70A2 A006     
0118                       ;------------------------------------------------------
0119                       ; 2a. Update index
0120                       ;------------------------------------------------------
0121               edb.line.pack.fb.update_index:
0122 70A4 C820  54         mov   @edb.next_free.ptr,@parm2
     70A6 A508     
     70A8 A008     
0123                                                   ; Pointer to new line
0124 70AA C820  54         mov   @edb.sams.hipage,@parm3
     70AC A51A     
     70AE A00A     
0125                                                   ; SAMS page to use
0126               
0127 70B0 06A0  32         bl    @idx.entry.update     ; Update index
     70B2 33A8     
0128                                                   ; \ i  parm1 = Line number in editor buffer
0129                                                   ; | i  parm2 = pointer to line in
0130                                                   ; |            editor buffer
0131                                                   ; / i  parm3 = SAMS page
0132                       ;------------------------------------------------------
0133                       ; 3. Set line prefix in editor buffer
0134                       ;------------------------------------------------------
0135 70B4 C120  34         mov   @rambuf+2,tmp0        ; Source for memory copy
     70B6 A102     
0136 70B8 C160  34         mov   @edb.next_free.ptr,tmp1
     70BA A508     
0137                                                   ; Address of line in editor buffer
0138               
0139 70BC 05E0  34         inct  @edb.next_free.ptr    ; Adjust pointer
     70BE A508     
0140               
0141 70C0 C1A0  34         mov   @rambuf+4,tmp2        ; Get line length
     70C2 A104     
0142 70C4 CD46  34         mov   tmp2,*tmp1+           ; Set line length as line prefix
0143 70C6 1317  14         jeq   edb.line.pack.fb.prepexit
0144                                                   ; Nothing to copy if empty line
0145                       ;------------------------------------------------------
0146                       ; 4. Copy line from framebuffer to editor buffer
0147                       ;------------------------------------------------------
0148               edb.line.pack.fb.copyline:
0149 70C8 0286  22         ci    tmp2,2
     70CA 0002     
0150 70CC 1603  14         jne   edb.line.pack.fb.copyline.checkbyte
0151 70CE DD74  42         movb  *tmp0+,*tmp1+         ; \ Copy single word on possible
0152 70D0 DD74  42         movb  *tmp0+,*tmp1+         ; / uneven address
0153 70D2 1007  14         jmp   edb.line.pack.fb.copyline.align16
0154               
0155               edb.line.pack.fb.copyline.checkbyte:
0156 70D4 0286  22         ci    tmp2,1
     70D6 0001     
0157 70D8 1602  14         jne   edb.line.pack.fb.copyline.block
0158 70DA D554  38         movb  *tmp0,*tmp1           ; Copy single byte
0159 70DC 1002  14         jmp   edb.line.pack.fb.copyline.align16
0160               
0161               edb.line.pack.fb.copyline.block:
0162 70DE 06A0  32         bl    @xpym2m               ; Copy memory block
     70E0 24EE     
0163                                                   ; \ i  tmp0 = source
0164                                                   ; | i  tmp1 = destination
0165                                                   ; / i  tmp2 = bytes to copy
0166                       ;------------------------------------------------------
0167                       ; 5: Align pointer to multiple of 16 memory address
0168                       ;------------------------------------------------------
0169               edb.line.pack.fb.copyline.align16:
0170 70E2 A820  54         a     @rambuf+4,@edb.next_free.ptr
     70E4 A104     
     70E6 A508     
0171                                                      ; Add length of line
0172               
0173 70E8 C120  34         mov   @edb.next_free.ptr,tmp0  ; \ Round up to next multiple of 16.
     70EA A508     
0174 70EC 0504  14         neg   tmp0                     ; | tmp0 = tmp0 + (-tmp0 & 15)
0175 70EE 0244  22         andi  tmp0,15                  ; | Hacker's Delight 2nd Edition
     70F0 000F     
0176 70F2 A804  38         a     tmp0,@edb.next_free.ptr  ; / Chapter 2
     70F4 A508     
0177                       ;------------------------------------------------------
0178                       ; 6: Restore SAMS page and prepare for exit
0179                       ;------------------------------------------------------
0180               edb.line.pack.fb.prepexit:
0181 70F6 C820  54         mov   @rambuf,@fb.column    ; Retrieve @fb.column
     70F8 A100     
     70FA A30C     
0182               
0183 70FC 8820  50         c     @edb.sams.hipage,@edb.sams.page
     70FE A51A     
     7100 A518     
0184 7102 1306  14         jeq   edb.line.pack.fb.exit ; Exit early if SAMS page already mapped
0185               
0186 7104 C120  34         mov   @edb.sams.page,tmp0
     7106 A518     
0187 7108 C160  34         mov   @edb.top.ptr,tmp1
     710A A500     
0188 710C 06A0  32         bl    @xsams.page.set       ; Set SAMS page
     710E 2584     
0189                                                   ; \ i  tmp0 = SAMS page number
0190                                                   ; / i  tmp1 = Memory address
0191                       ;------------------------------------------------------
0192                       ; Exit
0193                       ;------------------------------------------------------
0194               edb.line.pack.fb.exit:
0195 7110 C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0196 7112 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0197 7114 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0198 7116 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0199 7118 C2F9  30         mov   *stack+,r11           ; Pop R11
0200 711A 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0127                       copy  "edb.line.unpack.fb.asm"      ; Unpack line from editor buffer
     **** ****     > edb.line.unpack.fb.asm
0001               * FILE......: edb.line.unpack.fb.asm
0002               * Purpose...: Unpack line from editor buffer to frame buffer
0003               
0004               ***************************************************************
0005               * edb.line.unpack.fb
0006               * Unpack specified line to framebuffer
0007               ***************************************************************
0008               *  bl   @edb.line.unpack.fb
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Line to unpack in editor buffer (base 0)
0012               * @parm2 = Target row in frame buffer
0013               * @parm3 = Column offset (normally supplied by @fb.vwco)
0014               *--------------------------------------------------------------
0015               * OUTPUT
0016               * @outparm1 = Length of unpacked line
0017               *--------------------------------------------------------------
0018               * Register usage
0019               * tmp0,tmp1,tmp2
0020               *--------------------------------------------------------------
0021               * Memory usage
0022               * rambuf    = Saved @parm1 of edb.line.unpack.fb
0023               * rambuf+2  = Saved @parm2 of edb.line.unpack.fb
0024               * rambuf+4  = Saved @parm3 of edb.line.unpack.fb
0025               * rambuf+6  = Source memory address in editor buffer
0026               * rambuf+8  = Destination memory address in frame buffer
0027               * rambuf+10 = Length of line
0028               ********|*****|*********************|**************************
0029               edb.line.unpack.fb:
0030 711C 0649  14         dect  stack
0031 711E C64B  30         mov   r11,*stack            ; Save return address
0032 7120 0649  14         dect  stack
0033 7122 C644  30         mov   tmp0,*stack           ; Push tmp0
0034 7124 0649  14         dect  stack
0035 7126 C645  30         mov   tmp1,*stack           ; Push tmp1
0036 7128 0649  14         dect  stack
0037 712A C646  30         mov   tmp2,*stack           ; Push tmp2
0038                       ;------------------------------------------------------
0039                       ; Save parameters
0040                       ;------------------------------------------------------
0041 712C C820  54         mov   @parm1,@rambuf
     712E A006     
     7130 A100     
0042 7132 C820  54         mov   @parm2,@rambuf+2
     7134 A008     
     7136 A102     
0043 7138 C820  54         mov   @parm3,@rambuf+4
     713A A00A     
     713C A104     
0044                       ;------------------------------------------------------
0045                       ; Calculate offset in frame buffer
0046                       ;------------------------------------------------------
0047 713E C120  34         mov   @fb.colsline,tmp0
     7140 A30E     
0048 7142 3920  74         mpy   @parm2,tmp0           ; Offset is in tmp1!
     7144 A008     
0049 7146 C1A0  34         mov   @fb.top.ptr,tmp2
     7148 A300     
0050 714A A146  18         a     tmp2,tmp1             ; Add base to offset
0051 714C C805  38         mov   tmp1,@rambuf+8        ; Destination row in frame buffer
     714E A108     
0052                       ;------------------------------------------------------
0053                       ; Return empty row if requested line beyond editor buffer
0054                       ;------------------------------------------------------
0055 7150 8820  50         c     @parm1,@edb.lines     ; Requested line at BOT?
     7152 A006     
     7154 A504     
0056 7156 1103  14         jlt   !                     ; No, continue processing
0057               
0058 7158 04E0  34         clr   @rambuf+10            ; Set line length = 0
     715A A10A     
0059 715C 100E  14         jmp   edb.line.unpack.fb.clear
0060                       ;------------------------------------------------------
0061                       ; Get pointer to line & page-in editor buffer page
0062                       ;------------------------------------------------------
0063 715E C120  34 !       mov   @parm1,tmp0
     7160 A006     
0064 7162 06A0  32         bl    @edb.line.mappage     ; Activate editor buffer SAMS page for line
     7164 3550     
0065                                                   ; \ i  tmp0     = Line number
0066                                                   ; | o  outparm1 = Pointer to line
0067                                                   ; / o  outparm2 = SAMS page
0068                       ;------------------------------------------------------
0069                       ; Handle empty line
0070                       ;------------------------------------------------------
0071 7166 C120  34         mov   @outparm1,tmp0        ; Get pointer to line
     7168 A016     
0072 716A 1603  14         jne   edb.line.unpack.fb.getlen
0073                                                   ; Only continue if pointer is set
0074               
0075 716C 04E0  34         clr   @rambuf+10            ; Set length=0
     716E A10A     
0076 7170 1004  14         jmp   edb.line.unpack.fb.clear
0077                       ;------------------------------------------------------
0078                       ; Get line length
0079                       ;------------------------------------------------------
0080               edb.line.unpack.fb.getlen:
0081 7172 C834  50         mov   *tmp0+,@rambuf+10     ; Get line length
     7174 A10A     
0082 7176 C804  38         mov   tmp0,@rambuf+6        ; Source memory address for block copy
     7178 A106     
0083                       ;------------------------------------------------------
0084                       ; Erase 80 columns line
0085                       ;------------------------------------------------------
0086               edb.line.unpack.fb.clear:
0087 717A C120  34         mov   @rambuf+8,tmp0        ; \ Start of row in frame buffer
     717C A108     
0088 717E 04C5  14         clr   tmp1                  ; | Fill with >00
0089 7180 0206  20         li    tmp2,80               ; /
     7182 0050     
0090               
0091 7184 06A0  32         bl    @xfilm                ; Fill CPU memory
     7186 224A     
0092                                                   ; \ i  tmp0 = Target address
0093                                                   ; | i  tmp1 = Byte to fill
0094                                                   ; / i  tmp2 = Repeat count
0095                       ;------------------------------------------------------
0096                       ; Prepare for unpacking data
0097                       ;------------------------------------------------------
0098               edb.line.unpack.fb.prepare:
0099 7188 C1A0  34         mov   @rambuf+10,tmp2       ; Get Line length
     718A A10A     
0100 718C C806  38         mov   tmp2,@outparm1        ; Store in output parameter
     718E A016     
0101 7190 1313  14         jeq   edb.line.unpack.fb.exit
0102                                                   ; Exit if length = 0
0103               
0104 7192 81A0  34         c     @rambuf+4,tmp2        ; Column offset (@fb.vwco) > line length
     7194 A104     
0105 7196 1410  14         jhe   edb.line.unpack.fb.exit
0106                                                   ; Yes, exit
0107               
0108 7198 C160  34         mov   @rambuf+8,tmp1        ; Pointer to row in frame buffer
     719A A108     
0109 719C 61A0  34         s     @rambuf+4,tmp2        ; Subtract @fb.vwco from line length
     719E A104     
0110                       ;------------------------------------------------------
0111                       ; Assert on line length
0112                       ;------------------------------------------------------
0113 71A0 120B  14         jle   edb.line.unpack.fb.exit
0114                                                   ; Exit if line length <= 0
0115               
0116 71A2 0286  22         ci    tmp2,80               ; Check line length
     71A4 0050     
0117 71A6 1202  14         jle   edb.line.unpack.fb.copy
0118 71A8 0206  20         li    tmp2,80               ; Only process first 80 characters
     71AA 0050     
0119                       ;------------------------------------------------------
0120                       ; Copy memory block
0121                       ;------------------------------------------------------
0122               edb.line.unpack.fb.copy:
0123 71AC C120  34         mov   @rambuf+6,tmp0        ; Pointer to line in editor buffer
     71AE A106     
0124 71B0 A120  34         a     @rambuf+4,tmp0        ; Add column offset (@fb.vwco)
     71B2 A104     
0125               
0126               
0127 71B4 06A0  32         bl    @xpym2m               ; Copy line to frame buffer
     71B6 24EE     
0128                                                   ; \ i  tmp0 = Source address
0129                                                   ; | i  tmp1 = Target address
0130                                                   ; / i  tmp2 = Bytes to copy
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               edb.line.unpack.fb.exit:
0135 71B8 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0136 71BA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0137 71BC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0138 71BE C2F9  30         mov   *stack+,r11           ; Pop r11
0139 71C0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0128                       ;-----------------------------------------------------------------------
0129                       ; Background tasks
0130                       ;-----------------------------------------------------------------------
0132                       copy  "task.vdp.cursor.sat.asm"     ; Copy cursor SAT to VDP
     **** ****     > task.vdp.cursor.sat.asm
0001               * FILE......: task.vdp.cursor.sat.asm
0002               * Purpose...: Copy cursor SAT to VDP
0003               
0004               ***************************************************************
0005               * Task - Copy Sprite Attribute Table (SAT) to VDP
0006               ********|*****|*********************|**************************
0007               task.vdp.copy.sat:
0008 71C2 0649  14         dect  stack
0009 71C4 C64B  30         mov   r11,*stack            ; Save return address
0010 71C6 0649  14         dect  stack
0011 71C8 C644  30         mov   tmp0,*stack           ; Push tmp0
0012 71CA 0649  14         dect  stack
0013 71CC C645  30         mov   tmp1,*stack           ; Push tmp1
0014 71CE 0649  14         dect  stack
0015 71D0 C646  30         mov   tmp2,*stack           ; Push tmp2
0016                       ;------------------------------------------------------
0017                       ; Get pane with focus
0018                       ;------------------------------------------------------
0019 71D2 C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     71D4 A222     
0020               
0021 71D6 0284  22         ci    tmp0,pane.focus.fb
     71D8 0000     
0022 71DA 130F  14         jeq   task.vdp.copy.sat.fb  ; Frame buffer has focus
0023               
0024 71DC 0284  22         ci    tmp0,pane.focus.cmdb
     71DE 0001     
0025 71E0 1304  14         jeq   task.vdp.copy.sat.cmdb
0026                                                   ; CMDB buffer has focus
0027                       ;------------------------------------------------------
0028                       ; Assert failed. Invalid value
0029                       ;------------------------------------------------------
0030 71E2 C80B  38         mov   r11,@>ffce            ; \ Save caller address
     71E4 FFCE     
0031 71E6 06A0  32         bl    @cpu.crash            ; / Halt system.
     71E8 2026     
0032                       ;------------------------------------------------------
0033                       ; CMDB buffer has focus, position cursor
0034                       ;------------------------------------------------------
0035               task.vdp.copy.sat.cmdb:
0036 71EA C820  46         mov   @cmdb.cursor,@wyx     ; Position cursor in CMDB pane
     71EC A70A     
     71EE 832A     
0037 71F0 E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     71F2 2020     
0038 71F4 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     71F6 26F6     
0039                                                   ; | i  @WYX = Cursor YX
0040                                                   ; / o  tmp0 = Pixel YX
0041               
0042 71F8 100C  14         jmp   task.vdp.copy.sat.write
0043                       ;------------------------------------------------------
0044                       ; Frame buffer has focus, position cursor
0045                       ;------------------------------------------------------
0046               task.vdp.copy.sat.fb:
0047 71FA E0A0  34         soc   @wbit0,config         ; Sprite adjustment on
     71FC 2020     
0048 71FE 06A0  32         bl    @yx2px                ; \ Calculate pixel position
     7200 26F6     
0049                                                   ; | i  @WYX = Cursor YX
0050                                                   ; / o  tmp0 = Pixel YX
0051               
0052                       ;------------------------------------------------------
0053                       ; Cursor Y adjustment (topline, ruler, ...)
0054                       ;------------------------------------------------------
0055 7202 C160  34         mov   @tv.ruler.visible,tmp1
     7204 A210     
0056 7206 1303  14         jeq   task.vdp.copy.sat.fb.noruler
0057 7208 0224  22         ai    tmp0,>1000            ; Adjust VDP cursor because of topline+ruler
     720A 1000     
0058 720C 1002  14         jmp   task.vdp.copy.sat.write
0059               
0060               task.vdp.copy.sat.fb.noruler:
0061 720E 0224  22         ai    tmp0,>0800            ; Adjust VDP cursor because of topline
     7210 0800     
0062                       ;------------------------------------------------------
0063                       ; Dump sprite attribute table
0064                       ;------------------------------------------------------
0065               task.vdp.copy.sat.write:
0066 7212 C804  38         mov   tmp0,@ramsat          ; Set cursor YX
     7214 A056     
0067                       ;------------------------------------------------------
0068                       ; Handle column and row indicators
0069                       ;------------------------------------------------------
0070 7216 C160  34         mov   @tv.ruler.visible,tmp1
     7218 A210     
0071                                                   ; Ruler visible?
0072 721A 1314  14         jeq   task.vdp.copy.sat.hide.indicators
0073                                                   ; Not visible, skip
0074               
0075 721C C160  34         mov   @cmdb.visible,tmp1
     721E A702     
0076 7220 0285  22         ci    tmp1,>ffff            ; CMDB pane visible?
     7222 FFFF     
0077 7224 130F  14         jeq   task.vdp.copy.sat.hide.indicators
0078                                                   ; Not visible, skip
0079               
0080 7226 0244  22         andi  tmp0,>ff00            ; \ Clear X position
     7228 FF00     
0081 722A 0264  22         ori   tmp0,240              ; | Line indicator on pixel X 240
     722C 00F0     
0082 722E C804  38         mov   tmp0,@ramsat+4        ; / Set line indicator    <
     7230 A05A     
0083               
0084 7232 C120  34         mov   @ramsat,tmp0
     7234 A056     
0085 7236 0244  22         andi  tmp0,>00ff            ; \ Clear Y position
     7238 00FF     
0086 723A 0264  22         ori   tmp0,>0800            ; | Column indicator on pixel Y 8
     723C 0800     
0087 723E C804  38         mov   tmp0,@ramsat+8        ; / Set column indicator  v
     7240 A05E     
0088               
0089 7242 1005  14         jmp   task.vdp.copy.sat.write2
0090                       ;------------------------------------------------------
0091                       ; Do not show column and row indicators
0092                       ;------------------------------------------------------
0093               task.vdp.copy.sat.hide.indicators:
0094 7244 04C5  14         clr   tmp1
0095 7246 D805  38         movb  tmp1,@ramsat+7        ; \ Hide line indicator    <
     7248 A05D     
0096                                                   ; / by transparant color
0097 724A D805  38         movb  tmp1,@ramsat+11       ; \ Hide column indicator  v
     724C A061     
0098                                                   ; / by transparant color
0099                       ;------------------------------------------------------
0100                       ; Dump to VDP
0101                       ;------------------------------------------------------
0102               task.vdp.copy.sat.write2:
0103 724E 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     7250 2494     
0104 7252 2180                   data sprsat,ramsat,14 ; \ i  p0 = VDP destination
     7254 A056     
     7256 000E     
0105                                                   ; | i  p1 = ROM/RAM source
0106                                                   ; / i  p2 = Number of bytes to write
0107                       ;------------------------------------------------------
0108                       ; Exit
0109                       ;------------------------------------------------------
0110               task.vdp.copy.sat.exit:
0111 7258 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0112 725A C179  30         mov   *stack+,tmp1          ; Pop tmp1
0113 725C C139  30         mov   *stack+,tmp0          ; Pop tmp0
0114 725E C2F9  30         mov   *stack+,r11           ; Pop r11
0115 7260 0460  28         b     @slotok               ; Exit task
     7262 2E52     
                   < stevie_b1.asm
0133                       copy  "task.vdp.cursor.sprite.asm"  ; Set cursor shape in VDP (blink)
     **** ****     > task.vdp.cursor.sprite.asm
0001               * FILE......: task.vdp.cursor.sprite.asm
0002               * Purpose...: VDP sprite cursor shape (sprite version)
0003               
0004               ***************************************************************
0005               * Task - Update cursor shape (blink)
0006               ********|*****|*********************|**************************
0007               task.vdp.cursor:
0008 7264 0649  14         dect  stack
0009 7266 C64B  30         mov   r11,*stack            ; Save return address
0010 7268 0649  14         dect  stack
0011 726A C644  30         mov   tmp0,*stack           ; Push tmp0
0012                       ;------------------------------------------------------
0013                       ; Toggle cursor
0014                       ;------------------------------------------------------
0015 726C 0560  34         inv   @fb.curtoggle         ; Flip cursor shape flag
     726E A314     
0016 7270 1304  14         jeq   task.vdp.cursor.visible
0017                       ;------------------------------------------------------
0018                       ; Hide cursor
0019                       ;------------------------------------------------------
0020 7272 04C4  14         clr   tmp0
0021 7274 D804  38         movb  tmp0,@ramsat+3        ; Hide cursor
     7276 A059     
0022 7278 1003  14         jmp   task.vdp.cursor.copy.sat
0023                                                   ; Update VDP SAT and exit task
0024                       ;------------------------------------------------------
0025                       ; Show cursor
0026                       ;------------------------------------------------------
0027               task.vdp.cursor.visible:
0028 727A C820  54         mov   @tv.curshape,@ramsat+2
     727C A214     
     727E A058     
0029                                                   ; Get cursor shape and color
0030                       ;------------------------------------------------------
0031                       ; Copy SAT
0032                       ;------------------------------------------------------
0033               task.vdp.cursor.copy.sat:
0034 7280 06A0  32         bl    @cpym2v               ; Copy sprite SAT to VDP
     7282 2494     
0035 7284 2180                   data sprsat,ramsat,4  ; \ i  p0 = VDP destination
     7286 A056     
     7288 0004     
0036                                                   ; | i  p1 = ROM/RAM source
0037                                                   ; / i  p2 = Number of bytes to write
0038                       ;------------------------------------------------------
0039                       ; Exit
0040                       ;------------------------------------------------------
0041               task.vdp.cursor.exit:
0042 728A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0043 728C C2F9  30         mov   *stack+,r11           ; Pop r11
0044 728E 0460  28         b     @slotok               ; Exit task
     7290 2E52     
                   < stevie_b1.asm
0137               
0138                       copy  "task.vdp.panes.asm"          ; Draw editor panes in VDP
     **** ****     > task.vdp.panes.asm
0001               * FILE......: task.vdp.panes.asm
0002               * Purpose...: Stevie Editor - VDP draw editor panes
0003               
0004               ***************************************************************
0005               * Task - VDP draw editor panes (frame buffer, CMDB, status line)
0006               ********|*****|*********************|**************************
0007               task.vdp.panes:
0008 7292 0649  14         dect  stack
0009 7294 C64B  30         mov   r11,*stack            ; Save return address
0010                       ;------------------------------------------------------
0011                       ; Dump panes to VDP memory
0012                       ;------------------------------------------------------
0013 7296 06A0  32         bl    @pane.vdpdump
     7298 78AE     
0014                       ;------------------------------------------------------
0015                       ; Exit task
0016                       ;------------------------------------------------------
0017               task.vdp.panes.exit:
0018 729A C2F9  30         mov   *stack+,r11           ; Pop r11
0019 729C 0460  28         b     @slotok
     729E 2E52     
                   < stevie_b1.asm
0139                       copy  "task.oneshot.asm"            ; Run "one shot" task
     **** ****     > task.oneshot.asm
0001               * FILE......: task.oneshot.asm
0002               * Purpose...: Trigger one-shot task
0003               
0004               ***************************************************************
0005               * Task - One-shot
0006               ***************************************************************
0007               
0008               task.oneshot:
0009 72A0 C120  34         mov   @tv.task.oneshot,tmp0  ; Get pointer to one-shot task
     72A2 A224     
0010 72A4 1301  14         jeq   task.oneshot.exit
0011               
0012 72A6 0694  24         bl    *tmp0                  ; Execute one-shot task
0013                       ;------------------------------------------------------
0014                       ; Exit
0015                       ;------------------------------------------------------
0016               task.oneshot.exit:
0017 72A8 0460  28         b     @slotok                ; Exit task
     72AA 2E52     
                   < stevie_b1.asm
0140                       ;-----------------------------------------------------------------------
0141                       ; Screen pane utilities
0142                       ;-----------------------------------------------------------------------
0143                       copy  "pane.utils.colorscheme.asm"  ; Colorscheme handling in panes
     **** ****     > pane.utils.colorscheme.asm
0001               
0002               
0003               
0004               * FILE......: pane.utils.colorscheme.asm
0005               * Purpose...: Stevie Editor - Color scheme for panes
0006               
0007               ***************************************************************
0008               * pane.action.colorscheme.cycle
0009               * Cycle through available color scheme
0010               ***************************************************************
0011               * bl  @pane.action.colorscheme.cycle
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * tmp0
0018               ********|*****|*********************|**************************
0019               pane.action.colorscheme.cycle:
0020 72AC 0649  14         dect  stack
0021 72AE C64B  30         mov   r11,*stack            ; Push return address
0022 72B0 0649  14         dect  stack
0023 72B2 C644  30         mov   tmp0,*stack           ; Push tmp0
0024               
0025 72B4 C120  34         mov   @tv.colorscheme,tmp0  ; Load color scheme index
     72B6 A212     
0026 72B8 0284  22         ci    tmp0,tv.colorscheme.entries
     72BA 000A     
0027                                                   ; Last entry reached?
0028 72BC 1103  14         jlt   !
0029 72BE 0204  20         li    tmp0,1                ; Reset color scheme index
     72C0 0001     
0030 72C2 1001  14         jmp   pane.action.colorscheme.switch
0031 72C4 0584  14 !       inc   tmp0
0032                       ;-------------------------------------------------------
0033                       ; Switch to new color scheme
0034                       ;-------------------------------------------------------
0035               pane.action.colorscheme.switch:
0036 72C6 C804  38         mov   tmp0,@tv.colorscheme  ; Save index of color scheme
     72C8 A212     
0037               
0038 72CA 06A0  32         bl    @pane.action.colorscheme.load
     72CC 730A     
0039                                                   ; Load current color scheme
0040                       ;-------------------------------------------------------
0041                       ; Show current color palette message
0042                       ;-------------------------------------------------------
0043 72CE C820  42         mov   @wyx,@waux1           ; Save cursor YX position
     72D0 832A     
     72D2 833C     
0044               
0045 72D4 06A0  32         bl    @putnum
     72D6 2A32     
0046 72D8 003E                   byte 0,62
0047 72DA A212                   data tv.colorscheme,rambuf,>3020
     72DC A100     
     72DE 3020     
0048               
0049 72E0 06A0  32         bl    @putat
     72E2 2450     
0050 72E4 0034                   byte 0,52
0051 72E6 3AC8                   data txt.colorscheme  ; Show color palette message
0052               
0053 72E8 C820  42         mov   @waux1,@wyx           ; Restore cursor YX position
     72EA 833C     
     72EC 832A     
0054                       ;-------------------------------------------------------
0055                       ; Delay
0056                       ;-------------------------------------------------------
0057 72EE 0204  20         li    tmp0,12000
     72F0 2EE0     
0058 72F2 0604  14 !       dec   tmp0
0059 72F4 16FE  14         jne   -!
0060                       ;-------------------------------------------------------
0061                       ; Setup one shot task for removing message
0062                       ;-------------------------------------------------------
0063 72F6 0204  20         li    tmp0,pane.topline.oneshot.clearmsg
     72F8 3648     
0064 72FA C804  38         mov   tmp0,@tv.task.oneshot
     72FC A224     
0065               
0066 72FE 06A0  32         bl    @rsslot               ; \ Reset loop counter slot 3
     7300 2EC6     
0067 7302 0003                   data 3                ; / for getting consistent delay
0068                       ;-------------------------------------------------------
0069                       ; Exit
0070                       ;-------------------------------------------------------
0071               pane.action.colorscheme.cycle.exit:
0072 7304 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0073 7306 C2F9  30         mov   *stack+,r11           ; Pop R11
0074 7308 045B  20         b     *r11                  ; Return to caller
0075               
0076               
0077               
0078               ***************************************************************
0079               * pane.action.colorscheme.load
0080               * Load color scheme
0081               ***************************************************************
0082               * bl  @pane.action.colorscheme.load
0083               *--------------------------------------------------------------
0084               * INPUT
0085               * @tv.colorscheme = Index into color scheme table
0086               * @parm1          = Skip screen off if >FFFF
0087               * @parm2          = Skip colorizing marked lines if >FFFF
0088               * @parm3          = Only colorize CMDB pane if >FFFF
0089               *--------------------------------------------------------------
0090               * OUTPUT
0091               * none
0092               *--------------------------------------------------------------
0093               * Register usage
0094               * tmp0,tmp1,tmp2,tmp3,tmp4
0095               ********|*****|*********************|**************************
0096               pane.action.colorscheme.load:
0097 730A 0649  14         dect  stack
0098 730C C64B  30         mov   r11,*stack            ; Save return address
0099 730E 0649  14         dect  stack
0100 7310 C644  30         mov   tmp0,*stack           ; Push tmp0
0101 7312 0649  14         dect  stack
0102 7314 C645  30         mov   tmp1,*stack           ; Push tmp1
0103 7316 0649  14         dect  stack
0104 7318 C646  30         mov   tmp2,*stack           ; Push tmp2
0105 731A 0649  14         dect  stack
0106 731C C647  30         mov   tmp3,*stack           ; Push tmp3
0107 731E 0649  14         dect  stack
0108 7320 C648  30         mov   tmp4,*stack           ; Push tmp4
0109 7322 0649  14         dect  stack
0110 7324 C660  46         mov   @parm1,*stack         ; Push parm1
     7326 A006     
0111 7328 0649  14         dect  stack
0112 732A C660  46         mov   @parm2,*stack         ; Push parm2
     732C A008     
0113 732E 0649  14         dect  stack
0114 7330 C660  46         mov   @parm3,*stack         ; Push parm3
     7332 A00A     
0115                       ;-------------------------------------------------------
0116                       ; Turn screen off
0117                       ;-------------------------------------------------------
0118 7334 C120  34         mov   @parm1,tmp0
     7336 A006     
0119 7338 0284  22         ci    tmp0,>ffff            ; Skip flag set?
     733A FFFF     
0120 733C 1302  14         jeq   !                     ; Yes, so skip screen off
0121 733E 06A0  32         bl    @scroff               ; Turn screen off
     7340 2694     
0122                       ;-------------------------------------------------------
0123                       ; Get FG/BG colors framebuffer text
0124                       ;-------------------------------------------------------
0125 7342 C120  34 !       mov   @tv.colorscheme,tmp0  ; Get color scheme index
     7344 A212     
0126 7346 0604  14         dec   tmp0                  ; Internally work with base 0
0127               
0128 7348 0A34  22         sla   tmp0,3                ; Offset into color scheme data table
0129 734A 0224  22         ai    tmp0,tv.colorscheme.table
     734C 3694     
0130                                                   ; Add base for color scheme data table
0131 734E C1F4  30         mov   *tmp0+,tmp3           ; Get colors ABCD
0132 7350 C807  38         mov   tmp3,@tv.color        ; Save colors ABCD
     7352 A218     
0133                       ;-------------------------------------------------------
0134                       ; Get and save cursor color
0135                       ;-------------------------------------------------------
0136 7354 C214  26         mov   *tmp0,tmp4            ; Get colors EFGH
0137 7356 0248  22         andi  tmp4,>00ff            ; Only keep LSB (GH)
     7358 00FF     
0138 735A C808  38         mov   tmp4,@tv.curcolor     ; Save cursor color
     735C A216     
0139                       ;-------------------------------------------------------
0140                       ; Get FG/BG colors framebuffer marked text & CMDB pane
0141                       ;-------------------------------------------------------
0142 735E C234  30         mov   *tmp0+,tmp4           ; Get colors EFGH again
0143 7360 0248  22         andi  tmp4,>ff00            ; Only keep MSB (EF)
     7362 FF00     
0144 7364 0988  32         srl   tmp4,8                ; MSB to LSB
0145               
0146 7366 C174  30         mov   *tmp0+,tmp1           ; Get colors IJKL
0147 7368 C185  18         mov   tmp1,tmp2             ; \ Right align IJ and
0148 736A 0986  32         srl   tmp2,8                ; | save to @tv.busycolor
0149 736C C806  38         mov   tmp2,@tv.busycolor    ; /
     736E A21C     
0150               
0151 7370 0245  22         andi  tmp1,>00ff            ; | save KL to @tv.markcolor
     7372 00FF     
0152 7374 C805  38         mov   tmp1,@tv.markcolor    ; /
     7376 A21A     
0153               
0154 7378 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0155 737A 0985  32         srl   tmp1,8                ; \ Right align MN and
0156 737C C805  38         mov   tmp1,@tv.cmdb.hcolor  ; / save to @tv.cmdb.hcolor
     737E A220     
0157                       ;-------------------------------------------------------
0158                       ; Check if only CMDB needs to be colorized
0159                       ;-------------------------------------------------------
0160 7380 8820  50         c     @parm3,@w$ffff        ; Only colorize CMDB pane ?
     7382 A00A     
     7384 2022     
0161 7386 133E  14         jeq   pane.action.colorscheme.cmdbpane
0162                                                   ; Yes, shortcut jump to CMDB pane
0163                       ;-------------------------------------------------------
0164                       ; Get FG color for ruler
0165                       ;-------------------------------------------------------
0166 7388 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0167 738A 0245  22         andi  tmp1,>000f            ; Only keep P
     738C 000F     
0168 738E 0A45  24         sla   tmp1,4                ; Make it a FG/BG combination
0169 7390 C805  38         mov   tmp1,@tv.rulercolor   ; Save to @tv.rulercolor
     7392 A21E     
0170                       ;-------------------------------------------------------
0171                       ; Write sprite color of line and column indicators to SAT
0172                       ;-------------------------------------------------------
0173 7394 C154  26         mov   *tmp0,tmp1            ; Get colors MNOP
0174 7396 0245  22         andi  tmp1,>00f0            ; Only keep O
     7398 00F0     
0175 739A 0A45  24         sla   tmp1,4                ; Move O to MSB
0176 739C D805  38         movb  tmp1,@ramsat+7        ; Line indicator FG color to SAT
     739E A05D     
0177 73A0 D805  38         movb  tmp1,@ramsat+11       ; Column indicator FG color to SAT
     73A2 A061     
0178                       ;-------------------------------------------------------
0179                       ; Dump colors to VDP register 7 (text mode)
0180                       ;-------------------------------------------------------
0181 73A4 C147  18         mov   tmp3,tmp1             ; Get work copy
0182 73A6 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0183 73A8 0265  22         ori   tmp1,>0700
     73AA 0700     
0184 73AC C105  18         mov   tmp1,tmp0
0185 73AE 06A0  32         bl    @putvrx               ; Write VDP register
     73B0 2342     
0186                       ;-------------------------------------------------------
0187                       ; Dump colors for frame buffer pane (TAT)
0188                       ;-------------------------------------------------------
0189 73B2 C120  34         mov   @tv.ruler.visible,tmp0
     73B4 A210     
0190 73B6 130A  14         jeq   pane.action.colorscheme.fbdump.noruler
0191               
0192 73B8 C120  34         mov   @cmdb.dialog,tmp0
     73BA A71A     
0193 73BC 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     73BE 0068     
0194 73C0 1305  14         jeq   pane.action.colorscheme.fbdump.noruler
0195                                                   ; Yes, skip ruler
0196                       ;-------------------------------------------------------
0197                       ; Ruler visible on screen (TAT)
0198                       ;-------------------------------------------------------
0199 73C2 0204  20         li    tmp0,vdp.fb.toprow.tat+80
     73C4 18A0     
0200                                                   ; VDP start address (frame buffer area)
0201               
0202 73C6 0206  20         li    tmp2,(pane.botrow-2)*80
     73C8 0870     
0203                                                   ; Number of bytes to fill
0204 73CA 1004  14         jmp   pane.action.colorscheme.checkcmdb
0205               
0206               pane.action.colorscheme.fbdump.noruler:
0207                       ;-------------------------------------------------------
0208                       ; No ruler visible on screen (TAT)
0209                       ;-------------------------------------------------------
0210 73CC 0204  20         li    tmp0,vdp.fb.toprow.tat
     73CE 1850     
0211                                                   ; VDP start address (frame buffer area)
0212 73D0 0206  20         li    tmp2,(pane.botrow-1)*80
     73D2 08C0     
0213                                                   ; Number of bytes to fill
0214                       ;-------------------------------------------------------
0215                       ; Adjust bottom of frame buffer if CMDB visible
0216                       ;-------------------------------------------------------
0217               pane.action.colorscheme.checkcmdb:
0218 73D4 C820  54         mov   @cmdb.visible,@cmdb.visible
     73D6 A702     
     73D8 A702     
0219 73DA 1302  14         jeq   pane.action.colorscheme.fbdump
0220                                                   ; Not visible, skip adjustment
0221 73DC 0226  22         ai    tmp2,-320             ; CMDB adjustment
     73DE FEC0     
0222                       ;-------------------------------------------------------
0223                       ; Dump colors to VDP (TAT)
0224                       ;-------------------------------------------------------
0225               pane.action.colorscheme.fbdump:
0226 73E0 C147  18         mov   tmp3,tmp1             ; Get work copy of colors ABCD
0227 73E2 0985  32         srl   tmp1,8                ; MSB to LSB (frame buffer colors)
0228               
0229 73E4 06A0  32         bl    @xfilv                ; Fill colors
     73E6 22A2     
0230                                                   ; i \  tmp0 = start address
0231                                                   ; i |  tmp1 = byte to fill
0232                                                   ; i /  tmp2 = number of bytes to fill
0233                       ;-------------------------------------------------------
0234                       ; Colorize marked lines
0235                       ;-------------------------------------------------------
0236 73E8 C120  34         mov   @cmdb.dialog,tmp0
     73EA A71A     
0237 73EC 0284  22         ci    tmp0,id.dialog.help   ; Help dialog active?
     73EE 0068     
0238 73F0 1309  14         jeq   pane.action.colorscheme.cmdbpane
0239                                                   ; Yes, skip marked lines
0240               
0241 73F2 C120  34         mov   @parm2,tmp0
     73F4 A008     
0242 73F6 0284  22         ci    tmp0,>ffff            ; Skip colorize flag is on?
     73F8 FFFF     
0243 73FA 1304  14         jeq   pane.action.colorscheme.cmdbpane
0244               
0245 73FC 0720  34         seto  @fb.colorize          ; Colorize M1/M2 marked lines (if present)
     73FE A312     
0246 7400 06A0  32         bl    @fb.colorlines
     7402 7B72     
0247                       ;-------------------------------------------------------
0248                       ; Dump colors for CMDB header line (TAT)
0249                       ;-------------------------------------------------------
0250               pane.action.colorscheme.cmdbpane:
0251 7404 C120  34         mov   @cmdb.visible,tmp0
     7406 A702     
0252 7408 1330  14         jeq   pane.action.colorscheme.errpane
0253                                                   ; Skip if CMDB pane is hidden
0254               
0255 740A 0204  20         li    tmp0,vdp.cmdb.toprow.tat
     740C 1FD0     
0256                                                   ; VDP start address (CMDB top line)
0257               
0258 740E C160  34         mov   @tv.cmdb.hcolor,tmp1  ; set color for header line
     7410 A220     
0259 7412 0206  20         li    tmp2,1*67             ; Number of bytes to fill
     7414 0043     
0260 7416 06A0  32         bl    @xfilv                ; Fill colors
     7418 22A2     
0261                                                   ; i \  tmp0 = start address
0262                                                   ; i |  tmp1 = byte to fill
0263                                                   ; i /  tmp2 = number of bytes to fill
0264                       ;-------------------------------------------------------
0265                       ; Dump colors for CMDB Stevie logo (TAT)
0266                       ;-------------------------------------------------------
0267 741A 0204  20         li    tmp0,vdp.cmdb.toprow.tat+64
     741C 2010     
0268 741E C160  34         mov   @tv.cmdb.hcolor,tmp1  ;
     7420 A220     
0269 7422 D160  34         movb  @tv.cmdb.hcolor+1,tmp1
     7424 A221     
0270                                                   ; Copy same value into MSB
0271 7426 0945  24         srl   tmp1,4                ;
0272 7428 0245  22         andi  tmp1,>00ff            ; Only keep LSB
     742A 00FF     
0273               
0274 742C 0206  20         li    tmp2,16               ; Number of bytes to fill
     742E 0010     
0275 7430 06A0  32         bl    @xfilv                ; Fill colors
     7432 22A2     
0276                                                   ; i \  tmp0 = start address
0277                                                   ; i |  tmp1 = byte to fill
0278                                                   ; i /  tmp2 = number of bytes to fill
0279                       ;-------------------------------------------------------
0280                       ; Dump colors for CMDB pane content (TAT)
0281                       ;-------------------------------------------------------
0282 7434 0204  20         li    tmp0,vdp.cmdb.toprow.tat + 80
     7436 2020     
0283                                                   ; VDP start address (CMDB top line + 1)
0284 7438 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0285 743A 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     743C 0050     
0286 743E 06A0  32         bl    @xfilv                ; Fill colors
     7440 22A2     
0287                                                   ; i \  tmp0 = start address
0288                                                   ; i |  tmp1 = byte to fill
0289                                                   ; i /  tmp2 = number of bytes to fill
0290               
0291 7442 0204  20         li    tmp0,vdp.cmdb.toprow.tat + 160
     7444 2070     
0292                                                   ; VDP start address (CMDB top line + 2)
0293 7446 C160  34         mov   @tv.cmdb.hcolor,tmp1  ; Same color as header line
     7448 A220     
0294 744A 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     744C 0050     
0295 744E 06A0  32         bl    @xfilv                ; Fill colors
     7450 22A2     
0296                                                   ; i \  tmp0 = start address
0297                                                   ; i |  tmp1 = byte to fill
0298                                                   ; i /  tmp2 = number of bytes to fill
0299               
0300 7452 0204  20         li    tmp0,vdp.cmdb.toprow.tat + 240
     7454 20C0     
0301                                                   ; VDP start address (CMDB top line + 3)
0302 7456 C148  18         mov   tmp4,tmp1             ; Get work copy fg/bg color
0303 7458 0206  20         li    tmp2,1*80             ; Number of bytes to fill
     745A 0050     
0304 745C 06A0  32         bl    @xfilv                ; Fill colors
     745E 22A2     
0305                                                   ; i \  tmp0 = start address
0306                                                   ; i |  tmp1 = byte to fill
0307                                                   ; i /  tmp2 = number of bytes to fill
0308                       ;-------------------------------------------------------
0309                       ; Exit early if only CMDB needed to be colorized
0310                       ;-------------------------------------------------------
0311 7460 C120  34         mov   @parm3,tmp0
     7462 A00A     
0312 7464 0284  22         ci    tmp0,>ffff            ; Only colorize CMDB pane ?
     7466 FFFF     
0313 7468 1336  14         jeq   pane.action.colorscheme.cursorcolor.cmdb
0314                                                   ; Yes, shortcut to CMDB cursor color
0315                       ;-------------------------------------------------------
0316                       ; Dump colors for error pane (TAT)
0317                       ;-------------------------------------------------------
0318               pane.action.colorscheme.errpane:
0319 746A C120  34         mov   @tv.error.visible,tmp0
     746C A228     
0320 746E 1306  14         jeq   pane.action.colorscheme.statline
0321                                                   ; Skip if error pane is hidden
0322               
0323 7470 0205  20         li    tmp1,>00f6            ; White on dark red
     7472 00F6     
0324 7474 C805  38         mov   tmp1,@parm1           ; Pass color combination
     7476 A006     
0325               
0326 7478 06A0  32         bl    @pane.errline.drawcolor
     747A 766E     
0327                                                   ; Draw color on rows in error pane
0328                                                   ; \ i  @tv.error.rows = Number of rows
0329                                                   ; / i  @parm1         = Color combination
0330                       ;-------------------------------------------------------
0331                       ; Dump colors for top line and bottom line (TAT)
0332                       ;-------------------------------------------------------
0333               pane.action.colorscheme.statline:
0334 747C C160  34         mov   @tv.color,tmp1
     747E A218     
0335 7480 0245  22         andi  tmp1,>00ff            ; Only keep LSB (status line colors)
     7482 00FF     
0336 7484 C805  38         mov   tmp1,@parm1           ; Set color combination
     7486 A006     
0337               
0338               
0339 7488 04E0  34         clr   @parm2                ; Top row on screen
     748A A008     
0340 748C 06A0  32         bl    @colors.line.set      ; Load color combination for line
     748E 7562     
0341                                                   ; \ i  @parm1 = Color combination
0342                                                   ; / i  @parm2 = Row on physical screen
0343               
0344 7490 0205  20         li    tmp1,pane.botrow
     7492 001D     
0345 7494 C805  38         mov   tmp1,@parm2           ; Bottom row on screen
     7496 A008     
0346 7498 06A0  32         bl    @colors.line.set      ; Load color combination for line
     749A 7562     
0347                                                   ; \ i  @parm1 = Color combination
0348                                                   ; / i  @parm2 = Row on physical screen
0349                       ;-------------------------------------------------------
0350                       ; Dump color for hearts in TI Basic dialog (TAT)
0351                       ;-------------------------------------------------------
0352 749C C160  34         mov   @cmdb.dialog,tmp1
     749E A71A     
0353 74A0 0285  22         ci    tmp1,id.dialog.basic  ; TI Basic dialog active?
     74A2 006B     
0354 74A4 1602  14         jne   pane.action.colorscheme.ruler
0355               
0356 74A6 06A0  32         bl    @tibasic.hearts.tat   ; Dump colors for hearts
     74A8 7B1E     
0357                       ;-------------------------------------------------------
0358                       ; Dump colors for ruler if visible (TAT)
0359                       ;-------------------------------------------------------
0360               pane.action.colorscheme.ruler:
0361 74AA C160  34         mov   @cmdb.dialog,tmp1
     74AC A71A     
0362 74AE 0285  22         ci    tmp1,id.dialog.help   ; Help dialog active?
     74B0 0068     
0363 74B2 130A  14         jeq   pane.action.colorscheme.cursorcolor
0364                                                   ; Yes, skip ruler
0365               
0366 74B4 C160  34         mov   @tv.ruler.visible,tmp1
     74B6 A210     
0367 74B8 1307  14         jeq   pane.action.colorscheme.cursorcolor
0368               
0369 74BA 06A0  32         bl    @fb.ruler.init        ; Setup ruler with tab-positions in memory
     74BC 7B60     
0370 74BE 06A0  32         bl    @cpym2v
     74C0 2494     
0371 74C2 1850                   data vdp.fb.toprow.tat
0372 74C4 A370                   data fb.ruler.tat
0373 74C6 0050                   data 80               ; Show ruler colors
0374                       ;-------------------------------------------------------
0375                       ; Dump cursor FG color to sprite table (SAT)
0376                       ;-------------------------------------------------------
0377               pane.action.colorscheme.cursorcolor:
0378 74C8 C220  34         mov   @tv.curcolor,tmp4     ; Get cursor color
     74CA A216     
0379               
0380 74CC C120  34         mov   @tv.pane.focus,tmp0   ; Get pane with focus
     74CE A222     
0381 74D0 0284  22         ci    tmp0,pane.focus.fb    ; Frame buffer has focus?
     74D2 0000     
0382 74D4 1304  14         jeq   pane.action.colorscheme.cursorcolor.fb
0383                                                   ; Yes, set cursor color
0384               
0385               pane.action.colorscheme.cursorcolor.cmdb:
0386 74D6 0248  22         andi  tmp4,>f0              ; Only keep high-nibble -> Word 2 (G)
     74D8 00F0     
0387 74DA 0A48  24         sla   tmp4,4                ; Move to MSB
0388 74DC 1003  14         jmp   !
0389               
0390               pane.action.colorscheme.cursorcolor.fb:
0391 74DE 0248  22         andi  tmp4,>0f              ; Only keep low-nibble -> Word 2 (H)
     74E0 000F     
0392 74E2 0A88  32         sla   tmp4,8                ; Move to MSB
0393               
0394 74E4 D808  38 !       movb  tmp4,@ramsat+3        ; Update FG color in sprite table (SAT)
     74E6 A059     
0395 74E8 D808  38         movb  tmp4,@tv.curshape+1   ; Save cursor color
     74EA A215     
0396                       ;-------------------------------------------------------
0397                       ; Exit
0398                       ;-------------------------------------------------------
0399               pane.action.colorscheme.load.exit:
0400 74EC 06A0  32         bl    @scron                ; Turn screen on
     74EE 269C     
0401 74F0 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     74F2 A00A     
0402 74F4 C839  50         mov   *stack+,@parm2        ; Pop @parm2
     74F6 A008     
0403 74F8 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     74FA A006     
0404 74FC C239  30         mov   *stack+,tmp4          ; Pop tmp4
0405 74FE C1F9  30         mov   *stack+,tmp3          ; Pop tmp3
0406 7500 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0407 7502 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0408 7504 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0409 7506 C2F9  30         mov   *stack+,r11           ; Pop R11
0410 7508 045B  20         b     *r11                  ; Return to caller
0411               
0412               
0413               
0414               ***************************************************************
0415               * pane.action.colorscheme.statline
0416               * Set color combination for bottom status line
0417               ***************************************************************
0418               * bl @pane.action.colorscheme.statlines
0419               *--------------------------------------------------------------
0420               * INPUT
0421               * @parm1 = Color combination to set
0422               *--------------------------------------------------------------
0423               * OUTPUT
0424               * none
0425               *--------------------------------------------------------------
0426               * Register usage
0427               * tmp0, tmp1, tmp2
0428               ********|*****|*********************|**************************
0429               pane.action.colorscheme.statlines:
0430 750A 0649  14         dect  stack
0431 750C C64B  30         mov   r11,*stack            ; Save return address
0432 750E 0649  14         dect  stack
0433 7510 C644  30         mov   tmp0,*stack           ; Push tmp0
0434                       ;------------------------------------------------------
0435                       ; Bottom line
0436                       ;------------------------------------------------------
0437 7512 0204  20         li    tmp0,pane.botrow
     7514 001D     
0438 7516 C804  38         mov   tmp0,@parm2           ; Last row on screen
     7518 A008     
0439 751A 06A0  32         bl    @colors.line.set      ; Load color combination for line
     751C 7562     
0440                                                   ; \ i  @parm1 = Color combination
0441                                                   ; / i  @parm2 = Row on physical screen
0442                       ;------------------------------------------------------
0443                       ; Exit
0444                       ;------------------------------------------------------
0445               pane.action.colorscheme.statlines.exit:
0446 751E C139  30         mov   *stack+,tmp0          ; Pop tmp0
0447 7520 C2F9  30         mov   *stack+,r11           ; Pop R11
0448 7522 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0144                       copy  "pane.cursor.asm"             ; Cursor utility functions
     **** ****     > pane.cursor.asm
0001               * FILE......: pane.cursor.asm
0002               * Purpose...: Cursor utility functions for panes
0003               
0004               ***************************************************************
0005               * pane.cursor.hide
0006               * Hide cursor
0007               ***************************************************************
0008               * bl  @pane.cursor.hide
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * OUTPUT
0014               * none
0015               *--------------------------------------------------------------
0016               * Register usage
0017               * none
0018               ********|*****|*********************|**************************
0019               pane.cursor.hide:
0020 7524 0649  14         dect  stack
0021 7526 C64B  30         mov   r11,*stack            ; Save return address
0022                       ;-------------------------------------------------------
0023                       ; Hide cursor
0024                       ;-------------------------------------------------------
0025 7528 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     752A 229C     
0026 752C 2180                   data sprsat,>00,8     ; \ i  p0 = VDP destination
     752E 0000     
     7530 0008     
0027                                                   ; | i  p1 = Byte to write
0028                                                   ; / i  p2 = Number of bytes to write
0029               
0030 7532 06A0  32         bl    @clslot
     7534 2EB8     
0031 7536 0001                   data 1                ; Terminate task.vdp.copy.sat
0032               
0033 7538 06A0  32         bl    @clslot
     753A 2EB8     
0034 753C 0002                   data 2                ; Terminate task.vdp.cursor
0035                       ;-------------------------------------------------------
0036                       ; Exit
0037                       ;-------------------------------------------------------
0038               pane.cursor.hide.exit:
0039 753E C2F9  30         mov   *stack+,r11           ; Pop R11
0040 7540 045B  20         b     *r11                  ; Return to caller
0041               
0042               
0043               
0044               ***************************************************************
0045               * pane.cursor.blink
0046               * Blink cursor
0047               ***************************************************************
0048               * bl  @pane.cursor.blink
0049               *--------------------------------------------------------------
0050               * INPUT
0051               * none
0052               *--------------------------------------------------------------
0053               * OUTPUT
0054               * none
0055               *--------------------------------------------------------------
0056               * Register usage
0057               * none
0058               ********|*****|*********************|**************************
0059               pane.cursor.blink:
0060 7542 0649  14         dect  stack
0061 7544 C64B  30         mov   r11,*stack            ; Save return address
0062                       ;-------------------------------------------------------
0063                       ; Hide cursor
0064                       ;-------------------------------------------------------
0065 7546 06A0  32         bl    @filv                 ; Clear sprite SAT in VDP RAM
     7548 229C     
0066 754A 2180                   data sprsat,>00,4     ; \ i  p0 = VDP destination
     754C 0000     
     754E 0004     
0067                                                   ; | i  p1 = Byte to write
0068                                                   ; / i  p2 = Number of bytes to write
0069               
0071               
0072 7550 06A0  32         bl    @mkslot
     7552 2E9A     
0073 7554 0102                   data >0102,task.vdp.copy.sat ; Task 1 - Update cursor position
     7556 71C2     
0074 7558 020F                   data >020f,task.vdp.cursor   ; Task 2 - Toggle cursor shape
     755A 7264     
0075 755C FFFF                   data eol
0076               
0084               
0085                       ;-------------------------------------------------------
0086                       ; Exit
0087                       ;-------------------------------------------------------
0088               pane.cursor.blink.exit:
0089 755E C2F9  30         mov   *stack+,r11           ; Pop R11
0090 7560 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0145                       ;-----------------------------------------------------------------------
0146                       ; Screen panes
0147                       ;-----------------------------------------------------------------------
0148                       copy  "colors.line.set.asm"         ; Set color combination for line
     **** ****     > colors.line.set.asm
0001               * FILE......: colors.line.set
0002               * Purpose...: Set color combination for line
0003               
0004               ***************************************************************
0005               * colors.line.set
0006               * Set color combination for line in VDP TAT
0007               ***************************************************************
0008               * bl  @colors.line.set
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @parm1 = Foreground / Background color
0012               * @parm2 = Row on physical screen
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               ********|*****|*********************|**************************
0020               colors.line.set:
0021 7562 0649  14         dect  stack
0022 7564 C64B  30         mov   r11,*stack            ; Save return address
0023 7566 0649  14         dect  stack
0024 7568 C644  30         mov   tmp0,*stack           ; Push tmp0
0025 756A 0649  14         dect  stack
0026 756C C645  30         mov   tmp1,*stack           ; Push tmp1
0027 756E 0649  14         dect  stack
0028 7570 C646  30         mov   tmp2,*stack           ; Push tmp2
0029 7572 0649  14         dect  stack
0030 7574 C660  46         mov   @parm1,*stack         ; Push parm1
     7576 A006     
0031 7578 0649  14         dect  stack
0032 757A C660  46         mov   @parm2,*stack         ; Push parm2
     757C A008     
0033                       ;-------------------------------------------------------
0034                       ; Dump colors for line in TAT
0035                       ;-------------------------------------------------------
0036 757E C120  34         mov   @parm2,tmp0           ; Get target line
     7580 A008     
0037 7582 0205  20         li    tmp1,colrow           ; Columns per row (spectra2)
     7584 0050     
0038 7586 3944  58         mpy   tmp0,tmp1             ; Calculate VDP address (results in tmp2!)
0039               
0040 7588 C106  18         mov   tmp2,tmp0             ; Set VDP start address
0041 758A 0224  22         ai    tmp0,vdp.tat.base     ; Add TAT base address
     758C 1800     
0042 758E C160  34         mov   @parm1,tmp1           ; Get foreground/background color
     7590 A006     
0043 7592 0206  20         li    tmp2,80               ; Number of bytes to fill
     7594 0050     
0044               
0045 7596 06A0  32         bl    @xfilv                ; Fill colors
     7598 22A2     
0046                                                   ; i \  tmp0 = start address
0047                                                   ; i |  tmp1 = byte to fill
0048                                                   ; i /  tmp2 = number of bytes to fill
0049                       ;-------------------------------------------------------
0050                       ; Exit
0051                       ;-------------------------------------------------------
0052               colors.line.set.exit:
0053 759A C839  50         mov   *stack+,@parm2        ; Pop @parm2
     759C A008     
0054 759E C839  50         mov   *stack+,@parm1        ; Pop @parm1
     75A0 A006     
0055 75A2 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 75A4 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 75A6 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 75A8 C2F9  30         mov   *stack+,r11           ; Pop R11
0059 75AA 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0149                       copy  "pane.topline.asm"            ; Top line
     **** ****     > pane.topline.asm
0001               * FILE......: pane.topline.asm
0002               * Purpose...: Pane "status top line"
0003               
0004               ***************************************************************
0005               * pane.topline
0006               * Draw top line
0007               ***************************************************************
0008               * bl  @pane.topline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.topline:
0017 75AC 0649  14         dect  stack
0018 75AE C64B  30         mov   r11,*stack            ; Save return address
0019 75B0 0649  14         dect  stack
0020 75B2 C644  30         mov   tmp0,*stack           ; Push tmp0
0021 75B4 0649  14         dect  stack
0022 75B6 C660  42         mov   @wyx,*stack           ; Push cursor position
     75B8 832A     
0023                       ;------------------------------------------------------
0024                       ; Show current file
0025                       ;------------------------------------------------------
0026               pane.topline.file:
0027 75BA 06A0  32         bl    @at
     75BC 26D4     
0028 75BE 0000                   byte 0,0              ; y=0, x=0
0029               
0030 75C0 C820  54         mov   @edb.filename.ptr,@parm1
     75C2 A514     
     75C4 A006     
0031                                                   ; Get string to display
0032 75C6 0204  20         li    tmp0,47
     75C8 002F     
0033 75CA C804  38         mov   tmp0,@parm2           ; Set requested length
     75CC A008     
0034 75CE 0204  20         li    tmp0,32
     75D0 0020     
0035 75D2 C804  38         mov   tmp0,@parm3           ; Set character to fill
     75D4 A00A     
0036 75D6 0204  20         li    tmp0,rambuf
     75D8 A100     
0037 75DA C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     75DC A00C     
0038               
0039               
0040 75DE 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     75E0 3330     
0041                                                   ; \ i  @parm1 = Pointer to string
0042                                                   ; | i  @parm2 = Requested length
0043                                                   ; | i  @parm3 = Fill characgter
0044                                                   ; | i  @parm4 = Pointer to buffer with
0045                                                   ; /             output string
0046               
0047 75E2 C160  34         mov   @outparm1,tmp1        ; \ Display padded filename
     75E4 A016     
0048 75E6 06A0  32         bl    @xutst0               ; /
     75E8 242E     
0049                       ;------------------------------------------------------
0050                       ; Show if text was changed in editor buffer
0051                       ;------------------------------------------------------
0052               pane.topline.show_dirty:
0053 75EA C120  34         mov   @edb.dirty,tmp0
     75EC A506     
0054 75EE 1305  14         jeq   pane.topline.nochange
0055                       ;------------------------------------------------------
0056                       ; Show "*"
0057                       ;------------------------------------------------------
0058 75F0 06A0  32         bl    @putat
     75F2 2450     
0059 75F4 004F                   byte 0,79             ; y=0, x=79
0060 75F6 371B                   data txt.star
0061 75F8 1004  14         jmp   pane.topline.showmarkers
0062                       ;------------------------------------------------------
0063                       ; Show " "
0064                       ;------------------------------------------------------
0065               pane.topline.nochange:
0066 75FA 06A0  32         bl    @putat
     75FC 2450     
0067 75FE 004F                   byte 0,79             ; y=0, x=79
0068 7600 39F8                   data txt.ws1          ; Single white space
0069                       ;------------------------------------------------------
0070                       ; Check if M1/M2 markers need to be shown
0071                       ;------------------------------------------------------
0072               pane.topline.showmarkers:
0073 7602 C120  34         mov   @edb.block.m1,tmp0    ; \
     7604 A50E     
0074 7606 0284  22         ci    tmp0,>ffff            ; | Exit early if M1 unset (>ffff)
     7608 FFFF     
0075 760A 132C  14         jeq   pane.topline.exit     ; /
0076               
0077 760C C120  34         mov   @tv.task.oneshot,tmp0 ; \
     760E A224     
0078 7610 0284  22         ci    tmp0,pane.topline.oneshot.clearmsg
     7612 3648     
0079                                                   ; | Exit early if overlay message visible
0080 7614 1327  14         jeq   pane.topline.exit     ; /
0081                       ;------------------------------------------------------
0082                       ; Show M1 marker
0083                       ;------------------------------------------------------
0084 7616 06A0  32         bl    @putat
     7618 2450     
0085 761A 0034                   byte 0,52
0086 761C 3906                   data txt.m1           ; Show M1 marker message
0087               
0088 761E C820  54         mov   @edb.block.m1,@parm1
     7620 A50E     
     7622 A006     
0089 7624 06A0  32         bl    @tv.unpack.uint16     ; Unpack 16 bit unsigned integer to string
     7626 3304     
0090                                                   ; \ i @parm1           = uint16
0091                                                   ; / o @unpacked.string = Output string
0092               
0093 7628 0204  20         li    tmp0,>0500
     762A 0500     
0094 762C D804  38         movb  tmp0,@unpacked.string ; Set string length to 5 (padding)
     762E A02C     
0095               
0096 7630 06A0  32         bl    @putat
     7632 2450     
0097 7634 0037                   byte 0,55
0098 7636 A02C                   data unpacked.string  ; Show M1 value
0099                       ;------------------------------------------------------
0100                       ; Show M2 marker
0101                       ;------------------------------------------------------
0102 7638 C120  34         mov   @edb.block.m2,tmp0    ; \
     763A A510     
0103 763C 0284  22         ci    tmp0,>ffff            ; | Exit early if M2 unset (>ffff)
     763E FFFF     
0104 7640 1311  14         jeq   pane.topline.exit     ; /
0105               
0106 7642 06A0  32         bl    @putat
     7644 2450     
0107 7646 003E                   byte 0,62
0108 7648 390A                   data txt.m2           ; Show M2 marker message
0109               
0110 764A C820  54         mov   @edb.block.m2,@parm1
     764C A510     
     764E A006     
0111 7650 06A0  32         bl    @tv.unpack.uint16     ; Unpack 16 bit unsigned integer to string
     7652 3304     
0112                                                   ; \ i @parm1           = uint16
0113                                                   ; / o @unpacked.string = Output string
0114               
0115 7654 0204  20         li    tmp0,>0500
     7656 0500     
0116 7658 D804  38         movb  tmp0,@unpacked.string ; Set string length to 5 (padding)
     765A A02C     
0117               
0118 765C 06A0  32         bl    @putat
     765E 2450     
0119 7660 0041                   byte 0,65
0120 7662 A02C                   data unpacked.string  ; Show M2 value
0121                       ;------------------------------------------------------
0122                       ; Exit
0123                       ;------------------------------------------------------
0124               pane.topline.exit:
0125 7664 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7666 832A     
0126 7668 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0127 766A C2F9  30         mov   *stack+,r11           ; Pop r11
0128 766C 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0150                       copy  "pane.errline.asm"            ; Error line
     **** ****     > pane.errline.asm
0001               * FILE......: pane.errline.asm
0002               * Purpose...: Utilities for error lines
0003               
0004               ***************************************************************
0005               * pane.errline.drawcolor
0006               * Draw color on rows in error pane
0007               ***************************************************************
0008               * bl @pane.errline.drawcolor
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @tv.error.rows = Number of rows in error pane
0012               * @parm1         = Color combination
0013               *--------------------------------------------------------------
0014               * OUTPUT
0015               * none
0016               *--------------------------------------------------------------
0017               * Register usage
0018               * tmp0,tmp1,tmp2
0019               *--------------------------------------------------------------
0020               * Notes
0021               ********|*****|*********************|**************************
0022               pane.errline.drawcolor:
0023 766E 0649  14         dect  stack
0024 7670 C64B  30         mov   r11,*stack            ; Save return address
0025 7672 0649  14         dect  stack
0026 7674 C644  30         mov   tmp0,*stack           ; Push tmp0
0027 7676 0649  14         dect  stack
0028 7678 C645  30         mov   tmp1,*stack           ; Push tmp1
0029 767A 0649  14         dect  stack
0030 767C C646  30         mov   tmp2,*stack           ; Push tmp2
0031                       ;-------------------------------------------------------
0032                       ; Determine 1st row in error pane
0033                       ;-------------------------------------------------------
0034 767E 0204  20         li    tmp0,pane.botrow      ; Get rows on screen
     7680 001D     
0035 7682 C144  18         mov   tmp0,tmp1             ; \ Get first row in error pane
0036 7684 6160  34         s     @tv.error.rows,tmp1   ; /
     7686 A22A     
0037                       ;-------------------------------------------------------
0038                       ; Dump colors for row
0039                       ;-------------------------------------------------------
0040               pane.errline.drawcolor.loop:
0041 7688 C805  38         mov   tmp1,@parm2           ; Row on physical screen
     768A A008     
0042               
0043 768C 06A0  32         bl    @colors.line.set      ; Load color combination for line
     768E 7562     
0044                                                   ; \ i  @parm1 = Color combination
0045                                                   ; / i  @parm2 = Row on physical screen
0046               
0047 7690 0585  14         inc   tmp1                  ; Next row
0048 7692 8105  18         c     tmp1,tmp0             ; Last row reached?
0049 7694 11F9  14         jlt   pane.errline.drawcolor.loop
0050                                                   ; Not yet, next iteration
0051                       ;-------------------------------------------------------
0052                       ; Exit
0053                       ;-------------------------------------------------------
0054               pane.errline.drawcolor.exit:
0055 7696 C1B9  30         mov   *stack+,tmp2          ; Pop tmp2
0056 7698 C179  30         mov   *stack+,tmp1          ; Pop tmp1
0057 769A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0058 769C C2F9  30         mov   *stack+,r11           ; Pop R11
0059 769E 045B  20         b     *r11                  ; Return to caller
0060               
0061               
0062               
0063               
0064               ***************************************************************
0065               * pane.errline.show
0066               * Show command buffer pane
0067               ***************************************************************
0068               * bl @pane.errline.show
0069               *--------------------------------------------------------------
0070               * INPUT
0071               * @tv.error.msg = Error message to display
0072               *--------------------------------------------------------------
0073               * OUTPUT
0074               * none
0075               *--------------------------------------------------------------
0076               * Register usage
0077               * tmp0,tmp1
0078               *--------------------------------------------------------------
0079               * Notes
0080               ********|*****|*********************|**************************
0081               pane.errline.show:
0082 76A0 0649  14         dect  stack
0083 76A2 C64B  30         mov   r11,*stack            ; Save return address
0084 76A4 0649  14         dect  stack
0085 76A6 C644  30         mov   tmp0,*stack           ; Push tmp0
0086 76A8 0649  14         dect  stack
0087 76AA C645  30         mov   tmp1,*stack           ; Push tmp1
0088               
0089 76AC 0205  20         li    tmp1,>00f6            ; White on dark red
     76AE 00F6     
0090 76B0 C805  38         mov   tmp1,@parm1
     76B2 A006     
0091               
0092 76B4 06A0  32         bl    @pane.errline.drawcolor
     76B6 766E     
0093                                                   ; Draw color on rows in error pane
0094                                                   ; \ i  @tv.error.rows = Number of rows
0095                                                   ; / i  @parm1         = Color combination
0096                       ;------------------------------------------------------
0097                       ; Pad error message up to 160 characters
0098                       ;------------------------------------------------------
0099 76B8 0204  20         li    tmp0,tv.error.msg
     76BA A230     
0100 76BC C804  38         mov   tmp0,@parm1           ; Get pointer to string
     76BE A006     
0101               
0102 76C0 0204  20         li    tmp0,240
     76C2 00F0     
0103 76C4 C804  38         mov   tmp0,@parm2           ; Set requested length
     76C6 A008     
0104               
0105 76C8 0204  20         li    tmp0,32
     76CA 0020     
0106 76CC C804  38         mov   tmp0,@parm3           ; Set character to fill
     76CE A00A     
0107               
0108 76D0 0204  20         li    tmp0,rambuf
     76D2 A100     
0109 76D4 C804  38         mov   tmp0,@parm4           ; Set pointer to buffer for output string
     76D6 A00C     
0110               
0111 76D8 06A0  32         bl    @tv.pad.string        ; Pad string to specified length
     76DA 3330     
0112                                                   ; \ i  @parm1 = Pointer to string
0113                                                   ; | i  @parm2 = Requested length
0114                                                   ; | i  @parm3 = Fill character
0115                                                   ; | i  @parm4 = Pointer to buffer with
0116                                                   ; /             output string
0117                       ;------------------------------------------------------
0118                       ; Show error message
0119                       ;------------------------------------------------------
0120 76DC 06A0  32         bl    @at
     76DE 26D4     
0121 76E0 1A00                   byte pane.botrow-3,0  ; Set cursor
0122               
0123 76E2 C160  34         mov   @outparm1,tmp1        ; \ Display error message
     76E4 A016     
0124 76E6 06A0  32         bl    @xutst0               ; /
     76E8 242E     
0125               
0126 76EA C120  34         mov   @fb.scrrows.max,tmp0  ; \
     76EC A31E     
0127 76EE 6120  34         s     @tv.error.rows,tmp0   ; | Adjust number of rows in frame buffer
     76F0 A22A     
0128 76F2 C804  38         mov   tmp0,@fb.scrrows      ; /
     76F4 A31C     
0129               
0130 76F6 0720  34         seto  @tv.error.visible     ; Error line is visible
     76F8 A228     
0131                       ;------------------------------------------------------
0132                       ; Exit
0133                       ;------------------------------------------------------
0134               pane.errline.show.exit:
0135 76FA C179  30         mov   *stack+,tmp1          ; Pop tmp1
0136 76FC C139  30         mov   *stack+,tmp0          ; Pop tmp0
0137 76FE C2F9  30         mov   *stack+,r11           ; Pop r11
0138 7700 045B  20         b     *r11                  ; Return to caller
0139               
0140               
0141               
0142               ***************************************************************
0143               * pane.errline.hide
0144               * Hide error line
0145               ***************************************************************
0146               * bl @pane.errline.hide
0147               *--------------------------------------------------------------
0148               * INPUT
0149               * none
0150               *--------------------------------------------------------------
0151               * OUTPUT
0152               * none
0153               *--------------------------------------------------------------
0154               * Register usage
0155               * none
0156               *--------------------------------------------------------------
0157               * Hiding the error line passes pane focus to frame buffer.
0158               ********|*****|*********************|**************************
0159               pane.errline.hide:
0160 7702 0649  14         dect  stack
0161 7704 C64B  30         mov   r11,*stack            ; Save return address
0162 7706 0649  14         dect  stack
0163 7708 C644  30         mov   tmp0,*stack           ; Push tmp0
0164                       ;------------------------------------------------------
0165                       ; Get color combination
0166                       ;------------------------------------------------------
0167 770A 06A0  32         bl    @errpane.init         ; Clear error line string in RAM
     770C 3256     
0168               
0169 770E C120  34         mov   @cmdb.visible,tmp0
     7710 A702     
0170 7712 1303  14         jeq   pane.errline.hide.fbcolor
0171                       ;------------------------------------------------------
0172                       ; CMDB pane color
0173                       ;------------------------------------------------------
0174 7714 C120  34         mov   @tv.cmdb.hcolor,tmp0  ; Get colors of CMDB header line
     7716 A220     
0175 7718 1003  14         jmp   !
0176                       ;------------------------------------------------------
0177                       ; Frame buffer color
0178                       ;------------------------------------------------------
0179               pane.errline.hide.fbcolor:
0180 771A C120  34         mov   @tv.color,tmp0        ; Get colors
     771C A218     
0181 771E 0984  32         srl   tmp0,8                ; Get rid of status line colors
0182                       ;------------------------------------------------------
0183                       ; Dump colors
0184                       ;------------------------------------------------------
0185 7720 C804  38 !       mov   tmp0,@parm1           ; set foreground/background color
     7722 A006     
0186               
0187 7724 06A0  32         bl    @pane.errline.drawcolor
     7726 766E     
0188                                                   ; Draw color on rows in error pane
0189                                                   ; \ i  @tv.error.rows = Number of rows
0190                                                   ; / i  @parm1         = Color combination
0191               
0192 7728 04E0  34         clr   @tv.error.visible     ; Error line no longer visible
     772A A228     
0193 772C C820  54         mov   @fb.scrrows.max,@fb.scrrows
     772E A31E     
     7730 A31C     
0194                                                   ; Set frame buffer to full size again
0195                       ;------------------------------------------------------
0196                       ; Exit
0197                       ;------------------------------------------------------
0198               pane.errline.hide.exit:
0199 7732 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0200 7734 C2F9  30         mov   *stack+,r11           ; Pop r11
0201 7736 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0151                       copy  "pane.botline.asm"            ; Bottom line
     **** ****     > pane.botline.asm
0001               * FILE......: pane.botline.asm
0002               * Purpose...: Pane "status bottom line"
0003               
0004               ***************************************************************
0005               * pane.botline
0006               * Draw Stevie bottom line
0007               ***************************************************************
0008               * bl  @pane.botline
0009               *--------------------------------------------------------------
0010               * OUTPUT
0011               * none
0012               *--------------------------------------------------------------
0013               * Register usage
0014               * tmp0
0015               ********|*****|*********************|**************************
0016               pane.botline:
0017 7738 0649  14         dect  stack
0018 773A C64B  30         mov   r11,*stack            ; Save return address
0019 773C 0649  14         dect  stack
0020 773E C644  30         mov   tmp0,*stack           ; Push tmp0
0021 7740 0649  14         dect  stack
0022 7742 C660  42         mov   @wyx,*stack           ; Push cursor position
     7744 832A     
0023                       ;------------------------------------------------------
0024                       ; Show block shortcuts if set
0025                       ;------------------------------------------------------
0026 7746 C120  34         mov   @edb.block.m2,tmp0    ; \
     7748 A510     
0027 774A 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0028                                                   ; /
0029 774C 1305  14         jeq   pane.botline.show_keys
0030               
0031 774E 06A0  32         bl    @putat
     7750 2450     
0032 7752 1D00                   byte pane.botrow,0
0033 7754 393B                   data txt.keys.block   ; Show block shortcuts
0034               
0035 7756 1015  14         jmp   pane.botline.show_mode
0036                       ;------------------------------------------------------
0037                       ; Show default message
0038                       ;------------------------------------------------------
0039               pane.botline.show_keys:
0040 7758 C120  34         mov   @tib.session,tmp0     ; Active TI Basic session?
     775A A0B4     
0041 775C 130E  14         jeq   !
0042                       ;------------------------------------------------------
0043                       ; Show TI Basic session ID
0044                       ;------------------------------------------------------
0045 775E 06A0  32         bl    @putat
     7760 2450     
0046 7762 1D00                   byte pane.botrow,0
0047 7764 391F                   data txt.keys.defaultb
0048                                                   ; Show defaults + TI Basic
0049               
0050 7766 C120  34         mov   @tib.session,tmp0     ; Get Session ID
     7768 A0B4     
0051 776A 0224  22         ai    tmp0,>0130            ; \ Turn into string with
     776C 0130     
0052                                                   ; | length-byte prefix and
0053                                                   ; / ASCII offset 48 (>30)
0054               
0055 776E C804  38         mov   tmp0,@rambuf          ; Copy to ram buffer for display
     7770 A100     
0056               
0057 7772 06A0  32         bl    @putat                ; \
     7774 2450     
0058 7776 1D1B                   byte pane.botrow,27   ; | Display session-ID string
0059 7778 A100                   data rambuf           ; / Y=bottom row, X=27
0060                       ;------------------------------------------------------
0061                       ; Show default keys
0062                       ;------------------------------------------------------
0063 777A 06A0  32 !       bl    @putat
     777C 2450     
0064 777E 1D00                   byte pane.botrow,0
0065 7780 390E                   data txt.keys.default ; Show default keys
0066                       ;------------------------------------------------------
0067                       ; Show text editing mode
0068                       ;------------------------------------------------------
0069               pane.botline.show_mode:
0070 7782 C120  34         mov   @edb.insmode,tmp0
     7784 A50A     
0071 7786 1605  14         jne   pane.botline.show_mode.insert
0072                       ;------------------------------------------------------
0073                       ; Overwrite mode
0074                       ;------------------------------------------------------
0075 7788 06A0  32         bl    @putat
     778A 2450     
0076 778C 1D37                   byte  pane.botrow,55
0077 778E 370C                   data  txt.ovrwrite
0078 7790 100C  14         jmp   pane.botline.show_linecol
0079                       ;------------------------------------------------------
0080                       ; Insert mode
0081                       ;------------------------------------------------------
0082               pane.botline.show_mode.insert:
0083 7792 C120  34         mov   @edb.autoinsert,tmp0
     7794 A50C     
0084 7796 1305  14         jeq   pane.botline.show_mode.insert.noauto
0085                       ;------------------------------------------------------
0086                       ; Auto-Insert
0087                       ;------------------------------------------------------
0088 7798 06A0  32         bl    @putat
     779A 2450     
0089 779C 1D37                   byte  pane.botrow,55
0090 779E 3716                   data  txt.autoinsert
0091 77A0 1004  14         jmp   pane.botline.show_linecol
0092                       ;------------------------------------------------------
0093                       ; No Auto-Insert
0094                       ;------------------------------------------------------
0095               pane.botline.show_mode.insert.noauto:
0096 77A2 06A0  32         bl    @putat
     77A4 2450     
0097 77A6 1D37                   byte  pane.botrow,55
0098 77A8 3711                   data  txt.insert
0099                       ;------------------------------------------------------
0100                       ; Show "line,column"
0101                       ;------------------------------------------------------
0102               pane.botline.show_linecol:
0103 77AA C820  54         mov   @fb.row,@parm1
     77AC A306     
     77AE A006     
0104 77B0 06A0  32         bl    @fb.row2line          ; Row to editor line
     77B2 308E     
0105                                                   ; \ i @fb.topline = Top line in frame buffer
0106                                                   ; | i @parm1      = Row in frame buffer
0107                                                   ; / o @outparm1   = Matching line in EB
0108               
0109 77B4 05A0  34         inc   @outparm1             ; Add base 1
     77B6 A016     
0110                       ;------------------------------------------------------
0111                       ; Show line
0112                       ;------------------------------------------------------
0113 77B8 06A0  32         bl    @putnum
     77BA 2A32     
0114 77BC 1D3B                   byte  pane.botrow,59  ; YX
0115 77BE A016                   data  outparm1,rambuf
     77C0 A100     
0116 77C2 30                     byte  48              ; ASCII offset
0117 77C3   20                   byte  32              ; Padding character
0118                       ;------------------------------------------------------
0119                       ; Show comma
0120                       ;------------------------------------------------------
0121 77C4 06A0  32         bl    @putat
     77C6 2450     
0122 77C8 1D40                   byte  pane.botrow,64
0123 77CA 3704                   data  txt.delim
0124                       ;------------------------------------------------------
0125                       ; Show column
0126                       ;------------------------------------------------------
0127 77CC 06A0  32         bl    @film
     77CE 2244     
0128 77D0 A105                   data rambuf+5,32,12   ; Clear work buffer with space character
     77D2 0020     
     77D4 000C     
0129               
0130 77D6 C120  34         mov   @fb.column,tmp0       ; Get column
     77D8 A30C     
0131 77DA A120  34         a     @fb.vwco,tmp0         ; Add view window column offset
     77DC A310     
0132 77DE 0584  14         inc   tmp0                  ; Offset 1
0133 77E0 C804  30         mov   tmp0,@waux1           ; Save in temporary
     77E2 833C     
0134               
0135 77E4 06A0  32         bl    @mknum                ; Convert unsigned number to string
     77E6 29B4     
0136 77E8 833C                   data  waux1,rambuf
     77EA A100     
0137 77EC 30                     byte  48              ; ASCII offset
0138 77ED   20                   byte  32              ; Fill character
0139               
0140 77EE 06A0  32         bl    @trimnum              ; Trim number to the left
     77F0 2A0C     
0141 77F2 A100                   data  rambuf,rambuf+5,32
     77F4 A105     
     77F6 0020     
0142               
0143 77F8 0204  20         li    tmp0,>0600            ; "Fix" number length to clear junk chars
     77FA 0600     
0144 77FC D804  38         movb  tmp0,@rambuf+5        ; Set length byte
     77FE A105     
0145               
0146                       ;------------------------------------------------------
0147                       ; Decide if row length is to be shown
0148                       ;------------------------------------------------------
0149 7800 C120  34         mov   @fb.column,tmp0       ; \ Base 1 for comparison
     7802 A30C     
0150 7804 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7806 A310     
0151 7808 0584  14         inc   tmp0                  ; /
0152 780A 8804  34         c     tmp0,@fb.row.length   ; Check if cursor on last column on row
     780C A308     
0153 780E 1101  14         jlt   pane.botline.show_linecol.linelen
0154 7810 102E  14         jmp   pane.botline.show_linecol.colstring
0155                                                   ; Yes, skip showing row length
0156                       ;------------------------------------------------------
0157                       ; Add ',' delimiter and length of line to string
0158                       ;------------------------------------------------------
0159               pane.botline.show_linecol.linelen:
0160 7812 C120  34         mov   @fb.column,tmp0       ; \
     7814 A30C     
0161 7816 A120  34         a     @fb.vwco,tmp0         ; | Add view window column offset
     7818 A310     
0162 781A 0205  20         li    tmp1,rambuf+7         ; | Determine column position for '/' char
     781C A107     
0163 781E 0284  22         ci    tmp0,9                ; | based on number of digits in cursor X
     7820 0009     
0164 7822 1101  14         jlt   !                     ; | column.
0165 7824 0585  14         inc   tmp1                  ; /
0166               
0167 7826 0204  20 !       li    tmp0,>2f00            ; \ ASCII '/'
     7828 2F00     
0168 782A DD44  32         movb  tmp0,*tmp1+           ; / Add delimiter to string
0169               
0170 782C C805  30         mov   tmp1,@waux1           ; Backup position in ram buffer
     782E 833C     
0171               
0172 7830 06A0  32         bl    @mknum
     7832 29B4     
0173 7834 A308                   data  fb.row.length,rambuf
     7836 A100     
0174 7838 30                     byte  48              ; ASCII offset
0175 7839   20                   byte  32              ; Padding character
0176               
0177 783A C160  30         mov   @waux1,tmp1           ; Restore position in ram buffer
     783C 833C     
0178               
0179 783E C120  34         mov   @fb.row.length,tmp0   ; \ Get length of line
     7840 A308     
0180 7842 0284  22         ci    tmp0,10               ; /
     7844 000A     
0181 7846 110C  14         jlt   pane.botline.show_line.1digit
0182                       ;------------------------------------------------------
0183                       ; Assert
0184                       ;------------------------------------------------------
0185 7848 0284  22         ci    tmp0,99
     784A 0063     
0186 784C 1205  14         jle   pane.botline.show_line.2digits
0187                       ;------------------------------------------------------
0188                       ; Show length of line (3 digits)
0189                       ;------------------------------------------------------
0190               pane.botline.show_line.3digits:
0191 784E 0204  20         li    tmp0,rambuf+2
     7850 A102     
0192 7852 DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0193 7854 DD74  42         movb  *tmp0+,*tmp1+         ; 2nd digit row length
0194 7856 1006  14         jmp   pane.botline.show_line.rest
0195                       ;------------------------------------------------------
0196                       ; Show length of line (2 digits)
0197                       ;------------------------------------------------------
0198               pane.botline.show_line.2digits:
0199 7858 0204  20         li    tmp0,rambuf+3
     785A A103     
0200 785C DD74  42         movb  *tmp0+,*tmp1+         ; 1st digit row length
0201 785E 1002  14         jmp   pane.botline.show_line.rest
0202                       ;------------------------------------------------------
0203                       ; Show length of line (1 digit)
0204                       ;------------------------------------------------------
0205               pane.botline.show_line.1digit:
0206 7860 0204  20         li    tmp0,rambuf+4
     7862 A104     
0207               pane.botline.show_line.rest:
0208 7864 DD74  42         movb  *tmp0+,*tmp1+         ; 1st/Next digit row length
0209 7866 DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     7868 A100     
0210 786A DD60  48         movb  @rambuf+0,*tmp1+      ; Append a whitespace character
     786C A100     
0211                       ;------------------------------------------------------
0212                       ; Show column string
0213                       ;------------------------------------------------------
0214               pane.botline.show_linecol.colstring:
0215 786E 06A0  32         bl    @putat
     7870 2450     
0216 7872 1D41                   byte pane.botrow,65
0217 7874 A105                   data rambuf+5         ; Show string
0218                       ;------------------------------------------------------
0219                       ; Show lines in buffer unless on last line in file
0220                       ;------------------------------------------------------
0221 7876 C820  54         mov   @fb.row,@parm1
     7878 A306     
     787A A006     
0222 787C 06A0  32         bl    @fb.row2line
     787E 308E     
0223 7880 8820  50         c     @edb.lines,@outparm1
     7882 A504     
     7884 A016     
0224 7886 1605  14         jne   pane.botline.show_lines_in_buffer
0225               
0226 7888 06A0  32         bl    @putat
     788A 2450     
0227 788C 1D48                   byte pane.botrow,72
0228 788E 3706                   data txt.bottom
0229               
0230 7890 1009  14         jmp   pane.botline.exit
0231                       ;------------------------------------------------------
0232                       ; Show lines in buffer
0233                       ;------------------------------------------------------
0234               pane.botline.show_lines_in_buffer:
0235 7892 C820  46         mov   @edb.lines,@waux1
     7894 A504     
     7896 833C     
0236               
0237 7898 06A0  32         bl    @putnum
     789A 2A32     
0238 789C 1D48                   byte pane.botrow,72   ; YX
0239 789E 833C                   data waux1,rambuf
     78A0 A100     
0240 78A2 30                     byte 48
0241 78A3   20                   byte 32
0242                       ;------------------------------------------------------
0243                       ; Exit
0244                       ;------------------------------------------------------
0245               pane.botline.exit:
0246 78A4 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     78A6 832A     
0247 78A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0248 78AA C2F9  30         mov   *stack+,r11           ; Pop r11
0249 78AC 045B  20         b     *r11                  ; Return
                   < stevie_b1.asm
0152                       copy  "pane.vdpdump.asm"            ; Dump panes to VDP memory
     **** ****     > pane.vdpdump.asm
0001               * FILE......: pane.vdpdump.asm
0002               * Purpose...: Dump all panes to VDP
0003               
0004               ***************************************************************
0005               * pane.vdpdump
0006               * Dump all panes to VDP
0007               ***************************************************************
0008               * bl @pane.vdpdump
0009               *--------------------------------------------------------------
0010               * INPUT
0011               * @fb.dirty         = Refresh frame buffer if set
0012               * @fb.status.dirty  = Refresh top/bottom status lines if set
0013               * @fb.colorize      = Colorize range M1/M2 if set
0014               * @cmdb.dirty       = Refresh command buffer pane if set
0015               * @tv.ruler.visible = Show ruler below top status line if set
0016               *--------------------------------------------------------------
0017               * OUTPUT
0018               * none
0019               *--------------------------------------------------------------
0020               * Register usage
0021               * tmp0,tmp1,tmp2
0022               ********|*****|*********************|**************************
0023               pane.vdpdump:
0024 78AE 0649  14         dect  stack
0025 78B0 C64B  30         mov   r11,*stack            ; Save return address
0026 78B2 0649  14         dect  stack
0027 78B4 C644  30         mov   tmp0,*stack           ; Push tmp0
0028 78B6 0649  14         dect  stack
0029 78B8 C660  42         mov   @wyx,*stack           ; Push cursor position
     78BA 832A     
0030                       ;------------------------------------------------------
0031                       ; ALPHA-Lock key down?
0032                       ;------------------------------------------------------
0033               pane.vdpdump.alpha_lock:
0034 78BC 20A0  32         coc   @wbit10,config
     78BE 200C     
0035 78C0 1305  14         jeq   pane.vdpdump.alpha_lock.down
0036                       ;------------------------------------------------------
0037                       ; AlPHA-Lock is up
0038                       ;------------------------------------------------------
0039 78C2 06A0  32         bl    @putat
     78C4 2450     
0040 78C6 1D4E                   byte pane.botrow,78
0041 78C8 3A01                   data txt.ws4
0042 78CA 1004  14         jmp   pane.vdpdump.cmdb.check
0043                       ;------------------------------------------------------
0044                       ; AlPHA-Lock is down
0045                       ;------------------------------------------------------
0046               pane.vdpdump.alpha_lock.down:
0047 78CC 06A0  32         bl    @putat
     78CE 2450     
0048 78D0 1D4E                   byte pane.botrow,78
0049 78D2 39F0                   data txt.alpha.down
0050                       ;------------------------------------------------------
0051                       ; Command buffer visible ?
0052                       ;------------------------------------------------------
0053               pane.vdpdump.cmdb.check
0054 78D4 C120  34         mov   @cmdb.visible,tmp0    ; CMDB pane visible ?
     78D6 A702     
0055 78D8 1324  14         jeq   !                     ; No, skip CMDB pane
0056                       ;-------------------------------------------------------
0057                       ; Draw command buffer pane if dirty
0058                       ;-------------------------------------------------------
0059               pane.vdpdump.cmdb.draw:
0060 78DA C120  34         mov   @cmdb.dirty,tmp0      ; Command buffer dirty?
     78DC A718     
0061 78DE 1343  14         jeq   pane.vdpdump.exit     ; No, skip update
0062                       ;-------------------------------------------------------
0063                       ; "one-time only" flag set?
0064                       ;-------------------------------------------------------
0065 78E0 0284  22         ci    tmp0,tv.1timeonly
     78E2 00FE     
0066 78E4 1619  14         jne   pane.vdpdump.cmdb.draw.content
0067                                                   ; No, skip CMDB colorization
0068                       ;-------------------------------------------------------
0069                       ; Colorize the CMDB pane
0070                       ;-------------------------------------------------------
0071               pane.vdpdump.cmdb.draw.colorscheme:
0072 78E6 0649  14         dect  stack
0073 78E8 C660  46         mov   @parm1,*stack         ; Push @parm1
     78EA A006     
0074 78EC 0649  14         dect  stack
0075 78EE C660  46         mov   @parm2,*stack         ; Push @parm2
     78F0 A008     
0076 78F2 0649  14         dect  stack
0077 78F4 C660  46         mov   @parm3,*stack         ; Push @parm3
     78F6 A00A     
0078               
0079 78F8 0720  34         seto  @parm1                ; Do not turn screen off
     78FA A006     
0080 78FC 0720  34         seto  @parm2                ; Skip colorzing marked lines
     78FE A008     
0081 7900 0720  34         seto  @parm3                ; Only colorize CMDB pane
     7902 A00A     
0082               
0083 7904 06A0  32         bl    @pane.action.colorscheme.load
     7906 730A     
0084                                                   ; Reload color scheme
0085                                                   ; \ i  @parm1 = Skip screen off if >FFFF
0086                                                   ; | i  @parm2 = Skip colorizing marked lines
0087                                                   ; |             if >FFFF
0088                                                   ; | i  @parm3 = Only colorize CMDB pane
0089                                                   ; /             if >FFFF
0090               
0091 7908 C839  50         mov   *stack+,@parm3        ; Pop @parm3
     790A A00A     
0092 790C C839  50         mov   *stack+,@parm2        ; Pop @parm2
     790E A008     
0093 7910 C839  50         mov   *stack+,@parm1        ; Pop @parm1
     7912 A006     
0094               
0095 7914 0720  34         seto  @cmdb.dirty           ; Remove special "one-time only" flag
     7916 A718     
0096                       ;-------------------------------------------------------
0097                       ; Show content in CMDB pane
0098                       ;-------------------------------------------------------
0099               pane.vdpdump.cmdb.draw.content:
0100 7918 06A0  32         bl    @pane.cmdb.draw       ; Draw CMDB pane
     791A 7AE2     
0101 791C 04E0  34         clr   @cmdb.dirty           ; Reset CMDB dirty flag
     791E A718     
0102 7920 1022  14         jmp   pane.vdpdump.exit     ; Exit early
0103                       ;-------------------------------------------------------
0104                       ; Check if frame buffer dirty
0105                       ;-------------------------------------------------------
0106 7922 C120  34 !       mov   @fb.dirty,tmp0        ; Is frame buffer dirty?
     7924 A318     
0107 7926 130E  14         jeq   pane.vdpdump.statlines
0108                                                   ; No, skip update
0109 7928 C820  54         mov   @fb.scrrows,@parm1    ; Number of lines to dump
     792A A31C     
     792C A006     
0110               
0111               pane.vdpdump.dump:
0112 792E 06A0  32         bl    @fb.vdpdump           ; Dump frame buffer to VDP SIT
     7930 7B84     
0113                                                   ; \ i  @parm1 = number of lines to dump
0114                                                   ; /
0115                       ;------------------------------------------------------
0116                       ; Color the lines in the framebuffer (TAT)
0117                       ;------------------------------------------------------
0118 7932 C120  34         mov   @fb.colorize,tmp0     ; Check if colorization necessary
     7934 A312     
0119 7936 1302  14         jeq   pane.vdpdump.dumped   ; Skip if flag reset
0120               
0121 7938 06A0  32         bl    @fb.colorlines        ; Colorize lines M1/M2
     793A 7B72     
0122                       ;-------------------------------------------------------
0123                       ; Finished with frame buffer
0124                       ;-------------------------------------------------------
0125               pane.vdpdump.dumped:
0126 793C 04E0  34         clr   @fb.dirty             ; Reset framebuffer dirty flag
     793E A318     
0127 7940 0720  34         seto  @fb.status.dirty      ; Do trigger status lines update
     7942 A31A     
0128                       ;-------------------------------------------------------
0129                       ; Refresh top and bottom line
0130                       ;-------------------------------------------------------
0131               pane.vdpdump.statlines:
0132 7944 C120  34         mov   @fb.status.dirty,tmp0 ; Are status lines dirty?
     7946 A31A     
0133 7948 130E  14         jeq   pane.vdpdump.exit     ; No, skip update
0134               
0135 794A 06A0  32         bl    @pane.topline         ; Draw top line
     794C 75AC     
0136 794E 06A0  32         bl    @pane.botline         ; Draw bottom line
     7950 7738     
0137 7952 04E0  34         clr   @fb.status.dirty      ; Reset status lines dirty flag
     7954 A31A     
0138                       ;------------------------------------------------------
0139                       ; Show ruler with tab positions
0140                       ;------------------------------------------------------
0141 7956 C120  34         mov   @tv.ruler.visible,tmp0
     7958 A210     
0142                                                   ; Should ruler be visible?
0143 795A 1305  14         jeq   pane.vdpdump.exit     ; No, so exit
0144               
0145 795C 06A0  32         bl    @cpym2v
     795E 2494     
0146 7960 0050                   data vdp.fb.toprow.sit
0147 7962 A320                   data fb.ruler.sit
0148 7964 0050                   data 80               ; Show ruler
0149                       ;------------------------------------------------------
0150                       ; Exit task
0151                       ;------------------------------------------------------
0152               pane.vdpdump.exit:
0153 7966 C839  42         mov   *stack+,@wyx          ; Pop cursor position
     7968 832A     
0154 796A C139  30         mov   *stack+,tmp0          ; Pop tmp0
0155 796C C2F9  30         mov   *stack+,r11           ; Pop r11
0156 796E 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0153                       ;-----------------------------------------------------------------------
0154                       ; Stubs
0155                       ;-----------------------------------------------------------------------
0156                       copy  "rom.stubs.bank1.asm"         ; Bank specific stubs
     **** ****     > rom.stubs.bank1.asm
0001               * FILE......: rom.stubs.bank1.asm
0002               * Purpose...: Bank 1 stubs for functions in other banks
0003               
0004               ***************************************************************
0005               * Stub for "fm.loadfile"
0006               * bank2 vec.1
0007               ********|*****|*********************|**************************
0008               fm.loadfile:
0009 7970 0649  14         dect  stack
0010 7972 C64B  30         mov   r11,*stack            ; Save return address
0011 7974 0649  14         dect  stack
0012 7976 C644  30         mov   tmp0,*stack           ; Push tmp0
0013                       ;------------------------------------------------------
0014                       ; Call function in bank 2
0015                       ;------------------------------------------------------
0016 7978 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     797A 2F98     
0017 797C 6004                   data bank2.rom        ; | i  p0 = bank address
0018 797E 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0019 7980 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0020                       ;------------------------------------------------------
0021                       ; Show "Unsaved changes" dialog if editor buffer dirty
0022                       ;------------------------------------------------------
0023 7982 C120  34         mov   @outparm1,tmp0
     7984 A016     
0024 7986 1304  14         jeq   fm.loadfile.exit
0025               
0026 7988 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0027 798A C2F9  30         mov   *stack+,r11           ; Pop r11
0028 798C 0460  28         b     @dialog.unsaved       ; Show dialog and exit
     798E 7A34     
0029                       ;------------------------------------------------------
0030                       ; Exit
0031                       ;------------------------------------------------------
0032               fm.loadfile.exit:
0033 7990 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0034 7992 C2F9  30         mov   *stack+,r11           ; Pop r11
0035 7994 045B  20         b     *r11                  ; Return to caller
0036               
0037               
0038               ***************************************************************
0039               * Stub for "fm.insertfile"
0040               * bank2 vec.2
0041               ********|*****|*********************|**************************
0042               fm.insertfile:
0043 7996 0649  14         dect  stack
0044 7998 C64B  30         mov   r11,*stack            ; Save return address
0045 799A 0649  14         dect  stack
0046 799C C644  30         mov   tmp0,*stack           ; Push tmp0
0047                       ;------------------------------------------------------
0048                       ; Call function in bank 2
0049                       ;------------------------------------------------------
0050 799E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79A0 2F98     
0051 79A2 6004                   data bank2.rom        ; | i  p0 = bank address
0052 79A4 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0053 79A6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0054                       ;------------------------------------------------------
0055                       ; Exit
0056                       ;------------------------------------------------------
0057               fm.insertfile.exit:
0058 79A8 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0059 79AA C2F9  30         mov   *stack+,r11           ; Pop r11
0060 79AC 045B  20         b     *r11                  ; Return to caller
0061               
0062               
0063               **************************************************************
0064               * Stub for "fm.browse.fname.suffix"
0065               * bank2 vec.3
0066               ********|*****|*********************|**************************
0067               fm.browse.fname.suffix:
0068 79AE 0649  14         dect  stack
0069 79B0 C64B  30         mov   r11,*stack            ; Save return address
0070                       ;------------------------------------------------------
0071                       ; Call function in bank 2
0072                       ;------------------------------------------------------
0073 79B2 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79B4 2F98     
0074 79B6 6004                   data bank2.rom        ; | i  p0 = bank address
0075 79B8 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0076 79BA 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0077                       ;------------------------------------------------------
0078                       ; Exit
0079                       ;------------------------------------------------------
0080 79BC C2F9  30         mov   *stack+,r11           ; Pop r11
0081 79BE 045B  20         b     *r11                  ; Return to caller
0082               
0083               
0084               ***************************************************************
0085               * Stub for "fm.savefile"
0086               * bank2 vec.4
0087               ********|*****|*********************|**************************
0088               fm.savefile:
0089 79C0 0649  14         dect  stack
0090 79C2 C64B  30         mov   r11,*stack            ; Save return address
0091                       ;------------------------------------------------------
0092                       ; Call function in bank 2
0093                       ;------------------------------------------------------
0094 79C4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79C6 2F98     
0095 79C8 6004                   data bank2.rom        ; | i  p0 = bank address
0096 79CA 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0097 79CC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0098                       ;------------------------------------------------------
0099                       ; Exit
0100                       ;------------------------------------------------------
0101 79CE C2F9  30         mov   *stack+,r11           ; Pop r11
0102 79D0 045B  20         b     *r11                  ; Return to caller
0103               
0104               
0105               ***************************************************************
0106               * Stub for "fm.newfile"
0107               * bank2 vec.5
0108               ********|*****|*********************|**************************
0109               fm.newfile:
0110 79D2 0649  14         dect  stack
0111 79D4 C64B  30         mov   r11,*stack            ; Save return address
0112                       ;------------------------------------------------------
0113                       ; Call function in bank 2
0114                       ;------------------------------------------------------
0115 79D6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     79D8 2F98     
0116 79DA 6004                   data bank2.rom        ; | i  p0 = bank address
0117 79DC 7FC8                   data vec.5            ; | i  p1 = Vector with target address
0118 79DE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0119                       ;------------------------------------------------------
0120                       ; Exit
0121                       ;------------------------------------------------------
0122 79E0 C2F9  30         mov   *stack+,r11           ; Pop r11
0123 79E2 045B  20         b     *r11                  ; Return to caller
0124               
0125               
0126               ***************************************************************
0127               * Stub for dialog "Help"
0128               * bank3 vec.1
0129               ********|*****|*********************|**************************
0130               dialog.help.next:
0131 79E4 8820  50         c     @w$0008,@cmdb.dialog.var
     79E6 2008     
     79E8 A71C     
0132 79EA 1304  14         jeq   !
0133 79EC A820  54         a     @w$0008,@cmdb.dialog.var
     79EE 2008     
     79F0 A71C     
0134 79F2 1002  14         jmp   dialog.help
0135 79F4 04E0  34 !       clr   @cmdb.dialog.var
     79F6 A71C     
0136               dialog.help:
0137 79F8 C820  54         mov   @dialog.help.vector,@trmpvector
     79FA 7A00     
     79FC A032     
0138 79FE 1054  14         jmp   _trampoline.bank3     ; Show dialog
0139               dialog.help.vector:
0140 7A00 7FC0             data  vec.1
0141               
0142               
0143               ***************************************************************
0144               * Stub for dialog "Load file"
0145               * bank3 vec.2
0146               ********|*****|*********************|**************************
0147               dialog.load:
0148 7A02 C820  54         mov   @dialog.load.vector,@trmpvector
     7A04 7A0A     
     7A06 A032     
0149 7A08 104F  14         jmp   _trampoline.bank3     ; Show dialog
0150               dialog.load.vector:
0151 7A0A 7FC2             data  vec.2
0152               
0153               
0154               ***************************************************************
0155               * Stub for dialog "Save file"
0156               * bank3 vec.3
0157               ********|*****|*********************|**************************
0158               dialog.save:
0159 7A0C C820  54         mov   @dialog.save.vector,@trmpvector
     7A0E 7A14     
     7A10 A032     
0160 7A12 104A  14         jmp   _trampoline.bank3     ; Show dialog
0161               dialog.save.vector:
0162 7A14 7FC4             data  vec.3
0163               
0164               
0165               ***************************************************************
0166               * Stub for dialog "Insert file at line"
0167               * bank3 vec.4
0168               ********|*****|*********************|**************************
0169               dialog.insert:
0170 7A16 C820  54         mov   @dialog.insert.vector,@trmpvector
     7A18 7A1E     
     7A1A A032     
0171 7A1C 1045  14         jmp   _trampoline.bank3     ; Show dialog
0172               dialog.insert.vector:
0173 7A1E 7FC6             data  vec.4
0174               
0175               
0176               ***************************************************************
0177               * Stub for dialog "Print file"
0178               * bank3 vec.5
0179               ********|*****|*********************|**************************
0180               dialog.print:
0181 7A20 C820  54         mov   @dialog.print.vector,@trmpvector
     7A22 7A28     
     7A24 A032     
0182 7A26 1040  14         jmp   _trampoline.bank3    ; Show dialog
0183               dialog.print.vector:
0184 7A28 7FC8             data  vec.5
0185               
0186               
0187               ***************************************************************
0188               * Stub for dialog "File"
0189               * bank3 vec.6
0190               ********|*****|*********************|**************************
0191               dialog.file:
0192 7A2A C820  54         mov   @dialog.file.vector,@trmpvector
     7A2C 7A32     
     7A2E A032     
0193 7A30 103B  14         jmp   _trampoline.bank3     ; Show dialog
0194               dialog.file.vector:
0195 7A32 7FCA             data  vec.6
0196               
0197               
0198               ***************************************************************
0199               * Stub for dialog "Unsaved Changes"
0200               * bank3 vec.7
0201               ********|*****|*********************|**************************
0202               dialog.unsaved:
0203 7A34 04E0  34         clr   @cmdb.panmarkers      ; No key markers
     7A36 A724     
0204 7A38 C820  54         mov   @dialog.unsaved.vector,@trmpvector
     7A3A 7A40     
     7A3C A032     
0205 7A3E 1034  14         jmp   _trampoline.bank3     ; Show dialog
0206               dialog.unsaved.vector:
0207 7A40 7FCC             data  vec.7
0208               
0209               
0210               ***************************************************************
0211               * Stub for dialog "Copy clipboard to line ..."
0212               * bank3 vec.8
0213               ********|*****|*********************|**************************
0214               dialog.clipboard:
0215 7A42 C820  54         mov   @dialog.clipboard.vector,@trmpvector
     7A44 7A4A     
     7A46 A032     
0216 7A48 102F  14         jmp   _trampoline.bank3     ; Show dialog
0217               dialog.clipboard.vector:
0218 7A4A 7FCE             data  vec.8
0219               
0220               
0221               ***************************************************************
0222               * Stub for dialog "Configure clipboard device"
0223               * bank3 vec.9
0224               ********|*****|*********************|**************************
0225               dialog.clipdev:
0226 7A4C C820  54         mov   @dialog.clipdev.vector,@trmpvector
     7A4E 7A54     
     7A50 A032     
0227 7A52 102A  14         jmp   _trampoline.bank3     ; Show dialog
0228               dialog.clipdev.vector:
0229 7A54 7FD0             data  vec.9
0230               
0231               
0232               ***************************************************************
0233               * Stub for dialog "Configure"
0234               * bank3 vec.10
0235               ********|*****|*********************|**************************
0236               dialog.config:
0237 7A56 C820  54         mov   @dialog.config.vector,@trmpvector
     7A58 7A5E     
     7A5A A032     
0238 7A5C 1025  14         jmp   _trampoline.bank3     ; Show dialog
0239               dialog.config.vector:
0240 7A5E 7FD2             data  vec.10
0241               
0242               
0243               ***************************************************************
0244               * Stub for dialog "Append file"
0245               * bank3 vec.11
0246               ********|*****|*********************|**************************
0247               dialog.append:
0248 7A60 C820  54         mov   @dialog.append.vector,@trmpvector
     7A62 7A68     
     7A64 A032     
0249 7A66 1020  14         jmp   _trampoline.bank3     ; Show dialog
0250               dialog.append.vector:
0251 7A68 7FD4             data  vec.11
0252               
0253               
0254               ***************************************************************
0255               * Stub for dialog "Cartridge"
0256               * bank3 vec.12
0257               ********|*****|*********************|**************************
0258               dialog.cartridge:
0259 7A6A C820  54         mov   @dialog.cartridge.vector,@trmpvector
     7A6C 7A72     
     7A6E A032     
0260 7A70 101B  14         jmp   _trampoline.bank3     ; Show dialog
0261               dialog.cartridge.vector:
0262 7A72 7FD6             data  vec.12
0263               
0264               
0265               ***************************************************************
0266               * Stub for dialog "Basic"
0267               * bank3 vec.13
0268               ********|*****|*********************|**************************
0269               dialog.basic:
0270 7A74 C820  54         mov   @dialog.basic.vector,@trmpvector
     7A76 7A7C     
     7A78 A032     
0271 7A7A 1016  14         jmp   _trampoline.bank3     ; Show dialog
0272               dialog.basic.vector:
0273 7A7C 7FD8             data  vec.13
0274               
0275               
0276               ***************************************************************
0277               * Stub for dialog "Shortcuts"
0278               * bank3 vec.14
0279               ********|*****|*********************|**************************
0280               dialog.shortcuts:
0281 7A7E C820  54         mov   @dialog.shortcuts.vector,@trmpvector
     7A80 7A86     
     7A82 A032     
0282 7A84 1011  14         jmp   _trampoline.bank3     ; Show dialog
0283               dialog.shortcuts.vector:
0284 7A86 7FDA             data  vec.14
0285               
0286               
0287               ***************************************************************
0288               * Stub for dialog "Configure editor"
0289               * bank3 vec.15
0290               ********|*****|*********************|**************************
0291               dialog.editor:
0292 7A88 C820  54         mov   @dialog.editor.vector,@trmpvector
     7A8A 7A90     
     7A8C A032     
0293 7A8E 100C  14         jmp   _trampoline.bank3     ; Show dialog
0294               dialog.editor.vector:
0295 7A90 7FDC             data  vec.15
0296               
0297               
0298               ***************************************************************
0299               * Stub for dialog "Main Menu"
0300               * bank3 vec.30
0301               ********|*****|*********************|**************************
0302               dialog.menu:
0303                       ;------------------------------------------------------
0304                       ; Check if block mode is active
0305                       ;------------------------------------------------------
0306 7A92 C120  34         mov   @edb.block.m2,tmp0    ; \
     7A94 A510     
0307 7A96 0584  14         inc   tmp0                  ; | Skip if M2 unset (>ffff)
0308                                                   ; /
0309 7A98 1302  14         jeq   !                     ; Block mode inactive, show dialog
0310                       ;------------------------------------------------------
0311                       ; Special treatment for block mode
0312                       ;------------------------------------------------------
0313 7A9A 0460  28         b     @edkey.action.block.reset
     7A9C 68DA     
0314                                                   ; Reset block mode
0315                       ;------------------------------------------------------
0316                       ; Show dialog
0317                       ;------------------------------------------------------
0318 7A9E C820  54 !       mov   @dialog.menu.vector,@trmpvector
     7AA0 7AA6     
     7AA2 A032     
0319 7AA4 1001  14         jmp   _trampoline.bank3     ; Show dialog
0320               dialog.menu.vector:
0321 7AA6 7FFA             data  vec.30
0322               
0323               
0324               
0325               ***************************************************************
0326               * Trampoline 1 (bank 3, dialog)
0327               ********|*****|*********************|**************************
0328               _trampoline.bank3:
0329 7AA8 06A0  32         bl    @pane.cursor.hide     ; Hide cursor
     7AAA 7524     
0330                       ;------------------------------------------------------
0331                       ; Call routine in specified bank
0332                       ;------------------------------------------------------
0333 7AAC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7AAE 2F98     
0334 7AB0 6006                   data bank3.rom        ; | i  p0 = bank address
0335 7AB2 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0336                                                   ; |         (deref @trmpvector)
0337 7AB4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0338                       ;------------------------------------------------------
0339                       ; Exit
0340                       ;------------------------------------------------------
0341 7AB6 0460  28         b     @edkey.action.cmdb.show
     7AB8 6A84     
0342                                                   ; Show dialog in CMDB pane
0343               
0344               
0345               ***************************************************************
0346               * Stub for "error.display"
0347               * bank3 vec.18
0348               ********|*****|*********************|**************************
0349               error.display:
0350 7ABA C820  54         mov   @error.display.vector,@trmpvector
     7ABC 7AC2     
     7ABE A032     
0351 7AC0 103D  14         jmp   _trampoline.bank3.ret ; Longjump
0352               error.display.vector:
0353 7AC2 7FE2             data  vec.18
0354               
0355               
0356               ***************************************************************
0357               * Stub for "pane.show_hintx"
0358               * bank3 vec.19
0359               ********|*****|*********************|**************************
0360               pane.show_hintx:
0361 7AC4 C820  54         mov   @pane.show_hintx.vector,@trmpvector
     7AC6 7ACC     
     7AC8 A032     
0362 7ACA 1038  14         jmp   _trampoline.bank3.ret ; Longjump
0363               pane.show_hintx.vector:
0364 7ACC 7FE4             data  vec.19
0365               
0366               
0367               ***************************************************************
0368               * Stub for "pane.cmdb.show"
0369               * bank3 vec.20
0370               ********|*****|*********************|**************************
0371               pane.cmdb.show:
0372 7ACE C820  54         mov   @pane.cmdb.show.vector,@trmpvector
     7AD0 7AD6     
     7AD2 A032     
0373 7AD4 1033  14         jmp   _trampoline.bank3.ret ; Longjump
0374               pane.cmdb.show.vector:
0375 7AD6 7FE6             data  vec.20
0376               
0377               
0378               ***************************************************************
0379               * Stub for "pane.cmdb.hide"
0380               * bank3 vec.21
0381               ********|*****|*********************|**************************
0382               pane.cmdb.hide:
0383 7AD8 C820  54         mov   @pane.cmdb.hide.vector,@trmpvector
     7ADA 7AE0     
     7ADC A032     
0384 7ADE 102E  14         jmp   _trampoline.bank3.ret ; Longjump
0385               pane.cmdb.hide.vector:
0386 7AE0 7FE8             data  vec.21
0387               
0388               
0389               ***************************************************************
0390               * Stub for "pane.cmdb.draw"
0391               * bank3 vec.22
0392               ********|*****|*********************|**************************
0393               pane.cmdb.draw:
0394 7AE2 C820  54         mov   @pane.cmdb.draw.vector,@trmpvector
     7AE4 7AEA     
     7AE6 A032     
0395 7AE8 1029  14         jmp   _trampoline.bank3.ret ; Longjump
0396               pane.cmdb.draw.vector:
0397 7AEA 7FEA             data  vec.22
0398               
0399               
0400               ***************************************************************
0401               * Stub for "cmdb.refresh"
0402               * bank3 vec.24
0403               ********|*****|*********************|**************************
0404               cmdb.refresh:
0405 7AEC C820  54         mov   @cmdb.refresh.vector,@trmpvector
     7AEE 7AF4     
     7AF0 A032     
0406 7AF2 1024  14         jmp   _trampoline.bank3.ret ; Longjump
0407               cmdb.refresh.vector:
0408 7AF4 7FEE             data  vec.24
0409               
0410               
0411               ***************************************************************
0412               * Stub for "cmdb.cmd.clear"
0413               * bank3 vec.25
0414               ********|*****|*********************|**************************
0415               cmdb.cmd.clear:
0416 7AF6 C820  54         mov   @cmdb.cmd.clear.vector,@trmpvector
     7AF8 7AFE     
     7AFA A032     
0417 7AFC 101F  14         jmp   _trampoline.bank3.ret ; Longjump
0418               cmdb.cmd.clear.vector:
0419 7AFE 7FF0             data  vec.25
0420               
0421               
0422               ***************************************************************
0423               * Stub for "cmdb.cmdb.getlength"
0424               * bank3 vec.26
0425               ********|*****|*********************|**************************
0426               cmdb.cmd.getlength:
0427 7B00 C820  54         mov   @cmdb.cmd.getlength.vector,@trmpvector
     7B02 7B08     
     7B04 A032     
0428 7B06 101A  14         jmp   _trampoline.bank3.ret ; Longjump
0429               cmdb.cmd.getlength.vector:
0430 7B08 7FF2             data  vec.26
0431               
0432               
0433               ***************************************************************
0434               * Stub for "cmdb.cmdb.preset"
0435               * bank3 vec.27
0436               ********|*****|*********************|**************************
0437               cmdb.cmd.preset:
0438 7B0A C820  54         mov   @cmdb.cmd.preset.vector,@trmpvector
     7B0C 7B12     
     7B0E A032     
0439 7B10 1015  14         jmp   _trampoline.bank3.ret ; Longjump
0440               cmdb.cmd.preset.vector:
0441 7B12 7FF4             data  vec.27
0442               
0443               
0444               ***************************************************************
0445               * Stub for "cmdb.cmdb.set"
0446               * bank3 vec.28
0447               ********|*****|*********************|**************************
0448               cmdb.cmd.set:
0449 7B14 C820  54         mov   @cmdb.cmd.set.vector,@trmpvector
     7B16 7B1C     
     7B18 A032     
0450 7B1A 1010  14         jmp   _trampoline.bank3.ret ; Longjump
0451               cmdb.cmd.set.vector:
0452 7B1C 7FF6             data  vec.28
0453               
0454               
0455               
0456               ***************************************************************
0457               * Stub for "tibasic.hearts.tat"
0458               * bank3 vec.29
0459               ********|*****|*********************|**************************
0460               tibasic.hearts.tat:
0461 7B1E C820  54         mov   @tibasic.hearts.tat.vector,@trmpvector
     7B20 7B26     
     7B22 A032     
0462 7B24 100B  14         jmp   _trampoline.bank3.ret ; Longjump
0463               tibasic.hearts.tat.vector:
0464 7B26 7FF8             data  vec.29
0465               
0466               
0467               
0468               **************************************************************
0469               * Stub for "tibasic.am.toggle"
0470               * bank3 vec.31
0471               ********|*****|*********************|**************************
0472               tibasic.am.toggle:
0473 7B28 C820  54         mov   @tibasic.am.toggle.vector,@trmpvector
     7B2A 7B30     
     7B2C A032     
0474 7B2E 1006  14         jmp   _trampoline.bank3.ret ; Longjump
0475               tibasic.am.toggle.vector:
0476 7B30 7FFC             data  vec.31
0477               
0478               
0479               **************************************************************
0480               * Stub for "fm.fastmode"
0481               * bank3 vec.32
0482               ********|*****|*********************|**************************
0483               fm.fastmode:
0484 7B32 C820  54         mov   @fm.fastmode.vector,@trmpvector
     7B34 7B3A     
     7B36 A032     
0485 7B38 1001  14         jmp   _trampoline.bank3.ret ; Longjump
0486               fm.fastmode.vector:
0487 7B3A 7FFE             data  vec.32
0488               
0489               
0490               
0491               
0492               ***************************************************************
0493               * Trampoline bank 3 with return
0494               ********|*****|*********************|**************************
0495               _trampoline.bank3.ret:
0496 7B3C 0649  14         dect  stack
0497 7B3E C64B  30         mov   r11,*stack            ; Save return address
0498                       ;------------------------------------------------------
0499                       ; Call routine in specified bank
0500                       ;------------------------------------------------------
0501 7B40 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B42 2F98     
0502 7B44 6006                   data bank3.rom        ; | i  p0 = bank address
0503 7B46 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0504                                                   ; |         (deref @trmpvector)
0505 7B48 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0506                       ;------------------------------------------------------
0507                       ; Exit
0508                       ;------------------------------------------------------
0509 7B4A C2F9  30         mov   *stack+,r11           ; Pop r11
0510 7B4C 045B  20         b     *r11                  ; Return to caller
0511               
0512               
0513               
0514               ***************************************************************
0515               * Stub for "fb.tab.next"
0516               * bank4 vec.1
0517               ********|*****|*********************|**************************
0518               fb.tab.next:
0519 7B4E 0649  14         dect  stack
0520 7B50 C64B  30         mov   r11,*stack            ; Save return address
0521                       ;------------------------------------------------------
0522                       ; Put cursor on next tab position
0523                       ;------------------------------------------------------
0524 7B52 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B54 2F98     
0525 7B56 6008                   data bank4.rom        ; | i  p0 = bank address
0526 7B58 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0527 7B5A 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0528                       ;------------------------------------------------------
0529                       ; Exit
0530                       ;------------------------------------------------------
0531 7B5C C2F9  30         mov   *stack+,r11           ; Pop r11
0532 7B5E 045B  20         b     *r11                  ; Return to caller
0533               
0534               
0535               ***************************************************************
0536               * Stub for "fb.ruler.init"
0537               * bank4 vec.2
0538               ********|*****|*********************|**************************
0539               fb.ruler.init:
0540 7B60 0649  14         dect  stack
0541 7B62 C64B  30         mov   r11,*stack            ; Save return address
0542                       ;------------------------------------------------------
0543                       ; Setup ruler in memory
0544                       ;------------------------------------------------------
0545 7B64 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B66 2F98     
0546 7B68 6008                   data bank4.rom        ; | i  p0 = bank address
0547 7B6A 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0548 7B6C 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0549                       ;------------------------------------------------------
0550                       ; Exit
0551                       ;------------------------------------------------------
0552 7B6E C2F9  30         mov   *stack+,r11           ; Pop r11
0553 7B70 045B  20         b     *r11                  ; Return to caller
0554               
0555               
0556               ***************************************************************
0557               * Stub for "fb.colorlines"
0558               * bank4 vec.3
0559               ********|*****|*********************|**************************
0560               fb.colorlines:
0561 7B72 0649  14         dect  stack
0562 7B74 C64B  30         mov   r11,*stack            ; Save return address
0563                       ;------------------------------------------------------
0564                       ; Colorize frame buffer content
0565                       ;------------------------------------------------------
0566 7B76 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B78 2F98     
0567 7B7A 6008                   data bank4.rom        ; | i  p0 = bank address
0568 7B7C 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0569 7B7E 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0570                       ;------------------------------------------------------
0571                       ; Exit
0572                       ;------------------------------------------------------
0573 7B80 C2F9  30         mov   *stack+,r11           ; Pop r11
0574 7B82 045B  20         b     *r11                  ; Return to caller
0575               
0576               
0577               ***************************************************************
0578               * Stub for "fb.vdpdump"
0579               * bank4 vec.4
0580               ********|*****|*********************|**************************
0581               fb.vdpdump:
0582 7B84 0649  14         dect  stack
0583 7B86 C64B  30         mov   r11,*stack            ; Save return address
0584                       ;------------------------------------------------------
0585                       ; Colorize frame buffer content
0586                       ;------------------------------------------------------
0587 7B88 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B8A 2F98     
0588 7B8C 6008                   data bank4.rom        ; | i  p0 = bank address
0589 7B8E 7FC6                   data vec.4            ; | i  p1 = Vector with target address
0590 7B90 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0591                       ;------------------------------------------------------
0592                       ; Exit
0593                       ;------------------------------------------------------
0594 7B92 C2F9  30         mov   *stack+,r11           ; Pop r11
0595 7B94 045B  20         b     *r11                  ; Return to caller
0596               
0597               
0598               ***************************************************************
0599               * Stub for "fb.hscroll"
0600               * bank4 vec.6
0601               ********|*****|*********************|**************************
0602               fb.hscroll:
0603 7B96 0649  14         dect  stack
0604 7B98 C64B  30         mov   r11,*stack            ; Save return address
0605                       ;------------------------------------------------------
0606                       ; Colorize frame buffer content
0607                       ;------------------------------------------------------
0608 7B9A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7B9C 2F98     
0609 7B9E 6008                   data bank4.rom        ; | i  p0 = bank address
0610 7BA0 7FCA                   data vec.6            ; | i  p1 = Vector with target address
0611 7BA2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0612                       ;------------------------------------------------------
0613                       ; Exit
0614                       ;------------------------------------------------------
0615 7BA4 C2F9  30         mov   *stack+,r11           ; Pop r11
0616 7BA6 045B  20         b     *r11                  ; Return to caller
0617               
0618               
0619               ***************************************************************
0620               * Stub for "fb.restore"
0621               * bank4 vec.7
0622               ********|*****|*********************|**************************
0623               fb.restore:
0624 7BA8 0649  14         dect  stack
0625 7BAA C64B  30         mov   r11,*stack            ; Save return address
0626                       ;------------------------------------------------------
0627                       ; Colorize frame buffer content
0628                       ;------------------------------------------------------
0629 7BAC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BAE 2F98     
0630 7BB0 6008                   data bank4.rom        ; | i  p0 = bank address
0631 7BB2 7FCC                   data vec.7            ; | i  p1 = Vector with target address
0632 7BB4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0633                       ;------------------------------------------------------
0634                       ; Exit
0635                       ;------------------------------------------------------
0636 7BB6 C2F9  30         mov   *stack+,r11           ; Pop r11
0637 7BB8 045B  20         b     *r11                  ; Return to caller
0638               
0639               
0640               ***************************************************************
0641               * Stub for "fb.refresh"
0642               * bank4 vec.8
0643               ********|*****|*********************|**************************
0644               fb.refresh:
0645 7BBA 0649  14         dect  stack
0646 7BBC C64B  30         mov   r11,*stack            ; Save return address
0647                       ;------------------------------------------------------
0648                       ; Colorize frame buffer content
0649                       ;------------------------------------------------------
0650 7BBE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7BC0 2F98     
0651 7BC2 6008                   data bank4.rom        ; | i  p0 = bank address
0652 7BC4 7FCE                   data vec.8            ; | i  p1 = Vector with target address
0653 7BC6 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0654                       ;------------------------------------------------------
0655                       ; Exit
0656                       ;------------------------------------------------------
0657 7BC8 C2F9  30         mov   *stack+,r11           ; Pop r11
0658 7BCA 045B  20         b     *r11                  ; Return to caller
0659               
0660               
0661               **************************************************************
0662               * Stub for "edb.clear.sams"
0663               * bank5 vec.1
0664               ********|*****|*********************|**************************
0665               edb.clear.sams:
0666 7BCC C820  54         mov   @edb.clear.sams.vector,@trmpvector
     7BCE 7BD4     
     7BD0 A032     
0667 7BD2 1029  14         jmp   _trampoline.bank5.ret ; Longjump
0668               edb.clear.sams.vector:
0669 7BD4 7FC0             data  vec.1
0670               
0671               
0672               **************************************************************
0673               * Stub for "edb.block.mark"
0674               * bank5 vec.3
0675               ********|*****|*********************|**************************
0676               edb.block.mark:
0677 7BD6 C820  54         mov   @edb.block.mark.vector,@trmpvector
     7BD8 7BDE     
     7BDA A032     
0678 7BDC 1024  14         jmp   _trampoline.bank5.ret ; Longjump
0679               edb.block.mark.vector:
0680 7BDE 7FC4             data  vec.3
0681               
0682               
0683               **************************************************************
0684               * Stub for "edb.block.mark.m1"
0685               * bank5 vec.4
0686               ********|*****|*********************|**************************
0687               edb.block.mark.m1:
0688 7BE0 C820  54         mov   @edb.block.mark.m1.vector,@trmpvector
     7BE2 7BE8     
     7BE4 A032     
0689 7BE6 101F  14         jmp   _trampoline.bank5.ret ; Longjump
0690               edb.block.mark.m1.vector:
0691 7BE8 7FC6             data  vec.4
0692               
0693               
0694               **************************************************************
0695               * Stub for "edb.block.mark.m2"
0696               * bank5 vec.5
0697               ********|*****|*********************|**************************
0698               edb.block.mark.m2:
0699 7BEA C820  54         mov   @edb.block.mark.m2.vector,@trmpvector
     7BEC 7BF2     
     7BEE A032     
0700 7BF0 101A  14         jmp   _trampoline.bank5.ret ; Longjump
0701               edb.block.mark.m2.vector:
0702 7BF2 7FC8             data  vec.5
0703               
0704               
0705               **************************************************************
0706               * Stub for "edb.block.clip"
0707               * bank5 vec.6
0708               ********|*****|*********************|**************************
0709               edb.block.clip:
0710 7BF4 C820  54         mov   @edb.block.clip.vector,@trmpvector
     7BF6 7BFC     
     7BF8 A032     
0711 7BFA 1015  14         jmp   _trampoline.bank5.ret ; Longjump
0712               edb.block.clip.vector:
0713 7BFC 7FCA             data  vec.6
0714               
0715               
0716               **************************************************************
0717               * Stub for "edb.block.reset"
0718               * bank5 vec.7
0719               ********|*****|*********************|**************************
0720               edb.block.reset:
0721 7BFE C820  54         mov   @edb.block.reset.vector,@trmpvector
     7C00 7C06     
     7C02 A032     
0722 7C04 1010  14         jmp   _trampoline.bank5.ret ; Longjump
0723               edb.block.reset.vector:
0724 7C06 7FCC             data  vec.7
0725               
0726               
0727               **************************************************************
0728               * Stub for "edb.block.delete"
0729               * bank5 vec.8
0730               ********|*****|*********************|**************************
0731               edb.block.delete:
0732 7C08 C820  54         mov   @edb.block.delete.vector,@trmpvector
     7C0A 7C10     
     7C0C A032     
0733 7C0E 100B  14         jmp   _trampoline.bank5.ret ; Longjump
0734               edb.block.delete.vector:
0735 7C10 7FCE             data  vec.8
0736               
0737               
0738               **************************************************************
0739               * Stub for "edb.block.copy"
0740               * bank5 vec.9
0741               ********|*****|*********************|**************************
0742               edb.block.copy:
0743 7C12 C820  54         mov   @edb.block.copy.vector,@trmpvector
     7C14 7C1A     
     7C16 A032     
0744 7C18 1006  14         jmp   _trampoline.bank5.ret ; Longjump
0745               edb.block.copy.vector:
0746 7C1A 7FD0             data  vec.9
0747               
0748               
0749               **************************************************************
0750               * Stub for "edb.line.del"
0751               * bank5 vec.10
0752               ********|*****|*********************|**************************
0753               edb.line.del:
0754 7C1C C820  54         mov   @edb.line.del.vector,@trmpvector
     7C1E 7C24     
     7C20 A032     
0755 7C22 1001  14         jmp   _trampoline.bank5.ret ; Longjump
0756               edb.line.del.vector:
0757 7C24 7FD2             data  vec.10
0758               
0759               
0760               
0761               ***************************************************************
0762               * Trampoline bank 5 with return
0763               ********|*****|*********************|**************************
0764               _trampoline.bank5.ret:
0765 7C26 0649  14         dect  stack
0766 7C28 C64B  30         mov   r11,*stack            ; Save return address
0767                       ;------------------------------------------------------
0768                       ; Call routine in specified bank
0769                       ;------------------------------------------------------
0770 7C2A 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C2C 2F98     
0771 7C2E 600A                   data bank5.rom        ; | i  p0 = bank address
0772 7C30 FFFF                   data >ffff            ; | i  p1 = Vector with target address
0773                                                   ; |         (deref @trmpvector)
0774 7C32 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0775                       ;------------------------------------------------------
0776                       ; Exit
0777                       ;------------------------------------------------------
0778 7C34 C2F9  30         mov   *stack+,r11           ; Pop r11
0779 7C36 045B  20         b     *r11                  ; Return to caller
0780               
0781               
0782               ***************************************************************
0783               * Stub for "vdp.patterns.dump"
0784               * bank6 vec.1
0785               ********|*****|*********************|**************************
0786               vdp.patterns.dump:
0787 7C38 0649  14         dect  stack
0788 7C3A C64B  30         mov   r11,*stack            ; Save return address
0789                       ;------------------------------------------------------
0790                       ; Dump VDP patterns
0791                       ;------------------------------------------------------
0792 7C3C 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C3E 2F98     
0793 7C40 600C                   data bank6.rom        ; | i  p0 = bank address
0794 7C42 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0795 7C44 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0796                       ;------------------------------------------------------
0797                       ; Exit
0798                       ;------------------------------------------------------
0799 7C46 C2F9  30         mov   *stack+,r11           ; Pop r11
0800 7C48 045B  20         b     *r11                  ; Return to caller
0801               
0802               
0803               
0804               ***************************************************************
0805               * Stub for "tibasic"
0806               * bank7 vec.10
0807               ********|*****|*********************|**************************
0808               tibasic1:
0809 7C4A C820  54         mov   @const.1,@tib.session
     7C4C 2002     
     7C4E A0B4     
0810 7C50 100F  14         jmp   tibasic
0811               tibasic2:
0812 7C52 C820  54         mov   @const.2,@tib.session
     7C54 2004     
     7C56 A0B4     
0813 7C58 100B  14         jmp   tibasic
0814               tibasic3:
0815 7C5A C820  54         mov   @const.3,@tib.session
     7C5C 36F8     
     7C5E A0B4     
0816 7C60 1007  14         jmp   tibasic
0817               tibasic4:
0818 7C62 C820  54         mov   @const.4,@tib.session
     7C64 2006     
     7C66 A0B4     
0819 7C68 1003  14         jmp   tibasic
0820               tibasic5:
0821 7C6A C820  54         mov   @const.5,@tib.session
     7C6C 36FA     
     7C6E A0B4     
0822               tibasic:
0823 7C70 0649  14         dect  stack
0824 7C72 C64B  30         mov   r11,*stack            ; Save return address
0825 7C74 0649  14         dect  stack
0826 7C76 C644  30         mov   tmp0,*stack           ; Push tmp0
0827                       ;------------------------------------------------------
0828                       ; Exit early if no TI Basic session
0829                       ;------------------------------------------------------
0830 7C78 C120  34         mov   @tib.session,tmp0     ; Get session ID
     7C7A A0B4     
0831 7C7C 130A  14         jeq   tibasic.exit          ; Exit early if no session
0832                       ;------------------------------------------------------
0833                       ; Run TI Basic session
0834                       ;------------------------------------------------------
0835 7C7E 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7C80 2F98     
0836 7C82 600E                   data bank7.rom        ; | i  p0 = bank address
0837 7C84 7FD2                   data vec.10           ; | i  p1 = Vector with target address
0838 7C86 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0839               
0840 7C88 C120  34         mov   @tib.automode,tmp0    ; AutoMode flag set?
     7C8A A0C0     
0841 7C8C 1302  14         jeq   tibasic.exit          ; No, skip uncrunching
0842               
0843 7C8E 06A0  32         bl    @tibasic.uncrunch     ; Uncrunch TI Basic program
     7C90 7C98     
0844                       ;------------------------------------------------------
0845                       ; Exit
0846                       ;------------------------------------------------------
0847               tibasic.exit:
0848 7C92 C139  30         mov   *stack+,tmp0          ; Pop tmp0
0849 7C94 C2F9  30         mov   *stack+,r11           ; Pop r11
0850 7C96 045B  20         b     *r11                  ; Return to caller
0851               
0852               
0853               
0854               ***************************************************************
0855               * Stub for "tibasic.uncrunch"
0856               * bank7 vec.11
0857               ********|*****|*********************|**************************
0858               tibasic.uncrunch:
0859 7C98 0649  14         dect  stack
0860 7C9A C64B  30         mov   r11,*stack            ; Save return address
0861                       ;------------------------------------------------------
0862                       ; Uncrunch TI basic program
0863                       ;------------------------------------------------------
0864 7C9C C820  54         mov   @tib.session,@parm1   ; Get current session
     7C9E A0B4     
     7CA0 A006     
0865 7CA2 1305  14         jeq   tibasic.uncrunch.exit ; Exit early if no session
0866               
0867 7CA4 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CA6 2F98     
0868 7CA8 600E                   data bank7.rom        ; | i  p0 = bank address
0869 7CAA 7FD4                   data vec.11           ; | i  p1 = Vector with target address
0870 7CAC 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0871                       ;------------------------------------------------------
0872                       ; Exit
0873                       ;------------------------------------------------------
0874               tibasic.uncrunch.exit:
0875 7CAE C2F9  30         mov   *stack+,r11           ; Pop r11
0876 7CB0 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0157                       copy  "rom.stubs.bankx.asm"         ; Stubs to include in all banks > 0
     **** ****     > rom.stubs.bankx.asm
0001               * FILE......: rom.stubs.bankx.asm
0002               * Purpose...: Stubs to include in all banks > 0
0003               
0004               
0026               
0027               
0029               ***************************************************************
0030               * Stub for "mem.sams.set.legacy"
0031               * bank7 vec.1
0032               ********|*****|*********************|**************************
0033               mem.sams.set.legacy:
0034 7CB2 0649  14         dect  stack
0035 7CB4 C64B  30         mov   r11,*stack            ; Save return address
0036                       ;------------------------------------------------------
0037                       ; Dump VDP patterns
0038                       ;------------------------------------------------------
0039 7CB6 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CB8 2F98     
0040 7CBA 600E                   data bank7.rom        ; | i  p0 = bank address
0041 7CBC 7FC0                   data vec.1            ; | i  p1 = Vector with target address
0042 7CBE 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0043                       ;------------------------------------------------------
0044                       ; Exit
0045                       ;------------------------------------------------------
0046 7CC0 C2F9  30         mov   *stack+,r11           ; Pop r11
0047 7CC2 045B  20         b     *r11                  ; Return to caller
0049               
0050               
0052               ***************************************************************
0053               * Stub for "mem.sams.set.boot"
0054               * bank7 vec.2
0055               ********|*****|*********************|**************************
0056               mem.sams.set.boot:
0057 7CC4 0649  14         dect  stack
0058 7CC6 C64B  30         mov   r11,*stack            ; Save return address
0059                       ;------------------------------------------------------
0060                       ; Dump VDP patterns
0061                       ;------------------------------------------------------
0062 7CC8 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CCA 2F98     
0063 7CCC 600E                   data bank7.rom        ; | i  p0 = bank address
0064 7CCE 7FC2                   data vec.2            ; | i  p1 = Vector with target address
0065 7CD0 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0066                       ;------------------------------------------------------
0067                       ; Exit
0068                       ;------------------------------------------------------
0069 7CD2 C2F9  30         mov   *stack+,r11           ; Pop r11
0070 7CD4 045B  20         b     *r11                  ; Return to caller
0072               
0073               
0075               ***************************************************************
0076               * Stub for "mem.sams.set.stevie"
0077               * bank7 vec.3
0078               ********|*****|*********************|**************************
0079               mem.sams.set.stevie:
0080 7CD6 0649  14         dect  stack
0081 7CD8 C64B  30         mov   r11,*stack            ; Save return address
0082                       ;------------------------------------------------------
0083                       ; Dump VDP patterns
0084                       ;------------------------------------------------------
0085 7CDA 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CDC 2F98     
0086 7CDE 600E                   data bank7.rom        ; | i  p0 = bank address
0087 7CE0 7FC4                   data vec.3            ; | i  p1 = Vector with target address
0088 7CE2 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0089                       ;------------------------------------------------------
0090                       ; Exit
0091                       ;------------------------------------------------------
0092 7CE4 C2F9  30         mov   *stack+,r11           ; Pop r11
0093 7CE6 045B  20         b     *r11                  ; Return to caller
0095               
0096               
0098               ***************************************************************
0099               * Stub for "magic.set"
0100               * bank7 vec.20
0101               ********|*****|*********************|**************************
0102               magic.set:
0103 7CE8 0649  14         dect  stack
0104 7CEA C64B  30         mov   r11,*stack            ; Save return address
0105                       ;------------------------------------------------------
0106                       ; Dump VDP patterns
0107                       ;------------------------------------------------------
0108 7CEC 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7CEE 2F98     
0109 7CF0 600E                   data bank7.rom        ; | i  p0 = bank address
0110 7CF2 7FE6                   data vec.20           ; | i  p1 = Vector with target address
0111 7CF4 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0112                       ;------------------------------------------------------
0113                       ; Exit
0114                       ;------------------------------------------------------
0115 7CF6 C2F9  30         mov   *stack+,r11           ; Pop r11
0116 7CF8 045B  20         b     *r11                  ; Return to caller
0118               
0119               
0121               ***************************************************************
0122               * Stub for "magic.clear"
0123               * bank7 vec.21
0124               ********|*****|*********************|**************************
0125               magic.clear:
0126 7CFA 0649  14         dect  stack
0127 7CFC C64B  30         mov   r11,*stack            ; Save return address
0128                       ;------------------------------------------------------
0129                       ; Dump VDP patterns
0130                       ;------------------------------------------------------
0131 7CFE 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D00 2F98     
0132 7D02 600E                   data bank7.rom        ; | i  p0 = bank address
0133 7D04 7FE8                   data vec.21           ; | i  p1 = Vector with target address
0134 7D06 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0135                       ;------------------------------------------------------
0136                       ; Exit
0137                       ;------------------------------------------------------
0138 7D08 C2F9  30         mov   *stack+,r11           ; Pop r11
0139 7D0A 045B  20         b     *r11                  ; Return to caller
0141               
0142               
0144               ***************************************************************
0145               * Stub for "magic.check"
0146               * bank7 vec.22
0147               ********|*****|*********************|**************************
0148               magic.check:
0149 7D0C 0649  14         dect  stack
0150 7D0E C64B  30         mov   r11,*stack            ; Save return address
0151                       ;------------------------------------------------------
0152                       ; Dump VDP patterns
0153                       ;------------------------------------------------------
0154 7D10 06A0  32         bl    @rom.farjump          ; \ Trampoline jump to bank
     7D12 2F98     
0155 7D14 600E                   data bank7.rom        ; | i  p0 = bank address
0156 7D16 7FEA                   data vec.22           ; | i  p1 = Vector with target address
0157 7D18 6002                   data bankid           ; / i  p2 = Source ROM bank for return
0158                       ;------------------------------------------------------
0159                       ; Exit
0160                       ;------------------------------------------------------
0161 7D1A C2F9  30         mov   *stack+,r11           ; Pop r11
0162 7D1C 045B  20         b     *r11                  ; Return to caller
                   < stevie_b1.asm
0158                       ;-----------------------------------------------------------------------
0159                       ; Program data
0160                       ;-----------------------------------------------------------------------
0161                       copy  "data.keymap.actions.asm"     ; Keyboard actions
     **** ****     > data.keymap.actions.asm
0001               * FILE......: data.keymap.actions.asm
0002               * Purpose...: Keyboard actions
0003               
0004               *---------------------------------------------------------------
0005               * Action keys mapping table: Editor
0006               *---------------------------------------------------------------
0007               keymap_actions.editor:
0008                       ;-------------------------------------------------------
0009                       ; Movement keys
0010                       ;-------------------------------------------------------
0011 7D1E 0D00             byte  key.enter, pane.focus.fb
0012 7D20 670E             data  edkey.action.enter
0013               
0014 7D22 0800             byte  key.fctn.s, pane.focus.fb
0015 7D24 6244             data  edkey.action.left
0016               
0017 7D26 0900             byte  key.fctn.d, pane.focus.fb
0018 7D28 625E             data  edkey.action.right
0019               
0020 7D2A 0B00             byte  key.fctn.e, pane.focus.fb
0021 7D2C 63C2             data  edkey.action.up
0022               
0023 7D2E 0A00             byte  key.fctn.x, pane.focus.fb
0024 7D30 63CA             data  edkey.action.down
0025               
0026 7D32 BF00             byte  key.fctn.h, pane.focus.fb
0027 7D34 627A             data  edkey.action.home
0028               
0029 7D36 C000             byte  key.fctn.j, pane.focus.fb
0030 7D38 62A4             data  edkey.action.pword
0031               
0032 7D3A C100             byte  key.fctn.k, pane.focus.fb
0033 7D3C 62F6             data  edkey.action.nword
0034               
0035 7D3E C200             byte  key.fctn.l, pane.focus.fb
0036 7D40 6282             data  edkey.action.end
0037               
0038 7D42 0C00             byte  key.fctn.6, pane.focus.fb
0039 7D44 63D2             data  edkey.action.ppage
0040               
0041 7D46 0200             byte  key.fctn.4, pane.focus.fb
0042 7D48 640E             data  edkey.action.npage
0043               
0044 7D4A 0E00             byte  key.fctn.5, pane.focus.fb
0045 7D4C 638A             data  edkey.action.scroll.right
0046               
0047 7D4E 8500             byte  key.ctrl.e, pane.focus.fb
0048 7D50 63D2             data  edkey.action.ppage
0049               
0050 7D52 9800             byte  key.ctrl.x, pane.focus.fb
0051 7D54 640E             data  edkey.action.npage
0052               
0053 7D56 7F00             byte  key.fctn.v, pane.focus.fb
0054 7D58 6464             data  edkey.action.topscr
0055               
0056 7D5A BE00             byte  key.fctn.b, pane.focus.fb
0057 7D5C 64AE             data  edkey.action.botscr
0058               
0059 7D5E 9600             byte  key.ctrl.v, pane.focus.fb
0060 7D60 6448             data  edkey.action.top
0061               
0062 7D62 8200             byte  key.ctrl.b, pane.focus.fb
0063 7D64 647E             data  edkey.action.bot
0064                       ;-------------------------------------------------------
0065                       ; Modifier keys - Delete
0066                       ;-------------------------------------------------------
0067 7D66 0300             byte  key.fctn.1, pane.focus.fb
0068 7D68 653C             data  edkey.action.del_char
0069               
0070 7D6A 0700             byte  key.fctn.3, pane.focus.fb
0071 7D6C 65EE             data  edkey.action.del_line
0072               
0073 7D6E 8C00             byte  key.ctrl.l, pane.focus.fb
0074 7D70 65BA             data  edkey.action.del_eol
0075                       ;-------------------------------------------------------
0076                       ; Modifier keys - Insert
0077                       ;-------------------------------------------------------
0078 7D72 0400             byte  key.fctn.2, pane.focus.fb
0079 7D74 6650             data  edkey.action.ins_char.ws
0080               
0081 7D76 B900             byte  key.fctn.dot, pane.focus.fb
0082 7D78 679A             data  edkey.action.ins_onoff
0083               
0084 7D7A 0100             byte  key.fctn.7, pane.focus.fb
0085 7D7C 6998             data  edkey.action.fb.tab.next
0086               
0087 7D7E 9400             byte  key.ctrl.t, pane.focus.fb
0088 7D80 6998             data  edkey.action.fb.tab.next
0089               
0090 7D82 0600             byte  key.fctn.8, pane.focus.fb
0091 7D84 66F6             data  edkey.action.ins_line
0092                       ;-------------------------------------------------------
0093                       ; Block marking/modifier
0094                       ;-------------------------------------------------------
0095 7D86 F000             byte  key.ctrl.space, pane.focus.fb
0096 7D88 68C2             data  edkey.action.block.mark
0097               
0098 7D8A 8300             byte  key.ctrl.c, pane.focus.fb
0099 7D8C 6862             data  edkey.action.copyblock_or_clipboard
0100               
0101 7D8E 8400             byte  key.ctrl.d, pane.focus.fb
0102 7D90 6922             data  edkey.action.block.delete
0103               
0104 7D92 8D00             byte  key.ctrl.m, pane.focus.fb
0105 7D94 694C             data  edkey.action.block.move
0106               
0107 7D96 8700             byte  key.ctrl.g, pane.focus.fb
0108 7D98 697E             data  edkey.action.block.goto.m1
0109                       ;-------------------------------------------------------
0110                       ; Clipboards
0111                       ;-------------------------------------------------------
0112 7D9A B100             byte  key.ctrl.1, pane.focus.fb
0113 7D9C 69A6             data  edkey.action.fb.clip.save.1
0114               
0115 7D9E B200             byte  key.ctrl.2, pane.focus.fb
0116 7DA0 69AC             data  edkey.action.fb.clip.save.2
0117               
0118 7DA2 B300             byte  key.ctrl.3, pane.focus.fb
0119 7DA4 69B2             data  edkey.action.fb.clip.save.3
0120               
0121 7DA6 B500             byte  key.ctrl.5, pane.focus.fb
0122 7DA8 6356             data  edkey.action.scroll.left
0123                       ;-------------------------------------------------------
0124                       ; Other action keys
0125                       ;-------------------------------------------------------
0126 7DAA 0500             byte  key.fctn.plus, pane.focus.fb
0127 7DAC 6854             data  edkey.action.quit
0128               
0129 7DAE 9100             byte  key.ctrl.q, pane.focus.fb
0130 7DB0 6854             data  edkey.action.quit
0131               
0132 7DB2 9200             byte  key.ctrl.r, pane.focus.fb
0133 7DB4 6814             data  edkey.action.toggle.ruler
0134               
0135 7DB6 9A00             byte  key.ctrl.z, pane.focus.fb
0136 7DB8 72AC             data  pane.action.colorscheme.cycle
0137               
0138 7DBA 8000             byte  key.ctrl.comma, pane.focus.fb
0139 7DBC 6872             data  edkey.action.fb.fname.dec.load
0140               
0141 7DBE 9B00             byte  key.ctrl.dot, pane.focus.fb
0142 7DC0 6884             data  edkey.action.fb.fname.inc.load
0143               
0144 7DC2 BB00             byte  key.ctrl.slash, pane.focus.fb
0145 7DC4 7A74             data  dialog.basic
0146               
0147 7DC6 BC00             byte  key.fctn.0, pane.focus.fb
0148 7DC8 7C70             data  tibasic
0149                       ;-------------------------------------------------------
0150                       ; Dialog keys
0151                       ;-------------------------------------------------------
0152 7DCA 8100             byte  key.ctrl.a, pane.focus.fb
0153 7DCC 7A60             data  dialog.append
0154               
0155 7DCE 8800             byte  key.ctrl.h, pane.focus.fb
0156 7DD0 79F8             data  dialog.help
0157               
0158 7DD2 8600             byte  key.ctrl.f, pane.focus.fb
0159 7DD4 7A2A             data  dialog.file
0160               
0161 7DD6 8900             byte  key.ctrl.i, pane.focus.fb
0162 7DD8 7A16             data  dialog.insert
0163               
0164 7DDA 9300             byte  key.ctrl.s, pane.focus.fb
0165 7DDC 7A0C             data  dialog.save
0166               
0167 7DDE 8F00             byte  key.ctrl.o, pane.focus.fb
0168 7DE0 7A02             data  dialog.load
0169               
0170 7DE2 9500             byte  key.ctrl.u, pane.focus.fb
0171 7DE4 7A7E             data  dialog.shortcuts
0172               
0173 7DE6 9000             byte  key.ctrl.p, pane.focus.fb
0174 7DE8 7A20             data  dialog.print
0175               
0176                       ;
0177                       ; FCTN-9 has multiple purposes, if block mode is on it
0178                       ; resets the block, otherwise show dialog "Main Menu".
0179                       ;
0180 7DEA 0F00             byte  key.fctn.9, pane.focus.fb
0181 7DEC 7A92             data  dialog.menu
0182                       ;-------------------------------------------------------
0183                       ; End of list
0184                       ;-------------------------------------------------------
0185 7DEE FFFF             data  EOL                           ; EOL
0186               
0187               
0188               *---------------------------------------------------------------
0189               * Action keys mapping table: Command Buffer (CMDB)
0190               *---------------------------------------------------------------
0191               keymap_actions.cmdb:
0192                       ;-------------------------------------------------------
0193                       ; Dialog: Main Menu
0194                       ;-------------------------------------------------------
0195 7DF0 4664             byte  key.uc.f, id.dialog.menu
0196 7DF2 7A2A             data  dialog.file
0197               
0198 7DF4 4364             byte  key.uc.c, id.dialog.menu
0199 7DF6 7A6A             data  dialog.cartridge
0200               
0201 7DF8 4F64             byte  key.uc.o, id.dialog.menu
0202 7DFA 7A56             data  dialog.config
0203               
0204 7DFC 5364             byte  key.uc.s, id.dialog.menu
0205 7DFE 7A7E             data  dialog.shortcuts
0206               
0207 7E00 4864             byte  key.uc.h, id.dialog.menu
0208 7E02 79F8             data  dialog.help
0209               
0210 7E04 5164             byte  key.uc.q, id.dialog.menu
0211 7E06 6854             data  edkey.action.quit
0212                       ;-------------------------------------------------------
0213                       ; Dialog: File
0214                       ;-------------------------------------------------------
0215 7E08 4E69             byte  key.uc.n, id.dialog.file
0216 7E0A 6A96             data  edkey.action.cmdb.file.new
0217               
0218 7E0C 5369             byte  key.uc.s, id.dialog.file
0219 7E0E 7A0C             data  dialog.save
0220               
0221 7E10 4F69             byte  key.uc.o, id.dialog.file
0222 7E12 7A02             data  dialog.load
0223               
0224 7E14 4969             byte  key.uc.i, id.dialog.file
0225 7E16 7A16             data  dialog.insert
0226               
0227 7E18 4169             byte  key.uc.a, id.dialog.file
0228 7E1A 7A60             data  dialog.append
0229               
0230 7E1C 5069             byte  key.uc.p, id.dialog.file
0231 7E1E 7A20             data  dialog.print
0232                       ;-------------------------------------------------------
0233                       ; Dialog: Open file
0234                       ;-------------------------------------------------------
0235 7E20 0E0A             byte  key.fctn.5, id.dialog.load
0236 7E22 6DB4             data  edkey.action.cmdb.fastmode.toggle
0237               
0238 7E24 0D0A             byte  key.enter, id.dialog.load
0239 7E26 6ABC             data  edkey.action.cmdb.load
0240                       ;-------------------------------------------------------
0241                       ; Dialog: Insert file at line ...
0242                       ;-------------------------------------------------------
0243 7E28 0E0D             byte  key.fctn.5, id.dialog.insert
0244 7E2A 6DB4             data  edkey.action.cmdb.fastmode.toggle
0245               
0246 7E2C 0D0D             byte  key.enter, id.dialog.insert
0247 7E2E 6B00             data  edkey.action.cmdb.insert
0248                       ;-------------------------------------------------------
0249                       ; Dialog: Append file
0250                       ;-------------------------------------------------------
0251 7E30 0E0E             byte  key.fctn.5, id.dialog.append
0252 7E32 6DB4             data  edkey.action.cmdb.fastmode.toggle
0253               
0254 7E34 0D0E             byte  key.enter, id.dialog.append
0255 7E36 6B82             data  edkey.action.cmdb.append
0256                       ;-------------------------------------------------------
0257                       ; Dialog: Copy clipboard to line ...
0258                       ;-------------------------------------------------------
0259 7E38 0E67             byte  key.fctn.5, id.dialog.clipboard
0260 7E3A 6DB4             data  edkey.action.cmdb.fastmode.toggle
0261               
0262 7E3C 0167             byte  key.fctn.7, id.dialog.clipboard
0263 7E3E 7A4C             data  dialog.clipdev
0264               
0265 7E40 3167             byte  key.num.1, id.dialog.clipboard
0266 7E42 6BF6             data  edkey.action.cmdb.clip.1
0267               
0268 7E44 3267             byte  key.num.2, id.dialog.clipboard
0269 7E46 6BFC             data  edkey.action.cmdb.clip.2
0270               
0271 7E48 3367             byte  key.num.3, id.dialog.clipboard
0272 7E4A 6C02             data  edkey.action.cmdb.clip.3
0273               
0274 7E4C 3467             byte  key.num.4, id.dialog.clipboard
0275 7E4E 6C08             data  edkey.action.cmdb.clip.4
0276               
0277 7E50 3567             byte  key.num.5, id.dialog.clipboard
0278 7E52 6C0E             data  edkey.action.cmdb.clip.5
0279                       ;-------------------------------------------------------
0280                       ; Dialog: Configure clipboard
0281                       ;-------------------------------------------------------
0282 7E54 0D11             byte  key.enter, id.dialog.clipdev
0283 7E56 6C42             data  edkey.action.cmdb.clipdev.configure
0284                       ;-------------------------------------------------------
0285                       ; Dialog: Configure
0286                       ;-------------------------------------------------------
0287 7E58 436C             byte  key.uc.c, id.dialog.config
0288 7E5A 7A4C             data  dialog.clipdev
0289                       ;-------------------------------------------------------
0290                       ; Dialog: Save file
0291                       ;-------------------------------------------------------
0292 7E5C 0D0B             byte  key.enter, id.dialog.save
0293 7E5E 6C92             data  edkey.action.cmdb.save
0294               
0295 7E60 0D0C             byte  key.enter, id.dialog.saveblock
0296 7E62 6C92             data  edkey.action.cmdb.save
0297                       ;-------------------------------------------------------
0298                       ; Dialog: Print file
0299                       ;-------------------------------------------------------
0300 7E64 0D0F             byte  key.enter, id.dialog.print
0301 7E66 6D0E             data  edkey.action.cmdb.print
0302               
0303 7E68 0D10             byte  key.enter, id.dialog.printblock
0304 7E6A 6D0E             data  edkey.action.cmdb.print
0305                       ;-------------------------------------------------------
0306                       ; Dialog: Unsaved changes
0307                       ;-------------------------------------------------------
0308 7E6C 0C65             byte  key.fctn.6, id.dialog.unsaved
0309 7E6E 6D8A             data  edkey.action.cmdb.proceed
0310               
0311 7E70 2065             byte  key.space, id.dialog.unsaved
0312 7E72 6D8A             data  edkey.action.cmdb.proceed
0313               
0314 7E74 0D65             byte  key.enter, id.dialog.unsaved
0315 7E76 7A0C             data  dialog.save
0316                       ;-------------------------------------------------------
0317                       ; Dialog: Cartridge
0318                       ;-------------------------------------------------------
0319 7E78 426A             byte  key.uc.b, id.dialog.cartridge
0320 7E7A 7A74             data  dialog.basic
0321                       ;-------------------------------------------------------
0322                       ; Dialog: Basic
0323                       ;-------------------------------------------------------
0324 7E7C 316B             byte  key.num.1, id.dialog.basic
0325 7E7E 7C4A             data  tibasic1
0326               
0327 7E80 326B             byte  key.num.2, id.dialog.basic
0328 7E82 7C52             data  tibasic2
0329               
0330 7E84 336B             byte  key.num.3, id.dialog.basic
0331 7E86 7C5A             data  tibasic3
0332               
0333 7E88 346B             byte  key.num.4, id.dialog.basic
0334 7E8A 7C62             data  tibasic4
0335               
0336 7E8C 356B             byte  key.num.5, id.dialog.basic
0337 7E8E 7C6A             data  tibasic5
0338               
0339 7E90 0E6B             byte  key.fctn.5, id.dialog.basic
0340 7E92 6DC0             data  edkey.action.cmdb.am.toggle
0341               
0342 7E94 206B             byte  key.space, id.dialog.basic
0343 7E96 7C98             data  tibasic.uncrunch
0344                       ;-------------------------------------------------------
0345                       ; Dialog: Shortcuts
0346                       ;-------------------------------------------------------
0347 7E98 436E             byte  key.uc.c, id.dialog.shortcuts
0348 7E9A 72AC             data  pane.action.colorscheme.cycle
0349               
0350 7E9C 526E             byte  key.uc.r, id.dialog.shortcuts
0351 7E9E 6814             data  edkey.action.toggle.ruler
0352               
0353 7EA0 416E             byte  key.uc.a, id.dialog.shortcuts
0354 7EA2 6DF2             data  edkey.action.cmdb.autoinsert
0355               
0356 7EA4 316E             byte  key.num.1, id.dialog.shortcuts
0357 7EA6 68CA             data  edkey.action.block.m1
0358               
0359 7EA8 326E             byte  key.num.2, id.dialog.shortcuts
0360 7EAA 68D2             data  edkey.action.block.m2
0361                       ;-------------------------------------------------------
0362                       ; Dialog: Help
0363                       ;-------------------------------------------------------
0364 7EAC 2068             byte  key.space, id.dialog.help
0365 7EAE 79E4             data  dialog.help.next
0366               
0367 7EB0 0F68             byte  key.fctn.9, id.dialog.help
0368 7EB2 6DD4             data  edkey.action.cmdb.close.about
0369               
0370 7EB4 0D68             byte  key.enter, id.dialog.help
0371 7EB6 6DD4             data  edkey.action.cmdb.close.about
0372                       ;-------------------------------------------------------
0373                       ; Movement keys
0374                       ;-------------------------------------------------------
0375 7EB8 0801             byte  key.fctn.s, pane.focus.cmdb
0376 7EBA 69CA             data  edkey.action.cmdb.left
0377               
0378 7EBC 0901             byte  key.fctn.d, pane.focus.cmdb
0379 7EBE 69DC             data  edkey.action.cmdb.right
0380               
0381 7EC0 BF01             byte  key.fctn.h, pane.focus.cmdb
0382 7EC2 69F4             data  edkey.action.cmdb.home
0383               
0384 7EC4 C201             byte  key.fctn.l, pane.focus.cmdb
0385 7EC6 6A08             data  edkey.action.cmdb.end
0386                       ;-------------------------------------------------------
0387                       ; Modifier keys
0388                       ;-------------------------------------------------------
0389 7EC8 0701             byte  key.fctn.3, pane.focus.cmdb
0390 7ECA 6A20             data  edkey.action.cmdb.clear
0391                       ;-------------------------------------------------------
0392                       ; Other action keys
0393                       ;-------------------------------------------------------
0394 7ECC 0F01             byte  key.fctn.9, pane.focus.cmdb
0395 7ECE 6DEA             data  edkey.action.cmdb.close.dialog
0396               
0397 7ED0 0501             byte  key.fctn.plus, pane.focus.cmdb
0398 7ED2 6854             data  edkey.action.quit
0399               
0400 7ED4 8101             byte  key.ctrl.a, pane.focus.cmdb
0401 7ED6 6DCC             data  edkey.action.cmdb.preset
0402               
0403 7ED8 8201             byte  key.ctrl.b, pane.focus.cmdb
0404 7EDA 6DCC             data  edkey.action.cmdb.preset
0405               
0406 7EDC 8301             byte  key.ctrl.c, pane.focus.cmdb
0407 7EDE 6DCC             data  edkey.action.cmdb.preset
0408               
0409 7EE0 9A01             byte  key.ctrl.z, pane.focus.cmdb
0410 7EE2 72AC             data  pane.action.colorscheme.cycle
0411                       ;------------------------------------------------------
0412                       ; End of list
0413                       ;-------------------------------------------------------
0414 7EE4 FFFF             data  EOL                           ; EOL
                   < stevie_b1.asm
0162                       ;-----------------------------------------------------------------------
0163                       ; Bank full check
0164                       ;-----------------------------------------------------------------------
0168                       ;-----------------------------------------------------------------------
0169                       ; Show ROM bank in CPU crash screen
0170                       ;-----------------------------------------------------------------------
0171                       copy  "rom.crash.asm"
     **** ****     > rom.crash.asm
0001               * FILE......: rom.crash.asm
0002               * Purpose...: Show ROM bank number on CPU crash
0003               
0004               ***************************************************************
0005               * Show ROM bank number on CPU crash
0006               ********|*****|*********************|**************************
0007               cpu.crash.showbank:
0008                       aorg  bankx.crash.showbank
0009 7F00 06A0  32         bl    @putat
     7F02 2450     
0010 7F04 0314                   byte 3,20
0011 7F06 7F0A                   data cpu.crash.showbank.bankstr
0012 7F08 10FF  14         jmp   $
                   < stevie_b1.asm
0172                       ;-----------------------------------------------------------------------
0173                       ; Vector table
0174                       ;-----------------------------------------------------------------------
0175                       copy  "rom.vectors.bank1.asm"
     **** ****     > rom.vectors.bank1.asm
0001               * FILE......: rom.vectors.bank1.asm
0002               * Purpose...: Bank 1 vectors for trampoline function
0003               
0004               *--------------------------------------------------------------
0005               * ROM identification string for CPU crash
0006               *--------------------------------------------------------------
0007               cpu.crash.showbank.bankstr:
0008 7F0A 0552             stri 'ROM#1'
     7F0C 4F4D     
     7F0E 2331     
0009               
0010               *--------------------------------------------------------------
0011               * Vector table for trampoline functions
0012               *--------------------------------------------------------------
0013                       aorg  bankx.vectab
0014               
0015 7FC0 6100     vec.1   data  mem.sams.setup.stevie ;
0016 7FC2 2026     vec.2   data  cpu.crash             ;
0017 7FC4 2026     vec.3   data  cpu.crash             ;
0018 7FC6 2026     vec.4   data  cpu.crash             ;
0019 7FC8 2026     vec.5   data  cpu.crash             ;
0020 7FCA 2026     vec.6   data  cpu.crash             ;
0021 7FCC 2026     vec.7   data  cpu.crash             ;
0022 7FCE 2026     vec.8   data  cpu.crash             ;
0023 7FD0 2026     vec.9   data  cpu.crash             ;
0024 7FD2 7024     vec.10  data  edb.line.pack.fb      ;
0025 7FD4 711C     vec.11  data  edb.line.unpack.fb    ;
0026 7FD6 7BCC     vec.12  data  edb.clear.sams        ;
0027 7FD8 2026     vec.13  data  cpu.crash             ;
0028 7FDA 2026     vec.14  data  cpu.crash             ;
0029 7FDC 6A84     vec.15  data  edkey.action.cmdb.show
0030 7FDE 2026     vec.16  data  cpu.crash             ;
0031 7FE0 2026     vec.17  data  cpu.crash             ;
0032 7FE2 6E2A     vec.18  data  cmdb.dialog.close     ;
0033 7FE4 7AF6     vec.19  data  cmdb.cmd.clear        ;
0034 7FE6 2026     vec.20  data  cpu.crash             ;
0035 7FE8 7B84     vec.21  data  fb.vdpdump            ;
0036 7FEA 308E     vec.22  data  fb.row2line           ;
0037 7FEC 2026     vec.23  data  cpu.crash             ;
0038 7FEE 2026     vec.24  data  cpu.crash             ;
0039 7FF0 2026     vec.25  data  cpu.crash             ;
0040 7FF2 2026     vec.26  data  cpu.crash             ;
0041 7FF4 7702     vec.27  data  pane.errline.hide     ;
0042 7FF6 7542     vec.28  data  pane.cursor.blink     ;
0043 7FF8 7524     vec.29  data  pane.cursor.hide      ;
0044 7FFA 76A0     vec.30  data  pane.errline.show     ;
0045 7FFC 730A     vec.31  data  pane.action.colorscheme.load
0046 7FFE 750A     vec.32  data  pane.action.colorscheme.statlines
                   < stevie_b1.asm
0176                                                   ; Vector table bank 1
0177               *--------------------------------------------------------------
0178               * Video mode configuration
0179               *--------------------------------------------------------------
0180      00F4     spfclr  equ   >f4                   ; Foreground/Background color for font.
0181      0004     spfbck  equ   >04                   ; Screen background color.
0182      3668     spvmod  equ   stevie.80x30          ; Video mode.   See VIDTAB for details.
0183      000C     spfont  equ   fnopt3                ; Font to load. See LDFONT for details.
0184      0050     colrow  equ   80                    ; Columns per row
0185      0FC0     pctadr  equ   >0fc0                 ; VDP color table base
0186      1100     fntadr  equ   >1100                 ; VDP font start address (in PDT range)
0187      2180     sprsat  equ   >2180                 ; VDP sprite attribute table
0188      2800     sprpdt  equ   >2800                 ; VDP sprite pattern table

    ANYKEY.............. >200A :     
    AT.................. >26D4 :     
    BANK0.RAM........... >6800 :     
    BANK0.ROM........... >6000 :     
    BANK1.RAM........... >6802 :     
    BANK1.ROM........... >6002 :     
    BANK2.RAM........... >6804 :     
    BANK2.ROM........... >6004 :     
    BANK3.RAM........... >6806 :     
    BANK3.ROM........... >6006 :     
    BANK4.RAM........... >6808 :     
    BANK4.ROM........... >6008 :     
    BANK5.RAM........... >680A :     
    BANK5.ROM........... >600A :     
    BANK6.RAM........... >680C :     
    BANK6.ROM........... >600C :     
    BANK7.RAM........... >680E :     
    BANK7.ROM........... >600E :     
    BANKID.............. >6002 :     
    BANKX.CRASH.SHOWBANK >7F00 :     
    BANKX.VECTAB........ >7FC0 :     
    BTIHI............... >8314 :     
    BVDPST.............. >831A :     
    BX.................. >832B :     
    BY.................. >832A :     
    C99_BRK............. >0113 :     
    C99_DBGR0........... >0120 :     
    C99_DBGR1........... >0121 :     
    C99_DBGR10.......... >012A :     
    C99_DBGR11.......... >012B :     
    C99_DBGR12.......... >012C :     
    C99_DBGR13.......... >012D :     
    C99_DBGR14.......... >012E :     
    C99_DBGR15.......... >012F :     
    C99_DBGR2........... >0122 :     
    C99_DBGR3........... >0123 :     
    C99_DBGR4........... >0124 :     
    C99_DBGR5........... >0125 :     
    C99_DBGR6........... >0126 :     
    C99_DBGR7........... >0127 :     
    C99_DBGR8........... >0128 :     
    C99_DBGR9........... >0129 :     
    C99_DBG_R0.......... >0120 :     
    C99_DBG_R1.......... >0121 :     
    C99_DBG_R2.......... >0122 :     
    C99_DBG_R3.......... >0123 :     
    C99_DBG_R4.......... >0124 :     
    C99_DBG_R5.......... >0125 :     
    C99_DBG_R6.......... >0126 :     
    C99_DBG_R7.......... >0127 :     
    C99_DBG_R8.......... >0128 :     
    C99_DBG_R9.......... >0199 :     
    C99_DBG_RA.......... >012A :     
    C99_DBG_RB.......... >012B :     
    C99_DBG_RC.......... >012C :     
    C99_DBG_RD.......... >012D :     
    C99_DBG_RE.......... >012E :     
    C99_DBG_RF.......... >012F :     
    C99_DBG_STCK........ >0199 :     
    C99_DBG_TMP0........ >0124 :     
    C99_DBG_TMP1........ >0125 :     
    C99_DBG_TMP2........ >0126 :     
    C99_DBG_TMP3........ >0127 :     
    C99_DBG_TMP4........ >0128 :     
    C99_NORM............ >0110 :     
    C99_OVRD............ >0111 :     
    C99_QUIT............ >0114 :     
    C99_SMAX............ >0112 :     
    CLHOOK.............. >2E90 :     
    CLIP1............... >3100 :     
    CLIP2............... >3200 :     
    CLIP3............... >3300 :     
    CLIP4............... >3400 :     
    CLIP5............... >3500 :     
    CLSLOT.............. >2EB8 :     
    CMDB.ACTION.PTR..... >A728 :     
    CMDB.CMD............ >A72B :     
    CMDB.CMD.CLEAR...... >7AF6 :     
    CMDB.CMD.CLEAR.VECTOR >7AFE :     
    CMDB.CMD.GETLENGTH.. >7B00 :     
    CMDB.CMD.GETLENGTH.VECTOR >7B08 :     
    CMDB.CMD.PRESET..... >7B0A :     
    CMDB.CMD.PRESET.VECTOR >7B12 :     
    CMDB.CMD.SET........ >7B14 :     
    CMDB.CMD.SET.VECTOR. >7B1C :     
    CMDB.CMDALL......... >A72A :     
    CMDB.CMDLEN......... >A72A :     
    CMDB.COLUMN......... >A712 :     
    CMDB.CURSOR......... >A70A :     
    CMDB.DEFAULT........ >A708 :     
    CMDB.DFLT.FNAME..... >A7AE :     
    CMDB.DIALOG......... >A71A :     
    CMDB.DIALOG.CLOSE... >6E2A :     
    CMDB.DIALOG.CLOSE.EXIT >6E3E :     
    CMDB.DIALOG.VAR..... >A71C :     
    CMDB.DIRTY.......... >A718 :     
    CMDB.FB.YXSAVE...... >A704 :     
    CMDB.FREE........... >A800 :     
    CMDB.INIT........... >321A :     
    CMDB.INIT.EXIT...... >3250 :     
    CMDB.LENGTH......... >A714 :     
    CMDB.LINES.......... >A716 :     
    CMDB.PANHEAD........ >A71E :     
    CMDB.PANHEAD.BUF.... >A77C :     
    CMDB.PANHINT........ >A722 :     
    CMDB.PANINFO........ >A720 :     
    CMDB.PANKEYS........ >A726 :     
    CMDB.PANMARKERS..... >A724 :     
    CMDB.REFRESH........ >7AEC :     
    CMDB.REFRESH.VECTOR. >7AF4 :     
    CMDB.SCRROWS........ >A706 :     
    CMDB.SIZE........... >1000 :     
    CMDB.STRUCT......... >A700 :     
    CMDB.TOP............ >E000 :     
    CMDB.TOP.PTR........ >A700 :     
    CMDB.VISIBLE........ >A702 :     
    CMDB.YXPROMPT....... >A710 :     
    CMDB.YXSAVE......... >A70C :     
    CMDB.YXTOP.......... >A70E :     
    COLORS.LINE.SET..... >7562 :     
    COLORS.LINE.SET.EXIT >759A :     
    COLROW.............. >0050 :     
    CONFIG.............. >0002 :     
    CONST.0............. >2000 :     
    CONST.1............. >2002 :     
    CONST.10............ >3702 :     
    CONST.2............. >2004 :     
    CONST.3............. >36F8 :     
    CONST.4............. >2006 :     
    CONST.5............. >36FA :     
    CONST.6............. >36FC :     
    CONST.7............. >36FE :     
    CONST.8............. >2008 :     
    CONST.9............. >3700 :     
    CORE1.FREE.......... >A100 :     
    CORE1.FREE1......... >A034 :     
    CORE1.FREE2......... >A0D4 :     
    CORE1.TOP........... >A000 :     
    CORE2.FREE.......... >A200 :     
    CORE2.TOP........... >A100 :     
    CPU.CRASH........... >2026 :     
    CPU.CRASH.MAIN...... >2086 :     
    CPU.CRASH.MSG.CALLER >21A8 :     
    CPU.CRASH.MSG.CRASHED >2192 :     
    CPU.CRASH.MSG.ID.... >21E6 :     
    CPU.CRASH.MSG.MARKER >21C0 :     
    CPU.CRASH.MSG.R..... >21BE :     
    CPU.CRASH.MSG.SOURCE >21CE :     
    CPU.CRASH.MSG.ST.... >21C9 :     
    CPU.CRASH.MSG.WP.... >21C4 :     
    CPU.CRASH.RESET..... >2076 :     
    CPU.CRASH.SHOWBANK.. >7F00 :     
    CPU.CRASH.SHOWBANK.BANKSTR >7F0A :     
    CPU.CRASH.SHOWREG... >20FC :     
    CPU.CRASH.SHOWREG.CONTENT >2152 :     
    CPU.CRASH.SHOWREG.LABEL >210A :     
    CPU.SCRPAD.BACKUP... >2AFE :     
    CPU.SCRPAD.BACKUP.COPY >2B16 :     
    CPU.SCRPAD.BACKUP.EXIT >2B30 :     
    CPU.SCRPAD.PGIN..... >2B84 :     
    CPU.SCRPAD.PGIN.EXIT >2BA6 :     
    CPU.SCRPAD.PGOUT.... >2B46 :     
    CPU.SCRPAD.PGOUT.AFTER.RTWP >2B7E :     
    CPU.SCRPAD.PGOUT.EXIT >2B82 :     
    CPU.SCRPAD.RESTORE.. >2B32 :     
    CPU.SCRPAD.RESTORE.COPY >2B3A :     
    CPU.SCRPAD.RESTORE.EXIT >2B44 :     
    CPU.SCRPAD.SRC...... >7E00 :     
    CPU.SCRPAD.TGT...... >F000 :     
    CPU.SCRPAD1......... >8300 :     
    CPU.SCRPAD2......... >AD00 :     
    CPYCHK.............. >24FA :     
    CPYM0............... >2506 :     
    CPYM1............... >2512 :     
    CPYM2............... >251A :     
    CPYM2M.............. >24E8 :     
    CPYM2V.............. >2494 :     
    CPYM3............... >252A :     
    CPYM4............... >2534 :     
    CPYMZ............... >2540 :     
    CPYODD.............. >2542 :     
    CPYV2M.............. >24C6 :     
    DEBUG............... >0000 :     
    DEF.CLIP.FNAME...... >3ADD :     
    DEF.CLIP.FNAME.B.... >3AE7 :     
    DEF.CLIP.FNAME.C.... >3AF1 :     
    DEF.DEVICES......... >3AFB :     
    DEF.PRINTER.FNAME... >3AD6 :     
    DEVICE.9938......... >0000 :     
    DEVICE.F18A......... >0001 :     
    DEVICE.FG99.MODE.ADV >0000 :     
    DIALOG.APPEND....... >7A60 :     
    DIALOG.APPEND.VECTOR >7A68 :     
    DIALOG.BASIC........ >7A74 :     
    DIALOG.BASIC.VECTOR. >7A7C :     
    DIALOG.CARTRIDGE.... >7A6A :     
    DIALOG.CARTRIDGE.VECTOR >7A72 :     
    DIALOG.CLIPBOARD.... >7A42 :     
    DIALOG.CLIPBOARD.VECTOR >7A4A :     
    DIALOG.CLIPDEV...... >7A4C :     
    DIALOG.CLIPDEV.VECTOR >7A54 :     
    DIALOG.CONFIG....... >7A56 :     
    DIALOG.CONFIG.VECTOR >7A5E :     
    DIALOG.EDITOR....... >7A88 :     
    DIALOG.EDITOR.VECTOR >7A90 :     
    DIALOG.FILE......... >7A2A :     
    DIALOG.FILE.VECTOR.. >7A32 :     
    DIALOG.HELP......... >79F8 :     
    DIALOG.HELP.NEXT.... >79E4 :     
    DIALOG.HELP.VECTOR.. >7A00 :     
    DIALOG.INSERT....... >7A16 :     
    DIALOG.INSERT.VECTOR >7A1E :     
    DIALOG.LOAD......... >7A02 :     
    DIALOG.LOAD.VECTOR.. >7A0A :     
    DIALOG.MENU......... >7A92 :     
    DIALOG.MENU.VECTOR.. >7AA6 :     
    DIALOG.PRINT........ >7A20 :     
    DIALOG.PRINT.VECTOR. >7A28 :     
    DIALOG.SAVE......... >7A0C :     
    DIALOG.SAVE.VECTOR.. >7A14 :     
    DIALOG.SHORTCUTS.... >7A7E :     
    DIALOG.SHORTCUTS.VECTOR >7A86 :     
    DIALOG.UNSAVED...... >7A34 :     
    DIALOG.UNSAVED.VECTOR >7A40 :     
    DOFILL.............. >228E :     
    DOWN................ >26DA :     
    DSRLNK.............. >2BA8 :     
    DSRLNK.DEVICE_NAME.GET_LENGTH >2C02 :     
    DSRLNK.DSRLWS....... >A400 :     
    DSRLNK.DSRSCAN.CALL_DSR >2C7E :     
    DSRLNK.DSRSCAN.CARDLOOP >2C2E :     
    DSRLNK.DSRSCAN.CARDOFF >2C28 :     
    DSRLNK.DSRSCAN.DSR.8 >2CB0 :     
    DSRLNK.DSRSCAN.DSR.A >2CC0 :     
    DSRLNK.DSRSCAN.GETENTRY >2C58 :     
    DSRLNK.DSRSCAN.NEXTENTRY >2C52 :     
    DSRLNK.DSRSCAN.RETURN_DSR >2CA0 :     
    DSRLNK.DSRSCAN.START >2C1E :     
    DSRLNK.DSTYPE....... >A40A :     
    DSRLNK.ERROR.DEVICENAME_INVALID >2CCC :     
    DSRLNK.ERROR.IO_ERROR >2CCE :     
    DSRLNK.ERROR.NODSR_FOUND >2CC8 :     
    DSRLNK.ERROR.NODSR_FOUND_OFF >2CC6 :     
    DSRLNK.FLGPTR....... >A434 :     
    DSRLNK.INIT......... >2BAC :     
    DSRLNK.NAMSTO....... >A420 :     
    DSRLNK.PERIOD....... >2D18 :     
    DSRLNK.REUSE........ >2CD8 :     
    DSRLNK.REUSE.INIT... >2CDC :     
    DSRLNK.SAV8A........ >A428 :     
    DSRLNK.SAVCRU....... >A42A :     
    DSRLNK.SAVENT....... >A42C :     
    DSRLNK.SAVLEN....... >A432 :     
    DSRLNK.SAVPAB....... >A42E :     
    DSRLNK.SAVVER....... >A430 :     
    EDB.AUTOINSERT...... >A50C :     
    EDB.BLOCK.CLIP...... >7BF4 :     
    EDB.BLOCK.CLIP.VECTOR >7BFC :     
    EDB.BLOCK.COPY...... >7C12 :     
    EDB.BLOCK.COPY.VECTOR >7C1A :     
    EDB.BLOCK.DELETE.... >7C08 :     
    EDB.BLOCK.DELETE.VECTOR >7C10 :     
    EDB.BLOCK.M1........ >A50E :     
    EDB.BLOCK.M2........ >A510 :     
    EDB.BLOCK.MARK...... >7BD6 :     
    EDB.BLOCK.MARK.M1... >7BE0 :     
    EDB.BLOCK.MARK.M1.VECTOR >7BE8 :     
    EDB.BLOCK.MARK.M2... >7BEA :     
    EDB.BLOCK.MARK.M2.VECTOR >7BF2 :     
    EDB.BLOCK.MARK.VECTOR >7BDE :     
    EDB.BLOCK.RESET..... >7BFE :     
    EDB.BLOCK.RESET.VECTOR >7C06 :     
    EDB.BLOCK.VAR....... >A512 :     
    EDB.CLEAR.SAMS...... >7BCC :     
    EDB.CLEAR.SAMS.VECTOR >7BD4 :     
    EDB.DIRTY........... >A506 :     
    EDB.FILENAME........ >A51C :     
    EDB.FILENAME.PTR.... >A514 :     
    EDB.FILETYPE.PTR.... >A516 :     
    EDB.FREE............ >A56C :     
    EDB.HIPAGE.ALLOC.... >3602 :     
    EDB.HIPAGE.ALLOC.CHECK_SETPAGE >360E :     
    EDB.HIPAGE.ALLOC.CRASH >3638 :     
    EDB.HIPAGE.ALLOC.EXIT >3640 :     
    EDB.HIPAGE.ALLOC.SETPAGE >362A :     
    EDB.INDEX.PTR....... >A502 :     
    EDB.INIT............ >31D0 :     
    EDB.INIT.EXIT....... >3214 :     
    EDB.INSMODE......... >A50A :     
    EDB.LINE.DEL........ >7C1C :     
    EDB.LINE.DEL.VECTOR. >7C24 :     
    EDB.LINE.GETLENGTH.. >359A :     
    EDB.LINE.GETLENGTH.EXIT >35D6 :     
    EDB.LINE.GETLENGTH.NULL >35D2 :     
    EDB.LINE.GETLENGTH2. >35DE :     
    EDB.LINE.GETLENGTH2.EXIT >35FC :     
    EDB.LINE.MAPPAGE.... >3550 :     
    EDB.LINE.MAPPAGE.EXIT >3592 :     
    EDB.LINE.MAPPAGE.LOOKUP >356A :     
    EDB.LINE.PACK.FB.... >7024 :     
    EDB.LINE.PACK.FB.CHECK80 >7062 :     
    EDB.LINE.PACK.FB.CHECK_SETPAGE >7072 :     
    EDB.LINE.PACK.FB.COPYLINE >70C8 :     
    EDB.LINE.PACK.FB.COPYLINE.ALIGN16 >70E2 :     
    EDB.LINE.PACK.FB.COPYLINE.BLOCK >70DE :     
    EDB.LINE.PACK.FB.COPYLINE.CHECKBYTE >70D4 :     
    EDB.LINE.PACK.FB.CRASH >706A :     
    EDB.LINE.PACK.FB.EXIT >7110 :     
    EDB.LINE.PACK.FB.PREPARE >7098 :     
    EDB.LINE.PACK.FB.PREPEXIT >70F6 :     
    EDB.LINE.PACK.FB.RTRIM >707C :     
    EDB.LINE.PACK.FB.RTRIM.LOOP >708E :     
    EDB.LINE.PACK.FB.SCAN >7052 :     
    EDB.LINE.PACK.FB.UPDATE_INDEX >70A4 :     
    EDB.LINE.UNPACK.FB.. >711C :     
    EDB.LINE.UNPACK.FB.CLEAR >717A :     
    EDB.LINE.UNPACK.FB.COPY >71AC :     
    EDB.LINE.UNPACK.FB.EXIT >71B8 :     
    EDB.LINE.UNPACK.FB.GETLEN >7172 :     
    EDB.LINE.UNPACK.FB.PREPARE >7188 :     
    EDB.LINES........... >A504 :     
    EDB.NEXT_FREE.PTR... >A508 :     
    EDB.SAMS.HIPAGE..... >A51A :     
    EDB.SAMS.PAGE....... >A518 :     
    EDB.SIZE............ >1000 :     
    EDB.STRUCT.......... >A500 :     
    EDB.TOP............. >C000 :     
    EDB.TOP.PTR......... >A500 :     
    EDKEY.ACTION.BLOCK.COPY >68E6 :     
    EDKEY.ACTION.BLOCK.COPY.EXIT >691C :     
    EDKEY.ACTION.BLOCK.DELETE >6922 :     
    EDKEY.ACTION.BLOCK.DELETE.EXIT >6948 :     
    EDKEY.ACTION.BLOCK.GOTO.M1 >697E :     
    EDKEY.ACTION.BLOCK.GOTO.M1.EXIT >6994 :     
    EDKEY.ACTION.BLOCK.M1 >68CA :     
    EDKEY.ACTION.BLOCK.M2 >68D2 :     
    EDKEY.ACTION.BLOCK.MARK >68C2 :     
    EDKEY.ACTION.BLOCK.MOVE >694C :     
    EDKEY.ACTION.BLOCK.MOVE.EXIT >697A :     
    EDKEY.ACTION.BLOCK.RESET >68DA :     
    EDKEY.ACTION.BOT.... >647E :     
    EDKEY.ACTION.BOT.EXIT >64AA :     
    EDKEY.ACTION.BOT.REFRESH >648E :     
    EDKEY.ACTION.BOTSCR. >64AE :     
    EDKEY.ACTION.BOTSCR.CURSOR >64C2 :     
    EDKEY.ACTION.BOTSCR.EOF >64D4 :     
    EDKEY.ACTION.BOTSCR.EXIT >64F4 :     
    EDKEY.ACTION.CHAR... >67AC :     
    EDKEY.ACTION.CHAR.EXIT >6810 :     
    EDKEY.ACTION.CHAR.INSERT >67CE :     
    EDKEY.ACTION.CHAR.OVERWRITE >67D2 :     
    EDKEY.ACTION.CHAR.OVERWRITE.INCX >67FA :     
    EDKEY.ACTION.CMDB.AM.TOGGLE >6DC0 :     
    EDKEY.ACTION.CMDB.APPEND >6B82 :     
    EDKEY.ACTION.CMDB.APPEND.EXIT >6BEC :     
    EDKEY.ACTION.CMDB.APPEND.FILE >6BC0 :     
    EDKEY.ACTION.CMDB.AUTOINSERT >6DF2 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.EXIT >6E22 :     
    EDKEY.ACTION.CMDB.AUTOINSERT.ONESHOT >6E14 :     
    EDKEY.ACTION.CMDB.CHAR >6A2C :     
    EDKEY.ACTION.CMDB.CHAR.EXIT >6A76 :     
    EDKEY.ACTION.CMDB.CLEAR >6A20 :     
    EDKEY.ACTION.CMDB.CLEAR.EXIT >6A28 :     
    EDKEY.ACTION.CMDB.CLIP >6C14 :     
    EDKEY.ACTION.CMDB.CLIP.1 >6BF6 :     
    EDKEY.ACTION.CMDB.CLIP.2 >6BFC :     
    EDKEY.ACTION.CMDB.CLIP.3 >6C02 :     
    EDKEY.ACTION.CMDB.CLIP.4 >6C08 :     
    EDKEY.ACTION.CMDB.CLIP.5 >6C0E :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE >6C42 :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.EXIT >6C8E :     
    EDKEY.ACTION.CMDB.CLIPDEV.CONFIGURE.MESSAGE >6C6E :     
    EDKEY.ACTION.CMDB.CLOSE.ABOUT >6DD4 :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG >6DEA :     
    EDKEY.ACTION.CMDB.CLOSE.DIALOG.EXIT >6DEE :     
    EDKEY.ACTION.CMDB.END >6A08 :     
    EDKEY.ACTION.CMDB.FASTMODE.TOGGLE >6DB4 :     
    EDKEY.ACTION.CMDB.FILE.NEW >6A96 :     
    EDKEY.ACTION.CMDB.FILE.NEW.EXIT >6AB4 :     
    EDKEY.ACTION.CMDB.HIDE >6A8E :     
    EDKEY.ACTION.CMDB.HOME >69F4 :     
    EDKEY.ACTION.CMDB.INSERT >6B00 :     
    EDKEY.ACTION.CMDB.INSERT.EXIT >6B78 :     
    EDKEY.ACTION.CMDB.INSERT.FILE >6B3E :     
    EDKEY.ACTION.CMDB.LEFT >69CA :     
    EDKEY.ACTION.CMDB.LOAD >6ABC :     
    EDKEY.ACTION.CMDB.LOAD.EXIT >6AFC :     
    EDKEY.ACTION.CMDB.LOAD.FILE >6AF0 :     
    EDKEY.ACTION.CMDB.PRESET >6DCC :     
    EDKEY.ACTION.CMDB.PRINT >6D0E :     
    EDKEY.ACTION.CMDB.PRINT.ALL >6D6A :     
    EDKEY.ACTION.CMDB.PRINT.EXIT >6D80 :     
    EDKEY.ACTION.CMDB.PRINT.FILE >6D78 :     
    EDKEY.ACTION.CMDB.PROCEED >6D8A :     
    EDKEY.ACTION.CMDB.PROCEED.EXIT >6DB0 :     
    EDKEY.ACTION.CMDB.RIGHT >69DC :     
    EDKEY.ACTION.CMDB.SAVE >6C92 :     
    EDKEY.ACTION.CMDB.SAVE.ALL >6CEE :     
    EDKEY.ACTION.CMDB.SAVE.EXIT >6D04 :     
    EDKEY.ACTION.CMDB.SAVE.FILE >6CFC :     
    EDKEY.ACTION.CMDB.SHOW >6A84 :     
    EDKEY.ACTION.CMDB.TOGGLE >6A7E :     
    EDKEY.ACTION.CMDB.TOGGLE.EXIT >6A92 :     
    EDKEY.ACTION.COPYBLOCK_OR_CLIPBOARD >6862 :     
    EDKEY.ACTION.DEL_CHAR >653C :     
    EDKEY.ACTION.DEL_CHAR.EXIT >65B6 :     
    EDKEY.ACTION.DEL_CHAR.LOOP >6594 :     
    EDKEY.ACTION.DEL_CHAR.PREP >657A :     
    EDKEY.ACTION.DEL_CHAR.SANITY1 >6544 :     
    EDKEY.ACTION.DEL_CHAR.SANITY2 >654E :     
    EDKEY.ACTION.DEL_CHAR.SANITY3 >656C :     
    EDKEY.ACTION.DEL_CHAR.SAVE >65AA :     
    EDKEY.ACTION.DEL_EOL >65BA :     
    EDKEY.ACTION.DEL_EOL.EXIT >65EA :     
    EDKEY.ACTION.DEL_EOL_LOOP >65D6 :     
    EDKEY.ACTION.DEL_LINE >65EE :     
    EDKEY.ACTION.DEL_LINE.DOIT >661C :     
    EDKEY.ACTION.DEL_LINE.EXIT >664C :     
    EDKEY.ACTION.DEL_LINE.REFRESH >662C :     
    EDKEY.ACTION.DOWN... >63CA :     
    EDKEY.ACTION.DOWN.EXIT >63CE :     
    EDKEY.ACTION.END.... >6282 :     
    EDKEY.ACTION.ENTER.. >670E :     
    EDKEY.ACTION.ENTER.NEWLINE >6726 :     
    EDKEY.ACTION.ENTER.UPD_COUNTER >673A :     
    EDKEY.ACTION.FB.CLIP.SAVE.1 >69A6 :     
    EDKEY.ACTION.FB.CLIP.SAVE.2 >69AC :     
    EDKEY.ACTION.FB.CLIP.SAVE.3 >69B2 :     
    EDKEY.ACTION.FB.CLIP.SAVE.EXIT >69BE :     
    EDKEY.ACTION.FB.FNAME.DEC.LOAD >6872 :     
    EDKEY.ACTION.FB.FNAME.DOIT >6894 :     
    EDKEY.ACTION.FB.FNAME.DOIT.LOADFILE >68B4 :     
    EDKEY.ACTION.FB.FNAME.EXIT >68BC :     
    EDKEY.ACTION.FB.FNAME.INC.LOAD >6884 :     
    EDKEY.ACTION.FB.TAB.NEXT >6998 :     
    EDKEY.ACTION.FB.TAB.NEXT.EXIT >69A0 :     
    EDKEY.ACTION.GOTO... >651A :     
    EDKEY.ACTION.GOTO.REFRESH >6534 :     
    EDKEY.ACTION.HOME... >627A :     
    EDKEY.ACTION.INS_CHAR >6658 :     
    EDKEY.ACTION.INS_CHAR.APPEND >66EE :     
    EDKEY.ACTION.INS_CHAR.EXIT >66F2 :     
    EDKEY.ACTION.INS_CHAR.LOOP >66CA :     
    EDKEY.ACTION.INS_CHAR.PREP >66B8 :     
    EDKEY.ACTION.INS_CHAR.WS >6650 :     
    EDKEY.ACTION.INS_LINE >66F6 :     
    EDKEY.ACTION.INS_LINE.EXIT >66FE :     
    EDKEY.ACTION.INS_LINE_AFTER >6702 :     
    EDKEY.ACTION.INS_LINE_AFTER.EXIT >670A :     
    EDKEY.ACTION.INS_ONOFF >679A :     
    EDKEY.ACTION.INS_ONOFF.EXIT >67A6 :     
    EDKEY.ACTION.LEFT... >6244 :     
    EDKEY.ACTION.NEWLINE >674E :     
    EDKEY.ACTION.NEWLINE.DOWN >6772 :     
    EDKEY.ACTION.NEWLINE.EXIT >6796 :     
    EDKEY.ACTION.NEWLINE.REST >677A :     
    EDKEY.ACTION.NPAGE.. >640E :     
    EDKEY.ACTION.NPAGE.EXIT >6444 :     
    EDKEY.ACTION.NPAGE.REFRESH >6438 :     
    EDKEY.ACTION.NPAGE.SANITY >6422 :     
    EDKEY.ACTION.NPAGE.TOPLINE >6432 :     
    EDKEY.ACTION.NWORD.. >62F6 :     
    EDKEY.ACTION.NWORD.EXIT >634E :     
    EDKEY.ACTION.NWORD_DONE >6346 :     
    EDKEY.ACTION.NWORD_MS >630E :     
    EDKEY.ACTION.NWORD_SCAN >6310 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR >631A :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_MS >6328 :     
    EDKEY.ACTION.NWORD_SCAN_CHAR_OTHER >6330 :     
    EDKEY.ACTION.PPAGE.. >63D2 :     
    EDKEY.ACTION.PPAGE.EXIT >640A :     
    EDKEY.ACTION.PPAGE.REFRESH >63FE :     
    EDKEY.ACTION.PPAGE.SANITY >63E6 :     
    EDKEY.ACTION.PPAGE.TOPLINE >63F8 :     
    EDKEY.ACTION.PWORD.. >62A4 :     
    EDKEY.ACTION.PWORD.EXIT >62EE :     
    EDKEY.ACTION.PWORD_DONE >62E6 :     
    EDKEY.ACTION.PWORD_SCAN >62B6 :     
    EDKEY.ACTION.PWORD_SCAN_CHAR >62BC :     
    EDKEY.ACTION.QUIT... >6854 :     
    EDKEY.ACTION.RIGHT.. >625E :     
    EDKEY.ACTION.SCROLL.LEFT >6356 :     
    EDKEY.ACTION.SCROLL.RIGHT >638A :     
    EDKEY.ACTION.TOGGLE.RULER >6814 :     
    EDKEY.ACTION.TOGGLE.RULER.EXIT >684A :     
    EDKEY.ACTION.TOGGLE.RULER.FB >6846 :     
    EDKEY.ACTION.TOGGLE.RULER.OFF >6824 :     
    EDKEY.ACTION.TOGGLE.RULER.ON >682E :     
    EDKEY.ACTION.TOP.... >6448 :     
    EDKEY.ACTION.TOP.REFRESH >6458 :     
    EDKEY.ACTION.TOPSCR. >6464 :     
    EDKEY.ACTION.TOPSCR.REFRESH >6474 :     
    EDKEY.ACTION.UP..... >63C2 :     
    EDKEY.ACTION.UP.EXIT >63C6 :     
    EDKEY.ACTIONS.INS.CHAR.EMPTY_LINE >6660 :     
    EDKEY.GOTO.FB.TOPROW >64FA :     
    EDKEY.KEY.CHECK.NEXT >61C6 :     
    EDKEY.KEY.CHECK.NEXT.ENTRY >61E6 :     
    EDKEY.KEY.CHECK.SCOPE >61EC :     
    EDKEY.KEY.PROCESS... >6166 :     
    EDKEY.KEY.PROCESS.ACTION >6206 :     
    EDKEY.KEY.PROCESS.ADDBUFFER >621A :     
    EDKEY.KEY.PROCESS.CRASH >6238 :     
    EDKEY.KEY.PROCESS.EXIT >6240 :     
    EDKEY.KEY.PROCESS.LOADMAP.CMDB >61C2 :     
    EDKEY.KEY.PROCESS.LOADMAP.EDITOR >61BC :     
    EDKEY.KEY.PROCESS.SPECIAL >6186 :     
    EDKEY.KEY.PROCESS.SPECIAL.POSTPROCESS >61B6 :     
    EDKEY.KEYSCAN.HOOK.. >611E :     
    EDKEY.KEYSCAN.HOOK.CLEAR >6146 :     
    EDKEY.KEYSCAN.HOOK.DEBOUNCE >6160 :     
    EDKEY.KEYSCAN.HOOK.EXIT >6162 :     
    ENKNL............... >200E :     
    ENUSR............... >2012 :     
    EOL................. >FFFF :     
    ERROR.DISPLAY....... >7ABA :     
    ERROR.DISPLAY.VECTOR >7AC2 :     
    ERRPANE.EXIT........ >327C :     
    ERRPANE.INIT........ >3256 :     
    F18CHK.............. >2762 :     
    F18CHK_EXIT......... >27A0 :     
    F18CHK_GPU.......... >27AC :     
    F18CHK_NO........... >2796 :     
    F18CHK_YES.......... >279C :     
    F18FW1.............. >27DE :     
    F18FWV.............. >27C4 :     
    F18IDL.............. >2758 :     
    F18LCK.............. >274E :     
    F18RST.............. >27B4 :     
    F18UNL.............. >2738 :     
    FB.CALC_POINTER..... >30A8 :     
    FB.CALC_POINTER.EXIT >30C8 :     
    FB.COLORIZE......... >A312 :     
    FB.COLORLINES....... >7B72 :     
    FB.COLSLINE......... >A30E :     
    FB.COLUMN........... >A30C :     
    FB.CURRENT.......... >A302 :     
    FB.CURSOR.DOWN...... >6EA0 :     
    FB.CURSOR.DOWN.CURSOR >6EEE :     
    FB.CURSOR.DOWN.EXIT. >6F10 :     
    FB.CURSOR.DOWN.MOVE. >6EC0 :     
    FB.CURSOR.DOWN.SET_CURSORX >6EF6 :     
    FB.CURSOR.HOME...... >6F18 :     
    FB.CURSOR.HOME.EXIT. >6F3C :     
    FB.CURSOR.UP........ >6E42 :     
    FB.CURSOR.UP.CURSOR. >6E5A :     
    FB.CURSOR.UP.CURSOR_UP >6E76 :     
    FB.CURSOR.UP.EXIT... >6E98 :     
    FB.CURSOR.UP.SET_CURSORX >6E7E :     
    FB.CURTOGGLE........ >A314 :     
    FB.DIRTY............ >A318 :     
    FB.FREE............. >A3C0 :     
    FB.GET.FIRSTNONBLANK >6FDC :     
    FB.GET.FIRSTNONBLANK.EXIT >7020 :     
    FB.GET.FIRSTNONBLANK.LOOP >6FF8 :     
    FB.GET.FIRSTNONBLANK.MATCH >7008 :     
    FB.GET.FIRSTNONBLANK.NOMATCH >7018 :     
    FB.HSCROLL.......... >7B96 :     
    FB.INIT............. >3028 :     
    FB.INIT.CONT........ >3064 :     
    FB.INIT.EXIT........ >3086 :     
    FB.INSERT.LINE...... >6F42 :     
    FB.INSERT.LINE.EXIT. >6FD4 :     
    FB.INSERT.LINE.INSERT >6F6C :     
    FB.INSERT.LINE.M1... >6F92 :     
    FB.INSERT.LINE.M2... >6FAA :     
    FB.INSERT.LINE.REFRESH >6FC2 :     
    FB.REFRESH.......... >7BBA :     
    FB.RESTORE.......... >7BA8 :     
    FB.ROW.............. >A306 :     
    FB.ROW.DIRTY........ >A30A :     
    FB.ROW.LENGTH....... >A308 :     
    FB.ROW2LINE......... >308E :     
    FB.ROW2LINE.EXIT.... >30A2 :     
    FB.RULER.INIT....... >7B60 :     
    FB.RULER.SIT........ >A320 :     
    FB.RULER.TAT........ >A370 :     
    FB.SCRROWS.......... >A31C :     
    FB.SCRROWS.MAX...... >A31E :     
    FB.SIZE............. >0960 :     
    FB.STATUS.DIRTY..... >A31A :     
    FB.STRUCT........... >A300 :     
    FB.TAB.NEXT......... >7B4E :     
    FB.TOP.............. >D000 :     
    FB.TOP.PTR.......... >A300 :     
    FB.TOPLINE.......... >A304 :     
    FB.UNCRUNCH.AREA.... >D960 :     
    FB.VDPDUMP.......... >7B84 :     
    FB.VWCO............. >A310 :     
    FB.YXSAVE........... >A316 :     
    FH.CALLBACK1........ >A450 :     
    FH.CALLBACK2........ >A452 :     
    FH.CALLBACK3........ >A454 :     
    FH.CALLBACK4........ >A456 :     
    FH.CALLBACK5........ >A458 :     
    FH.COUNTER.......... >A442 :     
    FH.FILETYPE......... >A44C :     
    FH.FNAME.PTR........ >A444 :     
    FH.FOPMODE.......... >A44A :     
    FH.FOPMODE.NONE..... >0000 :     
    FH.FOPMODE.READFILE. >0001 :     
    FH.FOPMODE.WRITEFILE >0002 :     
    FH.FREE............. >A4B6 :     
    FH.IORESULT......... >A43A :     
    FH.KILOBYTES........ >A440 :     
    FH.KILOBYTES.PREV... >A45C :     
    FH.LINE............. >A45E :     
    FH.MEMBUFFER........ >A466 :     
    FH.OFFSETOPCODE..... >A44E :     
    FH.PAB.PTR.......... >A436 :     
    FH.PABSTAT.......... >A438 :     
    FH.RECLEN........... >A43E :     
    FH.RECORDS.......... >A43C :     
    FH.SAMS.HIPAGE...... >A448 :     
    FH.SAMS.PAGE........ >A446 :     
    FH.STRUCT........... >A400 :     
    FH.TEMP1............ >A460 :     
    FH.TEMP2............ >A462 :     
    FH.TEMP3............ >A464 :     
    FH.VPAB............. >0A60 :     
    FH.VRECBUF.......... >0960 :     
    FH.WORKMODE......... >A45A :     
    FIL.EXIT............ >229A :     
    FIL16B.............. >2284 :     
    FILCHK.............. >2256 :     
    FILCHK2............. >2266 :     
    FILCHK3............. >2272 :     
    FILE.CLOSE.......... >2D3E :     
    FILE.DELETE......... >2D76 :     
    FILE.IMAGE.LOAD..... >2D72 :     
    FILE.IMAGE.SAVE..... >2D74 :     
    FILE.OPEN........... >2D1A :     
    FILE.RECORD.READ.... >2D4A :     
    FILE.RECORD.SEEK.... >2D70 :     
    FILE.RECORD.WRITE... >2D56 :     
    FILE.RENAME......... >2D78 :     
    FILE.STATUS......... >2D7A :     
    FILM................ >2244 :     
    FILV................ >229C :     
    FILZZ............... >22C2 :     
    FJ.BOTTOM........... >B000 :     
    FM.BROWSE.FNAME.SUFFIX >79AE :     
    FM.FASTMODE......... >7B32 :     
    FM.FASTMODE.VECTOR.. >7B3A :     
    FM.INSERTFILE....... >7996 :     
    FM.INSERTFILE.EXIT.. >79A8 :     
    FM.LOADFILE......... >7970 :     
    FM.LOADFILE.EXIT.... >7990 :     
    FM.NEWFILE.......... >79D2 :     
    FM.SAVEFILE......... >79C0 :     
    FNOPT1.............. >0000 :     
    FNOPT2.............. >0006 :     
    FNOPT3.............. >000C :     
    FNOPT4.............. >0012 :     
    FNOPT5.............. >8000 :     
    FNOPT6.............. >8006 :     
    FNOPT7.............. >800C :     
    FNOPT8.............. >8012 :     
    FNTADR.............. >1100 :     
    GRAPH1.............. >21FF :     
    GRMRA............... >9802 :     
    GRMRD............... >9800 :     
    GRMWA............... >9C02 :     
    GRMWD............... >9C00 :     
    HCHAR............... >27E0 :     
    HCHAR1.............. >27FA :     
    HCHAR2.............. >2804 :     
    HCHARX.............. >27E6 :     
    HEAP.TOP............ >F000 :     
    HOOKOK.............. >2DD6 :     
    ID.DIALOG.APPEND.... >000E :     
    ID.DIALOG.BASIC..... >006B :     
    ID.DIALOG.BLOCK..... >0066 :     
    ID.DIALOG.CARTRIDGE. >006A :     
    ID.DIALOG.CLIPBOARD. >0067 :     
    ID.DIALOG.CLIPDEV... >0011 :     
    ID.DIALOG.CONFIG.... >006C :     
    ID.DIALOG.EDITOR.... >006D :     
    ID.DIALOG.FILE...... >0069 :     
    ID.DIALOG.HELP...... >0068 :     
    ID.DIALOG.INSERT.... >000D :     
    ID.DIALOG.LOAD...... >000A :     
    ID.DIALOG.MENU...... >0064 :     
    ID.DIALOG.PRINT..... >000F :     
    ID.DIALOG.PRINTBLOCK >0010 :     
    ID.DIALOG.SAVE...... >000B :     
    ID.DIALOG.SAVEBLOCK. >000C :     
    ID.DIALOG.SHORTCUTS. >006E :     
    ID.DIALOG.UNSAVED... >0065 :     
    ID.FILE.APPENDFILE.. >0003 :     
    ID.FILE.CLIPBLOCK... >0006 :     
    ID.FILE.INSERTFILE.. >0002 :     
    ID.FILE.LOADFILE.... >0001 :     
    ID.FILE.PRINTBLOCK.. >0008 :     
    ID.FILE.PRINTFILE... >0007 :     
    ID.FILE.SAVEBLOCK... >0005 :     
    ID.FILE.SAVEFILE.... >0004 :     
    IDX.ENTRY.DELETE.... >3456 :     
    IDX.ENTRY.DELETE.EXIT >34AE :     
    IDX.ENTRY.DELETE.LASTLINE >3482 :     
    IDX.ENTRY.DELETE.REORG >348A :     
    IDX.ENTRY.DELETE.REORG.COMPLEX >3494 :     
    IDX.ENTRY.DELETE.REORG.SIMPLE >34A8 :     
    IDX.ENTRY.INSERT.... >34F8 :     
    IDX.ENTRY.INSERT.EXIT >3544 :     
    IDX.ENTRY.INSERT.REORG >3516 :     
    IDX.ENTRY.INSERT.REORG.COMPLEX >3520 :     
    IDX.ENTRY.INSERT.REORG.SIMPLE >3534 :     
    IDX.ENTRY.UPDATE.... >33A8 :     
    IDX.ENTRY.UPDATE.CLEAR >33E2 :     
    IDX.ENTRY.UPDATE.EXIT >33F2 :     
    IDX.ENTRY.UPDATE.SAVE >33D0 :     
    IDX.FREE............ >A606 :     
    IDX.INIT............ >30D0 :     
    IDX.INIT.EXIT....... >310C :     
    IDX.POINTER.GET..... >33FA :     
    IDX.POINTER.GET.EXIT >343C :     
    IDX.POINTER.GET.PARM >342A :     
    IDX.POINTER.GET.PARM.NULL >3434 :     
    IDX.SAMS.HIPAGE..... >A604 :     
    IDX.SAMS.LOPAGE..... >A602 :     
    IDX.SAMS.PAGE....... >A600 :     
    IDX.SIZE............ >1000 :     
    IDX.STRUCT.......... >A600 :     
    IDX.TOP............. >B000 :     
    INTOFF.............. >26A4 :     
    INTON............... >26AC :     
    IO.ERR.BAD_DEVICE_NAME >0000 :     
    IO.ERR.BAD_OPEN_ATTRIBUTE >0002 :     
    IO.ERR.DEVICE_ERROR. >0006 :     
    IO.ERR.DEVICE_WRITE_PROTTECTED >0001 :     
    IO.ERR.EOF.......... >0005 :     
    IO.ERR.FILE_ERROR... >0007 :     
    IO.ERR.ILLEGAL_OPERATION >0003 :     
    IO.ERR.NO_ERROR_OCCURED >0000 :     
    IO.ERR.OUT_OF_TABLE_BUFFER_SPACE >0004 :     
    IO.OP.CLOSE......... >0001 :     
    IO.OP.DELFILE....... >0007 :     
    IO.OP.LOAD.......... >0005 :     
    IO.OP.OPEN.......... >0000 :     
    IO.OP.READ.......... >0002 :     
    IO.OP.REWIND........ >0004 :     
    IO.OP.SAVE.......... >0006 :     
    IO.OP.SCRATCH....... >0008 :     
    IO.OP.STATUS........ >0009 :     
    IO.OP.WRITE......... >0003 :     
    IO.REL.APP.DIS.FIX.. >0007 :     
    IO.REL.APP.DIS.VAR.. >0017 :     
    IO.REL.APP.INT.FIX.. >000F :     
    IO.REL.APP.INT.VAR.. >001F :     
    IO.REL.INP.DIS.FIX.. >0005 :     
    IO.REL.INP.DIS.VAR.. >0015 :     
    IO.REL.INP.INT.FIX.. >000D :     
    IO.REL.INP.INT.VAR.. >001D :     
    IO.REL.OUT.DIS.FIX.. >0003 :     
    IO.REL.OUT.DIS.VAR.. >0013 :     
    IO.REL.OUT.INT.FIX.. >000B :     
    IO.REL.OUT.INT.VAR.. >001B :     
    IO.REL.UPD.DIS.FIX.. >0001 :     
    IO.REL.UPD.DIS.VAR.. >0011 :     
    IO.REL.UPD.INT.FIX.. >0009 :     
    IO.REL.UPD.INT.VAR.. >0019 :     
    IO.SEQ.APP.DIS.FIX.. >0006 :     
    IO.SEQ.APP.DIS.VAR.. >0016 :     
    IO.SEQ.APP.INT.FIX.. >000E :     
    IO.SEQ.APP.INT.VAR.. >001E :     
    IO.SEQ.INP.DIS.FIX.. >0004 :     
    IO.SEQ.INP.DIS.VAR.. >0014 :     
    IO.SEQ.INP.INT.FIX.. >000C :     
    IO.SEQ.INP.INT.VAR.. >001C :     
    IO.SEQ.OUT.DIS.FIX.. >0002 :     
    IO.SEQ.OUT.DIS.VAR.. >0012 :     
    IO.SEQ.OUT.INT.FIX.. >000A :     
    IO.SEQ.OUT.INT.VAR.. >001A :     
    IO.SEQ.UPD.DIS.FIX.. >0000 :     
    IO.SEQ.UPD.DIS.VAR.. >0010 :     
    IO.SEQ.UPD.INT.FIX.. >0008 :     
    IO.SEQ.UPD.INT.VAR.. >0018 :     
    KBF.KBCLEAR......... >0001 :     
    KBFLAGS............. >A026 :     
    KEY.CTRL.0.......... >00B0 :     
    KEY.CTRL.1.......... >00B1 :     
    KEY.CTRL.2.......... >00B2 :     
    KEY.CTRL.3.......... >00B3 :     
    KEY.CTRL.4.......... >00B4 :     
    KEY.CTRL.5.......... >00B5 :     
    KEY.CTRL.6.......... >00B6 :     
    KEY.CTRL.7.......... >00B7 :     
    KEY.CTRL.8.......... >009E :     
    KEY.CTRL.9.......... >009F :     
    KEY.CTRL.A.......... >0081 :     
    KEY.CTRL.B.......... >0082 :     
    KEY.CTRL.C.......... >0083 :     
    KEY.CTRL.COMMA...... >0080 :     
    KEY.CTRL.D.......... >0084 :     
    KEY.CTRL.DOT........ >009B :     
    KEY.CTRL.E.......... >0085 :     
    KEY.CTRL.F.......... >0086 :     
    KEY.CTRL.G.......... >0087 :     
    KEY.CTRL.H.......... >0088 :     
    KEY.CTRL.I.......... >0089 :     
    KEY.CTRL.J.......... >008A :     
    KEY.CTRL.K.......... >008B :     
    KEY.CTRL.L.......... >008C :     
    KEY.CTRL.M.......... >008D :     
    KEY.CTRL.N.......... >008E :     
    KEY.CTRL.O.......... >008F :     
    KEY.CTRL.P.......... >0090 :     
    KEY.CTRL.PLUS....... >009D :     
    KEY.CTRL.Q.......... >0091 :     
    KEY.CTRL.R.......... >0092 :     
    KEY.CTRL.S.......... >0093 :     
    KEY.CTRL.SLASH...... >00BB :     
    KEY.CTRL.SPACE...... >00F0 :     
    KEY.CTRL.T.......... >0094 :     
    KEY.CTRL.U.......... >0095 :     
    KEY.CTRL.V.......... >0096 :     
    KEY.CTRL.W.......... >0097 :     
    KEY.CTRL.X.......... >0098 :     
    KEY.CTRL.Y.......... >0099 :     
    KEY.CTRL.Z.......... >009A :     
    KEY.ENTER........... >000D :     
    KEY.FCTN.0.......... >00BC :     
    KEY.FCTN.1.......... >0003 :     
    KEY.FCTN.2.......... >0004 :     
    KEY.FCTN.3.......... >0007 :     
    KEY.FCTN.4.......... >0002 :     
    KEY.FCTN.5.......... >000E :     
    KEY.FCTN.6.......... >000C :     
    KEY.FCTN.7.......... >0001 :     
    KEY.FCTN.8.......... >0006 :     
    KEY.FCTN.9.......... >000F :     
    KEY.FCTN.A.......... >0000 :     
    KEY.FCTN.B.......... >00BE :     
    KEY.FCTN.C.......... >0000 :     
    KEY.FCTN.COMMA...... >00B8 :     
    KEY.FCTN.D.......... >0009 :     
    KEY.FCTN.DOT........ >00B9 :     
    KEY.FCTN.E.......... >000B :     
    KEY.FCTN.F.......... >0000 :     
    KEY.FCTN.G.......... >0000 :     
    KEY.FCTN.H.......... >00BF :     
    KEY.FCTN.I.......... >0000 :     
    KEY.FCTN.J.......... >00C0 :     
    KEY.FCTN.K.......... >00C1 :     
    KEY.FCTN.L.......... >00C2 :     
    KEY.FCTN.M.......... >00C3 :     
    KEY.FCTN.N.......... >00C4 :     
    KEY.FCTN.O.......... >0000 :     
    KEY.FCTN.P.......... >0000 :     
    KEY.FCTN.PLUS....... >0005 :     
    KEY.FCTN.Q.......... >00C5 :     
    KEY.FCTN.R.......... >0000 :     
    KEY.FCTN.S.......... >0008 :     
    KEY.FCTN.T.......... >0000 :     
    KEY.FCTN.U.......... >0000 :     
    KEY.FCTN.V.......... >007F :     
    KEY.FCTN.W.......... >007E :     
    KEY.FCTN.X.......... >000A :     
    KEY.FCTN.Y.......... >00C6 :     
    KEY.FCTN.Z.......... >0000 :     
    KEY.LC.B............ >00A2 :     
    KEY.LC.E............ >00A5 :     
    KEY.LC.F............ >00A6 :     
    KEY.LC.H............ >00A8 :     
    KEY.LC.N............ >006E :     
    KEY.LC.O............ >006F :     
    KEY.LC.P............ >0070 :     
    KEY.LC.Q............ >0071 :     
    KEY.LC.S............ >0073 :     
    KEY.NUM.0........... >0030 :     
    KEY.NUM.1........... >0031 :     
    KEY.NUM.2........... >0032 :     
    KEY.NUM.3........... >0033 :     
    KEY.NUM.4........... >0034 :     
    KEY.NUM.5........... >0035 :     
    KEY.NUM.6........... >0036 :     
    KEY.NUM.7........... >0037 :     
    KEY.NUM.8........... >0038 :     
    KEY.NUM.9........... >0039 :     
    KEY.SPACE........... >0020 :     
    KEY.UC.A............ >0041 :     
    KEY.UC.B............ >0042 :     
    KEY.UC.C............ >0043 :     
    KEY.UC.E............ >0045 :     
    KEY.UC.F............ >0046 :     
    KEY.UC.H............ >0048 :     
    KEY.UC.I............ >0049 :     
    KEY.UC.M............ >004D :     
    KEY.UC.N............ >004E :     
    KEY.UC.O............ >004F :     
    KEY.UC.P............ >0050 :     
    KEY.UC.Q............ >0051 :     
    KEY.UC.R............ >0052 :     
    KEY.UC.S............ >0053 :     
    KEYCODE1............ >A028 :     
    KEYCODE2............ >A02A :     
    KEYMAP_ACTIONS.CMDB. >7DF0 :     
    KEYMAP_ACTIONS.EDITOR >7D1E :     
    KICKSTART.CODE1..... >6040 :     
    KICKSTART.CODE2..... >6046 :     
    KICKSTART.RESUME.... >6038 :     
    KSCAN............... >000E :     
    KTHREAD............. >2E70 :     
    KTHREAD_EXIT........ >2E82 :     
    KTHREAD_KB.......... >2E7E :     
    LDFNT............... >236E :     
    LDFNT1.............. >2386 :     
    LDFNT2.............. >23C0 :     
    LDFNT3.............. >23D4 :     
    LDFNT4.............. >23E8 :     
    LOADMC.............. >2228 :     
    MAGIC.CHECK......... >7D0C :     
    MAGIC.CLEAR......... >7CFA :     
    MAGIC.SET........... >7CE8 :     
    MAGIC.STR.W1........ >A000 :     
    MAGIC.STR.W2........ >A002 :     
    MAGIC.STR.W3........ >A004 :     
    MAIN................ >6046 :     
    MAIN.CONTINUE....... >6052 :     
    MAIN.STEVIE......... >604A :     
    MCCODE.............. >221E :     
    MCLOOP.............. >8320 :     
    MCSPRD.............. >8322 :     
    MEM.SAMS.SET.BOOT... >7CC4 :     
    MEM.SAMS.SET.LEGACY. >7CB2 :     
    MEM.SAMS.SET.STEVIE. >7CD6 :     
    MEM.SAMS.SETUP.STEVIE >6100 :     
    MEM.SAMS.SETUP.STEVIE.EXIT >611A :     
    MKHEX............... >2926 :     
    MKHEX1.............. >293E :     
    MKHEX1.DIGIT09...... >2954 :     
    MKHEX1.DIGITAF...... >294A :     
    MKHEX2.............. >295A :     
    MKHEX3.............. >299C :     
    MKHOO1.............. >2E8E :     
    MKHOOK.............. >2E86 :     
    MKNUM............... >29B4 :     
    MKNUM1.............. >29C6 :     
    MKNUM2.............. >29E2 :     
    MKNUM3.............. >29E6 :     
    MKNUM4.............. >29F0 :     
    MKNUM5.............. >29F8 :     
    MKSLO1.............. >2EB4 :     
    MKSLOT.............. >2E9A :     
    MMPLA1.............. >2892 :     
    MMPLA2.............. >2898 :     
    MMPLAY.............. >288A :     
    MUTE................ >2808 :     
    MUTE2............... >280C :     
    MUTTAB.............. >2822 :     
    NOFONT.............. >FFFF :     
    NOREP............... >0000 :     
    NOSPRITE............ >3692 :     
    NUM1................ >3030 :     
    NUM2................ >3020 :     
    OUTPARM1............ >A016 :     
    OUTPARM2............ >A018 :     
    OUTPARM3............ >A01A :     
    OUTPARM4............ >A01C :     
    OUTPARM5............ >A01E :     
    OUTPARM6............ >A020 :     
    OUTPARM7............ >A022 :     
    OUTPARM8............ >A024 :     
    PALON............... >201C :     
    PANE.ACTION.COLORSCHEME.CHECKCMDB >73D4 :     
    PANE.ACTION.COLORSCHEME.CMDBPANE >7404 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR >74C8 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.CMDB >74D6 :     
    PANE.ACTION.COLORSCHEME.CURSORCOLOR.FB >74DE :     
    PANE.ACTION.COLORSCHEME.CYCLE >72AC :     
    PANE.ACTION.COLORSCHEME.CYCLE.EXIT >7304 :     
    PANE.ACTION.COLORSCHEME.ERRPANE >746A :     
    PANE.ACTION.COLORSCHEME.FBDUMP >73E0 :     
    PANE.ACTION.COLORSCHEME.FBDUMP.NORULER >73CC :     
    PANE.ACTION.COLORSCHEME.LOAD >730A :     
    PANE.ACTION.COLORSCHEME.LOAD.EXIT >74EC :     
    PANE.ACTION.COLORSCHEME.RULER >74AA :     
    PANE.ACTION.COLORSCHEME.STATLINE >747C :     
    PANE.ACTION.COLORSCHEME.STATLINES >750A :     
    PANE.ACTION.COLORSCHEME.STATLINES.EXIT >751E :     
    PANE.ACTION.COLORSCHEME.SWITCH >72C6 :     
    PANE.BOTLINE........ >7738 :     
    PANE.BOTLINE.EXIT... >78A4 :     
    PANE.BOTLINE.SHOW_KEYS >7758 :     
    PANE.BOTLINE.SHOW_LINE.1DIGIT >7860 :     
    PANE.BOTLINE.SHOW_LINE.2DIGITS >7858 :     
    PANE.BOTLINE.SHOW_LINE.3DIGITS >784E :     
    PANE.BOTLINE.SHOW_LINE.REST >7864 :     
    PANE.BOTLINE.SHOW_LINECOL >77AA :     
    PANE.BOTLINE.SHOW_LINECOL.COLSTRING >786E :     
    PANE.BOTLINE.SHOW_LINECOL.LINELEN >7812 :     
    PANE.BOTLINE.SHOW_LINES_IN_BUFFER >7892 :     
    PANE.BOTLINE.SHOW_MODE >7782 :     
    PANE.BOTLINE.SHOW_MODE.INSERT >7792 :     
    PANE.BOTLINE.SHOW_MODE.INSERT.NOAUTO >77A2 :     
    PANE.BOTROW......... >001D :     
    PANE.CMDB.DRAW...... >7AE2 :     
    PANE.CMDB.DRAW.VECTOR >7AEA :     
    PANE.CMDB.HIDE...... >7AD8 :     
    PANE.CMDB.HIDE.VECTOR >7AE0 :     
    PANE.CMDB.SHOW...... >7ACE :     
    PANE.CMDB.SHOW.VECTOR >7AD6 :     
    PANE.CURSOR.BLINK... >7542 :     
    PANE.CURSOR.BLINK.EXIT >755E :     
    PANE.CURSOR.HIDE.... >7524 :     
    PANE.CURSOR.HIDE.EXIT >753E :     
    PANE.ERRLINE.DRAWCOLOR >766E :     
    PANE.ERRLINE.DRAWCOLOR.EXIT >7696 :     
    PANE.ERRLINE.DRAWCOLOR.LOOP >7688 :     
    PANE.ERRLINE.HIDE... >7702 :     
    PANE.ERRLINE.HIDE.EXIT >7732 :     
    PANE.ERRLINE.HIDE.FBCOLOR >771A :     
    PANE.ERRLINE.SHOW... >76A0 :     
    PANE.ERRLINE.SHOW.EXIT >76FA :     
    PANE.FOCUS.CMDB..... >0001 :     
    PANE.FOCUS.FB....... >0000 :     
    PANE.SHOW_HINTX..... >7AC4 :     
    PANE.SHOW_HINTX.VECTOR >7ACC :     
    PANE.TOPLINE........ >75AC :     
    PANE.TOPLINE.EXIT... >7664 :     
    PANE.TOPLINE.FILE... >75BA :     
    PANE.TOPLINE.NOCHANGE >75FA :     
    PANE.TOPLINE.ONESHOT.CLEARMSG >3648 :     
    PANE.TOPLINE.ONESHOT.CLEARMSG.EXIT >3660 :     
    PANE.TOPLINE.SHOWMARKERS >7602 :     
    PANE.TOPLINE.SHOW_DIRTY >75EA :     
    PANE.VDPDUMP........ >78AE :     
    PANE.VDPDUMP.ALPHA_LOCK >78BC :     
    PANE.VDPDUMP.ALPHA_LOCK.DOWN >78CC :     
    PANE.VDPDUMP.CMDB.CHECK >78D4 :     
    PANE.VDPDUMP.CMDB.DRAW >78DA :     
    PANE.VDPDUMP.CMDB.DRAW.COLORSCHEME >78E6 :     
    PANE.VDPDUMP.CMDB.DRAW.CONTENT >7918 :     
    PANE.VDPDUMP.DUMP... >792E :     
    PANE.VDPDUMP.DUMPED. >793C :     
    PANE.VDPDUMP.EXIT... >7966 :     
    PANE.VDPDUMP.STATLINES >7944 :     
    PARM1............... >A006 :     
    PARM2............... >A008 :     
    PARM3............... >A00A :     
    PARM4............... >A00C :     
    PARM5............... >A00E :     
    PARM6............... >A010 :     
    PARM7............... >A012 :     
    PARM8............... >A014 :     
    PCTADR.............. >0FC0 :     
    POPR0............... >223E :     
    POPR1............... >223C :     
    POPR2............... >223A :     
    POPR3............... >2238 :     
    POPRT............... >2240 :     
    PREFIX.............. >29A8 :     
    PUTAT............... >2450 :     
    PUTHEX.............. >29AA :     
    PUTLST.............. >2458 :     
    PUTLST.EXIT......... >248E :     
    PUTLST.LOOP......... >2460 :     
    PUTNUM.............. >2A32 :     
    PUTSTR.............. >242C :     
    PUTV01.............. >2354 :     
    PUTVR............... >2340 :     
    PUTVRX.............. >2342 :     
    R0.................. >0000 :     
    R0HB................ >8300 :     
    R0LB................ >8301 :     
    R1.................. >0001 :     
    R10................. >000A :     
    R10HB............... >8314 :     
    R10LB............... >8315 :     
    R11................. >000B :     
    R11HB............... >8316 :     
    R11LB............... >8317 :     
    R12................. >000C :     
    R12HB............... >8318 :     
    R12LB............... >8319 :     
    R13................. >000D :     
    R13HB............... >831A :     
    R13LB............... >831B :     
    R14................. >000E :     
    R14HB............... >831C :     
    R14LB............... >831D :     
    R15................. >000F :     
    R15HB............... >831E :     
    R15LB............... >831F :     
    R1HB................ >8302 :     
    R1LB................ >8303 :     
    R2.................. >0002 :     
    R2HB................ >8304 :     
    R2LB................ >8305 :     
    R3.................. >0003 :     
    R3HB................ >8306 :     
    R3LB................ >8307 :     
    R4.................. >0004 :     
    R4HB................ >8308 :     
    R4LB................ >8309 :     
    R5.................. >0005 :     
    R5HB................ >830A :     
    R5LB................ >830B :     
    R6.................. >0006 :     
    R6HB................ >830C :     
    R6LB................ >830D :     
    R7.................. >0007 :     
    R7HB................ >830E :     
    R7LB................ >830F :     
    R8.................. >0008 :     
    R8HB................ >8310 :     
    R8LB................ >8311 :     
    R9.................. >0009 :     
    R9HB................ >8312 :     
    R9LB................ >8313 :     
    RAMBUF.............. >A100 :     
    RAMSAT.............. >A056 :     
    RKSCAN.............. >28C4 :     
    RKSCAN.EXIT......... >291A :     
    ROM.FARJUMP......... >2F98 :     
    ROM.FARJUMP.BANKSWITCH.CALL >2FE8 :     
    ROM.FARJUMP.BANKSWITCH.FAILED1 >2FE0 :     
    ROM.FARJUMP.BANKSWITCH.FAILED2 >3016 :     
    ROM.FARJUMP.BANKSWITCH.SRC.ADVFG99 >300C :     
    ROM.FARJUMP.BANKSWITCH.SRC.ROM8K >3008 :     
    ROM.FARJUMP.BANKSWITCH.TARGET.ROM8K >2FC4 :     
    ROM.FARJUMP.BANKSWITCH.TGT.ADVFG99 >2FC8 :     
    ROM.FARJUMP.BANKSWITCH.TGT.DONE >2FD0 :     
    ROM.FARJUMP.EXIT.... >301E :     
    ROM.FARJUMP.RETURN.. >2FEA :     
    ROM.PROGRAM1........ >600C :     
    ROM.PROGRAM2........ >601E :     
    ROM0_KSCAN_ON....... >0001 :     
    ROM0_KSCAN_OUT...... >A028 :     
    ROMSAT.............. >3686 :     
    RSSLOT.............. >2EC6 :     
    RUNLI1.............. >2EDE :     
    RUNLI2.............. >2EEA :     
    RUNLI3.............. >2EEE :     
    RUNLI3A............. >2EF6 :     
    RUNLI4.............. >2F00 :     
    RUNLI5.............. >2F0A :     
    RUNLI6.............. >2F18 :     
    RUNLI7.............. >2F26 :     
    RUNLI9.............. >2F2A :     
    RUNLIA.............. >2F4C :     
    RUNLIB.............. >2EDA :     
    RUNLIC.............. >2F70 :     
    RUNLID.............. >2F86 :     
    RUNLIE.............. >2F90 :     
    S16X16.............. >26CC :     
    S8X8................ >26C4 :     
    SAMS.LAYOUT......... >25FC :     
    SAMS.LAYOUT.COPY.... >264C :     
    SAMS.LAYOUT.COPY.DATA >2684 :     
    SAMS.LAYOUT.COPY.EXIT >2678 :     
    SAMS.LAYOUT.COPY.LOOP >266A :     
    SAMS.LAYOUT.EXIT.... >2634 :     
    SAMS.LAYOUT.STANDARD >263C :     
    SAMS.MAPPING.OFF.... >25EE :     
    SAMS.MAPPING.OFF.EXIT >25F8 :     
    SAMS.MAPPING.ON..... >25E0 :     
    SAMS.MAPPING.ON.EXIT >25EA :     
    SAMS.PAGE.GET....... >254A :     
    SAMS.PAGE.GET.EXIT.. >2578 :     
    SAMS.PAGE.SET....... >2580 :     
    SAMS.PAGE.SET.EXIT.. >25D4 :     
    SAMS.PAGE.SET.SWITCH_PAGE >25C4 :     
    SCROFF.............. >2694 :     
    SCRON............... >269C :     
    SCRPAD.83C6......... >2920 :     
    SCRPAD.83FA......... >2922 :     
    SCRPAD.83FE......... >2924 :     
    SDEXI1.............. >28BC :     
    SDEXI2.............. >28BE :     
    SDEXIT.............. >28AA :     
    SDOPT1.............. >0007 :     
    SDOPT2.............. >0005 :     
    SDOPT3.............. >0006 :     
    SDOPT4.............. >0004 :     
    SDPLA1.............. >2844 :     
    SDPLA2.............. >284E :     
    SDPLA3.............. >2850 :     
    SDPLAY.............. >283C :     
    SDPREP.............. >2826 :     
    SETX................ >26EA :     
    SKIP_CPU_CRC16...... >0001 :     
    SKIP_CPU_RLE_COMPRESS >0001 :     
    SKIP_CPU_RLE_DECOMPRESS >0001 :     
    SKIP_GROM_CPU_COPY.. >0001 :     
    SKIP_GROM_VRAM_COPY. >0001 :     
    SKIP_RANDOM_GENERATOR >0001 :     
    SKIP_ROM_BANKSWITCH. >0001 :     
    SKIP_SAMS_LAYOUT.... >0001 :     
    SKIP_SPEECH_DETECTION >0001 :     
    SKIP_SPEECH_PLAYER.. >0001 :     
    SKIP_VDP_BITMAP..... >0001 :     
    SKIP_VDP_BOXES...... >0001 :     
    SKIP_VDP_PX2YX_CALC. >0001 :     
    SKIP_VDP_RLE_DECOMPRESS >0001 :     
    SKIP_VDP_VCHAR...... >0001 :     
    SKIP_VDP_VIEWPORT... >0001 :     
    SKIP_VIRTUAL_KEYBOARD >0001 :     
    SLOTOK.............. >2E52 :     
    SMAG1X.............. >26B4 :     
    SMAG2X.............. >26BC :     
    SOUND............... >8400 :     
    SP2.STKTOP.......... >A900 :     
    SPCHRD.............. >9000 :     
    SPCHWT.............. >9400 :     
    SPCODE.............. >2224 :     
    SPFBCK.............. >0004 :     
    SPFCLR.............. >00F4 :     
    SPFONT.............. >000C :     
    SPKOFF.............. >FF00 :     
    SPKON............... >6000 :     
    SPRPDT.............. >2800 :     
    SPRSAT.............. >2180 :     
    SPVMOD.............. >3668 :     
    STACK............... >0009 :     
    STARTUP_KEEP_VDPMEMORY >0001 :     
    STEVIE.80X30........ >3668 :     
    STRING.GETLENC...... >2AA8 :     
    STRING.GETLENC.EXIT. >2AF4 :     
    STRING.GETLENC.LOOP. >2AD6 :     
    STRING.GETLENC.PANIC >2AEC :     
    STRING.GETLENC.PUTLENGTH >2AE4 :     
    STRING.LTRIM........ >2A3C :     
    STRING.LTRIM.EXIT... >2A9C :     
    STRING.LTRIM.MOVE... >2A82 :     
    STRING.LTRIM.PANIC.. >2A94 :     
    STRING.LTRIM.SCAN... >2A76 :     
    TALKOF.............. >00FF :     
    TALKON.............. >0060 :     
    TASK.ONESHOT........ >72A0 :     
    TASK.ONESHOT.EXIT... >72A8 :     
    TASK.VDP.COPY.SAT... >71C2 :     
    TASK.VDP.COPY.SAT.CMDB >71EA :     
    TASK.VDP.COPY.SAT.EXIT >7258 :     
    TASK.VDP.COPY.SAT.FB >71FA :     
    TASK.VDP.COPY.SAT.FB.NORULER >720E :     
    TASK.VDP.COPY.SAT.HIDE.INDICATORS >7244 :     
    TASK.VDP.COPY.SAT.WRITE >7212 :     
    TASK.VDP.COPY.SAT.WRITE2 >724E :     
    TASK.VDP.CURSOR..... >7264 :     
    TASK.VDP.CURSOR.COPY.SAT >7280 :     
    TASK.VDP.CURSOR.EXIT >728A :     
    TASK.VDP.CURSOR.VISIBLE >727A :     
    TASK.VDP.PANES...... >7292 :     
    TASK.VDP.PANES.EXIT. >729A :     
    TIB.AUTOMODE........ >A0C0 :     
    TIB.LINES........... >A0D2 :     
    TIB.LNT.BOT.PTR..... >A0C8 :     
    TIB.LNT.TOP.PTR..... >A0C6 :     
    TIB.SAMSTAB.PTR..... >A0EA :     
    TIB.SCRPAD.PTR...... >A0C4 :     
    TIB.SESSION......... >A0B4 :     
    TIB.STAB.PTR........ >A0C2 :     
    TIB.STATUS1......... >A0B6 :     
    TIB.STATUS2......... >A0B8 :     
    TIB.STATUS3......... >A0BA :     
    TIB.STATUS4......... >A0BC :     
    TIB.STATUS5......... >A0BE :     
    TIB.STRS.BOT.PTR.... >A0D0 :     
    TIB.STRS.TOP.PTR.... >A0CE :     
    TIB.SYMT.BOT.PTR.... >A0CC :     
    TIB.SYMT.TOP.PTR.... >A0CA :     
    TIB.VAR1............ >A0EC :     
    TIB.VAR10........... >A0FE :     
    TIB.VAR2............ >A0EE :     
    TIB.VAR3............ >A0F0 :     
    TIB.VAR4............ >A0F2 :     
    TIB.VAR5............ >A0F4 :     
    TIB.VAR6............ >A0F6 :     
    TIB.VAR7............ >A0F8 :     
    TIB.VAR8............ >A0FA :     
    TIB.VAR9............ >A0FC :     
    TIBASIC............. >7C70 :     
    TIBASIC.32X24....... >3672 :     
    TIBASIC.32X30....... >367C :     
    TIBASIC.AM.TOGGLE... >7B28 :     
    TIBASIC.AM.TOGGLE.VECTOR >7B30 :     
    TIBASIC.EXIT........ >7C92 :     
    TIBASIC.HEARTS.TAT.. >7B1E :     
    TIBASIC.HEARTS.TAT.VECTOR >7B26 :     
    TIBASIC.UNCRUNCH.... >7C98 :     
    TIBASIC.UNCRUNCH.EXIT >7CAE :     
    TIBASIC1............ >7C4A :     
    TIBASIC2............ >7C52 :     
    TIBASIC3............ >7C5A :     
    TIBASIC4............ >7C62 :     
    TIBASIC5............ >7C6A :     
    TIMERS.............. >A064 :     
    TMDAT............... >2E6E :     
    TMGR................ >2DD2 :     
    TMGR1............... >2DD6 :     
    TMGR10.............. >2E56 :     
    TMGR11.............. >2E64 :     
    TMGR12.............. >2E68 :     
    TMGR1A.............. >2DE4 :     
    TMGR2............... >2DEA :     
    TMGR3............... >2DFA :     
    TMGR4............... >2E0C :     
    TMGR5............... >2E22 :     
    TMGR6............... >2E26 :     
    TMGR7............... >2E2A :     
    TMGR8............... >2E2C :     
    TMGR9............... >2E34 :     
    TMP0................ >0004 :     
    TMP006.............. >23F0 :     
    TMP007.............. >24E6 :     
    TMP008.............. >24C4 :     
    TMP011.............. >2548 :     
    TMP0HB.............. >8308 :     
    TMP0LB.............. >8309 :     
    TMP1................ >0005 :     
    TMP1HB.............. >830A :     
    TMP1LB.............. >830B :     
    TMP2................ >0006 :     
    TMP2HB.............. >830C :     
    TMP2LB.............. >830D :     
    TMP3................ >0007 :     
    TMP3HB.............. >830E :     
    TMP3LB.............. >830F :     
    TMP4................ >0008 :     
    TMP4HB.............. >8310 :     
    TMP4LB.............. >8311 :     
    TRIMNUM............. >2A0C :     
    TRIMNUM_FILL........ >2A2A :     
    TRIMNUM_SCAN........ >2A18 :     
    TRIMNUM_SETLEN...... >2A24 :     
    TRMPVECTOR.......... >A032 :     
    TV.1TIMEONLY........ >00FE :     
    TV.BUSYCOLOR........ >A21C :     
    TV.CLIP.FNAME....... >DE50 :     
    TV.CMDB.HCOLOR...... >A220 :     
    TV.COLOR............ >A218 :     
    TV.COLORIZE.RESET... >9900 :     
    TV.COLORSCHEME...... >A212 :     
    TV.COLORSCHEME.ENTRIES >000A :     
    TV.COLORSCHEME.TABLE >3694 :     
    TV.CURCOLOR......... >A216 :     
    TV.CURSHAPE......... >A214 :     
    TV.ERROR.MSG........ >A230 :     
    TV.ERROR.ROWS....... >A22A :     
    TV.ERROR.VISIBLE.... >A228 :     
    TV.FJ.STACKPNT...... >A226 :     
    TV.FREE............. >A2D0 :     
    TV.INIT............. >3286 :     
    TV.INIT.EXIT........ >32C2 :     
    TV.MARKCOLOR........ >A21A :     
    TV.PAD.STRING....... >3330 :     
    TV.PAD.STRING.EXIT.. >339C :     
    TV.PAD.STRING.LOOP.. >3386 :     
    TV.PAD.STRING.PANIC. >3394 :     
    TV.PANE.FOCUS....... >A222 :     
    TV.PRINTER.FNAME.... >DE00 :     
    TV.QUIT............. >32CC :     
    TV.RESET............ >32DA :     
    TV.RESET.EXIT....... >3300 :     
    TV.RULER.VISIBLE.... >A210 :     
    TV.RULERCOLOR....... >A21E :     
    TV.SAMS.2000........ >A200 :     
    TV.SAMS.3000........ >A202 :     
    TV.SAMS.A000........ >A204 :     
    TV.SAMS.B000........ >A206 :     
    TV.SAMS.C000........ >A208 :     
    TV.SAMS.D000........ >A20A :     
    TV.SAMS.E000........ >A20C :     
    TV.SAMS.F000........ >A20E :     
    TV.SP2.CONF......... >A22C :     
    TV.SP2.STACK........ >A22E :     
    TV.TABS.TABLE....... >36E4 :     
    TV.TASK.ONESHOT..... >A224 :     
    TV.TOP.............. >A200 :     
    TV.UNPACK.UINT16.... >3304 :     
    TV.UNPACK.UINT16.EXIT >332A :     
    TX4024.............. >2209 :     
    TX8024.............. >2213 :     
    TXT.ALPHA.DOWN...... >39F0 :     
    TXT.AUTOINS.OFF..... >3872 :     
    TXT.AUTOINS.ON...... >3863 :     
    TXT.AUTOINSERT...... >3716 :     
    TXT.BLOCK.CLIP...... >3795 :     
    TXT.BLOCK.COPY...... >3759 :     
    TXT.BLOCK.DEL....... >3746 :     
    TXT.BLOCK.INSIDE.... >3A98 :     
    TXT.BLOCK.MOVE...... >376B :     
    TXT.BLOCK.PRINT..... >37AE :     
    TXT.BLOCK.SAVE...... >377C :     
    TXT.BOTTOM.......... >3706 :     
    TXT.CLEARMEM........ >37C1 :     
    TXT.CMDB.PROMPT..... >3AC6 :     
    TXT.COLORSCHEME..... >3AC8 :     
    TXT.DELIM........... >3704 :     
    TXT.DONE.APPEND..... >37F5 :     
    TXT.DONE.CLIPBOARD.. >3845 :     
    TXT.DONE.CLIPDEV.... >3855 :     
    TXT.DONE.COPY....... >3815 :     
    TXT.DONE.DELETE..... >3834 :     
    TXT.DONE.INSERT..... >37E4 :     
    TXT.DONE.LOAD....... >37D5 :     
    TXT.DONE.PRINT...... >3824 :     
    TXT.DONE.SAVE....... >3806 :     
    TXT.FASTMODE........ >3882 :     
    TXT.FILETYPE.DV80... >3901 :     
    TXT.FILETYPE.NONE... >3A01 :     
    TXT.INSERT.......... >3711 :     
    TXT.IO.NOFILE....... >3A53 :     
    TXT.IOERR.LOAD...... >3A0C :     
    TXT.IOERR.PRINT..... >3A37 :     
    TXT.IOERR.SAVE...... >3A22 :     
    TXT.KB.............. >38A7 :     
    TXT.KEYMARKER....... >39F6 :     
    TXT.KEYS.BASIC1..... >3972 :     
    TXT.KEYS.BLOCK...... >393B :     
    TXT.KEYS.DEFAULT.... >390E :     
    TXT.KEYS.DEFAULTB... >391F :     
    TXT.LINES........... >38AA :     
    TXT.LOADING......... >371D :     
    TXT.M1.............. >3906 :     
    TXT.M2.............. >390A :     
    TXT.MEMFULL.LOAD.... >3A6A :     
    TXT.NEWFILE......... >38B0 :     
    TXT.OVRWRITE........ >370C :     
    TXT.PRINTING........ >3733 :     
    TXT.RULER........... >399F :     
    TXT.SAVING.......... >3728 :     
    TXT.STAR............ >371B :     
    TXT.TIB1............ >38BB :     
    TXT.TIB2............ >38C9 :     
    TXT.TIB3............ >38D7 :     
    TXT.TIB4............ >38E5 :     
    TXT.TIB5............ >38F3 :     
    TXT.UNCRUNCHING..... >388B :     
    TXT.VERTLINE........ >39F4 :     
    TXT.WS1............. >39F8 :     
    TXT.WS2............. >39FA :     
    TXT.WS3............. >39FD :     
    TXT.WS4............. >3A01 :     
    TXT.WS5............. >3A06 :     
    UNPACKED.STRING..... >A02C :     
    UP.................. >26E2 :     
    VDP.CMDB.TOPROW.TAT. >1FD0 :     
    VDP.FB.TOPROW.SIT... >0050 :     
    VDP.FB.TOPROW.TAT... >1850 :     
    VDP.PATTERNS.DUMP... >7C38 :     
    VDP.SIT.BASE........ >0000 :     
    VDP.SIT.SIZE........ >0960 :     
    VDP.TAT.BASE........ >1800 :     
    VDPA................ >8C02 :     
    VDPLA1.............. >286E :     
    VDPLA2.............. >2874 :     
    VDPLA3.............. >2884 :     
    VDPLAY.............. >2856 :     
    VDPR................ >8800 :     
    VDPR0............... >831C :     
    VDPR01.............. >000E :     
    VDPR1............... >831D :     
    VDPRW............... >000F :     
    VDPS................ >8802 :     
    VDPW................ >8C00 :     
    VDRA................ >22C8 :     
    VDWA................ >22C4 :     
    VEC.1............... >7FC0 :     
    VEC.10.............. >7FD2 :     
    VEC.11.............. >7FD4 :     
    VEC.12.............. >7FD6 :     
    VEC.13.............. >7FD8 :     
    VEC.14.............. >7FDA :     
    VEC.15.............. >7FDC :     
    VEC.16.............. >7FDE :     
    VEC.17.............. >7FE0 :     
    VEC.18.............. >7FE2 :     
    VEC.19.............. >7FE4 :     
    VEC.2............... >7FC2 :     
    VEC.20.............. >7FE6 :     
    VEC.21.............. >7FE8 :     
    VEC.22.............. >7FEA :     
    VEC.23.............. >7FEC :     
    VEC.24.............. >7FEE :     
    VEC.25.............. >7FF0 :     
    VEC.26.............. >7FF2 :     
    VEC.27.............. >7FF4 :     
    VEC.28.............. >7FF6 :     
    VEC.29.............. >7FF8 :     
    VEC.3............... >7FC4 :     
    VEC.30.............. >7FFA :     
    VEC.31.............. >7FFC :     
    VEC.32.............. >7FFE :     
    VEC.4............... >7FC6 :     
    VEC.5............... >7FC8 :     
    VEC.6............... >7FCA :     
    VEC.7............... >7FCC :     
    VEC.8............... >7FCE :     
    VEC.9............... >7FD0 :     
    VGETB............... >22F0 :     
    VIDTA1.............. >2322 :     
    VIDTAB.............. >2306 :     
    VPUTB............... >22D6 :     
    WAUX1............... >833C :     
    WAUX2............... >833E :     
    WAUX3............... >8340 :     
    WBASE............... >8328 :     
    WBIT0............... >2020 :     
    WBIT1............... >201E :     
    WBIT10.............. >200C :     
    WBIT11.............. >200A :     
    WBIT12.............. >2008 :     
    WBIT13.............. >2006 :     
    WBIT14.............. >2004 :     
    WBIT15.............. >2002 :     
    WBIT2............... >201C :     
    WBIT3............... >201A :     
    WBIT4............... >2018 :     
    WBIT5............... >2016 :     
    WBIT6............... >2014 :     
    WBIT7............... >2012 :     
    WBIT8............... >2010 :     
    WBIT9............... >200E :     
    WCOLMN.............. >833A :     
    WS1................. >8300 :     
    WSDLST.............. >8334 :     
    WSDTMP.............. >8336 :     
    WSPEAK.............. >8338 :     
    WTITAB.............. >832C :     
    WTITMP.............. >8330 :     
    WTIUSR.............. >832E :     
    WVRTKB.............. >8332 :     
    WYX................. >832A :     
    XCONFIG............. >0003 :     
    XCPU.SCRPAD.PGIN.... >2B86 :     
    XCPU.SCRPAD.PGOUT... >2B58 :     
    XFILE.CLOSE......... >2D40 :     
    XFILE.OPEN.......... >2D1E :     
    XFILM............... >224A :     
    XFILV............... >22A2 :     
    XIDTAB.............. >2308 :     
    XLSLOT.............. >2EBA :     
    XPYM2M.............. >24EE :     
    XPYM2V.............. >249A :     
    XPYV2M.............. >24CC :     
    XROM.FARJUMP........ >2F9E :     
    XSAMS.LAYOUT........ >25FE :     
    XSAMS.PAGE.GET...... >254C :     
    XSAMS.PAGE.SET...... >2584 :     
    XSETX............... >26EC :     
    XSTRING.GETLENC..... >2AC2 :     
    XSTRING.LTRIM....... >2A58 :     
    XUTST0.............. >242E :     
    XUTSTR.............. >2430 :     
    XVGETB.............. >22F2 :     
    XVPUTB.............. >22DA :     
    YX2PI1.............. >2724 :     
    YX2PI2.............. >272A :     
    YX2PI3.............. >2734 :     
    YX2PNT.............. >2408 :     
    YX2PX............... >26F6 :     
    YX2PXX.............. >26FA :     
    YX2PXX_C80.......... >2736 :     
    YX2PXX_NORMAL....... >271A :     
    YX2PXX_Y_CALC....... >271E :     
    _EDKEY.ACTION.SCROLL >63BA :     
    _EDKEY.ACTION.SCROLL.EXIT >63BE :     
    _FILE.RECORD.FOP.... >2D7C :     
    _FILE.RECORD.FOP.EXIT >2DCE :     
    _FILE.RECORD.FOP.OPTIMIZED >2DB2 :     
    _FILE.RECORD.FOP.PAB >2DB6 :     
    _IDX.ENTRY.DELETE.REORG >3446 :     
    _IDX.ENTRY.DELETE.REORG.LOOP >344E :     
    _IDX.ENTRY.INSERT.REORG >34BA :     
    _IDX.ENTRY.INSERT.REORG.CRASH >34C0 :     
    _IDX.ENTRY.INSERT.REORG.LOOP >34E8 :     
    _IDX.SAMS.MAPCOLUMN.OFF >3146 :     
    _IDX.SAMS.MAPCOLUMN.OFF.EXIT >3174 :     
    _IDX.SAMS.MAPCOLUMN.ON >3112 :     
    _IDX.SAMS.MAPCOLUMN.ON.EXIT >313C :     
    _IDX.SAMSPAGE.GET... >3180 :     
    _IDX.SAMSPAGE.GET.EXIT >31C6 :     
    _TRAMPOLINE.BANK3... >7AA8 :     
    _TRAMPOLINE.BANK3.RET >7B3C :     
    _TRAMPOLINE.BANK5.RET >7C26 :     
